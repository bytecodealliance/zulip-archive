[
    {
        "content": "<p>I'm trying to figure out the best way to handle dynamic WASM modules in my Rust host. Here's what I'm trying to do:</p>\n<p>I've got a bunch of WASM modules (starting with a simple calculator that has add/subtract functions) that I need to load and call at runtime in the host. The tricky part is that for new modules, I won't know the function names at host compile time. The host will read both the module and function names from a file as strings.</p>\n<p>All my WASM functions will use the same pattern:</p>\n<ul>\n<li>Take a Vec&lt;serde_json::Value&gt;</li>\n<li>Return a serde_json::Value</li>\n<li>Later on, I want to let these modules use file I/O and make HTTP requests</li>\n</ul>\n<p>I've been looking at two approaches:</p>\n<ol>\n<li>Using wasmtime::Val for dynamic function calls</li>\n<li>Using .wit files and the component model</li>\n</ol>\n<p>The Val approach seems workable for runtime loading, though it requires more boilerplate code and needs a wrapper for type safety. WIT and the component model look great but might not be possible for my use case since they seem to require binding generation and component model setup at compile time.</p>\n<p>Key questions:</p>\n<ul>\n<li>Is this a case where using wasmtime::Val directly would be more appropriate?</li>\n<li>Is there any way to handle WIT interfaces dynamically at runtime?</li>\n<li>Or maybe some workaround since I won't know the function names at compile time? Loading different module names at runtime seems fine, but I'm stuck on the function name part.</li>\n</ul>\n<p>Any insight is greatly appreciated.</p>",
        "id": 481450547,
        "sender_full_name": "Utilize3214",
        "timestamp": 1731150050
    },
    {
        "content": "<p>There are also dynamic interfaces for component model types, e.g. <a href=\"https://docs.rs/wasmtime/26.0.1/wasmtime/component/enum.Val.html\"><code>wasmtime::component::Val</code></a></p>",
        "id": 481479619,
        "sender_full_name": "Lann Martin",
        "timestamp": 1731174058
    },
    {
        "content": "<p>Yeah take a look at component::Val and the rest of the component module, there’s ways to do it all dynamically. E.g. you can get whatever functions exported by a component instance <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Instance.html#method.get_func\">https://docs.rs/wasmtime/latest/wasmtime/component/struct.Instance.html#method.get_func</a></p>",
        "id": 481485916,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1731179027
    },
    {
        "content": "<p>Wit is most useful to describe component interfaces and worlds ahead of time, if you’re creating those on the fly and handling them at runtime dynamically then wit might not be useful. Wit is “just” a human friendly syntax for the type system that all components have, using wit isn’t required to use components</p>",
        "id": 481486139,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1731179177
    },
    {
        "content": "<p>Sorry to piggyback, but this question fits in well: i have a bunch of microservices in WASM and I want to expose their state in a typed manner to the runtime. </p>\n<p>I am using WIT for the service components and want to have a function that exposes their internal state. I can't think of any other route besides defining my own value resource/enum and have functions return that. Similar to serde's <code>Value</code>.  Am I unaware of a change that makes this more feasible?</p>",
        "id": 531825236,
        "sender_full_name": "mainrs",
        "timestamp": 1753877083
    },
    {
        "content": "<p>If you only need to interact with the state from the host then you can use the wasmtime features described above. If you want two components to share dynamically typed state then you are correct that some kind of resource or enum based approach would be needed (or just use your favorite serialization format).</p>",
        "id": 531833481,
        "sender_full_name": "Lann Martin",
        "timestamp": 1753879413
    },
    {
        "content": "<p>Note that with an enum (variant) approach you cannot model recursive types: <a href=\"https://github.com/WebAssembly/component-model/issues/56\">https://github.com/WebAssembly/component-model/issues/56</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/56\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/834b62b2bd59b71e75f93bbd1701c29604e17eff/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303363323565623966393062303033363039386534383465663835393961363737363135353932306338646439356661373037396566383739643930346637352f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f3536&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/56\" title=\"Recursive Types · Issue #56 · WebAssembly/component-model\">Recursive Types · Issue #56 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">There was some discussion on recursive types in WebAssembly/interface-types#137. My takeaway was that recursion would be hard to specify with adapter functions. With adapters punted to a post-MVP p...</div></div></div>",
        "id": 531833668,
        "sender_full_name": "Lann Martin",
        "timestamp": 1753879470
    }
]