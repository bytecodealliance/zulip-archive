[
    {
        "content": "<p>My goal is for my webassembly component to be able to access resources which already exist in the host, but I'm having a little trouble.  I'm looking at <a href=\"https://docs.wasmtime.dev/api/wasmtime/component/bindgen_examples/_4_imported_resources/index.html\">this</a> example.  How can the HostLogger constructor access data from elsewhere in the host to make available for the guest, since it only has access to the members of the MyState struct?  Could someone help me with an example that was a reader rather than a logger, or otherwise point me in the right direction?</p>",
        "id": 518976588,
        "sender_full_name": "Timothy",
        "timestamp": 1747618080
    },
    {
        "content": "<p>The theory is that you store the relevant state within <code>MyState</code>, or whatever the <code>Self</code> type is in the <code>Host</code> trait implementation. While not released just yet the documentation <a href=\"https://docs.wasmtime.dev/api/wasmtime/component/trait.HasData.html#example-host-for-t-using-storet\">here</a> should still give some pointers of how to do various patterns perhaps. Does that help?</p>",
        "id": 518990289,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1747628182
    },
    {
        "content": "<p>I was able to follow along that far, storing data to be accessed by imported functions within a MyState struct.  my question is more specifically about imported WIT resources.  I was trying to have a WIT resource backed by data in a MyStruct field, or is that the wrong way to use it and the imported WIT resource should only be backed by what is in the ResourceTable as per the <a href=\"https://docs.wasmtime.dev/api/wasmtime/component/bindgen_examples/_4_imported_resources/index.html\">example</a>?</p>",
        "id": 519154167,
        "sender_full_name": "Timothy",
        "timestamp": 1747669998
    },
    {
        "content": "<p>it's up to you, WASI does a bit of a blend. For resources the <code>HostFoo</code> implementation is probably going to be on something like <code>MyState</code> where the resource you're given is translated to host-specific state through a <code>ResourceTable</code>, but you'll still have access to everything else still in <code>MyState</code> at that time to account for configuration/etc within a method. Either that or I may still be misunderstanding you, so please let me know if that's the case!</p>",
        "id": 519165981,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1747672838
    },
    {
        "content": "<p>Right, I think I was there with you.  This is where I got stuck - trying to load the ResourceTable from the Host side before the Guest runs.  I tried using table.push(Foo{}) from the Host before the Guest runs and then storing the resulting a Resource&lt;Foo&gt; in a field of MyState separate from the ResourceTable, but that's where I got stuck because I can't return that resource in the method which only take &amp;mut self as a parameter.</p>",
        "id": 519258750,
        "sender_full_name": "Timothy",
        "timestamp": 1747702173
    },
    {
        "content": "<p>For that could you create a second <code>Resource</code>? You could call <code>Resource::new_{own,borrow}</code> on the <code>rep</code> value from before to pass that around? That's sort of like calling <code>.clone()</code> but not quite. I've meant to add <code>Clone</code> to the type but haven't gotten around to it yet</p>",
        "id": 519391905,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1747749282
    },
    {
        "content": "<p>Thank you!  I was able to get that to work with Resource::new_own().  Could you explain or point me in the right direction about what it means that this sets the state to AtomicResourceState::NOT_IN_TABLE?  Also, I'd be happy to help with setting up an example for importing a reader resource like this if that would be welcome.</p>",
        "id": 519437609,
        "sender_full_name": "Timothy",
        "timestamp": 1747761248
    }
]