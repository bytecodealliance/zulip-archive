[
    {
        "content": "<p>Hello, hope everyone's having a good day. So I've been playing around with wasmcloud and I'm \"overengineering\" the codegen part to get something nice. Right now, I'm dealing with some issues with using multiple <code>generate!</code>calls. </p>\n<p>I'm using tons of code gen (including custom rust types that I add to the bindings using <code>with</code> and also the wit files themselves) where I'm doing a separate <code>generate!</code> call per feature (http endpoints in this case). In order to facilitate generation, I also have worlds for each feature that will be used to it's corresponding <code>generate!</code> section. My expectation would be then that I'd have a final, top-level world that exports all the feature interfaces and a top-level <code>generate!</code> that will <code>with</code> out to all feature bindings.</p>\n<p>The problem, it seems like my final top-level <code>generate!</code> is not getting an <code>export</code> macro even though it's exporting interfaces that container <code>resources</code> in them.</p>",
        "id": 536925856,
        "sender_full_name": "dman-os",
        "timestamp": 1756571885
    },
    {
        "content": "<p>This might be a bug in <code>generate!</code> perhaps? The <code>with</code> side of the guest isn't as heavily hammered on right now as the <code>with</code> side of a Wasmtime host. Do you have an example repo and/or a reproduction to poke around?</p>",
        "id": 537304477,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1756824869
    },
    {
        "content": "<p>On it!</p>",
        "id": 537346840,
        "sender_full_name": "dman-os",
        "timestamp": 1756839178
    },
    {
        "content": "<p>Hey, sorry for disappearing. Most of the issues I had seemed to disappear on the latest <code>wit-bindgen</code>. But I'm dealing with a new bug around the generated bindings. Specifically, I'm importing <code>wasmcloud:postgres</code>'s interface/wit/provider (not sure what the right term is) but <code>wit-bindgen</code> doesn't seem to map them correctly to rust. Building it for <code>wasm32-wasip2</code> fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"w\">          </span>Caused<span class=\"w\"> </span>by:\n<span class=\"w\">              </span><span class=\"m\">0</span>:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>decode<span class=\"w\"> </span>world<span class=\"w\"> </span>from<span class=\"w\"> </span>module\n<span class=\"w\">              </span><span class=\"m\">1</span>:<span class=\"w\"> </span>module<span class=\"w\"> </span>was<span class=\"w\"> </span>not<span class=\"w\"> </span>valid\n<span class=\"w\">              </span><span class=\"m\">2</span>:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>resolve<span class=\"w\"> </span>import<span class=\"w\"> </span><span class=\"sb\">`</span>wasmcloud:postgres/query@0.1.1-draft::<span class=\"o\">[</span>async-lower<span class=\"o\">]</span>query<span class=\"sb\">`</span>\n<span class=\"w\">              </span><span class=\"m\">3</span>:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>validate<span class=\"w\"> </span>import<span class=\"w\"> </span>interface<span class=\"w\"> </span><span class=\"sb\">`</span>wasmcloud:postgres/query@0.1.1-draft<span class=\"sb\">`</span>\n<span class=\"w\">              </span><span class=\"m\">4</span>:<span class=\"w\"> </span><span class=\"nb\">type</span><span class=\"w\"> </span>mismatch<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"sb\">`</span>query<span class=\"sb\">`</span>:<span class=\"w\"> </span>expected<span class=\"w\"> </span><span class=\"sb\">`</span><span class=\"o\">[</span>I32,<span class=\"w\"> </span>I32<span class=\"o\">]</span><span class=\"w\"> </span>-&gt;<span class=\"w\"> </span><span class=\"o\">[</span>I32<span class=\"o\">]</span><span class=\"sb\">`</span><span class=\"w\"> </span>but<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"sb\">`</span><span class=\"o\">[</span>I32,<span class=\"w\"> </span>I32,<span class=\"w\"> </span>I32,<span class=\"w\"> </span>I32,<span class=\"w\"> </span>I32<span class=\"o\">]</span><span class=\"w\"> </span>-&gt;<span class=\"w\"> </span><span class=\"o\">[</span>I32<span class=\"o\">]</span><span class=\"sb\">`</span>\n</code></pre></div>\n<p>Repro is avail here: <a href=\"https://github.com/dman-os/bad_bindigns_repro/\">https://github.com/dman-os/bad_bindigns_repro/</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dman-os/bad_bindigns_repro/\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/94b00d586b7d8d85f12b1e1ee34922c974834911/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623830656635343164616133643738363961313966353162346335623261373736626563376362326238616361643236383938616234643738633133656662662f646d616e2d6f732f6261645f62696e6469676e735f726570726f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dman-os/bad_bindigns_repro/\" title=\"GitHub - dman-os/bad_bindigns_repro\">GitHub - dman-os/bad_bindigns_repro</a></div><div class=\"message_embed_description\">Contribute to dman-os/bad_bindigns_repro development by creating an account on GitHub.</div></div></div>",
        "id": 537972684,
        "sender_full_name": "dman-os",
        "timestamp": 1757131789
    },
    {
        "content": "<p>Should I take this issue to the wasmcloud devs? It seems like an issue with wit-bindgen to me but maybe their wit files are breaking some convention I'm not smart on.</p>",
        "id": 537973005,
        "sender_full_name": "dman-os",
        "timestamp": 1757132216
    },
    {
        "content": "<p>I don't see any wit path in the second bindgen macro (line 15)</p>",
        "id": 537975544,
        "sender_full_name": "Christof Petig",
        "timestamp": 1757135048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"590366\">@Christof Petig</span> that's going to default path of <code>./wit</code>. And yeah, sorry, the repo contains attempts to reproduce the original issue of this thread (the secondary <code>wit2</code> dir and all being analogue to a shared rust binding lib I have in my real repo). But the main issue at hand is the generated binding mismatch for <code>wasmcloud:query@0.1.0-draft</code> that leads to issues during the wasm-component-ld phase.</p>",
        "id": 538101010,
        "sender_full_name": "dman-os",
        "timestamp": 1757274175
    },
    {
        "content": "<p>Ah I believe you're running into a case where <code>wasm-component-ld</code>, which is producing the component, in stable Rust is too old for this. Switching to <code>cargo +nightly build</code> fixes the example for me</p>",
        "id": 538242331,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757341919
    },
    {
        "content": "<p>Basically it takes time for tooling to propagate in stable Rust so if we fix things it'll take awhile to make its way to stable</p>",
        "id": 538242417,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757341938
    }
]