[
    {
        "content": "<p>The worlds defined in my <a href=\"https://github.com/cdmurph32/c2pa-component/blob/v24/wit/cai.wit\">wit file</a> contain uses  variants with resources which causes wit-bindgen to fail if I use <code>additional_derives: [serde::Deserialize]</code>.<br>\nWould either of these ideas be acceptable? We allow the user to specify records/variants to ignore, or we could confine the additional_derives to specific interfaces.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">additional_derives</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">traits</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">serde</span><span class=\"p\">::</span><span class=\"n\">Serialize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">serde</span><span class=\"p\">::</span><span class=\"n\">Deserialize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Hash</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">PartialEq</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Eq</span><span class=\"p\">],</span>\n<span class=\"n\">ignore</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">input</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">additional_derives</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">traits</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">serde</span><span class=\"p\">::</span><span class=\"n\">Serialize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">serde</span><span class=\"p\">::</span><span class=\"n\">Deserialize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Hash</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">PartialEq</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Eq</span><span class=\"p\">],</span>\n<span class=\"n\">interface</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"adobe:cai/types@0.1.0\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cdmurph32/c2pa-component/blob/v24/wit/cai.wit\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3a39164dd2ea46372423c0ca46f285383270d222/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636263623264323539373531616363306233633566376331346561363566663666623938343239316661653634366337623266396263623239656337623032312f63646d7572706833322f633270612d636f6d706f6e656e74&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cdmurph32/c2pa-component/blob/v24/wit/cai.wit\" title=\"c2pa-component/wit/cai.wit at v24 · cdmurph32/c2pa-component\">c2pa-component/wit/cai.wit at v24 · cdmurph32/c2pa-component</a></div><div class=\"message_embed_description\">WASI P2 component for C2PA. Contribute to cdmurph32/c2pa-component development by creating an account on GitHub.</div></div></div>",
        "id": 504174663,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1741377674
    },
    {
        "content": "<p>That seems like a reasonable extension to me yeah, I'm not sure how exactly to encode this in the macro configuration or CLI but regardless I thnk it's a reasonable feature to have one way or another</p>",
        "id": 504180603,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741380031
    },
    {
        "content": "<p>I don't know how many people are using it, but the change could be backwards compatible:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">additional_derives</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">serde</span><span class=\"p\">::</span><span class=\"n\">Serialize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">serde</span><span class=\"p\">::</span><span class=\"n\">Deserialize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Hash</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">PartialEq</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Eq</span><span class=\"p\">],</span>\n<span class=\"n\">additional_derives_ignore</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">input</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">additional_derives</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">serde</span><span class=\"p\">::</span><span class=\"n\">Serialize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">serde</span><span class=\"p\">::</span><span class=\"n\">Deserialize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Hash</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">PartialEq</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Eq</span><span class=\"p\">],</span>\n<span class=\"n\">additional_derives_interface</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"adobe:cai/types@0.1.0\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 504181579,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1741380459
    },
    {
        "content": "<p>both seem reasonable enough to me yeah</p>",
        "id": 504181982,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741380630
    },
    {
        "content": "<p>PR opened: <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1199/files#top\">feat: Allow variants and records to be ignored by additional_derives</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1199/files#top\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/634312f38cf7b7f8759b21d522bcb1895601b61a/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f333435393335333f733d34303026763d34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1199/files#top\" title=\"feat: Allow variants and records to be ignored by additional_derives by cdmurph32 · Pull Request #1199 · bytecodealliance/wit-bindgen\">feat: Allow variants and records to be ignored by additional_derives by cdmurph32 · Pull Request #1199 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This feature allows some variants and records to use types for which adding traits will cause compilation to fail, such as serde::Deserialize on wasi:io/streams.\nVariants and records are specified ...</div></div></div>",
        "id": 504637367,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1741624639
    }
]