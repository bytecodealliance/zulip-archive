[
    {
        "content": "<p>I'm confused by the memory ownership semantics when using the C binding generator. The project README shows:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">\"host.h\"</span>\n\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">host_run</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">host_string_t</span><span class=\"w\"> </span><span class=\"n\">my_string</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">host_string_set</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">my_string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">host_print</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">my_string</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But the headers generated by <code>wit-bindgen</code> have the following comment on <code>xxx_string_set</code>:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// Transfers ownership of `s` into the string `ret`</span>\n</code></pre></div>\n<p>Which implies to me that <code>ret</code> is going to be freed somewhere. But that doesn't make sense  for the code in the README, considering that <code>xxx_string_set</code> simply stores the pointer and length, so if  <code>my_string</code> were to be freed, it would be freeing a static string.</p>\n<p>Is there documentation somewhere that specifies who is responsible for freeing memory that is passed to an import?</p>",
        "id": 524447627,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750165205
    },
    {
        "content": "<p>I don't know about documentation but the caller is responsible. There should be a <code>host_string_free</code> if I'm understanding the example.</p>",
        "id": 524449649,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750165755
    },
    {
        "content": "<p>The \"transfer ownership\" terminology is a little confusing in context; I think it really just means that the returned struct will own the allocation.</p>",
        "id": 524449962,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750165844
    },
    {
        "content": "<p>There would be a <code>host_string_free</code> defined, but calling it on <code>my_string</code> would call <code>free</code> on something that wasn't allocated via <code>malloc</code></p>",
        "id": 524450072,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750165876
    },
    {
        "content": "<p>OK fair so <em>my</em> terminology was also confusing <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 524450509,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750166009
    },
    {
        "content": "<p>Imports will not free arguments that are passed to them; the generated canonical ABI code may do its own memory management internally but the caller is responsible for anything it constructs and passes in. If you know how to express this in a way that would be more familiar to C devs I'm sure a PR would be welcome.</p>",
        "id": 524450909,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750166128
    },
    {
        "content": "<p>:D <br>\nSo basically nothing will be freed without you explicitly freeing it, <code>xxx_string_set</code> \"takes ownership\" as far as if you eventually call <code>xxx_string_free</code> on the result, you better not have references to the internal string lying around</p>",
        "id": 524450991,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750166152
    },
    {
        "content": "<p>That's clear now, thank you!</p>",
        "id": 524451106,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750166194
    },
    {
        "content": "<p>Note there may be some caveats around resource handles and upcoming async stuff, but otherwise I think that is correct.</p>",
        "id": 524451186,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750166218
    },
    {
        "content": "<p>I think as far as documenting goes, a short description of the ownership model in the C section of the README and a bit more detail in the header comments to indicate the intended use of the functions would be helpful and make it so that users wouldn't have to read between the lines</p>",
        "id": 524451612,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750166353
    },
    {
        "content": "<p>I'd be happy to put in a PR</p>",
        "id": 524451640,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750166363
    },
    {
        "content": "<p>On the flip side, imports may <em>return</em> allocated data and the caller <em>does</em> take ownership of that. iirc you can just blindly call <code>*_free</code> on any non-primitive return values; there should be at least an empty impl generated.</p>",
        "id": 524451781,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750166409
    },
    {
        "content": "<p>Makes sense!</p>",
        "id": 524452091,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750166490
    },
    {
        "content": "<p>The (especially non-Rust) bindings are always in need of more love</p>",
        "id": 524452792,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750166681
    },
    {
        "content": "<p>C means &lt;3</p>",
        "id": 524462964,
        "sender_full_name": "Ralph",
        "timestamp": 1750169436
    },
    {
        "content": "<p>I can probably apologize for the lack of documentation here, sorry!</p>\n<p>Overall the memory ownership story for C is pretty tricky. The bindings are generated in such a way (in theory) that it's possible to use them without memory leaks, but it's not always easy to do so. I have no doubt that existing examples probably leak memory as nothing is checking for no leaks and that internal documentation can likely be improved (e.g. <code>*_string_set</code>)</p>",
        "id": 524468783,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750171000
    },
    {
        "content": "<p>I can go through the code and try to come up with a short document that explains the different functions that can be generated, what their intended uses are, and how to use them for arguments and return values to avoid leaks/bad frees. That can live in <code>crates/c/README.md</code> or some other name and be linked to from the C section of the top-level README. Would that be useful?</p>",
        "id": 524472616,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750172158
    },
    {
        "content": "<p>that would be extremely useful!</p>",
        "id": 524472934,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750172253
    },
    {
        "content": "<p>Cool cool! I'll drop a message here if I need clarity on anything <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 524473108,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750172301
    },
    {
        "content": "<p>I appreciate all the quick responses</p>",
        "id": 524473217,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750172336
    },
    {
        "content": "<p>When someone offers to help suddenly everyone comes out of the woodwork <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 524476596,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750173296
    },
    {
        "content": "<p>EXTREMELY USEFUL LANN</p>",
        "id": 524494090,
        "sender_full_name": "Ralph",
        "timestamp": 1750179287
    },
    {
        "content": "<p>I've made decent progress, but am a bit stuck on the dropping of borrowed handles of imported resources in exported functions</p>",
        "id": 524676819,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750243167
    },
    {
        "content": "<p>My understanding is that, if the guest has a borrowed handle to an imported resource, its responsibility for dropping that handle depends on how that borrow was obtained:</p>\n<ul>\n<li>If the borrow was obtained by calling <code>*_borrow_*</code> on an owned handle, no action is required on the borrow; only the owned handle should be dropped when the guest wants to end the lifetime of the resource</li>\n<li>If the borrow was received as an argument to one of the guest's exported functions, the borrowed handle must be dropped by the guest</li>\n</ul>",
        "id": 524677211,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750243302
    },
    {
        "content": "<p>On that second bullet point, there are two sub-cases that I can see for how the guest is supposed to drop the borrowed handle:</p>\n<ul>\n<li>If <code>--autodrop-borrows=yes</code> is supplied on the command line, the bindings automatically drop the borrowed handle after the implementation of the exported function returns</li>\n<li>If <code>--autodrop-borrows=no</code> is supplied, or that argument is not supplied at all, the guest code must explicitly drop the borrowed handle</li>\n</ul>",
        "id": 524677574,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750243413
    },
    {
        "content": "<p>The problem is, I don't see what it is intended for the guest code to call to explicitly drop the handle for the second case here, as the <code>*_drop_borrow</code> function is only generated if autodrop is enabled</p>",
        "id": 524677924,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750243537
    },
    {
        "content": "<p>My conclusion is that the <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/crates/c/src/lib.rs#L1298\">condition here</a> is inverted and should instead be <code>!self.autodrop_enabled()</code>, so that the guest can manually call <code>*_drop_borrow</code> before exiting the exported function to drop the received borrow handle</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/crates/c/src/lib.rs#L1298\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c74dc9d8a179327ed4f95f2c6ab5f55aca87eb1f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643535626562383432313664366336646433303338643336343635653264346430353038656433396232303934623337663361356137613462653934393831342f62797465636f6465616c6c69616e63652f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/crates/c/src/lib.rs#L1298\" title=\"wit-bindgen/crates/c/src/lib.rs at main · bytecodealliance/wit-bindgen\">wit-bindgen/crates/c/src/lib.rs at main · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - bytecodealliance/wit-bindgen</div></div></div>",
        "id": 524678344,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750243688
    },
    {
        "content": "<p>But perhaps some the understanding I've written leading up to this conclusion is wrong</p>",
        "id": 524678666,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750243798
    },
    {
        "content": "<p>Agreed with you, I think that's a typo and not-very-broadly-tested code, the <code>*_drop_borrow</code> functions should definitely be provided if autodrop is disabled</p>",
        "id": 524729980,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750259444
    },
    {
        "content": "<p>Also can confirm your understanding of it all is indeed correct <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 524730004,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750259452
    },
    {
        "content": "<p>Cool, I can make a PR for that</p>",
        "id": 524730112,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750259480
    },
    {
        "content": "<p>If you're feeling particularly ambitious we've also nowadays got a system that's much more robust for adding tests for various bindings generators, so you an also try adding a test to <code>tests/runtime/*</code> for this behavior too</p>",
        "id": 524730736,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750259644
    },
    {
        "content": "<p>Maybe this indicates that autodrop could be made the default? Since the <code>*_drop_borrow</code> functions haven't been provided for non-autodrop builds since January last year, it seems that any users of borrowed imported resources in exported functions must either:</p>\n<ul>\n<li>Have since turned autodrop on</li>\n<li>Be leaking borrowed handles</li>\n<li>Have resorted to calling the dropping intrinsic directly (icky icky)<br>\nMaking it the default would cause that last group to double-free their borrowed handles, but you'd know better if anybody falls into that group <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></li>\n</ul>",
        "id": 524730834,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750259669
    },
    {
        "content": "<p>I fear you might be overestimating the number of users of the C bindings with borrows of imported resources in exports heh, I'd expect that set of folks to be almost empty</p>",
        "id": 524731572,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750259908
    },
    {
        "content": "<p>but historically the reason I wanted autodrop turned off is that it doesn't support all signatures, but I also wanted bindings to be possible to generate by default</p>",
        "id": 524731659,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750259934
    },
    {
        "content": "<p>Yep, that is what I imagined <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 524731682,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750259940
    },
    {
        "content": "<p>so it's a bit of a tradeoff with autodrop, it's (a) unambiguously nicer IMO but (b) more restrictive</p>",
        "id": 524731759,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750259963
    },
    {
        "content": "<p>Ah, makes sense!</p>",
        "id": 524731780,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750259970
    },
    {
        "content": "<p>IIRC I think <code>list&lt;borrow&lt;thing&gt;&gt;</code> in an exported function's arguments won't be supported and the bindings generation process should panic/fail</p>",
        "id": 524731835,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750259984
    },
    {
        "content": "<p>it's always lists ;_;</p>",
        "id": 524731872,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750259996
    },
    {
        "content": "<p>With the imported resources thing cleared up, I'm aaaalmost done with the doc draft</p>",
        "id": 524731979,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750260025
    },
    {
        "content": "<p>The last bit I'm a unsure about is some parts of exported resources:</p>\n<ol>\n<li>\n<p>It seems that the <code>*_drop_borrow</code> function gets defined for exported resources if the exported resource is used in an imported function. Am I right that there's no reason for this to happen and the component that exports the resource should never drop a borrowed handle to that resource, even if it receives one as an argument in one of its exported functions?</p>\n</li>\n<li>\n<p>I'm not sure about the intended allocation and destruction pattern for the resource. Say I have a resource like:</p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package cat:registry;\n resource cat {\n    get-name: func() -&gt; string;\n    get-nicknames: func() -&gt; list&lt;string&gt;;\n}\n</code></pre></div>\n<p>And I define the internal representation like this:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">exports_cat_registry_cat_registry_api_cat_t</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">cat_registry_string_t</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">cat_registry_list_string_t</span><span class=\"w\"> </span><span class=\"n\">nicknames</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>Is the intended lifecycle of a single <code>cat</code> resource as follows:</p>\n<ul>\n<li><code>malloc</code> an <code>exports_cat_registry_cat_registry_api_cat_t </code></li>\n<li>Fill in the <code>name</code> and <code>nicknames</code> fields</li>\n<li>Call <code>exports_cat_registry_cat_registry_api_cat_new</code> with the <code>malloc</code>ed pointer</li>\n<li>Pass around the returned handle, do whatever</li>\n<li>Eventually call <code>exports_cat_registry_cat_registry_api_cat_drop_own</code></li>\n<li>Dropping the owning reference automatically calls <code>exports_cat_registry_cat_registry_api_cat_destructor</code></li>\n<li><code>exports_cat_registry_cat_registry_api_cat_destructor</code> should clean up the <code>name</code> and <code>nicknames</code> fields, then call <code>free</code> on the argument to the destructor</li>\n</ul>",
        "id": 524735457,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750261084
    },
    {
        "content": "<blockquote>\n<p>Am I right that there's no reason for this to happen and the component that exports the resource should never drop a borrowed handle to that resource, even if it receives one as an argument in one of its exported functions?</p>\n</blockquote>\n<p>Correct, it's not actually even possible for a borrow handle to make its way to the component defining the handle. When an export receives a borrow of a resource the component defined it gets a rep, not a handle, so there's fundamentally nothing to drop</p>",
        "id": 524738191,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750261979
    },
    {
        "content": "<blockquote>\n<p>Is the intended lifecycle of a single <code>cat</code> resource as follows:</p>\n</blockquote>\n<p>That all looks correct to me yeah</p>",
        "id": 524738328,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750262026
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 524739568,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750262396
    },
    {
        "content": "<p>Another exported resource question. Given this definition:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package cat:registry;\n\ninterface cat-registry-api {\n    resource cat {\n        get-name: func() -&gt; string;\n        get-nicknames: func() -&gt; list&lt;string&gt;;\n    }\n}\n\ninterface cat-registry-user-api {\n    use cat-registry-api.{cat};\n    init: func();\n    notify-cat-registered: func(cat: borrow&lt;cat&gt;);\n}\n\nworld cat-registry {\n    import cat-registry-user-api;\n    export cat-registry-api;\n    export wasi:cli/run@0.2.6;\n}\n</code></pre></div>\n<p>I expect that, when generating bindings for <code>cat-registry</code>, the bindings for <code>notify-cat-registered</code> should take a pointer to the resource repr. But instead, the generator seems to treat it as if I'm importing <code>cat</code> because it is appearing in the context of an import (the <code>cat-registry-user-api</code> interface)</p>",
        "id": 524760882,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750270750
    },
    {
        "content": "<p>Which is why the <code>*_drop_borrow</code> from my earlier question gets generated</p>",
        "id": 524760944,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750270782
    },
    {
        "content": "<p>More concretely, the generator declares this:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">cat_registry_cat_registry_user_api_notify_cat_registered</span><span class=\"p\">(</span><span class=\"n\">cat_registry_cat_registry_user_api_borrow_cat_t</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>When I expect it to generate this:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">cat_registry_cat_registry_user_api_notify_cat_registered</span><span class=\"p\">(</span><span class=\"n\">exports_cat_registry_cat_registry_api_borrow_cat_t</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 524761130,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750270865
    },
    {
        "content": "<p>I think the generator is missing tracking of whether a resource that appears in an imported function is one that the component we're generating for is exporting</p>",
        "id": 524761236,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750270913
    },
    {
        "content": "<p>Am I on the right lines, or is there some way I'm missing to do the right thing with the generated bindings, or some issue with my WIT?</p>",
        "id": 524761398,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750270980
    },
    {
        "content": "<p>Ah ok so you're hitting on a particular subtle point of the component model</p>",
        "id": 524763171,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750271703
    },
    {
        "content": "<p>this is working as expected, but it's known to be surprising, lemme see if I can dig up any  docs on this</p>",
        "id": 524763197,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750271716
    },
    {
        "content": "<p>hm ok no shame on me those don't exist...</p>\n<p>Anyway the basic limitation here is that imports into a component cannot refer to types defined in the component itself, e.g. exports, as that would create a cycle which can't otherwise be broken. Effectively the exported resource is a type that doesn't actually exist until the component is instantiated, meaning that imports, which must exist before the component is instantiated, otherwise couldn't exist.</p>\n<p>This then leads to the question \"why is this valid WIT?\" and that gets into the concept of world elaboration. A small digression is exploring what happens if you write down <code>import wasi:filesystem/preopens</code>. That's also a valid WIT file but the <code>preopens</code> interface depends on <code>wasi:filesystem/types</code>, so somehow that has to get resolved. What ends up happening here is something I've been calling world elaboration where <code>import</code> statements transitively, and automatically, import dependency interfaces too.</p>\n<p>Coming back to your example, if you do a <code>wasm-tools component wit</code> to print the elaborated form of the WIT you'll see that <code>world cat-registry</code> actually does <code>import cat-registry-api</code> despite you not actually writing this down. That's beause <code>cat-registry-user-api</code> depends on <code>cat-registry-api</code>, and it's otherwise not imported, so it's then forcibly imported.</p>\n<p>So at the end of the day what you actually wrote down is both importing and exporting <code>cat-registry-api</code>. The <code>notify-cat-registered</code> function is referring to the imported resource, and the exported function is referring to a different resource, one that's exported</p>",
        "id": 524763765,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750271972
    },
    {
        "content": "<p>There's unfortunately a lot of subtelty about this which can come up relatively quickly when folks are initially learning/playing around with WIT. If you're working with preexisting WIT you tend to be fine as this situation doesn't come up, but this is something where we could definitely have better documentation</p>",
        "id": 524763867,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750272024
    },
    {
        "content": "<p>Ah, I understand, thanks for the detailed explanation!</p>",
        "id": 524767448,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750273549
    },
    {
        "content": "<p>Apologies, I'm still having trouble wrapping my head round some of these subtleties. I can successfully create a component that imports some resource and exports a function that takes a borrow of that resource. But I'm struggling to create a configuration by which I can actually call that exported function, likely due to misunderstanding some of the finer points of the component model.</p>\n<p>Say I have the following WIT:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package cat:example;\n\ninterface registry-api {\n    resource cat {\n        get-name: func() -&gt; string;\n        get-nicknames: func() -&gt; list&lt;string&gt;;\n    }\n    adopt-cat: func(name: string) -&gt; option&lt;cat&gt;;\n}\n\ninterface adoption-authority-api {\n    use registry-api.{cat};\n    // The function I am trying to call\n    notify-adoption: func(cat: borrow&lt;cat&gt;);\n}\n\nworld adoption-authority {\n    import registry-api;\n    export adoption-authority-api;\n}\n\nworld adopter {\n    import adoption-authority-api;\n    export init: func();\n}\n\nworld registry {\n    export registry-api;\n    export wasi:cli/run@0.2.6;\n}\n</code></pre></div>\n<p>The idea is that the <code>adopter</code> calls <code>registry/adopt-cat</code> in order to retrieve an owing handle to a <code>cat</code>. <code>adopter</code> then calls <code>adoption-authority/notify-adoption</code>, passing it a borrow of its owned handle.</p>",
        "id": 524884504,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750339092
    },
    {
        "content": "<p>Composing these with <code>wac plug</code> fails, which I'm guessing is because it sees the import of <code>cat</code> inside <code>adoption-authority</code> and <code>adopter</code> as separate types</p>",
        "id": 524884660,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750339147
    },
    {
        "content": "<p>So I try to do it with <code>wac compose</code>, hoping that this will be more successful by instantiating <code>registry</code> once and using that to fulfil the imports of both <code>adopter</code> and <code>adoption-authority</code>. Using this script:</p>\n<div class=\"codehilite\" data-code-language=\"wac\"><pre><span></span><code>package cat:composition;\n\nlet registry = new cat:registry{};\n\nlet authority = new cat:adoption-authority {\n    registry-api: registry\n};\n\nlet adopter = new cat:adopter {\n    adoption-authority-api: authority,\n    registry-api: registry\n};\n\nexport registry.run;\n</code></pre></div>\n<p>I get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"err\">×</span><span class=\"w\"> </span><span class=\"n\">mismatched</span><span class=\"w\"> </span><span class=\"n\">instantiation</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">cat</span><span class=\"p\">:</span><span class=\"nc\">example</span><span class=\"o\">/</span><span class=\"n\">registry</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"err\">╰─▶</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">cat</span><span class=\"err\">`</span>\n<span class=\"w\">   </span><span class=\"err\">╭─</span><span class=\"p\">[</span><span class=\"n\">registry</span><span class=\"p\">.</span><span class=\"n\">wac</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">authority</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"p\">:</span><span class=\"nc\">adoption</span><span class=\"o\">-</span><span class=\"n\">authority</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\">     </span><span class=\"n\">registry</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">registry</span>\n<span class=\"w\">   </span><span class=\"err\">·</span><span class=\"w\">     </span><span class=\"err\">──────┬─────</span>\n<span class=\"w\">   </span><span class=\"err\">·</span><span class=\"w\">           </span><span class=\"err\">╰──</span><span class=\"w\"> </span><span class=\"n\">mismatched</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">cat</span><span class=\"p\">:</span><span class=\"nc\">example</span><span class=\"o\">/</span><span class=\"n\">registry</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"err\">`</span>\n<span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">   </span><span class=\"err\">╰────</span>\n</code></pre></div>",
        "id": 524885151,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750339303
    },
    {
        "content": "<p>There's clearly some fundamental issue with my understanding of the import and export system. I'd be totally happy for a \"what you're doing is totally unsupported\" answer, I'm just hoping for an example that calls an exported function that has an imported resource as an argument.</p>",
        "id": 524885809,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750339507
    },
    {
        "content": "<p>wac  may also not be perfect yet, as the tools have to keep pace.... and maintainers are spilt all over. :-)</p>",
        "id": 524889233,
        "sender_full_name": "Ralph",
        "timestamp": 1750340543
    },
    {
        "content": "<p>Aha! The problem was my WAC syntax was wrong, I need to manually select the interface from the component like</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>let authority = new cat:adoption-authority {\n    registry-api: registry.registry-api,\n};\n</code></pre></div>",
        "id": 524894459,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750342085
    },
    {
        "content": "<p>It works!!!!</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">registry</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Initialised</span>\n<span class=\"p\">[</span><span class=\"n\">adopter</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Attempting</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">adopt</span><span class=\"w\"> </span><span class=\"n\">Poptart</span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"p\">[</span><span class=\"n\">registry</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Adopted</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"p\">:</span>\n<span class=\"p\">[</span><span class=\"n\">registry</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Poptart</span>\n<span class=\"p\">[</span><span class=\"n\">adopter</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Adopted</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">:</span>\n<span class=\"p\">[</span><span class=\"n\">adopter</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Poptart</span>\n<span class=\"p\">[</span><span class=\"n\">adoption</span><span class=\"o\">-</span><span class=\"n\">authority</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Notified</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">adoption</span>\n<span class=\"p\">[</span><span class=\"n\">adoption</span><span class=\"o\">-</span><span class=\"n\">authority</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Cat</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">:</span>\n<span class=\"p\">[</span><span class=\"n\">adoption</span><span class=\"o\">-</span><span class=\"n\">authority</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Poptart</span>\n<span class=\"p\">[</span><span class=\"n\">adopter</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Adoption</span><span class=\"w\"> </span><span class=\"n\">complete</span><span class=\"o\">!</span>\n<span class=\"p\">[</span><span class=\"n\">registry</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Destroyed</span>\n</code></pre></div>",
        "id": 524906237,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750346031
    },
    {
        "content": "<p>Alright, the documentation is ready for review: <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1319\">https://github.com/bytecodealliance/wit-bindgen/pull/1319</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1319\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/098d7293bbbbbc980e8fb6bbbfebccb15035ea9d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353033373437333466383033313635396665623935333163356530663936313834396230363635313036653031616137396631306463383030636336643533622f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f31333139&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1319\" title=\"Add documentation for the C binding generator by TartanLlama · Pull Request #1319 · bytecodealliance/wit-bindgen\">Add documentation for the C binding generator by TartanLlama · Pull Request #1319 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">Improves the documentation for the C binding generator:\n\nAdds a new documentation component to crates/c/README.md with extensive documentation on generated bindings\nLinks to the documentation from ...</div></div></div>",
        "id": 524917423,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750350152
    },
    {
        "content": "<p>The TartanLlama Abides.</p>",
        "id": 524922533,
        "sender_full_name": "Ralph",
        "timestamp": 1750352382
    },
    {
        "content": "<blockquote>\n<p>Apologies, I'm still having trouble wrapping my head round some of these subtleties.</p>\n</blockquote>\n<p>You and <em>almost</em> everyone else <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 524933514,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750358388
    },
    {
        "content": "<p>(back today)</p>\n<p>Ah yeah I would comment saying that the WIT you describe above should indeed work, and I'm glad the wac syntax got sorted out! I'm still learning wac myself :)</p>\n<p>I should be able to review the C docs today as well, thanks again!</p>",
        "id": 525049718,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750428599
    },
    {
        "content": "<p>Thanks! I also submitted a PR to fix the non-autodropped borrows case, including a runtime test: <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1320\">https://github.com/bytecodealliance/wit-bindgen/pull/1320</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1320\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ca5834a0a9d2b9b185879bd219dc2b5f966f85a3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326632383765333133343232643662366639363033363833656239353765623635656566636137613032366264303561383639666537633134386631656438392f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f31333230&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1320\" title=\"[C] Generate explicit borrow dropping functions when autodrop borrows is disabled by TartanLlama · Pull Request #1320 · bytecodealliance/wit-bindgen\">[C] Generate explicit borrow dropping functions when autodrop borrows is disabled by TartanLlama · Pull Request #1320 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">Currently, the *_drop_borrow bindings are only generated when autodropping borrows is enabled, whereas it should be the other way around. This affects the case where a component exports a function ...</div></div></div>",
        "id": 525058783,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750431782
    },
    {
        "content": "<p>I couldn't seem to run the tests with <code>cargo test</code> as explained in the documentation though; I had to use <code>wit-bindgen test</code>. Is the documentation out of date or did I do something wrong?</p>",
        "id": 525058971,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750431847
    },
    {
        "content": "<p>By which I mean running <code>cargo test -p wit-bindgen-cli --no-default-features -F c</code> prints</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">test</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">verify_cli</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span>\n\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ok</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">passed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">ignored</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">measured</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">filtered</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">finished</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Which doesn't seem like it's running all the tests, and if I intentionally break one, it still passes</p>",
        "id": 525060002,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750432267
    },
    {
        "content": "<p>Seems like maybe a similar change to this is required to the entire readme: <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1310\">https://github.com/bytecodealliance/wit-bindgen/pull/1310</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1310\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/bcc6472e0e7a422df060571046515d3dd36cf806/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653564316438633962643934383830323136303630373364623730376135316433643039376462316262373434613662313836616661336134333237623162652f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f31333130&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1310\" title=\"adds command for the codegen tests to readme by elmerbulthuis · Pull Request #1310 · bytecodealliance/wit-bindgen\">adds command for the codegen tests to readme by elmerbulthuis · Pull Request #1310 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">We read every piece of feedback, and take your input very seriously.</div></div></div>",
        "id": 525061686,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750432891
    },
    {
        "content": "<p>oh sorry yeah that's out of date docs</p>",
        "id": 525062321,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750433126
    },
    {
        "content": "<p>nowadays it's, from the root of the repo:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"n\">rust</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">artifacts</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">artifacts</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"o\">-</span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">guest</span><span class=\"o\">-</span><span class=\"n\">rust</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">runtime</span>\n</code></pre></div>",
        "id": 525062439,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750433168
    },
    {
        "content": "<p>you can also pass just <code>-l c</code> to skip rust tests</p>",
        "id": 525062496,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750433193
    },
    {
        "content": "<p>Cool cool, I'll make a PR for that too!</p>",
        "id": 525063067,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750433368
    },
    {
        "content": "<p>Thanks for all the feedback! Will likely address it on Monday</p>",
        "id": 525114803,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750462616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/channel/327223-wit-bindgen/topic/Memory.20ownership.20with.20the.20C.20binding.20generator/near/524763765\">said</a>:</p>\n<blockquote>\n<p>Anyway the basic limitation here is that imports into a component cannot refer to types defined in the component itself <em>snip</em></p>\n</blockquote>\n<p>I took your explanation and <a href=\"https://tartanllama.xyz/posts/wasm-circular-dependencies/\">drafted a blog post</a> that explains all of this in more detail. Mostly for my own benefit, but hopefully it'll be useful to point people at if they make the same mistakes I did. If you happen to have time to give it a look for correctness, I'd much appreciate it!  Otherwise I'll just yeet it to the public in the next week or so and hope there are no mistakes <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://tartanllama.xyz/posts/wasm-circular-dependencies/\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/51d90b7e6ba77c61759a8e048dedbdc92b099760/68747470733a2f2f74617274616e6c6c616d612e78797a2f706f7374732f7761736d2d63697263756c61722d646570656e64656e636965732f696e6465782e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://tartanllama.xyz/posts/wasm-circular-dependencies/\" title=\"WebAssembly Components: Circular Dependencies and World Elaboration | Sy Brand\">WebAssembly Components: Circular Dependencies and World Elaboration | Sy Brand</a></div><div class=\"message_embed_description\">Why circular dependencies between imports and exports don't work, but seem valid</div></div></div>",
        "id": 525748556,
        "sender_full_name": "Sy Brand",
        "timestamp": 1750868275
    },
    {
        "content": "<p>Oh that's a fantastic post, I'm definitely going to save this and link this to others when this situation comes up!</p>\n<p>All looks accurate to me as well, thanks for taking the time to do this!</p>",
        "id": 525762389,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750873563
    }
]