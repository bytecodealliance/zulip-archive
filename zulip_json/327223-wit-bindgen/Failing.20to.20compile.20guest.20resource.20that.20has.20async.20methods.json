[
    {
        "content": "<p>My wit definition file is shared between guest and host and looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>interface abi {\n    resource plugin {\n       constructor();\n\n       call-me: func() -&gt; list&lt;string&gt;;\n    }\n}\n\nworld platform {\n    include wasi:keyvalue/imports@0.2.0-draft;\n    export abi;\n}\n</code></pre></div>\n<p>The <code>keyvalue</code> include is from the <code>wasi-keyvalue</code> repository and I use wit-deps to download the 0.2.0 draft tag.</p>\n<p>My component implements the resource and provides it to the host. It has to do some networking and I wanted to re-use the same <code>Client</code> instance, therefore I converted my original <code>plugin</code> interface to a resource.</p>\n<p>I am building the code using <code>cargo build --target wasm32-wasip1</code> and wanted to use <code>wasm-tools component new</code> to lift it into a p2 component. From my understanding, I cannot simply use <code>cargo build</code>, since the <code>keyvalue</code> include would mean that I have to provide an implementation at compile time. And <code>cargo component</code> lets me link the missing functions at runtime using <code>wasmtime</code>.</p>\n<p>I get this error and I do not understand why this happens:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">skip</span><span class=\"o\">-</span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">      </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip1</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">plugin</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">adapt</span><span class=\"w\"> </span><span class=\"n\">wasi_snapshot_pre</span>\n<span class=\"n\">view1</span><span class=\"p\">.</span><span class=\"n\">reactor</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">encode</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">decode</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">module</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">valid</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">resolve</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"cp\">$root</span><span class=\"p\">::[</span><span class=\"n\">subtask</span><span class=\"o\">-</span><span class=\"n\">cancel</span><span class=\"p\">]</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">no</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"n\">imported</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">subtask</span><span class=\"o\">-</span><span class=\"n\">cancel</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">specified</span>\n</code></pre></div>\n<p>This is how the guest's <code>lib.rs</code> file:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">ugl</span><span class=\"p\">::</span><span class=\"n\">plugins</span><span class=\"p\">::</span><span class=\"n\">abi</span><span class=\"p\">::{</span><span class=\"n\">Guest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">GuestPlugin</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">myhttpclient</span><span class=\"p\">::</span><span class=\"n\">MyHttpClient</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">keyvalue</span><span class=\"p\">::{</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">::</span><span class=\"n\">Bucket</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"p\">;</span>\n\n<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"platform\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"../wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// These are host-provided.</span>\n<span class=\"w\">        </span><span class=\"s\">\"wasi:keyvalue/atomics@0.2.0-draft\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">generate</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"wasi:keyvalue/batch@0.2.0-draft\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">generate</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"wasi:keyvalue/store@0.2.0-draft\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">generate</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Component</span><span class=\"p\">;</span>\n<span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"p\">);</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Plugin</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Plugin</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Plugin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">client</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">MyHttpClient</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">kv</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Bucket</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">GuestPlugin</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Plugin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[doc = </span><span class=\"s\">\" Creates a new instance of the plugin.\"</span><span class=\"cp\">]</span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(async_fn_in_trait)]</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">client</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">MyHttpClient</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"c1\">// SAFETY: plugins can expect to have a key-value store available.</span>\n<span class=\"w\">            </span><span class=\"n\">kv</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">keyvalue</span><span class=\"p\">::</span><span class=\"n\">store</span><span class=\"p\">::</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"default\"</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">())</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"Failed to open default key-value store for plugin\"</span><span class=\"p\">)),</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[allow(async_fn_in_trait)]</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">call_me</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// let result = self.client.get(...);</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Maybe I am understanding something wrong. I would appreciate any kind of help and guidance on this matter. Thank you very much!</p>",
        "id": 521142645,
        "sender_full_name": "mainrs",
        "timestamp": 1748541357
    },
    {
        "content": "<p>I followed this guide by Fermyon who managed to use async on the guest side in spin:<br>\n<a href=\"https://www.fermyon.com/blog/looking-ahead-to-wasip3\">https://www.fermyon.com/blog/looking-ahead-to-wasip3</a></p>\n<p>But the same dependencies fail for me.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.fermyon.com/blog/looking-ahead-to-wasip3\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/229d2b4de6db81739cf67679f7d7cd69dd2e1075/68747470733a2f2f7777772e6665726d796f6e2e636f6d2f7374617469632f696d6167652f7477632d7761736970332e6a7067&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.fermyon.com/blog/looking-ahead-to-wasip3\" title=\"Looking Ahead to WASIp3\">Looking Ahead to WASIp3</a></div><div class=\"message_embed_description\">A look at Preview 3 (WASIp3) the next major release of WASI - which brings composable concurrency to Wasm components.</div></div></div>",
        "id": 521170690,
        "sender_full_name": "mainrs",
        "timestamp": 1748552776
    },
    {
        "content": "<p>I found the difference! I was building my wasm binary using <code>cargo build -p plugin --target wasm32-wasip1</code>. Using <code>cargo build --manifest-path plugin/Cargo.toml --target wasm32-wasip1</code> worked without issues.</p>\n<p>Does anyone know why???</p>",
        "id": 521175663,
        "sender_full_name": "mainrs",
        "timestamp": 1748554991
    },
    {
        "content": "<p>Is there a <code>plugin/.cargo</code> directory? I'm not sure if cargo will look there when using <code>--manifest-path</code>. Though...the only thing relevant I would expect there would be <code>target = \"wasm-waspi1\"</code> which you already have covered... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 521177387,
        "sender_full_name": "Lann Martin",
        "timestamp": 1748555872
    },
    {
        "content": "<p>Maybe something about <code>wit_bindgen::generate!</code>'s handling of relative paths? <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 521177909,
        "sender_full_name": "Lann Martin",
        "timestamp": 1748556063
    }
]