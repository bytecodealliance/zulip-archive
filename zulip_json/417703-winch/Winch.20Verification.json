[
    {
        "content": "<p>I'm working on formally verifying that <a href=\"https://github.com/jetafese/winch/tree/codegen\">winch</a> specific code (codegen context, masm, asm) is panic free. Is this something that anyone else has worked on/interested in working on?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/jetafese/winch/tree/codegen\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d5355f2d6d6312edab28859fd2b4ebc20cd1380d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663966636165316464663535383132353966666463356437313337633438373936616537363839633533616131383361666633646536323763343030623739342f6a657461666573652f77696e6368&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/jetafese/winch/tree/codegen\" title=\"GitHub - jetafese/winch at codegen\">GitHub - jetafese/winch at codegen</a></div><div class=\"message_embed_description\">A fork of wasmtime winch . Contribute to jetafese/winch development by creating an account on GitHub.</div></div></div>",
        "id": 503878884,
        "sender_full_name": "Joseph",
        "timestamp": 1741291049
    },
    {
        "content": "<p>Through this exercise, I've noticed that some properties have a run time check while others do not. For example, when adding two values, there is a check that ensures the dst register is different from the lhs register. However, there isn't a check to ensure that the operand size and the register size are compatible. What is the thinking behind this?</p>",
        "id": 503879129,
        "sender_full_name": "Joseph",
        "timestamp": 1741291138
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"885770\">@Joseph</span> ,  I did an initial pass on ensuring that the error reporting infrastructure is recoverable in certain scenarios e.g, returning a recoverable error when reaching an unsupported Wasm instruction for example rather than panicking. That said though, there are cases in which a panic is probably the right thing to do, like when a compilation  or register allocation invariant is broken (here's the PR for reference <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9851\">https://github.com/bytecodealliance/wasmtime/pull/9851</a>)</p>\n<blockquote>\n<p>For example, when adding two values, there is a check that ensures the dst register is different from the lhs register. However, there isn't a check to ensure that the operand size and the register size are compatible. What is the thinking behind this? </p>\n</blockquote>\n<p>The main motivation for this is the design behind the MacroAssembler (assuming that <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/isa/x64/masm.rs#L3099\">this</a> is what you're referring to); we have a design that makes it relatively easy to accommodate architectures that use three-argument-form (e.g., RISC-V, ARM64, etc), so we have those checks to ensure that the callers aren't mistakenly passing wrong argument forms, however, those checks are pretty currently specific to x64 IIRC.</p>\n<p>Regarding the relationship between operand size and registers, a couple of things to take into account: (i)  it's the operand size that drives how a particular instruction will use the bits of a given register (ii) registers don't have a explicit notion of size, generally speaking the number of bits available will be determined by the architecture type, in this case it's assumed to be 64-bits/128-bits but in the future this could as well be 32-bits, but all those details are encapsulated at the MacroAssembler level, which is meant to be ISA-specific and not something to be dictated by the MacroAssembler consumers (iii) Winch has a notion of <code>TypedReg</code> which is ISA-agnostic and helps validate the semantics of certain operations (e.g., <code>extend</code>,  <code>wrap</code>'), but this concept doesn't reach and should probably never reach the MacroAssembler layer.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9851\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3d36631811cfb273b4d43c6d6fa72e031836fd64/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653233323239373532353065333466386566626232353163633766393637343364346431333838343166633164353133623735376432663366633032373837302f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39383531&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9851\" title=\"winch: Gracefully handle compilation errors by saulecabrera · Pull Request #9851 · bytecodealliance/wasmtime\">winch: Gracefully handle compilation errors by saulecabrera · Pull Request #9851 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Closes: #8096\nThis commit threads anyhow::Result  through most of Winch&#39;s compilation process in order to gracefully handle compilation errors instead of panicking.\nThe error classification is ...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/isa/x64/masm.rs#L3099\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/60d320d38ec208831d114e4c61f460052480e9f9/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656338396430636233396538613832336166663434303934656166653466386461363266313939373538373938633464623437323434313963366365616162622f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/isa/x64/masm.rs#L3099\" title=\"wasmtime/winch/codegen/src/isa/x64/masm.rs at main · bytecodealliance/wasmtime\">wasmtime/winch/codegen/src/isa/x64/masm.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 503889097,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1741294739
    },
    {
        "content": "<p>One thing worth clarifying though: my work on improving the error infrastructure is not \"formal\" by any means. It came mostly from a need for a  better integration story with our testing and fuzzing infrastructure.</p>",
        "id": 503890351,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1741295189
    },
    {
        "content": "<p>I can understand that. Would the cases where a signed division, for example, is expected to operate on 64bit TypedRegisters and returns a 32bit TypedReg be detected at the parser level?</p>",
        "id": 503890743,
        "sender_full_name": "Joseph",
        "timestamp": 1741295336
    },
    {
        "content": "<p>The logic behind the encapsulation and separation of concerns makes sense. I'm looking at things from the perspective of formally verifying the sequence of calls, hence the specific questions! Your distinction between internal and external errors, for example, is an interesting starting point since it helps build an intuition for the expected behaviour of winch</p>",
        "id": 503891086,
        "sender_full_name": "Joseph",
        "timestamp": 1741295472
    },
    {
        "content": "<blockquote>\n<p>for example, is expected to operate on 64bit TypedRegisters and returns a 32bit TypedReg be detected at the parser level?   </p>\n</blockquote>\n<p>Since Winch is very specific to Wasm ( and not a general purpose code generator), our lowering rules are pretty much tied to the Wasm semantics, and many of the concepts introduced at the MacroAssembler layer try to accommodate those semantics through an ISA-agnostic interface. For example the case of division: in some architectures, division requires specific registers to be used, so in order to meet that requirement without potentially affecting the lowering of other architectures that don't have such constraint you'll notice that the signature doesn't match one-to-one to the instruction and instead we pass in the register allocation infrastructure so that each ISA implementation can decide with what registers they'd like to work with to lower a particular Wasm instruction.</p>",
        "id": 503892158,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1741295876
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"411395\">@Saúl Cabrera</span> I've been helping <span class=\"user-mention\" data-user-id=\"885770\">@Joseph</span> here a bit with his work on formal verification of properties of winch (initially fairly shallow ones like \"panic freedom\", but the structure of the \"unit proofs\" is fairly general and anything you can write as an assert is potentially fair game) .. and we've been wondering if the work would ultimately be of any interest to y'all upstream. </p>\n<p>there's a little bit of adaptation work required to make the codebase amenable to the tool he's using -- finitizing and hard-wiring some stuff, swapping in mocks / stubs or compiling-out areas not under investigation, probably mostly changes that could be gated by a separate <code>--feature</code> flag and/or some extra targets -- but .. in theory it seems like it could be an interesting or valuable addition to your CI / QA processes. if you're interested!</p>",
        "id": 511782390,
        "sender_full_name": "Graydon Hoare",
        "timestamp": 1744438977
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"634398\">@Graydon Hoare</span> from a correctness and robustness point of view I agree that some form of verification sounds appealing and I think it might make sense to explore what would it take to potentially upstream this work. That said, I think that as a first step, it would be beneficial to discuss more concretely, ideally through an issue, the main changes that you're proposing (if the changes are major, we could as well consider creating an RFC <a href=\"https://github.com/bytecodealliance/rfcs\">https://github.com/bytecodealliance/rfcs</a>).  Personally, I'd like to understand a bit more how these changes  will play with the current architecture of the compiler, mainly around the maintainability and performance aspects.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/rfcs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d3e0527c125bdf510d70198a49c2adf9e114bcd4/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663233623165666333333331663535333135393137663564643035616330323635626164613461303736346336613135333638386237343231663230316339632f62797465636f6465616c6c69616e63652f72666373&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/rfcs\" title=\"GitHub - bytecodealliance/rfcs: RFC process for Bytecode Alliance projects\">GitHub - bytecodealliance/rfcs: RFC process for Bytecode Alliance projects</a></div><div class=\"message_embed_description\">RFC process for Bytecode Alliance projects. Contribute to bytecodealliance/rfcs development by creating an account on GitHub.</div></div></div>",
        "id": 512069786,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1744634612
    }
]