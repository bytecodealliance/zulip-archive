[
    {
        "content": "<p>I hope that this is the proper place to ask for help.<br>\nIt's all in the title. I am trying to compile components while using the <code>custom-page-size</code> proposal. </p>\n<p>Here's what I've done: <br>\nCopy the example from <a href=\"https://component-model.bytecodealliance.org/language-support/rust.html\">https://component-model.bytecodealliance.org/language-support/rust.html</a> and verified that <code>cargo-component build --release</code> works.</p>\n<p>Compile LLVM's LLD 21.0-git from source to have a version of <code>wasm-ld</code> that supports the <code>custom-page-size</code> proposal. It's available since this <a href=\"http://github.com/llvm/llvm-project/pull/128942\">PR</a>.<br>\nPut the following in my <code>.cargo/config.toml</code></p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[build]</span>\n<span class=\"n\">rustflags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"s2\">\"-Clinker=wasm-ld\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\"># Override linker</span>\n<span class=\"w\">    </span><span class=\"s2\">\"-Clink-arg=--page-size=1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\"># Enable Custom page size</span>\n<span class=\"w\">    </span><span class=\"s2\">\"-Clink-arg=--initial-memory=16000\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\"># 16K of Memory</span>\n<span class=\"w\">    </span><span class=\"s2\">\"-Clink-arg=-zstack-size=1024\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\"># Default stack-size is 1MB, bring it down to 1KiB</span>\n<span class=\"p\">]</span>\n</code></pre></div>\n<p>tried to run <code>cargo-component build --release</code><br>\nGot the following error message </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>decode<span class=\"w\"> </span>world<span class=\"w\"> </span>from<span class=\"w\"> </span>module\n\nCaused<span class=\"w\"> </span>by:\n<span class=\"w\">    </span><span class=\"m\">0</span>:<span class=\"w\"> </span>module<span class=\"w\"> </span>was<span class=\"w\"> </span>not<span class=\"w\"> </span>valid\n<span class=\"w\">    </span><span class=\"m\">1</span>:<span class=\"w\"> </span>the<span class=\"w\"> </span>custom<span class=\"w\"> </span>page<span class=\"w\"> </span>sizes<span class=\"w\"> </span>proposal<span class=\"w\"> </span>must<span class=\"w\"> </span>be<span class=\"w\"> </span>enabled<span class=\"w\"> </span>to<span class=\"w\"> </span>customize<span class=\"w\"> </span>a<span class=\"w\"> </span>memory<span class=\"err\">'</span>s<span class=\"w\"> </span>page<span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"o\">(</span>at<span class=\"w\"> </span>offset<span class=\"w\"> </span>0x79<span class=\"o\">)</span>\n</code></pre></div>\n<p>My questions are :</p>\n<ul>\n<li>Is trying to generate such components useful or it is pointless because the correct way to use components in conjunctions should to use/import them in modules that themselves use this proposal ?</li>\n<li>If it is useful, where do I tell the parser that I want to enable the proposal ? In <code>cargo-component</code> through CLI args  (I looked and didn't find anything relevant to this) ? In a fork of <code>cargo-component</code> ? In a fork of <code>wit-component</code> ? Or in a fork of <code>wasmparser</code> ?   </li>\n<li>If it is pointless, how do I do the latter and use the resulting modules(or in my case pre-compile because I want to run them on embedded devices for which neither cranelift nor winch have backends) ? </li>\n</ul>\n<p>Thanks in advance for the help !</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://github.com/llvm/llvm-project/pull/128942\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6d789523944d52c8a8a8adb9cf35b5492619e311/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383732663034396662396631303732666464653539353537653939333930663066383637643532646231396462346532316430613166643732336636393865332f6c6c766d2f6c6c766d2d70726f6a6563742f70756c6c2f313238393432&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://github.com/llvm/llvm-project/pull/128942\" title=\"[lld][WebAssembly] Support for the custom-page-sizes WebAssembly proposal by fitzgen · Pull Request #128942 · llvm/llvm-project\">[lld][WebAssembly] Support for the custom-page-sizes WebAssembly proposal by fitzgen · Pull Request #128942 · llvm/llvm-project</a></div><div class=\"message_embed_description\">This commit adds support for WebAssembly&#39;s custom-page-sizes proposal to wasm-ld. An overview of the proposal can be found here. In a sentence, it allows customizing a Wasm memory&#39;s page si...</div></div></div>",
        "id": 530112649,
        "sender_full_name": "Antoine Lavandier",
        "timestamp": 1753179446
    },
    {
        "content": "<p>After reading this again, my first question does not make sense because some words are missing.</p>\n<blockquote>\n<p>Is trying to generate such components useful <del>or it is pointless because the correct way to use components in conjunctions should to use/import them in modules that themselves use this proposal</del>  or is it pointless because components are supposed to be integrated in WebAssembly modules that themselves can use custom page sizes ?</p>\n</blockquote>\n<p>Answering my own question, If I read the Component Model Documentation properly, Components can include modules, not the other way around, so the component needs to use <code>custom-page-size</code> proposal. This leaves the problem of how to actually turn a module with a page size of 1 into a component with a page size of 1.</p>",
        "id": 530129521,
        "sender_full_name": "Antoine Lavandier",
        "timestamp": 1753185447
    },
    {
        "content": "<p>Update: <br>\nAfter cloning <a href=\"https://github.com/bytecodealliance/crates/wasmparser\"><code>wasmparser</code></a>, commenting the <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/847d7db2ce071c6914cd31631f49621eecb802f5/crates/wasmparser/src/validator/core.rs#L750C1-L755C14\">appropriate lines</a> to basically always enable custom page sizes in <a href=\"https://github.com/bytecodealliance/crates/wasmparser\"><code>wasmparser</code></a>,  cloning other repositories to force them to use my local  <a href=\"https://github.com/bytecodealliance/crates/wasmparser\"><code>wasmparser</code></a> and finally installing my local <code>cargo-component</code> I was able to get all the build to building the <code>.cwasm</code> file. </p>\n<p>However, <code>Component::deserialize_raw()</code> fails with </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">deserialize</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">compiled</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"n\">artifact</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">ELF</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">Invalid</span><span class=\"w\"> </span><span class=\"n\">ELF</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">alignment</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/blob/847d7db2ce071c6914cd31631f49621eecb802f5/crates/wasmparser/src/validator/core.rs#L750C1-L755C14\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f847e10817844ad98bba5de43904c50811f76ed7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373462316435356161613363366566663633346362373461653237653465303034396462303537393830623961643562613765613561663563336634343631662f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/847d7db2ce071c6914cd31631f49621eecb802f5/crates/wasmparser/src/validator/core.rs#L750C1-L755C14\" title=\"wasm-tools/crates/wasmparser/src/validator/core.rs at 847d7db2ce071c6914cd31631f49621eecb802f5 · bytecodealliance/wasm-tools\">wasm-tools/crates/wasmparser/src/validator/core.rs at 847d7db2ce071c6914cd31631f49621eecb802f5 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\"> CLI and Rust libraries for low-level manipulation of WebAssembly modules  - bytecodealliance/wasm-tools</div></div></div>",
        "id": 530149048,
        "sender_full_name": "Antoine Lavandier",
        "timestamp": 1753191501
    },
    {
        "content": "<blockquote>\n<p>Is trying to generate such components useful</p>\n</blockquote>\n<p>IMO, yes! Work on custom-page-sizes is ongoing so not everything is working just yet, but passing extra linker flags is indeed the vision for how it's supposed to work.</p>\n<blockquote>\n<p>where do I tell the parser that I want to enable the proposal?</p>\n</blockquote>\n<p>I think this is something for the cargo-component codebase itself. My recommendation for there would be to enable all the features all the time because that way you don't have to worry about adding flags and such.</p>",
        "id": 530156918,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753193773
    },
    {
        "content": "<blockquote>\n<p><code>failed to deserialize pre-compiled module: failed to parse precompiled artifact as an ELF</code></p>\n</blockquote>\n<p>Could you file an issue win Wasmtime with steps for reproduction? That looks like a bug</p>",
        "id": 530156957,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753193784
    },
    {
        "content": "<blockquote>\n<p>Could you file an issues win Wasmtime with steps for reproduction ? That looks like a bug </p>\n</blockquote>\n<p>I did it's issue <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11300\">#11300</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/11300\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c16d27159776ae4285107ae2fb423e2e17b2041c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383739343763383133366465626334643236613831383961366130383137373765363237333232336538333966346234636361333466376136633732373638342f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f3131333030&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/11300\" title=\"Invalid ELF Headers when precompiling components · Issue #11300 · bytecodealliance/wasmtime\">Invalid ELF Headers when precompiling components · Issue #11300 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Test Case Wasm Component bytecode Wasm Component source code All the relevant code I used is in this repo Steps to Reproduce (Optional) Build the component from source using cargo-component build. ...</div></div></div>",
        "id": 530170857,
        "sender_full_name": "Antoine Lavandier",
        "timestamp": 1753197828
    },
    {
        "content": "<p>I tried again using the commit from the PR that fixes my issue (0e6d9c679) and I'm happy to report that I managed to deserialize a component that was built with <code>custom-page-size</code> enabled. Now I'm having an unrelated issue which is that running <code>Store::new</code> leads to an allocation of exactly <code>512KiB</code> (524288 Bytes) and since I'm trying to run this on hardware that has less than that in RAM it's a problem. I hope that reducing the memory that my <code>Component</code> ask for would help but it doesn't seem to. I also set <code>config.memory_reservation(65536)</code> both when pre-compiling and when deserializing the component. </p>\n<p>I'm surprised by that <code>512 KiB</code> number since in this other <a href=\"#narrow/channel/217126-wasmtime/topic/undefined.20symbol.20wasmtime_tls_get\">Zulip Conversation</a> when trying to use precompiled-modules they didn't seem to run into this allocation. <br>\nThis makes me think that this is specific to components. Do you have any where this allocation could come from and if it can be reduced ?</p>",
        "id": 530301566,
        "sender_full_name": "Antoine Lavandier",
        "timestamp": 1753263276
    },
    {
        "content": "<p>Turns out using <code>config.max_wasm_stack()</code> was the way to go. <code>512KiB</code> is the default value and I guess it actually reserves this maximum size for each store.</p>",
        "id": 530332339,
        "sender_full_name": "Antoine Lavandier",
        "timestamp": 1753273737
    },
    {
        "content": "<p>Yeah there are a number of knobs for low-memory usage you'll need to turn, and <code>max_wasm_stack</code> is definitely one of them.</p>",
        "id": 530360558,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753281049
    },
    {
        "content": "<p>After tinkering with some other configuration settings, I was able to get a complete program running a component, that included the <code>*.cwasm</code> ELF,  <code>wasmtime</code> with the features <code>component-model</code>, <code>runtime</code> and <code>pulley</code> and the OS I'm using to run on my hardware (an NRF52840dk) to weigh about 350k with some further compile time optimizations so I'm happy. Thanks for the help !</p>",
        "id": 530365966,
        "sender_full_name": "Antoine Lavandier",
        "timestamp": 1753282334
    },
    {
        "content": "<p>Looking back on this, the only thing I don't have a good solution to is the first one, that is how to have a <code>custom-page-sizes</code> enabled <code>cargo-component</code>. I ended up making it depend on a local clone of <code>wasmparser</code> that has this proposal enabled by default by commenting out some lines. I don't think that there is any other way to achieve this at this time. I tried to change it in <code>cargo-component</code> itself but didn't manage to how to. Do you happen to know if it's possible or it needs to be done first by downstream crates like <code>wit-bindgen</code> ?</p>",
        "id": 530378856,
        "sender_full_name": "Antoine Lavandier",
        "timestamp": 1753285506
    },
    {
        "content": "<p>I suspect the easiest way would be to either disable validation in cargo-component or updating cargo-component to enable all features during validation</p>",
        "id": 530386069,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753287435
    },
    {
        "content": "<p>so still on the cargo-component side of things, but I don't know precisely where that would be</p>",
        "id": 530386113,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753287446
    }
]