[
    {
        "content": "<p>To follow up on what we discussed very briefly in the Jco meeting today towards P3, I reached out to <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> and he kindly answered:</p>\n<blockquote>\n<p>Yeah, so there are really three export ABIs:</p>\n<ul>\n<li>Synchronous: cannot reenter until it returns</li>\n<li>Asynchronous, with a callback: cannot reenter until it \"returns\", but note that \"returns\" here doesn't mean it's done. It might be done or might just be unable to make more progress until one or more of its waitables have made progress, at which point the host will call its callback. The latter can happen multiple times, concurrently with other in-progress tasks. In this case, there's only ever one Wasm stack involved.</li>\n<li>Asynchronous, without a callback: can be reentered on a new stack concurrently (but not in parallel!). In this case there can be as many stacks as there are outstanding tasks.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Yeah, I expect Rust, C#, JS, and Python (i.e. the async/await languages) will use the second one, and e.g. Go and Java (the ones with stackful coroutines/fibers) will use the third one.</p>\n</blockquote>\n<p>Hopefully I was able to repeat what you were intending correctly <span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> but I noted that what you plan on using is approach (3)</p>\n<p><span class=\"user-mention\" data-user-id=\"344849\">@Yosh Wuyts</span> <span class=\"user-mention\" data-user-id=\"763150\">@Tomasz Andrzejak</span> <span class=\"user-mention\" data-user-id=\"479055\">@Calvin Prewitt</span></p>",
        "id": 495344637,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1737569126
    },
    {
        "content": "<p>thank you for the follow-up!</p>\n<p>I actually plan on using (2): asynchronous with callbacks. That's why this isn't reliant on JSPI support: there won't ever be multiple stacks involved. It's also a much better fit for JS semantics, because JS expects run-to-completion, not stack suspension</p>",
        "id": 495347091,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1737569776
    },
    {
        "content": "<p>Ah right, Joel's note was right there -- I remembered the C API note and callbacks but noted the wrong one, thanks for the clarification.</p>\n<p>To reiterate where we got to on the call, the JSPI/Asyncify stuff is only important for host primarily -- C API w/ async + callbacks for guests using StarlingMonkey</p>",
        "id": 495347757,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1737570010
    },
    {
        "content": "<p>right, yeah. Or to put it another way: JSPI (or asyncify) is required to implement (3), and thus important for JCO to support all ABI variants, but it's not required to support specifically StarlingMonkey based components</p>",
        "id": 495348043,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1737570121
    },
    {
        "content": "<p>JSPI (or Asyncify) on the JCO host might be also required to implement much of (1) Synchronous, to use the Web APIs that are async and we need the ability to block and suspend the Wasm execution.</p>",
        "id": 495356194,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1737572998
    },
    {
        "content": "<p>Hi all.  I chatted with <span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> and <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> about WASIp3 implementation logistics today and the TL;DR is that we do <em>not</em> need to support the async-without-callback ABI for 0.3.0.</p>\n<p>We won't need it for StarlingMonkey-based guests according to Till, and TinyGo won't use it for the foreseeable future, so (as far as we know), there won't be any guest toolchains that use that ABI in the short-to-mid term, meaning there's no urgency to support it in 0.3.0.  I've already implemented it in Wasmtime, so no point in backing that out, but I don't think we need it in Jco, and thus no need for JSPI or Asyncify AFAICT.</p>\n<p>To be clear, we <em>do</em> want to support that ABI post-0.3.0, but it's no longer a blocker for 0.3.0.</p>",
        "id": 495580394,
        "sender_full_name": "Joel Dice",
        "timestamp": 1737664256
    },
    {
        "content": "<p>Put another way: the Worker-thread-based hack we used to support <code>wasi:io/poll</code> in Jco for WASIp2 should still be sufficient for 0.3.0.  If folks are eager to remove that hack anyway, I won't try to talk them out of it, but I don't think that's <em>needed</em> for 0.3.0.</p>",
        "id": 495580800,
        "sender_full_name": "Joel Dice",
        "timestamp": 1737664431
    },
    {
        "content": "<blockquote>\n<p>I don't think we need it in Jco, and thus no need for JSPI or Asyncify AFAICT.</p>\n</blockquote>\n<p>I think this is still required for blocking APIs though? For example if a wasm module blocks on the result of a future that'll require JSPI to implement?</p>",
        "id": 495585156,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737666272
    },
    {
        "content": "<p>oh but I suppose that could use the same hack as before</p>",
        "id": 495585201,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737666295
    },
    {
        "content": "<p>For Jco, you could think of the JSPI / Asyncify implementation as an alternative to the hack using Workers and atomics.</p>",
        "id": 495594694,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1737670385
    },
    {
        "content": "<p>Thinking about this some more, we still do need to be able to manage multiple Wasm stacks concurrently in order to support async-&gt;sync calls (i.e. we need to support an async-lowered import of a sync-lifted export such that the caller can continue to make progress while the callee is blocked, which requires multiple Wasm stacks).  Not sure if the Worker-thread-based approach can accommodate that.</p>",
        "id": 496148753,
        "sender_full_name": "Joel Dice",
        "timestamp": 1737991481
    },
    {
        "content": "<p>Yosh's meeting notes: </p>\n<p><a href=\"https://hackmd.io/@yoshuawuyts/HkDpwmrukg\">https://hackmd.io/@yoshuawuyts/HkDpwmrukg</a></p>",
        "id": 496152076,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1737992288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> hypothetically one could put each component instance in a separate worker, making cross-worker calls for the async-&gt;sync call (analogous to when JS-main-thread calls into the worker, but originating in the worker), but obviously not ideal performance</p>",
        "id": 496159791,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1737994261
    },
    {
        "content": "<p>Many of us are in a meeting talking about this right now.  <span class=\"user-mention\" data-user-id=\"479055\">@Calvin Prewitt</span> expects JSPI/Asyncify support to be merged into Jco within the next couple of weeks, so we might not need to deal with worker-related pain.</p>",
        "id": 496160211,
        "sender_full_name": "Joel Dice",
        "timestamp": 1737994348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598440\">Victor Adossi</span> <a href=\"#narrow/channel/409526-jco/topic/P3.20Async.20Re-entrancy/near/496152076\">said</a>:</p>\n<blockquote>\n<p>Yosh's meeting notes: </p>\n<p><a href=\"https://hackmd.io/@yoshuawuyts/HkDpwmrukg\">https://hackmd.io/@yoshuawuyts/HkDpwmrukg</a></p>\n</blockquote>\n<p>Added the recording link to the meeting notes.</p>",
        "id": 496171757,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1737997467
    },
    {
        "content": "<p><a href=\"https://drive.google.com/drive/folders/192t9GGQIurGHpqTqtoFyHELaSpFwd-5r?usp=sharing\">Here is the recording</a></p>\n<p><span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span></p>",
        "id": 496173904,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1737998103
    },
    {
        "content": "<p>I may have been misunderstanding though -- this may not be terribly relevant to you Till <em>but</em> Joel's excellent walkthrough/explanation of the complicated cases and the callback vs non-callback impl</p>",
        "id": 496174202,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1737998190
    },
    {
        "content": "<p>(also for now keeping the guest side separate for now is of great importance, but I thought you might benefit from the explanation in there of the APIs)</p>",
        "id": 496174824,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1737998384
    },
    {
        "content": "<p>thank you for the additional context, Victor!</p>",
        "id": 496175121,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1737998455
    },
    {
        "content": "<p>as long as JSPI is on track, I think everything is great. If that runs into any snags, that would be good to know sooner rather than later though, because we'd have to reevaluate our options in that case</p>",
        "id": 496175272,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1737998502
    }
]