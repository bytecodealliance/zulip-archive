[
    {
        "content": "<p>Is there an example using the <a href=\"https://github.com/bytecodealliance/ComponentizeJS?tab=readme-ov-file#using-starlingmonkeys-fetch-event\">fetch-event workflow discussed in componentizejs</a>?  It sounds nice and I imagine it means I can create a JS file using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/fetch_event\">service worker fetch events</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">addEventListener</span><span class=\"p\">(</span><span class=\"s\">\"fetch\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">We</span><span class=\"w\"> </span><span class=\"n\">did</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"o\">!'</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">Response</span><span class=\"p\">.</span><span class=\"n\">json</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"s\">\"hello\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"world\"</span>\n<span class=\"w\">  </span><span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>But the only examples I've seen like the <a href=\"https://github.com/bytecodealliance/jco/pull/533\">recently added jco http example</a> seem to use the raw wasi:http apis</p>",
        "id": 499930200,
        "sender_full_name": "Milan",
        "timestamp": 1739638503
    },
    {
        "content": "<p>Hey. You can check the <code>e2e</code> tests in the <code>StarlingMonkey</code> repository for an example of <code>fetch</code> API usage. E.g.: <a href=\"https://github.com/bytecodealliance/StarlingMonkey/blob/main/tests/e2e/blob/blob.js\">https://github.com/bytecodealliance/StarlingMonkey/blob/main/tests/e2e/blob/blob.js</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/StarlingMonkey/blob/main/tests/e2e/blob/blob.js\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/38d1737cdd50ad9d7a3033676e81f60d3afbee14/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613730346234393330613532313937303336376334366131343366643538646538326137303434313033383231613662613434303562343539373133633961302f62797465636f6465616c6c69616e63652f537461726c696e674d6f6e6b6579&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/StarlingMonkey/blob/main/tests/e2e/blob/blob.js\" title=\"StarlingMonkey/tests/e2e/blob/blob.js at main · bytecodealliance/StarlingMonkey\">StarlingMonkey/tests/e2e/blob/blob.js at main · bytecodealliance/StarlingMonkey</a></div><div class=\"message_embed_description\">The StarlingMonkey JS runtime. Contribute to bytecodealliance/StarlingMonkey development by creating an account on GitHub.</div></div></div>",
        "id": 500123948,
        "sender_full_name": "Tomasz Andrzejak",
        "timestamp": 1739783574
    },
    {
        "content": "<p>Appreciate it! Just the confidence that there are tests was enough to push forward. There are a few issues to file hopefully later this week with jco + componentizejs to make it work smoothly but I was able to get the following to work with a few workarounds:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">addEventListener</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">ServiceWorkerGlobalScope</span><span class=\"p\">[</span><span class=\"o\">'</span><span class=\"na\">addEventListener</span><span class=\"o\">'</span><span class=\"p\">])(</span>\n<span class=\"w\">  </span><span class=\"s\">\"fetch\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span>\n<span class=\"w\">  </span><span class=\"n\">event</span><span class=\"p\">.</span><span class=\"n\">respondWith</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">https</span><span class=\"p\">:</span><span class=\"c1\">//httpbin.org/json');</span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"err\">`</span><span class=\"n\">Hello</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">TypeScript</span><span class=\"w\"> </span><span class=\"n\">Fetch</span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"p\">{</span><span class=\"n\">result</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">whoopsies</span><span class=\"o\">'</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">})(),</span>\n<span class=\"w\">  </span><span class=\"p\">),</span>\n<span class=\"p\">);</span>\n</code></pre></div>",
        "id": 500321862,
        "sender_full_name": "Milan",
        "timestamp": 1739856644
    }
]