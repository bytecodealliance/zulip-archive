[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> did you have a scheme for how to embed WIT documents with comments and all in Wasm binaries? I think Luke mentioned that you'd been looking at this a while ago?</p>",
        "id": 525931902,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750951976
    },
    {
        "content": "<p>At MS we're interested in storing all of this info in Wasm binaries so we can use that for post-processsing later on. I wanted to check if there was prior art for this already.</p>",
        "id": 525932192,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750952063
    },
    {
        "content": "<p>This is already done in wasm-tools</p>",
        "id": 525932534,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750952171
    },
    {
        "content": "<p>(implementation <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wit-parser/src/metadata.rs\">here</a>, and it's where stability is encoded too)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wit-parser/src/metadata.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8c828e2d3afdb21a397623368aabe72d8cfc389b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346564363736373135333365333337383538306563316234393433396439353231323934636266373738656364346566336336313637636363393162306162652f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wit-parser/src/metadata.rs\" title=\"wasm-tools/crates/wit-parser/src/metadata.rs at main · bytecodealliance/wasm-tools\">wasm-tools/crates/wit-parser/src/metadata.rs at main · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\"> CLI and Rust libraries for low-level manipulation of WebAssembly modules  - bytecodealliance/wasm-tools</div></div></div>",
        "id": 525932744,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750952243
    },
    {
        "content": "<p>ohhhh!</p>",
        "id": 525932787,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750952257
    },
    {
        "content": "<p>cc/ <span class=\"user-mention\" data-user-id=\"487764\">@Mossaka (Joe)</span> this should cover what we need, right? ^</p>",
        "id": 525933228,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750952405
    },
    {
        "content": "<p>No wonder I haven't been able to find that code! <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> moved it!</p>",
        "id": 525933333,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750952444
    },
    {
        "content": "<p>hahaha</p>",
        "id": 525933356,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750952450
    },
    {
        "content": "<p>\"Where did <code>PackageDocs</code> go? Was it all a dream?\"</p>",
        "id": 525933466,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750952491
    },
    {
        "content": "<p>are we already populating this data from e.g. <code>cargo-component</code> too?</p>",
        "id": 525933482,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750952496
    },
    {
        "content": "<p>If you aren't parsing WIT yourself you should be populating it</p>",
        "id": 525933591,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750952526
    },
    {
        "content": "<p>most likely not I think, this only affects WIT packages encoded as wasm, actual components don't use this custom section at all</p>",
        "id": 525933592,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750952526
    },
    {
        "content": "<p>ohh in non-WIT components, yeah not by default</p>",
        "id": 525933632,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750952545
    },
    {
        "content": "<p>agreed though if you're talking about wit-encoded-as-wasm or parsing wit-encoded-as-wasm then yeah that should all be supported by default</p>",
        "id": 525933700,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750952569
    },
    {
        "content": "<p>heh, yeah no this would be for actual components encoded as wasm - to make them self-describing in a way that other tools can post-process them</p>",
        "id": 525933897,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750952637
    },
    {
        "content": "<p>ah ok, yeah for that this isn't implemented at this time (no docs/stability custom section)</p>",
        "id": 525933987,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750952663
    },
    {
        "content": "<p>wait, to check:</p>",
        "id": 525934047,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750952682
    },
    {
        "content": "<p>This is the only (?) place it gets binary encoded: <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/bc0a78578a764b3f43489e210066bc7ea2449ac5/crates/wit-component/src/encoding/wit.rs#L59-L63\">https://github.com/bytecodealliance/wasm-tools/blob/bc0a78578a764b3f43489e210066bc7ea2449ac5/crates/wit-component/src/encoding/wit.rs#L59-L63</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/blob/bc0a78578a764b3f43489e210066bc7ea2449ac5/crates/wit-component/src/encoding/wit.rs#L59-L63\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8c828e2d3afdb21a397623368aabe72d8cfc389b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346564363736373135333365333337383538306563316234393433396439353231323934636266373738656364346566336336313637636363393162306162652f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/bc0a78578a764b3f43489e210066bc7ea2449ac5/crates/wit-component/src/encoding/wit.rs#L59-L63\" title=\"wasm-tools/crates/wit-component/src/encoding/wit.rs at bc0a78578a764b3f43489e210066bc7ea2449ac5 · bytecodealliance/wasm-tools\">wasm-tools/crates/wit-component/src/encoding/wit.rs at bc0a78578a764b3f43489e210066bc7ea2449ac5 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\"> CLI and Rust libraries for low-level manipulation of WebAssembly modules  - bytecodealliance/wasm-tools</div></div></div>",
        "id": 525934085,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750952697
    },
    {
        "content": "<p>that means we <em>can</em> use this custom section for that, but it <em>isn't</em> yet integrated in e.g. <code>cargo-component</code>?</p>",
        "id": 525934137,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750952713
    },
    {
        "content": "<p>sort of, and sort of yes. In theory this custom section could be used for docs and it almost certainly isn't integrated in cargo-component right now. That being said if it were emitted nothing would actually use such custom section as the custom section is only decoded as part of a wit-encoded-as-wasm blob</p>",
        "id": 525934341,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750952772
    },
    {
        "content": "<p>making it work for a component itself would likely not actually involve cargo-component but instead <code>wit-component</code> which cargo-component uses, and it  might not be too too hard to emit but I haven't looked much into this</p>",
        "id": 525934504,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750952821
    },
    {
        "content": "<p>decoding here: <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/bc0a78578a764b3f43489e210066bc7ea2449ac5/crates/wit-parser/src/decoding.rs#L118-L123\">https://github.com/bytecodealliance/wasm-tools/blob/bc0a78578a764b3f43489e210066bc7ea2449ac5/crates/wit-parser/src/decoding.rs#L118-L123</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/blob/bc0a78578a764b3f43489e210066bc7ea2449ac5/crates/wit-parser/src/decoding.rs#L118-L123\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8c828e2d3afdb21a397623368aabe72d8cfc389b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346564363736373135333365333337383538306563316234393433396439353231323934636266373738656364346566336336313637636363393162306162652f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/bc0a78578a764b3f43489e210066bc7ea2449ac5/crates/wit-parser/src/decoding.rs#L118-L123\" title=\"wasm-tools/crates/wit-parser/src/decoding.rs at bc0a78578a764b3f43489e210066bc7ea2449ac5 · bytecodealliance/wasm-tools\">wasm-tools/crates/wit-parser/src/decoding.rs at bc0a78578a764b3f43489e210066bc7ea2449ac5 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\"> CLI and Rust libraries for low-level manipulation of WebAssembly modules  - bytecodealliance/wasm-tools</div></div></div>",
        "id": 525934578,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750952842
    },
    {
        "content": "<p>that all makes sense!</p>",
        "id": 525934637,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750952865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> how are you feeling about the format stabilitiy? Still \"fine pre-1.0 but hopefully changed eventually\"?</p>",
        "id": 525934734,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750952897
    },
    {
        "content": "<p>are there any objections if we took it that route? e.g. actually populate the <code>package-docs</code> custom section for components as well?</p>",
        "id": 525934786,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750952916
    },
    {
        "content": "<p>that's a tough one... on one hand if it's not changed now it's probably never going to change as it'll always be easiest to just stick with it as-is, but on the other hand iunno if there's really that strong of a motivation to change it</p>",
        "id": 525934973,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750952976
    },
    {
        "content": "<p>For context, the doc comments at least are encoded in a somewhat ad-hoc JSON format that isn't very \"wasm-y\"</p>",
        "id": 525935047,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750952998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480579\">Lann Martin</span> <a href=\"#narrow/channel/441851-SIG-Packaging/topic/embedding.20WIT.20comments.20in.20Wasm.20binaries/near/525935047\">said</a>:</p>\n<blockquote>\n<p>For context, the doc comments at least are encoded in a somewhat ad-hoc JSON format that isn't very \"wasm-y\"</p>\n</blockquote>\n<p>ohh, I see</p>",
        "id": 525935119,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750953023
    },
    {
        "content": "<p>I don't have any problem emitting this in components myself, but I'd have to double-check to see if the format is suitable for describing components as it is wit documents</p>",
        "id": 525935165,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750953036
    },
    {
        "content": "<p>by the way, there's no time pressure on this from our end</p>",
        "id": 525935267,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750953063
    },
    {
        "content": "<p>for our flow we can do post-processing in other ways</p>",
        "id": 525935308,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750953076
    },
    {
        "content": "<p>but they are a little hacky</p>",
        "id": 525935332,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750953085
    },
    {
        "content": "<p>so it would be good to eventually arrive at a canonical/standard way to include doc info for components</p>",
        "id": 525935405,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1750953111
    },
    {
        "content": "<p>Ah great thanks for the discussion. yeah we are looking for non-wit components having WIT docstrings embedded so that the WIT extracted from the component does preserve the comments.</p>",
        "id": 526461744,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1751308144
    },
    {
        "content": "<p>I thought about this a little last week but I don't have enough component encoding details in my head to have a clear idea of how this would work. If you already have a <code>world</code> matching your component then I think the custom section used for binary WIT should match the component. If you don't already have a WIT world then I believe you could construct one from the component and then merge with the original WIT to get what you need, but I haven't actually tried.</p>",
        "id": 526472009,
        "sender_full_name": "Lann Martin",
        "timestamp": 1751311209
    },
    {
        "content": "<p>Got it working<br>\n<a href=\"/user_uploads/15107/re2sNesQlwgHHlfvpXSaEuQW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/re2sNesQlwgHHlfvpXSaEuQW/image.png\" title=\"image.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"2816x1148\" src=\"/user_uploads/thumbnail/15107/re2sNesQlwgHHlfvpXSaEuQW/image.png/840x560.webp\"></a></div>",
        "id": 534792243,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1755391457
    },
    {
        "content": "<p>I think it's okay in terms of UX that there is an extra post-step to inject docs into the Component, but what do you think about having a <code>wasm-tools</code> subcommand that can do this? </p>\n<p>Like <code>wasm-tools component wit --inject-docs ./wit -o output.wasm input.wasm</code></p>",
        "id": 534792337,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1755391666
    },
    {
        "content": "<p>I'd probably make it a new subcommand e.g. <code>wasm-tools component docs</code> which is just for manipulating that custom section.</p>",
        "id": 534944834,
        "sender_full_name": "Lann Martin",
        "timestamp": 1755521329
    }
]