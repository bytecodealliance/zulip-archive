[
    {
        "content": "<p>I've been able to get my 11MB React server rendering benchmark to run with ComponentizeJS and wasmtime serve but get a memory error when trying to build with <code>--aot</code>. Is there some way to increase the memory available during a build?</p>\n<p>Steps to reproduce:</p>\n<ol>\n<li>\n<p>Checkout and npm install <a href=\"https://github.com/bytecodealliance/jco/tree/main/examples/components/http-server-fetch-handler\">https://github.com/bytecodealliance/jco/tree/main/examples/components/http-server-fetch-handler</a> as a base</p>\n</li>\n<li>\n<p>Download renderer.mjs from <a href=\"https://raw.githubusercontent.com/lrowe/react-server-render-benchmark/f754693c9cb6ad4f492039897d3444dec3103691/renderer.mjs\">https://raw.githubusercontent.com/lrowe/react-server-render-benchmark/f754693c9cb6ad4f492039897d3444dec3103691/renderer.mjs</a></p>\n</li>\n<li>\n<p>Run <code>./node_modules/.bin/componentize-js -w wit -o component.wasm --enable-wizer-logging --use-debug-build renderer.mjs --aot</code></p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">node_modules</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">componentize</span><span class=\"o\">-</span><span class=\"n\">js</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">wizer</span><span class=\"o\">-</span><span class=\"n\">logging</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"k\">use</span><span class=\"o\">-</span><span class=\"n\">debug</span><span class=\"o\">-</span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"n\">renderer</span><span class=\"p\">.</span><span class=\"n\">mjs</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">aot</span>\n<span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">:</span><span class=\"mi\">1979665</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">DEP0190</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">DeprecationWarning</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Passing</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">shell</span><span class=\"w\"> </span><span class=\"n\">option</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">lead</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">security</span><span class=\"w\"> </span><span class=\"n\">vulnerabilities</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">escaped</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">concatenated</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">Use</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">trace</span><span class=\"o\">-</span><span class=\"n\">deprecation</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">warning</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">created</span><span class=\"p\">)</span>\n<span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">allocation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">23726160</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n<span class=\"n\">wasm</span><span class=\"p\">:</span><span class=\"c1\">//wasm/splicer_component.wasm-01127772:1</span>\n\n\n<span class=\"n\">RuntimeError</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">unreachable</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">splicer_component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">abort</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">:</span><span class=\"c1\">//wasm/splicer_component.wasm-01127772:wasm-function[6972]:0x31e426)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">splicer_component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">_ZN3std3sys3pal4wasi7helpers14abort_internal17he7a2be67736436b7E</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">:</span><span class=\"c1\">//wasm/splicer_component.wasm-01127772:wasm-function[6767]:0x30c245)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">splicer_component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">_ZN3std7process5abort17hb229e5783e2ded8dE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">:</span><span class=\"c1\">//wasm/splicer_component.wasm-01127772:wasm-function[6836]:0x31234e)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">splicer_component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">_ZN3std5alloc8rust_oom17h293069cf3a87ceb7E</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">:</span><span class=\"c1\">//wasm/splicer_component.wasm-01127772:wasm-function[6880]:0x3143eb)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">splicer_component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">_RNvCs691rhTbG0Ee_7___rustc8___rg_oom</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">:</span><span class=\"c1\">//wasm/splicer_component.wasm-01127772:wasm-function[6881]:0x3143f9)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">splicer_component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">_RNvCs691rhTbG0Ee_7___rustc26___rust_alloc_error_handler</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">:</span><span class=\"c1\">//wasm/splicer_component.wasm-01127772:wasm-function[31]:0x4b74)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">splicer_component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">_ZN5alloc5alloc18handle_alloc_error17hcc35c2aed22157a6E</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">:</span><span class=\"c1\">//wasm/splicer_component.wasm-01127772:wasm-function[7002]:0x31f968)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">splicer_component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">_ZN5alloc7raw_vec12handle_error17hb73fb4043b5a38a7E</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">:</span><span class=\"c1\">//wasm/splicer_component.wasm-01127772:wasm-function[6999]:0x31f7ac)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">splicer_component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">_ZN67_</span><span class=\"cp\">$LT$alloc</span><span class=\"o\">..</span><span class=\"n\">vec</span><span class=\"o\">..</span><span class=\"nb\">Vec</span><span class=\"cp\">$LT$T$C$A$GT$$u20$as$u20$core</span><span class=\"o\">..</span><span class=\"n\">clone</span><span class=\"o\">..</span><span class=\"nb\">Clone</span><span class=\"cp\">$GT$</span><span class=\"mi\">5</span><span class=\"n\">clone17hc3827fc32c562e56E</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">:</span><span class=\"c1\">//wasm/splicer_component.wasm-01127772:wasm-function[409]:0x4bba4)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">splicer_component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">_ZN9orca_wasm2ir6module6Module14parse_internal17h5e643ff744b734fdE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">:</span><span class=\"c1\">//wasm/splicer_component.wasm-01127772:wasm-function[438]:0x57619)</span>\n\n<span class=\"n\">Node</span><span class=\"p\">.</span><span class=\"n\">js</span><span class=\"w\"> </span><span class=\"n\">v24</span><span class=\"p\">.</span><span class=\"mf\">1.0</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/tree/main/examples/components/http-server-fetch-handler\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/aed20b6dc7d08e8707eb1efbb99faff311ec59ec/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663232393532663961363365616231373930636663336464623735353161323731663661393835343066333137613463613064363666656162663237313064382f62797465636f6465616c6c69616e63652f6a636f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/tree/main/examples/components/http-server-fetch-handler\" title=\"jco/examples/components/http-server-fetch-handler at main · bytecodealliance/jco\">jco/examples/components/http-server-fetch-handler at main · bytecodealliance/jco</a></div><div class=\"message_embed_description\">JavaScript toolchain for working with WebAssembly Components - bytecodealliance/jco</div></div></div>",
        "id": 534793060,
        "sender_full_name": "Laurence Rowe",
        "timestamp": 1755393104
    },
    {
        "content": "<p>This is likely a bug in the component itself leaking memory for example. Wasmtime allows guests to grow to the 4G limit by default and wasmtime isn't printing that error message, the guest likely is</p>",
        "id": 534802220,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1755407717
    },
    {
        "content": "<p>I don't think this wasmtime is involved here. Watching <code>top -c</code> the error appears to originate from the node process running componentize-js several seconds after weval completes (albeit with 130g of VIRT.)</p>\n<p>Debugging with <code>node --inspect ./node_modules/.bin/componentize-js ...</code> the RuntimeError is being thrown during the <code>splicer.stubWasi</code> call here: <a href=\"https://github.com/bytecodealliance/ComponentizeJS/blob/0.18.4/src/componentize.js#L379\">https://github.com/bytecodealliance/ComponentizeJS/blob/0.18.4/src/componentize.js#L379</a></p>\n<p>EDIT: next and last JS stack from before WASM is ./node_modules/@bytecodealliance/componentize-js/lib/spidermonkey-embedding-splicer.js:3573</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">exports1</span><span class=\"p\">[</span><span class=\"o\">'</span><span class=\"na\">local</span><span class=\"p\">:</span><span class=\"nc\">spidermonkey</span><span class=\"o\">-</span><span class=\"n\">embedding</span><span class=\"o\">-</span><span class=\"n\">splicer</span><span class=\"o\">/</span><span class=\"n\">splicer</span><span class=\"p\">#</span><span class=\"n\">stub</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">'</span><span class=\"p\">](</span><span class=\"n\">ptr0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variant4_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variant4_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variant4_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variant6_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variant6_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variant6_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variant8_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variant8_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variant8_2</span><span class=\"p\">);</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/ComponentizeJS/blob/0.18.4/src/componentize.js#L379\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ce6aaa73415a5c0d427e8023fbb3d8051281507c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386336376666663835623666363562346131333762636634353232643335373335636234346563386263353533633138383334626532663336383963356539362f62797465636f6465616c6c69616e63652f436f6d706f6e656e74697a654a53&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/ComponentizeJS/blob/0.18.4/src/componentize.js#L379\" title=\"ComponentizeJS/src/componentize.js at 0.18.4 · bytecodealliance/ComponentizeJS\">ComponentizeJS/src/componentize.js at 0.18.4 · bytecodealliance/ComponentizeJS</a></div><div class=\"message_embed_description\">JS -&gt; WebAssembly Component. Contribute to bytecodealliance/ComponentizeJS development by creating an account on GitHub.</div></div></div>",
        "id": 534808704,
        "sender_full_name": "Laurence Rowe",
        "timestamp": 1755417158
    },
    {
        "content": "<p>Looks like the <code>spidermonkey-embedding-splicer.core.wasm</code> memory (aka <code>exports1.memory</code>, <code>memory0</code>) reaches 4GB and cannot grow further.</p>",
        "id": 534842385,
        "sender_full_name": "Laurence Rowe",
        "timestamp": 1755459170
    },
    {
        "content": "<p>Hey Lawrence, at first I thought you might be running into this similar issue on Jco:</p>\n<p><a href=\"https://github.com/bytecodealliance/jco/issues/568\">https://github.com/bytecodealliance/jco/issues/568</a><br>\n(jco calls through to componentize-js)</p>\n<p>That said I think your problem might be different... <code>renderer.mjs</code> is 11MB -- I think the problem might be simply trying to load the script itself into memory. That said, like Alex pointed out the memory <em>should</em> be able to grow... </p>\n<p>Unless it turns out that the <a href=\"https://github.com/composablesys/wirm/blob/main/src/ir/module/mod.rs#L344\">grow operations were removed</a>... (the <code>orca</code> project is <a href=\"https://github.com/composablesys/wirm\">now called <code>wirm</code></a>)</p>\n<p>I think we should be able to fix this by enabling multi-memory -- I'll try to put up a quick PR for that (might be a bit painful to try locally but sounds like you're already stuck in :) </p>\n<p>This is probably a reasonable bug to file against componentize-js for tracking as well at this point.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/issues/568\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/882f6f3d47f8693b7f3813831a4c30289c76285f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656131646365626139663863333631633839313037303231336263373330353066323063353066396461363261396633663266336434613137633332326235332f62797465636f6465616c6c69616e63652f6a636f2f6973737565732f353638&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/issues/568\" title=\"jco componentize out of memory · Issue #568 · bytecodealliance/jco\">jco componentize out of memory · Issue #568 · bytecodealliance/jco</a></div><div class=\"message_embed_description\">Hey all, thanks for the cool project! I've been following various talks in the space for the last year and am really excited to be trying out some stuff! Background I'm working in a Rust codebase t...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/composablesys/wirm/blob/main/src/ir/module/mod.rs#L344\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/936e4a2f4d8b5b3827e5cf541449ae3b003227af/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383730383937636562386336646330383431376461363463333738333662343365656336643939663734663636363139333638633864316135326230323130642f636f6d706f7361626c657379732f7769726d&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/composablesys/wirm/blob/main/src/ir/module/mod.rs#L344\" title=\"wirm/src/ir/module/mod.rs at main · composablesys/wirm\">wirm/src/ir/module/mod.rs at main · composablesys/wirm</a></div><div class=\"message_embed_description\">WebAssembly Transformation Library for the Component Model - composablesys/wirm</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/composablesys/wirm\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/936e4a2f4d8b5b3827e5cf541449ae3b003227af/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383730383937636562386336646330383431376461363463333738333662343365656336643939663734663636363139333638633864316135326230323130642f636f6d706f7361626c657379732f7769726d&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/composablesys/wirm\" title=\"GitHub - composablesys/wirm: WebAssembly Transformation Library for the Component Model\">GitHub - composablesys/wirm: WebAssembly Transformation Library for the Component Model</a></div><div class=\"message_embed_description\">WebAssembly Transformation Library for the Component Model - composablesys/wirm</div></div></div>",
        "id": 534935934,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1755518633
    },
    {
        "content": "<p>Ah a bit weird, it looks like the error is actually deep inside <code>orca</code>/<code>wirm</code> at this point, while trying to parse.</p>",
        "id": 534948319,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1755522422
    },
    {
        "content": "<p>Haven't been able to pin this one down just yet, but I'm now wondering if it has to do with Memory64 -- the orca/wirm code works just fine, going through processing sections until it runs out of memory. </p>\n<p>I <em>think</em> the Rust component may be trying to ask for more memory from Node and failing.</p>\n<p>The component that is used is actually built by <code>jco</code> (js-component-bindgen), so where I ended up searching around was checking whether this is due to lack  memory64 support. </p>\n<p>I'm starting to think this might have to do with Memory64:</p>\n<p><a href=\"https://github.com/nodejs/node/issues/57469\">https://github.com/nodejs/node/issues/57469</a><br>\n<a href=\"https://github.com/nodejs/node/pull/57114\">https://github.com/nodejs/node/pull/57114</a><br>\n<a href=\"https://github.com/nodejs/node/pull/57753\">https://github.com/nodejs/node/pull/57753</a><br>\n<a href=\"https://github.com/nodejs/node/pull/58070\">https://github.com/nodejs/node/pull/58070</a><br>\n<a href=\"https://chromestatus.com/feature/5070065734516736\">https://chromestatus.com/feature/5070065734516736</a></p>\n<p>I still get the error with Node 24, but the bigger problem is that the component (splicer) built in Rust, transpiled by <code>jco</code> (via<code>js-component-bindgen</code>) and loaded by NodeJS, is not actually memory64 compliant</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/nodejs/node/issues/57469\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/66d1d1810d2af25f6c09cd0c92dfe22c1cce0955/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663032343766646461613632656563393431636266383361333333316234303035636337363435623761636564393532353431663331366366343864353637342f6e6f64656a732f6e6f6465&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/nodejs/node/issues/57469\" title=\"nodejs/node\">nodejs/node</a></div><div class=\"message_embed_description\">Node.js JavaScript runtime ✨🐢🚀✨. Contribute to nodejs/node development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/nodejs/node/pull/57114\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/01e8907489deaa09cae1e63704df2d28eb7fd8cf/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346637343165396630346564313965393630333031366163396536333330653564666331613964323437653465313231316138353661306665376566666335322f6e6f64656a732f6e6f64652f70756c6c2f3537313134&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/nodejs/node/pull/57114\" title=\"[help wanted] deps: update V8 to 13.4 by targos · Pull Request #57114 · nodejs/node\">[help wanted] deps: update V8 to 13.4 by targos · Pull Request #57114 · nodejs/node</a></div><div class=\"message_embed_description\">Summary of current issues (I need help for all of them):\n\n SmartOS build failures: https://ci.nodejs.org/job/node-test-commit-smartos/59914/\n Problem with --shared build: https://ci.nodejs.org/job/...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/nodejs/node/pull/57753\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c2c87b460dd638bfa0ca16aeba2f8ca6ae767c0e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343863613438393262663831646531333234353964636530623834363264366134313431323265336463363463616361643738633833613338333364633862342f6e6f64656a732f6e6f64652f70756c6c2f3537373533&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/nodejs/node/pull/57753\" title=\"[help wanted] deps: update V8 to 13.6 by targos · Pull Request #57753 · nodejs/node\">[help wanted] deps: update V8 to 13.6 by targos · Pull Request #57753 · nodejs/node</a></div><div class=\"message_embed_description\">I hope it can replace #57114\nNotable changes:\n\nRegExp.escape\nFloat16Array\nAtomics.pause\nWebAssembly Memory64\nExplicit resource management\nError.isError\n\n@nodejs/v8-update @nodejs/tsc</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/nodejs/node/pull/58070\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5c656456a0f9eb54ac198f71501c68ede136086c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323439313530316530366232623834663836383835396230376564373630363339303137646263323763626236636535633532616232323035666665313132392f6e6f64656a732f6e6f64652f70756c6c2f3538303730&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/nodejs/node/pull/58070\" title=\"deps: update V8 to 13.6 by targos · Pull Request #58070 · nodejs/node\">deps: update V8 to 13.6 by targos · Pull Request #58070 · nodejs/node</a></div><div class=\"message_embed_description\">Same as #57753, without compatibility patches for MSVC and armv7.\nNotable changes:\n\nRegExp.escape\nFloat16Array\nAtomics.pause\nWebAssembly Memory64\nExplicit resource management\nError.isError</div></div></div>",
        "id": 534976131,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1755531140
    },
    {
        "content": "<p>I think it's that <a href=\"https://github.com/bytecodealliance/ComponentizeJS/tree/main/crates/spidermonkey-embedding-splicer\">https://github.com/bytecodealliance/ComponentizeJS/tree/main/crates/spidermonkey-embedding-splicer</a> is not built with memory64 support (or has a memory leak that means it needs more than 4GB)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/ComponentizeJS/tree/main/crates/spidermonkey-embedding-splicer\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ce6aaa73415a5c0d427e8023fbb3d8051281507c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386336376666663835623666363562346131333762636634353232643335373335636234346563386263353533633138383334626532663336383963356539362f62797465636f6465616c6c69616e63652f436f6d706f6e656e74697a654a53&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/ComponentizeJS/tree/main/crates/spidermonkey-embedding-splicer\" title=\"ComponentizeJS/crates/spidermonkey-embedding-splicer at main · bytecodealliance/ComponentizeJS\">ComponentizeJS/crates/spidermonkey-embedding-splicer at main · bytecodealliance/ComponentizeJS</a></div><div class=\"message_embed_description\">JS -&gt; WebAssembly Component. Contribute to bytecodealliance/ComponentizeJS development by creating an account on GitHub.</div></div></div>",
        "id": 534976606,
        "sender_full_name": "Laurence Rowe",
        "timestamp": 1755531315
    },
    {
        "content": "<p>Yup, it seems to be a combination of that, and that even <em>if</em> it was built with memory64 support, Node couldn't run the transpiled component unless you were on a version greater than Node 24</p>",
        "id": 534976966,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1755531418
    },
    {
        "content": "<p>That component is built <em>and</em> transpiled for use by componentize-js</p>",
        "id": 534977024,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1755531438
    },
    {
        "content": "<p>I did see something similar to the initial stack trace in that JCO #568 issue which was caused by calls for random numbers / <code>performance.now</code> during startup. I solved that by patching Math.random and removing <code>globalThis.performance</code></p>",
        "id": 534977049,
        "sender_full_name": "Laurence Rowe",
        "timestamp": 1755531447
    },
    {
        "content": "<p>I'm on Node 24</p>",
        "id": 534977076,
        "sender_full_name": "Laurence Rowe",
        "timestamp": 1755531456
    },
    {
        "content": "<p>Hmm. Maybe it is as simple as changing the rust toolchain to wasm64-unknown-unknown. <a href=\"https://github.com/bytecodealliance/ComponentizeJS/blob/main/rust-toolchain.toml\">https://github.com/bytecodealliance/ComponentizeJS/blob/main/rust-toolchain.toml</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/ComponentizeJS/blob/main/rust-toolchain.toml\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ce6aaa73415a5c0d427e8023fbb3d8051281507c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386336376666663835623666363562346131333762636634353232643335373335636234346563386263353533633138383334626532663336383963356539362f62797465636f6465616c6c69616e63652f436f6d706f6e656e74697a654a53&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/ComponentizeJS/blob/main/rust-toolchain.toml\" title=\"ComponentizeJS/rust-toolchain.toml at main · bytecodealliance/ComponentizeJS\">ComponentizeJS/rust-toolchain.toml at main · bytecodealliance/ComponentizeJS</a></div><div class=\"message_embed_description\">JS -&gt; WebAssembly Component. Contribute to bytecodealliance/ComponentizeJS development by creating an account on GitHub.</div></div></div>",
        "id": 534977813,
        "sender_full_name": "Laurence Rowe",
        "timestamp": 1755531698
    },
    {
        "content": "<p>It certainly could be! I saw that but haven't tried it yet</p>",
        "id": 534978069,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1755531780
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/bytecodealliance/ComponentizeJS/issues/281\">https://github.com/bytecodealliance/ComponentizeJS/issues/281</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/ComponentizeJS/issues/281\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/32e0990bdea47f7b7faa955d353f494853d6ca86/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366561363037383835653635633764643166336330383932643136613533656630623633376362623262353461303732323934656363363236626264613734362f62797465636f6465616c6c69616e63652f436f6d706f6e656e74697a654a532f6973737565732f323831&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/ComponentizeJS/issues/281\" title=\"splicer_component memory allocation failure during AOT build of large JS file · Issue #281 · bytecodealliance/ComponentizeJS\">splicer_component memory allocation failure during AOT build of large JS file · Issue #281 · bytecodealliance/ComponentizeJS</a></div><div class=\"message_embed_description\">I've been able to get my 11MB React server rendering benchmark to run with ComponentizeJS and wasmtime serve but get a memory error when trying to build with --aot. Is there some way to increase th...</div></div></div>",
        "id": 534980957,
        "sender_full_name": "Laurence Rowe",
        "timestamp": 1755532717
    },
    {
        "content": "<p>What I was looking into was whether even if you <em>could</em> build that component <code>jco transpile</code> wouldn't necessarily transpile it correctly. <code>jco</code> is meant to deal with components</p>",
        "id": 534981068,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1755532752
    },
    {
        "content": "<p>Turns out it requires some tweaks but you can</p>",
        "id": 534981104,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1755532760
    },
    {
        "content": "<p>Just leaving this here so you can try it locally:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"load1\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"kt\">i64</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mh\">0xffff_ffff_ffff_fff0</span>\n<span class=\"w\">      </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"load2\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"kt\">i64</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">16</span>\n<span class=\"w\">      </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mh\">0xfffffffffffffff0</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>Those functions willl actually fail, but it's a nice minimal example of a memory 64 module</p>\n<p>You'd also need some WIT:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">examples</span><span class=\"p\">:</span><span class=\"nc\">test</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Leaving it empty was good enough for me just to test</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wt</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">embed</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test64</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test64</span><span class=\"p\">.</span><span class=\"n\">embedded</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>Then I ran</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wt</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">test64</span><span class=\"p\">.</span><span class=\"n\">embedded</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test64</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>Given a specific tweak to Jco, will transpile:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">jco</span><span class=\"p\">.</span><span class=\"n\">js</span><span class=\"w\"> </span><span class=\"n\">transpile</span><span class=\"w\"> </span><span class=\"n\">test64</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">tmp</span>\n\n<span class=\"w\">  </span><span class=\"n\">Transpiled</span><span class=\"w\"> </span><span class=\"n\">JS</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"n\">Files</span><span class=\"p\">:</span>\n\n<span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">test64</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">ts</span><span class=\"w\">  </span><span class=\"mf\">0.03</span><span class=\"w\"> </span><span class=\"n\">KiB</span>\n<span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">test64</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">js</span><span class=\"w\">    </span><span class=\"mf\">2.39</span><span class=\"w\"> </span><span class=\"n\">KiB</span>\n</code></pre></div>\n<p>I'm going to update Jco to be ready for this use case, but obviously it looks like the first problem is building the splicer as a memory64 component</p>",
        "id": 534981857,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1755532993
    }
]