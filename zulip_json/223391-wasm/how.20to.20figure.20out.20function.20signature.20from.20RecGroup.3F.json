[
    {
        "content": "<p>I'm upgrading some fairly old code that still dealt with <code>wasmparser::Type</code> which made it fairly straightforward to figure out the arguments and return values of a function. I'd collect all <code>Type</code>s into a list and each function section entry would reference a specific <code>Type</code> by index and <code>Type::Func</code> would contain info I needed.</p>\n<p>With recursive types I'm no longer sure how to deal with this? Is it even possible anymore to know definitely what is the function type within a module by just parsing module itself and nothing else?</p>",
        "id": 515315262,
        "sender_full_name": "Simonas (nagisa)",
        "timestamp": 1746022188
    },
    {
        "content": "<p>(I understand that I would not regress much if I checked that <code>RecGroup::is_explicit_rec_group() == false</code>, asserted that <code>types()</code> iterator gave me just one value and worked from there, but that's clunky and it sounds that perturbation as simple as adding <code>(rec ...)</code> around a function type would already make this approach fail?)</p>",
        "id": 515315884,
        "sender_full_name": "Simonas (nagisa)",
        "timestamp": 1746022331
    },
    {
        "content": "<p>rec groups are used to define recursive types from the GC proposal, but otherwise everything remains the same. Modules are still standalone, functions still specify their type by an index, and the index that a function type points to must be a function type, and function types are still a list of params/results.</p>\n<p>Could you clarify a bit more what you're doing and how rec groups make that more complicated?</p>",
        "id": 515323840,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1746024253
    },
    {
        "content": "<p>Err, sorry I missed the response here ^^ So my primary goal and requirement is to be able to inspect the number and size of function arguments. I do that to make an estimate on the worst-case stack use for the functions and blocks. From what you're saying it seems like <code>rec</code> types cannot occur in any shape or form in types that are referenced by the functions section or by blocks? That simplifies a lot, though at the same time I just went with <a href=\"https://docs.rs/wasmparser/latest/wasmparser/type.TypeSectionReader.html#method.into_iter_err_on_gc_types\">into_iter_err_on_gc_types</a> cause I don't actually care about supporting anything gc related at this time.</p>",
        "id": 518533536,
        "sender_full_name": "Simonas (nagisa)",
        "timestamp": 1747398947
    },
    {
        "content": "<p>Looking at plain wasm structure I was under an impression that function types become capable of referencing these other recursive types which appeared to be difficult to grok statically and in isolation.</p>",
        "id": 518533780,
        "sender_full_name": "Simonas (nagisa)",
        "timestamp": 1747399002
    },
    {
        "content": "<p>ah yeah if you don't want to support GC then that method is what you want, and while function-references does enable more types than before they'll show up as <code>ValType::Ref(...)</code> which you can still approximate the size of and count as one param/result.</p>",
        "id": 518791874,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1747465268
    }
]