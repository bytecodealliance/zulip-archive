[
    {
        "content": "<p>Similar question to the one Lann raised in <a href=\"#narrow/channel/223391-wasm/topic/.E2.9C.94.20constant.20time.20equality\"><a class=\"stream-topic\" data-stream-id=\"223391\" href=\"/#narrow/channel/223391-wasm/topic/.E2.9C.94.20constant.20time.20equality/with/516766197\">#wasm &gt; ✔ constant time equality</a></a>: do the <a href=\"https://docs.rs/aes-gcm/latest/aes_gcm/#security-notes\">security notes on the aes_gcm crate</a> apply to Wasm such that the implementation can be expected to be constant-time? My reading of the <a href=\"https://github.com/juliocesarfort/public-pentesting-reports/blob/master/NCCGroup/NCC_Group_MobileCoin_RustCrypto_AESGCM_ChaCha20Poly1305_Implementation_Review_2020-02-12_v1.0.pdf\">security audit</a> (the link in the crate docs isn't working anymore) that was done on the implementation in 2019 is that the answer might be yes? <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> this seems like a topic you'd have opinions on <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/juliocesarfort/public-pentesting-reports/blob/master/NCCGroup/NCC_Group_MobileCoin_RustCrypto_AESGCM_ChaCha20Poly1305_Implementation_Review_2020-02-12_v1.0.pdf\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/929453d145a6db948a661de12a844754563cb091/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363339313236656334303830653237343562386134663366303236616231653361393164356534633636383933633732636139653564313034626439656537382f6a756c696f6365736172666f72742f7075626c69632d70656e74657374696e672d7265706f727473&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/juliocesarfort/public-pentesting-reports/blob/master/NCCGroup/NCC_Group_MobileCoin_RustCrypto_AESGCM_ChaCha20Poly1305_Implementation_Review_2020-02-12_v1.0.pdf\" title=\"public-pentesting-reports/NCCGroup/NCC_Group_MobileCoin_RustCrypto_AESGCM_ChaCha20Poly1305_Implementation_Review_2020-02-12_v1.0.pdf at master · juliocesarfort/public-pentesting-reports\">public-pentesting-reports/NCCGroup/NCC_Group_MobileCoin_RustCrypto_AESGCM_ChaCha20Poly1305_Implementation_Review_2020-02-12_v1.0.pdf at master · juliocesarfort/public-pentesting-reports</a></div><div class=\"message_embed_description\">A list of public penetration test reports published by several consulting firms and academic security groups. - juliocesarfort/public-pentesting-reports</div></div></div>",
        "id": 535100199,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1755600139
    },
    {
        "content": "<blockquote>\n<p>using a portable implementation which is only constant time on processors which implement constant-time multiplication.</p>\n</blockquote>\n<p>The Wasm spec afaik makes no guarantees but in practice I'd be very surprised if any runtimes themselves triggered data dependent timing for multiplies.</p>",
        "id": 535115686,
        "sender_full_name": "Lann Martin",
        "timestamp": 1755605964
    },
    {
        "content": "<p>If we're looking for an auditable chain of specified guarantees, then of course Wasm doesn't give us anything, but as for what to actually expect: for truly data-dependent (i.e., not constant-propagated) ALU operations, we tend to lower them to the equivalent CPU instructions more or less directly, so we \"pass through\" whatever requirements (downward) or guarantees (upward) re: constant time might apply. This is certainly the case for multiplication -- a plain integer multiply with two non-constant inputs should always lower to a plain integer multiply CPU instruction, so then you'd need to rely on whatever the ISA spec says and/or what the implementation does, depending on what level of guarantee you're looking for.</p>\n<p>On Intel and AMD implementations of x86 at least the integer multiplier has a fast fixed-latency pipeline, i.e. latency won't depend on the data. Note this isn't a guarantee but it'd be exceptionally <em>weird</em> for a new high-performance core design to change this.</p>\n<p>It'd still be nice to formalize all this with a \"constant-time Wasm\" spec, but that's a boulder for someone else to roll uphill :-)</p>",
        "id": 535171468,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1755623171
    },
    {
        "content": "<p>Thank you, that all matches my understanding. I guess basically, \"if a security audit says that code is fine when compiled to a mainstream platform via LLVM, then it'll be fine running in wasmtime on the same platform, too\"?</p>",
        "id": 535177914,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1755625886
    },
    {
        "content": "<p>and yes, constant-time wasm would be awfully nice to have. <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> and I talked about this at the CG f2f in Pittsburgh; one key observation is that the ct-wasm proposal does a lot more than what's truly needed in make constant-time-ness a type system concern. To be able to port existing code to target wasm with actual \"guarantees\" (as far as those go on the target hardware, anyway), we'd only need the actual operations. That seems like it could conceivably be a much smaller lift</p>",
        "id": 535178262,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1755626050
    },
    {
        "content": "<blockquote>\n<p>\"if a security audit says that code is fine when compiled to a mainstream platform via LLVM, then it'll be fine running in wasmtime on the same platform, too\"?</p>\n</blockquote>\n<p>Informally and without an official crypto rubber stamp, but \"for real people in the real world with real thinking rocks\", yep, that sounds right!</p>",
        "id": 535178946,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1755626330
    },
    {
        "content": "<p>oh yeah, I definitely wasn't looking for more than the informal version!</p>",
        "id": 535179046,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1755626378
    }
]