[
    {
        "content": "<p>Is anyone aware of any (wasm-specific) reason that a \"standard\" (bitwise-op-based) constant-time string equality check would not be constant-time? I can't think of any but just wanted to poll the hive mind in case there was something surprising here.</p>",
        "id": 516693805,
        "sender_full_name": "Lann Martin",
        "timestamp": 1746628480
    },
    {
        "content": "<p>Optimizing compilers like LLVM tend to be surprisingly effective at optimizing constant-time operations back into variable-time operations. But that is the case for native compilation too.</p>",
        "id": 516764004,
        "sender_full_name": "bjorn3",
        "timestamp": 1746651097
    },
    {
        "content": "<p>Right, hence \"(wasm-specific)\"; most generic optimizations would presumably apply equally well to x86</p>",
        "id": 516764124,
        "sender_full_name": "Lann Martin",
        "timestamp": 1746651147
    },
    {
        "content": "<p>I guess a different way to frame this question is: <em>how nervous should I be</em> about a typical constant-time equality check ported to Wasm in - say - the next 3 years?</p>",
        "id": 516764415,
        "sender_full_name": "Lann Martin",
        "timestamp": 1746651284
    },
    {
        "content": "<p>Cranelift will translate a typical inner-loop-with-some-arithmetic-depending-on-per-loop-loads into machine code more or less 1-to-1; so you're down to whatever the ISA says about constant-time operations</p>",
        "id": 516764485,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1746651316
    },
    {
        "content": "<p>and then for say x86 <em>in practice</em> all the relevant ops are constant-time (loads, compares), but that's not guaranteed by the ISA</p>",
        "id": 516764546,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1746651346
    },
    {
        "content": "<p>so if you're comfortable with an \"in practice it's fine\" then the pipeline from Wasm bytecode all the way to microarchitecture should be constant-time; caveats for whatever produces your Wasm bytecode, as bjorn3 says</p>",
        "id": 516764675,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1746651389
    },
    {
        "content": "<p>Oh and these things don't typically have any explicit compares; grabbing a random reasonable-looking example:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">cst_time_memcmp_safest1</span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">m1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">m2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">pm1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">m1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">pm2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">m2</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"o\">--</span><span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pm1</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">pm2</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">];</span>\n<span class=\"w\">            </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"p\">(((</span><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"n\">diff</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 516765446,
        "sender_full_name": "Lann Martin",
        "timestamp": 1746651716
    },
    {
        "content": "<p>There <em>will</em> of course be some kind of branch at the call site which could still be used to optimize.</p>",
        "id": 516765607,
        "sender_full_name": "Lann Martin",
        "timestamp": 1746651787
    }
]