[
    {
        "content": "<p>I have a <code>wac</code> question similar to <a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1565#issuecomment-2815677725\">https://github.com/bytecodealliance/wasm-tools/issues/1565#issuecomment-2815677725</a>, but not quite the same. Hope to get some suggestions about how I can fix this.</p>\n<p>I have the following main WIT file</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">main</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.{</span><span class=\"n\">res</span><span class=\"p\">};</span>\n<span class=\"w\">  </span><span class=\"n\">test</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">res</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And I want to virtualize the <code>res</code> interface by implementing this WIT</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When I run <code>wac plug</code>, I get this final interface</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">main</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">res</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Basically <code>resource res</code> gets inlined into the <code>main</code> interface. On the host side, I'm still using the original WIT file which expects <code>res.res</code>, not <code>main.res</code>, so it caused a type mismatch when instantiating the wasm.  I created a <a href=\"https://github.com/chenyan2002/wac-bug-repo\">repo</a>. Would be great if I can work around this problem via some wac script.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/issues/1565#issuecomment-2815677725\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c2281c2cc466773facb17d04851e663c385c703d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363863353864336232343433303335386539333035323131636662636665383961633939396362333630363832636463303165643165306235383963393138322f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f6973737565732f31353635&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1565#issuecomment-2815677725\" title=\"wasi-virt throws error in wasm-compose (redirected from wasi-virt to Wasm-tools) 路 Issue #1565 路 bytecodealliance/wasm-tools\">wasi-virt throws error in wasm-compose (redirected from wasi-virt to Wasm-tools) 路 Issue #1565 路 bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Hi, I'm trying to use wasi-virt with a micro service that I have written in rust. I want to give it a pre-opened file directory so that I can read a json file. I am using this command: wasi-virt --...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/chenyan2002/wac-bug-repo\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/867d89179bcbe5eb88e568f8d8eff157928b3f95/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383937666633396131633863353037646633623663376632373134663732656634343666386430303131383265656466306463643636326261313032613939612f6368656e79616e323030322f7761632d6275672d7265706f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/chenyan2002/wac-bug-repo\" title=\"GitHub - chenyan2002/wac-bug-repo\">GitHub - chenyan2002/wac-bug-repo</a></div><div class=\"message_embed_description\">Contribute to chenyan2002/wac-bug-repo development by creating an account on GitHub.</div></div></div>",
        "id": 531926084,
        "sender_full_name": "Yan Chen",
        "timestamp": 1753907935
    },
    {
        "content": "<p>Is your goal to get a component that looks like <code>world root { export main; }</code> and nothing else?</p>",
        "id": 531930313,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753909480
    },
    {
        "content": "<p>(thanks for the repro! I was able to figure out what's going on poking around there)</p>",
        "id": 531930450,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753909532
    },
    {
        "content": "<p>It should look like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In my real example, <code>import res</code> exists in the final wasm, but I get another inlined <code>res</code> in the <code>main</code> interface as well. In the mini-repo, the <code>import res</code> somehow gets dead-code eliminated.</p>",
        "id": 531930703,
        "sender_full_name": "Yan Chen",
        "timestamp": 1753909616
    },
    {
        "content": "<p>hm ok then there's a few things going here I think, one is that your <code>virt.wasm</code> doesn't <code>import res</code>, it only does <code>export res</code>, so there's nothing to attach an actual host import to</p>",
        "id": 531931078,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753909766
    },
    {
        "content": "<p>but are you thinking that the host <code>res</code> would be imported to <code>virt.wasm:import res</code>, then <code>virt.wasm:export res</code> is imported into <code>main.wasm</code>, and then <code>main.wasm:export main</code> is exported?</p>",
        "id": 531931144,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753909796
    },
    {
        "content": "<p>hmm, the wit for <code>world imports</code> does have <code>import res</code>. Maybe I need to plug in some real code instead of <code>wit-bingen --stubs</code>.</p>\n<p>Yes, at the WIT level, <code>virt.wasm:import res</code>--<code>virt.wasm:export res</code>--plug-to--<code>main.wasm:import res</code>--<code>main.wasm:export main</code>.</p>",
        "id": 531931835,
        "sender_full_name": "Yan Chen",
        "timestamp": 1753910087
    },
    {
        "content": "<p>ah ok, then for the result, that's not actually possible. What you're describing is a situation where runtime-wise what's happening is that the final component would <code>import res</code> to get a host thing but then the exported function would actually take an internal, virtualized <code>res</code> interface. That means that there's no actual way to describe what you want in WIT or components as it's not a valid component.</p>\n<p>In situations like this <code>wac</code> does its best to produce something and the result can be confusing (e.g. changing the <code>interface</code> definitions as you're seeing). Ideally <code>wac</code> would produce a more first-class error of sorts.</p>",
        "id": 531932100,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753910192
    },
    {
        "content": "<p>At the component model level the resource that <code>main</code> refers to must either be imported or exported, it can't be purely internal, so one example would be to have the final component do both <code>export res</code> and <code>export main</code> for example.</p>",
        "id": 531932182,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753910221
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">composed</span><span class=\"p\">:</span><span class=\"nc\">component</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">virt</span><span class=\"p\">:</span><span class=\"nc\">imports</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\">  </span><span class=\"p\">};</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">:</span><span class=\"nc\">component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">res</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">imports</span><span class=\"p\">.</span><span class=\"n\">res</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"p\">};</span>\n<span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"p\">.</span><span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">main</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>produces:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">:</span><span class=\"nc\">component</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">main</span><span class=\"o\">/</span><span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">main</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">main</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.{</span><span class=\"n\">res</span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">res</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>in your example repo</p>",
        "id": 531932822,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753910484
    },
    {
        "content": "<p>(and yeah you'd have to add some sort of use of the host <code>import res</code> within <code>virt:imports</code> to prevent it from being DCE'd)</p>",
        "id": 531932862,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753910502
    },
    {
        "content": "<p>Thanks! This fixed my example repo. In my real code, I get a more tricky case which is not very easy to reproduce. Roughly, it's this WIT file</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">main</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"o\">-</span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"o\">-</span><span class=\"n\">io</span><span class=\"p\">.{</span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"o\">-</span><span class=\"n\">handle</span><span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">resp</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">body</span><span class=\"p\">.{</span><span class=\"n\">body</span><span class=\"o\">-</span><span class=\"n\">handle</span><span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">body</span><span class=\"p\">.{</span><span class=\"n\">body</span><span class=\"o\">-</span><span class=\"n\">handle</span><span class=\"p\">};</span>\n<span class=\"w\">  </span><span class=\"n\">test</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">body</span><span class=\"o\">-</span><span class=\"n\">handle</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"o\">-</span><span class=\"n\">io</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">body</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">resp</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"o\">-</span><span class=\"n\">io</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">body</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">resp</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"o\">-</span><span class=\"n\">io</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">body</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">resp</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>After <code>wit compose</code> with <code>export imports...; export main...;</code>, for <code>http-resp</code>, I get <code>use async-io.{handle as body-handle}</code> instead of the original <code>use http-body.{body-handle}</code>.</p>\n<p>I'm not sure if this difference matters as they are just type alias in Rust. But I still get <code>failed to convert function to given type</code> error when instantiating the wasm module. If we try that WIT file directly, we actually get the correct alias name, so it's harder to reproduce it. Just posting here in case you have a hunch of what might go wrong.</p>",
        "id": 531947812,
        "sender_full_name": "Yan Chen",
        "timestamp": 1753916752
    },
    {
        "content": "<p>Okay, I have a <a href=\"https://github.com/chenyan2002/wac-bug-repo/tree/more-tricky-bug\">repo</a> for this. <code>http-resp</code> is kind of \"internal\", as it's not directly mentioned in the original exports. After <code>wac compose</code>, it does get exported.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/chenyan2002/wac-bug-repo/tree/more-tricky-bug\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/867d89179bcbe5eb88e568f8d8eff157928b3f95/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383937666633396131633863353037646633623663376632373134663732656634343666386430303131383265656466306463643636326261313032613939612f6368656e79616e323030322f7761632d6275672d7265706f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/chenyan2002/wac-bug-repo/tree/more-tricky-bug\" title=\"GitHub - chenyan2002/wac-bug-repo at more-tricky-bug\">GitHub - chenyan2002/wac-bug-repo at more-tricky-bug</a></div><div class=\"message_embed_description\">Contribute to chenyan2002/wac-bug-repo development by creating an account on GitHub.</div></div></div>",
        "id": 531954768,
        "sender_full_name": "Yan Chen",
        "timestamp": 1753921135
    },
    {
        "content": "<p>hm ok that might be a bug in <code>wac</code> perhaps? That I think should all work otherwise though</p>",
        "id": 532140014,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753985788
    },
    {
        "content": "<p>I did some more debugging. That alias is actually fine. The problem is that <code>main.test</code> now takes the <code>body-handle</code> resource from <code>export:async-io.handle</code>, not the <code>import:async-io.handle</code>. So the host is expecting a host-side resource handle, but the wasm provides a guest-side handle with the same name.</p>",
        "id": 532140887,
        "sender_full_name": "Yan Chen",
        "timestamp": 1753986053
    },
    {
        "content": "<p>I think that's more-or-less a fundamental requirement here unfortunately. The <code>main.wasm</code> component exports a function that refers to a resource in an import, and you're satisfying that import with <code>virt.wasm</code>. You'd have to make a second wrapper of sorts which was a <code>test</code> function, for example, which took a host handle, then created a guest handle from that host handle, then called the <code>main.wasm</code>'s test export with the guest handle</p>",
        "id": 532142147,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753986428
    },
    {
        "content": "<p>so you'd have to interpose both on the imports and on the exports</p>",
        "id": 532142172,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753986437
    },
    {
        "content": "<p>So I add an export module in the repo with this wac script</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">virt</span><span class=\"p\">:</span><span class=\"nc\">imports</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">:</span><span class=\"nc\">component</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"kr\">final</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">virt</span><span class=\"p\">:</span><span class=\"nc\">exports</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">main</span><span class=\"p\">.</span><span class=\"n\">main</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"o\">..</span><span class=\"p\">.;</span>\n<span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">..</span><span class=\"p\">.;</span>\n</code></pre></div>\n<p>And I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">encoding</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">graph</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">validation</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">main</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">mismatch</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">body</span><span class=\"o\">-</span><span class=\"n\">handle</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">same</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ResourceId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">globally_unique_id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">contextually_unique_id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">vs</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ResourceId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">globally_unique_id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">contextually_unique_id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x4685c6</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>It feels like the wac script is not expressive enough to indicate which import are host vs guest side, and the solver is doing a best effort job?</p>",
        "id": 532161728,
        "sender_full_name": "Yan Chen",
        "timestamp": 1753993482
    },
    {
        "content": "<p>perhaps? It depends on <code>virt:exports</code> and <code>final</code> there. While it's definitely a possibility that <code>wac</code> has bugs, it's also a possibility that this is model-able in the component model exactly as-is and needs some massaging (e.g. injecting the wrapper for both imports and exports)</p>",
        "id": 532181327,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1754001990
    },
    {
        "content": "<p>Looking at <code>wac resolve</code>,  I think <code>wac compose</code> is actually doing the right thing: the resource gets virtualized, so the previously host side resource expectedly becomes a guest side resource, which eventually calls the host resource. The type mismatch is better resolved on the wasmtime-wit-bindgen side then.</p>\n<p><a href=\"/user_uploads/15107/vHPMbJXkjLQWORXMfjECpN65/compose.gif\">compose.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/vHPMbJXkjLQWORXMfjECpN65/compose.gif\" title=\"compose.gif\"><img data-original-content-type=\"image/gif\" data-original-dimensions=\"1448x531\" src=\"/user_uploads/thumbnail/15107/vHPMbJXkjLQWORXMfjECpN65/compose.gif/840x560.webp\"></a></div>",
        "id": 532185097,
        "sender_full_name": "Yan Chen",
        "timestamp": 1754003834
    }
]