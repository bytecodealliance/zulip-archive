[
    {
        "content": "<p>Hi all <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  I am struggling to understand how to create unit tests for the <code>wasm32-wasip2</code> target with <code>wit-bindgen</code>-generated code. </p>\n<p>My current understanding is that the generated code only runs with the <code>wasm32</code> target/arch, so you can't just use the generated code in regular unit tests (when you <code>cargo test</code>you hit <code>unreachable!()</code>).</p>\n<p>So the question is: how do I create unit tests for Rust components? So far we've tried to unit-test the core business logic that doesn't depend on WASI stuff, but that doesn't feel great. We'd like to reach good test coverage. Is there a way to run unit tests with compiled code?</p>",
        "id": 533753575,
        "sender_full_name": "Alex Casalboni",
        "timestamp": 1754907531
    },
    {
        "content": "<p>in .cargo/config.toml, add </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip2</span><span class=\"p\">]</span>\n<span class=\"n\">runner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"wasmtime run\"</span>\n</code></pre></div>\n<p>and then <code>cargo test --target wasm32-wasip2</code> will execute the tests in wasmtime.</p>",
        "id": 533831710,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1754930832
    },
    {
        "content": "<p>thank you <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>  because I need the http WASI implementation, I managed to get it to work with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip2</span><span class=\"p\">]</span>\n<span class=\"n\">runner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"wasmtime run --wasi http=y\"</span>\n</code></pre></div>\n<p>Unfortunately, it doesn't seem possible to generate coverage data via <code>cargo llvm-cov</code> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>  <a href=\"https://github.com/taiki-e/cargo-llvm-cov/issues/221\">https://github.com/taiki-e/cargo-llvm-cov/issues/221</a></p>\n<p>Related: <a href=\"https://github.com/rust-lang/rust/issues/81684\">https://github.com/rust-lang/rust/issues/81684</a></p>\n<p>I also looked into <a href=\"https://github.com/hknio/wasmcov\">https://github.com/hknio/wasmcov</a> but that seems out of scope for WASI <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>Any ideas?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/taiki-e/cargo-llvm-cov/issues/221\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4dbb944b9a7ca80c53ab81031cf43842f49f7b01/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323762326538396333393238643932376232633265306537336431663066353831346332656563333339623661383364633439626232383031386266326233322f7461696b692d652f636172676f2d6c6c766d2d636f762f6973737565732f323231&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/taiki-e/cargo-llvm-cov/issues/221\" title=\"Support for Wasm? · Issue #221 · taiki-e/cargo-llvm-cov\">Support for Wasm? · Issue #221 · taiki-e/cargo-llvm-cov</a></div><div class=\"message_embed_description\">I'd really like to be able to run my Web Assembly tests and get coverage reports for them. First issue, can I specify a custom binary to run e.g. instead of cargo test, my test command is wasm-pack...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/issues/81684\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4560fa3d5be368942c4e081c6153e5dc7e22b45a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f356666613830343931336165393135373436336330653466623030636363613339396561656264643337613363643763396339393634346533313262303062362f727573742d6c616e672f727573742f6973737565732f3831363834&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/issues/81684\" title=\"`rustc --target wasm32-unknown-unknown -Zinstrument-coverage` fails with &quot;can't find crate for `profiler_builtins`&quot; · Issue #81684 · rust-lang/rust\">`rustc --target wasm32-unknown-unknown -Zinstrument-coverage` fails with \"can't find crate for `profiler_builtins`\" · Issue #81684 · rust-lang/rust</a></div><div class=\"message_embed_description\">I'm trying to add support for code coverage to wasm-bindgen tests with the new -Zinstrument-coverage flag, and hitting an error that I only partly understand. I'm building this with anp/moxie@20920...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/hknio/wasmcov\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/16c1145708013bd88b4fa6b7c43f3c8485dba5e3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346538373130316363633938376132396439623737383534386439623161626539653536626135363935653630376335356331616563663337343530363965322f686b6e696f2f7761736d636f76&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/hknio/wasmcov\" title=\"GitHub - hknio/wasmcov: Automated coverage analysis of WASM executables on embedded and other constrained environments\">GitHub - hknio/wasmcov: Automated coverage analysis of WASM executables on embedded and other constrained environments</a></div><div class=\"message_embed_description\">Automated coverage analysis of WASM executables on embedded and other constrained environments - hknio/wasmcov</div></div></div>",
        "id": 533943808,
        "sender_full_name": "Alex Casalboni",
        "timestamp": 1754991776
    },
    {
        "content": "<p>shorthand there would be <code>wasmtime run -Shttp</code>, glad it worked.</p>",
        "id": 534010065,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1755013947
    },
    {
        "content": "<p>and no, I don't have any recommendations for measuring code coverage.</p>",
        "id": 534014566,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1755015404
    }
]