[
    {
        "content": "<p>Has anyone had a go at getting anything in that ecosystem working with wasip3? Or is it still a bit premature to be thinking about that?</p>\n<p>No serious use case yet â€” just idly thinking about prototyping some unsanctioned stuff for <code>$DAY_JOB</code>.</p>",
        "id": 524402993,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1750150556
    },
    {
        "content": "<p>Not that I'm aware of, and I imagine adding WASIp3 support to wasi-libc/wasi-sdk would be a prerequisite for supporting it in Rust <code>std</code>, which in turn would be a prerequisite for supporting it in mio/tokio.</p>\n<p>Also, I've had no luck so far getting WASIp2 support upstreamed into either mio or tokio, and I'm expecting WASIp3 to be an equally tough sell.  Experimental forks should be easy enough, though.</p>",
        "id": 524459407,
        "sender_full_name": "Joel Dice",
        "timestamp": 1750168459
    },
    {
        "content": "<p>For my AUTOSAR demonstrator I gave up on Rust async support for p2, because it looked like a huge effort. The integrated spawn and block_on primitives in p3 made that port trivial with the new technology.</p>\n<p>But for Tokio you will likely also want shared everything threads and atomics which are not part of the 0.3.0 release. <span aria-label=\"time ticking\" class=\"emoji emoji-23f3\" role=\"img\" title=\"time ticking\">:time_ticking:</span></p>",
        "id": 524914919,
        "sender_full_name": "Christof Petig",
        "timestamp": 1750349159
    },
    {
        "content": "<p>Perhaps 0.3 can work without requiring Tokio, if we dust off the executor abstraction crates created for tokio and smol.</p>",
        "id": 524915522,
        "sender_full_name": "Christof Petig",
        "timestamp": 1750349389
    },
    {
        "content": "<p><a href=\"https://crates.io/crates/async-compact\">https://crates.io/crates/async-compact</a> (I know there is no good main and spawn abstraction)</p>",
        "id": 524916031,
        "sender_full_name": "Christof Petig",
        "timestamp": 1750349570
    },
    {
        "content": "<p>In practice a <em>lot</em> of async libraries depend directly on tokio for async system interfaces (<code>fs</code>, <code>net</code>, <code>time</code>), and many (most?) of those should work with a single-threaded executor.</p>",
        "id": 524932566,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750357810
    },
    {
        "content": "<p>Most \"async compat\" libraries I have seen only deal with more abstract interfaces like <code>io</code> and <code>stream</code>. I can imagine having equivalents of those for 0.3 could be useful.</p>",
        "id": 524933021,
        "sender_full_name": "Lann Martin",
        "timestamp": 1750358089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590366\">Christof Petig</span> <a href=\"#narrow/channel/235408-rust-toolchain/topic/Experimental.20mio.2Ftokio.20forks.20for.20wasip3/near/524916031\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://crates.io/crates/async-compact\">https://crates.io/crates/async-compact</a> (I know there is no good main and spawn abstraction)</p>\n</blockquote>\n<p>Sorry, broken link, <a href=\"https://crates.io/crates/async-compat\">https://crates.io/crates/async-compat</a> is the right one</p>",
        "id": 524953945,
        "sender_full_name": "Christof Petig",
        "timestamp": 1750371717
    },
    {
        "content": "<p>Yosh, Dan and I made <a href=\"https://docs.rs/wstd/latest/wstd/\">https://docs.rs/wstd/latest/wstd/</a></p>",
        "id": 525078257,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1750440035
    },
    {
        "content": "<p>its intended to be a minimum viable async runtime for p2, and soon for p3</p>",
        "id": 525078289,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1750440046
    },
    {
        "content": "<p>the goal isnt to compete with tokio but hopefully to show how a port should work</p>",
        "id": 525078310,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1750440056
    },
    {
        "content": "<p>in the meantime its a better way to write guests than dealing with the hostcalls directly, though it has a lot of rough edges still</p>",
        "id": 525078356,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1750440077
    },
    {
        "content": "<p>happy to accept patches to improve it!</p>",
        "id": 525078368,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1750440084
    }
]