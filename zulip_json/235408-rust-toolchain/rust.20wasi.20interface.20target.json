[
    {
        "content": "<p>Hi there, I am trying to figure out how to compile a wasm component in a way that uses a deterministic/locked set of wasi interfaces.</p>\n<p>Essentially I have some world defined in wit which described import/exports for wasi 0.2.4 and I want to validate that some compiled wasm binary targets this world using <code>wasm-tools component targets</code>.</p>\n<p>When I compile my component using <code>cargo build --target wasm32-wasip2</code> I find that it targets either 0.2.4 or 0.2.3 depending on what the component source-code includes.</p>\n<p>I'm struggling to figure out how to ensure the component always targets 0.2.4. Is anyone able to assist?</p>",
        "id": 521290637,
        "sender_full_name": "Julien Vincent",
        "timestamp": 1748609365
    },
    {
        "content": "<p>Could you say more about why you want this strict check? The current behavior is intentional; you can see some discussion <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7860\">here</a> and technical details <a href=\"https://docs.rs/wasmtime/33.0.0/wasmtime/component/struct.Linker.html#names-and-semver\">here</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/7860\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/acd3efdce92be333e97c9d1013f741f326240086/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323730363939323339666562376464356365616333313164313138653366336437383431323134636161376562343764386335333066613466386665306237342f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f37383630&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/7860\" title=\"Automatically handle semver-compatibility in `wasmtime::component::Linker` · Issue #7860 · bytecodealliance/wasmtime\">Automatically handle semver-compatibility in `wasmtime::component::Linker` · Issue #7860 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This was discussed this past week at the BA plumbers summit and the conclusion was that part of the WASI release process will be the expectation that runtimes can update WASI and won't need to carr...</div></div></div>",
        "id": 521300975,
        "sender_full_name": "Lann Martin",
        "timestamp": 1748612805
    },
    {
        "content": "<p>All I want really is a mechanism to validate that some wasm component binary correctly targets some world defined in a provided wit file.</p>\n<p>I have been using <code>wasm-tools component targets</code> - but this requires strict versioning:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>❯<span class=\"w\"> </span>wasm-tools<span class=\"w\"> </span>component<span class=\"w\"> </span>targets<span class=\"w\"> </span>/path/to/wit<span class=\"w\"> </span>/path/to/component<span class=\"w\"> </span>--world<span class=\"w\"> </span><span class=\"s1\">'my:package/my-world@1.0.0'</span>\nerror:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>validate<span class=\"w\"> </span>encoded<span class=\"w\"> </span>bytes\n\nCaused<span class=\"w\"> </span>by:\n<span class=\"w\">    </span><span class=\"m\">0</span>:<span class=\"w\"> </span><span class=\"nb\">type</span><span class=\"w\"> </span>mismatch<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>import<span class=\"w\"> </span><span class=\"sb\">`</span>my-world<span class=\"sb\">`</span>\n<span class=\"w\">       </span>missing<span class=\"w\"> </span>import<span class=\"w\"> </span>named<span class=\"w\"> </span><span class=\"sb\">`</span>wasi:cli/environment@0.2.3<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"o\">(</span>at<span class=\"w\"> </span>offset<span class=\"w\"> </span>0x6dba4<span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there some other more appropriate way to do this validation?</p>\n<p>Side-question, is the only thing that needs to be validated with wasi interfaces the minor version (0.2)?</p>",
        "id": 521301764,
        "sender_full_name": "Julien Vincent",
        "timestamp": 1748613094
    },
    {
        "content": "<p>Yes WASI interfaces only need to match the semver, I thought we had written this up in the component model repository but I fear I either am mis-remembering or I have misplaced those docs...</p>\n<p>It's true that <code>wasm-tools component targets</code> doesn't yet support this semver-matching, although it'd be good to support it there!</p>",
        "id": 521308417,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1748615216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> Thanks for the confirmation. Any recommendations for how to proceed in the meantime?</p>",
        "id": 521310227,
        "sender_full_name": "Julien Vincent",
        "timestamp": 1748615833
    },
    {
        "content": "<p>one option is to update your world with <code>include wasi:cli/imports@0.2.3;</code> and <code>include wasi:cli/imports@0.2.4;</code>, but I realize that's probably not great. Otherwise I'm not sure if there's a great workaround, depends on your exact embedding/scenario. For example if you're using wasmtime you can create an <code>InstancePre</code> which validates that all the imports are available</p>",
        "id": 521310493,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1748615921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> From my understanding of the wit-bindgen tooling, I don't know how I would create a component which referenced that world containing all the wasi bingen code. Wouldn't I then need to provide implementations of those generated bindings?</p>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">  </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"my:package/my-world-with-wasi-imports\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">generate_all</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">pub_export_macro</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">default_bindings_module</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"sdk::bindings\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>This produces all the wasi bindings that I would then need to provide an implementation for - but which are implemented in the rust target. Or maybe I am not understanding fully</p>",
        "id": 522148504,
        "sender_full_name": "Julien Vincent",
        "timestamp": 1748962822
    },
    {
        "content": "<p>Oh. You're saying in the wit files used to validate. But that would still fail validation AFAIU because the resulting wasm binary targets _either_ 0.2.4 or 0.2.3, not both</p>",
        "id": 522149600,
        "sender_full_name": "Julien Vincent",
        "timestamp": 1748963074
    },
    {
        "content": "<blockquote>\n<p>For example if you're using wasmtime you can create an <code>InstancePre</code> which validates that all the imports are available</p>\n</blockquote>\n<p>In my case, the system validating the binary is a storage registry not written in rust. So this isn't really a viable option</p>",
        "id": 522149864,
        "sender_full_name": "Julien Vincent",
        "timestamp": 1748963141
    },
    {
        "content": "<p>Oh I was thinking that for <code>targets</code> you can have extra imports in the world you're testing against, e.g. both 0.2.{3,4}, and if you imported only one or the other then that's ok.</p>\n<p>In general though this is probably something where we should improve the <code>targets</code> subcommand of <code>wasm-tools</code></p>",
        "id": 522468954,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1749080003
    }
]