[
    {
        "content": "<p>hiya. i have some code that is building a little ffi argument adapter. one thing it does is handle that i8/i16 values have to be represented as i32 by the caller, so i insert ireduce on arguments and uextend/sextend on return values. this doesn't seem to be producing the expected result on aarch64 though, for example passing <code>256</code> through the adapter reducing to <code>i8</code> i would expect to get <code>0</code> out, but i get <code>256</code>. I don't know the specifics of arm64 but it behaves kind of like if you chose the wrong register size for <code>mov</code> in x64. Unfortunately I don't have an aarch64 machine so I've just been trying to debug it through CI, so I'm hoping someone here might know where the problem is. Here's the code in question: &lt;<a href=\"https://github.com/denoland/deno/blob/725744955123bf63f22090e4117eec8280fa0d4b/ext/ffi/turbocall.rs#L30-L180\">https://github.com/denoland/deno/blob/725744955123bf63f22090e4117eec8280fa0d4b/ext/ffi/turbocall.rs#L30-L180</a>&gt;</p>",
        "id": 499672098,
        "sender_full_name": "snek",
        "timestamp": 1739522033
    },
    {
        "content": "<p>actually i guess for this specific case, extend isn't even used.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nc\">system_v</span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ireduce</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mh\">0x7fe3_dc66_b090</span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call_indirect</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 499674092,
        "sender_full_name": "snek",
        "timestamp": 1739522630
    },
    {
        "content": "<p>Apple's arm64 calling convention requires zero/sign extending integer arguments smaller than 32bit. You can use <code>ArgumentExtension::Uext/Sext</code> in the <code>AbiParam</code> of the function signature for this.</p>",
        "id": 499687689,
        "sender_full_name": "bjorn3",
        "timestamp": 1739526183
    },
    {
        "content": "<p><a href=\"https://developer.apple.com/documentation/xcode/writing-arm64-code-for-apple-platforms#Pass-arguments-to-functions-correctly\">https://developer.apple.com/documentation/xcode/writing-arm64-code-for-apple-platforms#Pass-arguments-to-functions-correctly</a></p>\n<blockquote>\n<p>The caller of a function is responsible for signing or zero-extending any argument with fewer than 32 bits. The standard ABI expects the callee to sign or zero-extend those arguments.</p>\n</blockquote>",
        "id": 499688009,
        "sender_full_name": "bjorn3",
        "timestamp": 1739526268
    },
    {
        "content": "<p>ooo perfect, ty! is it safe to just set this extension on all the int types as informed by their signedness?</p>",
        "id": 499688724,
        "sender_full_name": "snek",
        "timestamp": 1739526446
    },
    {
        "content": "<p>Yes, though for 32bit integers it would add some unnecessary overhead.</p>",
        "id": 499689133,
        "sender_full_name": "bjorn3",
        "timestamp": 1739526548
    },
    {
        "content": "<p>oh like it will still insert extension instructions?</p>",
        "id": 499689220,
        "sender_full_name": "snek",
        "timestamp": 1739526572
    },
    {
        "content": "<p>I suspect it does. I haven't checked though.</p>",
        "id": 499689783,
        "sender_full_name": "bjorn3",
        "timestamp": 1739526724
    }
]