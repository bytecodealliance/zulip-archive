[
    {
        "content": "<p>Hello! Is there any plans for callconv that allows passing variable number of arguments and also receiving argument count on callee side? This is a must-have when making a Scheme implementation. At the moment I am having runstack which is stored in per-thread storage and I push/pop arguments there and store TLS in pinned reg but it seems like not the best solution</p>",
        "id": 475742485,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1728448654
    },
    {
        "content": "<p>UPD: I've tested doing <code>return_call_indirect</code> with 32 arguments to a function which accepts 24 arguments and it seems like it works and runs properly? The computation result does not change so stack is not broken and Rust code runs fine after function returns. How <em>unsafe</em> is this way of doing calls?</p>",
        "id": 475749388,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1728451950
    },
    {
        "content": "<p>We don’t support variadic ABIs directly (PRs welcome) but in various places where we need a dynamic number of args eg in wasmtime at hostcall boundaries we emulate it by building an arg array in memory. I wouldn’t recommend calling a function with a statically incorrect signature — that’s undefined behavior even if it happens to work by luck in some cases</p>",
        "id": 475768009,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1728457237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382336\">@Adel Prokurov</span> What i gather the guile scheme wasm backend does to supported variadic functions is : <br>\n Make all functions have the same number of parameters as the number of registers available for parameter passing  ( can be the vast majority of them at the discretion of the compiler ) <br>\nThen treat each parameter as a register.</p>\n<p><a href=\"https://www.youtube.com/watch?v=d2t4ohikLa4&amp;t=862s\">YouTube -  - YouTube</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"d2t4ohikLa4\" href=\"https://www.youtube.com/watch?v=d2t4ohikLa4&amp;t=862s\"><img src=\"https://uploads.zulipusercontent.net/7d507c4b0c74b2b91f894f96a1240c6f35910814/68747470733a2f2f692e7974696d672e636f6d2f76692f643274346f68696b4c61342f64656661756c742e6a7067\"></a></div><p>GHC also does this when compiling to the llvm backend ( but for other reasons ) </p>\n<p>I would like to know if this would result in ineficient code or a more complicated compiler compared to if cranelift supported variadic parameter passing in a way that fit scheme. I guess the answer to the second question is no, since the vast majority of archs have either 16 o 32 registers</p>",
        "id": 497784386,
        "sender_full_name": "Diego Antonio Rosario Palomino",
        "timestamp": 1738715842
    },
    {
        "content": "<p>I think that in general such schemes will tend to produce suboptimal code by virtue of losing information. For a simple example: if every call has N arguments (where N is the maximal number of register-passed args) from the point of view of the compiler backend, then every call needs to put <em>something</em> in all of those registers, so you'll have a lot of extraneous moves (even if move-immediate-0). The right answer from a global complexity perspective is to support this properly in the ABI code of the compiler -- we just haven't had a compelling use-case that would justify spending the time of the few maintainers (over all the other things we need to be working on).</p>",
        "id": 497793840,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1738721161
    },
    {
        "content": "<p>If I were building my own calling convention / language implementation on top of Cranelift, I'd probably reach for the \"array trick\" I mentioned above for the variadic part -- so e.g. <code>printf(char* fmt, ...)</code> would pass <code>fmt</code> as a normal arg, and then the <code>...</code> would be lowered to a pointer/length of args in memory (could be a stackslot in caller's frame)</p>",
        "id": 497793996,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1738721228
    },
    {
        "content": "<p>of course that doesn't match the native host's ABI for variadic functions, but I gather that's not the question here if Guile's lowering is also an option</p>",
        "id": 497794050,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1738721260
    },
    {
        "content": "<p>Due to the dynamic shenanigans of scheme. Anything can be variadic. For example you can make a function that returns a callable that varies arity wise at runtime</p>\n<p>(define (make-function n) <br>\n(cond [(= n 2) (lambda (x y) (+ x y))] ;; 2-argument function<br>\n [(= n 3) (lambda (x y z) (* x y z))]  ;; 3-argument function <br>\n[else (lambda args args)]))  </p>\n<p>Also, calling a non variadic function with n arguments is the same as calling a variadic function. There is no straightforward way to separate variadic and non variadic parameters. What i am trying to say, is that the \"array trick\" would have to be the only argument used by functions. Native ones couldnt be used</p>",
        "id": 497796579,
        "sender_full_name": "Diego Antonio Rosario Palomino",
        "timestamp": 1738722824
    },
    {
        "content": "<p>fun fact, chatgpt produced that code, but it does work as intended ( tested in DrRacket )</p>",
        "id": 497797455,
        "sender_full_name": "Diego Antonio Rosario Palomino",
        "timestamp": 1738723388
    },
    {
        "content": "<blockquote>\n<p>fun fact, chatgpt produced that code</p>\n</blockquote>\n<p>in general, I would recommend not using LLMs to generate code for compiler or programming language runtime implementations -- the subtle bugs that that can introduce will waste your time far more than you gain. Not interested in discussing further, just an observation.</p>",
        "id": 497933725,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1738772775
    },
    {
        "content": "<p>But that code isnt a runtime implementation? Is just a bog standard example of scheme code code</p>",
        "id": 497945283,
        "sender_full_name": "Diego Antonio Rosario Palomino",
        "timestamp": 1738776126
    },
    {
        "content": "<p>Well, anything PL-related really. I'm not really interested in the normalization of using LLMs to work on topics that require precision, so I'll be bowing out. All the best!</p>",
        "id": 497946144,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1738776396
    },
    {
        "content": "<p>Anyhorse. You mentioned variadic calling convention could be added to cranelift. What would its interface? How would that work behind the scenes?</p>\n<p>-One possible mitigation to the performance problem you mentioned with using a single calling convention for all functions. Would be to tell the compiler anything could go in an argument<br>\nFunction1( var1, var2 , ANYTHING)</p>",
        "id": 497967555,
        "sender_full_name": "Diego Antonio Rosario Palomino",
        "timestamp": 1738783480
    }
]