[
    {
        "content": "<p>Hello! Thought I'd let you know that I've started work on a repository which shows more practical examples of how to accomplish higher-level compiler tasks with Cranelift. </p>\n<p>So far I've created one which defines and links a binary file, and one which lowers structs. </p>\n<p><a href=\"https://github.com/simvux/cranelift-examples\">https://github.com/simvux/cranelift-examples</a></p>\n<p>I find that a lot of the current Cranelift documentation assumes pre-existing understanding of what a compiler needs to do to use Cranelift, and instead focuses on being a reference for the specifics. My goal with this project is to be the \"missing\" documentation in-between which explains the higher-level concepts you'd need to understand to use Cranelift. </p>\n<p>I'd also want to continuously adapt the examples to address any questions I find people having when trying to pick up Cranelift with or without my examples. </p>\n<p>Some other examples I've got planned are: </p>\n<ul>\n<li>Tagged unions</li>\n<li>Linking to system libraries and producing hello world</li>\n<li>Alignment and C-representation of structs. </li>\n<li>Global variables</li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/simvux/cranelift-examples\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/eb1bc0fd9768c3e343bc7097da9683ca561e60b8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306664626330353231666533396562396132616233646633626264373331366432663230333032303936346639326130313838306531383561366466363839352f73696d7675782f6372616e656c6966742d6578616d706c6573&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/simvux/cranelift-examples\" title=\"GitHub - simvux/cranelift-examples: Tutorial-esque examples for common compiler-related tasks in Cranelift\">GitHub - simvux/cranelift-examples: Tutorial-esque examples for common compiler-related tasks in Cranelift</a></div><div class=\"message_embed_description\">Tutorial-esque examples for common compiler-related tasks in Cranelift  - GitHub - simvux/cranelift-examples: Tutorial-esque examples for common compiler-related tasks in Cranelift</div></div></div>",
        "id": 521459937,
        "sender_full_name": "Floppy",
        "timestamp": 1748711487
    },
    {
        "content": "<p>This is fantastic -- thank you for putting it together!</p>\n<p>If (and only if!) you'd be interested in upstreaming your examples, I think we'd be happy to have them. I don't mean to preempt your ownership of this at all though if you'd rather it be a separate resource.</p>",
        "id": 521645484,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1748839939
    },
    {
        "content": "<p>I'd rather keep it separate, at least for now. But would of course still love if Cranelift's README mentioned it, similarly to the JIT example.</p>",
        "id": 521802166,
        "sender_full_name": "Floppy",
        "timestamp": 1748884622
    },
    {
        "content": "<p>Sure, happy to review a PR to add a link!</p>",
        "id": 521802520,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1748884721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"725811\">@Floppy</span> Couple of comment on your examples:</p>\n<ul>\n<li>You probably want to enable the is_pic flag when outputting a binary.</li>\n<li>You are not setting the function signature for the <code>Function</code> you are building, so when compiling for Windows or arm64 macOS it will panic due to a calling convention mismatch.</li>\n<li>Maybe define <code>main</code> instead of <code>_start</code> and link with <code>gcc</code> or <code>clang</code> instead? That is more portable across OSes. Some OSes for example mandate a special note being present to even allow running an executable, which plain ld will not add for you AFAIK. And once you actually start doing useful things, you will want to use libc. It will also allow you to just return 0 (or the result of the <code>iadd</code>) from the main function rather than emitting a trap at the end.</li>\n<li>A license file is missing.</li>\n</ul>",
        "id": 522192065,
        "sender_full_name": "bjorn3",
        "timestamp": 1748975704
    },
    {
        "content": "<p>Hello! Reviews and suggestions are much appreciated. </p>\n<p>I do switch to using <code>main</code> after the <code>output-a-binary</code> example. But; It was probably a mistake to vary between the two and I should consistently stick to one so that more broad instructions of how to build and test it can be followed. Although since that first example is explicitly about producing native binaries, I could add more documentation on which things differ between different platforms and the various ways you may want to link the binary. </p>\n<p>Instructing to link with <code>clang</code>seems like a good idea, since that should behave similarly between MacOS and Linux at least. Windows is a whole different beast that I've been ignoring for now.<br>\nBeing able to inspect the result with <code>echo $?</code> by returning int as you say is also great as that allows people to mess with the code and see the result change without having to use a debugger. </p>\n<p>I'll add MIT license, thanks for the reminder.</p>",
        "id": 522194054,
        "sender_full_name": "Floppy",
        "timestamp": 1748976420
    },
    {
        "content": "<p>I'm trying to write fairly idiomatic code but one thing I've always done that's always felt a bit of is that; </p>\n<p>Whenever I declare a function in a module, i create a function signature, which allocates two vectors. <br>\nThen when I define that function, I have to clone that function signature for the temporary function builder. </p>\n<p>Solving this is a bit of an microoptimization. However; so much else of Cranelift is focused around arena allocation and ids/refs. So is there some way I'm missing to not have to allocate the signature twice?</p>",
        "id": 522409306,
        "sender_full_name": "Floppy",
        "timestamp": 1749056588
    },
    {
        "content": "<p>I don't think there is a way to avoid allocating the signature twice.</p>",
        "id": 522806115,
        "sender_full_name": "bjorn3",
        "timestamp": 1749225548
    }
]