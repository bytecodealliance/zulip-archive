[
    {
        "content": "<p>Hi, I am new to cranelift and pretty much all this stuff.</p>\n<p>I am trying to extend RustPython's JIT compiler to support returning tuple</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">hello</span><span class=\"p\">():</span>\n   <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>This is how its currently being done <a href=\"https://github.com/hbina/RustPython/blob/29d014a0e1343b0a4d2b12a6755c9662ba38d484/jit/src/lib.rs#L154-L162\">https://github.com/hbina/RustPython/blob/29d014a0e1343b0a4d2b12a6755c9662ba38d484/jit/src/lib.rs#L154-L162</a></p>\n<p>Is tuple considered a pointer to an anonymous struct?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/hbina/RustPython/blob/29d014a0e1343b0a4d2b12a6755c9662ba38d484/jit/src/lib.rs#L154-L162\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c7a61ef3b22fb9989d8e3b5b4a56852e837664e6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316339393436613262336531303463313437313436363830313962323232393930376437336361336364613139383338383134316239303437363430613038362f6862696e612f52757374507974686f6e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/hbina/RustPython/blob/29d014a0e1343b0a4d2b12a6755c9662ba38d484/jit/src/lib.rs#L154-L162\" title=\"RustPython/jit/src/lib.rs at 29d014a0e1343b0a4d2b12a6755c9662ba38d484 · hbina/RustPython\">RustPython/jit/src/lib.rs at 29d014a0e1343b0a4d2b12a6755c9662ba38d484 · hbina/RustPython</a></div><div class=\"message_embed_description\">A Python Interpreter written in Rust. Contribute to hbina/RustPython development by creating an account on GitHub.</div></div></div>",
        "id": 515995035,
        "sender_full_name": "Hanif Ariffin",
        "timestamp": 1746337294
    },
    {
        "content": "<p>The easiest method is to pass a pointer argument where the return value can be written. This is also how native ABIs handle this when the return value doesn't fit in return value registers.</p>",
        "id": 516011406,
        "sender_full_name": "bjorn3",
        "timestamp": 1746350865
    },
    {
        "content": "<p>Oh my god this gets so much more complicated than I thought<br>\nTuples can be arbitrarily deep, so I have to somehow represent (x,y,(x,(x,(x,y)))<br>\nThe problem is that the type signature is flat, so I have to maintain a mapping to recover back the tuple structure</p>",
        "id": 516037615,
        "sender_full_name": "Hanif Ariffin",
        "timestamp": 1746371449
    },
    {
        "content": "<p>I would recommend not using multiple return values to represent nested or large tuples. Cranelift will lower them to passing a return value pointer anyway and may stop supporting them at all in the future.</p>",
        "id": 516040558,
        "sender_full_name": "bjorn3",
        "timestamp": 1746373436
    },
    {
        "content": "<p>Do you have an example snippet of such a thing i.e. creating a product type?<br>\nI only see a straightforward type in the list here... <a href=\"https://docs.rs/cranelift-codegen/0.119.0/cranelift_codegen/ir/types/struct.Type.html\">https://docs.rs/cranelift-codegen/0.119.0/cranelift_codegen/ir/types/struct.Type.html</a></p>",
        "id": 516041189,
        "sender_full_name": "Hanif Ariffin",
        "timestamp": 1746373872
    },
    {
        "content": "<p>Pointers in Cranelift are represented as pointer sized integers. So for example I64 on a 64bit system. You can use the <code>pointer_type()</code> method of <code>TargetFrontendConfig</code> (obtained using eg <code>module.target_config()</code>) to get this type. Then on the caller side you did create a stack slot with the size of the tuple, use <code>stack_addr</code> to get a pointer to it (the type argument is the pointer type you previously obtained) And then inside the callee you did use <code>store</code> on the passed in pointer with manually calculated field offsets.</p>",
        "id": 516041670,
        "sender_full_name": "bjorn3",
        "timestamp": 1746374189
    },
    {
        "content": "<p>Cranelift doesn't have any builtin support for non-primitive types. Rather it provides all the building blocks to emulate them yourself like would happen at the machine code level anyway.</p>",
        "id": 516041738,
        "sender_full_name": "bjorn3",
        "timestamp": 1746374258
    },
    {
        "content": "<p>Hmm, I see, I can see how to implement this now but this is going to take a lot more work than I thought<br>\nI think the code needs a bit more structure now so I am gonna have to work on that first<br>\nThanks a lot for the tips!</p>",
        "id": 516042685,
        "sender_full_name": "Hanif Ariffin",
        "timestamp": 1746374899
    }
]