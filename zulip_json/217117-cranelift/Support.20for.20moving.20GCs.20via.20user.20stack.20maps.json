[
    {
        "content": "<p>Hello,</p>\n<p>In the code documentation for <a href=\"https://docs.wasmtime.dev/api/cranelift/prelude/struct.FunctionBuilder.html#method.declare_value_needs_stack_map\"><code>declare_value_needs_stack_map</code></a>, it mentions that stack maps are not reloaded after safepoints and that moving GCs are unsupported as a result. But, it sounds the <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8978\">like this PR</a> that they are now reloaded after safepoints. Is the code documentation outdated or is there more nuance to the issue?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8978\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3b943b79cbd985f84e2f105068e9ca966bfe3aca/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373036373165653739633033386565663237396532373937383764653235373837356133316439303932613535306630666465633565353937666266393364382f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38393738&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8978\" title=\"`cranelift-frontend`: Support moving GCs with user stack maps by fitzgen · Pull Request #8978 · bytecodealliance/wasmtime\">`cranelift-frontend`: Support moving GCs with user stack maps by fitzgen · Pull Request #8978 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This refactors the way that user stack maps work such that they are compatible with moving GCs. We now keep every GC value in a stack slot, spill to the stack slot on the value&#39;s definition, an...</div></div></div>",
        "id": 538453429,
        "sender_full_name": "Max T. Kristiansen",
        "timestamp": 1757428500
    },
    {
        "content": "<p>naively it sounds to me like maybe the docs just need to be updated but cc <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> for the definitive answer!</p>",
        "id": 538466716,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1757432040
    },
    {
        "content": "<p>yes, the docs just need to be updated. <span class=\"user-mention\" data-user-id=\"957937\">@Max T. Kristiansen</span> are you interested in sending a PR updating that wording to say that needs-stack-map values are always reloaded from their stack slot after safepoints, and thus compatible with moving GCs?</p>",
        "id": 538486092,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1757437649
    },
    {
        "content": "<p>Sure thing: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11659\">https://github.com/bytecodealliance/wasmtime/pull/11659</a></p>\n<p>While it's still on topic, what is the intended mechanism for using these stack maps, before they're reloaded again? Given that the spill and reload happens right before and after a call site respectively, there's seemingly no way to invoke a GC while the stack is spilled. If I were to place a call instruction to some GC invocation right before another call, the GC call would be placed before the stack is spilled.</p>\n<p>I might be missing something, but is that not also a supported use case of the user stack maps?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/11659\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5cb2613e45b434fcb70cb6bf5e0d8d02189ff3ed/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346433306266393964353565356539376139386261396538313439306539333535353136303362616664616563373961386437346433626261306538666234372f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3131363539&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/11659\" title=\"docs: update outdated docs on moving GCs not being supported by maxnatamo · Pull Request #11659 · bytecodealliance/wasmtime\">docs: update outdated docs on moving GCs not being supported by maxnatamo · Pull Request #11659 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Updated documentation about moving GCs not being supported, as per the conversation on Zulip.\nI figured the change is relevant to both declare_value_needs_stack_map, as well as declare_var_needs_st...</div></div></div>",
        "id": 538494975,
        "sender_full_name": "Max T. Kristiansen",
        "timestamp": 1757439637
    },
    {
        "content": "<p>The idea is that the GC can only happen during some call -- the expectation is that the GC root scanning itself is not implemented as inline CLIF, but as part of a runtime, so you'll either directly call <code>invoke_my_gc()</code> (which is a callsite that will have roots spilled for its duration) or you'll call some other function that eventually does something that incidentally invokes a GC</p>",
        "id": 538497839,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1757440562
    },
    {
        "content": "<p>That makes sense - I'll see what I can put together. Thank you two very much for the help.</p>",
        "id": 538510043,
        "sender_full_name": "Max T. Kristiansen",
        "timestamp": 1757444156
    }
]