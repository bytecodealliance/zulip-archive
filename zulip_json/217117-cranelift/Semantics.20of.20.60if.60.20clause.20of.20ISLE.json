[
    {
        "content": "<p>Hi, I'm trying to write some mid-end optimization rules in ISLE.<br>\nFurther, I want to verify the rules with crocus.<br>\nBut I think I observed a weird behavior of the verifier.<br>\nThe if clause does not work as expected.</p>\n<p>In detail, the rule below is one of the rules I'm writing.<br>\nIt is a simple rewrite of <code>(X | Y) &amp; Z =&gt; Z</code> if <code>(X | Y) &amp; Z = Z</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bor</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_from_imm64</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_from_imm64</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_from_imm64</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">))))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_eq</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_and</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_or</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm64</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>Interestingly, the crocus says it is a wrong rewrite with a following counter example.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">simplify</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ty</span><span class=\"o\">|</span><span class=\"mi\">64</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">bor</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ty</span><span class=\"o\">|</span><span class=\"mi\">64</span><span class=\"p\">]</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ty</span><span class=\"o\">|</span><span class=\"mi\">64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_from_imm64</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"p\">#</span><span class=\"n\">x0000000000000000</span><span class=\"p\">]))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ty</span><span class=\"o\">|</span><span class=\"mi\">64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_from_imm64</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"p\">#</span><span class=\"n\">x0000000000000000</span><span class=\"p\">])))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ty</span><span class=\"o\">|</span><span class=\"mi\">64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_from_imm64</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">z</span><span class=\"o\">|</span><span class=\"p\">#</span><span class=\"n\">x0000000000000001</span><span class=\"p\">]))))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"o\">-</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_eq</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">z</span><span class=\"o\">|</span><span class=\"p\">#</span><span class=\"n\">x0000000000000001</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">u64_and</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">z</span><span class=\"o\">|</span><span class=\"p\">#</span><span class=\"n\">x0000000000000001</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_or</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"p\">#</span><span class=\"n\">x0000000000000000</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"p\">#</span><span class=\"n\">x0000000000000000</span><span class=\"p\">]))))</span>\n<span class=\"p\">)</span>\n<span class=\"o\">=&gt;</span>\n<span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ty</span><span class=\"o\">|</span><span class=\"mi\">64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm64</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">z</span><span class=\"o\">|</span><span class=\"p\">#</span><span class=\"n\">x0000000000000001</span><span class=\"p\">]))</span>\n\n<span class=\"p\">#</span><span class=\"n\">x0000000000000000</span><span class=\"o\">=&gt;</span>\n<span class=\"p\">#</span><span class=\"n\">x0000000000000001</span>\n</code></pre></div>\n<p>The <code>(u64_and z (u64_or x y))</code> in the if clause is evaluated to <code>0</code> while <code>z</code> is 1.<br>\nTherefore, the whole expression in the if clause is falsy.<br>\nThat means it should've prevented the rewrite from happening, but it seems like the rewrite is applied anyway.</p>\n<p>This is the input I used to run crocus:<br>\n<a href=\"/user_uploads/15107/NlMCNNa93a4_EMi2L-AbotBK/spec.isle\">spec.isle</a></p>\n<p>And it is the command I used:<br>\n<code>crocus -i &lt;the-input.isle&gt; -t simplify --noprelude --codegen &lt;codegen-dir&gt;</code></p>",
        "id": 518988966,
        "sender_full_name": "Bongjun Jang",
        "timestamp": 1747627310
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"452638\">@Alexa VanHattum</span> and <span class=\"user-mention\" data-user-id=\"648178\">@Michael McLoughlin</span> -- I'm not sure if <code>if</code> clauses are accounted for in the SMT generation for the version that is upstream (in the main repo)? I.e. we may be trying to verify the \"widened\" rule that omits the conditions and always applies?</p>",
        "id": 519156379,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1747670505
    },
    {
        "content": "<p>(I forget exactly what's been upstreamed but that's my first hunch at least)</p>",
        "id": 519156426,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1747670518
    },
    {
        "content": "<p>So it could be the SMT encoded from ISLE rule, not the ISLE rule itself?<br>\nI remember the crocus paper reported similar problem, so they updated the <code>if</code> semantics on the ISLE side.</p>",
        "id": 519297971,
        "sender_full_name": "Bongjun Jang",
        "timestamp": 1747721147
    },
    {
        "content": "<p>Oh! Actually I think we're hitting that same footgun here! It's technically ISLE \"operating as designed\" but the semantics of <code>(if ...)</code> (as sugar for <code>(if-let _ ...)</code>) look for a <em>match</em> while we've designed our equality helpers to always match but return a true or false value. So I suspect you need <code>(if-let true (u64_eq ...))</code> instead. Sorry for not picking that up</p>",
        "id": 519424598,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1747757204
    },
    {
        "content": "<p>Oh yeah. Now it works. Thanks for letting me know.</p>",
        "id": 519511293,
        "sender_full_name": "Bongjun Jang",
        "timestamp": 1747797023
    }
]