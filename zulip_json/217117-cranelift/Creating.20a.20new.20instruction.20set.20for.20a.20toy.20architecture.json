[
    {
        "content": "<p>TL;DR, I want to create a new instruction set for a custom simulated CPU I made. What are the places I need to insert new code, what pitfalls might I need to be aware of, and what resources are available for help?</p>\n<p>As a bit of background, I'm an electrical engineer with a long background of programming, especially Rust as of late. Back in college I made a CPU with a custom instruction set as part of a class, that I then expanded to be \"complete\". I made a simple python \"assembler\" of sorts to compile my own assembly into the required machine code, then was able to insert it into the ROM of the CPU to run it. It was overall a fun project (<a href=\"https://github.com/Trevader24135/Trevader24135/tree/main/ECEN160Computer\">here</a>, in case anyone's curious).</p>\n<p>It struck me that it's theoretically possible that I could hijack existing projects, like LLVM or Cranelift, to compile rust code for this CPU, which seems really exciting to me. LLVM has a guide for contributing a new ISA, but I'd rather not pursue that route because writing that much heavy C++ just doesn't excite me. That's when I remembered that Rust supports Cranelift as an experimental backend, and I started taking a look.</p>\n<p>I've found a couple places that are obvious candidates to add a new ISA, like <code>cranelift/codegen/src/isa</code>, where I might be able to get away with mostly copy-pasting the RISCV ISA and disecting/modifying it, but I've been unable to find any kind of guidance on doing so, which makes that seem very daunting.</p>\n<p>I'd be happy to work through this and write up a guide (maybe a blog post or something) for future contributors so that others have a starting point for creating a new ISA, but before I fully commit to the project, I wanted to get people's impressions here of the feasibility of doing this, and their thoughts on the best way to get started.</p>\n<p>This is completely a hobby project, and I work full time and am working through a master's degree, so it's not like I'll get this done overnight or any time soon, but I still think it'd be super fun. I'd appreciate any help anyone's willing to offer, and I especially appreciate your patience. Thanks.</p>\n<p>Edit: also, I'm very aware that the simulated CPU will likely need some fairly extensive improvements to work as expected as well, but that's probably going to be part of the fun</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Trevader24135/Trevader24135/tree/main/ECEN160Computer\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/12c77d6efd8374109005c0556cfdf94b8b898660/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346235373438323332303231316565323865386431326366636461323562663932343634623830323365633739396630366339323230623733386364333834362f547265766164657232343133352f54726576616465723234313335&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Trevader24135/Trevader24135/tree/main/ECEN160Computer\" title=\"Trevader24135/ECEN160Computer at main 路 Trevader24135/Trevader24135\">Trevader24135/ECEN160Computer at main 路 Trevader24135/Trevader24135</a></div><div class=\"message_embed_description\">Config files for my GitHub profile. Contribute to Trevader24135/Trevader24135 development by creating an account on GitHub.</div></div></div>",
        "id": 529705411,
        "sender_full_name": "Trevor Klingler",
        "timestamp": 1753036461
    },
    {
        "content": "<p>well, if/when you want to make another small cpu for fun, i'd recommend using the RISC-V rv32i instruction set since it's pretty simple and open (unlike arm) and there are existing good compilers (gcc and anything llvm-based like clang or rustc).</p>",
        "id": 529709563,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1753041192
    },
    {
        "content": "<p>e.g. <a href=\"https://github.com/programmerjake/simple-riscv-cpu/blob/9d07efb854b7348b591a6f656a8620869a8e263a/simple_riscv_cpu/cpu.py\">here's a simple implementation</a> of a rv32i cpu that I wrote in several hours as a demo of how cpus work for a friend, I won't claim it doesn't have bugs since i did very little testing, but it implements all the instructions you'd need for running single-threaded code -- it doesn't implement the fence (for multi-threaded code or DMA) and ecall/ebreak instructions (for operating system calls and debugging breakpoints). btw i mean simple as in easy to write, not as in the simplest circuit</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/programmerjake/simple-riscv-cpu/blob/9d07efb854b7348b591a6f656a8620869a8e263a/simple_riscv_cpu/cpu.py\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4a4b692b481733d566b53dd66dea3c8f4b1d94f7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653666643138636666383934303331353131323864313366303639306430613365316237656261343966316330646131663465343430316162313266306666652f70726f6772616d6d65726a616b652f73696d706c652d72697363762d637075&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/programmerjake/simple-riscv-cpu/blob/9d07efb854b7348b591a6f656a8620869a8e263a/simple_riscv_cpu/cpu.py\" title=\"simple-riscv-cpu/simple_riscv_cpu/cpu.py at 9d07efb854b7348b591a6f656a8620869a8e263a 路 programmerjake/simple-riscv-cpu\">simple-riscv-cpu/simple_riscv_cpu/cpu.py at 9d07efb854b7348b591a6f656a8620869a8e263a 路 programmerjake/simple-riscv-cpu</a></div><div class=\"message_embed_description\">Simple RISC-V RV32I CPU. Contribute to programmerjake/simple-riscv-cpu development by creating an account on GitHub.</div></div></div>",
        "id": 529710201,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1753042077
    },
    {
        "content": "<p>Making a RISC-V CPU is certainly a project I'm interested in! I have an FPGA board that I think would be tons of fun to make an emulated CPU in. It's been a while since I've played with verilog and that would be a great excuse. I certainly think that you're correct that if making a working CPU was my goal, that'd be the best way to do it, but mostly I think this would be a cool project.</p>\n<p>Plus, this could open the door down the line if, for example, I find myself wanting to target a microcontroller with a toolchain that's incompatible with the rust compiler and I want to add support. Obviously, in that case, it would probably make more sense to add that target to LLVM, but that sounds less fun to me!</p>\n<p>Thanks for that example CPU by the way, I may use that for reference down the road ;D</p>",
        "id": 529710399,
        "sender_full_name": "Trevor Klingler",
        "timestamp": 1753042342
    },
    {
        "content": "<p>i'm not that familiar with how to create a new cranelift backend, so I'll let others answer that part</p>",
        "id": 529710529,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1753042515
    },
    {
        "content": "<p>ok, thanks for your input!</p>",
        "id": 529711040,
        "sender_full_name": "Trevor Klingler",
        "timestamp": 1753043199
    },
    {
        "content": "<blockquote>\n<p>I'd be happy to work through this and write up a guide (maybe a blog post or something) for future contributors so that others have a starting point for creating a new ISA, but before I fully commit to the project, I wanted to get people's impressions here of the feasibility of doing this, and their thoughts on the best way to get started.</p>\n</blockquote>\n<p>Yes, documentation for this thing in particular is something we've wanted for a while and have never had time to write up. It would be very much appreciated if you contributed something like this!</p>\n<p>In the past when folks ask about the effort to create a new backend for Cranelift, I've estimated the effort at around 3 months' fulltime work and 20k lines of code. The latter at least is (still) about the scale of our existing backends. That's of course for the full gamut of features that we support; copying+pasting from riscv64, ripping out vectors and stripping the ABI down to register args only and removing a bunch of optimized lowering rules, one could probably get substantially smaller.</p>",
        "id": 529913643,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1753111286
    },
    {
        "content": "<p>ok, I'll start looking at simply copying the riscv and ripping out anything that's not strictly necessary. In fact, just doing that and having a working minimal example of an ISA probably accomplishes exactly my objective, as well as being perhaps the most useful way to start documentation on creating a backend.</p>\n<p>Are there any other places in the code that I should be aware of before starting to undertake that work? Also, I see those <code>*.isle</code> files, but my cursory searches haven't turned anything up. Is that a custom format? Does any documentation on those exist anywhere?</p>\n<p>I can't make any promises because of my current time commitments, (not to mention I'm serial project starter, but not finisher), but I'll start putting some time towards it when I have time here or there.</p>",
        "id": 529991776,
        "sender_full_name": "Trevor Klingler",
        "timestamp": 1753151917
    },
    {
        "content": "<p>ISLE files are our own DSL for defining instruction lowering rules -- as you write a new backend you will definitely become familiar with it! A few starting points:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/isle/docs/language-reference.md\">language reference</a> in-repo; should be mostly up-to-date</li>\n<li><a href=\"https://cfallin.org/blog/2023/01-20/cranelift-isle/\">my blog post</a> from a few years ago that should give some more background on its design and how to think about lowering rules</li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/isle/docs/language-reference.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6136fd6e67f467bacbff57c96a9162af018432c2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316431623730613665363932393436343163366436646166643366636634626664646637306161363538656632636530356262323366376362623063663562632f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/isle/docs/language-reference.md\" title=\"wasmtime/cranelift/isle/docs/language-reference.md at main 路 bytecodealliance/wasmtime\">wasmtime/cranelift/isle/docs/language-reference.md at main 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 529992692,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1753152827
    },
    {
        "content": "<p>(for points of comparison, various compiler projects have DSLs to define sets of rules/rewrites -- see e.g. LLVM's TableGen or Go's S-expression-based rule system. ISLE is in the same general category as those, though differs in a bunch of ways too)</p>",
        "id": 529992739,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1753152881
    },
    {
        "content": "<p>sounds like a great place to start, thanks!</p>",
        "id": 529992761,
        "sender_full_name": "Trevor Klingler",
        "timestamp": 1753152906
    }
]