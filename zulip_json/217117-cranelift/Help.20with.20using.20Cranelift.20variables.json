[
    {
        "content": "<p>I am not sure if this is the best place to ask for help.</p>\n<p>I am writing a language that uses Cranelift's JIT functionality and I have ran into a problem when trying to convert my bytecode for a while loop into Cranelift. </p>\n<p>I am currently trying to convert my bytecode linearly. Each time I encounter a branching op, I create the required blocks for that particular instruction (mine map well to Cranelift: Goto = jump, If = If). I have a special op that tells the converter to start adding to that block. However, despite not passing in any block parameters for <code>jump</code> or <code>if</code>, I am getting extra block parameters and I am not exactly sure how they are appearing. My current suspicions are that using variables is creating extra parameters.</p>\n<p>Is this intended behavior? If so could this information be added to the docs?</p>\n<p>Any help is much appreciated.</p>",
        "id": 510537968,
        "sender_full_name": "Alec Davis",
        "timestamp": 1743988200
    },
    {
        "content": "<p>Those extra block params are introduced in order to turn variables into SSA form as clif ir is an SSA form ir.</p>",
        "id": 510602374,
        "sender_full_name": "bjorn3",
        "timestamp": 1744016228
    },
    {
        "content": "<p>Thank you. How can I work with that in mind. I was looking at the JIT demo and it doesn't look like it has the same problem that I am having.</p>",
        "id": 510695915,
        "sender_full_name": "Alec Davis",
        "timestamp": 1744037975
    },
    {
        "content": "<p>The extra block parameters should be harmless. Are you perhaps trying to inspect which block params exist as part of building the ir? If so try avoiding that. And make sure to use <code>builder.ins()</code> rather than <code>builder.cursor()</code> when inserting instructions.</p>",
        "id": 510701493,
        "sender_full_name": "bjorn3",
        "timestamp": 1744039319
    },
    {
        "content": "<p>I am using builder.ins(). The issue I am having is that I am not sure what the block arguments should be.</p>",
        "id": 510713514,
        "sender_full_name": "Alec Davis",
        "timestamp": 1744042411
    },
    {
        "content": "<p>If you didn't manually add block arguments on the block itself, you should pass an empty list when inserting the jump and branch instructions. cranelift-frontend will itself add the values for the block arguments it added to the blocks you defined.</p>",
        "id": 510740766,
        "sender_full_name": "bjorn3",
        "timestamp": 1744050782
    },
    {
        "content": "<p>The issue with passing an empty list is that Cranelift still expects there to be block arguments somehow. </p>\n<p>I have commented out all of the code that could add block arguments and pass in empty lists for <code>jump</code> and <code>if</code> but it still expects there to be block arguments that I am passing it.</p>",
        "id": 510741555,
        "sender_full_name": "Alec Davis",
        "timestamp": 1744051039
    },
    {
        "content": "<p>cranelift-frontend will add those block arguments.</p>",
        "id": 510741965,
        "sender_full_name": "bjorn3",
        "timestamp": 1744051194
    },
    {
        "content": "<p>Are you maybe forgetting to finalize the function builder?</p>",
        "id": 510741995,
        "sender_full_name": "bjorn3",
        "timestamp": 1744051202
    },
    {
        "content": "<p>In my code, <code>JITModule</code>'s <code>define_function</code> is creating the error.<br>\nwhich occurs before finalize is called.</p>",
        "id": 510742788,
        "sender_full_name": "Alec Davis",
        "timestamp": 1744051493
    },
    {
        "content": "<p>I figured it out. It was because I wasn't sealing all of the blocks.</p>\n<p>Thank you for your time and help.</p>",
        "id": 510743275,
        "sender_full_name": "Alec Davis",
        "timestamp": 1744051673
    },
    {
        "content": "<p>You should call <a href=\"https://docs.rs/cranelift-frontend/latest/cranelift_frontend/struct.FunctionBuilder.html#method.finalize\">https://docs.rs/cranelift-frontend/latest/cranelift_frontend/struct.FunctionBuilder.html#method.finalize</a> before passing the <code>Function</code> to <code>define_function</code> and after sealing all blocks.</p>",
        "id": 510743718,
        "sender_full_name": "bjorn3",
        "timestamp": 1744051822
    },
    {
        "content": "<p>I'll be sure to do that, thanks.</p>",
        "id": 510744007,
        "sender_full_name": "Alec Davis",
        "timestamp": 1744051934
    },
    {
        "content": "<p>This function does a bunch of debug asserts and resets the state of the <code>FunctionBuilderContext</code> such that you can reuse it for a future <code>FunctionBuilder::new</code> call. Reusing <code>FunctionBuilderContext</code> saves some memory allocations, improving performance a tiny bit.</p>",
        "id": 510744119,
        "sender_full_name": "bjorn3",
        "timestamp": 1744051978
    }
]