[
    {
        "content": "<p>I was replacing x64 instructions with ones emitted by the new assembler, and noticed a problem in how we lower instructions that rely on flags. Previously, we had decided to keep around rules to the effect of \"if we add/sub an 8/16-bit register, just use the wider version to avoid CPU dependencies\" (e.g., <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6ba6e13bb0fe4304ff35cf4449a2eb22f77b4803/cranelift/codegen/src/isa/x64/inst.isle#L2762-L2765\">here</a>). But this lowering rule is a problem when lowering instructions like <code>sadd_overflow</code> and the like, since the result won't overflow if we're using a wider register. What to do? It seems nice to keep the \"use the wider version\" rule, but it's unclear how to reuse all the lowering rules except that one when we're doing flag-related operations. Any opinions on what this should look like?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/6ba6e13bb0fe4304ff35cf4449a2eb22f77b4803/cranelift/codegen/src/isa/x64/inst.isle#L2762-L2765\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/25d2a2eaf9f09de317b6753b73795dd0fc5f3be4/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333836376565346363376562653736393263633165373061366332646161396466653439363936633138343233316532383734303632316466633335616165382f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/6ba6e13bb0fe4304ff35cf4449a2eb22f77b4803/cranelift/codegen/src/isa/x64/inst.isle#L2762-L2765\" title=\"wasmtime/cranelift/codegen/src/isa/x64/inst.isle at 6ba6e13bb0fe4304ff35cf4449a2eb22f77b4803 · bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/isa/x64/inst.isle at 6ba6e13bb0fe4304ff35cf4449a2eb22f77b4803 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 512185002,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1744669755
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>, <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span></p>",
        "id": 512185023,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1744669770
    },
    {
        "content": "<p>I figured the types would help here? E.g. <code>x64_add</code> produces a <code>Gpr</code> so it doesn't care about flags, but <code>x64_add_with_flags_paired</code> (and/or other variants) would return <code>ProducesFlags</code> which would use the precisely-sized thing and not use the <code>x64_add</code> helper</p>",
        "id": 512185888,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1744670222
    },
    {
        "content": "<p>but also yeah I would imagine that add-with-flags is just forced to use the precisely-sized instruction, we've got no other option there</p>",
        "id": 512185929,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1744670254
    },
    {
        "content": "<p>I think to avoid repeating ourselves, we want to reuse some of the same matching over the types.</p>",
        "id": 512186017,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1744670292
    },
    {
        "content": "<p>but that's not possible with x64_add b/c that emits an instruciton, where the flags-based version wouldn't emit an instruction?</p>",
        "id": 512186055,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1744670328
    },
    {
        "content": "<p>I'm considering a refactoring that looks like:</p>",
        "id": 512186087,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1744670350
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"c1\">;; Helper for creating raw `add` instructions.</span>\n<span class=\"p\">(</span><span class=\"nv\">decl</span><span class=\"w\"> </span><span class=\"nv\">x64_add_raw</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Type</span><span class=\"w\"> </span><span class=\"nv\">Gpr</span><span class=\"w\"> </span><span class=\"nv\">GprMemImm</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">AssemblerOutputs</span><span class=\"p\">)</span>\n\n<span class=\"c1\">;; Match 8-bit immediates first; allows a smaller instruction encoding.</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_raw</span><span class=\"w\"> </span><span class=\"nv\">$I32</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">is_simm8</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span><span class=\"w\">   </span><span class=\"p\">(</span><span class=\"nv\">x64_addl_mi_sxb_raw</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_raw</span><span class=\"w\"> </span><span class=\"nv\">$I64</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">is_simm8</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span><span class=\"w\">   </span><span class=\"p\">(</span><span class=\"nv\">x64_addq_mi_sxb_raw</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;; Match the remaining immediates.</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_raw</span><span class=\"w\"> </span><span class=\"nv\">$I8</span><span class=\"w\">  </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">is_imm8</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">x64_addb_mi_raw</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_raw</span><span class=\"w\"> </span><span class=\"nv\">$I16</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">is_imm16</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span><span class=\"w\">   </span><span class=\"p\">(</span><span class=\"nv\">x64_addw_mi_raw</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_raw</span><span class=\"w\"> </span><span class=\"nv\">$I32</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">is_imm32</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span><span class=\"w\">   </span><span class=\"p\">(</span><span class=\"nv\">x64_addl_mi_raw</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_raw</span><span class=\"w\"> </span><span class=\"nv\">$I64</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">is_simm32</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nv\">x64_addq_mi_sxl_raw</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;; Match the operand size to the instruction width.</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_raw</span><span class=\"w\"> </span><span class=\"nv\">$I8</span><span class=\"w\">  </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">is_gpr_mem</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_addb_rm_raw</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_raw</span><span class=\"w\"> </span><span class=\"nv\">$I16</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">is_gpr_mem</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_addw_rm_raw</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_raw</span><span class=\"w\"> </span><span class=\"nv\">$I32</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">is_gpr_mem</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_addl_rm_raw</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_raw</span><span class=\"w\"> </span><span class=\"nv\">$I64</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">is_gpr_mem</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_addq_rm_raw</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;; When the overflow flag is not considered, we can use wider instructions than</span>\n<span class=\"c1\">;; necessary for 8/16-bit register-to-register operations to avoid CPU false</span>\n<span class=\"c1\">;; dependencies.</span>\n<span class=\"p\">(</span><span class=\"nv\">decl</span><span class=\"w\"> </span><span class=\"nv\">x64_add_break_deps</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Type</span><span class=\"w\"> </span><span class=\"nv\">Gpr</span><span class=\"w\"> </span><span class=\"nv\">GprMemImm</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">AssemblerOutputs</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_break_deps</span><span class=\"w\"> </span><span class=\"nv\">$I8</span><span class=\"w\">  </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">is_gpr</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span><span class=\"w\">     </span><span class=\"p\">(</span><span class=\"nv\">x64_addl_rm_raw</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_break_deps</span><span class=\"w\"> </span><span class=\"nv\">$I16</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">is_gpr</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span><span class=\"w\">     </span><span class=\"p\">(</span><span class=\"nv\">x64_addl_rm_raw</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_break_deps</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\">   </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">)</span><span class=\"w\">              </span><span class=\"p\">(</span><span class=\"nv\">x64_add_raw</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;; Normal use of `add` returns a `Gpr` register.</span>\n<span class=\"p\">(</span><span class=\"nv\">decl</span><span class=\"w\"> </span><span class=\"nv\">x64_add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Type</span><span class=\"w\"> </span><span class=\"nv\">Gpr</span><span class=\"w\"> </span><span class=\"nv\">GprMemImm</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">Gpr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">emit_ret_gpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_break_deps</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">)))</span>\n\n<span class=\"c1\">;; When using `add` for its overflow flag (OF), we track that the flags are</span>\n<span class=\"c1\">;; changed (and avoid the \"dependency-breaking\" rules that short-circuit</span>\n<span class=\"c1\">;; overflow).</span>\n<span class=\"p\">(</span><span class=\"nv\">decl</span><span class=\"w\"> </span><span class=\"nv\">x64_add_with_flags_paired</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Type</span><span class=\"w\"> </span><span class=\"nv\">Gpr</span><span class=\"w\"> </span><span class=\"nv\">GprMemImm</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">ProducesFlags</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_with_flags_paired</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">asm_produce_flags</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x64_add_raw</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">src1</span><span class=\"w\"> </span><span class=\"nv\">src2</span><span class=\"p\">)))</span>\n</code></pre></div>",
        "id": 512186115,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1744670377
    },
    {
        "content": "<p>I think we'll just have to avoid that sort of refactoring</p>",
        "id": 512186304,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1744670487
    },
    {
        "content": "<p>this is part of how I find the ProducesFlags bits a bit awkward, you can't really abstract over them and it has to be pushed to the leaves</p>",
        "id": 512186330,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1744670510
    },
    {
        "content": "<p>It seems like the place to abstract over them is at the <code>AssemblerOutputs</code> level; saves some repeating. What do you think of <code>x64_add_break_deps</code>? It moves the offending rules out to a different matcher...</p>",
        "id": 512186544,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1744670632
    },
    {
        "content": "<p>it doesn't seem unreasonable to me yeah, but personally I'd prefer to keep <code>AssemblerOutputs</code> out of ISLE in the sense that I thought we were going to try to have the ISLE interface be pure-ISLE-things and not mention assembler types</p>",
        "id": 512186775,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1744670750
    },
    {
        "content": "<p>at some point I had a branch which generated ISLE constructors for ProducesFlags and such, I'm not sure if that landed or got lost though</p>",
        "id": 512186846,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1744670775
    },
    {
        "content": "<p>Technically <code>AssemblerOutputs</code> is a <code>cranelift-codegen</code> type now...</p>",
        "id": 512186858,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1744670781
    },
    {
        "content": "<p>oh ok, I think I'm lost enough that I'm probably not helping here...</p>",
        "id": 512186898,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1744670824
    },
    {
        "content": "<p>ok, let me put the PR up and we can discuss there</p>",
        "id": 512186919,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1744670841
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/10580\">https://github.com/bytecodealliance/wasmtime/pull/10580</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/10580\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1b3275ebf2c7b82d366103724e8d6c7eac9d2879/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393934353633306430306563646436646233383566313864633065616130613136363863653535343166656663356231643866363062373033396431313363352f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3130353830&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/10580\" title=\"asm: replace flag-using ALU instructions by abrown · Pull Request #10580 · bytecodealliance/wasmtime\">asm: replace flag-using ALU instructions by abrown · Pull Request #10580 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This change replaces ISLE lowerings for the ProducesFlags and ConsumesFlags wrappers with instructions from the new assembler. This is a necessary step towards fully using the new assembler for ALU...</div></div></div>",
        "id": 512192007,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1744673855
    }
]