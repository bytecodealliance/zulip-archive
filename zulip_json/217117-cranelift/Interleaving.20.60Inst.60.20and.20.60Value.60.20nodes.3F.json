[
    {
        "content": "<p>Hi, I'm interested in writing an optimization <code>(((X / Y) = N) = ((Y * N) = X))</code> in ISLE.<br>\nThe left-hand side will have something like <code>(icmp (IntCC.Equal) (udiv x y) ...)</code>.<br>\nHowever, the problem is that the <code>udiv</code> term yields an <code>Inst</code> node while the <code>icmp</code> term requires <code>Value</code> nodes as operands.<br>\nIt makes writing such a rule very difficult.</p>\n<p>Is there any walkaround possible in ISLE? Thank you!</p>",
        "id": 545821402,
        "sender_full_name": "Bongjun Jang",
        "timestamp": 1760871346
    },
    {
        "content": "<p>It looks like there is some glue missing here:</p>\n<ul>\n<li>In the lowering prelude of ISLE (i.e., a different set of definitions/bindings used when compiling machine backends, rather than mid-end opt rules), we have an auto-converter defined <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bd7b59dad0923097760eb73103582252fcd2f408/cranelift/codegen/src/prelude_lower.isle#L1192\">here</a>.</li>\n<li>We define the corresponding Rust helper <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bd7b59dad0923097760eb73103582252fcd2f408/cranelift/codegen/src/isle_prelude.rs#L939\">here</a>, i.e. present for both mid-end and lowering environments.</li>\n<li>We define the actual FFI signature <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bd7b59dad0923097760eb73103582252fcd2f408/cranelift/codegen/src/prelude.isle#L43-L46\">here</a>, i.e., also common to both environments. </li>\n<li>\n<p>So it appears that the only missing piece is moving the</p>\n<p><code>\n(convert Inst Value def_inst)\n</code></p>\n<p>line from the lowering-specific prelude to the common prelude. I just checked that doing so causes a simple rule of the form you show to typecheck in the mid-end. (I didn't take the time to come up with a <em>valid</em> rule and check its full execution but please let me know if that doesn't work!)</p>\n</li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/bd7b59dad0923097760eb73103582252fcd2f408/cranelift/codegen/src/prelude_lower.isle#L1192\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/fd8cc1e57b91f7a120ad0010773aee0b7a9e9508/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633665353136363961363565333065383434326638316335336336363961663064666363366334643766336131323563303961346132323563313463303762342f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/bd7b59dad0923097760eb73103582252fcd2f408/cranelift/codegen/src/prelude_lower.isle#L1192\" title=\"wasmtime/cranelift/codegen/src/prelude_lower.isle at bd7b59dad0923097760eb73103582252fcd2f408 · bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/prelude_lower.isle at bd7b59dad0923097760eb73103582252fcd2f408 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/bd7b59dad0923097760eb73103582252fcd2f408/cranelift/codegen/src/isle_prelude.rs#L939\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/fd8cc1e57b91f7a120ad0010773aee0b7a9e9508/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633665353136363961363565333065383434326638316335336336363961663064666363366334643766336131323563303961346132323563313463303762342f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/bd7b59dad0923097760eb73103582252fcd2f408/cranelift/codegen/src/isle_prelude.rs#L939\" title=\"wasmtime/cranelift/codegen/src/isle_prelude.rs at bd7b59dad0923097760eb73103582252fcd2f408 · bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/isle_prelude.rs at bd7b59dad0923097760eb73103582252fcd2f408 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/bd7b59dad0923097760eb73103582252fcd2f408/cranelift/codegen/src/prelude.isle#L43-L46\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/fd8cc1e57b91f7a120ad0010773aee0b7a9e9508/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633665353136363961363565333065383434326638316335336336363961663064666363366334643766336131323563303961346132323563313463303762342f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/bd7b59dad0923097760eb73103582252fcd2f408/cranelift/codegen/src/prelude.isle#L43-L46\" title=\"wasmtime/cranelift/codegen/src/prelude.isle at bd7b59dad0923097760eb73103582252fcd2f408 · bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/prelude.isle at bd7b59dad0923097760eb73103582252fcd2f408 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 545866491,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1760919294
    },
    {
        "content": "<p>Feel free to do so as part of an upcoming PR if you have one, or separately and tag me for review, either way.</p>",
        "id": 545866531,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1760919352
    },
    {
        "content": "<p>(and, goes without saying but: thank you for continuing to work on optimizations of this sort! the slow but steady improvements to our codegen are greatly appreciated)</p>",
        "id": 545866578,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1760919435
    },
    {
        "content": "<p>Thank you for the detailed answer! I'm trying to generate valid ISLE rules as many as possible.</p>\n<p>For that you mentioned improvements for cranelift's codegen,<br>\nI wonder if we can precisely measure the improvements on generated code, and the compilation overhead. At the moment, I can think of running cranelift on some benchmarks and measure the time spent. Is there any established method for Cranelift per se?</p>",
        "id": 545868347,
        "sender_full_name": "Bongjun Jang",
        "timestamp": 1760921543
    },
    {
        "content": "<p>We normally use <a href=\"https://github.com/bytecodealliance/sightglass/\">Sightglass</a> for that; see <a href=\"https://github.com/bytecodealliance/sightglass/?tab=readme-ov-file#comparing-a-feature-branch-to-main\">this part</a> of the readme in particular showing how to build two different <code>.so</code>s from Wasmtime and compare them</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/sightglass/\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c600a628af8a82c063d4196dd0dd7fed5ef86ab3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623637663834623235393731613061653035313731396132386361383665343635313734373837323563646365643236356132393536356432393463633631642f62797465636f6465616c6c69616e63652f7369676874676c617373&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/sightglass/\" title=\"GitHub - bytecodealliance/sightglass: A benchmark suite and tool to compare different implementations of the same primitives.\">GitHub - bytecodealliance/sightglass: A benchmark suite and tool to compare different implementations of the same primitives.</a></div><div class=\"message_embed_description\">A benchmark suite and tool to compare different implementations of the same primitives. - bytecodealliance/sightglass</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/sightglass/?tab=readme-ov-file#comparing-a-feature-branch-to-main\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c600a628af8a82c063d4196dd0dd7fed5ef86ab3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623637663834623235393731613061653035313731396132386361383665343635313734373837323563646365643236356132393536356432393463633631642f62797465636f6465616c6c69616e63652f7369676874676c617373&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/sightglass/?tab=readme-ov-file#comparing-a-feature-branch-to-main\" title=\"GitHub - bytecodealliance/sightglass: A benchmark suite and tool to compare different implementations of the same primitives.\">GitHub - bytecodealliance/sightglass: A benchmark suite and tool to compare different implementations of the same primitives.</a></div><div class=\"message_embed_description\">A benchmark suite and tool to compare different implementations of the same primitives. - bytecodealliance/sightglass</div></div></div>",
        "id": 545880021,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1760933640
    },
    {
        "content": "<p>the benchmark suite still isn't super-well filled out, but at least will give you something. Typically the numbers that are most interesting to the core Cranelift folks are the non-microbenchmarks, which more or less is the <a href=\"https://github.com/bytecodealliance/sightglass/blob/main/benchmarks/default.suite\">default</a> suite plus maybe regex and blake3-*</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/sightglass/blob/main/benchmarks/default.suite\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c600a628af8a82c063d4196dd0dd7fed5ef86ab3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623637663834623235393731613061653035313731396132386361383665343635313734373837323563646365643236356132393536356432393463633631642f62797465636f6465616c6c69616e63652f7369676874676c617373&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/sightglass/blob/main/benchmarks/default.suite\" title=\"sightglass/benchmarks/default.suite at main · bytecodealliance/sightglass\">sightglass/benchmarks/default.suite at main · bytecodealliance/sightglass</a></div><div class=\"message_embed_description\">A benchmark suite and tool to compare different implementations of the same primitives. - bytecodealliance/sightglass</div></div></div>",
        "id": 545880135,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1760933753
    },
    {
        "content": "<p>Thank you very much. I hope the improved codegen can make some change. I'll try the benchamrks.</p>",
        "id": 545881671,
        "sender_full_name": "Bongjun Jang",
        "timestamp": 1760935117
    }
]