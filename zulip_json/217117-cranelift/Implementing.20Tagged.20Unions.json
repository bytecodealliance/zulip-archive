[
    {
        "content": "<p>Hello! I'm creating a programming language using Cranelift JIT as the backend, and I'm currently implementing tagged unions (i.e. Rust's <code>enum</code>), which I'll call just \"union\" in this post, not to be confused with C-style unions. All values in my language are 64 bits (Int-&gt;i64, Float-&gt;f64, even the tag is 64 bits which is wasteful of course but it is simple/convenient).</p>\n<p>When none of the union variants have any associated data/payload, that's easy, I make a CLIF variable with a type of <code>I64</code> and store the tag value. When one (or more) of the variants has data of type Int, I create two CLIF variables (both <code>I64</code>), one for the tag and one for the data. Similarly, if one (or more) of the variants has data of type Float, two CLIF variables, <code>I64</code> for the tag and <code>F64</code> for the data.</p>\n<p>I'm struggling with what to do when one variant has data of type Int and another variant has data of type Float - example code below. Create 3 variables, one for the tag and each possibility of int and float? Or stick with 2 variables (both <code>I64</code>) and use <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.bitcast\">bitcast</a> when I need to set or get a float value from the union?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// this is the motivating example from my language</span>\n<span class=\"c1\">// translated into Rust for clarity</span>\n<span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">Number</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">Float</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">make_number_from_float</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Number</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Number</span><span class=\"p\">::</span><span class=\"n\">Float</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">make_number_from_int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Number</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Number</span><span class=\"p\">::</span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">make_number_randomly</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Number</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">random_bool</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">Number</span><span class=\"p\">::</span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">Number</span><span class=\"p\">::</span><span class=\"n\">Float</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 513278227,
        "sender_full_name": "David M",
        "timestamp": 1745158731
    },
    {
        "content": "<p>Either could be made to work, but if I were in your shoes I would definitely choose to use just one payload value (so two total, including the tag) -- the alternative (all options always exist and are carried everywhere) will significantly increase register pressure / storage overhead. (And consider what happens if you add more types to your tagged union / sum type! You want the same efficiency here that in-memory unions get by overlapping)</p>",
        "id": 513342604,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1745211729
    },
    {
        "content": "<p>The other option is to always store tagged unions in memory rather than in registers and then pass around pointers to them in registers. You will almost certainly want to support that anyway if you want complex structs bigger than a couple registers.</p>",
        "id": 513360603,
        "sender_full_name": "bjorn3",
        "timestamp": 1745222857
    },
    {
        "content": "<p>Thanks! </p>\n<p>Chris - Yeah limiting to a max of 2 variables makes sense in this case. I was planning to cap it at 3 variables at most (tag, float, int/int-like thing including pointers), and only in the case where the union has both a float and an int-like variant, but that still seems worse than doing just (Int, Int) with a bitcast for the float, since there's an extra variable always hanging out with a zero or possibly uninitialized value.</p>\n<p>bjorn - I haven't added product types to my language yet (I will call them \"records\") but I'll definitely have to supporrt using stack slots for those (and heap allocation, eventually, when I write a GC <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>). I'd probably split something like <code>{ x: Float, y: Float}</code> into 2 variables to pass into registers but nothing larger than that. Actually, thinking about it more, I'd have to do this anyways even if records didn't exist in my language because I'm going to allow the variants of a tagged union to contain another tagged union, so those could be arbitrarily large anyways. Thanks!</p>",
        "id": 513394673,
        "sender_full_name": "David M",
        "timestamp": 1745239645
    }
]