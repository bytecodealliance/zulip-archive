[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301625\">@Amanieu</span> Per our exchange at today's meeting, here are the benchmarks I ran against wasmtime <code>main</code> (79e1b5374710cd66af9f6330b4c2a231e61d9866) vs. <a href=\"https://github.com/bytecodealliance/wasmtime/commit/eb2acdfb4f27795856c7455824b08bb705d60e64\">https://github.com/bytecodealliance/wasmtime/commit/eb2acdfb4f27795856c7455824b08bb705d60e64</a>, which pulls in your <code>regalloc3</code> branch of regalloc2 (but not your <code>adjust-split</code> branch). You had expected a 50% slowdown in compilation, but I recalled a 25% one. Some benchmarks were indeed up in the 20s, but, on average, they were 14% slower on the low end of the CI, 17% slower on the high. I offer this only in case you find it interesting/surprising and by no means want to slow your work on the allocator, which will benefit us all! :-) Again, I ran these on an ARM chip (M3 Max), which has double the GPRs as an x64.</p>\n<p><a href=\"/user_uploads/15107/X_OVo6Gpy3kzI60yuszJrVsG/regalloc3-all-suite-compilation-only.txt\">regalloc3 all suite compilation only.txt</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/commit/eb2acdfb4f27795856c7455824b08bb705d60e64\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c93089aacaa95cd4f43c12cf82fc8ad4c6c601e1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646562313766393939326266333062363563613334613961306263613666343832663665626132386135653430396662373636303533653831303531383835342f62797465636f6465616c6c69616e63652f7761736d74696d652f636f6d6d69742f65623261636466623466323737393538353663373435353832346230386262373035643630653634&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/commit/eb2acdfb4f27795856c7455824b08bb705d60e64\" title=\"Point at Amanieu's repo for regalloc3 for easier replicability. · bytecodealliance/wasmtime@eb2acdf\">Point at Amanieu's repo for regalloc3 for easier replicability. · bytecodealliance/wasmtime@eb2acdf</a></div><div class=\"message_embed_description\">I didn't change anything in there yet anyway.</div></div></div>",
        "id": 502139536,
        "sender_full_name": "Erik Rose",
        "timestamp": 1740602162
    },
    {
        "content": "<p>I'd suggest focusing on just <code>spidermonkey</code>, <code>bz2</code>, and <code>pulldown-cmark</code>. maybe as a second tier <code>intgemm-simd</code>, <code>meshoptimizer</code>, and <code>libsodium</code>. but all the shootout stuff is just tiny micro benchmarks that aren't really interesting unless you are focused on optimizing the thing they happen to micro bench.</p>",
        "id": 502140157,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1740602377
    },
    {
        "content": "<p>in practice, the shootout benchmarks are going to just be noise unless you're trying to focus on their specific thing</p>",
        "id": 502140294,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1740602418
    },
    {
        "content": "<p>I guess blake3 is fairly interesting interesting</p>",
        "id": 502140421,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1740602475
    },
    {
        "content": "<p>So 28-29, 17-20, and 25-27%, respectively.<br>\n2nd tier: 25-26, 17-21, and ≈15-20</p>\n<p>Doesn't really change the numbers, but sure will save me time benchmarking! Thanks!</p>",
        "id": 502140640,
        "sender_full_name": "Erik Rose",
        "timestamp": 1740602553
    },
    {
        "content": "<p>right yeah, I'm just trying to help make benchmarking easier and make it easier to evaluate the results</p>",
        "id": 502141012,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1740602683
    },
    {
        "content": "<p>you can also benchmark particular phases as well, if you want to focus only on compile time for example, you can do</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">sightglass</span><span class=\"o\">-</span><span class=\"n\">cli</span><span class=\"w\"> </span><span class=\"n\">benchmark</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">benchmark</span><span class=\"o\">-</span><span class=\"n\">phase</span><span class=\"w\"> </span><span class=\"n\">compilation</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>",
        "id": 502141386,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1740602821
    },
    {
        "content": "<p>I can also have it spit out JSON and save myself a lot of regexes, but I have yet to remember to do that until the middle of a long run. ;-)</p>",
        "id": 502141781,
        "sender_full_name": "Erik Rose",
        "timestamp": 1740602974
    },
    {
        "content": "<p>FYI I run my benchmarks with the shuffling allocator disabled because it makes allocations extremely slow and distorts the runtime. That could be an explanation of why you're seeing different results.</p>",
        "id": 502155133,
        "sender_full_name": "Amanieu",
        "timestamp": 1740608478
    },
    {
        "content": "<p>ah, right, I filed <a href=\"https://github.com/bytecodealliance/sightglass/issues/280\">https://github.com/bytecodealliance/sightglass/issues/280</a> a while ago to switch the default but then ran out of spare energy to do it; <span class=\"user-mention\" data-user-id=\"819709\">@Erik Rose</span> that could be an easy PR to make</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/sightglass/issues/280\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/08b1fde5b1692bb511fca9db8f930ea70cd58180/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663361366464303965633036643165326239363738626134636466613264663337376438306139393933373730343538333264663463386465383335336164652f62797465636f6465616c6c69616e63652f7369676874676c6173732f6973737565732f323830&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/sightglass/issues/280\" title=\"Consider disabling the shuffling allocator by default · Issue #280 · bytecodealliance/sightglass\">Consider disabling the shuffling allocator by default · Issue #280 · bytecodealliance/sightglass</a></div><div class=\"message_embed_description\">A recent report by @d-sonuga indicates wildly differing data when measuring the impact of regalloc improvements on compile time depending on whether Sightglass's shuffling allocator is enabled or n...</div></div></div>",
        "id": 502160547,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1740610865
    },
    {
        "content": "<p>It's a one-line change:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">bench</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">bench</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">a171b0beed</span><span class=\"o\">..</span><span class=\"n\">de288922ba</span><span class=\"w\"> </span><span class=\"mi\">100644</span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">bench</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">bench</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">35</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">35</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"n\">clap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">features</span><span class=\"p\">]</span>\n<span class=\"o\">-</span><span class=\"n\">default</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"shuffling-allocator\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"wasi-nn\"</span><span class=\"p\">]</span>\n<span class=\"o\">+</span><span class=\"n\">default</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"wasi-nn\"</span><span class=\"p\">]</span>\n<span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">nn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"wasmtime-wasi-nn\"</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 502160707,
        "sender_full_name": "Amanieu",
        "timestamp": 1740610910
    },
    {
        "content": "<p>I must have been very low on spare energy then :-)</p>",
        "id": 502160968,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1740610997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"819709\">@Erik Rose</span> Here are the results I am getting on my (admittedly quite perf-noisy) machine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compilation</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">43971560.50</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">34846300.90</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">spill</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.08</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.66</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"mf\">2.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">129186085</span><span class=\"w\"> </span><span class=\"mf\">162930575.50</span><span class=\"w\"> </span><span class=\"mi\">216937350</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"mf\">2.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">85216530</span><span class=\"w\"> </span><span class=\"mf\">118959015.00</span><span class=\"w\"> </span><span class=\"mi\">141328075</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">spill</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">95009950</span><span class=\"w\"> </span><span class=\"mf\">116081567.00</span><span class=\"w\"> </span><span class=\"mi\">158748170</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"mf\">2.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">80138100</span><span class=\"w\"> </span><span class=\"mf\">111471111.50</span><span class=\"w\"> </span><span class=\"mi\">141233575</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">spill</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">1066633785</span><span class=\"w\"> </span><span class=\"mf\">1108409337.00</span><span class=\"w\"> </span><span class=\"mi\">1163300915</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"mf\">2.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">1039408055</span><span class=\"w\"> </span><span class=\"mf\">1077584459.00</span><span class=\"w\"> </span><span class=\"mi\">1112557740</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">spill</span><span class=\"p\">.</span><span class=\"n\">so</span>\n</code></pre></div>\n<p>This was using an older version of regalloc3 which didn't have live range splitting (the 50% cost I mentioned in only with live range splitting). This should be the same version you tested based on your Cargo.lock.</p>",
        "id": 502162393,
        "sender_full_name": "Amanieu",
        "timestamp": 1740611561
    },
    {
        "content": "<p>However you can see that ra3 is consistently faster than ra2 in terms of compilation speed.</p>",
        "id": 502162568,
        "sender_full_name": "Amanieu",
        "timestamp": 1740611650
    },
    {
        "content": "<p>how does runtime perf look in the non-spilling version? (I forget, sorry; it'd be helpful to have an up-to-date summary of all the numbers somewhere)</p>",
        "id": 502162643,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1740611690
    },
    {
        "content": "<p>I'm currently in the middle of some perf optimizations, but you can find the older results here: <a class=\"message-link\" href=\"/#narrow/channel/217117-cranelift/topic/regalloc3.20progress.20update/near/491635900\">#cranelift &gt; regalloc3 progress update @ 💬</a></p>",
        "id": 502162972,
        "sender_full_name": "Amanieu",
        "timestamp": 1740611824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"819709\">@Erik Rose</span> I've confirmed that the 25% regression you observed is entirely due to the shuffling allocator. regalloc3 doesn't make use of smallvec and instead relies on the caller to reuse the register allocation context for multiple functions (preserving the <code>Vec</code> allocations inside it). Unfortunately Cranelift doesn't use <code>regalloc2::run_with_ctx</code> and therefore cannot take advantage of this.</p>",
        "id": 502284785,
        "sender_full_name": "Amanieu",
        "timestamp": 1740663134
    },
    {
        "content": "<p>However the difference is only really noticable with the shuffling allocator enabled since it allocations so slow that compilation takes ~5x longer.</p>",
        "id": 502284916,
        "sender_full_name": "Amanieu",
        "timestamp": 1740663175
    },
    {
        "content": "<p>Fantastic. Thanks, Amanieu! I will update my checkouts, get off the shuffling allocator, and re-run my benchmarks.</p>\n<p>I opened a PR to disable the shuffling allocator as well: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10300\">https://github.com/bytecodealliance/wasmtime/pull/10300</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/10300\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/35be954a774a8f92a777bd208bb790d0a8ced5f5/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656432653662363032623963343661616462356334303833633132623264636237363033393862653236393534356564613666306265313039623862376162612f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3130333030&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/10300\" title=\"Disable shuffling allocator during benchmarks by default. by erikrose · Pull Request #10300 · bytecodealliance/wasmtime\">Disable shuffling allocator during benchmarks by default. by erikrose · Pull Request #10300 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">The slowness of the shuffling obscured performance signal (by dwarfing it) more than the accidental localities it was meant to avoid. Closes bytecodealliance/sightglass#280.\nThis issue came up in h...</div></div></div>",
        "id": 502301026,
        "sender_full_name": "Erik Rose",
        "timestamp": 1740667217
    },
    {
        "content": "<p>Note that if you update your checkouts now, the current main branch default to enabling live range splitting which is what causes the 50% slowdown I previously mentioned.</p>",
        "id": 502302608,
        "sender_full_name": "Amanieu",
        "timestamp": 1740667597
    },
    {
        "content": "<p>You can override it by selecting <code>SplitStrategy::Spill</code> in the regalloc3 options. Or just modify your regalloc3 checkout to make that the default temporarily.</p>",
        "id": 502302799,
        "sender_full_name": "Amanieu",
        "timestamp": 1740667652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301625\">@Amanieu</span> considering swapping from ra2 to 3. Do you have any sort of design doc available similar to ra2? Mostly I'm just a bit confused on the difference between a bank and a class. In what instance would I need multiple register banks to describe one class?</p>",
        "id": 525817545,
        "sender_full_name": "Leaves",
        "timestamp": 1750907871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"732970\">@Leaves</span> Have you looked at the <a href=\"https://github.com/Amanieu/regalloc3/blob/main/src/reginfo.rs\">documentation</a> for the <code>reginfo</code> module? Also there are examples available <a href=\"https://github.com/Amanieu/regalloc3/tree/main/example_reginfo\">here</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Amanieu/regalloc3/blob/main/src/reginfo.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/844a1d877e3b35bb167c4bc151523dfeca553747/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366337303432646330313162373437633364366439326238316366396333313337376135666136373066313736316133336430373737373865653032663533382f416d616e6965752f726567616c6c6f6333&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Amanieu/regalloc3/blob/main/src/reginfo.rs\" title=\"regalloc3/src/reginfo.rs at main · Amanieu/regalloc3\">regalloc3/src/reginfo.rs at main · Amanieu/regalloc3</a></div><div class=\"message_embed_description\">New register allocator designed as a successor to regalloc2 - Amanieu/regalloc3</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Amanieu/regalloc3/tree/main/example_reginfo\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/844a1d877e3b35bb167c4bc151523dfeca553747/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366337303432646330313162373437633364366439326238316366396333313337376135666136373066313736316133336430373737373865653032663533382f416d616e6965752f726567616c6c6f6333&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Amanieu/regalloc3/tree/main/example_reginfo\" title=\"regalloc3/example_reginfo at main · Amanieu/regalloc3\">regalloc3/example_reginfo at main · Amanieu/regalloc3</a></div><div class=\"message_embed_description\">New register allocator designed as a successor to regalloc2 - Amanieu/regalloc3</div></div></div>",
        "id": 525823480,
        "sender_full_name": "Amanieu",
        "timestamp": 1750913127
    },
    {
        "content": "<p>Yep, that's exactly what I'm looking for, I had entirely missed that comment at the top! </p>\n<p>Edit: Ok that comment explained everything I was curious about, thank you much.</p>",
        "id": 525902644,
        "sender_full_name": "Leaves",
        "timestamp": 1750943837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301625\">@Amanieu</span> Sorry to bug you again, is there a proper way to get the set of all registers used by the allocator? Including registers allocated to instructions, and those used by edits. I'm currently just iterating over all the instructions using output_insts(..) and recording it as I go. But a succinct method to get this would be nice(if it exists).</p>",
        "id": 525996073,
        "sender_full_name": "Leaves",
        "timestamp": 1750983643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"732970\">@Leaves</span> No, there is no other way. Regalloc3 doesn't track this internally, especially for temporary registers that are only used as scratch registers for moves.</p>",
        "id": 526014465,
        "sender_full_name": "Amanieu",
        "timestamp": 1751001562
    },
    {
        "content": "<p>What do you need this information for? If it's for stack frame setup (callee-saved registers), you may want to specify those registers as defined on function entry and used by return instructions. That way they will automatically be spilled to a stack slot by the register allocator.</p>",
        "id": 526014512,
        "sender_full_name": "Amanieu",
        "timestamp": 1751001644
    },
    {
        "content": "<p>Yeah for stack frame setup. I need to know what registers are saved to properly emit push/pop pairs. It's important that these registers are saved in an easy to define way for the various UnwindInfo formats. If RA3 is deciding where they are spilled/filled, I won't be able to locate this to emit proper unwind information. And I need to know how many pairs of push/pops there are, so I can know the entire stack frame size, prior to lowering an intrinsic like __AddressOfReturnAddress() which needs to read from RSP+FrameSize.</p>\n<p>Where FrameSize = PushedRegisters * 8 + StackLayout.spillslot_area_size.</p>\n<p>So, I need to iterate over all the instructions and edits first, find out which non-volatile registers are written in any way, and only then can I lower that intrinsic.</p>",
        "id": 526082067,
        "sender_full_name": "Leaves",
        "timestamp": 1751030404
    },
    {
        "content": "<p>Alternatively, you can let the register allocator handle saving/restoring into regalloc-managed spillslots. Just specify the constraints that the return instruction takes the original values of the callee-saved registers as fixed-register inputs. Then just get the stack frame size from <code>output.stack_layout()</code>.</p>",
        "id": 526083580,
        "sender_full_name": "Amanieu",
        "timestamp": 1751030905
    },
    {
        "content": "<p>I will not be able to describe these saves with unwind info though, and for certain targets like windows that require support for asyncronous exception support, I need to be very careful with this. Allowing RA3 to arbitrarily determine spill/fill locations for non-volatile registers will make that impossible.</p>",
        "id": 526083784,
        "sender_full_name": "Leaves",
        "timestamp": 1751030968
    },
    {
        "content": "<p>For the unwind information, you can get the location of each value from <code>output.value_locations()</code>. You can use that to get the values of the callee-saved at every point in the function.</p>",
        "id": 526083838,
        "sender_full_name": "Amanieu",
        "timestamp": 1751030981
    },
    {
        "content": "<p>That is true, however there is a limit to the number of locations that a non-volatile register can be saved into in with the Windows UnwindInfo spec. They must be saved in the prolog, and the prolog cannot be larger than 256 bytes. So, I would need to guarantee that regalloc saves them once there, and only restores from that location at function end.</p>",
        "id": 526084188,
        "sender_full_name": "Leaves",
        "timestamp": 1751031077
    },
    {
        "content": "<p>Right, in that case you probably have to do this yourself. And there is no way other than scanning through the output instructions to find out which registers are used. It's not tracked internally in the allocator, so there isn't any faster way of doing this.</p>",
        "id": 526084386,
        "sender_full_name": "Amanieu",
        "timestamp": 1751031140
    },
    {
        "content": "<p>Additionally PUSH/POP pairs at the beginning/end of the function are smaller in size, even when encoding a spill/fill with an 8bit displacement. MOV [RSP+8BitDisp]</p>",
        "id": 526084396,
        "sender_full_name": "Leaves",
        "timestamp": 1751031144
    },
    {
        "content": "<p>Got it, I implemented that, and it appears to work well. RA2 required something similar anyway but there were more simple allocs/edits slices to iterate over.</p>",
        "id": 526084586,
        "sender_full_name": "Leaves",
        "timestamp": 1751031196
    },
    {
        "content": "<p>Hmm now that I think about it, it's actually possible to make this more efficient by tracking it internally. I'll add an API for it.</p>",
        "id": 526084833,
        "sender_full_name": "Amanieu",
        "timestamp": 1751031268
    },
    {
        "content": "<p>It would be something along the lines of <code>fn reg_units_used(&amp;self) -&gt; &amp;RegUnitSet</code>.</p>",
        "id": 526084988,
        "sender_full_name": "Amanieu",
        "timestamp": 1751031306
    },
    {
        "content": "<p>What would be most helpful would be reg_units_read(&amp;self), reg_units_written(&amp;self). Read alone wouldn't be enough for this case.</p>\n<p>Are you open to PRs btw?</p>",
        "id": 526085536,
        "sender_full_name": "Leaves",
        "timestamp": 1751031462
    },
    {
        "content": "<p>That's not as simple as it seems: the initial values for registers is emitted by the entry instruction, so all registers that are used are technically written.</p>",
        "id": 526085894,
        "sender_full_name": "Amanieu",
        "timestamp": 1751031563
    },
    {
        "content": "<p>I'm open to PRs but I would prefer if it was discussed first to avoid unnecessary work.</p>",
        "id": 526086030,
        "sender_full_name": "Amanieu",
        "timestamp": 1751031600
    },
    {
        "content": "<p>Thats right actually, I do skip the defs created by my NativeRegistersIn instruction that is the first instruction in the function. So that would need to be considered as well <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 526086203,
        "sender_full_name": "Leaves",
        "timestamp": 1751031653
    },
    {
        "content": "<p>Tracking which registers are used can be done relatively efficiently, essentially meaning \"does this register at any point hold a regalloc-managed value\".</p>",
        "id": 526086771,
        "sender_full_name": "Amanieu",
        "timestamp": 1751031799
    },
    {
        "content": "<p>For anything more than that your best bet is still just scanning the output I think.</p>",
        "id": 526086819,
        "sender_full_name": "Amanieu",
        "timestamp": 1751031815
    },
    {
        "content": "<p>I think so now as well after considering the fact that I need to disregard Defs from certain instructions.</p>",
        "id": 526087119,
        "sender_full_name": "Leaves",
        "timestamp": 1751031887
    },
    {
        "content": "<p>I suppose this is really getting away from cranelift/regalloc2 talk now. But if both validators are returning Ok for RA3 and I'm still getting an error about rematerialization(despite always returning None for rematerialization), what direction should I go in for debugging?</p>\n<p>Error actually arising is \"add_remat called with non-rematerializable value\" and it's called on a block parameter(%17) for a small exit block.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">block13</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">17</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">freq</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">predecessors</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block12</span>\n<span class=\"w\">    </span><span class=\"n\">inst66</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">inst</span>\n<span class=\"w\">    </span><span class=\"n\">inst67</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"n\">Use</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"p\">):</span><span class=\"nc\">r1</span><span class=\"w\"> </span><span class=\"n\">Use</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">17</span><span class=\"p\">):</span><span class=\"nc\">r0</span>\n<span class=\"w\">    </span><span class=\"n\">inst68</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ret</span>\n</code></pre></div>",
        "id": 526112903,
        "sender_full_name": "Leaves",
        "timestamp": 1751039801
    },
    {
        "content": "<p>Can you dump the function and reginfo to text form so I can try it with regalloc3-tool?</p>",
        "id": 526113085,
        "sender_full_name": "Amanieu",
        "timestamp": 1751039878
    },
    {
        "content": "<p>Do you mean just converting to a GenericFunction then printing it?</p>",
        "id": 526113337,
        "sender_full_name": "Leaves",
        "timestamp": 1751039980
    },
    {
        "content": "<p><a href=\"https://pastebin.com/raw/vpSvqK8X\">https://pastebin.com/raw/vpSvqK8X</a><br>\n<a href=\"https://pastebin.com/raw/QzJx8aGE\">https://pastebin.com/raw/QzJx8aGE</a></p>",
        "id": 526113701,
        "sender_full_name": "Leaves",
        "timestamp": 1751040086
    },
    {
        "content": "<p>42 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"217117\" href=\"/#narrow/channel/217117-cranelift/topic/regalloc3.20debugging/with/525817545\">#cranelift &gt; regalloc3 debugging</a> by <span class=\"user-mention silent\" data-user-id=\"301625\">Amanieu</span>.</p>",
        "id": 526116621,
        "sender_full_name": "Notification Bot",
        "timestamp": 1751041131
    },
    {
        "content": "<p>Latest benchmark results for regalloc3:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compilation</span>\n<span class=\"w\">  </span><span class=\"n\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">    </span><span class=\"n\">cycles</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">388409280</span><span class=\"w\"> </span><span class=\"mf\">394336775.00</span><span class=\"w\"> </span><span class=\"mi\">420104370</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra2</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">324084635</span><span class=\"w\"> </span><span class=\"mf\">327185663.00</span><span class=\"w\"> </span><span class=\"mi\">345267545</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra3</span><span class=\"o\">-</span><span class=\"n\">spill</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">361255790</span><span class=\"w\"> </span><span class=\"mf\">364677054.00</span><span class=\"w\"> </span><span class=\"mi\">383229420</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra3</span><span class=\"o\">-</span><span class=\"n\">split</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"n\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">    </span><span class=\"n\">cycles</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">796059285</span><span class=\"w\"> </span><span class=\"mf\">799510071.50</span><span class=\"w\"> </span><span class=\"mi\">807007075</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra2</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">716654015</span><span class=\"w\"> </span><span class=\"mf\">721313358.50</span><span class=\"w\"> </span><span class=\"mi\">729701735</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra3</span><span class=\"o\">-</span><span class=\"n\">spill</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">782036010</span><span class=\"w\"> </span><span class=\"mf\">786266075.00</span><span class=\"w\"> </span><span class=\"mi\">789498185</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra3</span><span class=\"o\">-</span><span class=\"n\">split</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"n\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">    </span><span class=\"n\">cycles</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">20091993285</span><span class=\"w\"> </span><span class=\"mf\">20178233887.00</span><span class=\"w\"> </span><span class=\"mi\">20278362790</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra2</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">18244842070</span><span class=\"w\"> </span><span class=\"mf\">18398756379.50</span><span class=\"w\"> </span><span class=\"mi\">18586440250</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra3</span><span class=\"o\">-</span><span class=\"n\">spill</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">19562045300</span><span class=\"w\"> </span><span class=\"mf\">19644339190.00</span><span class=\"w\"> </span><span class=\"mi\">19873169225</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra3</span><span class=\"o\">-</span><span class=\"n\">split</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"n\">execution</span>\n<span class=\"w\">  </span><span class=\"n\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">    </span><span class=\"n\">cycles</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">118045165</span><span class=\"w\"> </span><span class=\"mf\">118595158.50</span><span class=\"w\"> </span><span class=\"mi\">121545340</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra2</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">112530215</span><span class=\"w\"> </span><span class=\"mf\">112865336.50</span><span class=\"w\"> </span><span class=\"mi\">113412705</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra3</span><span class=\"o\">-</span><span class=\"n\">spill</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">111467545</span><span class=\"w\"> </span><span class=\"mf\">111745469.50</span><span class=\"w\"> </span><span class=\"mi\">112304780</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra3</span><span class=\"o\">-</span><span class=\"n\">split</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"n\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">    </span><span class=\"n\">cycles</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">9640925</span><span class=\"w\"> </span><span class=\"mf\">9705132.50</span><span class=\"w\"> </span><span class=\"mi\">9788520</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra2</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">8748110</span><span class=\"w\"> </span><span class=\"mf\">8830787.00</span><span class=\"w\"> </span><span class=\"mi\">9037630</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra3</span><span class=\"o\">-</span><span class=\"n\">spill</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">8934240</span><span class=\"w\"> </span><span class=\"mf\">9045858.50</span><span class=\"w\"> </span><span class=\"mi\">9167515</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra3</span><span class=\"o\">-</span><span class=\"n\">split</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"n\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">    </span><span class=\"n\">cycles</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">1136702140</span><span class=\"w\"> </span><span class=\"mf\">1140818234.50</span><span class=\"w\"> </span><span class=\"mi\">1153406240</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra2</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">1090508300</span><span class=\"w\"> </span><span class=\"mf\">1100439718.00</span><span class=\"w\"> </span><span class=\"mi\">1122041375</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra3</span><span class=\"o\">-</span><span class=\"n\">spill</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"mi\">1113807730</span><span class=\"w\"> </span><span class=\"mf\">1119928414.50</span><span class=\"w\"> </span><span class=\"mi\">1128316140</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra3</span><span class=\"o\">-</span><span class=\"n\">split</span><span class=\"p\">.</span><span class=\"n\">so</span>\n</code></pre></div>",
        "id": 527201621,
        "sender_full_name": "Amanieu",
        "timestamp": 1751643692
    },
    {
        "content": "<p>At this point I consider regalloc3 basically done and ready for use. I'm currently writing up a design document for it, but other than that it's ready for review.</p>",
        "id": 527227324,
        "sender_full_name": "Amanieu",
        "timestamp": 1751658839
    },
    {
        "content": "<p>I second that. After porting my own compiler form RA2 to RA3, fuzzing extensively, and deploying into product, I am VERY happy with the results.  The only change I would make would be relaxing some of the requirements around BB params, but only if it doesn't hurt output code quality. Requiring additional optimization passes to prep for regalloc is somewhat tedius.</p>",
        "id": 527238860,
        "sender_full_name": "Leaves",
        "timestamp": 1751671836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301625\">@Amanieu</span> thanks for these latest results. As we discussed back in January, to get RA3 into Cranelift, we'll need someone to:</p>\n<ul>\n<li>Post a PR that adds an option to Cranelift to use RA3 as an option (presumably you have this, from the above benchmarks?) -- we'll want to keep both RA2 and RA3 available simultaneously and then move the default at some point if indeed it meets our needs (and ensure that both pass our full test suite in CI);</li>\n<li>Put up the RA3 implementation as a PR against an empty repository and request review on that as well;</li>\n<li>Work with the BA TSC to create a repository under the Bytecode Alliance org, and discuss details like transferring publishing permissions to the same group that owns Wasmtime/Cranelift; this last step probably after the above two.</li>\n</ul>\n<p>This is big enough that we'll probably want an RFC for the transition as well; and please feel free to schedule time on the Cranelift weekly meeting agenda.</p>",
        "id": 527243541,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1751677510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> Sure! I'm currently finishing up the design document. Once that is done, I will post a PR against an empty branch so that you can review the code. I've also submitted <a href=\"https://github.com/bytecodealliance/regalloc2/pull/230\">https://github.com/bytecodealliance/regalloc2/pull/230</a> which adds regalloc3 as a back-end for regalloc2.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/regalloc2/pull/230\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ee0609e7b254aa64ff79665b5e5b42bbe5871b2c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303933653561663264343131353164333966653836633039623731323437376561663435346165356331653862666134346632643936303062336135366338612f62797465636f6465616c6c69616e63652f726567616c6c6f63322f70756c6c2f323330&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/regalloc2/pull/230\" title=\"Add support for using regalloc3 as the allocator back-end by Amanieu · Pull Request #230 · bytecodealliance/regalloc2\">Add support for using regalloc3 as the allocator back-end by Amanieu · Pull Request #230 · bytecodealliance/regalloc2</a></div><div class=\"message_embed_description\">Currently still a draft because:\n\nThe regalloc3 crate isn't published yet.\nThis is missing support for debug locations.</div></div></div>",
        "id": 527356641,
        "sender_full_name": "Amanieu",
        "timestamp": 1751818520
    }
]