[
    {
        "content": "<p>It works for me?</p>",
        "id": 526114920,
        "sender_full_name": "Amanieu",
        "timestamp": 1751040485
    },
    {
        "content": "<p>Yeah just tried the tool myself, works there as well.</p>",
        "id": 526115210,
        "sender_full_name": "Leaves",
        "timestamp": 1751040580
    },
    {
        "content": "<p>Hmm, maybe GenericFunction/GenericRegInfo isn't fully capturing the behavior of your trait implementation.</p>",
        "id": 526115327,
        "sender_full_name": "Amanieu",
        "timestamp": 1751040626
    },
    {
        "content": "<p>In theory it should be perfectly captured.</p>",
        "id": 526115347,
        "sender_full_name": "Amanieu",
        "timestamp": 1751040633
    },
    {
        "content": "<p>If you convert your trait to the generic one, does it work then?</p>",
        "id": 526115425,
        "sender_full_name": "Amanieu",
        "timestamp": 1751040657
    },
    {
        "content": "<p>I noticed it isn't explicitly capturing the idoms, I'll verify that mine are correct.</p>",
        "id": 526115428,
        "sender_full_name": "Leaves",
        "timestamp": 1751040659
    },
    {
        "content": "<p>No even when converting to generic, still errors trying to rematerialize that %17.</p>",
        "id": 526115692,
        "sender_full_name": "Leaves",
        "timestamp": 1751040767
    },
    {
        "content": "<p>So the round-trip via display/parse is hiding the issue?</p>",
        "id": 526115740,
        "sender_full_name": "Amanieu",
        "timestamp": 1751040791
    },
    {
        "content": "<p>Did you convert both function and reginfo?</p>",
        "id": 526115769,
        "sender_full_name": "Amanieu",
        "timestamp": 1751040800
    },
    {
        "content": "<p>I did not, let me do reginfo real fast too.</p>",
        "id": 526115796,
        "sender_full_name": "Leaves",
        "timestamp": 1751040811
    },
    {
        "content": "<p>Nope that didn't help.</p>",
        "id": 526116059,
        "sender_full_name": "Leaves",
        "timestamp": 1751040914
    },
    {
        "content": "<p>Very strange since regalloc3-tool is literally just parsing into GenericFunction/GenericRegInfo and then running with that.</p>",
        "id": 526116206,
        "sender_full_name": "Amanieu",
        "timestamp": 1751040971
    },
    {
        "content": "<p>I assume you're using the default options?</p>",
        "id": 526116227,
        "sender_full_name": "Amanieu",
        "timestamp": 1751040977
    },
    {
        "content": "<p>Yeah. My invocation looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">register_allocator</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">regalloc3</span><span class=\"p\">::</span><span class=\"n\">RegisterAllocator</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ra_output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">register_allocator</span><span class=\"p\">.</span><span class=\"n\">allocate_registers</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">gen_func</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">gen_reginfo</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">regalloc3</span><span class=\"p\">::</span><span class=\"n\">Options</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 526116289,
        "sender_full_name": "Leaves",
        "timestamp": 1751041001
    },
    {
        "content": "<p>I'll try going to/from text as well as the generic function to see if that changes anything.</p>",
        "id": 526116482,
        "sender_full_name": "Leaves",
        "timestamp": 1751041077
    },
    {
        "content": "<p>42 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"217117\" href=\"/#narrow/channel/217117-cranelift/topic/regalloc3.20benchmarks/with/502139536\">#cranelift &gt; regalloc3 benchmarks</a> by <span class=\"user-mention silent\" data-user-id=\"301625\">Amanieu</span>.</p>",
        "id": 526116620,
        "sender_full_name": "Notification Bot",
        "timestamp": 1751041131
    },
    {
        "content": "<p>Ok that worked.</p>",
        "id": 526117223,
        "sender_full_name": "Leaves",
        "timestamp": 1751041359
    },
    {
        "content": "<p>Is it the reginfo or the function that isn't round-tripping properly?</p>",
        "id": 526117289,
        "sender_full_name": "Amanieu",
        "timestamp": 1751041377
    },
    {
        "content": "<p>Trying that now.</p>",
        "id": 526117307,
        "sender_full_name": "Leaves",
        "timestamp": 1751041385
    },
    {
        "content": "<p>It's the function. Left the reginfo alone and it worked fine.</p>",
        "id": 526117394,
        "sender_full_name": "Leaves",
        "timestamp": 1751041413
    },
    {
        "content": "<p>My guess is dominators, since it is recomputed during parsing. Going to verify my dominator info is correct real fast.</p>",
        "id": 526117591,
        "sender_full_name": "Leaves",
        "timestamp": 1751041482
    },
    {
        "content": "<p>I'm a bit concerned that validation isn't catching that...</p>",
        "id": 526117845,
        "sender_full_name": "Amanieu",
        "timestamp": 1751041584
    },
    {
        "content": "<blockquote>\n<p>I suppose this is really getting away from cranelift/regalloc2 talk now</p>\n</blockquote>\n<p>Indeed -- happy to see compilers discussion in general, but perhaps this would best be moved to an issue thread on the regalloc3 repo?</p>\n<p>It will become Cranelift-relevant if/when someone does the work to move Cranelift over, show the benefit, and land it; right now it's not a Bytecode Alliance project though and it may be best to move the discussion to a more local place. (I am in particular wanting to make sure there's no confusion for folks hanging around our chat platforms -- the BA stack still runs on RA2 and RA3 is not set as a definite plan, despite its name, until the above work makes it so)</p>",
        "id": 526117894,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1751041608
    }
]