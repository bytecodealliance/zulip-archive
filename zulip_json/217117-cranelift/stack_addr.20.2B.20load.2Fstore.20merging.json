[
    {
        "content": "<p>I noticed that on arm64 a stack_addr + load/store gets merged into a single instruction. This doesn't seem to happen on x86 however. Where is this implemented for arm64?</p>",
        "id": 540447623,
        "sender_full_name": "bjorn3",
        "timestamp": 1758286171
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">function</span><span class=\"w\"> </span><span class=\"nv\">%stack_store_small</span><span class=\"p\">(</span><span class=\"no\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"nf\">ss0</span><span class=\"w\"> </span><span class=\"err\">=</span><span class=\"w\"> </span><span class=\"no\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n\n<span class=\"nf\">block0</span><span class=\"p\">(</span><span class=\"no\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">i64</span><span class=\"p\">):</span>\n<span class=\"w\">  </span><span class=\"nf\">stack_store.i64</span><span class=\"w\"> </span><span class=\"no\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">ss0</span>\n<span class=\"w\">  </span><span class=\"nf\">return</span>\n<span class=\"err\">}</span>\n\n<span class=\"c1\">; VCode:</span>\n<span class=\"c1\">;   stp fp, lr, [sp, #-16]!</span>\n<span class=\"c1\">;   mov fp, sp</span>\n<span class=\"c1\">;   sub sp, sp, #16</span>\n<span class=\"c1\">; block0:</span>\n<span class=\"c1\">;   mov x2, sp</span>\n<span class=\"c1\">;   str x0, [x2]</span>\n<span class=\"c1\">;   add sp, sp, #16</span>\n<span class=\"c1\">;   ldp fp, lr, [sp], #16</span>\n<span class=\"c1\">;   ret</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">function</span><span class=\"w\"> </span><span class=\"nv\">%stack_store_small</span><span class=\"p\">(</span><span class=\"no\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"nf\">ss0</span><span class=\"w\"> </span><span class=\"err\">=</span><span class=\"w\"> </span><span class=\"no\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n\n<span class=\"nf\">block0</span><span class=\"p\">(</span><span class=\"no\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">i64</span><span class=\"p\">):</span>\n<span class=\"w\">  </span><span class=\"nf\">stack_store.i64</span><span class=\"w\"> </span><span class=\"no\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">ss0</span>\n<span class=\"w\">  </span><span class=\"nf\">return</span>\n<span class=\"err\">}</span>\n\n<span class=\"c1\">; VCode:</span>\n<span class=\"c1\">;   pushq %rbp</span>\n<span class=\"c1\">;   movq %rsp, %rbp</span>\n<span class=\"c1\">;   subq $0x10, %rsp</span>\n<span class=\"c1\">; block0:</span>\n<span class=\"c1\">;   leaq &lt;offset:1&gt;+(%rsp), %rax</span>\n<span class=\"c1\">;   movq %rdi, (%rax)</span>\n<span class=\"c1\">;   addq $0x10, %rsp</span>\n<span class=\"c1\">;   movq %rbp, %rsp</span>\n<span class=\"c1\">;   popq %rbp</span>\n<span class=\"c1\">;   retq</span>\n</code></pre></div>",
        "id": 540447809,
        "sender_full_name": "bjorn3",
        "timestamp": 1758286223
    },
    {
        "content": "<p>Never mind, I read the arm64 asm wrong. There is doesn't happen either.</p>",
        "id": 540447941,
        "sender_full_name": "bjorn3",
        "timestamp": 1758286262
    },
    {
        "content": "<p>Got something kinda working. Before:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">BENCH</span><span class=\"w\"> </span><span class=\"n\">RUN</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ebobby</span><span class=\"o\">/</span><span class=\"n\">simple</span><span class=\"o\">-</span><span class=\"n\">raytracer</span>\n<span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_llvm</span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">):</span><span class=\"w\">      </span><span class=\"mf\">2.690</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">  </span><span class=\"mf\">0.043</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">2.686</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.004</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">):</span><span class=\"w\">    </span><span class=\"mf\">2.663</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">2.807</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">runs</span>\n\n<span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif</span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">):</span><span class=\"w\">      </span><span class=\"mf\">3.702</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">  </span><span class=\"mf\">0.021</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">3.697</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.005</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">):</span><span class=\"w\">    </span><span class=\"mf\">3.674</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">3.738</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">runs</span>\n\n<span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif_opt</span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">):</span><span class=\"w\">      </span><span class=\"mf\">2.286</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">  </span><span class=\"mf\">0.011</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">2.282</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.004</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">):</span><span class=\"w\">    </span><span class=\"mf\">2.268</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">2.306</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">runs</span>\n\n<span class=\"n\">Summary</span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif_opt</span><span class=\"w\"> </span><span class=\"n\">ran</span>\n<span class=\"w\">    </span><span class=\"mf\">1.18</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">0.02</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_llvm</span>\n<span class=\"w\">    </span><span class=\"mf\">1.62</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">0.01</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif</span>\n</code></pre></div>\n<p>After:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">BENCH</span><span class=\"w\"> </span><span class=\"n\">RUN</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ebobby</span><span class=\"o\">/</span><span class=\"n\">simple</span><span class=\"o\">-</span><span class=\"n\">raytracer</span>\n<span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_llvm</span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">):</span><span class=\"w\">      </span><span class=\"mf\">2.668</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">  </span><span class=\"mf\">0.010</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">2.663</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.004</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">):</span><span class=\"w\">    </span><span class=\"mf\">2.660</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">2.687</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">runs</span>\n\n<span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif</span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">):</span><span class=\"w\">      </span><span class=\"mf\">2.552</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">  </span><span class=\"mf\">0.016</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">2.547</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.004</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">):</span><span class=\"w\">    </span><span class=\"mf\">2.539</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">2.588</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">runs</span>\n\n<span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif_opt</span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">):</span><span class=\"w\">      </span><span class=\"mf\">2.151</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">  </span><span class=\"mf\">0.022</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">2.147</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.004</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">):</span><span class=\"w\">    </span><span class=\"mf\">2.130</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">2.206</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">runs</span>\n\n<span class=\"n\">Summary</span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif_opt</span><span class=\"w\"> </span><span class=\"n\">ran</span>\n<span class=\"w\">    </span><span class=\"mf\">1.19</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">0.01</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif</span>\n<span class=\"w\">    </span><span class=\"mf\">1.24</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">0.01</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_llvm</span>\n</code></pre></div>",
        "id": 540466352,
        "sender_full_name": "bjorn3",
        "timestamp": 1758291161
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\">https://github.com/bytecodealliance/wasmtime/pull/11727</a> by <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> has a better implementation with the same perf benefits.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ab9ccf2c633a2e152f17cd23b7c5f51ea9324732/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366535346437623138646631343637613666363933303934336332343234623032326236636435633366383132623264303530303863366166356238383538382f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3131373237&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\" title=\"Cranelift: use SP-offset amodes for `stack_addr`+load/store. by cfallin · Pull Request #11727 · bytecodealliance/wasmtime\">Cranelift: use SP-offset amodes for `stack_addr`+load/store. by cfallin · Pull Request #11727 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">We provide stack_load/ stack_store / stack_addr instructions in Cranelift to operate on stack slots, and the first two are legalized to a stack_addr plus an ordinary load or store instruction.\nWe c...</div></div></div>",
        "id": 540800105,
        "sender_full_name": "bjorn3",
        "timestamp": 1758546754
    },
    {
        "content": "<p>Ah, I vaguely recalled seeing something about this but couldn’t find an issue — happy this will solve your problem too!</p>",
        "id": 540809117,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1758548913
    },
    {
        "content": "<p>Looks like there was an ancient issue for this too: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1064\">https://github.com/bytecodealliance/wasmtime/issues/1064</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1064\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/411d89797a989c8906e2e2e866150ccd7959bcb8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613632663364653336396539633664326164343439376338363739303862623861626630643865313964343266393530383539623133363734633139653937352f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f31303634&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1064\" title=\"Optimize `stack_store` and `stack_load` · Issue #1064 · bytecodealliance/wasmtime\">Optimize `stack_store` and `stack_load` · Issue #1064 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Currently, stack_store and stack_load are legalized into stack_addr followed by plain store and load, producing code like this: lea rax, qword ptr [rsp + 8] mov qword ptr [rax], rdi We really want ...</div></div></div>",
        "id": 540813782,
        "sender_full_name": "bjorn3",
        "timestamp": 1758549949
    }
]