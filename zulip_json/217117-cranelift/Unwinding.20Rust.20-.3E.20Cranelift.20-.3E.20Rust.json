[
    {
        "content": "<p>I have a question about unwinding:<br>\nI'm JIT-compiling code (directly with <code>frontend</code> and <code>codegen</code>, without using <code>jit</code> and <code>module</code>) and the generated code calls a Rust-defined function in the current process. This function throws a panic, and the panic is supposed to be caught by the Rust code calling the JIT-compiled code. Roughly like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C-unwind\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">called_from_jit_code</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"in Rust code\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">addr_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">called_from_jit_code</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call_indirect</span><span class=\"p\">(</span><span class=\"n\">sig_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">addr_value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n\n<span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panic</span><span class=\"p\">::</span><span class=\"n\">catch_unwind</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">jit_compiled_function</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>Is this possible with the unwind info created by Cranelift?</p>",
        "id": 499512632,
        "sender_full_name": "Adrian Willenbücher",
        "timestamp": 1739462432
    },
    {
        "content": "<p>Nothing needs to be cleaned up within the JIT-compiled code, I just want to pass the panic through to the surrounding Rust code.</p>",
        "id": 499516187,
        "sender_full_name": "Adrian Willenbücher",
        "timestamp": 1739463159
    },
    {
        "content": "<p>We do emit unwind info (you will need to make sure you're registering it properly when you load/publish the JIT code). So in that sense anything that works with a Rust-&gt;C++-&gt;Rust stack (for example) should work with CL-compiled code in the middle as well, I think</p>",
        "id": 499517618,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1739463458
    },
    {
        "content": "<p>(modulo unwind-info bugs; if you find issues please do let us know)</p>",
        "id": 499517629,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1739463460
    },
    {
        "content": "<p>What isn't supported yet however is catching exceptions or handling cleanup (running destructors, etc) for exceptions in Cranelift compilrd functions.</p>",
        "id": 499579792,
        "sender_full_name": "bjorn3",
        "timestamp": 1739479408
    }
]