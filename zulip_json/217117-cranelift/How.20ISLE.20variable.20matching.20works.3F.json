[
    {
        "content": "<p>Hi,</p>\n<p>I'm trying to write this optimization rule with ISLE and I've noticed some interesting result.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">cty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">Equal</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bxor</span><span class=\"w\"> </span><span class=\"n\">bty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">cty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">Equal</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iconst_u</span><span class=\"w\"> </span><span class=\"n\">bty</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>This rewrites <code>X == (X ^ Y)</code> to <code>Y == 0</code>.<br>\nFor example, a filetest passes:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">optimization</span><span class=\"w\"> </span><span class=\"n\">simplifies</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"err\">`</span><span class=\"p\">.</span>\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">simplify_icmp_eq_x_bxor_x_y</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nc\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">):</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">y</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bxor</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\">       </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">simplify_icmp_eq_x_bxor_x_y</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nc\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">):</span>\n<span class=\"p\">;</span><span class=\"w\">     </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"p\">;</span><span class=\"w\">     </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"p\">;</span><span class=\"w\">     </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>At first, I tried a more concise rule.<br>\nPlease note that all the types are matched with a single variable <code>ty</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">Equal</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bxor</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">subsume</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">Equal</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iconst_u</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span>\n</code></pre></div>\n<p>But with this simplify rule, the optimization did <strong>not</strong> fire.<br>\nI expected all the type variable (<code>ty</code>) to be identical for all instructions.<br>\nHowever, it turned out that I have to relax the constraint and let <code>icmp</code> and <code>bxor</code> have different types.</p>\n<p>Why is this happening?</p>",
        "id": 519297634,
        "sender_full_name": "Bongjun Jang",
        "timestamp": 1747720993
    },
    {
        "content": "<p>I think this may be because the <code>icmp</code> is producing <code>I8</code> while the <code>bxor</code> is <code>I32</code>in this case?</p>",
        "id": 519365504,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1747742251
    },
    {
        "content": "<p>oh <code>icmp</code>'s type specifies the resulting type not that of operands?</p>",
        "id": 519366782,
        "sender_full_name": "Bongjun Jang",
        "timestamp": 1747742624
    },
    {
        "content": "<p>correct yeah, I believe <code>icmp</code> always produces <code>i8</code> for scalar types (but produces the input vector type if the inputs are vectors)</p>",
        "id": 519385577,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1747747792
    },
    {
        "content": "<p>Yep, in general the first <code>ty</code> of every operator specifies that operator's result type</p>",
        "id": 519423686,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1747756951
    },
    {
        "content": "<p>The reason that <code>icmp</code>s produce an <code>I8</code> in particular is an annoying historical wart that has to do with x86's <code>SETcc</code> instructions operating only on 8-bit-wide registers, and us wanting to avoid unnecessary widens. But I suspect with better matching rules we could make <code>icmp</code> produce a truthy/falsy i32 or arbitrary width. In any case, here you'll want the two types to be decoupled so the <code>ty</code>/<code>cty</code> form is correct</p>",
        "id": 519423955,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1747757026
    },
    {
        "content": "<p>Thanks for the reply! Coming from LLVM world, I though it was the type of operands <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 519508490,
        "sender_full_name": "Bongjun Jang",
        "timestamp": 1747795259
    }
]