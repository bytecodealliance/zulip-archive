[
    {
        "content": "<p>Hi, I'm trying to fuzz cranelift using <code>cargo fuzz run cranelift-fuzzgen</code>, but it gets stuck after printing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">INFO</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Running</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">entropic</span><span class=\"w\"> </span><span class=\"n\">power</span><span class=\"w\"> </span><span class=\"n\">schedule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mh\">0xFF</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">).</span>\n<span class=\"n\">INFO</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Seed</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">155173815</span>\n<span class=\"n\">INFO</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Loaded</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">modules</span><span class=\"w\">   </span><span class=\"p\">(</span><span class=\"mi\">1799139</span><span class=\"w\"> </span><span class=\"n\">inline</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">-</span><span class=\"n\">bit</span><span class=\"w\"> </span><span class=\"n\">counters</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"mi\">1799139</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0x55c390b711b0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x55c390d28593</span><span class=\"p\">),</span>\n<span class=\"n\">INFO</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Loaded</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">PC</span><span class=\"w\"> </span><span class=\"n\">tables</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1799139</span><span class=\"w\"> </span><span class=\"n\">PCs</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"mi\">1799139</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0x55c390d28598</span><span class=\"p\">,</span><span class=\"mh\">0x55c39289c3c8</span><span class=\"p\">),</span>\n<span class=\"n\">INFO</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">files</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">obfuscator</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">fuzz</span><span class=\"o\">/</span><span class=\"n\">corpus</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">fuzzgen</span>\n<span class=\"n\">INFO</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">max_len</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">provided</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">libFuzzer</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">generate</span><span class=\"w\"> </span><span class=\"n\">inputs</span><span class=\"w\"> </span><span class=\"n\">larger</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"mi\">4096</span><span class=\"w\"> </span><span class=\"n\">bytes</span>\n<span class=\"n\">INFO</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"n\">corpus</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">provided</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">starting</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"n\">corpus</span>\n<span class=\"p\">#</span><span class=\"mi\">2</span><span class=\"w\">      </span><span class=\"n\">INITED</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">rss</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">126</span><span class=\"n\">Mb</span>\n<span class=\"n\">WARNING</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">no</span><span class=\"w\"> </span><span class=\"n\">interesting</span><span class=\"w\"> </span><span class=\"n\">inputs</span><span class=\"w\"> </span><span class=\"n\">were</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">far</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">Is</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">instrumented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">coverage</span><span class=\"o\">?</span>\n<span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">also</span><span class=\"w\"> </span><span class=\"n\">happen</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">rejected</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"n\">inputs</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">tried</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">far</span>\n</code></pre></div>\n<p>I want to collect all generated test cases like in <a href=\"\">wasmtime/#10583</a>. How can I:</p>\n<ol>\n<li>\n<p>Make the fuzzer actually generate and save test cases?</p>\n</li>\n<li>\n<p>Find where the test cases are stored?</p>\n</li>\n</ol>\n<p>The command just hangs after that warning with no visible progress. Any help would be appreciated!</p>",
        "id": 524464886,
        "sender_full_name": "ping",
        "timestamp": 1750169969
    },
    {
        "content": "<p>The  general documentation for fuzzing in Rust is found <a href=\"https://rust-fuzz.github.io/book/cargo-fuzz.html\">here</a> which might be good to peruse, that goes over folder structure and such of where artifacts are located. By default <code>cargo fuzz run cranelift-fuzzgen</code> will run the fuzzer infinitely until a crash happens, and the crash is recorded in the <code>fuzz/*</code> directory inside there</p>",
        "id": 524468356,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750170879
    },
    {
        "content": "<p>I added an <code>unreachable!()</code> statement at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/9c2e6f17c782bb37634dde77866cd69610a00cbc/fuzz/fuzz_targets/cranelift-fuzzgen.rs#L383\">this location</a>, then ran: <code>cargo fuzz run cranelift-fuzzgen</code>. And I get the same output as before with no panic. Does this mean the fuzz target's code isn't being executed at all?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/9c2e6f17c782bb37634dde77866cd69610a00cbc/fuzz/fuzz_targets/cranelift-fuzzgen.rs#L383\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f28d5190c0e2dee0ea476383310316c56fd2d15c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623363646463643735316434653564613765356263613964346337393365333866663361623036313133313463326133303338393232303835623437343663642f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/9c2e6f17c782bb37634dde77866cd69610a00cbc/fuzz/fuzz_targets/cranelift-fuzzgen.rs#L383\" title=\"wasmtime/fuzz/fuzz_targets/cranelift-fuzzgen.rs at 9c2e6f17c782bb37634dde77866cd69610a00cbc · bytecodealliance/wasmtime\">wasmtime/fuzz/fuzz_targets/cranelift-fuzzgen.rs at 9c2e6f17c782bb37634dde77866cd69610a00cbc · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 524470676,
        "sender_full_name": "ping",
        "timestamp": 1750171584
    },
    {
        "content": "<p>yeah that definitely looks like something funky is going on, I'm testing out that myself and seeing what happens.</p>\n<p>In the meantime, what is <code>cargo fuzz --version</code> and what version of Rust are you using?</p>",
        "id": 524472747,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750172200
    },
    {
        "content": "<p>for me it's <code>cargo-fuzz 0.12.0</code> and <code>rustc 1.89.0-nightly (ccf3198de 2025-06-05)</code></p>",
        "id": 524472838,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750172225
    },
    {
        "content": "<p><code>cargo-fuzz 0.12.0</code> and  <code>rustc 1.89.0-nightly (4d08223c0 2025-05-31)</code></p>",
        "id": 524472993,
        "sender_full_name": "ping",
        "timestamp": 1750172269
    },
    {
        "content": "<p>hm ok yeah I'm making no progress on my end either</p>",
        "id": 524473328,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750172374
    },
    {
        "content": "<p>(digging in)</p>",
        "id": 524473944,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750172552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/channel/217117-cranelift/topic/how.20to.20get.20generated.20test.20cases.3F/near/524473944\">said</a>:</p>\n<blockquote>\n<p>(digging in)</p>\n</blockquote>\n<p>Thank you for investigating this. I'd be truly grateful if this could be prioritized for a fix.</p>",
        "id": 524474074,
        "sender_full_name": "ping",
        "timestamp": 1750172593
    },
    {
        "content": "<p>Fixed at <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11062\">https://github.com/bytecodealliance/wasmtime/pull/11062</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/11062\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/981896fa7590f7ee49cf0ad649bc2cbc8e62a5a2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636365633066626366326632393739303261363864333865613261653634343863373365316431663231666238666338616162336361613932333363353730382f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3131303632&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/11062\" title=\"Fix Cranelift-native fuzzers by alexcrichton · Pull Request #11062 · bytecodealliance/wasmtime\">Fix Cranelift-native fuzzers by alexcrichton · Pull Request #11062 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit fixes a typo mistake from #10588 where the option specified there was actually invalid. This error got covered up by accident when generating the fuzz test case, however, meaning that t...</div></div></div>",
        "id": 524474934,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750172824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/channel/217117-cranelift/topic/how.20to.20get.20generated.20test.20cases.3F/near/524474934\">said</a>:</p>\n<blockquote>\n<p>Fixed at <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11062\">https://github.com/bytecodealliance/wasmtime/pull/11062</a></p>\n</blockquote>\n<p>Thank you for the quick fix! Really appreciate your help.</p>",
        "id": 524475225,
        "sender_full_name": "ping",
        "timestamp": 1750172909
    },
    {
        "content": "<p>FWIW I'd recommend fuzzing with <code>--sanitizer none</code> as it makes fuzzing go much faster and we don't get too much benefit from the default ASAN integration</p>",
        "id": 524475684,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750173028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/channel/217117-cranelift/topic/how.20to.20get.20generated.20test.20cases.3F/near/524475684\">said</a>:</p>\n<blockquote>\n<p>FWIW I'd recommend fuzzing with <code>--sanitizer none</code> as it makes fuzzing go much faster and we don't get too much benefit from the default ASAN integration</p>\n</blockquote>\n<p>Thanks for your advice <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 524475954,
        "sender_full_name": "ping",
        "timestamp": 1750173106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>  Hi, I’ve saved the generated test cases, but I noticed an issue: most of them contain functions similar to the following pattern:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u1</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">58</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"n\">ss1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">18</span>\n<span class=\"w\">    </span><span class=\"n\">ss2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i16x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">sext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i16x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i16x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"n\">sext</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">i16x8</span><span class=\"w\"> </span><span class=\"n\">system_v</span>\n<span class=\"w\">    </span><span class=\"n\">sig1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"nc\">system_v</span>\n<span class=\"w\">    </span><span class=\"n\">sig2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"nc\">system_v</span>\n<span class=\"w\">    </span><span class=\"n\">sig3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"nc\">system_v</span>\n<span class=\"w\">    </span><span class=\"n\">sig4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"nc\">system_v</span>\n<span class=\"w\">    </span><span class=\"n\">sig5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"nc\">system_v</span>\n<span class=\"w\">    </span><span class=\"n\">sig6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"nc\">system_v</span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u1</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">sig0</span>\n<span class=\"w\">    </span><span class=\"n\">fn1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">CeilF32</span><span class=\"w\"> </span><span class=\"n\">sig1</span>\n<span class=\"w\">    </span><span class=\"n\">fn2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">CeilF64</span><span class=\"w\"> </span><span class=\"n\">sig2</span>\n<span class=\"w\">    </span><span class=\"n\">fn3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">FloorF32</span><span class=\"w\"> </span><span class=\"n\">sig3</span>\n<span class=\"w\">    </span><span class=\"n\">fn4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">FloorF64</span><span class=\"w\"> </span><span class=\"n\">sig4</span>\n<span class=\"w\">    </span><span class=\"n\">fn5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">TruncF32</span><span class=\"w\"> </span><span class=\"n\">sig5</span>\n<span class=\"w\">    </span><span class=\"n\">fn6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">TruncF64</span><span class=\"w\"> </span><span class=\"n\">sig6</span>\n\n<span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss1</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"w\">    </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss1</span><span class=\"o\">+</span><span class=\"mi\">16</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">16</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v8</span>\n<span class=\"w\">    </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v9</span>\n<span class=\"w\">    </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">48</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">56</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ol>\n<li>Is this intentional? Does Cranelift-Fuzzgen primarily focus on triggering compiler crashes rather than validating execution results?</li>\n<li>Are there parameters to generate test cases with meaningful outputs for runtime verification?</li>\n</ol>",
        "id": 524987356,
        "sender_full_name": "ping",
        "timestamp": 1750402816
    },
    {
        "content": "<p>Ah sorry I'm not too familar with cranelift-fuzzgen's implementation. I do believe we test some cases against the host but it's not necessarily engineered to ensure all results are compatible against the hosts. As a fuzz-generated program some are probably more amenable to detecting differences than others</p>",
        "id": 525049091,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750428407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/channel/217117-cranelift/topic/how.20to.20get.20generated.20test.20cases.3F/near/525049091\">said</a>:</p>\n<blockquote>\n<p>Ah sorry I'm not too familar with cranelift-fuzzgen's implementation. I do believe we test some cases against the host but it's not necessarily engineered to ensure all results are compatible against the hosts. As a fuzz-generated program some are probably more amenable to detecting differences than others</p>\n</blockquote>\n<p>OK, thank you for your response. I've gone through it again and it seems that there might be some issues with my operation. Now the generated IR test cases are a bit more complex.</p>",
        "id": 525050112,
        "sender_full_name": "ping",
        "timestamp": 1750428711
    },
    {
        "content": "<ol>\n<li>Is this intentional? Does Cranelift-Fuzzgen primarily focus on triggering compiler crashes rather than validating execution results?</li>\n</ol>\n<p>Not really, It's just that it's really simple to generate an function that contains no input or output parameters, and produces no real instructions that use those.</p>\n<p>That function essentially just sets up the stack area for use by the function, and exists, it's one of the simplest functions possible.</p>\n<ol start=\"2\">\n<li>Are there parameters to generate test cases with meaningful outputs for runtime verification?</li>\n</ol>\n<p>IIRC we have a few knobs you can tweak. The first one is the number of input / output arguments. Due to the way the fuzzer is built, the more variables it has available, the easier it is to pick an instruction that does something. The second one is that you can force it to always produce at least 1 \"real\" instruction</p>\n<p>I don't remember off the top of my head what these parameters were, but they were there.</p>",
        "id": 525083951,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1750442880
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a7d9f3e114fc74889000aeb2c136e9dfd5c374be/cranelift/fuzzgen/src/config.rs#L79-L81\">https://github.com/bytecodealliance/wasmtime/blob/a7d9f3e114fc74889000aeb2c136e9dfd5c374be/cranelift/fuzzgen/src/config.rs#L79-L81</a></p>\n<p>Here they are. You can tweak those 3 parameters and it should produce slightly larger functions</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/a7d9f3e114fc74889000aeb2c136e9dfd5c374be/cranelift/fuzzgen/src/config.rs#L79-L81\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4e8ccce330592eabbf34ed28c8a10db2dbbd5a0f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376463376333316633653730323534636466666633626231333961336131313932313832366438323238356463616137656634386562626366303863376630342f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a7d9f3e114fc74889000aeb2c136e9dfd5c374be/cranelift/fuzzgen/src/config.rs#L79-L81\" title=\"wasmtime/cranelift/fuzzgen/src/config.rs at a7d9f3e114fc74889000aeb2c136e9dfd5c374be · bytecodealliance/wasmtime\">wasmtime/cranelift/fuzzgen/src/config.rs at a7d9f3e114fc74889000aeb2c136e9dfd5c374be · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 525084146,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1750442991
    }
]