[
    {
        "content": "<p>Hi I'm looking for missed optimization opportunities in Cranelift's mid-end.</p>\n<p>I'm considering the correctness of (possible) new optimization (simplifying) rules.<br>\nAFAIK, <code>crocus</code> will be a good toolkit to reason about correctness.</p>\n<p>But I also want to listen about other perspectives that I might be missing such as performance, cost model, etc,<br>\nas I'm not aware of any tools/methodologies for them in Cranelift.<br>\nSo far, I've read the doc so I know some rules stated there, such as using <code>subsume</code> or so.</p>\n<p>Just small suggestions or comments will be appreciated.</p>\n<p>Thanks!</p>",
        "id": 501732473,
        "sender_full_name": "Bongjun Jang",
        "timestamp": 1740469582
    },
    {
        "content": "<p>we can also run the souper synthesizer on clif, that could be good to investigate some more:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/5783\">https://github.com/bytecodealliance/wasmtime/issues/5783</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/run-souper.sh\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/run-souper.sh</a></li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/5783\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ccdaab11be09dacf808a4f07e71ed29a0e5df3d2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313638653365643933366433363334396161373064643739313739626662646365636265366335633465353266393961646530646438666338316336343733642f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f35373833&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/5783\" title=\"Souper-synthesized optimizations that we should investigate generalizing and adding to the mid-end · Issue #5783 · bytecodealliance/wasmtime\">Souper-synthesized optimizations that we should investigate generalizing and adding to the mid-end · Issue #5783 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Here are some synthesized optimizations for CLIF harvested from spidermonkey.wasm with explicit bounds checks enabled. I won't have time to investigate, generalize, or implement them before I go on...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/run-souper.sh\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3171b6d8855c7fdfea531d2c0dc89259cb756871/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643765653335626135653334363565333036303134666466363533653530653536623530353730336164366430616539303333336161343332646163643539362f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/run-souper.sh\" title=\"wasmtime/cranelift/run-souper.sh at main · bytecodealliance/wasmtime\">wasmtime/cranelift/run-souper.sh at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 502100630,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1740589955
    },
    {
        "content": "<p>Thanks you for the comment. I think that is the good place to start.</p>",
        "id": 502744794,
        "sender_full_name": "Bongjun Jang",
        "timestamp": 1740834544
    }
]