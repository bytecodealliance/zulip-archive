[
    {
        "content": "<p>I don't remember offhand, but I think everything is driven by the <code>WorldGenerator::generate</code> funciton in <code>crates/core/src/lib.rs</code>, which first generates code for all the imports, then for all the exports.  Since imports can't possibly refer to exported types, any aliases we generate for them must refer to the imported resource type.  On the other hand, exports <em>can</em> refer to imported types, and I don't recall how we know which one is of interest when e.g. generating code for an alias that refers to a resource which is both imported and exported.</p>\n<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> has explained this to me about five times already; maybe I can do it a sixth time?</p>",
        "id": 536862305,
        "sender_full_name": "Joel Dice",
        "timestamp": 1756501745
    },
    {
        "content": "<p>ah yeah so the way this is handled in the Rust generator is subtly generating things in the \"right order\", more-or-less there's a <code>map&lt;TypeId, YourGeneratorThing&gt;</code> somewhere and that's populated as types are generated.</p>\n<p>Imports are generated in topo-order and then exports, so that way everything should \"just work\" if you resolve aliases by \"just look at the map\"</p>",
        "id": 536862542,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1756501888
    },
    {
        "content": "<p>basically things get really tricky if you try to resolve aliases or references in anything other than a trivial manner</p>",
        "id": 536862564,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1756501903
    },
    {
        "content": "<p>BTW, I've always wished <code>wit-parser</code> would assign different <code>TypeId</code>s to the imported and exported version of a resource, which would make this easier to reason about.  Not so much that I've actually <em>done</em> anything about it, of course.</p>",
        "id": 536862650,
        "sender_full_name": "Joel Dice",
        "timestamp": 1756501942
    },
    {
        "content": "<p>there's also <a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1497\">https://github.com/bytecodealliance/wasm-tools/issues/1497</a> which is a long-term aspiration here</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/issues/1497\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2c7b76180945cb592dc1aac6b378bcb6024c6d34/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363539663961633038353531356236386163366166646461396164396130323030643431386266663231316539633063356634333935363063333633613635392f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f6973737565732f31343937&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1497\" title=\"proposal: wit-parser: create distinct imported and exported TypeDefs, Functions, and Interfaces in a Resolve 路 Issue #1497 路 bytecodealliance/wasm-tools\">proposal: wit-parser: create distinct imported and exported TypeDefs, Functions, and Interfaces in a Resolve 路 Issue #1497 路 bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">We propose to move logic from wit-bindgen into the wit-parser crate that determines whether an interface, type, or function in a Resolve structure is either imported or exported, and label those st...</div></div></div>",
        "id": 536862688,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1756501962
    },
    {
        "content": "<p>Very helpful, thanks both!</p>",
        "id": 536862818,
        "sender_full_name": "Scott Waye",
        "timestamp": 1756502029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395878\">Scott Waye</span> has marked this topic as resolved.</p>",
        "id": 536862827,
        "sender_full_name": "Notification Bot",
        "timestamp": 1756502035
    }
]