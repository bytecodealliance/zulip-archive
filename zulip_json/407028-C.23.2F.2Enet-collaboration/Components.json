[
    {
        "content": "<p>Hey,</p>\n<p>I'm trying to make a component in C#. I've followed the \"Adder\" docs and created a component.</p>\n<p>I've compiled this component, and I see in the exports that the function <code>docs:adder/add@0.1.0#add</code> is exposed.<br>\nHowever, there are no components (that I can see in <a href=\"https://wa2.dev/exports\">https://wa2.dev/exports</a>).</p>\n<p>When I try to call \"docs:adder/add@0.1.0#add\", I'm getting the error that the function cannot be found.<br>\nI've also tried multiple names (add etc.) without success:</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">var</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">();</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">var</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">AddWasiP2</span><span class=\"p\">();</span>\n\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">var</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n<span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">File</span><span class=\"p\">.</span><span class=\"n\">ReadAllBytes</span><span class=\"p\">(</span><span class=\"s\">\"Wasm/Adder.wasm\"</span><span class=\"p\">);</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">var</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">.</span><span class=\"n\">Compile</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">);</span>\n\n<span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">CreateInstance</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">);</span>\n\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">var</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ComponentValue</span><span class=\"p\">.</span><span class=\"n\">CreateInt32</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">);</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">var</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ComponentValue</span><span class=\"p\">.</span><span class=\"n\">CreateInt32</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">var</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">Call</span><span class=\"p\">(</span><span class=\"s\">\"docs:adder/add@0.1.0#add\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">]);</span>\n\n<span class=\"w\">  </span><span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"n\">Equal</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">GetInt32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>With a component in WAT, the following works:</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">addIntModule</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"s\">\"\"\"</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">component</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">$</span><span class=\"n\">AddModule</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"return\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"n\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"n\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">          </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">          </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">          </span><span class=\"n\">i32</span><span class=\"p\">.</span><span class=\"k\">add</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">)</span>\n\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"err\">$</span><span class=\"n\">add_instance</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"err\">$</span><span class=\"n\">AddModule</span><span class=\"p\">))</span>\n\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"return\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"w\"> </span><span class=\"n\">s32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"w\"> </span><span class=\"n\">s32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">s32</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"n\">lift</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"err\">$</span><span class=\"n\">add_instance</span><span class=\"w\"> </span><span class=\"s\">\"return\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"s\">\"\"\";</span>\n\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">var</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">();</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">var</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">var</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">var</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">.</span><span class=\"n\">Compile</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">addIntModule</span><span class=\"p\">);</span>\n\n<span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">CreateInstance</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">);</span>\n\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">var</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ComponentValue</span><span class=\"p\">.</span><span class=\"n\">CreateInt32</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">);</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">var</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ComponentValue</span><span class=\"p\">.</span><span class=\"n\">CreateInt32</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"nn\">var</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">Call</span><span class=\"p\">(</span><span class=\"s\">\"return\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">]);</span>\n\n<span class=\"w\">  </span><span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"n\">Equal</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">GetInt32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>So I'm not sure what I'm doing wrong <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>The Compile-method calls <code>wasmtime_component_new</code> which is OK I think.</p>\n<p><em>Note:</em> I'm implementing the component c-api in .NET, so I'm testing stuff out <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 536305954,
        "sender_full_name": "Gerard Smit",
        "timestamp": 1756239346
    },
    {
        "content": "<p>It seems I can get <code>docs:adder/add@0.1.0</code>, and then I get a different error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Export</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">docs</span><span class=\"p\">:</span><span class=\"nc\">adder</span><span class=\"o\">/</span><span class=\"n\">add</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span>\n</code></pre></div>\n<p>So it looks like I need to get this export first, and then the function. I'm not sure what kind of export this is (e.g. a interface). And I'm also not sure if this is already implemented in the c-api. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 536307660,
        "sender_full_name": "Gerard Smit",
        "timestamp": 1756240172
    },
    {
        "content": "<p>Got it. I have to export the function directly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">docs</span><span class=\"p\">:</span><span class=\"nc\">adder</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Then I can call the function directly with \"add\".</p>\n<p>However now I'm getting a panic error <span aria-label=\"hmm\" class=\"emoji emoji-1f928\" role=\"img\" title=\"hmm\">:hmm:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Exit</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1073740791</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"err\">\\</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">110</span><span class=\"p\">:</span><span class=\"mi\">39</span><span class=\"p\">:</span>\n<span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Option</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">None</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>\n</code></pre></div>",
        "id": 536309867,
        "sender_full_name": "Gerard Smit",
        "timestamp": 1756241163
    },
    {
        "content": "<p>Got that as well. The store was not initialized with the WasiP2 context.<br>\nNow I'm getting C# exceptions. Progress <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"mh\">0x8b366</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">tmp1wig0Y</span><span class=\"o\">!</span><span class=\"n\">S_P_CoreLib_System_Runtime_EH__DispatchException</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"mh\">0x53c6c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">tmp1wig0Y</span><span class=\"o\">!</span><span class=\"n\">S_P_CoreLib_System_Runtime_EH__RhpThrowEx</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"mh\">0x6dbd1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">tmp1wig0Y</span><span class=\"o\">!</span><span class=\"n\">S_P_CoreLib_Internal_Runtime_CompilerHelpers_ThrowHelpers__ThrowNullReferenceException</span>\n<span class=\"w\">    </span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"mh\">0x63e18</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">tmp1wig0Y</span><span class=\"o\">!</span><span class=\"n\">S_P_CoreLib_Internal_Runtime_CompilerHelpers_StartupCodeHelpers__InitializeGlobalTablesForModule</span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"mh\">0x98ead</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">tmp1wig0Y</span><span class=\"o\">!</span><span class=\"n\">S_P_CoreLib_Internal_Runtime_CompilerHelpers_StartupCodeHelpers__InitializeModules</span>\n<span class=\"w\">    </span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mh\">0x24ba</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">tmp1wig0Y</span><span class=\"o\">!</span><span class=\"n\">InitializeRuntime</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mh\">0x5e3e</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">tmp1wig0Y</span><span class=\"o\">!</span><span class=\"n\">Thread</span><span class=\"p\">::</span><span class=\"n\">ReversePInvokeAttachOrTrapThread</span><span class=\"p\">(</span><span class=\"n\">ReversePInvokeFrame</span><span class=\"o\">*</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"mi\">7</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mh\">0x5f4a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">tmp1wig0Y</span><span class=\"o\">!</span><span class=\"n\">RhpReversePInvokeAttachOrTrapThread2</span>\n<span class=\"w\">    </span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"mh\">0x39a90</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">tmp1wig0Y</span><span class=\"o\">!</span><span class=\"n\">RhpReversePInvoke</span>\n<span class=\"w\">    </span><span class=\"mi\">9</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"mh\">0x69eca</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">tmp1wig0Y</span><span class=\"o\">!</span><span class=\"n\">Adder_ExampleWorld_exports_ExampleWorld__wasmExportAdd</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">uninitialized</span><span class=\"w\"> </span><span class=\"n\">element</span>\n</code></pre></div>",
        "id": 536310652,
        "sender_full_name": "Gerard Smit",
        "timestamp": 1756241539
    },
    {
        "content": "<p>Nvm, that's a bug in the latest version in NativeAOT-LLVM. <code>10.0.0-alpha.1.25162.1</code> works without issues <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>Now I can run components in .NET Wasmtime <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 536311923,
        "sender_full_name": "Gerard Smit",
        "timestamp": 1756242177
    },
    {
        "content": "<p>Congrats; I didn't think that was possible.  Perhaps <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/324\">https://github.com/bytecodealliance/wasmtime-dotnet/issues/324</a> ought to be updated?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/324\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6b525239fd451e45013315f5bcbda69d6fcc23f5/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353966666164303764633931626331653831363434353861653237633231366665323162336534346261346439646534333231393934326338613632353734302f62797465636f6465616c6c69616e63652f7761736d74696d652d646f746e65742f6973737565732f333234&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/324\" title=\"Component model support · Issue #324 · bytecodealliance/wasmtime-dotnet\">Component model support · Issue #324 · bytecodealliance/wasmtime-dotnet</a></div><div class=\"message_embed_description\">Context https://github.com/bytecodealliance/wasmtime/tree/main/examples/component Add support for making the same example from C#. https://github.com/WebAssembly/component-model/tree/main https://g...</div></div></div>",
        "id": 536312359,
        "sender_full_name": "Joel Dice",
        "timestamp": 1756242360
    },
    {
        "content": "<p>I made a new library with ClangSharp (that generated C# bindings for headers) and then implemented a minimal wrapper around this. So it's not directly wasmtime-dotnet <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 536313001,
        "sender_full_name": "Gerard Smit",
        "timestamp": 1756242653
    },
    {
        "content": "<p>There was an open issue about using ClangSharp: <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/329\">https://github.com/bytecodealliance/wasmtime-dotnet/issues/329</a><br>\nbut with this, the structure is completely different. It was easier to start from scratch for me.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/329\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/37f8db1b59d99b12c11254c8d958b49b2a979b21/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656563323731643835356435396663323437323431336434363339383663333339313934316666666131646530633063636161633062646637366636343431342f62797465636f6465616c6c69616e63652f7761736d74696d652d646f746e65742f6973737565732f333239&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/329\" title=\"Consider using a tool to generate c bindings over manual creation · Issue #329 · bytecodealliance/wasmtime-dotnet\">Consider using a tool to generate c bindings over manual creation · Issue #329 · bytecodealliance/wasmtime-dotnet</a></div><div class=\"message_embed_description\">Right now the api is generated by hand by referencing the wasmtime c library headers. We could automate this process which would make it easier to catch issues and make updates. See: Doing a little...</div></div></div>",
        "id": 536313257,
        "sender_full_name": "Gerard Smit",
        "timestamp": 1756242754
    },
    {
        "content": "<p>awsome work! Someone started scratching out what it might look like in wasmtime-dotnet, but I was thinking that using clangsharp might be better approach here particuallary for the component model stuff.  Do you think we could add a folder to wasmtime-dotnet and have low level API's exposed then add nice api on top?</p>",
        "id": 536318607,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1756245940
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/pull/346\">https://github.com/bytecodealliance/wasmtime-dotnet/pull/346</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-dotnet/pull/346\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c9f5fa154a2473b7e40687513d9e1a1ee4844fe9/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363564653136366334363465656461356330316439666333666331313032633230653766303138343836323662636237343533643561396162326130393935332f62797465636f6465616c6c69616e63652f7761736d74696d652d646f746e65742f70756c6c2f333436&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/pull/346\" title=\"Component Support WIP by martindevans · Pull Request #346 · bytecodealliance/wasmtime-dotnet\">Component Support WIP by martindevans · Pull Request #346 · bytecodealliance/wasmtime-dotnet</a></div><div class=\"message_embed_description\">This is a rough first pass looking at what&#39;s required for wasm component support. I&#39;ve pulled in everything from the component folder of the C-API (see here) and have wrapped some of the ea...</div></div></div>",
        "id": 536318640,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1756245955
    },
    {
        "content": "<p>If I want to add the component-model back to the main repo with a PR, it's gonna be a large one. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  Maybe I need to chop it down first.</p>\n<p>But I'm still experimenting around. </p>\n<p>I just made a source generator that converts the WIT-files:</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kr\">package</span><span class=\"w\"> </span><span class=\"nx\">docs</span><span class=\"o\">:</span><span class=\"kt\">adder</span><span class=\"err\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"nx\">world</span><span class=\"w\"> </span><span class=\"nx\">example</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">export</span><span class=\"w\"> </span><span class=\"nx\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">func</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">y</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">u32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>To callable methods:</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"c1\">// Create component instance (component = the compiled WASM file)</span>\n<span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">CreateInstance</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Wrap the instance around world 'example'</span>\n<span class=\"c1\">// The type 'Wit.docs.adder.example' is source generated.</span>\n<span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Wit</span><span class=\"p\">.</span><span class=\"n\">docs</span><span class=\"p\">.</span><span class=\"n\">adder</span><span class=\"p\">.</span><span class=\"n\">example</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Call the method 'add'</span>\n<span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"p\">.</span><span class=\"k\">add</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 536610843,
        "sender_full_name": "Gerard Smit",
        "timestamp": 1756388883
    }
]