[
    {
        "content": "<p>I am attempting to tidy the generation of the import and export methods and types so the live in symmetrical places,  under the interface definitions, rather than the import side being there, and the export side in the interop class.  Some types like resources have drop methods so their implementation is different import v export.  Then anything that can contain a resource, like a record, would also need its own type for import v export.  Other types like enums can be shared between import and export.  To implement this I'll need to know when generating the types what direction of interface they are used in, which presumably is not too hard.   My question is does rust do something similar in terms of creating different types for the imports and exports?</p>",
        "id": 536850993,
        "sender_full_name": "Scott Waye",
        "timestamp": 1756495906
    },
    {
        "content": "<p>Or am I doing something that isn't that great an idea?</p>",
        "id": 536851155,
        "sender_full_name": "Scott Waye",
        "timestamp": 1756495979
    },
    {
        "content": "<p>Yes, the Rust generator generates different types for imported and exported versions of a given resource type and likewise for other types containing resources, and I imagine every generator needs to do that.</p>",
        "id": 536854799,
        "sender_full_name": "Joel Dice",
        "timestamp": 1756497571
    },
    {
        "content": "<p>Good to know, how does that work for aliases, how does the generator know if it needs to generate code  for the alias, which presumably it doesn't do, if the alias is used in the same direction as the aliased type?</p>",
        "id": 536860116,
        "sender_full_name": "Scott Waye",
        "timestamp": 1756500549
    }
]