[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395878\">@Scott Waye</span> we're seeing \"return pointer not aligned\" failures in <code>wit-bindgen</code> CI again: <a href=\"https://github.com/bytecodealliance/wit-bindgen/actions/runs/9321335334/job/25669483093?pr=960\">https://github.com/bytecodealliance/wit-bindgen/actions/runs/9321335334/job/25669483093?pr=960</a>.  I think you tried to address that in <a href=\"https://github.com/bytecodealliance/wit-bindgen/commit/bcd136e583c51cb6819876478bdfd6bf96e1ea2d\">https://github.com/bytecodealliance/wit-bindgen/commit/bcd136e583c51cb6819876478bdfd6bf96e1ea2d</a>, but looks like maybe it needs more work?</p>\n<p>I'm going to try to reproduce it and see if I can learn anything.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/actions/runs/9321335334/job/25669483093?pr=960\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c520a1d197bde5e1752324316daebdbe5e1495c6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666234366235396431373661633033363361666232313336663764643062346662636466323466616136323964333839356462646264633135363162313161372f62797465636f6465616c6c69616e63652f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/actions/runs/9321335334/job/25669483093?pr=960\" title=\"full qualify Address to avoid collision with wit record of same name · bytecodealliance/wit-bindgen@bd057f2\">full qualify Address to avoid collision with wit record of same name · bytecodealliance/wit-bindgen@bd057f2</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - full qualify Address to avoid collision with wit record of same name · bytecodealliance/wit-bindgen@bd057f2</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/commit/bcd136e583c51cb6819876478bdfd6bf96e1ea2d\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6fccff4fbbc57d60b72e11feabd6bf1148642880/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373732623131363765376533353630366539633539613736313033343135313430623362663435303138636535383034653538616266376135333036376338392f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f636f6d6d69742f62636431333665353833633531636236383139383736343738626466643662663936653165613264&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/commit/bcd136e583c51cb6819876478bdfd6bf96e1ea2d\" title=\"[c#] Fix GC hole in return areas (#945) · bytecodealliance/wit-bindgen@bcd136e\">[c#] Fix GC hole in return areas (#945) · bytecodealliance/wit-bindgen@bcd136e</a></div><div class=\"message_embed_description\">* uncomment to force crash\n\n* fix GC hole with return areas\n\n* remove vscode files\n\n* add comment\n\nremove sln from git\n\n* format\n\n* Close all fixed blocks\n\n* correct tmp variable name use\n\n* correc...</div></div></div>",
        "id": 442279820,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717427130
    },
    {
        "content": "<p>One of the tricks I used when working on the Java bindings was to allocate extra space in the return area (e.g. up to 8 extra bytes for 8-byte alignment) and then align the pointer explicitly before passing it to the host, i.e. so that it points to the first byte in the array that has the alignment we need.  Shall we do the same for C#?  If there's not a better fix on the horizon, I think we need to do something, because keeps popping up (e.g. <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/968\">here</a>)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/968\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/052dd711a12123250097d02d62979a1f8a76c99a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643630306239666436656263313563396263353136636461633363653932633262636561623036333364353732636664313036626537336437393661633037322f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f393638&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/968\" title=\"C#: use exceptions for functions returning `result` by dicej · Pull Request #968 · bytecodealliance/wit-bindgen\">C#: use exceptions for functions returning `result` by dicej · Pull Request #968 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This addresses part of #964.\nFor WIT functions returning result&lt;T, E&gt;, we now generate methods which return T and throw WitException such that the E value may be retrieved using WitException.Value....</div></div></div>",
        "id": 443185194,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717720018
    },
    {
        "content": "<p>I'd like to try this locally first, give me until Monday please.</p>",
        "id": 443277556,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717759534
    },
    {
        "content": "<p>good news is that it does repro locally for me.</p>",
        "id": 443373667,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717792082
    },
    {
        "content": "<p>Is it possible to run the runtime tests with wasmtime?  I.e. get a single wasm file so I can run wasmtime under lldb ?</p>",
        "id": 443383259,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717795870
    },
    {
        "content": "<p>You can find the components using e.g. <code>find target/ -name *.component.wasm</code>, but they all use custom worlds, so you can't treat them as <code>wasi:cli</code> commands and run them using <code>wasmtime run</code>, unfortunately.</p>\n<p>However, you could edit the <code>run_test_from_dir</code> function in tests/runtime/main.rs and add a <code>config.debug_info(true);</code> line near the top.  Then run e.g. <code>cargo test --no-default-features --features csharp-naot</code>, which will print the binary name used (e.g. target/debug/deps/runtime-448f003ef70967db).  You can run that under LLDB.</p>",
        "id": 443383904,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717796170
    },
    {
        "content": "<p>From what I've heard there are issues with Wasmtime preserving debug info for components, but maybe those have been resolved?</p>",
        "id": 443384345,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717796393
    },
    {
        "content": "<p>thanks, I will have a try</p>",
        "id": 443385129,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717796614
    },
    {
        "content": "<p>hmmm, doesn't seem to want to resolve the breakpoints which is what you said was possibly still a problem</p>",
        "id": 443386746,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717797446
    },
    {
        "content": "<p>Yeah, that's what happened last time I tried it, unfortunately.  <span class=\"user-mention\" data-user-id=\"268586\">@Ralph</span> might know the status of debugging components.</p>",
        "id": 443386907,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717797525
    },
    {
        "content": "<p>The rust breakpoints work which might give a clue</p>",
        "id": 443387699,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717797928
    },
    {
        "content": "<p>I think this is telling me it has failed in the first <code>call_enum_error</code> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"n\">step</span><span class=\"o\">-</span><span class=\"n\">over</span>\n<span class=\"n\">Process</span><span class=\"w\"> </span><span class=\"mi\">45200</span><span class=\"w\"> </span><span class=\"n\">stopped</span>\n<span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stop</span><span class=\"w\"> </span><span class=\"n\">reason</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">step</span><span class=\"w\"> </span><span class=\"n\">over</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7c04b31a6</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"o\">-</span><span class=\"n\">f95e984830c7562b</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"err\">`</span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">union</span><span class=\"w\"> </span><span class=\"nc\">enum2</span><span class=\"cp\">$</span><span class=\"o\">&lt;</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">result</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"cp\">$</span><span class=\"o\">&lt;&gt;</span><span class=\"p\">,</span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">results</span><span class=\"p\">::</span><span class=\"n\">run_test</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff2a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff2a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff2a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff2a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff2a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff2a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff2a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff2a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff090</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">101</span>\n<span class=\"w\">   </span><span class=\"mi\">98</span><span class=\"w\">       </span><span class=\"p\">);</span>\n<span class=\"w\">   </span><span class=\"mi\">99</span>\n<span class=\"w\">   </span><span class=\"mi\">100</span><span class=\"w\">      </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span>\n<span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">101</span><span class=\"w\">          </span><span class=\"n\">results</span><span class=\"p\">.</span><span class=\"n\">interface0</span><span class=\"p\">.</span><span class=\"n\">call_enum_error</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"mi\">102</span><span class=\"w\">          </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">E</span><span class=\"p\">::</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mi\">103</span><span class=\"w\">      </span><span class=\"p\">);</span>\n<span class=\"w\">   </span><span class=\"mi\">104</span><span class=\"w\">      </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span>\n<span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"n\">step</span><span class=\"o\">-</span><span class=\"n\">over</span>\n<span class=\"n\">Process</span><span class=\"w\"> </span><span class=\"mi\">45200</span><span class=\"w\"> </span><span class=\"n\">stopped</span>\n<span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stop</span><span class=\"w\"> </span><span class=\"n\">reason</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">step</span><span class=\"w\"> </span><span class=\"n\">over</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0x00007ff7c04b4101</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"o\">-</span><span class=\"n\">f95e984830c7562b</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"err\">`</span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">union</span><span class=\"w\"> </span><span class=\"nc\">enum2</span><span class=\"cp\">$</span><span class=\"o\">&lt;</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">result</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"cp\">$</span><span class=\"o\">&lt;&gt;</span><span class=\"p\">,</span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">results</span><span class=\"p\">::</span><span class=\"n\">run_test</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff2a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff2a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff2a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff2a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff2a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff2a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff2a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"o\">=</span><span class=\"mh\">0x00007ff7c4bc7d48</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"o\">=</span><span class=\"mh\">0x000000df38cff090</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">166</span>\n<span class=\"w\">   </span><span class=\"mi\">163</span><span class=\"w\">      </span><span class=\"p\">);</span>\n<span class=\"w\">   </span><span class=\"mi\">164</span>\n<span class=\"w\">   </span><span class=\"mi\">165</span><span class=\"w\">      </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">166</span><span class=\"w\">  </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 443388074,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717798132
    },
    {
        "content": "<p>Yeah, I think that's just telling us what we already know: Wasmtime is trapping with a <code>return pointer not aligned</code> error, which gets returned to the <code>call_enum_error</code> caller as a <code>Result::Err(...)</code>, which leads to an early return due to the <code>?</code> operator.</p>",
        "id": 443388799,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717798561
    },
    {
        "content": "<p>Basically you're only able to debug the host code, which isn't terribly useful here.  It's the guest code we're interested in.</p>",
        "id": 443388910,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717798601
    },
    {
        "content": "<p>And until we get the debug info issue sorted, we're stuck with e.g. <code>Console.WriteLine</code>-based debugging, AFAICT.</p>",
        "id": 443389018,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717798656
    },
    {
        "content": "<p>Which has the annoying habit of moving heap related bugs around</p>",
        "id": 443389173,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717798695
    },
    {
        "content": "<p>Scott, how are you debugging this component?</p>",
        "id": 443389219,
        "sender_full_name": "Ralph",
        "timestamp": 1717798711
    },
    {
        "content": "<p>Slightly interesting that the <code>string</code> Err test is ok</p>",
        "id": 443389249,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717798720
    },
    {
        "content": "<p>Two months ago, components did not catch any breakpoints</p>",
        "id": 443389279,
        "sender_full_name": "Ralph",
        "timestamp": 1717798731
    },
    {
        "content": "<p>WIth lldb</p>",
        "id": 443389281,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717798732
    },
    {
        "content": "<p><code>breakpoint set --file results.rs --line 91</code></p>",
        "id": 443389354,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717798755
    },
    {
        "content": "<p>Right, I'll need the compile  steps and the invocation</p>",
        "id": 443389397,
        "sender_full_name": "Ralph",
        "timestamp": 1717798771
    },
    {
        "content": "<p>And <code>settings set target.run-args results::run</code></p>",
        "id": 443389414,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717798776
    },
    {
        "content": "<p>Can llvm-dwarfdump pick up the dwarf in the component?</p>",
        "id": 443389475,
        "sender_full_name": "Ralph",
        "timestamp": 1717798797
    },
    {
        "content": "<p>And getting the exe name from </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">github</span><span class=\"err\">\\</span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"o\">&gt;</span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"o\">-</span><span class=\"n\">cli</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">csharp</span><span class=\"o\">-</span><span class=\"n\">naot</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">::</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">exact</span>\n<span class=\"w\">   </span><span class=\"n\">Compiling</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">artifacts</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">0.0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">github</span><span class=\"err\">\\</span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"err\">\\</span><span class=\"n\">crates</span><span class=\"err\">\\</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"err\">\\</span><span class=\"n\">artifacts</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"n\">Compiling</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"o\">-</span><span class=\"n\">cli</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">26.0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">github</span><span class=\"err\">\\</span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">test</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"n\">s</span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"err\">\\</span><span class=\"n\">runtime</span><span class=\"err\">\\</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"err\">\\</span><span class=\"n\">debug</span><span class=\"err\">\\</span><span class=\"n\">deps</span><span class=\"err\">\\</span><span class=\"n\">runtime</span><span class=\"o\">-</span><span class=\"n\">f95e984830c7562b</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 443389643,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717798836
    },
    {
        "content": "<p>lldb invocation</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">lldb</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"err\">\\</span><span class=\"n\">debug</span><span class=\"err\">\\</span><span class=\"n\">deps</span><span class=\"err\">\\</span><span class=\"n\">runtime</span><span class=\"o\">-</span><span class=\"n\">f95e984830c7562b</span><span class=\"p\">.</span><span class=\"n\">exe</span>\n</code></pre></div>",
        "id": 443389773,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717798873
    },
    {
        "content": "<p>Trying to see where the symbols are inserted into the component</p>",
        "id": 443389775,
        "sender_full_name": "Ralph",
        "timestamp": 1717798873
    },
    {
        "content": "<p>Regarding the bug itself: the pattern I've seen so far is that <code>ulong[]</code> array bodies are only sometimes 8-byte aligned, which might mean they're really 4-byte aligned and 8-byte alignment is only coincidental.  Not sure if that's a C# ABI thing or what.</p>",
        "id": 443389821,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717798889
    },
    {
        "content": "<p>We can ask for sure</p>",
        "id": 443389877,
        "sender_full_name": "Ralph",
        "timestamp": 1717798905
    },
    {
        "content": "<p>Had a lovely lunch with the crew yesterday about this in fact</p>",
        "id": 443389905,
        "sender_full_name": "Ralph",
        "timestamp": 1717798920
    },
    {
        "content": "<p>I love chatting about alignment at lunch.</p>",
        "id": 443389969,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717798938
    },
    {
        "content": "<p>Oh shit now I'm going to have to compile this and test the debugging</p>",
        "id": 443389979,
        "sender_full_name": "Ralph",
        "timestamp": 1717798947
    },
    {
        "content": "<p>What llvm version are you using?</p>",
        "id": 443389992,
        "sender_full_name": "Ralph",
        "timestamp": 1717798956
    },
    {
        "content": "<p>I know what's happening during my weekend!</p>",
        "id": 443390015,
        "sender_full_name": "Ralph",
        "timestamp": 1717798974
    },
    {
        "content": "<p>I'm using LLVM 18, but I can't reproduce this locally, so that might be a data point.  Not sure what Scott's using ATM.</p>",
        "id": 443390037,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717798995
    },
    {
        "content": "<p>17.0.1 Win x64</p>",
        "id": 443390182,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717799090
    },
    {
        "content": "<p>AFAIK, this has only ever happened on Windows (i.e. components built on Windows), which seems bizarre.  Wit-bindgen CI has been updated to use WASI-SDK 22 (and thus LLVM 18), and it's happening there, but we only test on Windows currently in CI.</p>",
        "id": 443390186,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717799094
    },
    {
        "content": "<p>For debugging that is, for the build whatever is in Joel's branch which I assume is wasi-sdk 22</p>",
        "id": 443390256,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717799157
    },
    {
        "content": "<p>technically there's nothing in wit-bindgen that forces you to use a specific wasi-sdk -- it really just controls what CI uses</p>",
        "id": 443390370,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717799216
    },
    {
        "content": "<p>oh wait, we use <code>WASI_SDK_PATH</code> I think so 21 is what I seem to have, curious</p>",
        "id": 443390415,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717799245
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">scott</span><span class=\"o\">@</span><span class=\"n\">surface5</span><span class=\"p\">:</span><span class=\"o\">~</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">llvm</span><span class=\"o\">-</span><span class=\"n\">dwarfdump</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">mnt</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">github</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">results</span><span class=\"o\">/</span><span class=\"n\">csharp</span><span class=\"o\">-</span><span class=\"n\">results</span><span class=\"o\">/</span><span class=\"n\">csharp</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">mnt</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">github</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">results</span><span class=\"o\">/</span><span class=\"n\">csharp</span><span class=\"o\">-</span><span class=\"n\">results</span><span class=\"o\">/</span><span class=\"n\">csharp</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">invalid</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">65549</span>\n<span class=\"n\">scott</span><span class=\"o\">@</span><span class=\"n\">surface5</span><span class=\"p\">:</span><span class=\"o\">~</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">llvm</span><span class=\"o\">-</span><span class=\"n\">dwarfdump</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">version</span>\n<span class=\"n\">LLVM</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">http</span><span class=\"p\">:</span><span class=\"c1\">//llvm.org/):</span>\n<span class=\"w\">  </span><span class=\"n\">LLVM</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"mf\">17.0.4</span>\n<span class=\"w\">  </span><span class=\"n\">Optimized</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"p\">.</span>\n<span class=\"n\">scott</span><span class=\"o\">@</span><span class=\"n\">surface5</span><span class=\"p\">:</span><span class=\"o\">~</span><span class=\"cp\">$</span>\n</code></pre></div>\n<p>Not terribly interesting</p>",
        "id": 443390726,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717799426
    },
    {
        "content": "<p>Yup</p>",
        "id": 443390776,
        "sender_full_name": "Ralph",
        "timestamp": 1717799461
    },
    {
        "content": "<p>I used linux for that as I don't have a windows version of llvm-dwarfdump installed</p>",
        "id": 443390797,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717799474
    },
    {
        "content": "<p>That's standard. Dwarf dump doesn't know the file type</p>",
        "id": 443390807,
        "sender_full_name": "Ralph",
        "timestamp": 1717799479
    },
    {
        "content": "<p>Ah, yes</p>",
        "id": 443390822,
        "sender_full_name": "Ralph",
        "timestamp": 1717799487
    },
    {
        "content": "<p>OK, so as a complete Linux guy, this windows thing could well be quite different</p>",
        "id": 443390855,
        "sender_full_name": "Ralph",
        "timestamp": 1717799509
    },
    {
        "content": "<p>Which means I'm likely going to have to set up a compete window build</p>",
        "id": 443390925,
        "sender_full_name": "Ralph",
        "timestamp": 1717799528
    },
    {
        "content": "<p>Boooooooooo</p>",
        "id": 443390927,
        "sender_full_name": "Ralph",
        "timestamp": 1717799532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395878\">@Scott Waye</span> would you mind posting your copy of target/runtime-tests/results/csharp-results/csharp-wasm.component.wasm here?  I'd like to run it on Linux to see what happens.  Also, I'll post my Linux-built copy.</p>",
        "id": 443391008,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717799589
    },
    {
        "content": "<p>Unless we can repro with a host program that uses the rust code, and link with wasm-tools or the new thing if that is ready now</p>",
        "id": 443391021,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717799603
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/Yuk3Le1TrqyjyuBJFut2W2Zw/csharp-wasm.component.wasm\">csharp-wasm.component.wasm</a></p>",
        "id": 443391124,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717799645
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/nfl_sdcky6vhtQKzsAmxsxOn/csharp-wasm.component.wasm\">csharp-wasm.component.wasm</a><br>\nSure thing</p>",
        "id": 443391280,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717799701
    },
    {
        "content": "<p>I'm going to hack my tests/runtime/main.rs to run the component without trying to rebuild it.</p>",
        "id": 443391676,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717799796
    },
    {
        "content": "<p>ok, so I <em>am</em> able to reproduce it with Scott's build.  So the runtime behavior is consistent, at least.</p>",
        "id": 443392641,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717800269
    },
    {
        "content": "<p>ok, that's good</p>",
        "id": 443392724,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717800339
    },
    {
        "content": "<p>sorry its late here.  I'm out tomorrow but will have a look again on Sunday.  Have a good evening</p>",
        "id": 443392926,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717800472
    },
    {
        "content": "<p>You too!</p>\n<p>When you have a chance, please try copying my build to target/runtime-tests/results/csharp-results/csharp-wasm.component.wasm, applying the hacky patch below, and running <code>cargo test --no-default-features --features csharp-naot results::run</code> to verify that my build works.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">fd89888</span><span class=\"o\">..</span><span class=\"mi\">504</span><span class=\"n\">b03c</span><span class=\"w\"> </span><span class=\"mi\">100644</span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">145</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">145</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">tests</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dir_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">PathBuf</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi_adapter</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">         </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">test_artifacts</span><span class=\"p\">::</span><span class=\"n\">ADAPTER</span><span class=\"p\">).</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s\">\"failed to read the wasi adapter\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"o\">-</span><span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">remove_dir_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">out_dir</span><span class=\"p\">));</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"c1\">//drop(std::fs::remove_dir_all(&amp;out_dir));</span>\n<span class=\"w\">     </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">create_dir_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">out_dir</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">     </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"rust\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">rust</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">664</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">664</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">tests</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dir_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">PathBuf</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">         </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">c_sharp</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">             </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">world_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">resolve</span><span class=\"p\">.</span><span class=\"n\">worlds</span><span class=\"p\">[</span><span class=\"n\">world</span><span class=\"p\">].</span><span class=\"n\">name</span><span class=\"p\">;</span>\n<span class=\"w\">             </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">out_dir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">out_dir</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"csharp-{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">world_name</span><span class=\"p\">));</span>\n<span class=\"o\">-</span><span class=\"w\">            </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">remove_dir_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">out_dir</span><span class=\"p\">));</span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"c1\">//drop(fs::remove_dir_all(&amp;out_dir));</span>\n<span class=\"w\">             </span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">create_dir_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">out_dir</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">             </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">csharp_impl</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">c_sharp</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">765</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">765</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">tests</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dir_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">PathBuf</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                     </span><span class=\"n\">out_wasm</span>\n<span class=\"w\">                 </span><span class=\"p\">));</span>\n<span class=\"w\">             </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">out_wasm</span><span class=\"p\">.</span><span class=\"n\">with_extension</span><span class=\"p\">(</span><span class=\"s\">\"component.wasm\"</span><span class=\"p\">);</span>\n<span class=\"o\">-</span><span class=\"w\">            </span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">component_path</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"write component to disk\"</span><span class=\"p\">);</span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"c1\">//fs::write(&amp;component_path, component).expect(\"write component to disk\");</span>\n\n<span class=\"w\">             </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">component_path</span><span class=\"p\">);</span>\n<span class=\"w\">         </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 443393096,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717800594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268586\">Ralph</span> <a href=\"#narrow/stream/407028-C.23.2F.2Enet-collaboration/topic/return.20pointer.20not.20aligned/near/443390807\">said</a>:</p>\n<blockquote>\n<p>That's standard. Dwarf dump doesn't know the file type</p>\n</blockquote>\n<p>However <a href=\"https://wa2.dev\">https://wa2.dev</a> does identify that the sections are present<br>\n<a href=\"/user_uploads/15107/yjPeW9guVUuRSVfCw2ZdD4ML/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/yjPeW9guVUuRSVfCw2ZdD4ML/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/yjPeW9guVUuRSVfCw2ZdD4ML/image.png\"></a></div>",
        "id": 443442994,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717836235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/407028-C.23.2F.2Enet-collaboration/topic/return.20pointer.20not.20aligned/near/443392641\">said</a>:</p>\n<blockquote>\n<p>ok, so I <em>am</em> able to reproduce it with Scott's build.  So the runtime behavior is consistent, at least.</p>\n</blockquote>\n<p>And I confirm that your wasm runs successfully on windows.</p>",
        "id": 443443079,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717836299
    },
    {
        "content": "<p><a href=\"https://github.com/dotnet/runtimelab/issues/2606\">https://github.com/dotnet/runtimelab/issues/2606</a>  I created this question because I started to try aligning the return area correctly, but I may be missing something simple.  As an alternative we could drop the thread static for now, just leak the buffers, just to pass the tests, obviously we need a correct solution, there is another cleanup that is missing also while we are talking about missing bits.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/runtimelab/issues/2606\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ddd7e72629a0ae934eb0921928ae66870f60675f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613366616631616366323164333638666237623039373836346637633232373837633934636664373366313035616237373234666436633634393032613366662f646f746e65742f72756e74696d656c61622f6973737565732f32363036&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/runtimelab/issues/2606\" title=\"[NativeAOT-LLVM]: Should GCPointerMap have a provision for adding optional fields to GCStaticEETypeNode · Issue #2606 · dotnet/runtimelab\">[NativeAOT-LLVM]: Should GCPointerMap have a provision for adding optional fields to GCStaticEETypeNode · Issue #2606 · dotnet/runtimelab</a></div><div class=\"message_embed_description\">WIth this code public static class InteropReturnArea { [InlineArray(3)] internal struct ReturnArea { private ulong buffer; internal unsafe nint AddressOfReturnArea() { return (nint)Unsafe.AsPointer...</div></div></div>",
        "id": 443645752,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717969544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395878\">@Scott Waye</span> I saw <a href=\"https://github.com/dotnet/runtimelab/pull/2609\">https://github.com/dotnet/runtimelab/pull/2609</a> has been merged (thanks so much for doing that!), so I tried re-running the failed jobs for <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/968\">https://github.com/bytecodealliance/wit-bindgen/pull/968</a>, expecting it to pick up the new NuGet package, but I'm still getting a \"return pointer not aligned\".  Is there something I need to do to make sure the latest release is used?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/runtimelab/pull/2609\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d0ea6eba2e48fafeef06faa7b0f2b55e1dd0cd89/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323835623132316666633238393966396334336330356137613562353333356165373861396334376665613931343462383131356232333435336334636662352f646f746e65742f72756e74696d656c61622f70756c6c2f32363039&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/runtimelab/pull/2609\" title=\"[NativeAOT-LLVM] Workaround to align thread statics to 8 byte boundary by yowl · Pull Request #2609 · dotnet/runtimelab\">[NativeAOT-LLVM] Workaround to align thread statics to 8 byte boundary by yowl · Pull Request #2609 · dotnet/runtimelab</a></div><div class=\"message_embed_description\">This PR is a workaround to align all thread statics to 8 byte boundary to ensure those statics that do require 8 byte alignment are aligned.\nFollows #2606</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/968\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/64e1d3dddf9f5134881375c9b24d2238ffbf6b35/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393162396462666262636335326663386636616431326233313831643739313530316536633934663066336439363333363632346631653136616665316337392f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f393638&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/968\" title=\"C#: use exceptions for functions returning `result` by dicej · Pull Request #968 · bytecodealliance/wit-bindgen\">C#: use exceptions for functions returning `result` by dicej · Pull Request #968 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This addresses part of #964.\nFor WIT functions returning result&lt;T, E&gt;, we now generate methods which return T and throw WitException such that the E value may be retrieved using WitException.Value....</div></div></div>",
        "id": 444468800,
        "sender_full_name": "Joel Dice",
        "timestamp": 1718286257
    },
    {
        "content": "<p>Yup, good test</p>",
        "id": 444500464,
        "sender_full_name": "Ralph",
        "timestamp": 1718294120
    },
    {
        "content": "<p>The packages are published, I will try a bit later.  A little confused as <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/968/commits/5d0455a1ecd97fe2488374a8fc09001c3936a43a\">https://github.com/bytecodealliance/wit-bindgen/pull/968/commits/5d0455a1ecd97fe2488374a8fc09001c3936a43a</a> was green a few days ago.  Did you comment out the test?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/968/commits/5d0455a1ecd97fe2488374a8fc09001c3936a43a\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5611024d6fdea11ea63f57055866e15e11c2f661/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f313234333135333f733d34303026763d34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/968/commits/5d0455a1ecd97fe2488374a8fc09001c3936a43a\" title=\"C#: use exceptions for functions returning `result` by dicej · Pull Request #968 · bytecodealliance/wit-bindgen\">C#: use exceptions for functions returning `result` by dicej · Pull Request #968 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This addresses part of #964.\nFor WIT functions returning result&lt;T, E&gt;, we now generate methods which return T and throw WitException such that the E value may be retrieved using WitException....</div></div></div>",
        "id": 445686346,
        "sender_full_name": "Scott Waye",
        "timestamp": 1718825503
    },
    {
        "content": "<p>Oh yeah, I updated the test I added in that PR to only use 32-bit values as a workaround, since I'd didn't want it blocked on an unrelated issue.</p>",
        "id": 445687482,
        "sender_full_name": "Joel Dice",
        "timestamp": 1718825834
    },
    {
        "content": "<p>got it, thanks</p>",
        "id": 445687594,
        "sender_full_name": "Scott Waye",
        "timestamp": 1718825868
    }
]