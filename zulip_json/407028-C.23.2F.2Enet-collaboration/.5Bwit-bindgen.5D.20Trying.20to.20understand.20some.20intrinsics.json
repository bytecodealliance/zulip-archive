[
    {
        "content": "<p>Hi. I want to work on the C# bindgen a little bit. I notice a lot of very strange generated code, that I suspect can be shortened and optimized a fair amount.</p>\n<p>I'm (for now) mainly interested in string-related binding generation.</p>\n<p>Here's a sample generated from <code>./tests/codegen/strings.wit</code>.<br>\nExports:</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"na\">[UnmanagedCallersOnly(EntryPoint = \"foo:foo/strings#b\")]</span>\n<span class=\"k\">public</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">nint</span><span class=\"w\"> </span><span class=\"nf\">wasmExportB</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">StringsImpl</span><span class=\"p\">.</span><span class=\"n\">B</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">InteropReturnArea</span><span class=\"p\">.</span><span class=\"n\">returnArea</span><span class=\"p\">.</span><span class=\"n\">AddressOfReturnArea</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">stringSpan</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MemoryExtensions</span><span class=\"p\">.</span><span class=\"n\">AsSpan</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Encoding</span><span class=\"p\">.</span><span class=\"n\">UTF8</span><span class=\"p\">.</span><span class=\"n\">GetByteCount</span><span class=\"p\">(</span><span class=\"n\">stringSpan</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">strPtr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NativeMemory</span><span class=\"p\">.</span><span class=\"n\">Alloc</span><span class=\"p\">((</span><span class=\"k\">nuint</span><span class=\"p\">)</span><span class=\"n\">length</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">Encoding</span><span class=\"p\">.</span><span class=\"n\">UTF8</span><span class=\"p\">.</span><span class=\"n\">GetBytes</span><span class=\"p\">(</span><span class=\"n\">stringSpan</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Span</span><span class=\"o\">&lt;</span><span class=\"kt\">byte</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">strPtr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">));</span>\n\n<span class=\"w\">    </span><span class=\"n\">BitConverter</span><span class=\"p\">.</span><span class=\"n\">TryWriteBytes</span><span class=\"p\">(</span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Span</span><span class=\"o\">&lt;</span><span class=\"kt\">byte</span><span class=\"o\">&gt;</span><span class=\"p\">((</span><span class=\"k\">void</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">BitConverter</span><span class=\"p\">.</span><span class=\"n\">TryWriteBytes</span><span class=\"p\">(</span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Span</span><span class=\"o\">&lt;</span><span class=\"kt\">byte</span><span class=\"o\">&gt;</span><span class=\"p\">((</span><span class=\"k\">void</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">strPtr</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Imports:</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"k\">internal</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">CWasmInterop</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"na\">[DllImport(\"foo:foo/strings\", EntryPoint = \"c\"), WasmImportLinkage]</span>\n<span class=\"w\">    </span><span class=\"k\">internal</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"nf\">wasmImportC</span><span class=\"p\">(</span><span class=\"k\">nint</span><span class=\"w\"> </span><span class=\"n\">p0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">nint</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">p3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">nint</span><span class=\"w\"> </span><span class=\"n\">p4</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">public</span><span class=\"w\">  </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"nf\">C</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">cleanups</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"k\">global</span><span class=\"p\">::</span><span class=\"n\">System</span><span class=\"p\">.</span><span class=\"n\">Action</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">utf8Bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Encoding</span><span class=\"p\">.</span><span class=\"n\">UTF8</span><span class=\"p\">.</span><span class=\"n\">GetBytes</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">utf8Bytes</span><span class=\"p\">.</span><span class=\"n\">Length</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">gcHandle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">GCHandle</span><span class=\"p\">.</span><span class=\"n\">Alloc</span><span class=\"p\">(</span><span class=\"n\">utf8Bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">GCHandleType</span><span class=\"p\">.</span><span class=\"n\">Pinned</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">strPtr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gcHandle</span><span class=\"p\">.</span><span class=\"n\">AddrOfPinnedObject</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">cleanups</span><span class=\"p\">.</span><span class=\"n\">Add</span><span class=\"p\">(()</span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">gcHandle</span><span class=\"p\">.</span><span class=\"n\">Free</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">utf8Bytes1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Encoding</span><span class=\"p\">.</span><span class=\"n\">UTF8</span><span class=\"p\">.</span><span class=\"n\">GetBytes</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">length2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">utf8Bytes1</span><span class=\"p\">.</span><span class=\"n\">Length</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">gcHandle3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">GCHandle</span><span class=\"p\">.</span><span class=\"n\">Alloc</span><span class=\"p\">(</span><span class=\"n\">utf8Bytes1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">GCHandleType</span><span class=\"p\">.</span><span class=\"n\">Pinned</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">strPtr0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gcHandle3</span><span class=\"p\">.</span><span class=\"n\">AddrOfPinnedObject</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">cleanups</span><span class=\"p\">.</span><span class=\"n\">Add</span><span class=\"p\">(()</span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">gcHandle3</span><span class=\"p\">.</span><span class=\"n\">Free</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">retArea</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">stackalloc</span><span class=\"w\"> </span><span class=\"kt\">uint</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">retArea</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">CWasmInterop</span><span class=\"p\">.</span><span class=\"n\">wasmImportC</span><span class=\"p\">(</span><span class=\"n\">strPtr</span><span class=\"p\">.</span><span class=\"n\">ToInt32</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">strPtr0</span><span class=\"p\">.</span><span class=\"n\">ToInt32</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">length2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">foreach</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">cleanup</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">cleanups</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">cleanup</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">Encoding</span><span class=\"p\">.</span><span class=\"n\">UTF8</span><span class=\"p\">.</span><span class=\"n\">GetString</span><span class=\"p\">((</span><span class=\"kt\">byte</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">BitConverter</span><span class=\"p\">.</span><span class=\"n\">ToInt32</span><span class=\"p\">(</span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Span</span><span class=\"o\">&lt;</span><span class=\"kt\">byte</span><span class=\"o\">&gt;</span><span class=\"p\">((</span><span class=\"k\">void</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">BitConverter</span><span class=\"p\">.</span><span class=\"n\">ToInt32</span><span class=\"p\">(</span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Span</span><span class=\"o\">&lt;</span><span class=\"kt\">byte</span><span class=\"o\">&gt;</span><span class=\"p\">((</span><span class=\"k\">void</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)));</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I'm confused about a few things:<br>\nWhat is the \"return area\"? What does it look like in native code? I imagine it must be either some native struct/some other kind of buffer containing addresses/pointers in WASM space? The generated code looks really strange to me in that regard; do I understand correctly that pointers are <code>4</code> bytes in size in WASM? Why is a <code>stackalloc</code> being used? Why is it <code>1</code> byte larger than necessary?<br>\nIs there a particular reason behind the use of <code>GCHandle</code> over <code>fixed</code>? Eliminating the use of <code>GCHandle</code> would eliminate all the need for cleanup.<br>\nA lot of the uses of <code>Span</code>s seems very redundant to me, but I have a hard time parsing why they were used and what exactly they do.</p>\n<p>If someone has the time to explain the flow of data and what parts represent what, I'd greatly appreciate it.</p>",
        "id": 517850274,
        "sender_full_name": "ero",
        "timestamp": 1747147445
    },
    {
        "content": "<blockquote>\n<p>What is the \"return area\"? What does it look like in native code? I imagine it must be either some native struct/some other kind of buffer containing addresses/pointers in WASM space?</p>\n</blockquote>\n<p>Yes its a buffer.  It can contain pointers or actual data dependingon the type of the ABI call for the data being passed. </p>\n<blockquote>\n<p>do I understand correctly that pointers are <code>4</code> bytes in size in WASM?</p>\n</blockquote>\n<p>Most of the time, though it will be possible to do 64bit in the future.</p>\n<blockquote>\n<p>Why is a <code>stackalloc</code> being used? Why is it <code>1</code> byte larger than necessary?</p>\n</blockquote>\n<p>When the memory doesn't need to be kept around, we can use stackalloc to avoid allocating on the heap.  The extra byte is becuase .net stack alloc doesn't always align on the wasm memory boundries, so we need to over allocate and shift the bytes to align on 32 bit boundry</p>\n<blockquote>\n<p>Is there a particular reason behind the use of <code>GCHandle</code> over <code>fixed</code>? Eliminating the use of <code>GCHandle</code> would eliminate all the need for cleanup.</p>\n</blockquote>\n<p>Fixed won't work in edge cases of variants, it could be that we switch to the using fixed in all the cases it does work then use GHChandle when we can't but it would add some complexity to code generation.</p>\n<blockquote>\n<p>A lot of the uses of <code>Span</code>s seems very redundant to me, but I have a hard time parsing why they were used and what exactly they do.</p>\n</blockquote>\n<p>Yes I think they are probably overused, there were several of us trying to get this up and running with various skill levels.  I for one was new to low level c# so could be to blame for some of it <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> . We have a few tracking issues for clean this and other things up.</p>",
        "id": 517925136,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1747171119
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/1150\">https://github.com/bytecodealliance/wit-bindgen/issues/1150</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/issues/1150\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1d7b0b8f2dddf74cb5cfbaf779e58e3e739e7b8b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366237353439313435646235333739666364663335353438393665636232343736373966343036343464373530323862353239336634356532336432613463622f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f6973737565732f31313530&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/1150\" title=\"c#: perfer using fixed over GCalloc · Issue #1150 · bytecodealliance/wit-bindgen\">c#: perfer using fixed over GCalloc · Issue #1150 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">see: #1138 (comment) #1145 (comment) #1138 (comment) #1138 (comment)</div></div></div>",
        "id": 517926237,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1747171604
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/1143\">https://github.com/bytecodealliance/wit-bindgen/issues/1143</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/issues/1143\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/84bd1a08dd73203c0b9d7c21ff084d1a5fb03eca/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303537323832363565613363653034386235666561633430306433633139313862386566393231336536323033623434313839323365333535333166396530392f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f6973737565732f31313433&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/1143\" title=\"c#: Update the allocation clean up code to avoid using closure which will allocate on the heap · Issue #1143 · bytecodealliance/wit-bindgen\">c#: Update the allocation clean up code to avoid using closure which will allocate on the heap · Issue #1143 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">Also note that cleanups.Add(()=&gt; NativeMemory.AlignedFree({address})); will allocate closure. Agree. I would consider handling this in a stack allocated struct that implements IDisposable or a ref ...</div></div></div>",
        "id": 517926299,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1747171626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"625613\">@James Sturtevant</span> Can you explain what's really going on with the <code>retArea</code>?</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">retArea</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">stackalloc</span><span class=\"w\"> </span><span class=\"kt\">uint</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">retArea</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Why is this truncating a 64-bit address (<code>uint* retArea</code>) to a 32-bit integer? It must lose some crucial bits of the address. How is the WASM runtime able to write to such an incomplete pointer, one that does not exist in C# space?</p>",
        "id": 518282677,
        "sender_full_name": "ero",
        "timestamp": 1747310532
    },
    {
        "content": "<p>There's a lot of difficulty in what I actually want to do.<br>\nLet's take a sample string import:</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"k\">internal</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">SampleWasmInterop</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"na\">[DllImport(\"foo:foo/strings\", EntryPoint = \"sample\"), WasmImportLinkage]</span>\n<span class=\"w\">    </span><span class=\"k\">internal</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"nf\">wasmImportSample</span><span class=\"p\">(</span><span class=\"k\">nint</span><span class=\"w\"> </span><span class=\"n\">p0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">nint</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">public</span><span class=\"w\">  </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"nf\">Sample</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"k\">value</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">cleanups</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Action</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">utf8Bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Encoding</span><span class=\"p\">.</span><span class=\"n\">UTF8</span><span class=\"p\">.</span><span class=\"n\">GetBytes</span><span class=\"p\">(</span><span class=\"k\">value</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">utf8Bytes</span><span class=\"p\">.</span><span class=\"n\">Length</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">gcHandle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">GCHandle</span><span class=\"p\">.</span><span class=\"n\">Alloc</span><span class=\"p\">(</span><span class=\"n\">utf8Bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">GCHandleType</span><span class=\"p\">.</span><span class=\"n\">Pinned</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">strPtr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gcHandle</span><span class=\"p\">.</span><span class=\"n\">AddrOfPinnedObject</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">cleanups</span><span class=\"p\">.</span><span class=\"n\">Add</span><span class=\"p\">(()</span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">gcHandle</span><span class=\"p\">.</span><span class=\"n\">Free</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">retArea</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">stackalloc</span><span class=\"w\"> </span><span class=\"kt\">uint</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">retArea</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">SampleWasmInterop</span><span class=\"p\">.</span><span class=\"n\">wasmImportSampleImport</span><span class=\"p\">(</span><span class=\"n\">strPtr</span><span class=\"p\">.</span><span class=\"n\">ToInt32</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">foreach</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">var</span><span class=\"w\"> </span><span class=\"n\">cleanup</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">cleanups</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">cleanup</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">Encoding</span><span class=\"p\">.</span><span class=\"n\">UTF8</span><span class=\"p\">.</span><span class=\"n\">GetString</span><span class=\"p\">((</span><span class=\"kt\">byte</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">BitConverter</span><span class=\"p\">.</span><span class=\"n\">ToInt32</span><span class=\"p\">(</span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Span</span><span class=\"o\">&lt;</span><span class=\"kt\">byte</span><span class=\"o\">&gt;</span><span class=\"p\">((</span><span class=\"k\">void</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">BitConverter</span><span class=\"p\">.</span><span class=\"n\">ToInt32</span><span class=\"p\">(</span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Span</span><span class=\"o\">&lt;</span><span class=\"kt\">byte</span><span class=\"o\">&gt;</span><span class=\"p\">((</span><span class=\"k\">void</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)));</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>What I want to achieve is the following:</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">StringReturnArea</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">Address</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">Length</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"na\">[GeneratedCode(\"wit-bindgen\", \"0.42.1\")]</span>\n<span class=\"na\">[SkipLocalsInit]</span>\n<span class=\"k\">public</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"nf\">Sample</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"k\">value</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">StringReturnArea</span><span class=\"w\"> </span><span class=\"n\">__retArea</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">default</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">__retVal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">default</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kt\">byte</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">__valueNative</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">default</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">scoped</span><span class=\"w\"> </span><span class=\"n\">Utf8StringMarshaller</span><span class=\"p\">.</span><span class=\"n\">ManagedToUnmanagedIn</span><span class=\"w\"> </span><span class=\"n\">__valueNativeMarshaller</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">try</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">__valueNativeMarshaller</span><span class=\"p\">.</span><span class=\"n\">FromManaged</span><span class=\"p\">(</span><span class=\"k\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">stackalloc</span><span class=\"w\"> </span><span class=\"kt\">byte</span><span class=\"p\">[</span><span class=\"n\">Utf8StringMarshaller</span><span class=\"p\">.</span><span class=\"n\">ManagedToUnmanagedIn</span><span class=\"p\">.</span><span class=\"n\">BufferSize</span><span class=\"p\">]);</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">__valueNative</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__valueNativeMarshaller</span><span class=\"p\">.</span><span class=\"n\">ToUnmanaged</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">__wasmImport</span><span class=\"p\">(</span><span class=\"n\">__valueNative</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">value</span><span class=\"p\">.</span><span class=\"n\">Length</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">__retArea</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"n\">__retVal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Encoding</span><span class=\"p\">.</span><span class=\"n\">UTF8</span><span class=\"p\">.</span><span class=\"n\">GetString</span><span class=\"p\">((</span><span class=\"kt\">byte</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">__retArea</span><span class=\"p\">.</span><span class=\"n\">Address</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">__retArea</span><span class=\"p\">.</span><span class=\"n\">Length</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">finally</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">__valueNativeMarshaller</span><span class=\"p\">.</span><span class=\"n\">Free</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">__retVal</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"na\">[DllImport(\"foo:foo/strings\", EntryPoint = \"sample\")]</span>\n<span class=\"w\">    </span><span class=\"na\">[WasmImportLinkage]</span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"nf\">__wasmImport</span><span class=\"p\">(</span><span class=\"kt\">byte</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">valueNative</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">valueLength</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StringReturnArea</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">retArea</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 518300808,
        "sender_full_name": "ero",
        "timestamp": 1747315086
    },
    {
        "content": "<p>Now, there may be some issues with the alignment you mentioned on <code>__valueNative</code> and <code>&amp;__retArea</code>. That should be easy to handle.</p>",
        "id": 518301153,
        "sender_full_name": "ero",
        "timestamp": 1747315164
    },
    {
        "content": "<p>My problem is my lack of Rust knowledge. I wouldn't know where to begin working on this.</p>",
        "id": 518301252,
        "sender_full_name": "ero",
        "timestamp": 1747315190
    },
    {
        "content": "<p>An extra layer of difficulty is added by the fact that we'd need to check all input parameters and make sure they don't overlap with any of the generated locals.</p>",
        "id": 518302886,
        "sender_full_name": "ero",
        "timestamp": 1747315552
    },
    {
        "content": "<p>We dont support memory64 (and nor does wasmtime yet I think), all our addresses are 32 bit so there is no  truncation</p>",
        "id": 518335518,
        "sender_full_name": "Scott Waye",
        "timestamp": 1747322644
    },
    {
        "content": "<p>Wasmtime <em>does</em> support memory64 for core modules, but not for components since the Component Model spec does not yet include support for memory64.</p>",
        "id": 518336296,
        "sender_full_name": "Joel Dice",
        "timestamp": 1747322820
    },
    {
        "content": "<p>I.e. as far as <code>wit-bindgen</code> is concerned, you're correct that we're wasm32-only for now.</p>",
        "id": 518336639,
        "sender_full_name": "Joel Dice",
        "timestamp": 1747322892
    },
    {
        "content": "<p>Thanks for the clarification!</p>",
        "id": 518348520,
        "sender_full_name": "Scott Waye",
        "timestamp": 1747325964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395878\">@Scott Waye</span> So when my C# project targets <code>wasi-wasm</code>, it's always going to be 32-bit (wasm32?) by default? I was concerned the host app could be 64-bit, which would cause an issue.</p>",
        "id": 518355920,
        "sender_full_name": "ero",
        "timestamp": 1747328167
    },
    {
        "content": "<p>Does the component model support interaction between different bitness of host and component?  I've not come across that before.  <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span>  any idea?</p>",
        "id": 518356171,
        "sender_full_name": "Scott Waye",
        "timestamp": 1747328258
    },
    {
        "content": "<p>But the answer is yes to the c# side, we only support compiling to 32bit wasm</p>",
        "id": 518356647,
        "sender_full_name": "Scott Waye",
        "timestamp": 1747328395
    },
    {
        "content": "<p>Yeah, the host knows that wasm32 guest pointers are 32-bit even if host pointers are 64-bit, and there's never any ambiguity about whether a pointer is a guest pointer or a host pointer.  Bitness aside, confusing guest pointers (which are offsets into the guest's linear memory) and host pointers (which are offsets into the host's virtual address space) would be catastrophic in any case.</p>",
        "id": 518356845,
        "sender_full_name": "Joel Dice",
        "timestamp": 1747328438
    },
    {
        "content": "<p>Furthermore, components can be composed, meaning more than one linear memory may be in play, in which case a guest pointer must always be relative to a specific linear memory.</p>",
        "id": 518357060,
        "sender_full_name": "Joel Dice",
        "timestamp": 1747328504
    },
    {
        "content": "<blockquote>\n<p>Why is this truncating a 64-bit address (<code>uint* retArea</code>) to a 32-bit integer?</p>\n</blockquote>\n<p>I am not sure If I understand this statement.  uint* is 32 bit pointer saying it points to uint type and is same as void* and here we are casting the void* to an int. Maybe its safer to do something like `new IntPtr(void* ptr).toInt32()</p>",
        "id": 518357395,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1747328608
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"897603\">@ero</span>  seems like we are saying its all good, nothing can go wrong :-)</p>",
        "id": 518357548,
        "sender_full_name": "Scott Waye",
        "timestamp": 1747328648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/channel/407028-C.23.2F.2Enet-collaboration/topic/.5Bwit-bindgen.5D.20Trying.20to.20understand.20some.20intrinsics/near/518357060\">said</a>:</p>\n<blockquote>\n<p>Furthermore, components can be composed, meaning more than one linear memory may be in play, in which case a guest pointer must always be relative to a specific linear memory.</p>\n</blockquote>\n<p>does component model support mutlple memories at this point?  I thought it didn't</p>",
        "id": 518357554,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1747328649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625613\">James Sturtevant</span> <a href=\"#narrow/channel/407028-C.23.2F.2Enet-collaboration/topic/.5Bwit-bindgen.5D.20Trying.20to.20understand.20some.20intrinsics/near/518357554\">said</a>:</p>\n<blockquote>\n<p>does component model support mutlple memories at this point?  I thought it didn't</p>\n</blockquote>\n<p>Sure; you can use <code>wasm-tools compose</code> or wac to take two (or more) components, each with their own linear memory, and create a new component that bundles the original two (or more) as subcomponents.</p>",
        "id": 518357989,
        "sender_full_name": "Joel Dice",
        "timestamp": 1747328798
    },
    {
        "content": "<p>You can also componentize a core module that has more than one linear memory, if desired.</p>",
        "id": 518358084,
        "sender_full_name": "Joel Dice",
        "timestamp": 1747328831
    },
    {
        "content": "<p>Although creating such a core module using e.g. LLVM might be a challenge.  It's not hard to do by writing WAT directly, though.</p>",
        "id": 518358266,
        "sender_full_name": "Joel Dice",
        "timestamp": 1747328884
    },
    {
        "content": "<blockquote>\n<p>Sure; you can use <code>wasm-tools compose</code> or wac to take two (or more) components, each with their own linear memory, and create a new component that bundles the original two (or more) as subcomponents.</p>\n</blockquote>\n<p>Yea this makes sense.</p>\n<blockquote>\n<p>You can also componentize a core module that has more than one linear memory, if desired.</p>\n</blockquote>\n<p>it was this scenario I didn't think would nessarily work.  good too know!</p>",
        "id": 518358410,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1747328936
    },
    {
        "content": "<p>Fun fact: Wasmtime synthesizes core modules internally to \"glue together\" composed components, one of which imports a function exported by the other.  Each such module imports two linear memories: one from the importing component and the other from the exporting component.  This allows it to \"lift\" parameters from the caller and \"lower\" them to the callee, and then vice-versa for the returned result.</p>",
        "id": 518359132,
        "sender_full_name": "Joel Dice",
        "timestamp": 1747329158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"625613\">@James Sturtevant</span></p>\n<blockquote>\n<p>I am not sure If I understand this statement. uint* is 32 bit pointer</p>\n</blockquote>\n<p>Yes, I wasn't sure whether this was the case. I thought potentially the app calling the WASM imports or exports can be 64-bit. I see now that this doesn't really work.</p>",
        "id": 518368351,
        "sender_full_name": "ero",
        "timestamp": 1747332192
    },
    {
        "content": "<p>I think the C# crate needs some major changes to accomodate for my suggestions. The snippet I showed above is how the .NET base library does it and I would feel much more at ease using wit-bindgen if this was the code generated.</p>",
        "id": 518370182,
        "sender_full_name": "ero",
        "timestamp": 1747332759
    },
    {
        "content": "<p>I unfortunately can't assist much in making these adjustments.</p>",
        "id": 518370255,
        "sender_full_name": "ero",
        "timestamp": 1747332784
    }
]