[
    {
        "content": "<p>Is anybody here an expert on <code>async</code>/<code>await</code> in C#/.NET?  I'm trying to support it in WASI using <code>wasi:io/poll</code> to drive <code>await</code> continuations, but my experiments so far implementing a custom <code>SynchronizationContext</code> and/or custom <code>TaskScheduler</code> aren't working.</p>\n<p>All the examples I've found so far seem to assume there are at least two threads in play.  I <em>think</em> it should be possible to do everything in a single thread, but I haven't figured out how to hook everything up.</p>",
        "id": 441278225,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717001022
    },
    {
        "content": "<p><a href=\"#narrow/stream/407028-C.23.2F.2Enet-collaboration/topic/single-threaded.20async.2Fawait/near/441278225\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"407028\" href=\"/#narrow/stream/407028-C.23.2F.2Enet-collaboration/topic/replacing.20emsdk.20with.20wasi-sdk\">#C#/.net-collaboration &gt; replacing emsdk with wasi-sdk</a> by <span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span>.</p>",
        "id": 441286117,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717004170
    },
    {
        "content": "<p>Nevermind, I figured it out.  The key was to use <code>TaskCreationOptions.AttachedToParent</code> to ensure the child tasks finish before the parent task finishes.</p>",
        "id": 441286207,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717004226
    },
    {
        "content": "<p>no problem, feel free to create noise :-)</p>",
        "id": 441420935,
        "sender_full_name": "Scott Waye",
        "timestamp": 1717062259
    },
    {
        "content": "<p>Ok, so I hit a real (i.e. not just self-inflicted) roadblock this time: <a href=\"https://github.com/dotnet/runtime/issues/102894\">https://github.com/dotnet/runtime/issues/102894</a><br>\nI'd love to get feedback on that from the .NET experts.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/runtime/issues/102894\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a02ecab95d54c7fb79bea6f175d3e39324fd20b1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616363663864393439333530323365356264396432316638376532373930663633633932323631393931663934383965643633626566373966333833346332612f646f746e65742f72756e74696d652f6973737565732f313032383934&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/runtime/issues/102894\" title=\"[wasi] `async`/`await` on WASI · Issue #102894 · dotnet/runtime\">[wasi] `async`/`await` on WASI · Issue #102894 · dotnet/runtime</a></div><div class=\"message_embed_description\">I've been working to support async/await in C# for doing concurrent I/O when targeting WASIp2. A key piece of that is the wasi:io/poll#poll function, which accepts an arbitrary number of pollable h...</div></div></div>",
        "id": 441535468,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717096751
    },
    {
        "content": "<p>While I still think the above is a real issue, I worked around it by implementing my own <code>WhenEach</code> combinator.  Here's an example that does concurrent outbound request streaming: <a href=\"https://github.com/dicej/dotnet9-wasi-http-example/blob/snapshot/App.cs\">https://github.com/dicej/dotnet9-wasi-http-example/blob/snapshot/App.cs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/dotnet9-wasi-http-example/blob/snapshot/App.cs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/dc49f46ac4610e109a0cd01c4296cba3422c1a0c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383630613832636437366432386534633636616565326633626335363431343064363437666639323933663266333133383830306535623963623030353039622f646963656a2f646f746e6574392d776173692d687474702d6578616d706c65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/dotnet9-wasi-http-example/blob/snapshot/App.cs\" title=\"dotnet9-wasi-http-example/App.cs at snapshot · dicej/dotnet9-wasi-http-example\">dotnet9-wasi-http-example/App.cs at snapshot · dicej/dotnet9-wasi-http-example</a></div><div class=\"message_embed_description\">Contribute to dicej/dotnet9-wasi-http-example development by creating an account on GitHub.</div></div></div>",
        "id": 441570621,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717107596
    }
]