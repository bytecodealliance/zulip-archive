[
    {
        "content": "<p>Question about wasmtime-dotnet. Please let me know if this isn't the right place to ask (I apologize in advance).</p>\n<p>I have a multithreaded C program:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">pthread</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n\n#<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">NUM_THREADS</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n\n<span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">thread_entry_point</span><span class=\"p\">(</span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ctx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\" in thread %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"n\">launch_threads</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">pthread_t</span><span class=\"w\"> </span><span class=\"n\">threads</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">];</span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">NUM_THREADS</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pthread_create</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">threads</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">NULL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">thread_entry_point</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"failed to spawn thread: %s\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">strerror</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">NUM_THREADS</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">pthread_join</span><span class=\"p\">(</span><span class=\"n\">threads</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">NULL</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">argc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">launch_threads</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I can run it without any issue on the command line: <code>/mnt/e/Code/wasmtime/target/release/wasmtime --wasm threads --wasi threads ./threads.wasm</code></p>\n<p>I am trying to write some C# code using wasmtime-dotnet to run the program:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">Wasmtime</span><span class=\"p\">;</span>\n\n<span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">WasiConfiguration</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">WithInheritedStandardInput</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">WithInheritedStandardOutput</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">WithInheritedStandardError</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">WithArg</span><span class=\"p\">(</span><span class=\"s\">\"--wasi threads\"</span><span class=\"p\">);</span>\n<span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">WithWasmThreads</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">WithBulkMemory</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">WithMultiMemory</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">);</span>\n<span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">SetWasiConfiguration</span><span class=\"p\">(</span><span class=\"n\">wasi</span><span class=\"p\">);</span>\n<span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">DefineWasi</span><span class=\"p\">();</span>\n\n<span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">.</span><span class=\"n\">FromFile</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"threads.wasm\"</span><span class=\"p\">);</span>\n\n<span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">);</span>\n<span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">GetFunction</span><span class=\"p\">(</span><span class=\"s\">\"_start\"</span><span class=\"p\">).</span><span class=\"n\">Invoke</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>When I run it I get an error on the <code>linker.Instantiate(store, module)</code> line of: <code>Wasmtime.WasmtimeException: 'unknown import: 'env::memory' has not been defined'</code></p>\n<p>Could anyone give me any pointers?</p>\n<p>Thanks so much! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 398993363,
        "sender_full_name": "William Mortl",
        "timestamp": 1698457051
    },
    {
        "content": "<p>For me <code>wasmtime run -Sthreads=y -Spreview2=n</code> worked. The <code>-Spreview2=n</code> switches back to the old wasi-preview1 implementation that isn't layered on top of wasi-preview2 as the latter is incompatible with thread support.</p>",
        "id": 408478228,
        "sender_full_name": "bjorn3",
        "timestamp": 1702844794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/407028-C.23.2F.2Enet-collaboration/topic/wasmtime-dotnet.20and.20wasi.20threads/near/408478228\">said</a>:</p>\n<blockquote>\n<p>For me <code>wasmtime run -Sthreads=y -Spreview2=n</code> worked. The <code>-Spreview2=n</code> switches back to the old wasi-preview1 implementation that isn't layered on top of wasi-preview2 as the latter is incompatible with thread support.</p>\n</blockquote>\n<p>Ah cool. I wasn't aware. Thanks!</p>",
        "id": 408922872,
        "sender_full_name": "Timmy Silesmo",
        "timestamp": 1702988541
    }
]