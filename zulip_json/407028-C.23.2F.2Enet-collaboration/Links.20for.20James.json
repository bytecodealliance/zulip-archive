[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"625613\">@James Sturtevant</span>  These instructions for build a NativeAOT-LLVM runtime and ILC should be up to date: <a href=\"https://github.com/dotnet/runtimelab/blob/feature/NativeAOT-LLVM/docs/workflow/building/coreclr/nativeaot.md\">https://github.com/dotnet/runtimelab/blob/feature/NativeAOT-LLVM/docs/workflow/building/coreclr/nativeaot.md</a>.  You'll probably want to build using my PR branch: <a href=\"https://github.com/dicej/runtimelab/tree/system-net-http-wasi\">https://github.com/dicej/runtimelab/tree/system-net-http-wasi</a></p>\n<p>And here's what I have so far for the <code>SslStream</code> experiment: <a href=\"https://github.com/dicej/dotnet-wasi-tls\">https://github.com/dicej/dotnet-wasi-tls</a>.  I haven't made many changes to the .NET runtime code yet, but I'll push those changes to a branch when I've made significant progress.  cc <span class=\"user-mention\" data-user-id=\"471788\">@Pavel Šavara</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/runtimelab/blob/feature/NativeAOT-LLVM/docs/workflow/building/coreclr/nativeaot.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/90255515ab2e02a161e3715e4907ca21b90de3fb/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626565646439356530313037623763636539633366313331323839393266376639613865656139393836333234326364643764633336356163313861346531322f646f746e65742f72756e74696d656c6162&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/runtimelab/blob/feature/NativeAOT-LLVM/docs/workflow/building/coreclr/nativeaot.md\" title=\"runtimelab/docs/workflow/building/coreclr/nativeaot.md at feature/NativeAOT-LLVM · dotnet/runtimelab\">runtimelab/docs/workflow/building/coreclr/nativeaot.md at feature/NativeAOT-LLVM · dotnet/runtimelab</a></div><div class=\"message_embed_description\">This repo is for experimentation and exploring new ideas that may or may not make it into the main dotnet/runtime repo. - dotnet/runtimelab</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/runtimelab/tree/system-net-http-wasi\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/08c25c0a255a5058553b5bd91abfb51e08b87d79/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363964656230363864373661346135343466623334333864623264646262356232303130303232663765616462373036666663333535646166396335326338382f646963656a2f72756e74696d656c6162&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/runtimelab/tree/system-net-http-wasi\" title=\"GitHub - dicej/runtimelab at system-net-http-wasi\">GitHub - dicej/runtimelab at system-net-http-wasi</a></div><div class=\"message_embed_description\">This repo is for experimentation and exploring new ideas that may or may not make it into the main dotnet/runtime repo. - GitHub - dicej/runtimelab at system-net-http-wasi</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/dotnet-wasi-tls\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d5a0fcf9760cc727ec116d4babb1836b0103ef4d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393037353932333135396564313030366161663564393631643761643364323432343962636231613163323139613333643065326263386234356439633235342f646963656a2f646f746e65742d776173692d746c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/dotnet-wasi-tls\" title=\"GitHub - dicej/dotnet-wasi-tls\">GitHub - dicej/dotnet-wasi-tls</a></div><div class=\"message_embed_description\">Contribute to dicej/dotnet-wasi-tls development by creating an account on GitHub.</div></div></div>",
        "id": 469723752,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726158410
    },
    {
        "content": "<p>I just learned that Mono/WASI Net10 SDK and workload is not going to be available soon. So using it from componentize-dotnet is blocked. I don't really understand the details of why, but it's some versioning hell in the product construction.<br>\n<span class=\"user-mention\" data-user-id=\"700594\">@Larry Ewing</span> could maybe share more. </p>\n<p>That should not prevent me from working on sockets upstream or James from work on SslStream upstream either, but we would have to merge it to NAOT_LLVM first before that would be visible to broader audience. And maybe working on NAOT_LLVM branch directly would be way to go. We will see.</p>\n<p>Mono/WASI in Net9 is broken for other reasons and we are not going to try to fix it, because many of the fixes are only on main branch, which is Net10 now.</p>",
        "id": 469731107,
        "sender_full_name": "Pavel Šavara",
        "timestamp": 1726160435
    },
    {
        "content": "<p>this was the sql library we want to use ssltream in  <a href=\"https://github.com/dotnet/SqlClient\">https://github.com/dotnet/SqlClient</a>?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/SqlClient\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/750a271dfa7c0dc2698a9975ec09002202c5e53f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313035646639636432393363623834616639336539383237656131623432623938633532363361343564303839313238643438643265306533353632363334642f646f746e65742f53716c436c69656e74&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/SqlClient\" title=\"GitHub - dotnet/SqlClient: Microsoft.Data.SqlClient provides database connectivity to SQL Server for .NET applications.\">GitHub - dotnet/SqlClient: Microsoft.Data.SqlClient provides database connectivity to SQL Server for .NET applications.</a></div><div class=\"message_embed_description\">Microsoft.Data.SqlClient provides database connectivity to SQL Server for .NET applications. - dotnet/SqlClient</div></div></div>",
        "id": 470690162,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726508732
    },
    {
        "content": "<p>yes.  I'll grab that Windows machine I made the build changes to and send you the patch.</p>",
        "id": 470692981,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726509161
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/Microsoft.Data.SqlClient/netcore/src/Microsoft.Data.SqlClient.csproj b/src/Microsoft.Data.SqlClient/netcore/src/Microsoft.Data.SqlClient.csproj</span>\n<span class=\"gh\">index 494bd0b9..69f908e1 100644</span>\n<span class=\"gd\">--- a/src/Microsoft.Data.SqlClient/netcore/src/Microsoft.Data.SqlClient.csproj</span>\n<span class=\"gi\">+++ b/src/Microsoft.Data.SqlClient/netcore/src/Microsoft.Data.SqlClient.csproj</span>\n<span class=\"gu\">@@ -2,10 +2,9 @@</span>\n<span class=\"w\"> </span>  &lt;PropertyGroup&gt;\n<span class=\"w\"> </span>    &lt;AssemblyName&gt;Microsoft.Data.SqlClient&lt;/AssemblyName&gt;\n<span class=\"w\"> </span>    &lt;TargetFrameworks&gt;net8.0;net6.0&lt;/TargetFrameworks&gt;\n<span class=\"gd\">-    &lt;GeneratePlatformNotSupportedAssemblyMessage Condition=\"'$(OSGroup)' == 'AnyOS'\"&gt;Microsoft.Data.SqlClient is not supported on this platform.&lt;/GeneratePlatformNotSupportedAssemblyMessage&gt;</span>\n<span class=\"w\"> </span>    &lt;OSGroup Condition=\"'$(OSGroup)' == ''\"&gt;$(OS)&lt;/OSGroup&gt;\n<span class=\"gi\">+    &lt;TargetsUnix Condition=\"'$(OSGroup)'!='Unix'\"&gt;true&lt;/TargetsUnix&gt;</span>\n<span class=\"w\"> </span>    &lt;TargetsWindows Condition=\"'$(OSGroup)'=='Windows_NT'\"&gt;true&lt;/TargetsWindows&gt;\n<span class=\"gd\">-    &lt;TargetsUnix Condition=\"'$(OSGroup)'=='Unix'\"&gt;true&lt;/TargetsUnix&gt;</span>\n<span class=\"w\"> </span>    &lt;!-- Allow explicit addition of the Compile files instead of all project files to be included by Default --&gt;\n<span class=\"w\"> </span>    &lt;EnableDefaultCompileItems&gt;false&lt;/EnableDefaultCompileItems&gt;\n<span class=\"w\"> </span>    &lt;TargetGroup Condition=\"'$([MSBuild]::GetTargetFrameworkIdentifier($(TargetFramework)))'=='.NETCoreApp'\"&gt;netcoreapp&lt;/TargetGroup&gt;\n<span class=\"gu\">@@ -37,7 +36,7 @@</span>\n<span class=\"w\"> </span>    &lt;EmbeddedFiles Include=\"$(TargetFrameworkMonikerAssemblyAttributesPath)\" /&gt;\n<span class=\"w\"> </span>  &lt;/ItemGroup&gt;\n<span class=\"w\"> </span>  &lt;!-- Contains common items shared between NetFx and NetCore --&gt;\n<span class=\"gd\">-  &lt;ItemGroup Condition=\"'$(OSGroup)' != 'AnyOS'\"&gt;</span>\n<span class=\"gi\">+  &lt;ItemGroup&gt;</span>\n<span class=\"w\"> </span>    &lt;Compile Include=\"$(CommonPath)\\CoreLib\\System\\Threading\\Tasks\\TaskToApm.cs\"&gt;\n<span class=\"w\"> </span>      &lt;Link&gt;Common\\CoreLib\\System\\Threading\\Tasks\\TaskToApm.cs&lt;/Link&gt;\n<span class=\"w\"> </span>    &lt;/Compile&gt;\n<span class=\"gu\">@@ -874,7 +873,7 @@</span>\n<span class=\"w\"> </span>  &lt;/ItemGroup&gt;\n\n<span class=\"w\"> </span>  &lt;!-- Unix only --&gt;\n<span class=\"gd\">-  &lt;ItemGroup Condition=\"'$(TargetsUnix)' == 'true'\"&gt;</span>\n<span class=\"gi\">+  &lt;ItemGroup Condition=\"'$(TargetsWindows)' != 'true'\"&gt;</span>\n<span class=\"w\"> </span>    &lt;Compile Include=\"$(CommonPath)\\Interop\\Unix\\Interop.Libraries.cs\"&gt;\n<span class=\"w\"> </span>      &lt;Link&gt;Common\\Interop\\Unix\\Interop.Libraries.cs&lt;/Link&gt;\n<span class=\"w\"> </span>    &lt;/Compile&gt;\n</code></pre></div>",
        "id": 470694080,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726509326
    },
    {
        "content": "<p>There's probably a cleaner, better way to do it, but that's what I used.</p>",
        "id": 470694596,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726509401
    },
    {
        "content": "<p>seem on windows I didn't need these changes... was able to pull the library in and compile a small app.  I think these might be needed for building on linux?</p>",
        "id": 470729022,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726516502
    },
    {
        "content": "<p>They are for building for WASI</p>",
        "id": 470729162,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726516519
    },
    {
        "content": "<p>yea, I see now app was building a wasi binary, then when I pulled in the library it stopped for some reason...</p>",
        "id": 470729546,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726516568
    },
    {
        "content": "<p>what was the break point you set for seeing the stack trace?  I am getting <code>Unhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.</code>  I guess this is were I would use that to see where it is throwing</p>",
        "id": 470779362,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726531952
    },
    {
        "content": "<p>btw I am able to build and run with without the patch, unless I am missing something.</p>",
        "id": 470779566,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726532040
    },
    {
        "content": "<p><code>break S_P_CoreLib_System_Runtime_EH__RhpThrowEx</code></p>",
        "id": 470788551,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726534049
    },
    {
        "content": "<p>What was the command you were using to build SQL client and the errors that lead to changing those lines in the csproj?  I seem to be making some progress without those changes.  When you get on later today maybe its worth 30 mins to show you what I have to make sure I am on track?</p>",
        "id": 471021732,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726587908
    },
    {
        "content": "<p>I was using cmd.exe, so I don't think I have shell history, but we can pair up and retrace those steps.  I do remember I had to iterate on the patch before I got it to run all the way to <code>SocketAsyncEngine</code> and fail when trying to populate a thread pool.  If you're seeing failures before it gets to that point, it probably means you need part or all of my patch.</p>\n<p>Want to pair up at 2pm PDT today?  Or else let me know your availability.  I'll be free 2-4pm PDT today.</p>",
        "id": 471039887,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726592586
    },
    {
        "content": "<p>2pm works for me.  running wasmtime on windows is really slow :-/.  I think I am making the same progress you are but should see.  I just set up on linux and getting a whole different set of errors and they are way more expressive</p>",
        "id": 471042024,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726593086
    },
    {
        "content": "<p>I think what I did was build the <code>SqlClient</code> nupkg on Windows, copy it over to my Linux machine, and build and test my app there.  It all <em>should</em> work on Windows, but Linux is just more comfortable and familiar for me.</p>",
        "id": 471042990,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726593326
    },
    {
        "content": "<p>BTW, I'm thoroughly refactoring my <code>dotnet-tls</code> repo so it mirrors (a subset of) the <code>System.Net.Sockets</code> and <code>System.Net.Security</code> APIs, with the goal of making it a drop-in replacement for those assemblies (e.g. for use in <code>Microsoft.Data.SqlClient</code>).</p>",
        "id": 471051313,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726595764
    },
    {
        "content": "<p>So hopefully we won't need to change much code in <code>SqlClient</code> -- just some <code>using</code> statements.</p>",
        "id": 471051414,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726595796
    },
    {
        "content": "<p>just sent you a Teams meeting invite</p>",
        "id": 471093161,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726606850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"471788\">Pavel Šavara</span> <a href=\"#narrow/stream/407028-C.23.2F.2Enet-collaboration/topic/Links.20for.20James/near/469731107\">said</a>:</p>\n<blockquote>\n<p>I just learned that Mono/WASI Net10 SDK and workload is not going to be available soon. So using it from componentize-dotnet is blocked. I don't really understand the details of why, but it's some versioning hell in the product construction.<br>\n<span class=\"user-mention silent\" data-user-id=\"700594\">Larry Ewing</span> could maybe share more. </p>\n<p>That should not prevent me from working on sockets upstream or James from work on SslStream upstream either, but we would have to merge it to NAOT_LLVM first before that would be visible to broader audience. And maybe working on NAOT_LLVM branch directly would be way to go. We will see.</p>\n<p>Mono/WASI in Net9 is broken for other reasons and we are not going to try to fix it, because many of the fixes are only on main branch, which is Net10 now.</p>\n</blockquote>\n<p>The challenge here is that adding a new framework (net10) while in the middle of a release has proved challenging in the past.  I'm feeling better about the potential timeline today than I was last week.  I will keep <span class=\"user-mention\" data-user-id=\"471788\">@Pavel Šavara</span> updated with the status.</p>",
        "id": 471093678,
        "sender_full_name": "Larry Ewing",
        "timestamp": 1726606995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/407028-C.23.2F.2Enet-collaboration/topic/Links.20for.20James/near/471093161\">said</a>:</p>\n<blockquote>\n<p>just sent you a Teams meeting invite</p>\n</blockquote>\n<p>If you could extract a public test case around how the connection is initiated and processed It sounds like there might be alternate solutions?</p>",
        "id": 471110881,
        "sender_full_name": "Larry Ewing",
        "timestamp": 1726612385
    },
    {
        "content": "<blockquote>\n<p>If you could extract a public test case around how the connection is initiated and processed It sounds like there might be alternate solutions?</p>\n</blockquote>\n<p>For context: our goal is to get <code>Microsoft.Data.SqlClient</code> working (with few or no changes) on WASI.  As a stepping stone towards that goal (and as a way of proving the concept), we're temporarily replacing its use of <code>System.Net.Sockets</code> and <code>System.Net.Security</code> with our own minimal alternatives.  That will allow us to prove that WASI (when augmented with the proposed <code>wasi:sockets/tls</code> draft) is capable of supporting this use case.  Once we've done that, we can work on proper WASI support for <code>System.Net.Sockets</code> and <code>System.Net.Security</code> in the .NET runtime (Pavel is making awesome progress on the former, but the latter hasn't been started).  And once <em>that's</em> done, we should be able to make <code>SqlClient</code> work more-or-less unmodified.</p>\n<p>With all that in mind, can you clarify what you mean by your question?  What kind of public test case are you looking for, and what do you mean by \"alternate solutions\"?  Do you mean a different way of approaching the problem of socket and TLS support on WASI?</p>",
        "id": 471112542,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726613136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"625613\">@James Sturtevant</span> I just pushed a bit update to <a href=\"https://github.com/dicej/dotnet-wasi-tls\">https://github.com/dicej/dotnet-wasi-tls</a>, including minimal <code>Dns</code>, <code>TcpClient</code>, and <code>SslStream</code> implementations.  It all compiles fine but won't run until we have a host-side <code>wasi:sockets/tls</code> implementation, which I'll work on tomorrow.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/dotnet-wasi-tls\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/30b62465d3179a1e4be17c6fa913cd8a1903a5a6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633535366533343233623934353066643363666636303866303961306163666236376563396162393930666461626166653030363132346233353166656434302f646963656a2f646f746e65742d776173692d746c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/dotnet-wasi-tls\" title=\"GitHub - dicej/dotnet-wasi-tls\">GitHub - dicej/dotnet-wasi-tls</a></div><div class=\"message_embed_description\">Contribute to dicej/dotnet-wasi-tls development by creating an account on GitHub.</div></div></div>",
        "id": 471116982,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726614777
    },
    {
        "content": "<p>I meant I was curious about how the api was being used outside the wasi case because it sounded like there was some potential to adjust the api usage that wasn't directly related to the wasi work</p>",
        "id": 471117952,
        "sender_full_name": "Larry Ewing",
        "timestamp": 1726614983
    },
    {
        "content": "<p>You mean adjust the API usage in the <code>SqlClient</code> code?  Yes, thanks for reminding me.  At minimum, the \"Async open requests are handled serially\" part of <a href=\"https://github.com/dotnet/SqlClient/discussions/2612\">https://github.com/dotnet/SqlClient/discussions/2612</a> will need to be addressed.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/SqlClient/discussions/2612\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1c1fdca902a61908394daa2a2528c0954bc12917/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633231616133623934646330323233353666303236613265373136373830336132313432363230313731353465343766633863646437653833643436396634652f646f746e65742f53716c436c69656e742f64697363757373696f6e732f32363132&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/SqlClient/discussions/2612\" title=\"Redesign the SqlClient Connection Pool to Improve Performance and Async Support · dotnet SqlClient · Discussion #2612\">Redesign the SqlClient Connection Pool to Improve Performance and Async Support · dotnet SqlClient · Discussion #2612</a></div><div class=\"message_embed_description\">Problem Statement Modern .NET applications interact with Azure SQL server instances which have robust load balancing, scaling, and reliability. However, the current connection pool design does not ...</div></div></div>",
        "id": 471119123,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726615233
    },
    {
        "content": "<p>In the meantime, we <em>can</em> hack around that by adding a synchronous <code>Connect</code> method to my fake <code>TcpClient</code>.  <span class=\"user-mention\" data-user-id=\"471788\">@Pavel Šavara</span> won't let that leak into the real implementation, but I can do what I want in my fake one :)</p>",
        "id": 471119609,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726615339
    },
    {
        "content": "<p>Yes, no need to block on the ideal solution but it sounds like something upstream would like to fix so lets add weight to that.</p>",
        "id": 471120794,
        "sender_full_name": "Larry Ewing",
        "timestamp": 1726615593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> Upgrading 24.04 and using gdb 15.0.50 and now able to set breakpoints plus get much more info in output</p>",
        "id": 471133668,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726621018
    },
    {
        "content": "<p>As promised, I've added a Wasmtime-based host implementation of <code>wasi:sockets/tls</code> to <a href=\"https://github.com/dicej/dotnet-wasi-tls\">https://github.com/dicej/dotnet-wasi-tls</a>.  I'm able to send HTTPS GET requests to arbitrary websites and print the responses.</p>\n<p><span class=\"user-mention\" data-user-id=\"625613\">@James Sturtevant</span> maybe we could pair up tomorrow on getting SqlClient to use this?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/dotnet-wasi-tls\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/41fb40db596bccf9d4fedfa67184dbd8ad89fcdb/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313232366565313238646661393965393764613265663066366437363333376337653030333864396434643964633130366464383330646365643137343332332f646963656a2f646f746e65742d776173692d746c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/dotnet-wasi-tls\" title=\"GitHub - dicej/dotnet-wasi-tls\">GitHub - dicej/dotnet-wasi-tls</a></div><div class=\"message_embed_description\">Contribute to dicej/dotnet-wasi-tls development by creating an account on GitHub.</div></div></div>",
        "id": 471349471,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726694010
    },
    {
        "content": "<p>sure, I've got the sqlclient mostly wired in with wasi-tls.  working on the getting tcp in fully</p>",
        "id": 471353601,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726696022
    },
    {
        "content": "<p>Just got <code>#2  0x00007ffeaad500e3 in S_P_CoreLib_Internal_Runtime_CompilerHelpers_ThrowHelpers__ThrowMissingMethodException (id=MissingMethod, methodName=...)\n#3  0x00007ffeaf903410 in Microsoft_Data_SqlClient_WasiEventLoop___Register_g__CallRegister_1_0 (var0=&lt;optimized out&gt;, var1=&lt;optimized out&gt;, var2=&lt;optimized out&gt;, var3=&lt;optimized out&gt;) at .tmpgxmt8A.wasm:79957694</code></p>",
        "id": 471353636,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726696037
    },
    {
        "content": "<p>Hmm, looks like <code>UnsafeAccessor</code> can't find the <code>Thread.RegisterWasiPollableHandle</code> method in the runtime.  Which branch of runtimelab did you build from?</p>",
        "id": 471354476,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726696410
    },
    {
        "content": "<p>actually looks like I dropped tcp client before done connecting...</p>",
        "id": 471354610,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726696459
    },
    {
        "content": "<p>I am using the released version right now, as you provided DNS the impl</p>",
        "id": 471354699,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726696509
    },
    {
        "content": "<p>ok, I'm still using my <a href=\"https://github.com/dotnet/runtimelab/pull/2614\">https://github.com/dotnet/runtimelab/pull/2614</a> branch; I haven't kept track of which changes are where, but my branch is probably the safest one to use right now since that's what I'm testing.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/runtimelab/pull/2614\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0a09ee30b9b889d1271caaae32cf20a761a83d95/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313361373731363339313161653535626230663961643236643935356535666362666665663034393831386633346165303361346132666439303436393630632f646f746e65742f72756e74696d656c61622f70756c6c2f32363134&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/runtimelab/pull/2614\" title=\"[NativeAOT-LLVM] support `System.Net.Http.HttpClient` on WASIp2 by dicej · Pull Request #2614 · dotnet/runtimelab\">[NativeAOT-LLVM] support `System.Net.Http.HttpClient` on WASIp2 by dicej · Pull Request #2614 · dotnet/runtimelab</a></div><div class=\"message_embed_description\">This adds WasiHttpHandler, a new implementation of HttpMessageHandler based on\nwasi:http/outgoing-handler, plus tweaks to System.Threading to allow async Tasks to work in a single-threaded context,...</div></div></div>",
        "id": 471354880,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726696590
    },
    {
        "content": "<p>fair enough, I didn't have it building this morning when I started so was going till I ran into something  but it does seem that I am missing that register.  Will try it with the packages I built from your branch</p>",
        "id": 471355560,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726696892
    },
    {
        "content": "<p>FYI, I've added instructions to the <code>dotnet-wasi-tls</code> repo README.md that tells you how to download pre-built packages for various platforms, if that's easier.</p>",
        "id": 471355835,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726697007
    },
    {
        "content": "<p>using those packages did the trick.  Made it alittle further!</p>",
        "id": 471359001,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726698458
    },
    {
        "content": "<p>Had to make a few changes to wasi-tls host world but I've got it connecting.  The TLS handshake is failing with EOF, going to try a few things this morning but if you want to pair that would be helpful!</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Microsoft</span><span class=\"p\">.</span><span class=\"n\">Data</span><span class=\"p\">.</span><span class=\"n\">SqlClient</span><span class=\"p\">.</span><span class=\"n\">SqlException</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mh\">0x80131904</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"n\">connection</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">successfully</span><span class=\"w\"> </span><span class=\"n\">established</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">server</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">then</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">occurred</span><span class=\"w\"> </span><span class=\"n\">during</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">login</span><span class=\"w\"> </span><span class=\"n\">handshake</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">SSL</span><span class=\"w\"> </span><span class=\"n\">Provider</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Encryption</span><span class=\"p\">(</span><span class=\"n\">ssl</span><span class=\"o\">/</span><span class=\"n\">tls</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">handshake</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"o\">--</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">System</span><span class=\"p\">.</span><span class=\"n\">AggregateException</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">One</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"w\"> </span><span class=\"n\">occurred</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">TLS</span><span class=\"w\"> </span><span class=\"n\">handshake</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">hostside</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ImportsWorld</span><span class=\"p\">.</span><span class=\"nb\">None</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 471492619,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726754229
    },
    {
        "content": "<p>Awesome!  I've got meetings until 9am PDT, but free after that.  When works best for you?</p>",
        "id": 471493153,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726754378
    },
    {
        "content": "<p>That time works for me</p>",
        "id": 471512986,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726760096
    },
    {
        "content": "<p>cargo run --release --manifest-path host/Cargo.toml ../wasi-sql/bin/Debug/net9.0/wasi-wasm/native/sqlclient-wasi.wasm<br>\nFinished <code>release</code> profile [optimized] target(s) in 0.22s<br>\nRunning <code>host/target/release/host ../wasi-sql/bin/Debug/net9.0/wasi-wasm/native/sqlclient-wasi.wasm</code><br>\nHello from WASI!<br>\nStream creation<br>\nStream creation<br>\nServerVersion: 12.00.5688<br>\nState: Open<br>\n1<br>\n2<br>\ngoodbye</p>",
        "id": 471813725,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726859997
    },
    {
        "content": "<p>Connected <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 471813863,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726860040
    },
    {
        "content": "<p>That's awesome!  Did you have to do anything else besides set up a server that could accept \"Encrypt=strict\" connections?</p>",
        "id": 471823757,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726862754
    },
    {
        "content": "<p>and fix the DNS look up :-)  but other than that it worked</p>",
        "id": 471825945,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726863438
    },
    {
        "content": "<p>saw your comments and will address Monday.  Do we want to sync up early next week to talk next steps too?</p>",
        "id": 471854768,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1726877460
    },
    {
        "content": "<p>Yup; just sent you and Pavel an invite.</p>",
        "id": 471861468,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726882537
    },
    {
        "content": "<p>effing brilliant here, all of you</p>",
        "id": 472188449,
        "sender_full_name": "Ralph",
        "timestamp": 1727087123
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/zVIJBW-pChdjJMOJ8bCzydyM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/zVIJBW-pChdjJMOJ8bCzydyM/image.png\" title=\"image.png\"><img data-original-dimensions=\"1193x522\" src=\"/user_uploads/thumbnail/15107/zVIJBW-pChdjJMOJ8bCzydyM/image.png/840x560.webp\"></a></div>",
        "id": 472234193,
        "sender_full_name": "Pavel Šavara",
        "timestamp": 1727098386
    },
    {
        "content": "<p>I had to disable many, many tests ... but this will unblock us for further adventure</p>",
        "id": 472234345,
        "sender_full_name": "Pavel Šavara",
        "timestamp": 1727098427
    },
    {
        "content": "<p>I am back and around for rest of the day, if want to have another quick sync</p>",
        "id": 472277863,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1727108968
    }
]