[
    {
        "content": "<p>Hi all.  I've been working on creating a new <a href=\"https://github.com/fermyon/spin\">Spin</a> .NET SDK that includes pre-generated bindings for one or more Spin WIT worlds, plus some hand-written helper code on top of those bindings to make the API more ergonomic to use.</p>\n<p>One question that's come up (both with this SDK and the SDKs we've made for other languages) is how to handle exports.  The SDK itself shouldn't export anything -- even if the world it is targeting has exports; the application using the SDK is the one that should implement any exports.</p>\n<p>You could argue that the SDK could implement the exports and then, when the host calls an export, the SDK could call a callback registered by the application, but that won't work because the application never has a chance to register such a callback -- no guest code is run until the first export is called.  Possibly this could be done via a core Wasm <code>start</code> function provided by the application, but I'm not sure how to tell the NativeAOT-LLVM ILC to emit such a function.  I'll ask around about that if nobody here knows.</p>\n<p>Assuming we can't use a <code>start</code> function to handle this, I think the next best option is to add an option to <code>wit-bindgen</code> telling it to split binding generation into two parts: one that generates all the types and imports, and another that generates the exports, reusing the types generated earlier.  That way, we can put the types and imports in the SDK package, but leave it to the application to provide the exports.  Once we've added such a feature to <code>wit-bindgen</code>, we'll also want to expose it somehow in <code>componentize-dotnet</code>.</p>\n<p>Does that sound reasonable?  Or are there other ways to tackle this that I haven't thought of?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/fermyon/spin\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/38db72dc2007ef51800f9d42c00ec7f9e4d64da6/68747470733a2f2f7265706f7369746f72792d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3432333637393636342f32306534383863362d623961652d343831622d393063332d633131313138643565663238&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/fermyon/spin\" title=\"GitHub - fermyon/spin: Spin is the open source developer tool for building and running serverless applications powered by WebAssembly.\">GitHub - fermyon/spin: Spin is the open source developer tool for building and running serverless applications powered by WebAssembly.</a></div><div class=\"message_embed_description\">Spin is the open source developer tool for building and running serverless applications powered by WebAssembly. - fermyon/spin</div></div></div>",
        "id": 455383280,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722434874
    },
    {
        "content": "<p>Someone on Discord suggested using a <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/module-initializers\">ModuleInitializer</a> to register callbacks.  I'll try that.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/module-initializers\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b391ffb5bbb07ec8f5a5d07ecf15c20cfdd88b70/68747470733a2f2f6c6561726e2e6d6963726f736f66742e636f6d2f646f746e65742f6d656469612f646f746e65742d6c6f676f2e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/module-initializers\" title=\"Module initializers - C# feature specifications\">Module initializers - C# feature specifications</a></div><div class=\"message_embed_description\">This feature specification describes how to declare module initializers, which are methods called by the runtime when a module, or assembly, is loaded.</div></div></div>",
        "id": 455395463,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722438091
    },
    {
        "content": "<p>does wasm_ld support the start function ?  I seem to remember looking into this before</p>",
        "id": 455449356,
        "sender_full_name": "Scott Waye",
        "timestamp": 1722448590
    },
    {
        "content": "<p>Per the discussion starting <a href=\"https://discord.com/channels/732297728826277939/732297825731215521/1268304886689173515\">here</a>, we decided to use the split bindings approach.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://discord.com/channels/732297728826277939/732297825731215521/1268304886689173515\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/29a8c83fbc739f313cf0caf7112e41651b8deb75/68747470733a2f2f63646e2e646973636f72646170702e636f6d2f6173736574732f6f675f696d675f646973636f72645f686f6d652e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://discord.com/channels/732297728826277939/732297825731215521/1268304886689173515\" title=\"Discord - Group Chat That’s All Fun &amp; Games\">Discord - Group Chat That’s All Fun &amp; Games</a></div><div class=\"message_embed_description\">Discord is great for playing games and chilling with friends, or even building a worldwide community. Customize your own space to talk, play, and hang out.</div></div></div>",
        "id": 455488009,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722461196
    }
]