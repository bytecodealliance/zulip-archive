[
    {
        "content": "<p>Chrome has now enabled GC by default so we should definitely start looking into GC for C# as well<br>\n<a href=\"https://developer.chrome.com/blog/wasmgc/\">https://developer.chrome.com/blog/wasmgc/</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://developer.chrome.com/blog/wasmgc/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0f3d4785c4ad3f7d1dacec5e6d6c8cf4c37e8c40\\/68747470733a2f2f77642e696d6769782e6e65742f696d6167652f38576254444e72684c735530456c383066724d42474534654d4344332f676335557948466d31433474504151433644316f2e706e673f6175746f3d666f726d617426773d31353231)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://developer.chrome.com/blog/wasmgc/\" title=\"WebAssembly Garbage Collection (WasmGC) now enabled by default in Chrome - Chrome for Developers\">WebAssembly Garbage Collection (WasmGC) now enabled by default in Chrome - Chrome for Developers</a></div><div class=\"message_embed_description\">There are two types of programming languages: garbage-collected programming languages and programming languages that require manual memory management. This article explains how thanks to WebAssembly Garbage Collection, short WasmGC, garbage-collected languages can be ported to WebAssembly.\n</div></div></div>",
        "id": 399685192,
        "sender_full_name": "Timmy Silesmo",
        "timestamp": 1698829672
    },
    {
        "content": "<p>unfortunately the MVP for Wasm GC is not up to the job for dotnet GC, neither mono nor CoreCLR.  I'll look for the details.</p>",
        "id": 399933113,
        "sender_full_name": "Scott Waye",
        "timestamp": 1698930690
    },
    {
        "content": "<p><a href=\"https://github.com/WebAssembly/gc/issues/77\">https://github.com/WebAssembly/gc/issues/77</a>   (and interior pointers)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/gc/issues/77\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f306495831a25e6863efe8b8f87affefa1555215\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323664353864376461653765656635386461396337633634313831393332353265383338376238303762386438326365633961623335633639333335643062642f576562417373656d626c792f67632f6973737565732f3737)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/gc/issues/77\" title=\".NET Notes 路 Issue #77 路 WebAssembly/gc\">.NET Notes 路 Issue #77 路 WebAssembly/gc</a></div><div class=\"message_embed_description\">I was asked to add some notes based on the needs of Microsoft .NET implementations wrt GC in WebAssembly. Object layout .NET objects in memory usually consist of a header followed by object data. T...</div></div></div>",
        "id": 399933852,
        "sender_full_name": "Scott Waye",
        "timestamp": 1698930956
    },
    {
        "content": "<p>Hm, that's unfortunate. Yes please have a look for the details <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 399937873,
        "sender_full_name": "Timmy Silesmo",
        "timestamp": 1698932270
    },
    {
        "content": "<p>that issue pretty much covers the problems, some issues will be tackled post MVP, but others (finalizers) are a bit stuck.</p>",
        "id": 399950551,
        "sender_full_name": "Scott Waye",
        "timestamp": 1698935533
    }
]