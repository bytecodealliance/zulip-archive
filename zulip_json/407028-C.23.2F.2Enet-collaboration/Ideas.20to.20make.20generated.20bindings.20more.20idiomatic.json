[
    {
        "content": "<p>I was chatting with Steve Sanderson the other day and he remarked that <code>wit-bindgen</code> currently generates and uses <code>Result</code> and <code>Option</code> types in a pretty literal translation of the WIT input, forcing the application programmer to use e.g. <code>IsOk</code>/<code>AsOk</code> to extract the value, which is awkward.  I think I've mentioned before that bindings generators for high level languages which have exception handling should (usually) translate <code>result</code> returns types into functions which return the <code>ok</code> type and throw the <code>err</code> type as an exception (or as a field of an appropriate exception type).  Likewise, languages with nullable types should use them to represent <code>option</code> types.  You do have to be careful about nested types (e.g. <code>result&lt;result&lt;T, E1&gt;, E2&gt;</code> and <code>option&lt;option&lt;T&gt;&gt;</code> to avoid ambiguity, and sometimes <code>result</code> is used as a field or parameter, so you do end up generating <code>Result</code> and <code>Option</code> types for use in those cases, but in most cases you can do the idiomatic thing.</p>\n<p>I've done both those things in the <code>componentize-py</code> bindings generator for Python and would be happy to do the same for the C# generator.  Any concerns about that?  If not, I'll open an issue on the <code>wit-bindgen</code> repo and start working on a PR.</p>",
        "id": 441773206,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717179321
    },
    {
        "content": "<p>Assuming we're agreed that's the way to go, one thing to determine is how to throw <code>err</code> types as exceptions.  Since a WIT file can use any arbitrary type as the <code>err</code> type of a <code>result</code> (including primitives like <code>int</code> and <code>string</code>, or even no type at all), we'd need to decide the most idiomatic way to throw them.  Maybe create a <code>WitException&lt;T&gt;: Exception</code> type that works for any <code>T</code>?  Happy to defer to the C# veterans on this.</p>",
        "id": 441773908,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717179549
    },
    {
        "content": "<p>I am onboard, That sounds like a more idiomatic approach to handling errors in C# in the majority of cases.  We can discuss it a bit more in tomorrows meeting?  <span class=\"user-mention\" data-user-id=\"556206\">@Timmy Silesmo</span> <span class=\"user-mention\" data-user-id=\"395878\">@Scott Waye</span></p>",
        "id": 442317574,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1717434486
    },
    {
        "content": "<p>Let's discuss it tomorrow!</p>",
        "id": 442320452,
        "sender_full_name": "Timmy Silesmo",
        "timestamp": 1717435118
    },
    {
        "content": "<p>I opened an issue for this: <a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/964\">https://github.com/bytecodealliance/wit-bindgen/issues/964</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/issues/964\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9a9c1e5d768d23ca53c461ccc86de86f7e3ad04d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393434666161373066353736363539326261383735666265376531646338346537386564353865663038373939653565656264656664643739363532333331342f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f6973737565732f393634&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/964\" title=\"Make C# bindings more ergonomic · Issue #964 · bytecodealliance/wit-bindgen\">Make C# bindings more ergonomic · Issue #964 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">Currently, the C# generator generates and uses Result and Option types in a pretty literal translation of the WIT input, forcing the application programmer to use e.g. IsOk/AsOk to extract the valu...</div></div></div>",
        "id": 442605379,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717528224
    },
    {
        "content": "<p>Finally got CI passing for <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/968\">https://github.com/bytecodealliance/wit-bindgen/pull/968</a>.  I'd love to get feedback from the veteran C# devs.  I've got two more patches in line behind that PR, one to use nullable types for <code>option&lt;T&gt;</code> and another to clean up some code and style warnings I hit when working on <a href=\"https://github.com/dotnet/runtimelab/pull/2614\">https://github.com/dotnet/runtimelab/pull/2614</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/968\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/fe20e7a4136197ee3ae7edcfb6d5f1715159cdf1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346362303363303535343339663838636366313639313036353134393166353335653237643565646539383531373865333765626361623366346666373733372f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f393638&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/968\" title=\"C#: use exceptions for functions returning `result` by dicej · Pull Request #968 · bytecodealliance/wit-bindgen\">C#: use exceptions for functions returning `result` by dicej · Pull Request #968 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This addresses part of #964.\nFor WIT functions returning result&lt;T, E&gt;, we now generate methods which return T and throw WitException such that the E value may be retrieved using WitException.Value....</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/runtimelab/pull/2614\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7e54978d8484bd579b7b46d453e1827c438f6cc2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323664366166393433313462633037643332663239373262383839613966343662653336353435376635616135373863303065633238306135643436393934612f646f746e65742f72756e74696d656c61622f70756c6c2f32363134&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/runtimelab/pull/2614\" title=\"[NativeAOT-LLVM] support `System.Net.Http.HttpClient` on WASIp2 by dicej · Pull Request #2614 · dotnet/runtimelab\">[NativeAOT-LLVM] support `System.Net.Http.HttpClient` on WASIp2 by dicej · Pull Request #2614 · dotnet/runtimelab</a></div><div class=\"message_embed_description\">This adds WasiHttpHandler, a new implementation of HttpMessageHandler based on\nwasi:http/outgoing-handler, plus tweaks to System.Threading to allow async Tasks to work in a single-threaded context,...</div></div></div>",
        "id": 445157569,
        "sender_full_name": "Joel Dice",
        "timestamp": 1718637287
    },
    {
        "content": "<p>I've merged the above PR and opened <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/977\">https://github.com/bytecodealliance/wit-bindgen/pull/977</a> to cover <code>option</code> types.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/977\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e15afbe7dc437a2e8c9d95ce0953cc608d3f006c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373434653532316430363663633566653939373061666339663137626563386666313235363935396334643935326661636532616364333162616137383730342f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f393737&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/977\" title=\"C#: use nullable types for non-nested options by dicej · Pull Request #977 · bytecodealliance/wit-bindgen\">C#: use nullable types for non-nested options by dicej · Pull Request #977 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">We now generate bindings which use nullable types (e.g. uint?) to represent non-nested option types.  Nested options, such as option&lt;option&lt;T&gt;&gt; still use the Option class except for the innermost o...</div></div></div>",
        "id": 445472611,
        "sender_full_name": "Joel Dice",
        "timestamp": 1718749754
    }
]