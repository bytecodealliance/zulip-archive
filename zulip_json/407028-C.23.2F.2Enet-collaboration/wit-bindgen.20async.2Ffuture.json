[
    {
        "content": "<p>Hi, is it too early to start adding support for async and future in the c# code gen ?  I see there are tests already in the main branch?</p>",
        "id": 529702573,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753033043
    },
    {
        "content": "<p>No, not too early -- now is a great time to get started.  I was planning to work on it myself but haven't had a chance yet.  Happy to answer any ABI-related questions if you're ready to take a stab at it.</p>",
        "id": 529711960,
        "sender_full_name": "Joel Dice",
        "timestamp": 1753044338
    },
    {
        "content": "<p>Thanks I'll make a start.</p>",
        "id": 529912473,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753110872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> hi, might take me a few questions to get in the right space with this.  For <br>\n<a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d/tests/codegen/futures.wit#L6\">https://github.com/bytecodealliance/wit-bindgen/blob/454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d/tests/codegen/futures.wit#L6</a><br>\nWe have a function that takes a future as a parameter.  The import of this function sounds like it will in c#, take a <code>Task</code> and lower it to an i32.  But what can the receiver of this <code>i32</code> do with it?  I would expect that it could await the future, but how would it do that?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/blob/454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d/tests/codegen/futures.wit#L6\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5d72386f0a8b57f97c674ad0b67fa6da7778b551/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396163653961306337313835616239626564663338653030393039396439613432376465393362323535343839323364393232336130303530393565366337322f62797465636f6465616c6c69616e63652f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d/tests/codegen/futures.wit#L6\" title=\"wit-bindgen/tests/codegen/futures.wit at 454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d · bytecodealliance/wit-bindgen\">wit-bindgen/tests/codegen/futures.wit at 454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - bytecodealliance/wit-bindgen</div></div></div>",
        "id": 530246069,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753232644
    },
    {
        "content": "<p>For this single import I think I also need to provide a couple of extra functions , waitable-set-wait, that I must call before the calling the import, and provide a future-poll that the runtime can call to check the state of the future, is that sort of right?</p>",
        "id": 530250399,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753236408
    },
    {
        "content": "<p>Think I've confused <code>future</code> and <code>async</code>  I will start with just <code>async</code> as that looks simpler</p>",
        "id": 530666615,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753401651
    },
    {
        "content": "<p>Sorry for the late reply -- I was out on vacation for a few days.</p>\n<p>To call an imported function that takes a <code>future</code>, the guest needs to first call <code>future.new</code>, which returns a pair of <code>i32</code> handles -- one representing the writable end (roughly equivalent to a <code>TaskCompletionSource</code>) and the other representing the readable end (roughly equivalent to the <code>Task</code> corresponding to the <code>TaskCompletionSource</code>).  Then it can pass the readable end to the function and later write a value to the writable end when such a value is available.</p>\n<p>In the Rust bindings, we represent the writable end as a <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d/crates/guest-rust/rt/src/async_support/future_support.rs#L208\">FutureWriter</a> and the readable end as a <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d/crates/guest-rust/rt/src/async_support/future_support.rs#L535\">FutureReader</a>, which implements the <code>std::future::Future</code> trait, allowing it to be <code>await</code>ed.</p>\n<p>Anyway, I agree that you'll probably want to start with just supporting the async import and export ABIs before moving on to <code>future</code> and <code>stream</code> support.  Note that a call to an async-lowered import will either return a result immediately or return <code>BLOCKED</code> with a subtask handle representing the status of the call.  That handle may be added to a <code>waitable-set</code>, which in turn may be waited on using either <code>waitable-set.wait</code> or by returning <code>CALLBACK_CODE_WAIT</code> from the async-lifted-with-callback export function that the host originally called the guest on.  The latter is generally preferable when using the callback-based ABI, since it allows the host to make other concurrent calls to the guest.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/blob/454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d/crates/guest-rust/rt/src/async_support/future_support.rs#L208\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5d72386f0a8b57f97c674ad0b67fa6da7778b551/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396163653961306337313835616239626564663338653030393039396439613432376465393362323535343839323364393232336130303530393565366337322f62797465636f6465616c6c69616e63652f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d/crates/guest-rust/rt/src/async_support/future_support.rs#L208\" title=\"wit-bindgen/crates/guest-rust/rt/src/async_support/future_support.rs at 454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d · bytecodealliance/wit-bindgen\">wit-bindgen/crates/guest-rust/rt/src/async_support/future_support.rs at 454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - bytecodealliance/wit-bindgen</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/blob/454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d/crates/guest-rust/rt/src/async_support/future_support.rs#L535\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5d72386f0a8b57f97c674ad0b67fa6da7778b551/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396163653961306337313835616239626564663338653030393039396439613432376465393362323535343839323364393232336130303530393565366337322f62797465636f6465616c6c69616e63652f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d/crates/guest-rust/rt/src/async_support/future_support.rs#L535\" title=\"wit-bindgen/crates/guest-rust/rt/src/async_support/future_support.rs at 454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d · bytecodealliance/wit-bindgen\">wit-bindgen/crates/guest-rust/rt/src/async_support/future_support.rs at 454d6885b5b54adb3601a9b80ca9ff64f6ed7b8d · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - bytecodealliance/wit-bindgen</div></div></div>",
        "id": 530792807,
        "sender_full_name": "Joel Dice",
        "timestamp": 1753455272
    },
    {
        "content": "<p>For every async function we generate a <code>[async-lift]....</code> and a <code>[callback][async-lift]</code> for those 2 scenarios you describe ?</p>",
        "id": 530865850,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753487354
    },
    {
        "content": "<p>on the export side I'm looking at first</p>",
        "id": 530866140,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753487546
    },
    {
        "content": "<p>Yes, and the signature of the <code>[async-lift]...</code> function will take the same set of parameters the sync version would, but return an <code>i32</code> representing the \"callback code\".  The <code>[callback][async-lift]...</code> function will take 3 <code>i32</code> parameters (the first is the event type, and the meaning of the rest depends on the event type) and return an <code>i32</code> callback code.  Either the <code>[async-lift]...</code> or the <code>[callback][async-lift]...</code> function will return its value to the caller by calling the <code>task.return</code> function, whose signature depends on the WIT-level return type of the function being exported.</p>\n<p>One way to get a feel for all this is to examine the output of the C bindings generator for various async-lifted exports.</p>",
        "id": 530920327,
        "sender_full_name": "Joel Dice",
        "timestamp": 1753522096
    },
    {
        "content": "<p>Thanks very much, I should be able to get the first tests passing from here.</p>",
        "id": 530946288,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753536116
    },
    {
        "content": "<p>are you using a locally built clang to get support for <code>async</code> in wit ?</p>",
        "id": 530990707,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753557606
    },
    {
        "content": "<p>Ive got</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">github</span><span class=\"err\">\\</span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"err\">\\</span><span class=\"n\">target</span><span class=\"err\">\\</span><span class=\"n\">artifacts</span><span class=\"err\">\\</span><span class=\"n\">simple</span><span class=\"o\">-</span><span class=\"n\">import</span><span class=\"o\">-</span><span class=\"n\">params</span><span class=\"o\">-</span><span class=\"n\">results</span><span class=\"err\">\\</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">csharp</span><span class=\"err\">\\</span><span class=\"n\">bindings</span><span class=\"o\">&gt;</span><span class=\"s\">\"c:\\github\\wasi-sdk25/bin/clang\"</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">obj</span><span class=\"err\">\\</span><span class=\"n\">Debug</span><span class=\"err\">\\</span><span class=\"n\">net9</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">\\</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"err\">\\</span><span class=\"n\">native</span><span class=\"err\">\\</span><span class=\"n\">link</span><span class=\"p\">.</span><span class=\"n\">rsp</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">error: unable to add component type \"</span><span class=\"n\">TestWorld_component_type</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"s\">\"</span>\n\n<span class=\"s\">Caused by:</span>\n<span class=\"s\">    0: expected keyword `func`, found an identifier</span>\n<span class=\"s\">            --&gt; TestWorld_component_type.wit:4:17</span>\n<span class=\"s\">             |</span>\n<span class=\"s\">           4 |   one-argument: async func(x: u32);</span>\n<span class=\"s\">             |                 ^</span>\n<span class=\"s\">clang: error: linker command failed with exit code 1 (use -v to see invocation)</span>\n</code></pre></div>",
        "id": 530990779,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753557640
    },
    {
        "content": "<p>I believe clang is calling <code>wasm-component-ld</code>, which is producing that error.  WASI-SDK's version of <code>wasm-component-ld</code> isn't new enough to understand async, so you'll want to replace the one in WASI-SDK with <a href=\"https://github.com/bytecodealliance/wasm-component-ld/releases/tag/v0.5.15\">the latest release</a> (which isn't using the very latest wasm-tools, but it's only one version behind, so should be new enough).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-component-ld/releases/tag/v0.5.15\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/71ec5ddeb036b8a411e4a855bea90be9892fcc01/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646163366639663663386166613937316461663934393935333730353331356461396138346131306663363561386664333534333735616262383961303135322f62797465636f6465616c6c69616e63652f7761736d2d636f6d706f6e656e742d6c642f72656c65617365732f7461672f76302e352e3135&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-component-ld/releases/tag/v0.5.15\" title=\"Release v0.5.15 · bytecodealliance/wasm-component-ld\">Release v0.5.15 · bytecodealliance/wasm-component-ld</a></div><div class=\"message_embed_description\">Command line linker for creating WebAssembly components - Release v0.5.15 · bytecodealliance/wasm-component-ld</div></div></div>",
        "id": 530991699,
        "sender_full_name": "Joel Dice",
        "timestamp": 1753558099
    },
    {
        "content": "<p>I've been using <code>wasm-tools</code> directly to convert modules to components and/or embed component type custom sections, so I haven't tried using <code>wasm-component-ld</code> yet -- hopefully it should just work.</p>",
        "id": 530991887,
        "sender_full_name": "Joel Dice",
        "timestamp": 1753558189
    },
    {
        "content": "<p>lets see :-)</p>",
        "id": 530991946,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753558213
    },
    {
        "content": "<p>that links at least.  What is the significance of <code>[export]</code> in this c<br>\n__attribute__((__import_module__(\"[export]a:b/i\"), __import_name__(\"[task-return][async]one-argument\")))</p>",
        "id": 530995760,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753560116
    },
    {
        "content": "<p>I understand that this is the callback (task-return) for returning the async result, so it needs some specially handling by the linker I guess.</p>",
        "id": 530996303,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753560376
    },
    {
        "content": "<p>yeah, that's just the convention we made up and which <code>wit-component</code> recognizes as the import module to expect the task-return function to be imported from.  We use the <code>[export]</code> prefix to indicate that, although this is an import, we're doing the import on behalf of a specific exported function.</p>",
        "id": 530998450,
        "sender_full_name": "Joel Dice",
        "timestamp": 1753561455
    },
    {
        "content": "<p>thanks, this can all wait until Monday, I'm just asking today.  I have this error</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">------</span><span class=\"w\"> </span><span class=\"n\">Failure</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">simple</span><span class=\"o\">-</span><span class=\"n\">import</span><span class=\"o\">-</span><span class=\"n\">params</span><span class=\"o\">-</span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">--------</span>\n<span class=\"w\">  </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">test</span>\n<span class=\"w\">  </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">tests</span><span class=\"err\">\\</span><span class=\"n\">runtime</span><span class=\"o\">-</span><span class=\"k\">async</span><span class=\"err\">\\</span><span class=\"k\">async</span><span class=\"err\">\\</span><span class=\"n\">simple</span><span class=\"o\">-</span><span class=\"n\">import</span><span class=\"o\">-</span><span class=\"n\">params</span><span class=\"o\">-</span><span class=\"n\">results</span><span class=\"err\">\\</span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">cs</span>\n<span class=\"w\">  </span><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"s\">\"tests</span><span class=\"se\">\\\\</span><span class=\"s\">runtime-async</span><span class=\"se\">\\\\</span><span class=\"s\">async</span><span class=\"se\">\\\\</span><span class=\"s\">simple-import-params-results</span><span class=\"se\">\\\\</span><span class=\"s\">test.cs\"</span>\n\n<span class=\"w\">  </span><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">compiler</span><span class=\"w\"> </span><span class=\"n\">produced</span><span class=\"w\"> </span><span class=\"n\">invalid</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"s\">\"C:</span><span class=\"se\">\\\\</span><span class=\"s\">github</span><span class=\"se\">\\\\</span><span class=\"s\">wit-bindgen</span><span class=\"se\">\\\\</span><span class=\"s\">.</span><span class=\"se\">\\\\</span><span class=\"s\">target</span><span class=\"se\">\\\\</span><span class=\"s\">artifacts</span><span class=\"se\">\\\\</span><span class=\"s\">simple-import-params-results</span><span class=\"se\">\\\\</span><span class=\"s\">test-csharp.wasm\"</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">lowered</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[]</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">I32</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">140</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0xfdd769</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"w\"> </span><span class=\"n\">FAILED</span>\n</code></pre></div>\n<p>Which seems like I've got the <code>[async-lower]</code> or <code>[async-lift]</code> wrong, but they are both <code>int32 (int32)</code> for a <code>void</code> async that takes an <code>int32</code> which I think is right and the same as the c code gen.  Is there any modification of signatures that goes on <code>wasm-component-ld</code> or <code>wasmtime</code> ?</p>",
        "id": 531046891,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753584606
    },
    {
        "content": "<p>its a bit weird becuse function 140 is unrelatead</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"s\">\"Thread::ResetCachedTransitionFrame()\"</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">140</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 531183329,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753638569
    },
    {
        "content": "<p>oh, Im reading the <code>alias</code> wrong, but I still don't understand how this works.  The core function for this needs to return the callback code so it will have a result type of <code>i32</code>.  Is it the <code>canon lift</code> on the alias that is incorrect perhaps</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">49</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"x\"</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"s\">\"[async-lift]a:b/i#[async]one-argument\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">140</span><span class=\"p\">;)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">41</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"mi\">49</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"n\">lift</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">140</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"x\"</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"import-func-one-argument\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"x\"</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"[async]one-argument\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">20</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"s\">\"import-func-one-argument\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">41</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 531218892,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753652958
    },
    {
        "content": "<p>I' m going to dig further into wasm-component-ld as I suspect something there currently.  I'm probably wrong, but need to see if what you do , generating the sections manually, fixes things</p>",
        "id": 531224126,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753655148
    },
    {
        "content": "<p>If you can point me to a branch with your changes and instructions for reproducing the issue, I can take a look.</p>",
        "id": 531378514,
        "sender_full_name": "Joel Dice",
        "timestamp": 1753711221
    },
    {
        "content": "<p>Thanks very much, I wonder if its because I've got 2 wits in the link, haven't investigated that yet.<br>\n<a href=\"https://github.com/yowl/cs-wit-bindgen/tree/csharp-async-simple\">https://github.com/yowl/cs-wit-bindgen/tree/csharp-async-simple</a></p>\n<p>Download wasi sdk 25 and replace wasm-component-ld, Im using a locally built one from main yesterday.<br>\nThen <code>cargo build</code><br>\nand  </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">languages</span><span class=\"w\"> </span><span class=\"n\">csharp</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"err\">\\</span><span class=\"n\">runtime</span><span class=\"o\">-</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">artifacts</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"err\">\\</span><span class=\"n\">target</span><span class=\"err\">\\</span><span class=\"n\">artifacts</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"o\">-</span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"err\">\\</span><span class=\"n\">crates</span><span class=\"err\">\\</span><span class=\"n\">guest</span><span class=\"o\">-</span><span class=\"n\">rust</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">runner</span><span class=\"w\"> </span><span class=\"s\">\"wasmtime -W component-model-async\"</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/yowl/cs-wit-bindgen/tree/csharp-async-simple\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/938da4ff5fbc0b4206866958751d15811846828f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396337373635363035343461666431323461306331653065633331616262626234363632336336356333636432353431366534623738646331633837343033372f796f776c2f63732d7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/yowl/cs-wit-bindgen/tree/csharp-async-simple\" title=\"GitHub - yowl/cs-wit-bindgen at csharp-async-simple\">GitHub - yowl/cs-wit-bindgen at csharp-async-simple</a></div><div class=\"message_embed_description\">Testing wit-bindgen for c# and NativeAOT-LLVM. Contribute to yowl/cs-wit-bindgen development by creating an account on GitHub.</div></div></div>",
        "id": 531382851,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753712321
    },
    {
        "content": "<p>Thanks.  I've got a bunch of meetings this morning, but I'll dig in later today.</p>",
        "id": 531383051,
        "sender_full_name": "Joel Dice",
        "timestamp": 1753712375
    },
    {
        "content": "<p>I'm not totally stuck yet, I can do more research later if you have better things to do.</p>",
        "id": 531383127,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753712395
    },
    {
        "content": "<p>Okay, I reproduced this on my end.  It looks like <code>wit-component</code> is getting confused and generating an async lift <em>without</em> a callback because the core module is not exporting a callback function.  It <em>should</em> be rejecting the module when it sees that you're using the with-callback ABI but not providing a callback, but instead it produces a component that fails validation.  I'll fix the <code>wit-component</code> issue so we can catch the problem there (and hopefully provide a clearer diagnostic).</p>\n<p>Meanwhile, maybe you can dig into why the generated C# code is not exporting a callback function.</p>",
        "id": 531430533,
        "sender_full_name": "Joel Dice",
        "timestamp": 1753726551
    },
    {
        "content": "<p>Ah thanks, right, I haven't implemented that bit yet as I don't think it will be on the call path yet.  But definitely I need to do it, so might as well be now</p>",
        "id": 531430855,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753726668
    },
    {
        "content": "<p>Great, that seesm to be passing the first test.  Thanks very much.</p>",
        "id": 531618822,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753797832
    },
    {
        "content": "<p>WIth an async function that returns a value, not void, I understand that it takes an extra pointer parameter is passed .  How does that relate to the <code>task-return</code> or the pointer is nothing to do with the return value, but is just used by the runtime?  What should this pointer  point to ?</p>",
        "id": 531965009,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753927896
    },
    {
        "content": "<p>Are you referring to the async <em>lower</em> ABI?  If so, yes, the core signature of an async lowered function will include an extra parameter if the component-level signature returns a value, and that must point to an allocation in linear memory which is aligned and sized correctly for the result to be stored.  <code>task-return</code> isn't relevant here because we're talking about lowering imports, not lifting exports.</p>\n<p>The async <em>lift</em> ABI has no such result pointer parameter, since <code>task-return</code> is used to return the result, if any.  The main thing to keep in mind is that the lift and lower ABIs are different.</p>",
        "id": 532080217,
        "sender_full_name": "Joel Dice",
        "timestamp": 1753969842
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 532157031,
        "sender_full_name": "Scott Waye",
        "timestamp": 1753991805
    },
    {
        "content": "<p>I see the codegen tests use the <code>waitable-...</code> way of returning , is the <code>[task-return]</code>flow well tested ?</p>",
        "id": 532390208,
        "sender_full_name": "Scott Waye",
        "timestamp": 1754089272
    },
    {
        "content": "<p>ignore that, I see the c tests use it.</p>",
        "id": 532395278,
        "sender_full_name": "Scott Waye",
        "timestamp": 1754093150
    },
    {
        "content": "<p>I have a question about the c test for simple-future.  There are 2 functions in the wit<br>\n<a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/eaf42f6c12d9cca8231d5a361d20b6c21c2a2739/tests/runtime-async/async/simple-future/test.wit#L4-L5\">https://github.com/bytecodealliance/wit-bindgen/blob/eaf42f6c12d9cca8231d5a361d20b6c21c2a2739/tests/runtime-async/async/simple-future/test.wit#L4-L5</a><br>\nLooking at the test for <code>drop-future</code> where it writes to the writer:<br>\n<a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/eaf42f6c12d9cca8231d5a361d20b6c21c2a2739/tests/runtime-async/async/simple-future/runner.c#L34\">https://github.com/bytecodealliance/wit-bindgen/blob/eaf42f6c12d9cca8231d5a361d20b6c21c2a2739/tests/runtime-async/async/simple-future/runner.c#L34</a><br>\nIt calls <code>test_future_void_write</code> which is generated as </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">runner_waitable_status_t</span><span class=\"w\"> </span><span class=\"n\">test_future_void_write</span><span class=\"p\">(</span><span class=\"n\">test_future_void_writer_t</span><span class=\"w\"> </span><span class=\"n\">writer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">test_future_void__write</span><span class=\"p\">(</span><span class=\"n\">writer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NULL</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>which in turn calls <code>test_future_void__write</code> defined as </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">__import_module__</span><span class=\"p\">(</span><span class=\"s\">\"my:test/i\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">__import_name__</span><span class=\"p\">(</span><span class=\"s\">\"[async-lower][future-write-0][async]read-future\"</span><span class=\"p\">)))</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">test_future_void__write</span><span class=\"p\">(</span><span class=\"n\">uint32_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">uint8_t</span><span class=\"o\">*</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Which has the import name for the <code>read-future</code> function.  What am I missing here?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/blob/eaf42f6c12d9cca8231d5a361d20b6c21c2a2739/tests/runtime-async/async/simple-future/test.wit#L4-L5\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/50cd0505ad3a8575e79246c21a37b2737823449e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396633643162306531386134363863376234383163343734366363616634323461333366353336613261393134626430613836376139316365353664373734362f62797465636f6465616c6c69616e63652f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/eaf42f6c12d9cca8231d5a361d20b6c21c2a2739/tests/runtime-async/async/simple-future/test.wit#L4-L5\" title=\"wit-bindgen/tests/runtime-async/async/simple-future/test.wit at eaf42f6c12d9cca8231d5a361d20b6c21c2a2739 · bytecodealliance/wit-bindgen\">wit-bindgen/tests/runtime-async/async/simple-future/test.wit at eaf42f6c12d9cca8231d5a361d20b6c21c2a2739 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - bytecodealliance/wit-bindgen</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/blob/eaf42f6c12d9cca8231d5a361d20b6c21c2a2739/tests/runtime-async/async/simple-future/runner.c#L34\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/50cd0505ad3a8575e79246c21a37b2737823449e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396633643162306531386134363863376234383163343734366363616634323461333366353336613261393134626430613836376139316365353664373734362f62797465636f6465616c6c69616e63652f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/eaf42f6c12d9cca8231d5a361d20b6c21c2a2739/tests/runtime-async/async/simple-future/runner.c#L34\" title=\"wit-bindgen/tests/runtime-async/async/simple-future/runner.c at eaf42f6c12d9cca8231d5a361d20b6c21c2a2739 · bytecodealliance/wit-bindgen\">wit-bindgen/tests/runtime-async/async/simple-future/runner.c at eaf42f6c12d9cca8231d5a361d20b6c21c2a2739 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - bytecodealliance/wit-bindgen</div></div></div>",
        "id": 534720917,
        "sender_full_name": "Scott Waye",
        "timestamp": 1755297793
    },
    {
        "content": "<p>I.e., I would expect to see an import for <code>drop-future</code>.</p>",
        "id": 534720976,
        "sender_full_name": "Scott Waye",
        "timestamp": 1755297853
    },
    {
        "content": "<p>Is it that internally any \"void future\" would work here, due to some internal things.  I think I read that only one task (subtask?) can be active at a time?</p>",
        "id": 534721063,
        "sender_full_name": "Scott Waye",
        "timestamp": 1755297929
    },
    {
        "content": "<p>I'm not sure I understand what you're asking, but note that we use a \"trick\" to refer to a given <code>future</code> or <code>stream</code> type in the binding generator, allowing <code>wit-component</code> to determine which type to use when generating references to the <code>future.write</code>, <code>future.drop</code>, etc. intrinsics: <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/f6967282dce8f2b3be29ddcd0f33cb90a37ec8f4/crates/wit-parser/src/lib.rs#L1160-L1174\">https://github.com/bytecodealliance/wasm-tools/blob/f6967282dce8f2b3be29ddcd0f33cb90a37ec8f4/crates/wit-parser/src/lib.rs#L1160-L1174</a></p>\n<p>Trying to encode the entire type using only e.g. name mangling would be difficult if not impossible (imagine mangling <code>future&lt;list&lt;tuple&lt;some-record, some-resource-type&gt;&gt;&gt;</code>, especially given that resource types are not necessarily uniquely identified by their names, e.g. when a resource is both imported and exported), so we instead refer to some arbitrary function that uses the type we care about and use an index to indicate which one we mean.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/blob/f6967282dce8f2b3be29ddcd0f33cb90a37ec8f4/crates/wit-parser/src/lib.rs#L1160-L1174\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0ea15d01313588cf5bf18f41153bad82b4a26ef6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623530353532303430643463363031303634303366623439663861623665363130343836663965303731613037633835363634306138336130616565376432382f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/f6967282dce8f2b3be29ddcd0f33cb90a37ec8f4/crates/wit-parser/src/lib.rs#L1160-L1174\" title=\"wasm-tools/crates/wit-parser/src/lib.rs at f6967282dce8f2b3be29ddcd0f33cb90a37ec8f4 · bytecodealliance/wasm-tools\">wasm-tools/crates/wit-parser/src/lib.rs at f6967282dce8f2b3be29ddcd0f33cb90a37ec8f4 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\"> CLI and Rust libraries for low-level manipulation of WebAssembly modules  - bytecodealliance/wasm-tools</div></div></div>",
        "id": 534721911,
        "sender_full_name": "Joel Dice",
        "timestamp": 1755298751
    },
    {
        "content": "<p>I'm curious about <code>read-future</code> in the name of the import used by the <code>drop-future</code> test.  Reading the link you posted, and your explanation, I think I get it.  The type is the same, so the name at the end of the import is not that important, its the type that must be matched.</p>",
        "id": 534722313,
        "sender_full_name": "Scott Waye",
        "timestamp": 1755299098
    },
    {
        "content": "<p>Yeah, the point is to pick a function that refers to the type -- if there is more than one which refers to that type, then the binding generator picks one arbitrarily and uses it.</p>",
        "id": 534767133,
        "sender_full_name": "Joel Dice",
        "timestamp": 1755356026
    }
]