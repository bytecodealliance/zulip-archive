[
    {
        "content": "<p>If anyone is lurking, I now have this slimmed down to the following pattern:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_and</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">attach</span><span class=\"o\">&lt;</span><span class=\"n\">func_t</span><span class=\"o\">&lt;</span><span class=\"n\">bool_t</span><span class=\"p\">(</span><span class=\"n\">bool_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bool_t</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">module_inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exec_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">liftLowerContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example:sample/booleans#and\"</span><span class=\"p\">);</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_and(false, false): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_and</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_and(false, true): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_and</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_and(true, false): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_and</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_and(true, true): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_and</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_add</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">attach</span><span class=\"o\">&lt;</span><span class=\"n\">func_t</span><span class=\"o\">&lt;</span><span class=\"n\">float64_t</span><span class=\"p\">(</span><span class=\"n\">float64_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">float64_t</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">module_inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exec_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">liftLowerContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example:sample/floats#add\"</span><span class=\"p\">);</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_add(3.1, 0.2): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_add</span><span class=\"p\">(</span><span class=\"mf\">3.1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_add(1.5, 2.5): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_add</span><span class=\"p\">(</span><span class=\"mf\">1.5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_reverse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">attach</span><span class=\"o\">&lt;</span><span class=\"n\">func_t</span><span class=\"o\">&lt;</span><span class=\"n\">string_t</span><span class=\"p\">(</span><span class=\"n\">string_t</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">module_inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exec_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">liftLowerContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example:sample/strings#reverse\"</span><span class=\"p\">);</span>\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_reverse_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call_reverse</span><span class=\"p\">(</span><span class=\"s\">\"Hello World!\"</span><span class=\"p\">);</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_reverse(</span><span class=\"se\">\\\"</span><span class=\"s\">Hello World!</span><span class=\"se\">\\\"</span><span class=\"s\">): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_reverse_result</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_reverse(call_reverse(</span><span class=\"se\">\\\"</span><span class=\"s\">Hello World!</span><span class=\"se\">\\\"</span><span class=\"s\">)): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_reverse</span><span class=\"p\">(</span><span class=\"n\">call_reverse_result</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_lots</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">attach</span><span class=\"o\">&lt;</span><span class=\"n\">func_t</span><span class=\"o\">&lt;</span><span class=\"kt\">uint32_t</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">module_inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exec_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">liftLowerContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example:sample/strings#lots\"</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Example call with 33 string_t arguments</span>\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_lots_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call_lots</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s\">\"p1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p3\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p4\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p5\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p6\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p7\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p8\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"p9\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p10\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p11\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p12\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p13\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p14\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p15\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p16\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p17\"</span><span class=\"p\">);</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_lots result: \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_lots_result</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">reverse_tuple_func_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_t</span><span class=\"o\">&lt;</span><span class=\"n\">tuple_t</span><span class=\"o\">&lt;</span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bool_t</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">tuple_t</span><span class=\"o\">&lt;</span><span class=\"n\">bool_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_reverse_tuple</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">attach</span><span class=\"o\">&lt;</span><span class=\"n\">reverse_tuple_func_t</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">module_inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exec_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">liftLowerContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example:sample/tuples#reverse\"</span><span class=\"p\">);</span>\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_reverse_tuple_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call_reverse_tuple</span><span class=\"p\">({</span><span class=\"nb\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Hello World!\"</span><span class=\"p\">});</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_reverse_tuple({false, </span><span class=\"se\">\\\"</span><span class=\"s\">Hello World!</span><span class=\"se\">\\\"</span><span class=\"s\">}): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">get</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">call_reverse_tuple_result</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\", \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">get</span><span class=\"o\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">call_reverse_tuple_result</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_list_filter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">attach</span><span class=\"o\">&lt;</span><span class=\"n\">func_t</span><span class=\"o\">&lt;</span><span class=\"n\">list_t</span><span class=\"o\">&lt;</span><span class=\"n\">string_t</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">list_t</span><span class=\"o\">&lt;</span><span class=\"n\">variant_t</span><span class=\"o\">&lt;</span><span class=\"n\">bool_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">module_inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exec_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">liftLowerContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example:sample/lists#filter-bool\"</span><span class=\"p\">);</span>\n\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_list_filter_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call_list_filter</span><span class=\"p\">({{</span><span class=\"nb\">false</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"s\">\"Hello World!\"</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"s\">\"Another String\"</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nb\">true</span><span class=\"p\">}});</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_list_filter result: \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_list_filter_result</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 516495926,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1746551691
    },
    {
        "content": "<p>Next step is to remove the need for the <code>func_t</code></p>",
        "id": 516496328,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1746551841
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_and</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">attach</span><span class=\"o\">&lt;</span><span class=\"n\">bool_t</span><span class=\"p\">(</span><span class=\"n\">bool_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bool_t</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">module_inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exec_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">liftLowerContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example:sample/booleans#and\"</span><span class=\"p\">);</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_and(false, false): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_and</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_and(false, true): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_and</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_and(true, false): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_and</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_and(true, true): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_and</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_add</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">attach</span><span class=\"o\">&lt;</span><span class=\"n\">float64_t</span><span class=\"p\">(</span><span class=\"n\">float64_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">float64_t</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">module_inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exec_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">liftLowerContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example:sample/floats#add\"</span><span class=\"p\">);</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_add(3.1, 0.2): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_add</span><span class=\"p\">(</span><span class=\"mf\">3.1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_add(1.5, 2.5): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_add</span><span class=\"p\">(</span><span class=\"mf\">1.5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_reverse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">attach</span><span class=\"o\">&lt;</span><span class=\"n\">string_t</span><span class=\"p\">(</span><span class=\"n\">string_t</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">module_inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exec_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">liftLowerContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example:sample/strings#reverse\"</span><span class=\"p\">);</span>\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_reverse_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call_reverse</span><span class=\"p\">(</span><span class=\"s\">\"Hello World!\"</span><span class=\"p\">);</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_reverse(</span><span class=\"se\">\\\"</span><span class=\"s\">Hello World!</span><span class=\"se\">\\\"</span><span class=\"s\">): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_reverse_result</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_reverse(call_reverse(</span><span class=\"se\">\\\"</span><span class=\"s\">Hello World!</span><span class=\"se\">\\\"</span><span class=\"s\">)): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_reverse</span><span class=\"p\">(</span><span class=\"n\">call_reverse_result</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_lots</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">attach</span><span class=\"o\">&lt;</span><span class=\"kt\">uint32_t</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">module_inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exec_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">liftLowerContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example:sample/strings#lots\"</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Example call with 33 string_t arguments</span>\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_lots_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call_lots</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s\">\"p1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p3\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p4\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p5\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p6\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p7\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p8\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"p9\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p10\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p11\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p12\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p13\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p14\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p15\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p16\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"p17\"</span><span class=\"p\">);</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_lots result: \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_lots_result</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">reverse_tuple_func_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tuple_t</span><span class=\"o\">&lt;</span><span class=\"n\">string_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bool_t</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">tuple_t</span><span class=\"o\">&lt;</span><span class=\"n\">bool_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_reverse_tuple</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">attach</span><span class=\"o\">&lt;</span><span class=\"n\">reverse_tuple_func_t</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">module_inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exec_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">liftLowerContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example:sample/tuples#reverse\"</span><span class=\"p\">);</span>\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_reverse_tuple_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call_reverse_tuple</span><span class=\"p\">({</span><span class=\"nb\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Hello World!\"</span><span class=\"p\">});</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_reverse_tuple({false, </span><span class=\"se\">\\\"</span><span class=\"s\">Hello World!</span><span class=\"se\">\\\"</span><span class=\"s\">}): \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">get</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">call_reverse_tuple_result</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\", \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">get</span><span class=\"o\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">call_reverse_tuple_result</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_list_filter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">attach</span><span class=\"o\">&lt;</span><span class=\"n\">list_t</span><span class=\"o\">&lt;</span><span class=\"n\">string_t</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">list_t</span><span class=\"o\">&lt;</span><span class=\"n\">variant_t</span><span class=\"o\">&lt;</span><span class=\"n\">bool_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">module_inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exec_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">liftLowerContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example:sample/lists#filter-bool\"</span><span class=\"p\">);</span>\n\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">call_list_filter_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call_list_filter</span><span class=\"p\">({{</span><span class=\"nb\">false</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"s\">\"Hello World!\"</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"s\">\"Another String\"</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nb\">true</span><span class=\"p\">}});</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"call_list_filter result: \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">call_list_filter_result</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 516501693,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1746553637
    },
    {
        "content": "<p>...First draft of host functions, now working:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"nf\">reverse</span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"n\">toupper</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"nf\">lots</span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p17</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p3</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p4</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p5</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p6</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p7</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p8</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p9</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p10</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p11</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p12</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p13</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p14</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p15</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p16</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p17</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n<span class=\"n\">NativeSymbol</span><span class=\"w\"> </span><span class=\"n\">strings_symbol</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">host_function</span><span class=\"p\">(</span><span class=\"s\">\"reverse\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">reverse</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">host_function</span><span class=\"p\">(</span><span class=\"s\">\"lots\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lots</span><span class=\"p\">),</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">void_t</span><span class=\"w\"> </span><span class=\"nf\">log_u32</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_t</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"wasm-log:  \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">NativeSymbol</span><span class=\"w\"> </span><span class=\"n\">logging_symbol</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">host_function</span><span class=\"p\">(</span><span class=\"s\">\"log-u32\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">log_u32</span><span class=\"p\">),</span>\n<span class=\"p\">};</span>\n\n<span class=\"p\">...</span>\n\n<span class=\"w\">    </span><span class=\"n\">success</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm_runtime_register_natives_raw</span><span class=\"p\">(</span><span class=\"s\">\"example:sample/strings\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">strings_symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">strings_symbol</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">NativeSymbol</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">success</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm_runtime_register_natives_raw</span><span class=\"p\">(</span><span class=\"s\">\"example:sample/logging\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">logging_symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">logging_symbol</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">NativeSymbol</span><span class=\"p\">));</span>\n</code></pre></div>",
        "id": 520661802,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1748350568
    },
    {
        "content": "<p>Getting close to a complete implementation!  See <a href=\"https://github.com/GordonSmith/component-model-cpp/tree/WIT-CODEGEN/samples\">https://github.com/GordonSmith/component-model-cpp/tree/WIT-CODEGEN/samples</a> for details, now includes generated stubs from wit definitions...</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/GordonSmith/component-model-cpp/tree/WIT-CODEGEN/samples\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1831a88faca232e79468d2eeecaaab6285b454e4/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333739356236373934373235643063393736383133623931303262303463373065396636646339303366383663343232346134323934326335656361396230342f476f72646f6e536d6974682f636f6d706f6e656e742d6d6f64656c2d637070&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/GordonSmith/component-model-cpp/tree/WIT-CODEGEN/samples\" title=\"component-model-cpp/samples at WIT-CODEGEN · GordonSmith/component-model-cpp\">component-model-cpp/samples at WIT-CODEGEN · GordonSmith/component-model-cpp</a></div><div class=\"message_embed_description\">C++ ABI implementation of the WebAssembly Component Model - GordonSmith/component-model-cpp</div></div></div>",
        "id": 544249192,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1760131100
    },
    {
        "content": "<p>v0.2.2 successfully generates host stubs + wamr bindings for the entire wit-bindgen test suite.<br>\n...and they compile cleanly on windows and nix.  (would need host implementations of wasi to actually test them, but they compiled!!!)</p>",
        "id": 545366555,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1760627774
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ ./wit-codegen.exe --help\nwit-codegen - WebAssembly Interface Types (WIT) Code Generator\n\nUSAGE:\n  C:\\Users\\gordon\\Downloads\\cmcpp-0.1.0-win64\\cmcpp-0.1.0-win64\\bin\\wit-codegen.exe &lt;wit-file-or-dir&gt; [output-prefix]\n  C:\\Users\\gordon\\Downloads\\cmcpp-0.1.0-win64\\cmcpp-0.1.0-win64\\bin\\wit-codegen.exe --help\n  C:\\Users\\gordon\\Downloads\\cmcpp-0.1.0-win64\\cmcpp-0.1.0-win64\\bin\\wit-codegen.exe -h\n\nARGUMENTS:\n  &lt;wit-file-or-dir&gt; Path to WIT file or directory with WIT package\n  [output-prefix]   Optional output file prefix (default: derived from package name)\n\nOPTIONS:\n  -h, --help        Show this help message and exit\n\nDESCRIPTION:\n  Generates C++ host function bindings from WebAssembly Interface Types (WIT)\n  files. The tool parses WIT syntax and generates type-safe C++ code for\n  interfacing with WebAssembly components.\n\n  Supports multi-file WIT packages with deps/ folder dependencies.\n\nGENERATED FILES:\n  &lt;prefix&gt;.hpp          - C++ header with type definitions and declarations\n  &lt;prefix&gt;_wamr.hpp     - WAMR runtime integration header\n  &lt;prefix&gt;_wamr.cpp     - WAMR binding implementation with NativeSymbol arrays\n\nFEATURES:\n  - Supports all Component Model types (primitives, strings, lists, records,\n    variants, enums, options, results, flags)\n  - Generates bidirectional bindings (imports and exports)\n  - Type-safe C++ wrappers using cmcpp canonical ABI\n  - WAMR native function registration helpers\n  - Automatic memory management for complex types\n  - Multi-file package support with deps/ folder resolution\n\nEXAMPLES:\n  # Generate bindings from single WIT file\n  C:\\Users\\gordon\\Downloads\\cmcpp-0.1.0-win64\\cmcpp-0.1.0-win64\\bin\\wit-codegen.exe example.wit\n\n  # Generate bindings from WIT package directory\n  C:\\Users\\gordon\\Downloads\\cmcpp-0.1.0-win64\\cmcpp-0.1.0-win64\\bin\\wit-codegen.exe wit/\n\n  # Generate bindings with custom prefix\n  C:\\Users\\gordon\\Downloads\\cmcpp-0.1.0-win64\\cmcpp-0.1.0-win64\\bin\\wit-codegen.exe example.wit my_bindings\n\n  # Show help message\n  C:\\Users\\gordon\\Downloads\\cmcpp-0.1.0-win64\\cmcpp-0.1.0-win64\\bin\\wit-codegen.exe --help\n\nFor more information, see: https://github.com/GordonSmith/component-model-cpp\n</code></pre></div>",
        "id": 545367742,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1760627954
    },
    {
        "content": "<p><a href=\"https://github.com/GordonSmith/component-model-cpp/releases\">https://github.com/GordonSmith/component-model-cpp/releases</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/GordonSmith/component-model-cpp/releases\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9c7a46e7c9413bf1e11718cfd470811390efb853/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386339383066323630653833353833373062653163363861393634353666616339626562636362616162626235623464333539386264373065353261643939642f476f72646f6e536d6974682f636f6d706f6e656e742d6d6f64656c2d637070&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/GordonSmith/component-model-cpp/releases\" title=\"Releases · GordonSmith/component-model-cpp\">Releases · GordonSmith/component-model-cpp</a></div><div class=\"message_embed_description\">C++ ABI implementation of the WebAssembly Component Model - GordonSmith/component-model-cpp</div></div></div>",
        "id": 545368777,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1760628123
    }
]