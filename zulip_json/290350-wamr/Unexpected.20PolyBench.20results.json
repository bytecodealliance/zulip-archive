[
    {
        "content": "<p>One of our students compared different Wasm runtime execution times and their results surprised us:</p>\n<p><a href=\"/user_uploads/15107/iG7PccldYRUEDTqa6SvE5jCH/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/iG7PccldYRUEDTqa6SvE5jCH/image.png\" title=\"image.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"758x500\" src=\"/user_uploads/thumbnail/15107/iG7PccldYRUEDTqa6SvE5jCH/image.png/840x560.webp\"></a></div><p>We are currently trying to figure out how it is possible that WAMR JIT and AOT performs so much better than native, so we performed multiple new benchmarks.</p>\n<p>Our own results show the same weird behavior that we cannot explain: WAMR AOT and LLVM JIT performs 3-10x better than the native application for certain benchmarks.</p>\n<p>Thinking we did something wrong with the native application or the Wasm binaries, we also used the provided WAMR benchmarks from <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/tree/main/tests/benchmarks/polybench\">https://github.com/bytecodealliance/wasm-micro-runtime/tree/main/tests/benchmarks/polybench</a>, but with the same results:</p>\n<p>These are the results for iwasm compiled with LLVM JIT</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>ubuntu@benchmark:~/wasm-micro-runtime/tests/benchmarks/polybench$ cat report_jit_llvm_lazy.txt\n                        native  iwasm-jit-llvm-lazy\n2mm                     39.07   8.90\n3mm                     63.17   9.30\nadi                     44.85   25.21\natax                    0.07    1.09\nbicg                    0.08    1.10\ncholesky                247.97  42.25\ncorrelation             48.77   6.10\ncovariance              48.86   5.89\nderiche                 1.79    1.06\ndoitgen                 1.20    2.26\ndurbin                  0.02    1.08\nfdtd-2d                 5.35    7.93\nfloyd-warshall          49.97   47.44\ngemm                    1.36    3.59\ngemver                  0.21    0.99\ngesummv                 0.06    0.98\ngramschmidt             90.00   12.94\nheat-3d                 6.36    14.82\njacobi-1d               0.02    1.05\njacobi-2d               4.68    10.84\nludcmp                  298.59  50.20\nlu                      300.00  49.60\nmvt                     0.22    1.10\nnussinov                59.15   9.16\nseidel-2d               31.64   32.34\nsymm                    30.06   5.58\nsyr2k                   37.46   5.61\nsyrk                    13.12   2.97\ntrisolv                 0.05    1.04\ntrmm                    29.15   3.14\n</code></pre></div>\n<p>These are the results with AOT binaries</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>ubuntu@benchmark:~/wasm-micro-runtime/tests/benchmarks/polybench$ cat report_aot.txt\n                        native  iwasm-aot       iwasm-aot-segue\n2mm                     39.88   4.72            1.28\n3mm                     62.53   8.32            1.26\nadi                     44.73   23.21           1.30\natax                    0.08    0.11            1.29\nbicg                    0.10    0.11            1.27\ncholesky                244.51  49.66           1.31\ncorrelation             47.32   4.98            1.26\ncovariance              47.52   4.94            1.26\nderiche                 1.70    0.46            1.27\ndoitgen                 1.19    1.42            1.28\ndurbin                  0.02    0.03            1.28\nfdtd-2d                 5.28    7.14            1.29\nfloyd-warshall          47.67   46.35           1.29\ngemm                    1.34    2.87            1.26\ngemver                  0.22    0.13            1.26\ngesummv                 0.07    0.09            1.26\ngramschmidt             87.81   12.08           1.25\nheat-3d                 6.27    14.41           1.28\njacobi-1d               0.02    0.03            1.26\njacobi-2d               5.74    10.50           1.26\nludcmp                  295.11  46.20           1.28\nlu                      297.54  48.62           1.50\nmvt                     0.20    0.11            1.28\nnussinov                55.83   8.54            1.27\nseidel-2d               31.16   31.01           1.31\nsymm                    29.39   4.53            1.26\nsyr2k                   35.19   4.95            1.26\nsyrk                    12.60   2.29            1.28\ntrisolv                 0.05    0.07            1.26\ntrmm                    27.30   2.43            1.27\n</code></pre></div>\n<p>At first we thought this might have to do something with SIMD optimizations, but we can't quite figure it out. We also stumbled upon a similar issue here, but no definitive answer: <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/issues/4292\">https://github.com/bytecodealliance/wasm-micro-runtime/issues/4292</a></p>\n<p>We tried to disable SIMD when building <code>iwasm</code> and <code>wamrc</code> using the <code>-DWAMR_BUILD_SIMD=0</code> flag, but it is not clear to us if this disables native SIMD instructions, or if this disables the Wasm 128-bit SIMD proposal (<a href=\"https://github.com/WebAssembly/spec/blob/main/proposals/simd/SIMD.md\">https://github.com/WebAssembly/spec/blob/main/proposals/simd/SIMD.md</a>)? AOT binaries compiled with <code>wamrc</code> that was compiled using <code>-DWAMR_BUILD_SIMD=0</code> still contain native SIMD instructions when looking at the object with <code>objdump</code>. </p>\n<p>Are we missing or misunderstanding something? All suggestions are welcome.</p>\n<p>Once we figure this out, we will move to more realistic benchmarks.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/tree/main/tests/benchmarks/polybench\" style='background-image: url(\"https://uploads.zulipusercontent.net/035e910ed95a7ba7d30b0acbfdd2986a5a58fc60/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633862643963633030313134393333313139613764383233636261616364353831386430616536393332363831643765363066386531303237396331303465302f62797465636f6465616c6c69616e63652f7761736d2d6d6963726f2d72756e74696d65\")'></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/tree/main/tests/benchmarks/polybench\" title=\"wasm-micro-runtime/tests/benchmarks/polybench at main · bytecodealliance/wasm-micro-runtime\">wasm-micro-runtime/tests/benchmarks/polybench at main · bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">WebAssembly Micro Runtime (WAMR). Contribute to bytecodealliance/wasm-micro-runtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/issues/4292\" style='background-image: url(\"https://uploads.zulipusercontent.net/ed21c70f2824341631d8b528872000195e4b9b54/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f356235346637653366643438666636653864666538613237663662363630623932316131663965613530366539333735363034653261616631646263373937322f62797465636f6465616c6c69616e63652f7761736d2d6d6963726f2d72756e74696d652f6973737565732f34323932\")'></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/issues/4292\" title=\"Polybench benchmark unnatural performance numbers · Issue #4292 · bytecodealliance/wasm-micro-runtime\">Polybench benchmark unnatural performance numbers · Issue #4292 · bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">Subject of the issue I am baffled with the results I get from the polybench benchmarks. I will try to attach a graph of my results, but basically, in all but 5 of the benchmarks, AOT outperforms na...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/spec/blob/main/proposals/simd/SIMD.md\" style='background-image: url(\"https://uploads.zulipusercontent.net/27c4e78844b7e4e58d06ba70b162c887f405c07c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623466303866343431366336626332376465646234373663336237636563633036653231373935376363363265613733643930623331333466373961316366352f576562417373656d626c792f73706563\")'></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/spec/blob/main/proposals/simd/SIMD.md\" title=\"spec/proposals/simd/SIMD.md at main · WebAssembly/spec\">spec/proposals/simd/SIMD.md at main · WebAssembly/spec</a></div><div class=\"message_embed_description\">WebAssembly specification, reference interpreter, and test suite. - WebAssembly/spec</div></div></div>",
        "id": 526824633,
        "sender_full_name": "Michiel Van Kenhove (imec-UGent)",
        "timestamp": 1751468937
    },
    {
        "content": "<p>Has similar vibes to some benchmarks that ran faster as wasm2c compiled native vs source compiled native where the 32-bit pointer space was believed to give a boost: <a href=\"https://kripken.github.io/talks/2020/universal.html#/26/0/0\">https://kripken.github.io/talks/2020/universal.html#/26/0/0</a></p>",
        "id": 526855699,
        "sender_full_name": "Milan (rajsite)",
        "timestamp": 1751479722
    }
]