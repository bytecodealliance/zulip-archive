[
    {
        "content": "<p>This post is something cross-channel going, but since my end goal is running in WAMR, I guess this is the best channel to ask about it...</p>\n<p>I'm trying to find the \"easiest\" way of supporting WIT interfaces in an application that needs to run in the WAMR runtime. I don't necessarily want a best effort approach, but I really wanna know what tools are lacking atm or maybe there is a straightforward solution already. I know WAMR doesn't support this (yet), but I'm looking for a way of converting builds to a format that is supported<br>\nLots of posts are a bit older and I'm trying to get a clear vision of what the state is in todays tooling options. Is there any clear winner in how to convert a wasm component to a core module? Essentially, I wanna be able to write some Rust code using a wasi WIT interface and compile it to a core WASM Module.</p>\n<p>In the build flow of cargo-component I read that a core module actually gets wrapped to a component, so my guess is that it wouldn't be that difficult to just get a module instead? But I can't seem to figure out how to achieve this?<br>\nUsing the <code>--target wasm32-wasip1</code> didn't really work either.</p>\n<p>If it helps, I'm trying to advance the I2C proposal and I'm trying to figure out how to build the right tooling to support the interface in WAMR</p>",
        "id": 512729327,
        "sender_full_name": "Robin Verbeelen",
        "timestamp": 1744861273
    },
    {
        "content": "<p>I think I created some pieces which can help you, but I got distracted by my WASI 0.3 compiled to native projects.</p>\n<p>At <a href=\"https://github.com/cpetig/wasmtime-adapter/tree/adapter/tests/preview2-adapter\">https://github.com/cpetig/wasmtime-adapter/tree/adapter/tests/preview2-adapter</a> you can find a very simple example on how to create a core module (compatible with wamr) with wasip2 interfaces. This uses a static library to adapt from wasip1 to WASI 0.2 interfaces and thus can create a wasm 2.0+ core module.</p>\n<p>Another example of using components in wamr is in <a href=\"https://github.com/cpetig/resource-demo/tree/main/host-wamr\">https://github.com/cpetig/resource-demo/tree/main/host-wamr</a>.</p>\n<p>Ideally <a href=\"https://github.com/WebAssembly/component-model/pull/378\">https://github.com/WebAssembly/component-model/pull/378</a> would get ready to enable a stable binary representation for core modules and someone would change wasi-libc to directly target wasip2+ instead of relying on the adapter, because the traditional adapter requires a component binary, which combines multiple core modules with a connecting fabric in a single non-wamr compatible binary format.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/wasmtime-adapter/tree/adapter/tests/preview2-adapter\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/bbb5d336d924078d9e2b42efbb984585a7810318/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306461303938333133306565326164313633366564316163666331643366326462633431376437353233393230356430316136323335373066306437626631622f6370657469672f7761736d74696d652d61646170746572&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/wasmtime-adapter/tree/adapter/tests/preview2-adapter\" title=\"wasmtime-adapter/tests/preview2-adapter at adapter · cpetig/wasmtime-adapter\">wasmtime-adapter/tests/preview2-adapter at adapter · cpetig/wasmtime-adapter</a></div><div class=\"message_embed_description\">Preview2 adapter forked from wasmtime. Contribute to cpetig/wasmtime-adapter development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/resource-demo/tree/main/host-wamr\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3849c9f824e9abb3852c63c64a9fe8ece6c45db4/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326163393663626432386137346263303462373766373836663332336465643630396230336239313634306262386335666562316265333536663665623933332f6370657469672f7265736f757263652d64656d6f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/resource-demo/tree/main/host-wamr\" title=\"resource-demo/host-wamr at main · cpetig/resource-demo\">resource-demo/host-wamr at main · cpetig/resource-demo</a></div><div class=\"message_embed_description\">A demo showing WASM component model resources in various environments - cpetig/resource-demo</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/pull/378\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/52be036e7b291195e770e250f7079bb3871f6fcd/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373235333564623065306463623835303332393936326137313332393032353664303861343039633165376631363130623637396437313437356539656131622f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f70756c6c2f333738&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/pull/378\" title=\"Add BuildTargets.md by lukewagner · Pull Request #378 · WebAssembly/component-model\">Add BuildTargets.md by lukewagner · Pull Request #378 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">This PR adds BuildTargets.md to define this new concept of &quot;build targets&quot; as presented in both CG-06 and WASI-06-12, which itself was a revision of the earlier &quot;wasit2&quot; idea th...</div></div></div>",
        "id": 512751665,
        "sender_full_name": "Christof Petig",
        "timestamp": 1744872718
    },
    {
        "content": "<p>Oh, and of course a WIT C host code generator would be needed for the implementations on wamr side, I started something similar years ago, today I would go for the less convenient \"C header file without lifting/lowering\" minimum viable product, as proposed in the SIG embedded.</p>",
        "id": 512752994,
        "sender_full_name": "Christof Petig",
        "timestamp": 1744873208
    },
    {
        "content": "<p>So, to be clear, we don't necessarily want to support wasip2 interfaces in WAMR. Instead, we just want to support an interface defined in WIT. If there is a way to turn these into wasip1 interfaces than that would be enough.</p>\n<p>So my (probably wrong) thought process would go like this:</p>\n<ol>\n<li>Generate bindings from wit to the target language using <code>wit-bindgen</code>.</li>\n<li>Compile to <code>wasm32-wasip1</code> like so: <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/build_wasm_app.md\">https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/build_wasm_app.md</a> (to get native wasip1 interfaces)</li>\n<li>Manually write host code for the WIT interfaces we're using</li>\n</ol>\n<p>Would this work? What am I missing here?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/build_wasm_app.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/08cac436073e1f69640e2da8fbf6329fede01481/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353837363839326539633139313335346635303461353264613765353561353639623032316466336335383465633434386232393235326333313435656361662f62797465636f6465616c6c69616e63652f7761736d2d6d6963726f2d72756e74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/build_wasm_app.md\" title=\"wasm-micro-runtime/doc/build_wasm_app.md at main · bytecodealliance/wasm-micro-runtime\">wasm-micro-runtime/doc/build_wasm_app.md at main · bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">WebAssembly Micro Runtime (WAMR). Contribute to bytecodealliance/wasm-micro-runtime development by creating an account on GitHub.</div></div></div>",
        "id": 513635223,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1745334377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"590366\">@Christof Petig</span> About the \"C header file without liting/lowering\", I'm assuming you mean just hand-crafting a C header file for the interface that matches the ABI interpretation of the WIT? And then the applications use the ABI types directly instead of first converting them to a \"language-native\" format?</p>\n<p>In that case, how would you go about crafting the C header file? Just use wit-bindgen to C and manually invert?</p>",
        "id": 513643852,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1745336639
    },
    {
        "content": "<p>I feel most of wit-bindgen would not be needed, also you probably want a special wamr host encoding (I created most of this but lost the need for it), probably a separate crate leveraging wit-bindgen-c would be ideal.</p>",
        "id": 513674908,
        "sender_full_name": "Christof Petig",
        "timestamp": 1745345703
    },
    {
        "content": "<p>On the other hand I feel that you will want to generate header declarations for the data types passed in pointers. You can find my c++ inspired code in my wit-bindgen fork, it already creates wamr registration code, but I didn't test it for two years.</p>",
        "id": 513675662,
        "sender_full_name": "Christof Petig",
        "timestamp": 1745345895
    },
    {
        "content": "<p>I feel like I need more information on a deeper level and maybe my questions will be useful for other people in the future too, so:</p>\n<h2>Question 1</h2>\n<blockquote>\n<p>I feel most of wit-bindgen would not be needed</p>\n</blockquote>\n<p>How come this wouldn't be needed? What does it do differently? Is the result too \"heavy\" for constrained devices? Is there another tool better suited for this use-case? Or does it simply not exist yet or will it ever exist?</p>\n<h2>Question 2</h2>\n<p>The dream would be to have something like:<br>\n| src/<br>\n--&gt; <a href=\"http://main.rs\">main.rs</a><br>\n| wit/<br>\n--&gt; i2c.wit<br>\n--&gt; delay.wit</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// main.rs</span>\n<span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"s\">\"../wit/\"</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"cm\">/* guest code */</span>\n</code></pre></div>\n<p>and just compile using <code>--target wasm32-wasip1</code> and have a wasm guest file that can be run by wamr, but I feel like we're just not there yet.<br>\nWhat are we exactly missing to make this work on wamr? How do we get just a core module that works with wasi p1, tho \"using\" the wit files to make sure the interface is correctly implemented?</p>\n<h2>Question 3</h2>\n<blockquote>\n<p>you probably want a special wamr host encoding (I created most of this but lost the need for it), probably a separate crate leveraging wit-bindgen-c would be ideal</p>\n</blockquote>\n<p>What exactly would this be needed for? What's the goal this would want to achieve? What do you mean with special wamr host encoding?</p>\n<p>-- <span class=\"user-mention\" data-user-id=\"590366\">@Christof Petig</span>  Thank you so much already for answering and taking your time to educate me a little on this</p>",
        "id": 515595832,
        "sender_full_name": "Robin Verbeelen",
        "timestamp": 1746140383
    }
]