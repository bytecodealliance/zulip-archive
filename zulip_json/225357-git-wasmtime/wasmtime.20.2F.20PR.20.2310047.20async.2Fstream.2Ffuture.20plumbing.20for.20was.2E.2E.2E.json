[
    {
        "content": "<p>dicej opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047\">PR #10047</a> from <code>dicej:wasmtime-environ-async-plumbing</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>I've split this out of #9582 to make review easier.</p>\n<p>This patch includes the plumbing needed to route<br>\nasync/stream/future/error-context data from <code>wit-parser</code>, through the various layers of <code>wasmtime-environ</code>, and on to <code>wasmtime-cranelift</code> and <code>wasmtime</code>. The <code>wasmtime::runtime</code>, <code>wasmtime_environ::fact</code>, and <code>wasmtime_cranelift::compiler::component</code> modules only contain <code>todo!()</code> stubs to begin with; I'll flesh those out in later PRs.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 494464204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737161492
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047\">PR #10047</a>.</p>",
        "id": 494464211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737161500
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#issuecomment-2599434374\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047\">PR #10047</a>:</p>\n<blockquote>\n<p>@alexcrichton note all the new fields I've added to <code>VMComponentContext</code>/<code>VMComponentOffsets</code>.  I dimly recall that you wanted me to switch most or all of them over to libcalls, and that that would involve adding a bunch of new methods to the <code>VMStore</code> trait, but I can't remember the details.  Perhaps you could walk me through that next week.</p>\n</blockquote>",
        "id": 494464530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737161735
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1923973692\">PR review comment</a>:</p>\n<blockquote>\n<p>Question on this (and the tables for futures/streams). <a href=\"https://github.com/WebAssembly/component-model/pull/427\">https://github.com/WebAssembly/component-model/pull/427</a> is in my inbox of \"eventually I need to deal with this\", specifically the change to place all resources for a component in a single table rather than in multiple tables. Eventually I assume the same treatment will need to happen here with futures/streams/errors/etc. Do you think it would be possible/reasonable to start moving in that direction with futures/streams/errors? </p>\n<p>I realize it's probably easiest to do the same thing as resources at this time because that's how everything is structured. If you think it's reasonable to move all of these types into a single table though it might be good to get a head-start on that. I think it's reasonable to land either strategy though, this current separate-tables strategy shouldn't make a future migration all that much harder to implement that component model change.</p>\n</blockquote>",
        "id": 495090614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737475337
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#pullrequestreview-2565024099\">PR review</a>.</p>",
        "id": 495090615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737475337
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1923983896\">PR review comment</a>:</p>\n<blockquote>\n<p>Does rustfmt insist on this comment being at the end here or is it possible to leave it on a newline like before?</p>\n</blockquote>",
        "id": 495090617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737475337
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1923980277\">PR review comment</a>:</p>\n<blockquote>\n<p>Should the return value here be renamed to drop the \"Table\" in its name to indicate that it's representing a local error context, not just the table of them? Either that or do you think it'd be good to have a newtype-wrapper around the other? (or do you feel as-is is the best balance?)</p>\n</blockquote>",
        "id": 495090618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737475337
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1923961160\">PR review comment</a>:</p>\n<blockquote>\n<p>Temporary debugging bits</p>\n</blockquote>",
        "id": 495090619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737475337
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1923961849\">PR review comment</a>:</p>\n<blockquote>\n<p>(also if you'd like feel free to file feature requests on <code>wasm-tools</code> for anything you'd have found useful during development)</p>\n</blockquote>",
        "id": 495090620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737475337
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1923966622\">PR review comment</a>:</p>\n<blockquote>\n<p>This looks like it might be duplicating code in <code>adapter_options</code> below, so perhaps an extraction but a forgotten update-the-original-site-to-call-this-helper?</p>\n</blockquote>",
        "id": 495090621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737475337
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1923990172\">PR review comment</a>:</p>\n<blockquote>\n<p>Questions on this (as you predicted I might have!)</p>\n<ul>\n<li>These are accessed from Cranelift-compiled code right? If yes on to further questions, if no, though, then I think these should move to <code>ComponentInstance</code> instead of <code>VMComponentContext</code>.</li>\n<li>If accessed, I might recommend moving these into a table, ideally the preexisting <code>VMComponentBuiltins</code> table. I also vaguely remember you mentioning that's difficult/not possible, so I might need to be re-educated...</li>\n</ul>\n<p>One concern of a lot of fields like this is that profiling in the past has shown that it can be a slight bottleneck in component instantiation. For example storing a pointer-to-a-table (one pointer write) is much more efficient than storing dozens of pointers (e.g. core builtins + component builtins gets into the dozens-of-function-pointers). Not a huge concern, but it's nice to keep things more compact if we can.</p>\n</blockquote>",
        "id": 495090623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737475338
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1923963322\">PR review comment</a>:</p>\n<blockquote>\n<p>Or, alternatively, this is what the <code>factc</code> example was supposed to help with so feel free to file issues/requests for that if you'd find it helpful</p>\n</blockquote>",
        "id": 495090624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737475338
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047\">PR #10047</a>.</p>",
        "id": 495114857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737482407
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#pullrequestreview-2565362831\">PR review</a>.</p>",
        "id": 495115520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737482609
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1924167468\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, looks like a case of me-being-in-a-hurry-to-get-stuff-working-and-then-forgetting-to-clean-up.  I'll remove the duplication.</p>\n</blockquote>",
        "id": 495115522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737482609
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#pullrequestreview-2565378234\">PR review</a>.</p>",
        "id": 495117021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737483094
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1924176707\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I was thinking of that too.  The complicating factor here is that we have:</p>\n<ul>\n<li>Resources, which can be owned or borrowed</li>\n<li>Futures and streams, which can only be owned.  Also, only the read ends can been passed around, but the same rep is used for both ends, and when the same component has both ends they just use the same end to read and write.</li>\n<li>Subtasks, which can only be owned and cannot be passed around.</li>\n<li>Error-contexts, which are immutable and reference counted</li>\n</ul>\n<p>I'm not sure it makes sense logistically to put all of those in the same table given they each have very different rules.  A single data structure that handles all of them at once could get pretty ugly.</p>\n<p>One possibility might be to factor out a \"rep allocator\" whose only job is to allocate and deallocate u32 reps, and use those reps as indexes into separate maps containing the states for each kind of handle.</p>\n</blockquote>",
        "id": 495117022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737483095
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#pullrequestreview-2565382579\">PR review</a>.</p>",
        "id": 495117403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737483231
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1924179291\">PR review comment</a>:</p>\n<blockquote>\n<p>@vados-cosmonic wrote this part.  Victor, do you have thoughts about this?</p>\n</blockquote>",
        "id": 495117404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737483232
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047\">PR #10047</a>.</p>",
        "id": 495117772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737483355
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#pullrequestreview-2565387266\">PR review</a>.</p>",
        "id": 495117890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737483382
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1924181890\">PR review comment</a>:</p>\n<blockquote>\n<p>Not sure what happened there; rustfmt seems happy with the old position, so I've moved it back.</p>\n</blockquote>",
        "id": 495117893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737483383
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1924176707\">PR review comment</a>.</p>",
        "id": 495118913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737483766
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#pullrequestreview-2565411824\">PR review</a>.</p>",
        "id": 495119970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737484164
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1924196780\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>These are accessed from Cranelift-compiled code right?</p>\n</blockquote>\n<p>Yes, correct.</p>\n<blockquote>\n<p>I might recommend moving these into a table, ideally the preexisting <code>VMComponentBuiltins</code> table. I also vaguely remember you mentioning that's difficult/not possible, so I might need to be re-educated...</p>\n</blockquote>\n<p>The only significant constraint is that I need access to a <code>StoreContextMut&lt;T&gt;</code> for all (or nearly all) of them.  IIRC I should still be able to use <code>VMComponentBuiltins</code>, but I might need to add a function for each builtin to <code>VMStore</code> so that I can implement it for <code>impl&lt;T&gt; VMStore for StoreInner&lt;T&gt;</code>.  Does that sound familiar?</p>\n</blockquote>",
        "id": 495119972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737484165
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1924196780\">PR review comment</a>.</p>",
        "id": 495120042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737484194
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#pullrequestreview-2565577753\">PR review</a>.</p>",
        "id": 495134141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737489495
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1924294162\">PR review comment</a>:</p>\n<blockquote>\n<p>These are good points, but I'm also curious from a component-model-spec-perspective because at least for resources we're required to throw everything into a per-runtime-component-instance table as opposed to per-runtime-component-instance-and-resource-type table that we have right now. Is the same not true for futures/streams/etc where they're, at the component model level, going into separate tables?</p>\n</blockquote>",
        "id": 495134143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737489495
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#pullrequestreview-2565581718\">PR review</a>.</p>",
        "id": 495134568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737489628
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1924296638\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah right yes, and builtins don't get access to <code>T</code>.</p>\n<p>Could this be deferred to a future PR perhaps? We try to keep pretty tight control over all possible exits from wasm and adding a new one here will require both extra scrutiny as well as something along the lines of Pulley support eventually. My hope is that this is small enough we could defer this change to happening in the future.</p>\n</blockquote>",
        "id": 495134570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737489629
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#pullrequestreview-2565589690\">PR review</a>.</p>",
        "id": 495135313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737489893
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1924301001\">PR review comment</a>:</p>\n<blockquote>\n<p>Thinking about this some more, I wonder if it would be appropriate to make <code>ComponentTypesBuilder::error_context_table_type</code> <code>pub</code> and remove this alias.  In my mind, we really are talking about a table, of which there is one per subcomponent.  It's different than e.g. streams or futures since it's not generic, so we don't need a separate table per (component, payload) like we do for streams/futures, but we still need one table per component.  So I think having \"table\" in the name is appropriate and we should consistently use that term.</p>\n</blockquote>",
        "id": 495135314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737489894
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047\">PR #10047</a>.</p>",
        "id": 495136320,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737490319
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#pullrequestreview-2565603534\">PR review</a>.</p>",
        "id": 495136544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737490388
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1924309614\">PR review comment</a>:</p>\n<blockquote>\n<p>I just pushed an update that does what I described above.  Feel free to reopen this conversation if there's more to discuss.</p>\n</blockquote>",
        "id": 495136547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737490389
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#pullrequestreview-2565616126\">PR review</a>.</p>",
        "id": 495137747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737490838
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1924317076\">PR review comment</a>:</p>\n<blockquote>\n<p>Currently, all waitables (subtasks, futures, and streams) must be in the same table because <code>task.wait</code>, <code>task.poll</code>, and async callbacks all deal with waitable handles without additional context, so there can't be any ambiguity there.  AFAIK there's nothing in the spec (yet) that requires <code>error-context</code> or <code>resource</code> handles to be allocated from the same set as waitables, though.  @lukewagner can correct me if I'm wrong about that and/or clarify what the plan is going forward.</p>\n</blockquote>",
        "id": 495137751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737490838
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#pullrequestreview-2565621347\">PR review</a>.</p>",
        "id": 495138118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737491017
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1924320173\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok, I'll defer this part to a future PR.  Meanwhile, if you have thoughts about how you'd like that future PR to look, please let me know.</p>\n</blockquote>",
        "id": 495138119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737491017
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047\">PR #10047</a>.</p>",
        "id": 495138847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737491334
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#pullrequestreview-2565631414\">PR review</a>.</p>",
        "id": 495138932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737491375
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1924326461\">PR review comment</a>:</p>\n<blockquote>\n<p>I just pushed an update to revert the <code>VMComponentOffsets</code> changes.</p>\n</blockquote>",
        "id": 495138934,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737491376
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#pullrequestreview-2565910895\">PR review</a>.</p>",
        "id": 495166368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737503315
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#discussion_r1924502379\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok I think let's stay the course of what you've already got working and we can always come back in the future and start merging tables. That's on me for doing resources at some point...</p>\n</blockquote>",
        "id": 495166370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737503315
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047#pullrequestreview-2565911014\">PR review</a>.</p>",
        "id": 495166378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737503321
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047\">PR #10047</a>.</p>",
        "id": 495339168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737568091
    },
    {
        "content": "<p><strong>dicej</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047\">PR #10047</a> as ready for review.</p>",
        "id": 495339224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737568111
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047\">PR #10047</a>.</p>",
        "id": 495339230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737568112
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047\">PR #10047</a>.</p>",
        "id": 495339231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737568112
    },
    {
        "content": "<p>dicej has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047\">PR #10047</a>.</p>",
        "id": 495339291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737568130
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047\">PR #10047</a>.</p>",
        "id": 495347638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737569980
    },
    {
        "content": "<p>dicej has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047\">PR #10047</a>.</p>",
        "id": 495347651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737569987
    },
    {
        "content": "<p>dicej merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10047\">PR #10047</a>.</p>",
        "id": 495353968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737572163
    }
]