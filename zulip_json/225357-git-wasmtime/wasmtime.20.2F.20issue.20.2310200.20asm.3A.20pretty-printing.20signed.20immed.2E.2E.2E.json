[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10200\">issue #10200</a>:</p>\n<blockquote>\n<p>This issue outlines two problems I encountered adding new assembler instructions:</p>\n<ol>\n<li>to match <code>capstone</code>'s pretty-printing, we must distinguish between signed and unsigned immediates, both of which can be sign-extended (!)</li>\n<li>to avoid a semantic mismatch at the ISLE level, the assembler must clearly differentiate between signed and unsigned immediates with the same representation (@alexcrichton suggested using different types).</li>\n</ol>\n<p>Taken together, these two problems make it difficult to find a solution that satisfies both requirements. Let me explain: <code>capstone</code> pretty-prints immediates differently per instruction. The x64 <code>add</code> and <code>and</code> groups both have instructions that sign-extend a 32-bit immediate into a 64-bit one before the operation. The <code>add</code> output prints like a signed integer, but the <code>and</code> prints like an unsigned integer:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">::</span><span class=\"n\">addq_i_sxl</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Imm32</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mh\">0xd7f247b5</span><span class=\"p\">));</span>\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{add}\"</span><span class=\"p\">);</span>\n<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">addq</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"o\">-</span><span class=\"mh\">0x280db84b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">::</span><span class=\"n\">andq_i_sxl</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Imm32</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mh\">0xd7f247b5</span><span class=\"p\">));</span>\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{and}\"</span><span class=\"p\">);</span>\n<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">andq</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mh\">0xffffffffd7f247b5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n</code></pre></div>\n<p>This is probably due to <code>capstone</code> understanding that <code>add</code> is arithmetic and <code>and</code> is logical &mdash; makes sense, right? One solution to properly match what <code>capstone</code> prints is to add a new <code>simm*</code> form to the DSL: for sign-extending instructions, <code>add</code> would get the <code>simm*</code> form and print the signed integer (<code>$-0x...</code>), <code>and</code> would get the current <code>imm*</code> form and print the unsigned integer (<code>$0xffff...</code>)... just extended to the right width. (There are other solutions here, like switching to XED which prints both forms as unsigned integers, but we may not be ready for that just yet).</p>\n<p>But what about problem 2? @alexcrichton was concerned that if we don't differentiate the immediate type that the assembly instruction takes, we could try to pass in bit-equivalent values to these sign-extending instructions but then have unexpected effects when they are sign-extended; e.g., we pass in <code>254u8</code> to one of these instructions but it gets treated as <code>-2i8</code> and sign-extended to <code>-2i64</code>. We added this comment to track this:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/d943d57e78950da21dd430e0847f3b8fd0ade073/cranelift/codegen/src/isa/x64/lower/isle.rs#L965-L978\">https://github.com/bytecodealliance/wasmtime/blob/d943d57e78950da21dd430e0847f3b8fd0ade073/cranelift/codegen/src/isa/x64/lower/isle.rs#L965-L978</a></p>\n<p>Problem 1 and problem 2 interfere: if we choose to represent the <code>add</code> operand with <code>simm*</code> as suggested above, the instruction can accept a new <code>Simm*</code> type at the CLIF level that makes it clear that we accept a signed integer and that this will be sign-extended &mdash; all is well. But, the <code>and</code> operand would still be <code>imm*</code>, accepting an <code>Imm*</code> type, and still confusing the user at the CLIF level, as @alexcrichton was worried would happen. There are several solutions here, but none that I really like, so I'll just describe the problem for now.</p>\n</blockquote>",
        "id": 498185350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738866363
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10200#issuecomment-2640981486\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10200\">issue #10200</a>:</p>\n<blockquote>\n<p>Personally I feel like we should prioritize the representation of the types of the immediates to ensure it minimizes errors and is easy to use. Matching capstone exactly seems like something where we might want to instead engineer the test suite/fuzzing to remove that necessity. </p>\n<p>One possible option with that is to rework tests to (a) generate an arbitrary Inst, (b) convert Inst to binary, (c) print the Inst and use a different assembler to convert to binary (maybe <code>llvm-as</code>? maybe just <code>as</code>?), and finally (d) assert the binary is the same. That means that our exact printed format won't necessarily be the same as any other tool, but it does mean that what we print is accepted by a tool.</p>\n</blockquote>",
        "id": 498208011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738874949
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10200\">issue #10200</a>:</p>\n<blockquote>\n<p>This issue outlines two problems I encountered adding new assembler instructions:</p>\n<ol>\n<li>to match <code>capstone</code>'s pretty-printing, we must distinguish between signed and unsigned immediates, both of which can be sign-extended (!)</li>\n<li>to avoid a semantic mismatch at the ISLE level, the assembler must clearly differentiate between signed and unsigned immediates with the same representation (@alexcrichton suggested using different types).</li>\n</ol>\n<p>Taken together, these two problems make it difficult to find a solution that satisfies both requirements. Let me explain: <code>capstone</code> pretty-prints immediates differently per instruction. The x64 <code>add</code> and <code>and</code> groups both have instructions that sign-extend a 32-bit immediate into a 64-bit one before the operation. The <code>add</code> output prints like a signed integer, but the <code>and</code> prints like an unsigned integer:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">::</span><span class=\"n\">addq_i_sxl</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Imm32</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mh\">0xd7f247b5</span><span class=\"p\">));</span>\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{add}\"</span><span class=\"p\">);</span>\n<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">addq</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"o\">-</span><span class=\"mh\">0x280db84b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">::</span><span class=\"n\">andq_i_sxl</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Imm32</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mh\">0xd7f247b5</span><span class=\"p\">));</span>\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{and}\"</span><span class=\"p\">);</span>\n<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">andq</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mh\">0xffffffffd7f247b5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n</code></pre></div>\n<p>This is probably due to <code>capstone</code> understanding that <code>add</code> is arithmetic and <code>and</code> is logical &mdash; makes sense, right? One solution to properly match what <code>capstone</code> prints is to add a new <code>simm*</code> form to the DSL: for sign-extending instructions, <code>add</code> would get the <code>simm*</code> form and print the signed integer (<code>$-0x...</code>), <code>and</code> would get the current <code>imm*</code> form and print the unsigned integer (<code>$0xffff...</code>)... just extended to the right width. (There are other solutions here, like switching to XED which prints both forms as unsigned integers, but we may not be ready for that just yet).</p>\n<p>But what about problem 2? @alexcrichton was concerned that if we don't differentiate the immediate type that the assembly instruction takes, we could try to pass in bit-equivalent values to these sign-extending instructions but then have unexpected effects when they are sign-extended; e.g., we pass in <code>254u8</code> to one of these instructions but it gets treated as <code>-2i8</code> and sign-extended to <code>-2i64</code>. We added this comment to track this:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/d943d57e78950da21dd430e0847f3b8fd0ade073/cranelift/codegen/src/isa/x64/lower/isle.rs#L965-L978\">https://github.com/bytecodealliance/wasmtime/blob/d943d57e78950da21dd430e0847f3b8fd0ade073/cranelift/codegen/src/isa/x64/lower/isle.rs#L965-L978</a></p>\n<p>Problem 1 and problem 2 interfere: if we choose to represent the <code>add</code> operand with <code>simm*</code> as suggested above, the instruction can accept a new <code>Simm*</code> type at the CLIF level that makes it clear that we accept a signed integer and that this will be sign-extended &mdash; all is well. But, the <code>and</code> operand would still be <code>imm*</code>, accepting an <code>Imm*</code> type, and still confusing the user at the CLIF level, as @alexcrichton was worried would happen. There are several solutions here, but none that I really like, so I'll just describe the problem for now.</p>\n</blockquote>",
        "id": 499598771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739486290
    }
]