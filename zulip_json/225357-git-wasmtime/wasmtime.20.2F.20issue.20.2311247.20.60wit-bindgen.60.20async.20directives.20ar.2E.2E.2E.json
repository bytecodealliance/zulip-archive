[
    {
        "content": "<p>rvolosatovs opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11247\">issue #11247</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>For the most part, whether or not a function should be generated as <code>async</code> should be dictated by WIT (refs <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11246\">https://github.com/bytecodealliance/wasmtime/issues/11246</a>), however <code>wasmtime-wasi</code> might require generating some bindings as <code>async</code> even if they are not marked as such in WIT. See <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/bindings.rs#L21-L62\">https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/bindings.rs#L21-L62</a> for a full list of bindings generated as async in wasip3-prototyping. An example of a use case is e.g. <code>wasi:sockets</code> implementation, which relies on a (Rust) <code>async</code> socket address check hook <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/mod.rs#L52-L58\">https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/mod.rs#L52-L58</a> <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/host/types/tcp.rs#L220\">https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/host/types/tcp.rs#L220</a></p>\n<p>We need a way to \"inherit\" <code>async</code> directives from the WIT, while being able to \"mark\" additional ones as <code>async</code></p>\n<h4>Benefit</h4>\n<p>This will drastically cut down the amount of boilerplate required to generate bindings, since currently passing <code>only_imports</code> to <code>async</code> <code>bindgen</code> argument is the only way to choose imports to be <code>async</code>. Note, that at least with current implementation, users of <code>bindgen</code> relying on generated bindings using <code>with</code>, e.g. embedders extending <code>wasmtime_wasi</code> with additional bindings MUST inherit the complete <code>only_imports</code> list from bindings depended upon (e.g. <a href=\"https://github.com/rvolosatovs/wasmtime/blob/c822293b26a1f2720d5a4cd035a59a66d4512e90/crates/wasi/src/p3/bindings.rs#L36-L83\">https://github.com/rvolosatovs/wasmtime/blob/c822293b26a1f2720d5a4cd035a59a66d4512e90/crates/wasi/src/p3/bindings.rs#L36-L83</a>), otherwise compilation fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">D</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">HostConcurrent</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">p3</span><span class=\"o\">/</span><span class=\"n\">bindings</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">8</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"mi\">9</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">inline</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">10  | |         package example:wasi;</span>\n<span class=\"s\">...   |</span>\n<span class=\"s\">29  | |     concurrent_imports: true,</span>\n<span class=\"s\">30  | | });</span>\n<span class=\"s\">    | |__^ unsatisfied trait bound</span>\n<span class=\"s\">    |</span>\n<span class=\"s\">    = help: the trait `wasmtime_wasi::p3::bindings::sockets::types::HostConcurrent` is not implemented for `D`</span>\n<span class=\"s\">note: required by a bound in `wasmtime_wasi::p3::bindings::sockets::types::add_to_linker`</span>\n<span class=\"s\">   --&gt; /Users/rvolosatovs/src/github.com/bytecodealliance/wasmtime/crates/wasi/src/p3/bindings.rs:73:5</span>\n<span class=\"s\">    |</span>\n<span class=\"s\">73  | /     wasmtime::component::bindgen!({</span>\n<span class=\"s\">74  | |         path: \"</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">p3</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"s\">\",</span>\n<span class=\"s\">75  | |         world: \"</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">command</span><span class=\"s\">\",</span>\n<span class=\"s\">...   |</span>\n<span class=\"s\">125 | |         },</span>\n<span class=\"s\">126 | |     });</span>\n<span class=\"s\">    | |______^ required by this bound in `add_to_linker`</span>\n<span class=\"s\">    = note: the full name for the type has been written to '/var/folders/bq/thy1_b7x29l7s2wqw39r62yw0000gn/T/rustdoctestObmR6k/rust_out.long-type-7090683266425947309.txt'</span>\n<span class=\"s\">    = note: consider using `--verbose` to print the full type name to the console</span>\n<span class=\"s\">    = note: this error originates in the macro `wasmtime::component::bindgen` (in Nightly builds, run with -Z macro-backtrace for more info)</span>\n<span class=\"s\">help: consider further restricting type parameter `D` with trait `HostConcurrent`</span>\n<span class=\"s\">    |</span>\n<span class=\"s\">30  | }), D: wasmtime_wasi::p3::bindings::sockets::types::HostConcurrent;</span>\n<span class=\"s\">    |   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>\n</code></pre></div>\n<h4>Implementation</h4>\n<p>The simplest approach that comes to mind is something like:</p>\n<ul>\n<li>rename <code>async.only_imports</code> -&gt; <code>async.imports</code> (same for exports)</li>\n<li>introduce <code>inherit: true|false</code>, which is <code>true</code> by default and, when set to <code>true</code> would internally populate <code>imports</code> and <code>exports</code> lists with functions marked as <code>async</code> in WIT.</li>\n<li>marking a function as <code>async</code> twice (e.g. via <code>async</code> directive in WIT <em>and</em> by specifying it explicitly in <code>imports</code>) is <em>not</em> an error, but could show a warning/info statement if there was a verbose/debugging mode for the macro</li>\n</ul>\n<h4>Alternatives</h4>\n<p>we could require bindgen macro users who need extensibility to only rely on <code>only_imports</code> as such, but that seems pretty tedious.</p>\n</blockquote>",
        "id": 528896508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752596071
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11247\">issue #11247</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>For the most part, whether or not a function should be generated as <code>async</code> should be dictated by WIT (refs <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11246\">https://github.com/bytecodealliance/wasmtime/issues/11246</a>), however <code>wasmtime-wasi</code> might require generating some bindings as <code>async</code> even if they are not marked as such in WIT. See <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/bindings.rs#L21-L62\">https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/bindings.rs#L21-L62</a> for a full list of bindings generated as async in wasip3-prototyping. An example of a use case is e.g. <code>wasi:sockets</code> implementation, which relies on a (Rust) <code>async</code> socket address check hook <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/mod.rs#L52-L58\">https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/mod.rs#L52-L58</a> <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/host/types/tcp.rs#L220\">https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/host/types/tcp.rs#L220</a></p>\n<p>We need a way to \"inherit\" <code>async</code> directives from the WIT, while being able to \"mark\" additional ones as <code>async</code></p>\n<h4>Benefit</h4>\n<p>This will drastically cut down the amount of boilerplate required to generate bindings, since currently passing <code>only_imports</code> to <code>async</code> <code>bindgen</code> argument is the only way to choose imports to be <code>async</code>. Note, that at least with current implementation, users of <code>bindgen</code> relying on generated bindings using <code>with</code>, e.g. embedders extending <code>wasmtime_wasi</code> with additional bindings MUST inherit the complete <code>only_imports</code> list from bindings depended upon (e.g. <a href=\"https://github.com/rvolosatovs/wasmtime/blob/c822293b26a1f2720d5a4cd035a59a66d4512e90/crates/wasi/src/p3/bindings.rs#L36-L83\">https://github.com/rvolosatovs/wasmtime/blob/c822293b26a1f2720d5a4cd035a59a66d4512e90/crates/wasi/src/p3/bindings.rs#L36-L83</a>), otherwise compilation fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">D</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">HostConcurrent</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">p3</span><span class=\"o\">/</span><span class=\"n\">bindings</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">8</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"mi\">9</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">inline</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">10  | |         package example:wasi;</span>\n<span class=\"s\">...   |</span>\n<span class=\"s\">29  | |     concurrent_imports: true,</span>\n<span class=\"s\">30  | | });</span>\n<span class=\"s\">    | |__^ unsatisfied trait bound</span>\n<span class=\"s\">    |</span>\n<span class=\"s\">    = help: the trait `wasmtime_wasi::p3::bindings::sockets::types::HostConcurrent` is not implemented for `D`</span>\n<span class=\"s\">note: required by a bound in `wasmtime_wasi::p3::bindings::sockets::types::add_to_linker`</span>\n<span class=\"s\">   --&gt; /Users/rvolosatovs/src/github.com/bytecodealliance/wasmtime/crates/wasi/src/p3/bindings.rs:73:5</span>\n<span class=\"s\">    |</span>\n<span class=\"s\">73  | /     wasmtime::component::bindgen!({</span>\n<span class=\"s\">74  | |         path: \"</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">p3</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"s\">\",</span>\n<span class=\"s\">75  | |         world: \"</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">command</span><span class=\"s\">\",</span>\n<span class=\"s\">...   |</span>\n<span class=\"s\">125 | |         },</span>\n<span class=\"s\">126 | |     });</span>\n<span class=\"s\">    | |______^ required by this bound in `add_to_linker`</span>\n<span class=\"s\">    = note: the full name for the type has been written to '/var/folders/bq/thy1_b7x29l7s2wqw39r62yw0000gn/T/rustdoctestObmR6k/rust_out.long-type-7090683266425947309.txt'</span>\n<span class=\"s\">    = note: consider using `--verbose` to print the full type name to the console</span>\n<span class=\"s\">    = note: this error originates in the macro `wasmtime::component::bindgen` (in Nightly builds, run with -Z macro-backtrace for more info)</span>\n<span class=\"s\">help: consider further restricting type parameter `D` with trait `HostConcurrent`</span>\n<span class=\"s\">    |</span>\n<span class=\"s\">30  | }), D: wasmtime_wasi::p3::bindings::sockets::types::HostConcurrent;</span>\n<span class=\"s\">    |   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>\n</code></pre></div>\n<h4>Implementation</h4>\n<p>The simplest approach that comes to mind is something like:</p>\n<ul>\n<li>rename <code>async.only_imports</code> -&gt; <code>async.imports</code> (same for exports)</li>\n<li>introduce <code>inherit: true|false</code>, which is <code>true</code> by default and, when set to <code>true</code> would internally populate <code>imports</code> and <code>exports</code> lists with functions marked as <code>async</code> in WIT.</li>\n<li>marking a function as <code>async</code> twice (e.g. via <code>async</code> directive in WIT <em>and</em> by specifying it explicitly in <code>imports</code>) is <em>not</em> an error, but could show a warning/info statement if there was a verbose/debugging mode for the macro</li>\n</ul>\n<h4>Alternatives</h4>\n<p>we could require bindgen macro users who need extensibility to only rely on <code>only_imports</code> and such, but that seems pretty tedious.</p>\n</blockquote>",
        "id": 528896928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752596207
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11247\">issue #11247</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>For the most part, whether or not a function should be generated as <code>async</code> should be dictated by WIT (refs <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11246\">https://github.com/bytecodealliance/wasmtime/issues/11246</a>), however <code>wasmtime-wasi</code> might require generating some bindings as <code>async</code> even if they are not marked as such in WIT. See <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/bindings.rs#L21-L62\">https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/bindings.rs#L21-L62</a> for a full list of bindings generated as async in wasip3-prototyping. An example of a use case is e.g. <code>wasi:sockets</code> implementation, which relies on a (Rust) <code>async</code> socket address check hook <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/mod.rs#L52-L58\">https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/mod.rs#L52-L58</a> <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/host/types/tcp.rs#L220\">https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/host/types/tcp.rs#L220</a></p>\n<p>We need a way to \"inherit\" <code>async</code> directives from the WIT, while being able to \"mark\" additional ones as <code>async</code></p>\n<h4>Benefit</h4>\n<p>This will drastically cut down the amount of boilerplate required to generate bindings, since currently passing <code>only_imports</code> to <code>async</code> <code>bindgen</code> argument is the only way to choose imports to be <code>async</code>. Note, that at least with current implementation, users of <code>bindgen</code> relying on generated bindings using <code>with</code>, e.g. embedders extending <code>wasmtime_wasi</code> with additional bindings MUST inherit the complete <code>only_imports</code> list from bindings depended upon (e.g. <a href=\"https://github.com/rvolosatovs/wasmtime/blob/c822293b26a1f2720d5a4cd035a59a66d4512e90/crates/wasi/src/p3/bindings.rs#L36-L83\">https://github.com/rvolosatovs/wasmtime/blob/c822293b26a1f2720d5a4cd035a59a66d4512e90/crates/wasi/src/p3/bindings.rs#L36-L83</a>), otherwise compilation fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">D</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">HostConcurrent</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">p3</span><span class=\"o\">/</span><span class=\"n\">bindings</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">8</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"mi\">9</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">inline</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">10  | |         package example:wasi;</span>\n<span class=\"s\">...   |</span>\n<span class=\"s\">29  | |     concurrent_imports: true,</span>\n<span class=\"s\">30  | | });</span>\n<span class=\"s\">    | |__^ unsatisfied trait bound</span>\n<span class=\"s\">    |</span>\n<span class=\"s\">    = help: the trait `wasmtime_wasi::p3::bindings::sockets::types::HostConcurrent` is not implemented for `D`</span>\n<span class=\"s\">note: required by a bound in `wasmtime_wasi::p3::bindings::sockets::types::add_to_linker`</span>\n<span class=\"s\">   --&gt; /Users/rvolosatovs/src/github.com/bytecodealliance/wasmtime/crates/wasi/src/p3/bindings.rs:73:5</span>\n<span class=\"s\">    |</span>\n<span class=\"s\">73  | /     wasmtime::component::bindgen!({</span>\n<span class=\"s\">74  | |         path: \"</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">p3</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"s\">\",</span>\n<span class=\"s\">75  | |         world: \"</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">command</span><span class=\"s\">\",</span>\n<span class=\"s\">...   |</span>\n<span class=\"s\">125 | |         },</span>\n<span class=\"s\">126 | |     });</span>\n<span class=\"s\">    | |______^ required by this bound in `add_to_linker`</span>\n<span class=\"s\">    = note: the full name for the type has been written to '/var/folders/bq/thy1_b7x29l7s2wqw39r62yw0000gn/T/rustdoctestObmR6k/rust_out.long-type-7090683266425947309.txt'</span>\n<span class=\"s\">    = note: consider using `--verbose` to print the full type name to the console</span>\n<span class=\"s\">    = note: this error originates in the macro `wasmtime::component::bindgen` (in Nightly builds, run with -Z macro-backtrace for more info)</span>\n<span class=\"s\">help: consider further restricting type parameter `D` with trait `HostConcurrent`</span>\n<span class=\"s\">    |</span>\n<span class=\"s\">30  | }), D: wasmtime_wasi::p3::bindings::sockets::types::HostConcurrent;</span>\n<span class=\"s\">    |   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>\n</code></pre></div>\n<h4>Implementation</h4>\n<p>The simplest approach that comes to mind is something like:</p>\n<ul>\n<li>rename <code>async.only_imports</code> -&gt; <code>async.imports</code> (same for exports)</li>\n<li>introduce <code>inherit: true|false</code>, which is <code>true</code> by default and, when set to <code>true</code> would internally populate <code>imports</code> and <code>exports</code> lists with functions marked as <code>async</code> in WIT.</li>\n<li>marking a function as <code>async</code> twice (e.g. via <code>async</code> directive in WIT <em>and</em> by specifying it explicitly in <code>imports</code>) is <em>not</em> an error, but could show a warning/info statement if there was a verbose/debugging mode for the macro</li>\n</ul>\n<h4>Alternatives</h4>\n<p>we could require bindgen macro users who need extensibility to only rely on <code>only_imports</code> and such, but that seems pretty tedious.</p>\n<p><code>add_imports</code> or something like that, which would be mutually exclusive with <code>only_imports</code> is another option, but IMO just <code>imports</code> would be the least surprising option</p>\n<p><code>inherit_exports</code> and <code>inherit_imports</code> split is also possible, but IMO for use cases <em>so niche</em>, users should simply <em>not</em> use the \"inheritance\" at all and just manually specify the function names</p>\n</blockquote>",
        "id": 528897254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752596305
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:component-model-async label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11247\">Issue #11247</a>.</p>",
        "id": 528949201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752617208
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11247#issuecomment-3090603013\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11247\">issue #11247</a>:</p>\n<blockquote>\n<p>In case it makes your life easier: all the problematic wasi-sockets IP address hooks can IMO be removed or refactored such that the WIT async-ness matches the generated bindings' async-ness:</p>\n<ul>\n<li><code>[method]tcp-socket.receive</code>: Don't know why this needs a socket address hook. This method can only be called (successfully) after the TCP socket is already connected, at which point the hook will have already been called through either <code>connect</code> or <code>listen</code>.</li>\n<li><code>[method]tcp-socket.listen</code>: the method itself doesn't need to be async. It can perform the permission check inside the already-async <code>accept</code> loop task, before doing the first actual accept call. This way, there's only one mode of async-ness from the guest's POV.</li>\n<li><code>[method]tcp-socket.bind</code> &amp; <code>[method]udp-socket.bind</code>: Maybe these do not need a hook at all. <code>bind</code> itself does not gain the guest any capability to do I/O. It's the follow-up calls (<code>listen</code> or <code>connect</code> for TCP, <code>send</code> or <code>receive</code> for UDP) that actually perform I/O, and those are already marked <code>async</code> in WIT.</li>\n<li><code>[method]udp-socket.connect</code>: Does not perform I/O, so doesn't need permission checking. It's only the future calls to send &amp; receive that need permission checking, and those are already async.</li>\n</ul>\n</blockquote>",
        "id": 529521101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752869474
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11247#issuecomment-3102774438\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11247\">issue #11247</a>:</p>\n<blockquote>\n<p>Thanks for the analysis @badeend !<br>\nAnother reason we need the \"artificial\" async right now is the fact that we can't actually create stream or future handles from within sync bindings</p>\n</blockquote>",
        "id": 530149386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753191595
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11247#issuecomment-3102774438\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11247\">issue #11247</a>:</p>\n<blockquote>\n<p>Thanks for the analysis @badeend !<br>\nAnother reason we need the \"artificial\" async right now is the fact that we can't actually create stream or future handles from within sync bindings, so that's what drives the need for async <code>receive</code>, for example</p>\n</blockquote>",
        "id": 530149655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753191669
    },
    {
        "content": "<p>alexcrichton assigned alexcrichton to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11247\">issue #11247</a>.</p>",
        "id": 530835341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753471458
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11247\">issue #11247</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>For the most part, whether or not a function should be generated as <code>async</code> should be dictated by WIT (refs <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11246\">https://github.com/bytecodealliance/wasmtime/issues/11246</a>), however <code>wasmtime-wasi</code> might require generating some bindings as <code>async</code> even if they are not marked as such in WIT. See <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/bindings.rs#L21-L62\">https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/bindings.rs#L21-L62</a> for a full list of bindings generated as async in wasip3-prototyping. An example of a use case is e.g. <code>wasi:sockets</code> implementation, which relies on a (Rust) <code>async</code> socket address check hook <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/mod.rs#L52-L58\">https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/mod.rs#L52-L58</a> <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/host/types/tcp.rs#L220\">https://github.com/bytecodealliance/wasip3-prototyping/blob/3ce9ccb3efd3d15dc3ff55e31d0b85869847cf3f/crates/wasi/src/p3/sockets/host/types/tcp.rs#L220</a></p>\n<p>We need a way to \"inherit\" <code>async</code> directives from the WIT, while being able to \"mark\" additional ones as <code>async</code></p>\n<h4>Benefit</h4>\n<p>This will drastically cut down the amount of boilerplate required to generate bindings, since currently passing <code>only_imports</code> to <code>async</code> <code>bindgen</code> argument is the only way to choose imports to be <code>async</code>. Note, that at least with current implementation, users of <code>bindgen</code> relying on generated bindings using <code>with</code>, e.g. embedders extending <code>wasmtime_wasi</code> with additional bindings MUST inherit the complete <code>only_imports</code> list from bindings depended upon (e.g. <a href=\"https://github.com/rvolosatovs/wasmtime/blob/c822293b26a1f2720d5a4cd035a59a66d4512e90/crates/wasi/src/p3/bindings.rs#L36-L83\">https://github.com/rvolosatovs/wasmtime/blob/c822293b26a1f2720d5a4cd035a59a66d4512e90/crates/wasi/src/p3/bindings.rs#L36-L83</a>), otherwise compilation fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">D</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">HostConcurrent</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">p3</span><span class=\"o\">/</span><span class=\"n\">bindings</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">8</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"mi\">9</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">inline</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">10  | |         package example:wasi;</span>\n<span class=\"s\">...   |</span>\n<span class=\"s\">29  | |     concurrent_imports: true,</span>\n<span class=\"s\">30  | | });</span>\n<span class=\"s\">    | |__^ unsatisfied trait bound</span>\n<span class=\"s\">    |</span>\n<span class=\"s\">    = help: the trait `wasmtime_wasi::p3::bindings::sockets::types::HostConcurrent` is not implemented for `D`</span>\n<span class=\"s\">note: required by a bound in `wasmtime_wasi::p3::bindings::sockets::types::add_to_linker`</span>\n<span class=\"s\">   --&gt; /Users/rvolosatovs/src/github.com/bytecodealliance/wasmtime/crates/wasi/src/p3/bindings.rs:73:5</span>\n<span class=\"s\">    |</span>\n<span class=\"s\">73  | /     wasmtime::component::bindgen!({</span>\n<span class=\"s\">74  | |         path: \"</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">p3</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"s\">\",</span>\n<span class=\"s\">75  | |         world: \"</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">command</span><span class=\"s\">\",</span>\n<span class=\"s\">...   |</span>\n<span class=\"s\">125 | |         },</span>\n<span class=\"s\">126 | |     });</span>\n<span class=\"s\">    | |______^ required by this bound in `add_to_linker`</span>\n<span class=\"s\">    = note: the full name for the type has been written to '/var/folders/bq/thy1_b7x29l7s2wqw39r62yw0000gn/T/rustdoctestObmR6k/rust_out.long-type-7090683266425947309.txt'</span>\n<span class=\"s\">    = note: consider using `--verbose` to print the full type name to the console</span>\n<span class=\"s\">    = note: this error originates in the macro `wasmtime::component::bindgen` (in Nightly builds, run with -Z macro-backtrace for more info)</span>\n<span class=\"s\">help: consider further restricting type parameter `D` with trait `HostConcurrent`</span>\n<span class=\"s\">    |</span>\n<span class=\"s\">30  | }), D: wasmtime_wasi::p3::bindings::sockets::types::HostConcurrent;</span>\n<span class=\"s\">    |   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>\n</code></pre></div>\n<h4>Implementation</h4>\n<p>The simplest approach that comes to mind is something like:</p>\n<ul>\n<li>rename <code>async.only_imports</code> -&gt; <code>async.imports</code> (same for exports)</li>\n<li>introduce <code>inherit: true|false</code>, which is <code>true</code> by default and, when set to <code>true</code> would internally populate <code>imports</code> and <code>exports</code> lists with functions marked as <code>async</code> in WIT.</li>\n<li>marking a function as <code>async</code> twice (e.g. via <code>async</code> directive in WIT <em>and</em> by specifying it explicitly in <code>imports</code>) is <em>not</em> an error, but could show a warning/info statement if there was a verbose/debugging mode for the macro</li>\n</ul>\n<h4>Alternatives</h4>\n<p>we could require bindgen macro users who need extensibility to only rely on <code>only_imports</code> and such, but that seems pretty tedious.</p>\n<p><code>add_imports</code> or something like that, which would be mutually exclusive with <code>only_imports</code> is another option, but IMO just <code>imports</code> would be the least surprising option</p>\n<p><code>inherit_exports</code> and <code>inherit_imports</code> split is also possible, but IMO for use cases <em>so niche</em>, users should simply <em>not</em> use the \"inheritance\" at all and just manually specify the function names</p>\n</blockquote>",
        "id": 531437029,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753728917
    }
]