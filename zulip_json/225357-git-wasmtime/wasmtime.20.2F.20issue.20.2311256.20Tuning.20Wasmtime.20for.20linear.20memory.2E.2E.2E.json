[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256\">issue #11256</a>:</p>\n<blockquote>\n<p>This issue is a follow up to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11230\">https://github.com/bytecodealliance/wasmtime/pull/11230</a> and the discussion it spawned around Wasm guests like Rust and C++ that may want to use exceptions but will not use GC, and how we can allow Wasmtime to be tuned for these use cases when embedders know that will not also be running Wasm guests that use GC.</p>\n<p>I think it makes sense to open the discussion by enumerating our constraints and desired properties and then analyze potential options through that lens.</p>\n<p>Constraints:</p>\n<ol>\n<li>\n<p><strong>We must implement the full Wasm exceptions standard.</strong> Separately, we can potentially have a (compile-time and/or runtime) configuration where <code>exnref</code>s are disabled, for example, but Wasmtime must still provide an implementation of the full spec by default.</p>\n</li>\n<li>\n<p><strong>We must be able to collect exception-and-gc-object cycles.</strong> When GC is enabled, an exception can contain a GC reference to a (for example) a <code>struct</code> and that <code>struct</code> can have a reference to the exception. If either edge is an owning/rooting reference, then the cycle can never be collected. (Note that exceptions by themselves cannot form cycles, since they are immutable.)</p>\n</li>\n<li>\n<p><strong>We must only have one exceptions implementation.</strong> We do not have the engineering resources to maintain multiple, completely-disjoint implementations of the exceptions proposal. We can add knobs to turn certain subsets of functionality on or off, and tweak things here and there, but we can't realistically swap out the fundamental approach and representations.</p>\n</li>\n</ol>\n<p>Desired properties:</p>\n<ol>\n<li>\n<p><strong>Small memory overheads.</strong>  Fundamentally, exceptions must be stored <em>somewhere</em> and that will require memory. Additionally, they are dynamically sized and can have any number of payload fields, which further complicates things. But we shouldn't have to allocate the equivalent of a second full 4GiB linear memory for every LIME-style guest that uses exceptions and throws a couple of times during its execution, if it even throws at all.</p>\n</li>\n<li>\n<p><strong>Small code size.</strong> As always, all else being equal, smaller is better. Ideally we wouldn't have to include code in the binary for allocating <code>struct</code>s, for example, in builds for embedders that will only ever run LIME+exceptions Wasm programs.</p>\n</li>\n<li>\n<p><strong>Fast.</strong> As always, all else being equal, faster runtime execution is better.</p>\n</li>\n<li>\n<p><strong>Simple.</strong> As always, all else being equal, simpler and easier to maintain is better.</p>\n</li>\n</ol>\n<p>With that out of the way, I'll open up the issue for any ideas that people have!</p>\n</blockquote>",
        "id": 529111968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752689280
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the performance label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256\">Issue #11256</a>.</p>",
        "id": 529111969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752689280
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the wasmtime:config label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256\">Issue #11256</a>.</p>",
        "id": 529111972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752689281
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the wasmtime:code-size label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256\">Issue #11256</a>.</p>",
        "id": 529111973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752689281
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the wasm-proposal:exceptions label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256\">Issue #11256</a>.</p>",
        "id": 529111974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752689281
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079818171\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256\">issue #11256</a>:</p>\n<blockquote>\n<h3>Existing WIP Exceptions Implementation</h3>\n<p>So here is an analysis of the current WIP exceptions implementation through the lens of the above constraints and desired properties:</p>\n<ul>\n<li><strong>Constraint 1: 5/5.</strong> It is able to represent all potential exceptions and <code>exnref</code>. We will be able to implement the full spec on top of it.</li>\n<li><strong>Constraint 2: 5/5.</strong> Because exceptions are just GC objects, the collector can identify and collect cycles between exceptions and other GC objects.</li>\n<li><strong>Constraint 3: 5/5.</strong> It is the only implementation.</li>\n<li><strong>Desired property 1: 2/5.</strong> It requires allocating a second linear memory to be the GC heap. For what it is worth, this linear memory starts with zero capacity and is grown in an amortized, doubling manner, rather than immediately to the full maximum capacity. The GC heap memory has identical configuration as regular linear memories today, meaning that its minimum non-zero size will be 64KiB and will require large virtual memory reservations and guard regions in practice.</li>\n<li><strong>Desired property 2: 1/5.</strong> The common GC infrastructure, at least one collector, code to allocate/manipulate <code>struct</code>s and <code>array</code>s, and all of <code>wasmtime::StructRef</code> et al must be also be enabled when exceptions are enabled.</li>\n<li><strong>Desired property 3: 5/5.</strong> Depending on the configured collector, we can use bump allocation to allocate exceptions. Doesn't really get faster than that.</li>\n<li><strong>Desired property 4: 5/5.</strong> Reuses existing infrastructure we must maintain anyways.</li>\n<li><strong>Desired property 5: 5/5.</strong> Sandboxes all accesses of exceptions, same as other accesses into the GC heap.<br>\n</li>\n</ul>\n</blockquote>",
        "id": 529115684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752690781
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256\">issue #11256</a>:</p>\n<blockquote>\n<p>This issue is a follow up to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11230\">https://github.com/bytecodealliance/wasmtime/pull/11230</a> and the discussion it spawned around Wasm guests like Rust and C++ that may want to use exceptions but will not use GC, and how we can allow Wasmtime to be tuned for these use cases when embedders know that will not also be running Wasm guests that use GC.</p>\n<p>I think it makes sense to open the discussion by enumerating our constraints and desired properties and then analyze potential options through that lens.</p>\n<p>Constraints:</p>\n<ol>\n<li>\n<p><strong>We must implement the full Wasm exceptions standard.</strong> Separately, we can potentially have a (compile-time and/or runtime) configuration where <code>exnref</code>s are disabled, for example, but Wasmtime must still provide an implementation of the full spec by default.</p>\n</li>\n<li>\n<p><strong>We must be able to collect exception-and-gc-object cycles.</strong> When GC is enabled, an exception can contain a GC reference to a (for example) a <code>struct</code> and that <code>struct</code> can have a reference to the exception. If either edge is an owning/rooting reference, then the cycle can never be collected. (Note that exceptions by themselves cannot form cycles, since they are immutable.)</p>\n</li>\n<li>\n<p><strong>We must only have one exceptions implementation.</strong> We do not have the engineering resources to maintain multiple, completely-disjoint implementations of the exceptions proposal. We can add knobs to turn certain subsets of functionality on or off, and tweak things here and there, but we can't realistically swap out the fundamental approach and representations.</p>\n</li>\n</ol>\n<p>Desired properties:</p>\n<ol>\n<li>\n<p><strong>Small memory overheads.</strong>  Fundamentally, exceptions must be stored <em>somewhere</em> and that will require memory. Additionally, they are dynamically sized and can have any number of payload fields, which further complicates things. But we shouldn't have to allocate the equivalent of a second full 4GiB linear memory for every LIME-style guest that uses exceptions and throws a couple of times during its execution, if it even throws at all.</p>\n</li>\n<li>\n<p><strong>Small code size.</strong> As always, all else being equal, smaller is better. Ideally we wouldn't have to include code in the binary for allocating <code>struct</code>s, for example, in builds for embedders that will only ever run LIME+exceptions Wasm programs.</p>\n</li>\n<li>\n<p><strong>Fast.</strong> As always, all else being equal, faster runtime execution is better.</p>\n</li>\n<li>\n<p><strong>Simple.</strong> As always, all else being equal, simpler and easier to maintain is better.</p>\n</li>\n<li>\n<p><strong>Secure.</strong> Everything we add to Wasmtime must be absent known security vulnerabilities or fundamental flaws -- we would never accept an implementation with known use-after-free bugs or which fundamentally allows Wasm guests to escape the sandbox -- but, all else being equal, implementations with more security assurances are better than those with less assurances.</p>\n</li>\n</ol>\n<p>With that out of the way, I'll open up the issue for any ideas that people have!</p>\n</blockquote>",
        "id": 529115737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752690803
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079966532\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256\">issue #11256</a>:</p>\n<blockquote>\n<h3>Reserve N bytes in the <code>vmctx</code> for a single exception object</h3>\n<p>This is an idea that has been floated in the past. We reserve space in the <code>Store</code>/<code>vmctx</code> for an exception, only allow one exception to be live at any time in the whole <code>Store</code>, and disallow exceptions that do not fit. This is very nice in terms of our desired properties, but because it is so limited, it doesn't actually satisfy our hard constraints.</p>\n<ul>\n<li><strong>Constraint 1: 1/5.</strong> We cannot implement the full exceptions standard with this approach, because we cannot have multiple <code>exnref</code>s live at the same time.</li>\n<li><strong>Constraint 2: ?/5.</strong> It is unclear exactly what the memory/lifetime management would be here.</li>\n<li><strong>Constraint 3: 1/5.</strong> Because this does not satisfy constraint 1, we would need another implementation that does.</li>\n<li><strong>Desired property 1: 5/5.</strong> Reserves minimal additional space, and it is even part of the existing <code>vmctx</code> allocation, rather than a new allocation.</li>\n<li><strong>Desired property 2: 5/5.</strong> Would need only minimal additional runtime infrastructure, and would not need the GC infrastructure, for example.</li>\n<li><strong>Desired property 3: 5/5.</strong> Allocating an exception just writes the payload data into a known location.</li>\n<li><strong>Desired property 4: 5/5.</strong> It's pretty much just <code>vmctx</code> accesses, something we must already do a lot of.</li>\n<li><strong>Desired property 5: 5/5.</strong> Easy to have confindence in because of its simplicity.<br>\n</li>\n</ul>\n</blockquote>",
        "id": 529152322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752693374
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079980308\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256\">issue #11256</a>:</p>\n<blockquote>\n<h3>Some kind of simple, non-GC representation of exceptions</h3>\n<p>There are a couple approaches in this family, notably:</p>\n<ul>\n<li>We could represent exceptions as indices into a side table (something like <code>wasmtime_slab::Slab&lt;VMException&gt;</code> or <code>Vec&lt;VMException&gt;</code>) hanging off the <code>Store</code>/<code>vmctx</code>.</li>\n<li>We could represent exceptions as <code>malloc</code>ed <code>*mut VMException</code>s.</li>\n</ul>\n<p>And these objects could either be refcounted or leaked until the <code>Store</code> is dropped.</p>\n<p>Again, these approaches can rate pretty well in terms of some of our desired properties, depending on the exact details, but they cannot satisfy constraints 2 and 3 at the same time.</p>\n<ul>\n<li><strong>Constraint 1: 5/5.</strong> We could implement all of the exceptions proposal this way.</li>\n<li><strong>Constraint 2: 1/5.</strong> If we leak these objects until the store is dropped, then we are also leaking any GC objects that they transitively reference and we definitely cannot collect cycles. If they are reference counted, then we cannot collect cycles between exceptions and the GC heap (at least not without adding another meta-collector to collect such cycles, like Firefox must do for Gecko DOM objects and JS GC objects, but this would add code size to builds with GC as well as complexity and duplicate collector implementation/maintenance).</li>\n<li><strong>Constraint 3: 1/5.</strong> Because this cannot satisfy constraint 2, we would need another implementation that can.</li>\n<li><strong>Desired property 1: 5/5.</strong> Depending on the exact details chosen, reserves minimal additional space. Potentially batches the allocation of many exceptions into a single allocation, if using a side table rather than individual <code>malloc</code>s. If the side table is fixed size, could even be inlined into the <code>VMStoreContext</code> allocation.</li>\n<li><strong>Desired property 2: 2/5 or 5/5.</strong> If exceptions are leaked until the <code>Store</code> is dropped, then we would need only minimal additional runtime infrastructure. If they are reference counted, however, then we would need to do deferred reference counting, just like our existing DRC collector, or else objects in frames that we skip over when trapping would be leaked. That implies roughly as much runtime code as Wasm GC does.</li>\n<li><strong>Desired property 3: 3/5 or 5/5.</strong> Either some kind of free list operation or the equivalent of a <code>Vec::push</code>.</li>\n<li><strong>Desired property 4: 1/5 or 3/5.</strong> In isolation, seems fairly simple, especially if leaking exceptions until the <code>Store</code> is dropped, but either way this code is only additive and doesn't reuse existing infrastructure. Even worse if we are creating new variants of all of deferred reference counting.</li>\n<li><strong>Desired property 5: 1/5 or 5/5.</strong> If we sandbox the exceptions in a side table, bounds check all those accesses, and do not trust anything we read out of the table, then this is equivalent to our sandboxed GC heaps in terms of security assurances. If we don't do that, then this is a new case of Wasm manipulating raw native pointers, and we are at pretty big risk of miscompilations becoming disastrous.<br>\n</li>\n</ul>\n</blockquote>",
        "id": 529152845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752693616
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3080020251\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256\">issue #11256</a>:</p>\n<blockquote>\n<h3>Extension to current implementation: add config knobs for GC heap memories that are separate from linear memory config knobs</h3>\n<p>This alleviates on of the weaknesses of our current implementation by allowing the memories used for GC heaps to be configured separately from regular linear memories.</p>\n<p>The pooling allocator would also need some small updates: right now it assumes that GC heap memories and linear memories are identical and uses the same pool for both. That would need to become an optimization or config option and when the two kinds of memories have different configurations the pooling allocator would need to have a separate pool for GC heap memories.</p>\n<ul>\n<li><strong>Constraint 1: 5/5.</strong> <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079818171\">ditto</a>.</li>\n<li><strong>Constraint 2: 5/5.</strong> <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079818171\">ditto</a>.</li>\n<li><strong>Constraint 3: 5/5.</strong> <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079818171\">ditto</a>.</li>\n<li><strong>Desired property 1: 5/5.</strong> Once GC heap memories and linear memories can be configured separately, GC heaps can be very small, even just (say) 128 bytes, via the use of \"custom-page-sizes\" for GC heaps' memories. No separate host allocations per exception object. Equivalent, in terms of memory overhead, to the <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079980308\">side table approach</a>.</li>\n<li><strong>Desired property 2: 1/5.</strong> <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079818171\">ditto</a>.</li>\n<li><strong>Desired property 3: 5/5.</strong> <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079818171\">ditto</a>.</li>\n<li><strong>Desired property 4: 5/5.</strong> <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079818171\">ditto</a>.</li>\n<li><strong>Desired property 5: 5/5.</strong> <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079818171\">ditto</a>.<br>\n</li>\n</ul>\n</blockquote>",
        "id": 529154799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752694458
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3080072578\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256\">issue #11256</a>:</p>\n<blockquote>\n<h3>Extension to current implementation: <code>#[cfg]</code>-gate <code>struct</code> and <code>array</code> separately from the core GC runtime</h3>\n<p>Right now, <code>#[cfg(feature = \"gc\")]</code> controls whether a build includes both</p>\n<ul>\n<li>the core GC runtime (like sandboxed GC heap accesses and whether a <code>Store</code> can have an associated GC heap; note that each collector already has its own feature flag), and</li>\n<li>the runtime functions for allocating and manipulating <code>struct</code> and <code>array</code> objects in particular and their reflections in host APIs like <code>wasmtime::StructRef</code> and <code>wasmtime::ArrayRef</code>.</li>\n</ul>\n<p>The current exceptions implementation only requires the former, and does not need the latter. We could tweak our <code>cfg</code> feature flags and our uses of them such that we could include the core GC runtime in a build but not any of the <code>struct</code> and <code>array</code> specifics.</p>\n<ul>\n<li><strong>Constraint 1: 5/5.</strong> <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079818171\">ditto</a>.</li>\n<li><strong>Constraint 2: 5/5.</strong> <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079818171\">ditto</a>.</li>\n<li><strong>Constraint 3: 5/5.</strong> <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079818171\">ditto</a>.</li>\n<li><strong>Desired property 1: 2/5.</strong> <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079818171\">ditto</a>.</li>\n<li><strong>Desired property 2: 2/5, 3/5, or 4/5?</strong> This should somewhat improve code size over the current implementation, but it isn't clear by exactly how much.</li>\n<li><strong>Desired property 3: 5/5.</strong> <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079818171\">ditto</a>.</li>\n<li><strong>Desired property 4: 5/5.</strong> <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079818171\">ditto</a>.</li>\n<li><strong>Desired property 5: 5/5.</strong> <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3079818171\">ditto</a>.<br>\n</li>\n</ul>\n</blockquote>",
        "id": 529157014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752695405
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3080087593\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256\">issue #11256</a>:</p>\n<blockquote>\n<p>Finally, it is also worth noting that the previous two extensions of the current implementation are compatible with each other, so if we consider them together, then we get the following rating, which is pretty good along all of our dimensions:</p>\n<ul>\n<li><strong>Constraint 1: 5/5.</strong></li>\n<li><strong>Constraint 2: 5/5.</strong></li>\n<li><strong>Constraint 3: 5/5.</strong></li>\n<li><strong>Desired property 1: 5/5.</strong></li>\n<li><strong>Desired property 2: 2/5, 3/5, or 4/5?</strong></li>\n<li><strong>Desired property 3: 5/5.</strong></li>\n<li><strong>Desired property 4: 5/5.</strong></li>\n<li><strong>Desired property 5: 5/5.</strong><br>\n</li>\n</ul>\n</blockquote>",
        "id": 529157364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752695565
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3080349019\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256\">issue #11256</a>:</p>\n<blockquote>\n<p>Thanks very much for writing out all of these tradeoffs explicitly! This indeed captures all of the reasoning behind #11230 and much more, and more clearly than I laid out there.</p>\n<p>I'll add a personal note that I went through many of these options in sequence as I was working out a design and I am sympathetic to the desire to find \"something simpler\" -- it doesn't feel at first like GC should be so tightly coupled. Unfortunately, in an engine that has both, it does seem to be that way.</p>\n<p>I think the only thing I would add is that, with respect to the last option (\"<code>#[cfg]</code>-gate <code>struct</code> and <code>array</code> separately\") it is absolutely worth measuring, but I suspect the savings here might not be as much as one would hope: almost all of the machinery is in shared bits (GC algorithm but also e.g. the engine type registry); exceptions are \"just another enum arm\" in most places; and the host API layer will mostly fall away via link-time per-function GC if not used by the embedder. That said, I share your hunch that a small GC algorithm shouldn't add <em>that</em> much code-size. And to the extent that it does, that mechanism is what one would need to build anyway (just as you say: \"That implies roughly as much runtime code as Wasm GC does.\"!).<br>\n</p>\n</blockquote>",
        "id": 529161814,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752697486
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3080833507\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256\">issue #11256</a>:</p>\n<blockquote>\n<p>Agreed thanks for writing this all up!</p>\n<p>My intuition matches what y'all are reaching as well I think, which is that the most viable path forward is combining knobs for GC memory with more aggressive #[cfg]. What I might add to the mix here though is the concept of a new GC entirely (e.g. implementation of <code>GcRuntime</code>. Everything in Wasmtime is already factored for multiple <code>GcRuntime</code> implementations so I wouldn't consider this too too large of a maintenance burden, and I think we could codify some simple rules for a GC that makes it unsuitable for general-purpose usage but suitable for \"low runtime cost and low runtime footprint\":</p>\n<ul>\n<li>This gc would basically be a DRC collector for exnref objects, but that's it.</li>\n<li>This DRC collector wouldn't support exnref-in-exnref (probably via some slice/subset of the exception-handling proposal). That means GC objects can't point to other GC objects.</li>\n<li>This DRC collector would only support allocating a fixed size object (also via a slice/subset of the exception-handling proposal), for example each exception is always 128 bytes or something like that.</li>\n</ul>\n<p>This would make GC allocation and GC operations practically trivial and my guess is that this would reduce a lot of the hypothetical overhead of the full-blown DRC collector for all exnref objects. Naturally though I'd also say that we should measure the different, for example, between the code footprint of the null collector and drc collector since that's sort of the upper and lower bounds of this hypothetical new collector.</p>\n<p>In the near-term though I continue to feel that the order, in decreasing priority, things should happen are (1) implement the full proposal with everything integerated (aka the current trajectory), (2) work on separate GC knobs to make the runtime impact as low as we can, or basically don't require a second linear memory just for setjmp/longjmp in practice, and (3) follow-up with work to reduce the runtime footprint of the setjmp/longjmp use case.</p>\n</blockquote>",
        "id": 529168028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752700396
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256#issuecomment-3080833507\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11256\">issue #11256</a>:</p>\n<blockquote>\n<p>Agreed thanks for writing this all up!</p>\n<p>My intuition matches what y'all are reaching as well I think, which is that the most viable path forward is combining knobs for GC memory with more aggressive #[cfg]. What I might add to the mix here though is the concept of a new GC entirely (e.g. implementation of <code>GcRuntime</code>). Everything in Wasmtime is already factored for multiple <code>GcRuntime</code> implementations so I wouldn't consider this too too large of a maintenance burden, and I think we could codify some simple rules for a GC that makes it unsuitable for general-purpose usage but suitable for \"low runtime cost and low runtime footprint\":</p>\n<ul>\n<li>This gc would basically be a DRC collector for exnref objects, but that's it.</li>\n<li>This DRC collector wouldn't support exnref-in-exnref (probably via some slice/subset of the exception-handling proposal). That means GC objects can't point to other GC objects.</li>\n<li>This DRC collector would only support allocating a fixed size object (also via a slice/subset of the exception-handling proposal), for example each exception is always 128 bytes or something like that.</li>\n</ul>\n<p>This would make GC allocation and GC operations practically trivial and my guess is that this would reduce a lot of the hypothetical overhead of the full-blown DRC collector for all exnref objects. Naturally though I'd also say that we should measure the different, for example, between the code footprint of the null collector and drc collector since that's sort of the upper and lower bounds of this hypothetical new collector.</p>\n<p>In the near-term though I continue to feel that the order, in decreasing priority, things should happen are (1) implement the full proposal with everything integerated (aka the current trajectory), (2) work on separate GC knobs to make the runtime impact as low as we can, or basically don't require a second linear memory just for setjmp/longjmp in practice, and (3) follow-up with work to reduce the runtime footprint of the setjmp/longjmp use case.</p>\n</blockquote>",
        "id": 529168063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752700415
    }
]