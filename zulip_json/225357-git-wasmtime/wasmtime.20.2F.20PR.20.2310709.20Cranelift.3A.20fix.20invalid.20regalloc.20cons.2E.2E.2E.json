[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10709\">PR #10709</a> from <code>cfallin:fix-try-call-with-empty-handlers</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>(Reported by @bjorn3 -- thanks!)</p>\n<p>We handle edge splitting for regalloc moves in a way that is designed to split minimally (for copmiler performance and codegen quality): we only split edges that are truly critical, i.e., come from a block with more than one successor and go to a block with more than one predecessor. In all other cases, there is always a place for these moves to go: if a block only has one successor, then edge-moves can go before its jump; and if a block only has one predecessor, then edge-moves can go at the beginning of that block (before the blockparams' parallel-move). The former case -- before the branch -- works because of a restriction that regalloc2 imposes: branches with only one target (that is, unconditional branches) cannot have any arguments. Otherwise, those uses would occur after the edge-moves have already shuffled the register state into a state suitable for the next block. Violating this constraint leads to a panic.</p>\n<p>With ordinary unconditional branches, this is no problem. With <code>try_call</code>s with at least one handler listed, this is also no problem: such a terminator is seen as a branch with (at least) two targets by regalloc, so no edge-moves are placed before it, so it's allowed to have arguments, such as the arguments to the call itself. However, a <code>try_call</code> with <em>no</em> handler clauses, though pathological, appears to regalloc as an unconditional branch and so should not have any arguments. The included test-case triggers this issue with such a <code>try_call</code> together with a normal-return target branch that has more than one incoming edge, forcing the location for the moves into the <code>try_call</code>'s block. (The lack of actual edge-moves doesn't matter -- RA2 performs the check on the IR restriction first.) The result is a panic at compile time.</p>\n<p>This PR fixes the issue by extending a similar fix for <code>br_table</code>s (which can trigger a very similar bug if they have only the default case, i.e., one target) to <code>try_call{,_indirect}</code> as well: the lowered-block order computation, where edge-splits are determined, pretends that they always have at least two successors. This ensures that edges will be split as necessary, satisfying the no-arguments-to-unconditional-terminators restriction.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 515765743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746207666
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10709\">PR #10709</a>.</p>",
        "id": 515765747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746207666
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10709\">PR #10709</a>.</p>",
        "id": 515765748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746207667
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10709\">PR #10709</a>.</p>",
        "id": 515766040,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746207766
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10709\">PR #10709</a>:</p>\n<blockquote>\n<p>(Reported by @bjorn3 -- thanks!)</p>\n<p>We handle edge splitting for regalloc moves in a way that is designed to split minimally (for compiler performance and codegen quality): we only split edges that are truly critical, i.e., come from a block with more than one successor and go to a block with more than one predecessor. In all other cases, there is always a place for these moves to go: if a block only has one successor, then edge-moves can go before its jump; and if a block only has one predecessor, then edge-moves can go at the beginning of that block (before the blockparams' parallel-move). The former case -- before the branch -- works because of a restriction that regalloc2 imposes: branches with only one target (that is, unconditional branches) cannot have any arguments. Otherwise, those uses would occur after the edge-moves have already shuffled the register state into a state suitable for the next block. Violating this constraint leads to a panic.</p>\n<p>With ordinary unconditional branches, this is no problem. With <code>try_call</code>s with at least one handler listed, this is also no problem: such a terminator is seen as a branch with (at least) two targets by regalloc, so no edge-moves are placed before it, so it's allowed to have arguments, such as the arguments to the call itself. However, a <code>try_call</code> with <em>no</em> handler clauses, though pathological, appears to regalloc as an unconditional branch and so should not have any arguments. The included test-case triggers this issue with such a <code>try_call</code> together with a normal-return target branch that has more than one incoming edge, forcing the location for the moves into the <code>try_call</code>'s block. (The lack of actual edge-moves doesn't matter -- RA2 performs the check on the IR restriction first.) The result is a panic at compile time.</p>\n<p>This PR fixes the issue by extending a similar fix for <code>br_table</code>s (which can trigger a very similar bug if they have only the default case, i.e., one target) to <code>try_call{,_indirect}</code> as well: the lowered-block order computation, where edge-splits are determined, pretends that they always have at least two successors. This ensures that edges will be split as necessary, satisfying the no-arguments-to-unconditional-terminators restriction.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 515766053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746207773
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10709#issuecomment-2847779487\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10709\">PR #10709</a>:</p>\n<blockquote>\n<p>Please remove the @ mention from the commit message and PR description to avoid pinging me every time someone pushes it to their repo.</p>\n</blockquote>",
        "id": 515767607,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746208327
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10709\">PR #10709</a>.</p>",
        "id": 515768312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746208582
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10709\">PR #10709</a>:</p>\n<blockquote>\n<p>(Reported by bjorn3 -- thanks!)</p>\n<p>We handle edge splitting for regalloc moves in a way that is designed to split minimally (for compiler performance and codegen quality): we only split edges that are truly critical, i.e., come from a block with more than one successor and go to a block with more than one predecessor. In all other cases, there is always a place for these moves to go: if a block only has one successor, then edge-moves can go before its jump; and if a block only has one predecessor, then edge-moves can go at the beginning of that block (before the blockparams' parallel-move). The former case -- before the branch -- works because of a restriction that regalloc2 imposes: branches with only one target (that is, unconditional branches) cannot have any arguments. Otherwise, those uses would occur after the edge-moves have already shuffled the register state into a state suitable for the next block. Violating this constraint leads to a panic.</p>\n<p>With ordinary unconditional branches, this is no problem. With <code>try_call</code>s with at least one handler listed, this is also no problem: such a terminator is seen as a branch with (at least) two targets by regalloc, so no edge-moves are placed before it, so it's allowed to have arguments, such as the arguments to the call itself. However, a <code>try_call</code> with <em>no</em> handler clauses, though pathological, appears to regalloc as an unconditional branch and so should not have any arguments. The included test-case triggers this issue with such a <code>try_call</code> together with a normal-return target branch that has more than one incoming edge, forcing the location for the moves into the <code>try_call</code>'s block. (The lack of actual edge-moves doesn't matter -- RA2 performs the check on the IR restriction first.) The result is a panic at compile time.</p>\n<p>This PR fixes the issue by extending a similar fix for <code>br_table</code>s (which can trigger a very similar bug if they have only the default case, i.e., one target) to <code>try_call{,_indirect}</code> as well: the lowered-block order computation, where edge-splits are determined, pretends that they always have at least two successors. This ensures that edges will be split as necessary, satisfying the no-arguments-to-unconditional-terminators restriction.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 515768349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746208594
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10709#issuecomment-2847787832\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10709\">PR #10709</a>:</p>\n<blockquote>\n<p>Sorry about that -- amended the commit and edited the description.</p>\n</blockquote>",
        "id": 515768394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746208608
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10709#pullrequestreview-2812675410\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for the detailed description! Made understanding this easy <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 515775979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746211195
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10709\">PR #10709</a>.</p>",
        "id": 515779531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746212493
    }
]