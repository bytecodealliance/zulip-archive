[
    {
        "content": "<p><a href=\"https://github.com/pimeys\">pimeys</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">Issue #10449</a>.</p>",
        "id": 507240361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742552966
    },
    {
        "content": "<p>pimeys opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>In our repository, we have versioned wit shared by our host and guest code. One of the bindgen calls started generating invalid Rust code when we updated wasmtime from version 30 to version 31:</p>\n<p><a href=\"https://github.com/grafbase/grafbase/blob/renovate/wasmtime/crates/wasi-component-loader/src/extension/api/since_0_8_0/wit.rs\">https://github.com/grafbase/grafbase/blob/renovate/wasmtime/crates/wasi-component-loader/src/extension/api/since_0_8_0/wit.rs</a></p>\n<p>Then again the next version of this wit, which is just reorganized and a few things are changed in the method calls, this generates correct code:</p>\n<p><a href=\"https://github.com/grafbase/grafbase/blob/renovate/wasmtime/crates/wasi-component-loader/src/extension/api/since_0_9_0/wit.rs\">https://github.com/grafbase/grafbase/blob/renovate/wasmtime/crates/wasi-component-loader/src/extension/api/since_0_9_0/wit.rs</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Clone repo <a href=\"https://github.com/grafbase/grafbase\">https://github.com/grafbase/grafbase</a></li>\n<li>Compile the crate crates/wasi-component-loader with cargo build, it should work.</li>\n<li>Change the branch to renovate/wasmtime which updates wasmtime from 30 to 31</li>\n<li>See the bindgen macro giving an error: use of undeclared lifetime name 'a</li>\n</ul>\n<h3>Expected Results</h3>\n<p>Updating wasmtime should not lead to invalid Rust code.</p>\n<h3>Actual Results</h3>\n<p>If you expand the macro with an error, we see code like this generated:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">DirectiveSite</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">__with_name0</span><span class=\"p\">::</span><span class=\"n\">DirectiveSite</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">FieldDefinitionDirective</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">__with_name0</span><span class=\"p\">::</span><span class=\"n\">FieldDefinitionDirective</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>The 0.9.0 wit macro does not generate code like this, nor does wasmtime 30 for the exact same macro call.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime: 31.0.0<br>\nOperating system: Aurora Linux<br>\nArchitecture: x86_64</p>\n</blockquote>",
        "id": 507240363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742552967
    },
    {
        "content": "<p>pimeys <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449#issuecomment-2742975841\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<p>This looks like the source of the issue:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/10311\">https://github.com/bytecodealliance/wasmtime/pull/10311</a></p>\n<p>Ping @pchickey </p>\n</blockquote>",
        "id": 507242256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742553498
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449#issuecomment-2744113167\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<p>Thanks for the bug report - will look into this soon</p>\n</blockquote>",
        "id": 507340013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742580822
    },
    {
        "content": "<p>pchickey assigned pchickey to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>.</p>",
        "id": 507340018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742580824
    },
    {
        "content": "<p>pimeys <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449#issuecomment-2823860792\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<p>Is the fix for this included in the latest release? <a href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/v32.0.0\">https://github.com/bytecodealliance/wasmtime/releases/tag/v32.0.0</a></p>\n</blockquote>",
        "id": 513835620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745404813
    },
    {
        "content": "<p>fbjork <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449#issuecomment-2858538932\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<p>@pchickey is this issue fixed?</p>\n</blockquote>",
        "id": 516671840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746623387
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449#issuecomment-2859439937\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<p>Hi - sorry, this fell off my radar, no its not fixed. I will try to get to it but I'm on vacation for the second half of May so I'm working to finish other projects before then. </p>\n</blockquote>",
        "id": 516730860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746638506
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:component-model label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">Issue #10449</a>.</p>",
        "id": 516936862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746721800
    },
    {
        "content": "<p>alexcrichton assigned alexcrichton to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>.</p>",
        "id": 516936886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746721802
    },
    {
        "content": "<p>alexcrichton unassigned pchickey from <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>.</p>",
        "id": 516936892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746721802
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449#issuecomment-2868143760\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<p>@pimeys or @fbjork would one of y'all be up for reducing this down to something smaller? If you can get a reproduction that's just wasmtime + some wits + some bindgen! calls I can probably take it from there</p>\n</blockquote>",
        "id": 517205511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746836880
    },
    {
        "content": "<p>pimeys <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449#issuecomment-2886822999\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<p>Ok, so this took me a while (been quite busy too), but here's a reproduction:</p>\n<p><a href=\"https://github.com/pimeys/wasmtime-regression-poc\">https://github.com/pimeys/wasmtime-regression-poc</a></p>\n<p>You can change wasmtime to version 30 and it compiles. This is not the only lifetime error I've witnessed... There's also cases when the macro renders something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">MeowMeow</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"nc\">__with_name0</span><span class=\"p\">::</span><span class=\"n\">MeowMeow</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>and I've also seen</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">MeowMeow</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">__with_name0</span><span class=\"p\">::</span><span class=\"n\">MeowMeow</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>all wrong. The correct way to expand this would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">MeowMeow</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__with_name0</span><span class=\"p\">::</span><span class=\"n\">MeowMeow</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>If you want more examples, you have to dig into our big codebase and update wasmtime there. Hopefully this repro is enough though.</p>\n</blockquote>",
        "id": 518553707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747404309
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449#issuecomment-2889243389\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<p>Could you expand on how <code>pub struct MeowMeow&lt;'a&gt;</code> is generated. I'm assuming it's generated by a separate <code>bindgen!</code> invocation as opposed to hand written, but if it's hand-written that may also explain the mismatch here. In any case I'm basically curious to dig into the provenance of <a href=\"https://github.com/pimeys/wasmtime-regression-poc/blob/57468478770a4812fad631236a2ca7b2da77d59c/src/main.rs#L15-L19\">this definition</a> and from whence it came.</p>\n</blockquote>",
        "id": 518963657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747606930
    },
    {
        "content": "<p>pimeys <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449#issuecomment-2889866230\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<blockquote>\n<p>Could you expand on how <code>pub struct MeowMeow&lt;'a&gt;</code> is generated. I'm assuming it's generated by a separate <code>bindgen!</code> invocation as opposed to hand written, but if it's hand-written that may also explain the mismatch here. In any case I'm basically curious to dig into the provenance of <a href=\"https://github.com/pimeys/wasmtime-regression-poc/blob/57468478770a4812fad631236a2ca7b2da77d59c/src/main.rs#L15-L19\">this definition</a> and from whence it came.</p>\n</blockquote>\n<p>It is hand-written in these certain types. We try to avoid extra allocations in certain very hot paths. Therefore we have types with a lifetime parameter, allowing us only allocate once when going from the host to the guest.</p>\n</blockquote>",
        "id": 519013346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747638578
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449#issuecomment-2891774247\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<p>Ah ok that's likely where this issue is coming from. The <code>bindgen!</code> macro is pretty opinionated about how ownership should work, but the raw <code>wasmtime</code> crate itself is less opinionated. If possible for the performance-sensitive situation can you use the <code>wasmtime</code> crate directly?</p>\n</blockquote>",
        "id": 519177389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747675713
    },
    {
        "content": "<p>pimeys <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449#issuecomment-2892030946\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<p>I think we wanted to avoid that because we got a _ton_ of boilerplate to write before. We started using the macro to cut down a lot of code we were writing before. And, this used to work just fine two versions ago, then broke in version 31. Do you think it's too tricky of a fix? If it already renders type aliases, it should be fine to add the lifetimes to the generated code, no?</p>\n</blockquote>",
        "id": 519200854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747682110
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449#issuecomment-2892139141\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<p>The hard part is that the bindings generator can generate types in multiple various modes, but in this situation where a type isn't actually used there's no way to control how these types are generated. In version 31 unused types started generated bindings which is where this is coming up.</p>\n<p>Assuming the type is unused in the WIT for your codebase could you have a dummy definition without a lifetime? That way the unused type wouldn't actually end up getting used anywhere and the \"real\" definition would have lifetimes?</p>\n</blockquote>",
        "id": 519211134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747685022
    },
    {
        "content": "<p>pimeys <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449#issuecomment-2893062714\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<blockquote>\n<p>The hard part is that the bindings generator can generate types in multiple various modes, but in this situation where a type isn't actually used there's no way to control how these types are generated. In version 31 unused types started generated bindings which is where this is coming up.</p>\n<p>Assuming the type is unused in the WIT for your codebase could you have a dummy definition without a lifetime? That way the unused type wouldn't actually end up getting used anywhere and the \"real\" definition would have lifetimes?</p>\n</blockquote>\n<p>Wait. Now I get it. These types are not used anymore anywhere in the WIT. Jesus, I can fix this right now easily. We have this set of versioned WIT in our system to never break backwards compatibility, and I missed totally that we don't really need these types at all.</p>\n<p>Yeah, let me fix this on our end, when the tests are green I can close the issue. Thank you!</p>\n</blockquote>",
        "id": 519297549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747720948
    },
    {
        "content": "<p>pimeys closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>In our repository, we have versioned wit shared by our host and guest code. One of the bindgen calls started generating invalid Rust code when we updated wasmtime from version 30 to version 31:</p>\n<p><a href=\"https://github.com/grafbase/grafbase/blob/renovate/wasmtime/crates/wasi-component-loader/src/extension/api/since_0_8_0/wit.rs\">https://github.com/grafbase/grafbase/blob/renovate/wasmtime/crates/wasi-component-loader/src/extension/api/since_0_8_0/wit.rs</a></p>\n<p>Then again the next version of this wit, which is just reorganized and a few things are changed in the method calls, this generates correct code:</p>\n<p><a href=\"https://github.com/grafbase/grafbase/blob/renovate/wasmtime/crates/wasi-component-loader/src/extension/api/since_0_9_0/wit.rs\">https://github.com/grafbase/grafbase/blob/renovate/wasmtime/crates/wasi-component-loader/src/extension/api/since_0_9_0/wit.rs</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Clone repo <a href=\"https://github.com/grafbase/grafbase\">https://github.com/grafbase/grafbase</a></li>\n<li>Compile the crate crates/wasi-component-loader with cargo build, it should work.</li>\n<li>Change the branch to renovate/wasmtime which updates wasmtime from 30 to 31</li>\n<li>See the bindgen macro giving an error: use of undeclared lifetime name 'a</li>\n</ul>\n<h3>Expected Results</h3>\n<p>Updating wasmtime should not lead to invalid Rust code.</p>\n<h3>Actual Results</h3>\n<p>If you expand the macro with an error, we see code like this generated:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">DirectiveSite</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">__with_name0</span><span class=\"p\">::</span><span class=\"n\">DirectiveSite</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">FieldDefinitionDirective</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">__with_name0</span><span class=\"p\">::</span><span class=\"n\">FieldDefinitionDirective</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>The 0.9.0 wit macro does not generate code like this, nor does wasmtime 30 for the exact same macro call.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime: 31.0.0<br>\nOperating system: Aurora Linux<br>\nArchitecture: x86_64</p>\n</blockquote>",
        "id": 519301755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747722829
    },
    {
        "content": "<p>pimeys <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449#issuecomment-2893124609\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10449\">issue #10449</a>:</p>\n<blockquote>\n<p>Yep. Thank you for your patience. I can close this issue now. It kind of put me a bit off the rails because the error was a bit weird that I didn't see we actually didn't use these types anywhere in the code.</p>\n</blockquote>",
        "id": 519301762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747722830
    }
]