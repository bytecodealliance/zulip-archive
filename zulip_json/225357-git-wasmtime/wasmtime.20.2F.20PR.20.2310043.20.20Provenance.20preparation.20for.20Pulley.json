[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/dicej\">dicej</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>.</p>",
        "id": 494452051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737153407
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a> from <code>alexcrichton:vm-safe</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit is an internal refactoring of Wasmtime's runtime to prepare<br>\nto execute Pulley in MIRI. Currently today this is not possible because<br>\nPulley does not properly respect either strict or permissive provenance<br>\nmodels. The goal of this refactoring is to enable fixing this in a<br>\nfuture commit that doesn't touch everything in the codebase. Instead<br>\neverything is touched here in this commit.</p>\n<p>The basic problem with Pulley is that it is incompatible with the strict<br>\nprovenance model of Rust which means that we'll be using \"exposed<br>\nprovenance\" APIs to satisfy Rust's soundness requirements. In this model<br>\nwe must explicitly call <code>ptr.expose_provenance()</code> on any pointers<br>\nwhich are exposed to compiled code. Arguably we should also be already<br>\ndoing this for natively-compiled code but I am not certain about how<br>\nstrictly this is required.</p>\n<p>Currently in Wasmtime today we call <code>ptr.expose_provenance()</code> nowhere.<br>\nIt also turns out, though, that we share quite a few pointers in quite a<br>\nfew places with compiled code. This creates a bit of a problem! The<br>\nsolution settled on in this commit looks like:</p>\n<ul>\n<li>\n<p>A new marker trait, <code>VmSafe</code>, is introduced. This trait is used to<br>\n  represent \"safe to share with compiled code\" types and enumerates some<br>\n  properties such as defined ABIs, primitives wrappers match primitive<br>\n  ABIs, and notably \"does not contain a pointer\".</p>\n</li>\n<li>\n<p>A new type, <code>VmPtr&lt;T&gt;</code>, is added to represent pointers shared with<br>\n  compiled code. Internally for now this is just <code>SendSyncPtr&lt;T&gt;</code> but in<br>\n  the future it will be <code>usize</code>. By using <code>SendSyncPtr&lt;T&gt;</code> it shouldn't<br>\n  actually really change anything today other than requiring a lot of<br>\n  refactoring to get the types to line up.</p>\n</li>\n<li>\n<p>The core <code>vmctx_plus_offset*</code> methods are updated to require<br>\n<code>T: VmSafe</code>. Previously they allowed any <code>T</code> which is relatively<br>\n  dangerous to store any possible Rust type in Cranelift-accessible<br>\n  areas.</p>\n</li>\n</ul>\n<p>These three fundamental changes were introduced in this commit. All<br>\nfurther changes were refactoring necessary to get everything working<br>\nafter these changes. For example many types in <code>vmcontext.rs</code>, such as<br>\n<code>VMFuncRef</code>, have changed to using <code>VmPtr&lt;T&gt;</code> instead of <code>NonNull&lt;T&gt;</code> or<br>\n<code>*mut T</code>. This is a pretty expansive change which resulted in touching a<br>\nlot of places.</p>\n<p>One premise of <code>VmPtr&lt;T&gt;</code> is that it's non-null. This was an<br>\nadditional refactoring that updated a lot of places where previously<br>\n<code>*mut T</code> was used and now either <code>VmPtr&lt;T&gt;</code> or <code>NonNull&lt;T&gt;</code> is used.</p>\n<p>In the end the intention is that <code>VmPtr&lt;T&gt;</code> is used whenever pointers<br>\nare store in memory that can be accessed from Cranelift. When operating<br>\ninside of the runtime <code>NonNull&lt;T&gt;</code> or <code>SendSyncPtr&lt;T&gt;</code> is preferred<br>\ninstead.</p>\n<p>As a final note, no provenance changes have actually happened yet. For<br>\nexample this doesn't fix Pulley in MIRI. What it does enable, though, is<br>\nthat the future commit to fix Pulley in MIRI will be much smaller with<br>\nthis having already landed.</p>\n</blockquote>",
        "id": 494452052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737153407
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>.</p>",
        "id": 494452053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737153407
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#issuecomment-2599324232\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>:</p>\n<blockquote>\n<p>Note that this is temporarily based on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10040\">https://github.com/bytecodealliance/wasmtime/pull/10040</a> which accounts for the first few commits. </p>\n</blockquote>",
        "id": 494452104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737153439
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>.</p>",
        "id": 494452127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737153451
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#issuecomment-2599338054\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>:</p>\n<blockquote>\n<blockquote>\n<p>The basic problem with Pulley is that it is incompatible with the strict<br>\nprovenance model of Rust </p>\n</blockquote>\n<p>I'll link here that we have at least one idea (#9060) that would make Pulley compatible with strict provenance, albeit as a major refactor to the way that Wasmtime's data structures work. No argument that with the design today it is basically incompatible with strict provenance.</p>\n</blockquote>",
        "id": 494453605,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737154337
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#issuecomment-2599353344\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>:</p>\n<blockquote>\n<p>Oh true good point! I'm a bit skeptical of the feasibility of such an implementation route though...</p>\n<p>One thing I've also been wondering about though, which is a bit related, is let's ignore Pulley and what's our provenance story for Cranelift-compiled x64 code? For example is it possible in Rust's model to still have strict provenance when JIT code is in the mix? Are we required regardless to use \"expose provenance\" as a primitive to say \"modifications to this memory are happening behind you're back\". I'm not sure myself.</p>\n</blockquote>",
        "id": 494455253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737155342
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>.</p>",
        "id": 494455519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737155515
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>.</p>",
        "id": 494455881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737155766
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#issuecomment-2599359822\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>:</p>\n<blockquote>\n<p>It seems to me at least (with my compiler optimizer hat on) that separate compilation is the ultimate \"provenance black hole\" -- calling JIT code is no different from, say, calling a C library, which could legally return any pointer derived from anything reachable that we pass into it. As long as Rust supports linking to code that is not compiled by the same rustc invocation (i.e., does not adopt a fully closed-world assumption), its provenance model has to support the \"outside world\" escape hatch that calling JIT code would also fall into. And unless strict provenance is going to say \"you are no longer allowed to link C libraries, and all indirect calls have to be statically devirtualizable\" that's as far as an analysis is going to get.</p>\n</blockquote>",
        "id": 494455915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737155796
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#issuecomment-2599362616\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>:</p>\n<blockquote>\n<blockquote>\n<p>For example is it possible in Rust's model to still have strict provenance when JIT code is in the mix? Are we required regardless to use \"expose provenance\" as a primitive to say \"modifications to this memory are happening behind you're back\". I'm not sure myself.</p>\n</blockquote>\n<p>Calling jitted code is no different from FFI. The foreign code may only access pointers for which it could have received provenance (either through exposed provenance or through a pointer that was passed in) Unluke with Pulley the compiler doesn't have visibility into what the foreign code does, so it for exanple doesn't know if you are loading an integer (erasing provenance) or loading a pointer (preserving provenance if it exists) or which of the available provenances was used for the memory operation. As such it has to assume that the foreign code picked the right provenance to avoid UB if the right provenance could have been picked in the first place due to being exposed to the foreign code.</p>\n</blockquote>",
        "id": 494456264,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737156009
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#issuecomment-2599362616\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>:</p>\n<blockquote>\n<blockquote>\n<p>For example is it possible in Rust's model to still have strict provenance when JIT code is in the mix? Are we required regardless to use \"expose provenance\" as a primitive to say \"modifications to this memory are happening behind you're back\". I'm not sure myself.</p>\n</blockquote>\n<p>Calling jitted code is no different from FFI. The foreign code may only access pointers for which it could have received provenance (either through exposed provenance or through a pointer that was passed in) Unluke with Pulley the compiler doesn't have visibility into what the foreign code does, so it for exanple doesn't know if you are loading an integer (erasing provenance) or loading a pointer (preserving provenance if it exists) or which of the available provenances was used for the memory operation. As such it has to assume that the foreign code picked the right provenance to avoid UB if the right provenance could have been picked in the first place due to being exposed to the foreign code.</p>\n<p>Edit: What @cfallin said.</p>\n</blockquote>",
        "id": 494456372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737156085
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#issuecomment-2599370942\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>:</p>\n<blockquote>\n<p>Ok that makes sense to me yeah. If this becomes a problem in the future we can perhaps have a different implementation of <code>VmPtr</code> depending on if pulley is turned on or not. Without pulley we'd require strict provenance but with pulley we'd require only permissive provenance.</p>\n</blockquote>",
        "id": 494457294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737156675
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>.</p>",
        "id": 494458548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737157486
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#issuecomment-2599470473\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\", \"wasmtime:ref-types\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: wasmtime:ref-types</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 494470006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737165949
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>.</p>",
        "id": 495540173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737649857
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>.</p>",
        "id": 495540216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737649871
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#issuecomment-2610329826\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>:</p>\n<blockquote>\n<p>Ok this is now rebased and I believe should be ready for review @dicej </p>\n</blockquote>",
        "id": 495540318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737649905
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#issuecomment-2610330231\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>:</p>\n<blockquote>\n<p>(I can also tag someone else in if you'd prefer too)</p>\n</blockquote>",
        "id": 495540363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737649914
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#issuecomment-2610368761\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>:</p>\n<blockquote>\n<blockquote>\n<p>(I can also tag someone else in if you'd prefer too)</p>\n</blockquote>\n<p>I think that would be a good idea.  I don't have any experience with the Pulley code so far and don't feel qualified to review something like this -- at least not yet.</p>\n</blockquote>",
        "id": 495542594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737650480
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>.</p>",
        "id": 495543033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737650593
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#issuecomment-2610385002\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>:</p>\n<blockquote>\n<p>...although browsing the code, maybe there's not much here that's Pulley-specific?  In which case I could give it a shot.</p>\n</blockquote>",
        "id": 495543035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737650593
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>.</p>",
        "id": 495543055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737650600
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#issuecomment-2610389222\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>:</p>\n<blockquote>\n<p>Happy to go either way yeah, it's true yeah that while the main motivation here is Pulley that's mostly for a subsequent PR running miri and pulley stuff. This PR itself is mostly just refactoring vm internals towards a <code>VmPtr&lt;T&gt;</code> type and a <code>VmSafe</code> trait. I've tagged @fitzgen here but if you'd like to review I'm sure Nick won't mind heh</p>\n</blockquote>",
        "id": 495543341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737650670
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#pullrequestreview-2570604928\">PR review</a>:</p>\n<blockquote>\n<p>LGTM modulo a couple nitpicks</p>\n</blockquote>",
        "id": 495556535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737654936
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#discussion_r1927421271\">PR review comment</a>:</p>\n<blockquote>\n<p>In these comments there are a lot of references to Cranelift, but it could also be Winch. Might be worth rewording \"Cranelift-compiled code\" to \"compiled Wasm code\" or something.</p>\n</blockquote>",
        "id": 495556537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737654937
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#discussion_r1927424079\">PR review comment</a>:</p>\n<blockquote>\n<p>This comment is going to be out of date as soon as your next PR lands. Is it even worth including here? Seems like it will be easy to forget to remove down the line, might as well not even add it in the first place...</p>\n</blockquote>",
        "id": 495556538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737654937
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#pullrequestreview-2570458034\">PR review</a>.</p>",
        "id": 495573547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737661281
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#discussion_r1927327313\">PR review comment</a>:</p>\n<blockquote>\n<p>Just checking: is this sound?  Do we know for a fact (e.g. based on Rust language sematnics) that the <code>&amp;mut []</code> pointer will be valid outside of this statement?</p>\n</blockquote>",
        "id": 495573549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737661281
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#discussion_r1927332048\">PR review comment</a>:</p>\n<blockquote>\n<p>And if it _is_ sound, I assume that's only true because it's an empty array literal and thus has a <code>'static</code> lifetime?</p>\n</blockquote>",
        "id": 495573550,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737661282
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#pullrequestreview-2570954610\">PR review</a>.</p>",
        "id": 495580998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737664518
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043#discussion_r1927646460\">PR review comment</a>:</p>\n<blockquote>\n<p>To the best of my knowledge, which is limited, this is sound even if the compiler doesn't use a <code>'static</code> lifetime here. My understanding is that there's no soundness issue having a pointer to something that's deallocated, for example malloc'ing some data, saving the pointer, and then freeing the data. So even if the array here isn't <code>'static</code> it's safe to have a pointer just pointing to some random address on the stack.</p>\n<p>The other reason I think this is safe is because this is creating <code>NonNull&lt;[T]&gt;</code> which not only has a pointer but also a length. For <code>&amp;mut []</code> the length is always zero, and that means that the pointer, invalid though it may be, is never accessed.</p>\n<p>So all in all I think it's safe because the pointer is never accessed due to the zero length on the pointer, regardless of whether rustc extends this to <code>'static</code> or not</p>\n</blockquote>",
        "id": 495581000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737664518
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>.</p>",
        "id": 495581037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737664532
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>.</p>",
        "id": 495581042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737664538
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10043\">PR #10043</a>.</p>",
        "id": 495586904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737666970
    }
]