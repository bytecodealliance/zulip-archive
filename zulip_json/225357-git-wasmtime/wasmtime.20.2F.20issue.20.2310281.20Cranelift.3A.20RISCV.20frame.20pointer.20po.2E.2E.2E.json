[
    {
        "content": "<p><a href=\"https://github.com/JonasKruckenberg\">JonasKruckenberg</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10281\">Issue #10281</a>.</p>",
        "id": 501506862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740393952
    },
    {
        "content": "<p><a href=\"https://github.com/JonasKruckenberg\">JonasKruckenberg</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10281\">Issue #10281</a>.</p>",
        "id": 501506866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740393952
    },
    {
        "content": "<p>JonasKruckenberg opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10281\">issue #10281</a>:</p>\n<blockquote>\n<p>Cranelift on RISCV (when frame pointers are enabled) generated code where the <code>fp</code> register always points to the next frame pointer like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">----</span><span class=\"w\">  </span><span class=\"n\">frame</span><span class=\"w\"> </span><span class=\"o\">----</span>\n<span class=\"n\">ra</span><span class=\"p\">,</span>\n<span class=\"n\">fp</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">fp</span><span class=\"w\"> </span><span class=\"n\">points</span><span class=\"w\"> </span><span class=\"n\">here</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">frame</span><span class=\"w\"> </span><span class=\"o\">----</span>\n</code></pre></div>\n<p>while LLVM generates code where <code>fp</code> points <em>one word above the frame</em> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">----</span><span class=\"w\">  </span><span class=\"n\">frame</span><span class=\"w\"> </span><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">fp</span><span class=\"w\"> </span><span class=\"n\">points</span><span class=\"w\"> </span><span class=\"n\">here</span>\n<span class=\"n\">ra</span><span class=\"p\">,</span>\n<span class=\"n\">fp</span><span class=\"p\">,</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">frame</span><span class=\"w\"> </span><span class=\"o\">----</span>\n</code></pre></div>\n<p>While this is not a problem in isolation it means that stack walkers (for backtraces, perf stack traces, unwinding) cannot walk across a boundary where LLVM generated code calls cranelift generated code and vice-versa.</p>\n<p>Since we cannot really change LLVMs behavior cranelift should match LLVM even though that means a really nasty breaking change for cranelift consumers that rely on the frame pointer position (nasty since code would continue to compile just be broken at runtime in weird ways).</p>\n<p>AFAIK supporting this change in wasmtime would be quite trivial, it would just mean changing this from <code>0</code> to <code>-2 * size_of::&lt;usize&gt;()</code><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/de469e2790f0c33f99df483f2dae4ceb47e11c8e/crates/wasmtime/src/runtime/vm/arch/riscv64.rs#L22\">https://github.com/bytecodealliance/wasmtime/blob/de469e2790f0c33f99df483f2dae4ceb47e11c8e/crates/wasmtime/src/runtime/vm/arch/riscv64.rs#L22</a><br>\nwhich would mean this assertion no longer holds <a href=\"https://github.com/bytecodealliance/wasmtime/blob/07eeac40525246425073011bd707edd298443a96/crates/wasmtime/src/runtime/vm/traphandlers/backtrace.rs#L252\">https://github.com/bytecodealliance/wasmtime/blob/07eeac40525246425073011bd707edd298443a96/crates/wasmtime/src/runtime/vm/traphandlers/backtrace.rs#L252</a><br>\nand the corresponding code in <code>save_last_wasm_exit_fp_pc</code> needs to be adjusted<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/70a37939d367e83ab62002bad64fb11e763f3d2f/crates/cranelift/src/compiler.rs#L1173-L1176\">https://github.com/bytecodealliance/wasmtime/blob/70a37939d367e83ab62002bad64fb11e763f3d2f/crates/cranelift/src/compiler.rs#L1173-L1176</a></p>\n</blockquote>",
        "id": 501506875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740393955
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the cranelift:area:riscv64 label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10281\">Issue #10281</a>.</p>",
        "id": 501866324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740504825
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the wasmtime:debugging label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10281\">Issue #10281</a>.</p>",
        "id": 502345507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740679132
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the cranelift:area:debug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10281\">Issue #10281</a>.</p>",
        "id": 502345508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740679132
    }
]