[
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10146\">PR #10146</a>.</p>",
        "id": 496452433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738113564
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10146\">PR #10146</a>:</p>\n<blockquote>\n<p>This commit marks another step toward finalizing AArch64 support in<br>\nWinch.</p>\n<p>While enabling spec tests, I experienced some unexpected failures<br>\nrelated to Wasm loads/stores and traps. The observed<br>\nsymptoms are as follows:</p>\n<ul>\n<li>Under normal conditions, Wasm loads/stores work as expected.</li>\n<li>\n<p>In out-of-bounds scenarios, loads/stores result in a segmentation<br>\n  fault, whereas the expected behavior is to trigger an out-of-bounds trap.</p>\n</li>\n<li>\n<p>When out-of-bounds access can be determined statically, the program<br>\n  still results in a segmentation fault instead of the anticipated<br>\n  out-of-bounds trap.</p>\n</li>\n</ul>\n<p>Debugging revealed the following issues:</p>\n<ul>\n<li>\n<p>The stack pointer was not correctly aligned to 16 bytes when entering<br>\n  signal handlers, which caused the segmentation fault.</p>\n</li>\n<li>\n<p>Wasm loads and stores were not flagged as untrusted, leading to<br>\n  segmentation faults even when the stack pointer was properly aligned.</p>\n</li>\n</ul>\n<p>This commit fixes the previous issues by:</p>\n<ul>\n<li>Correctly flagging wasm loads and stores as untrusted.</li>\n<li>Reworking the shadow stack pointer approach such that it allows<br>\n  aligning the stack pointer at arbitrary points in the program,<br>\n  particularly where signal handling might be needed. This rework<br>\n  involves changing some principles introduced in<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/pull/5652\">https://github.com/bytecodealliance/wasmtime/pull/5652</a>; namely:<br>\n  changing the primary stack pointer register to be the shadow stack<br>\n  pointer. See the updates comments in the code for more details.</li>\n</ul>\n<p>Note that this change doesn't enable spectests. I'll follow-up with more work to do so. To try this change, run:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"w\">  </span>cargo<span class=\"w\"> </span>run<span class=\"w\"> </span>--<span class=\"w\"> </span>wast<span class=\"w\"> </span>-Ccompiler<span class=\"o\">=</span>winch<span class=\"w\"> </span>tests/spec_testsuite/address.wast\n</code></pre></div>\n<p>--</p>\n<p>The diff is large-ish due to all the changes in disassembly tests, however, all code changes can <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10146/commits/25932107478202d69a4b5bd379d521ab2a17e9ec\">be found in this commit</a>.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 496452553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738113644
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10146\">PR #10146</a>:</p>\n<blockquote>\n<p>This commit marks another step toward finalizing AArch64 support in<br>\nWinch.</p>\n<p>While enabling spec tests, I experienced some unexpected failures<br>\nrelated to Wasm loads/stores and traps. The observed<br>\nsymptoms are as follows:</p>\n<ul>\n<li>Under normal conditions, Wasm loads/stores work as expected.</li>\n<li>\n<p>In out-of-bounds scenarios, loads/stores result in a segmentation<br>\n  fault, whereas the expected behavior is to trigger an out-of-bounds trap.</p>\n</li>\n<li>\n<p>When out-of-bounds access can be determined statically, the program<br>\n  still results in a segmentation fault instead of the anticipated<br>\n  out-of-bounds trap.</p>\n</li>\n</ul>\n<p>Debugging revealed the following issues:</p>\n<ul>\n<li>\n<p>The stack pointer was not correctly aligned to 16 bytes when entering<br>\n  signal handlers, which caused the segmentation fault.</p>\n</li>\n<li>\n<p>Wasm loads and stores were not flagged as untrusted, leading to<br>\n  segmentation faults even when the stack pointer was properly aligned.</p>\n</li>\n</ul>\n<p>This commit fixes the previous issues by:</p>\n<ul>\n<li>Correctly flagging wasm loads and stores as untrusted.</li>\n<li>Reworking the shadow stack pointer approach such that it allows<br>\n  aligning the stack pointer at arbitrary points in the program,<br>\n  particularly where signal handling might be needed. This rework<br>\n  involves changing some principles introduced in<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/pull/5652\">https://github.com/bytecodealliance/wasmtime/pull/5652</a>; namely:<br>\n  changing the primary stack pointer register to be the shadow stack<br>\n  pointer. See the updated comments in the code for more details.</li>\n</ul>\n<p>Note that this change doesn't enable spectests. I'll follow-up with more work to do so. To try this change, run:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"w\">  </span>cargo<span class=\"w\"> </span>run<span class=\"w\"> </span>--<span class=\"w\"> </span>wast<span class=\"w\"> </span>-Ccompiler<span class=\"o\">=</span>winch<span class=\"w\"> </span>tests/spec_testsuite/address.wast\n</code></pre></div>\n<p>--</p>\n<p>The diff is large-ish due to all the changes in disassembly tests, however, all code changes can <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10146/commits/25932107478202d69a4b5bd379d521ab2a17e9ec\">be found in this commit</a>.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 496453913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738114626
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10146#pullrequestreview-2581469855\">PR review</a>:</p>\n<blockquote>\n<p>While I'm not expert on Winch this all looks and sounds reasonable enough to me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 496579014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738165552
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10146\">PR #10146</a>.</p>",
        "id": 496665488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738194627
    },
    {
        "content": "<p>saulecabrera has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10146\">PR #10146</a>.</p>",
        "id": 496665777,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738194771
    },
    {
        "content": "<p>saulecabrera merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10146\">PR #10146</a>.</p>",
        "id": 496669586,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738196739
    }
]