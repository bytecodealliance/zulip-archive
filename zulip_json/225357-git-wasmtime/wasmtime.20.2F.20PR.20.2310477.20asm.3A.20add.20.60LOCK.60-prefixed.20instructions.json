[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477\">PR #10477</a> from <code>abrown:asm-locks</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>These changes add new instructions that add the <code>LOCK</code> prefix. The <code>LOCK</code> prefix is only valid for (1) instruction forms where the destination is a memory operand and (2) instructions in the following set: ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B,<br>\nCMPXCHG16B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG (not all of which are defined yet). To handle (1) we add a new memory-only operand kind: <code>m{8|16|32|64}</code>.</p>\n<p>With new <code>LOCK</code>-prefixed instructions defined, we use them in the ISLE lowering of read-modify-write instructions. The top-level <code>lower.isle</code> lowerings underwent some refactoring to handle the fact that these instructions return a <code>SideEffectNoResult</code> but the lowering rule expects an invalid register to be returned in a <code>Reg</code>-to-<code>InstOutput</code> auto conversion.</p>\n</blockquote>",
        "id": 508403599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743035819
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477\">PR #10477</a>.</p>",
        "id": 508403600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743035819
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477\">PR #10477</a>.</p>",
        "id": 508403601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743035819
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477#pullrequestreview-2718912585\">PR review</a>.</p>",
        "id": 508403737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743035890
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477#discussion_r2015177181\">PR review comment</a>:</p>\n<blockquote>\n<p>It could be helpful to review this commit separately since it contains all the formatting changes (<code>cargo fmt</code>) and no functional changes.</p>\n</blockquote>",
        "id": 508403738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743035890
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477#discussion_r2015177181\">PR review comment</a>.</p>",
        "id": 508403832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743035951
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477#issuecomment-2756284407\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477\">PR #10477</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:x64\", \"cranelift:meta\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 508413584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743041653
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477#pullrequestreview-2719365831\">PR review</a>.</p>",
        "id": 508422179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743045950
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477#discussion_r2015541688\">PR review comment</a>:</p>\n<blockquote>\n<p>Question for this: would it would to have <code>.lock()</code> as a builder on the return value of <code>inst(..)</code> and that would be an indicator that the lock prefix and non-lock prefix would both be generated? That way we wouldn't have to duplicate the opcodes/feature flags and we could bake-in logic that <code>.lock()</code> requires the first operand to be memory</p>\n</blockquote>",
        "id": 508422180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743045950
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477#pullrequestreview-2719366888\">PR review</a>.</p>",
        "id": 508422283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743046014
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477#discussion_r2015542391\">PR review comment</a>:</p>\n<blockquote>\n<p>To clarify: I'd want the same generated code as what this PR does today, just with less boilerplate on the definitions here by having <code>.lock()</code> as an agumentation rather than a new set of instructions. It could even internally \"expand\" somewhere along the way to two instruction values perhaps?</p>\n</blockquote>",
        "id": 508422284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743046015
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477#pullrequestreview-2722665121\">PR review</a>.</p>",
        "id": 508572222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743094419
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477#discussion_r2017143962\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I started with that route but abandoned it due to \"too much magic.\" Right now these definitions have the property that each line here shows up as a generated instruction, and either doing that under the hood with <code>.lock()</code> or alternately setting up a <code>for</code> loop in this file to do the same ends up breaking that simple correspondence. And these new magically-created instructions are actually different enough that, combined with the \"new instruction magic,\" I abandoned that route: they have a new mnemonic (<code>lock_*</code>), they have a new prefix, and--crucially--they only accept memory (not reg-mem) as their destination operand.</p>\n<p>The other approach I thought through here was to actually model <code>LOCK</code> as its own separate instruction that would take a <code>Box&lt;LockableInst&gt;</code> or something like that. Intel's manual conceptually treats <code>LOCK</code> as its own instruction, so it made sense from that perspective. And it would have forced me to create some way to integrate hand-crafted instructions, i.e., instructions that we simply implement by hand but somehow get integrated into the auto-generated <code>Inst</code> enum. But ultimately I decided that, because in <code>cranelift-codegen-meta</code> we end up needing new ISLE constructors for any <code>LOCK</code>-prefixed variants, just creating more boilerplate was the simplest and clearest.</p>\n</blockquote>",
        "id": 508572225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743094419
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477#pullrequestreview-2727072487\">PR review</a>:</p>\n<blockquote>\n<p>LGTM!</p>\n</blockquote>",
        "id": 508862819,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743205715
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10477\">PR #10477</a>.</p>",
        "id": 508864589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743207018
    }
]