[
    {
        "content": "<p>simonask opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10706\">issue #10706</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Currently, <code>#[derive(ComponentType)]</code> etc. requires that all generic struct parameters directly and unconditionally implement <code>ComponentType</code>. It would be useful to be able to specify custom bounds for the trait impl, similar to <code>#[serde(bounds = \"...\")]</code>.</p>\n<h4>Benefit</h4>\n<p>I'm the author of <a href=\"https://github.com/simonask/glamour\">glamour</a>, a strongly typed vector math library. My vector types have a <code>Unit</code> generic param, and all the fields of the vector are defined in terms of an associated type <code>Unit::Scalar</code>, which is always a primitive. So for <code>Vector4&lt;T&gt;</code>, the <code>T</code> only appears in the struct as <code>T::Scalar</code> (which always implements <code>Lower + Lift</code>), but <code>T</code> itself does not implement <code>Lower + Lift</code>.</p>\n<p>The current derive macros mean that only the \"untyped\" units (plain scalar types, such as <code>Vector4&lt;f32&gt;</code>) can implement <code>ComponentType</code> etc., which is unfortunate - it would be nice to be able to leverage this kind of type safety in automatically generated WIT bindings.</p>\n<p>More generally, this would provide an escape hatch for some of the problems with \"imperfect derive\".</p>\n<h4>Implementation</h4>\n<p>I would propose extending the derive macro to support a <code>#[component(bounds = ...)]</code> attribute at the container level for structs and enums, replacing the implicit <code>T: ComponentType</code> bound (same for <code>Lower</code> and <code>Lift</code> derives).</p>\n<h4>Alternatives</h4>\n<ol>\n<li>The derive macro can be amended to emit an impl that is bounded on the specific field types of the struct, i.e., collect all field types and add bounds for each type that appears as a field. This may be less attractive because it reveals internal things about the type, potentially making it more brittle (semver hazard).</li>\n<li>Currently it is not feasible/possible to manually implement <code>ComponentType</code>/<code>Lower</code>/<code>Lift</code>. That API could be stabilized, allowing users to handle the problem themselves.</li>\n</ol>\n</blockquote>",
        "id": 515664485,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746174495
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime:api label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10706\">Issue #10706</a>.</p>",
        "id": 515733878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746197817
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10706#issuecomment-2847409463\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10706\">issue #10706</a>:</p>\n<blockquote>\n<p>Sounds reasonable to me to implement! This has good precedence as you point out throughout the proc-macro ecosystem in Rust, so should be fine to mostly copy/model the implementation on a preexisting crate.</p>\n</blockquote>",
        "id": 515733982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746197844
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:component-model label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10706\">Issue #10706</a>.</p>",
        "id": 516936688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746721740
    }
]