[
    {
        "content": "<p>anlavandier opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11300\">issue #11300</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/anlavandier/invalid-elf-header-mwe/blob/main/component-add/add_wasm32-wasip1.wasm\">Wasm Component bytecode</a><br>\n<a href=\"https://github.com/anlavandier/invalid-elf-header-mwe/blob/main/component-add/src/lib.rs\">Wasm Component source code</a><br>\nAll the relevant code I used is in this <a href=\"https://github.com/anlavandier/invalid-elf-header-mwe/\">repo</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>(Optional) Build the component from source using <code>cargo-component build</code>. </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">version</span>\n<span class=\"n\">cargo</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"mf\">0.21.1</span>\n</code></pre></div>\n<ul>\n<li>First precompile the component using cranelift : <code>wasmtime = { version = \"34.0.1\", default-features = false, features = [\"runtime\", \"component-model\", \"pulley\", \"cranelift\"] }</code></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"s\">\"pulley32\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"this Wasmtime was not built with the correct compiler backend \\</span>\n<span class=\"s\">             enabled: {error:?}\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(());</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create an `Engine` with that configuration.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Wasmtime build is incompatible with config: {error:?}\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(());</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Pre-compile a Wasm program.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">include_bytes!</span><span class=\"p\">(</span><span class=\"s\">\"../../add/target/wasm32-wasip1/release/add.wasm\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">precompile_component</span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Write the pre-compiled program to a file.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// Note that the `.cwasm` extension is conventional for these files, and is</span>\n<span class=\"w\">    </span><span class=\"c1\">// what the Wasmtime CLI will use by default, for example.</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">\"add_wasm32-wasip1.cwasm\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">precompiled</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// And we are done -- now a different Wasmtime embedding can load and run</span>\n<span class=\"w\">    </span><span class=\"c1\">// the pre-compiled Wasm program from that `add.cwasm` file!</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>Second try to parse the Precompiled Component in another instance. <code>wasmtime = { version = \"34.0.2\", default-features = false, features = [\"runtime\", \"component-model\", \"pulley\"] }</code></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">};</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">run_wasmtime</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">defmt</span><span class=\"p\">::</span><span class=\"n\">Debug2Format</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">run_wasmtime</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"s\">\"pulley32\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component_bytes</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">include_bytes!</span><span class=\"p\">(</span><span class=\"s\">\"../../component-add/add_wasm32-wasip1.cwasm\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">deserialize_raw</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">component_bytes</span><span class=\"p\">.</span><span class=\"n\">as_slice</span><span class=\"p\">().</span><span class=\"n\">into</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">comp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">comp</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"failed to deserialize pre-compiled module: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">defmt</span><span class=\"p\">::</span><span class=\"n\">Debug2Format</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">error</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(());</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Deserialized Component\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>See <code>Deserialized Component</code> on stdout</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">deserialize</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">compiled</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"n\">artifact</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">ELF</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">Invalid</span><span class=\"w\"> </span><span class=\"n\">ELF</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">alignment</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>34.0.1</code></p>\n<p>Operating system: Ubuntu 22.04 LTS</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 530170722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753197789
    },
    {
        "content": "<p><a href=\"https://github.com/anlavandier\">anlavandier</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11300\">Issue #11300</a>.</p>",
        "id": 530170723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753197789
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11300#issuecomment-3103785652\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11300\">issue #11300</a>:</p>\n<blockquote>\n<p>One issue at least is that there is a version mismatch between the compiling and executing side. The first uses wasmtime 34.0.1 while the second uses 34.0.2. You need an exact math.</p>\n</blockquote>",
        "id": 530185446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753202519
    },
    {
        "content": "<p>pchickey closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11300\">issue #11300</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/anlavandier/invalid-elf-header-mwe/blob/main/component-add/add_wasm32-wasip1.wasm\">Wasm Component bytecode</a><br>\n<a href=\"https://github.com/anlavandier/invalid-elf-header-mwe/blob/main/component-add/src/lib.rs\">Wasm Component source code</a><br>\nAll the relevant code I used is in this <a href=\"https://github.com/anlavandier/invalid-elf-header-mwe/\">repo</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>(Optional) Build the component from source using <code>cargo-component build</code>. </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">version</span>\n<span class=\"n\">cargo</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"mf\">0.21.1</span>\n</code></pre></div>\n<ul>\n<li>First precompile the component using cranelift : <code>wasmtime = { version = \"34.0.1\", default-features = false, features = [\"runtime\", \"component-model\", \"pulley\", \"cranelift\"] }</code></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"s\">\"pulley32\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"this Wasmtime was not built with the correct compiler backend \\</span>\n<span class=\"s\">             enabled: {error:?}\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(());</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create an `Engine` with that configuration.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Wasmtime build is incompatible with config: {error:?}\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(());</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Pre-compile a Wasm program.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">include_bytes!</span><span class=\"p\">(</span><span class=\"s\">\"../../add/target/wasm32-wasip1/release/add.wasm\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">precompile_component</span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Write the pre-compiled program to a file.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// Note that the `.cwasm` extension is conventional for these files, and is</span>\n<span class=\"w\">    </span><span class=\"c1\">// what the Wasmtime CLI will use by default, for example.</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">\"add_wasm32-wasip1.cwasm\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">precompiled</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// And we are done -- now a different Wasmtime embedding can load and run</span>\n<span class=\"w\">    </span><span class=\"c1\">// the pre-compiled Wasm program from that `add.cwasm` file!</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>Second try to parse the Precompiled Component in another instance. <code>wasmtime = { version = \"34.0.2\", default-features = false, features = [\"runtime\", \"component-model\", \"pulley\"] }</code></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">};</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">run_wasmtime</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">defmt</span><span class=\"p\">::</span><span class=\"n\">Debug2Format</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">run_wasmtime</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"s\">\"pulley32\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component_bytes</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">include_bytes!</span><span class=\"p\">(</span><span class=\"s\">\"../../component-add/add_wasm32-wasip1.cwasm\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">deserialize_raw</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">component_bytes</span><span class=\"p\">.</span><span class=\"n\">as_slice</span><span class=\"p\">().</span><span class=\"n\">into</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">comp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">comp</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"failed to deserialize pre-compiled module: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">defmt</span><span class=\"p\">::</span><span class=\"n\">Debug2Format</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">error</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(());</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Deserialized Component\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>See <code>Deserialized Component</code> on stdout</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">deserialize</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">compiled</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"n\">artifact</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">ELF</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">Invalid</span><span class=\"w\"> </span><span class=\"n\">ELF</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">alignment</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>34.0.1</code></p>\n<p>Operating system: Ubuntu 22.04 LTS</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 530236191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753224985
    }
]