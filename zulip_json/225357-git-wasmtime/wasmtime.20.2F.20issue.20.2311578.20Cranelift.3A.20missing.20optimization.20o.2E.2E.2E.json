[
    {
        "content": "<p>playX18 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11578\">issue #11578</a>:</p>\n<blockquote>\n<p>Thanks for filing an issue! Please fill out the TODOs below.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band_imm</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">562949953421310</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp_imm</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">6</span>\n<span class=\"w\">    </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">6</span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp_imm</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span>\n<span class=\"w\">    </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"n\">block1</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">100</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block3</span><span class=\"p\">(</span><span class=\"n\">v9</span><span class=\"p\">)</span>\n\n<span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">101</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block3</span><span class=\"p\">(</span><span class=\"n\">v10</span><span class=\"p\">)</span>\n\n<span class=\"n\">block3</span><span class=\"p\">(</span><span class=\"n\">v11</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v11</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>1) Have a code that generates <code>icmp</code> + <code>select</code> and then generates another <code>icmp</code> together with  <code>brif</code><br>\n2) Compile</p>\n<h3>Expected Results</h3>\n<p>There is potential rewrite possible here where <code>select</code> and <code>icmp</code> can be removed to simply checking result of <code>v3</code> or <code>v4</code> in the snippet above.</p>\n<h3>Actual Results</h3>\n<p>Code snippet above will generate x86 code with <code>test, cmove, test, jne</code> sequence which is not optimal.  </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"mi\">7</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">41</span><span class=\"w\"> </span><span class=\"n\">b9</span><span class=\"w\"> </span><span class=\"mi\">06</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">       </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x6</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r9d</span>\n<span class=\"w\">   </span><span class=\"n\">d</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">85</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">test</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"mh\">0x2c</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">)</span><span class=\"w\">        </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"p\">.</span><span class=\"n\">Lfn0</span><span class=\"o\">+</span><span class=\"mh\">0x40</span><span class=\"o\">&gt;</span>\n<span class=\"w\">  </span><span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">d3</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r11</span>\n<span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">29</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">cmove</span><span class=\"w\">  </span><span class=\"mh\">0x29</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"w\">        </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"p\">.</span><span class=\"n\">Lfn0</span><span class=\"o\">+</span><span class=\"mh\">0x48</span><span class=\"o\">&gt;</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">00</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">f9</span><span class=\"w\"> </span><span class=\"mi\">06</span><span class=\"w\">             </span><span class=\"n\">cmp</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x6</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r9</span>\n<span class=\"w\">  </span><span class=\"mi\">23</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">84</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">       </span><span class=\"n\">je</span><span class=\"w\">     </span><span class=\"mi\">36</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"p\">.</span><span class=\"n\">Lfn0</span><span class=\"o\">+</span><span class=\"mh\">0x36</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: 0.123.1</p>\n<p>Operating system: Fedora 42</p>\n<p>Architecture: x86_64<br>\n</p>\n</blockquote>",
        "id": 536886407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756527147
    },
    {
        "content": "<p><a href=\"https://github.com/playX18\">playX18</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11578\">Issue #11578</a>.</p>",
        "id": 536886408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756527147
    },
    {
        "content": "<p><a href=\"https://github.com/playX18\">playX18</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11578\">Issue #11578</a>.</p>",
        "id": 536886409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756527148
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> removed the bug label from <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11578\">Issue #11578</a>.</p>",
        "id": 536886537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756527313
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the cranelift<span aria-label=\"goal\" class=\"emoji emoji-1f945\" role=\"img\" title=\"goal\">:goal:</span>optimize-speed label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11578\">Issue #11578</a>.</p>",
        "id": 536886538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756527313
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11578#issuecomment-3238928655\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11578\">issue #11578</a>:</p>\n<blockquote>\n<p>Slightly more backgrond <a href=\"#narrow/channel/217117-cranelift/topic/branch.20optimization.2C.20is.20there.20a.20flag.20for.20that.3F/with/536886412\">on Zulip</a> too</p>\n</blockquote>",
        "id": 536886581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756527355
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11578#issuecomment-3239551258\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11578\">issue #11578</a>:</p>\n<blockquote>\n<p>@playX18 could you clarify a bit more what rewrite you would expect here? There are at least two that are conceptually possible:</p>\n<ul>\n<li>\n<p>Do you expect the <code>v8 = icmp_imm eq v7, 6</code> comparison to \"see through\" the <code>v7 = select ...</code>, with both of its inputs equal to constants, and remove this icmp in favor of using the select's condition (<code>v4</code>) directly?</p>\n<p>That seems feasible with a rewrite rule -- feel free to contribute a PR if you're up for it! It would go in the ISLE mid-end rules we have in <code>cranelift/codegen/src/opts/</code>. Keep in mind that <code>icmp_imm</code> will be legalized to an <code>icmp</code> before the mid-end runs, so you'll want to match on something like <code>(icmp _ (IntCC.Equal) (select _ inner_cond (iconst_u _ k1) (iconst_u _ k2)) (iconst_u _ k1))</code> and rewrite to <code>inner_cond</code> with a side condition that <code>k1 != k2</code> (and probably the other variations on that, e.g. NotEqual, and opposite argument order).</p>\n</li>\n<li>\n<p>Do you expect that the <code>brif</code> on <code>v8</code> with an if-else diamond computing two values and then merging them with a blockparam will become a <code>select</code> (i.e., no control flow)?</p>\n<p>This one is considerably harder: it requires support for seeing through blockparams during mid-end opts, which has very subtle interactions with the single-pass acyclic nature of our rewrite system; and it requires editing the control-flow graph, which <em>also</em> has complex interactions with the way that the rewrite pass works. At some point we'd like to support this, but it would require pretty deep investment from core Cranelift folks to think it through.</p>\n</li>\n</ul>\n</blockquote>",
        "id": 536940977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756589419
    }
]