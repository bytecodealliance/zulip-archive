[
    {
        "content": "<p>akldc opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10976\">issue #10976</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">none</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">preserve_frame_pointers</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_multi_ret_implicit_sret</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">f64x2</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">const0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x66dcb93ce18195cd25ba9b1858b0b8d5</span>\n\n<span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bor_not</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v80</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fmul</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v16</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v80</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n<h3>Result</h3>\n<p>Run this test case on four architectures.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">x86</span><span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0xffffffffffffffffffffffffffffffff</span>\n<span class=\"p\">[</span><span class=\"n\">aarch64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0xffffffffffffffffffffffffffffffff</span>\n<span class=\"p\">[</span><span class=\"n\">riscv64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff80000000000007ff8000000000000</span>\n<span class=\"p\">[</span><span class=\"n\">s390x</span><span class=\"w\">  </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0xffffffffffffffffffffffffffffffff</span>\n</code></pre></div>\n<p>The result on riscv64 differs from the other architectures.</p>\n</blockquote>",
        "id": 522895368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749302308
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10976\">Issue #10976</a>.</p>",
        "id": 522895369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749302308
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the fuzz-bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10976\">Issue #10976</a>.</p>",
        "id": 522895370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749302308
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the cranelift:area:riscv64 label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10976\">Issue #10976</a>.</p>",
        "id": 522903418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749311672
    },
    {
        "content": "<p>akldc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10976#issuecomment-2970486295\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10976\">issue #10976</a>:</p>\n<blockquote>\n<p>@alexcrichton Any follow‑up on this issue? I’ve found a few other related cases.</p>\n</blockquote>",
        "id": 523951108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749822757
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10976#issuecomment-2970606506\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10976\">issue #10976</a>:</p>\n<blockquote>\n<p>Alas we don't have any one actively working on the riscv64 backend at this time. I took a glance and I don't immediately know the solution myself, but I'm also pretty unfamilar with riscv64's vector extension. I do think that these issues are valuable nevertheless, but if you've got some related issues it might make sense to drop more tests on the current issues instead of opening new issues? </p>\n<p>If you're curious to continue to do this testing it may make sense to exclude riscv64 for now until these preexisting issues have been fixed too.</p>\n</blockquote>",
        "id": 523959190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749825369
    },
    {
        "content": "<p>akldc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10976#issuecomment-2973821468\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10976\">issue #10976</a>:</p>\n<blockquote>\n<p>@alexcrichton <br>\nOk, we won't be opening new issues for similar problems for now. We're very interested in Cranelift, and we might report new issues in the future if we run into something more meaningful or with different behavior — like issues related to other architectures such as aarch64 or s390x.</p>\n</blockquote>",
        "id": 524130036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749992956
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10976\">issue #10976</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">none</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">preserve_frame_pointers</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_multi_ret_implicit_sret</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">f64x2</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">const0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x66dcb93ce18195cd25ba9b1858b0b8d5</span>\n\n<span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bor_not</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v80</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fmul</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v16</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v80</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n<h3>Result</h3>\n<p>Run this test case on four architectures.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">x86</span><span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0xffffffffffffffffffffffffffffffff</span>\n<span class=\"p\">[</span><span class=\"n\">aarch64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0xffffffffffffffffffffffffffffffff</span>\n<span class=\"p\">[</span><span class=\"n\">riscv64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0x7ff80000000000007ff8000000000000</span>\n<span class=\"p\">[</span><span class=\"n\">s390x</span><span class=\"w\">  </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0xffffffffffffffffffffffffffffffff</span>\n</code></pre></div>\n<p>The result on riscv64 differs from the other architectures.</p>\n</blockquote>",
        "id": 524141574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750004294
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10976#issuecomment-2974180802\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10976\">issue #10976</a>:</p>\n<blockquote>\n<p>That seems reasonable yeah, I'm going to try again to poke at a few of these and see if I recognize them. FWIW if you're curious I'd be quite interested to hear more about what you're doing in in the <a href=\"https://github.com/bytecodealliance/meetings/tree/main/cranelift\">Cranelift project meeting</a> and I'm sure others would as well, so you're welcome to join if you'd like!</p>\n<hr>\n<p>For this specific issue after digging in a bit I believe this is expected behavior. The results here are f64x2(NaN, NaN) and Cranelift doesn't guarantee deterministic NaN patterns across platforms. If I add <code>set enable_nan_canonicalization=true</code> I get the same result on riscv64 and x86 so this issue is otherwise working as intended. Now the others definitely look like legitimate issues though...</p>\n</blockquote>",
        "id": 524141576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750004295
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10976#issuecomment-2974598080\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10976\">issue #10976</a>:</p>\n<blockquote>\n<blockquote>\n<p>FWIW if you're curious I'd be quite interested to hear more about what you're doing in in the <a href=\"https://github.com/bytecodealliance/meetings/tree/main/cranelift\">Cranelift project meeting</a> and I'm sure others would as well, so you're welcome to join if you'd like!</p>\n</blockquote>\n<p>I'll second this -- thanks for doing this round of fuzzing; and we're always interested in finding new ways of adding to our testing.</p>\n</blockquote>",
        "id": 524149611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750014024
    }
]