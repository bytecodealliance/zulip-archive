[
    {
        "content": "<p><strong>dhil</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251\">PR #10251</a>.</p>",
        "id": 500869986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740055835
    },
    {
        "content": "<p><strong>dhil</strong> requested <a href=\"https://github.com/dicej\">dicej</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251\">PR #10251</a>.</p>",
        "id": 500869987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740055835
    },
    {
        "content": "<p>dhil opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251\">PR #10251</a> from <code>dhil:tags</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This patch is a subset of PR #10177. It adds support for tags in Wasmtime. Tags are used by the exception handling and stack switching proposals for typing and matching transfers of control.</p>\n<p>This patch does not implement component model or C API support for tags.</p>\n<p>CC @frank-emrich</p>\n</blockquote>",
        "id": 500869988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740055835
    },
    {
        "content": "<p>dhil updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251\">PR #10251</a>.</p>",
        "id": 500870866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740056101
    },
    {
        "content": "<p>dhil edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251\">PR #10251</a>:</p>\n<blockquote>\n<p>This patch is a subset of PR #10177. It adds support for tags in Wasmtime. Tags are used by the exception handling and stack switching proposals for typing and matching transfers of control.</p>\n<p>This patch does not implement component model or C API support for tags. Issue #10252 tracks these two things.</p>\n<p>CC @frank-emrich</p>\n</blockquote>",
        "id": 500870988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740056139
    },
    {
        "content": "<p>dhil updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251\">PR #10251</a>.</p>",
        "id": 500894799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740062190
    },
    {
        "content": "<p><strong>dhil</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251\">PR #10251</a>.</p>",
        "id": 500899059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740063277
    },
    {
        "content": "<p><strong>dhil</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251\">PR #10251</a>.</p>",
        "id": 500899060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740063277
    },
    {
        "content": "<p>dhil updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251\">PR #10251</a>.</p>",
        "id": 500899063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740063277
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#issuecomment-2671890974\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251\">PR #10251</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\", \"wasmtime:api\", \"wasmtime:c-api\", \"wasmtime:config\", \"wasmtime:ref-types\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing, wasmtime:ref-types</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 500911128,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740066312
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#pullrequestreview-2630330215\">PR review</a>:</p>\n<blockquote>\n<p>Thank you again for being willing to split up the PR, it's  very helpful!</p>\n</blockquote>",
        "id": 500912117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740066551
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#discussion_r1963837330\">PR review comment</a>:</p>\n<blockquote>\n<p>I added a \"miscellaneous TODO items\" section on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10248\">https://github.com/bytecodealliance/wasmtime/issues/10248</a> and added this there too (trying to ensure FIXME's like this are written down in issues)</p>\n</blockquote>",
        "id": 500912121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740066552
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251\">PR #10251</a>.</p>",
        "id": 500917264,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740067830
    },
    {
        "content": "<p>dhil <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#issuecomment-2672114728\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251\">PR #10251</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thank you again for being willing to split up the PR, it's very helpful!</p>\n</blockquote>\n<p>My pleasure! Thanks!</p>\n</blockquote>",
        "id": 500928738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740070919
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#pullrequestreview-2645764694\">PR review</a>.</p>",
        "id": 502134897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740600540
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#discussion_r1972329164\">PR review comment</a>:</p>\n<blockquote>\n<p>When you have a moment, can you update the above struct pseudo-definition to reflect the changes from this PR? Thanks!</p>\n</blockquote>",
        "id": 502134898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740600540
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#pullrequestreview-2645790263\">PR review</a>.</p>",
        "id": 502136279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740601002
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#discussion_r1972341601\">PR review comment</a>:</p>\n<blockquote>\n<p>This should validate that the function type only has parameters and not results, right? I'll add an item to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10177\">https://github.com/bytecodealliance/wasmtime/pull/10177</a> for this, but feel free to remove it if my understanding is incorrect.</p>\n</blockquote>",
        "id": 502136282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740601002
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#discussion_r1972341601\">PR review comment</a>.</p>",
        "id": 502136718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740601160
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#pullrequestreview-2645955014\">PR review</a>.</p>",
        "id": 502145524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740604458
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#discussion_r1972423938\">PR review comment</a>:</p>\n<blockquote>\n<p>Do we actually need a separate <code>VMTagImport</code> from <code>VMTagDefinition</code>?</p>\n<p>Because each tag is immutable (right?) we can inline the original <code>VMTagDefinition</code> for imported tags, removing the distinction between imported vs defined tags at the vmctx level. And <code>VMTagDefinition</code> happens to be smaller than a pointer on 64-bit architectures, so between that and removing an indirection, it is a double win.</p>\n</blockquote>",
        "id": 502145525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740604458
    },
    {
        "content": "<p>dhil submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#pullrequestreview-2645964345\">PR review</a>.</p>",
        "id": 502146297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740604770
    },
    {
        "content": "<p>dhil created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#discussion_r1972430130\">PR review comment</a>:</p>\n<blockquote>\n<p>Only for exception tags. But currently we don't have an exceptions feature. When stack switching is enabled the results can be nonempty.</p>\n</blockquote>",
        "id": 502146299,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740604771
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#pullrequestreview-2645973630\">PR review</a>.</p>",
        "id": 502146945,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740605043
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#discussion_r1972436280\">PR review comment</a>:</p>\n<blockquote>\n<p>Similarly it seems like we could just inline the tag's <code>VMSharedTypeIndex</code> here and avoid an indirection.</p>\n</blockquote>",
        "id": 502146954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740605043
    },
    {
        "content": "<p>dhil submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#pullrequestreview-2645974774\">PR review</a>.</p>",
        "id": 502147040,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740605081
    },
    {
        "content": "<p>dhil created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#discussion_r1972436943\">PR review comment</a>:</p>\n<blockquote>\n<p>The key thing as far as I am aware is that tags are nominal. So we need to equip them with an unique identity, one per module instance. </p>\n</blockquote>",
        "id": 502147041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740605081
    },
    {
        "content": "<p>frank-emrich submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#pullrequestreview-2645999812\">PR review</a>.</p>",
        "id": 502148560,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740605682
    },
    {
        "content": "<p>frank-emrich created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#discussion_r1972450666\">PR review comment</a>:</p>\n<blockquote>\n<p>I actually added those in a follow up PR <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10265/files#diff-6419ff9508ee5b42d1de13f9509eed5a52ae455d696dedc2b74e090e279757dfR32-R36\">here</a> when I was touching the VMContext again.</p>\n</blockquote>",
        "id": 502148562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740605682
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#pullrequestreview-2646006742\">PR review</a>.</p>",
        "id": 502149158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740605933
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#discussion_r1972454794\">PR review comment</a>:</p>\n<blockquote>\n<p>Gotcha, thanks!</p>\n</blockquote>",
        "id": 502149160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740605933
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#pullrequestreview-2646009418\">PR review</a>.</p>",
        "id": 502149302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740605999
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#discussion_r1972456261\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, okay, that is good to know, I didn't realize they were nominal.</p>\n</blockquote>",
        "id": 502149304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740605999
    },
    {
        "content": "<p>dhil submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#pullrequestreview-2646065955\">PR review</a>.</p>",
        "id": 502153738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740607839
    },
    {
        "content": "<p>dhil created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#discussion_r1972492562\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that'd be unsound. Consider this example:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span> <span class=\"nv\">$m1</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$ft</span> <span class=\"p\">(</span><span class=\"k\">func</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"err\">tag</span> <span class=\"nv\">$foo</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"catch-foo\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"nv\">$f</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"nv\">$ft</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\">block</span> <span class=\"nv\">$on_foo</span>\n      <span class=\"p\">(</span><span class=\"err\">try_</span><span class=\"k\">table</span> <span class=\"p\">(</span><span class=\"err\">catch</span> <span class=\"nv\">$foo</span> <span class=\"nv\">$on_foo</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"nv\">$ft</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$f</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"nb\">unreachable</span><span class=\"p\">)</span>\n    <span class=\"p\">))</span>\n<span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"err\">register</span> <span class=\"s2\">\"m1\"</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\">module</span> <span class=\"nv\">$m2</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$ft</span> <span class=\"p\">(</span><span class=\"k\">func</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$catch-foo</span> <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"m1\"</span> <span class=\"s2\">\"catch-foo\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"nv\">$ft</span><span class=\"p\">)))</span>\n\n  <span class=\"p\">(</span><span class=\"err\">tag</span> <span class=\"nv\">$foo</span> <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"m1\"</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"err\">tag</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$throw_foo</span>\n    <span class=\"p\">(</span><span class=\"err\">throw</span> <span class=\"nv\">$foo</span><span class=\"p\">))</span>\n\n  <span class=\"c1\">;; Handle the imported foo.</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$f</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main-1\"</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">block</span> <span class=\"nv\">$on_foo</span>\n      <span class=\"p\">(</span><span class=\"err\">try_</span><span class=\"k\">table</span> <span class=\"p\">(</span><span class=\"err\">catch</span> <span class=\"nv\">$foo</span> <span class=\"nv\">$on_foo</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$g</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"nb\">unreachable</span><span class=\"p\">)</span>\n    <span class=\"p\">))</span>\n\n  <span class=\"c1\">;; Handle this module's bar.</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$g</span>\n    <span class=\"p\">(</span><span class=\"k\">block</span> <span class=\"nv\">$on_bar</span>\n      <span class=\"p\">(</span><span class=\"err\">try_</span><span class=\"k\">table</span> <span class=\"p\">(</span><span class=\"err\">catch</span> <span class=\"nv\">$bar</span> <span class=\"nv\">$on_bar</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$throw_foo</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"nb\">unreachable</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">unreachable</span><span class=\"p\">))</span>\n   <span class=\"p\">(</span><span class=\"k\">elem</span> <span class=\"err\">declare</span> <span class=\"k\">func</span> <span class=\"nv\">$g</span><span class=\"p\">)</span>\n\n  <span class=\"c1\">;; Handle the imported foo with the imported function</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$h</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main-2\"</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$catch-foo</span> <span class=\"p\">(</span><span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"nv\">$g</span><span class=\"p\">)))</span>\n<span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"err\">register</span> <span class=\"s2\">\"m2\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"main-1\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"main-2\"</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>It is important here that <code>foo</code> and <code>bar</code> are different. And it is important that the identity of <code>foo</code> is preserved after the import.</p>\n</blockquote>",
        "id": 502153740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740607839
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#pullrequestreview-2648591361\">PR review</a>.</p>",
        "id": 502342640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740678134
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10251#discussion_r1974065973\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for the example, I made this comment before I realized that tags were nominal.</p>\n</blockquote>",
        "id": 502342644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740678135
    }
]