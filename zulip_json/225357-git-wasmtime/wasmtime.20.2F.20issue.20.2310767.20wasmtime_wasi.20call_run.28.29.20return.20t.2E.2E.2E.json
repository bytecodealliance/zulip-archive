[
    {
        "content": "<p>Timmmm opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767\">issue #10767</a>:</p>\n<blockquote>\n<p>I'm running a WASM module like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>let result_result = command.wasi_cli_run().call_run(&amp;mut store).await;\n</code></pre></div>\n\n<p><code>call_run()</code> is unfortunately <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/bindings/exports/wasi/cli/run/struct.Guest.html#method.call_run\">completely undocumented</a> (\"Run the program\" doesn't add anything), and the return type is very unobvious: <code>Result&lt;Result&lt;(), ()&gt;&gt;</code>. Expanding the <code>Result</code>s it's actually <code>anyhow::Result&lt;std::result::Result&lt;(), ()&gt;&gt;</code>.</p>\n<p>So I think there are two sources of possible error from this run, which probably explains the nested <code>Result</code>s:</p>\n<ol>\n<li>Some kind of error loading the module or with the bytecode or whatever.</li>\n<li>The module returns a non-zero exit code.</li>\n</ol>\n<p>I assumed that the <em>inner</em> <code>Result&lt;(), ()&gt;</code> would handle the latter case, but actually non-zero exit codes result in the <em>outer</em> <code>anyhow::Result&lt;&gt;</code> containing the error.</p>\n<p>That's very surprising and kind of awkward because there's no way to access the exit code either. I would have expected a return type of <code>anyhow::Result&lt;ExitStatus&gt;</code> surely?</p>\n</blockquote>",
        "id": 517373542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746979301
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767#issuecomment-2870002064\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767\">issue #10767</a>:</p>\n<blockquote>\n<p>Actually you can get the exit code like this, but it's still very weird.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">wasi_cli_run</span><span class=\"p\">().</span><span class=\"n\">call_run</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">run_result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Unknown error\"</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">exit</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">.</span><span class=\"n\">downcast_ref</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">I32Exit</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">info</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Call failed with exit code {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exit</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 517377732,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746982380
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767#issuecomment-2870071348\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767\">issue #10767</a>:</p>\n<blockquote>\n<p>You'll want to keep in mind that the API you linked is generated code, procedurally from a WIT file using the <code>bindgen!</code> macro. If you're interested I think it'd make sense to add docs to the top-level <code>wasmtime-wasi</code> crate, but it's not currently possible to add extra Rust-specific docs to each function.</p>\n<p>As for the actual specifics of what's going on here, it is:</p>\n<ul>\n<li><code>Ok(Ok(()))</code> - the guest executed successfully and returned an \"ok\" return status from <code>main</code></li>\n<li><code>Ok(Err(()))</code> - the guest executed successfully and returned an \"err\" return status from <code>main</code></li>\n<li><code>Err(e)</code> - the guest aborted execution via a trap of some kind or a host error<ul>\n<li>As a sub-case of this, as you've found, the <code>I32Exit</code> structure can be used to detect explicit exit codes from the guest.</li>\n</ul>\n</li>\n</ul>\n<p>If you're interested in adding extra helpers to this type that'd be most welcome! We can have custom <code>impl Guest</code> blocks within the <code>wasmtime-wasi</code> crate to add more methods to <code>bindgen!</code>-generated methods.</p>\n</blockquote>",
        "id": 517391488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746993378
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime:docs label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767\">Issue #10767</a>.</p>",
        "id": 517391491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746993381
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767#issuecomment-2870215480\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767\">issue #10767</a>:</p>\n<blockquote>\n<p>What's the difference between an \"err\" status returned from <code>main</code> and a non-zero exit code?</p>\n<p>And that's unfortunate about the auto-generation. Seems like <code>Run the program.</code> comes from a <code>.wit</code> file so it probably doesn't make sense to add docs about Rust there. Is there a way to inject extra documentation somehow?</p>\n</blockquote>",
        "id": 517398393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746999287
    },
    {
        "content": "<p>primoly <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767#issuecomment-2873946790\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767\">issue #10767</a>:</p>\n<blockquote>\n<p>The <code>run</code> function simply returns <code>result</code> (shorthand for <code>result&lt;_, _&gt;</code>), so it just indicates success or failure.[^1] To return an exit code, a <code>command</code> component has to call <code>exit-with-code</code> inside <code>run</code>.[^2] As the docs say, <code>exit-with-code</code> will not return from the componentâ€™s point of view, so <code>wasmtime-wasi</code> instead returns <code>Err(I32Exit&lt;status_code&gt;)</code> to propagate the error code up to the caller of <code>call_run</code>.[^3]</p>\n<p>&lt;details&gt;&lt;summary&gt;Example of a component exiting with status code 77&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"err\">component</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span>\n    <span class=\"p\">(</span><span class=\"err\">instance</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"s2\">\"status-code\"</span> <span class=\"err\">u</span><span class=\"mi\">8</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"cm\">(;0;)</span> <span class=\"s2\">\"exit-with-code\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"wasi:cli/exit@0.2.5\"</span> <span class=\"p\">(</span><span class=\"err\">instance</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"k\">module</span> <span class=\"cm\">(;0;)</span>\n    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"cm32p2|wasi:cli/exit@0.2\"</span> <span class=\"s2\">\"exit-with-code\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$exit-with-code</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"cm32p2|wasi:cli/run@0.2|run\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$run</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$run</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mi\">77</span>\n      <span class=\"nb\">call</span> <span class=\"nv\">$exit-with-code</span> <span class=\"c1\">;; This will never return.</span>\n      <span class=\"nb\">unreachable</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"err\">alias</span> <span class=\"k\">export</span> <span class=\"mi\">0</span> <span class=\"s2\">\"exit-with-code\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"err\">canon</span> <span class=\"err\">lower</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"err\">instance</span> <span class=\"cm\">(;0;)</span>\n    <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"exit-with-code\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"err\">instance</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"err\">instantiate</span> <span class=\"mi\">0</span>\n      <span class=\"p\">(</span><span class=\"err\">with</span> <span class=\"s2\">\"cm32p2|wasi:cli/exit@0.2\"</span> <span class=\"p\">(</span><span class=\"err\">instance</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">result</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"err\">alias</span> <span class=\"err\">core</span> <span class=\"k\">export</span> <span class=\"mi\">1</span> <span class=\"s2\">\"cm32p2|wasi:cli/run@0.2|run\"</span> <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"k\">func</span> <span class=\"cm\">(;1;)</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">canon</span> <span class=\"err\">l</span><span class=\"nb\">if</span><span class=\"err\">t</span> <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"err\">component</span> <span class=\"cm\">(;0;)</span>\n    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">result</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"import-func-run\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">result</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"cm\">(;1;)</span> <span class=\"s2\">\"run\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">3</span><span class=\"p\">)))</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"err\">instance</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"err\">instantiate</span> <span class=\"mi\">0</span>\n      <span class=\"p\">(</span><span class=\"err\">with</span> <span class=\"s2\">\"import-func-run\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"cm\">(;2;)</span> <span class=\"s2\">\"wasi:cli/run@0.2.5\"</span> <span class=\"p\">(</span><span class=\"err\">instance</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>On the topic of the <strong>outer</strong> <code>Result</code>: Maybe it would make sense for <code>bindgen</code> generated functions to return something like <code>Result&lt;T, ComponentExecutionError&gt;</code> making it clearer what itâ€™s for and how it differs from the returned value of the component function (<code>result</code> or not).</p>\n<p>[^1]: <a href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/run.wit\">https://github.com/WebAssembly/wasi-cli/blob/main/wit/run.wit</a><br>\n[^2]: <a href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/exit.wit\">https://github.com/WebAssembly/wasi-cli/blob/main/wit/exit.wit</a><br>\n[^3]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/9d40c6eb67d0d791c68fae46a2059647ca0e5dbc/crates/wasi/src/p2/host/exit.rs#L16-L18\">https://github.com/bytecodealliance/wasmtime/blob/9d40c6eb67d0d791c68fae46a2059647ca0e5dbc/crates/wasi/src/p2/host/exit.rs#L16-L18</a></p>\n</blockquote>",
        "id": 517657964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747082369
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767#issuecomment-2875075076\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767\">issue #10767</a>:</p>\n<blockquote>\n<p>Can indeed confirm that as @primoly said the difference is returned-from-main vs exited-with-wasi-function.</p>\n<p>Currently there's no way to edit the documentation of generated methods. There's workarounds to prepend documentation to generated types but that's all I've figured out how to do at least.</p>\n</blockquote>",
        "id": 517738749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747113399
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767#issuecomment-2927866423\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767\">issue #10767</a>:</p>\n<blockquote>\n<p>Ok even weirder, if you <code>exit(0)</code> then it still calls <code>exit-with-code</code> and you get an <code>Err(I32Exit(0))</code> which is really surprising. So actually I need to do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">wasi_cli_run</span><span class=\"p\">().</span><span class=\"n\">call_run</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">run_result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Unknown error\"</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">exit</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">.</span><span class=\"n\">downcast_ref</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">I32Exit</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">exit</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                  </span><span class=\"n\">info</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Call failed with exit code {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exit</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">                  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n<span class=\"w\">               </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">              </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n</code></pre></div>\n<p>That's... unfortunate!</p>\n</blockquote>",
        "id": 521598966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748810567
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767#issuecomment-2932474819\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767\">issue #10767</a>:</p>\n<blockquote>\n<p>Yes, it is unfortunate. Wasi provides exit only because unwinding (via the now <a href=\"https://github.com/WebAssembly/proposals?tab=readme-ov-file#phase-4---standardize-the-feature-wg\">Phase 4</a> <a href=\"https://github.com/WebAssembly/exception-handling\">exception handling proposal</a>) was not available at the time that Wasi Preview 0, 1 and 2 were written. Since we are providing special machinery outside of the Wasm VM to make up for a feature the Wasm VM doesn't have, this is a really awkward feature to implement. We hope that it will be better in the future.</p>\n</blockquote>",
        "id": 521842824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748897993
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767#issuecomment-2932474819\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767\">issue #10767</a>:</p>\n<blockquote>\n<p>Yes, it is unfortunate. Wasi provides exit only because unwinding (via the now <a href=\"https://github.com/WebAssembly/proposals?tab=readme-ov-file#phase-4---standardize-the-feature-wg\">Phase 4</a> <a href=\"https://github.com/WebAssembly/exception-handling\">exception handling proposal</a>) was not available at the time that Wasi Preview 0, 1 and 2 were written. Since we are providing special machinery outside of the Wasm VM to make up for a feature the Wasm VM doesn't have, this is a really awkward feature to implement. We hope that it will be better in the future. Wasmtime doesn't yet have exception-handling implemented, but its high on Chris Fallin's list for this summer. Wasi Preview 3 may be able to include a change that eliminates exit if all of the runtimes and guests are able to switch to exception handling in time, otherwise it may have to wait for Preview 4.</p>\n</blockquote>",
        "id": 521843050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748898051
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767#issuecomment-2932491323\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767\">issue #10767</a>:</p>\n<blockquote>\n<p>How would the exception handling proposal help here? <code>exit(N)</code> is supposed to immediately exit the process without running cleanup as would happen when you throw exceptions. This is explicitly documented in rust's libstd:</p>\n<p><a href=\"https://doc.rust-lang.org/stable/std/process/fn.exit.html\">https://doc.rust-lang.org/stable/std/process/fn.exit.html</a></p>\n<blockquote>\n<p>This function will never return and will immediately terminate the current process. The exit code is passed through to the underlying OS and will be available for consumption by another process.</p>\n<p>Note that because this function never returns, and that it terminates the process, no destructors on the current stack or any other threadâ€™s stack will be run.</p>\n</blockquote>\n</blockquote>",
        "id": 521844044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748898411
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767#issuecomment-2932810885\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767\">issue #10767</a>:</p>\n<blockquote>\n<p>As I understand it, \"running cleanup\" is defined to the code that LLVM emits into catch blocks, and rustc would elect not put any sort of Drop impl destructors in there. I don't know how this would interop with C++ code using exceptions over the FFI, though, and if in practice it won't, I guess we are stuck with treating exit specially forever - unless someone adds it explicitly to core wasm, which I sincerely doubt.</p>\n</blockquote>",
        "id": 521859636,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748905381
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767#issuecomment-2934092854\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10767\">issue #10767</a>:</p>\n<blockquote>\n<blockquote>\n<p>As I understand it, \"running cleanup\" is defined to the code that LLVM emits into catch blocks, and rustc would elect not put any sort of Drop impl destructors in there.</p>\n</blockquote>\n<p>With <code>-Cpanic=unwind -Ctarget-feature=+exception-handling</code>, rustc will emit wasm that uses <code>catch_call</code> + <code>rethrow</code> for running Drop impls on exceptions: <a href=\"https://rust.godbolt.org/z/q17TPb364\">https://rust.godbolt.org/z/q17TPb364</a></p>\n</blockquote>",
        "id": 521936066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748938934
    }
]