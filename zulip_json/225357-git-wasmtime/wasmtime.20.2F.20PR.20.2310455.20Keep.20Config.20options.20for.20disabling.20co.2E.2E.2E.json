[
    {
        "content": "<p><strong>Stebalien</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455\">PR #10455</a>.</p>",
        "id": 507359025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742587988
    },
    {
        "content": "<p><strong>Stebalien</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455\">PR #10455</a>.</p>",
        "id": 507359026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742587988
    },
    {
        "content": "<p>Stebalien opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455\">PR #10455</a> from <code>Stebalien:steb/wasm-config</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This patch keeps config options for disabling default-enabled wasmtime features, even when those features are disabled via crate feature flags. That way, these wasm features can be disabled by libraries even if the crate-level features are later enabled by some other crate in the build-tree.</p>\n<p>Specifically, the following methods are available on the <code>wasmtime::Config</code> type, regardless of the enabled crate features:</p>\n<ol>\n<li><code>Config::wasm_threads</code>.</li>\n<li><code>Config::wasm_reference_types</code>.</li>\n<li><code>Config::wasm_component_model</code>.</li>\n<li><code>Config::parallel_compilation</code>.</li>\n</ol>\n<p>Of these, enabling any of the first three while the corresponding crate feature is disabled will lead to a runtime error when constructing the <code>wasmtime::Engine</code>. Enabling the last one, parallel compilation, will simply do nothing.</p>\n<p>fixes #10454</p>\n</blockquote>",
        "id": 507359027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742587988
    },
    {
        "content": "<p>Stebalien <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#issuecomment-2744365316\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455\">PR #10455</a>:</p>\n<blockquote>\n<p>I've tried to keep this change as minimal as possible and stuck to default-enabled features. I'm also happy to extend it to (any of the) features that are currently default-disabled:</p>\n<ul>\n<li><code>Config::async_support</code></li>\n<li><code>Config::wasm_function_references</code></li>\n<li><code>Config::wasm_gc</code></li>\n<li><code>Config::component_model_async</code></li>\n<li><code>Config::coredump_on_trap</code></li>\n<li><code>Config::wmemcheck</code></li>\n<li><code>Config::debug_adapter_modules</code></li>\n</ul>\n<p>Also note: I didn't bother with cranelift/winch options. As I understand it, those will only matter if you actually use cranelift/winch so they shouldn't affect any creates that aren't using the cranelift/winch features.<br>\n</p>\n</blockquote>",
        "id": 507359796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742588263
    },
    {
        "content": "<p>Stebalien submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#pullrequestreview-2707183009\">PR review</a>.</p>",
        "id": 507360489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742588547
    },
    {
        "content": "<p>Stebalien created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#discussion_r2008287118\">PR review comment</a>:</p>\n<blockquote>\n<p>Judging by the test failures, this feature flag shouldn't be here in the first place and this feature is enabled by-default regardless, right?</p>\n</blockquote>",
        "id": 507360493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742588547
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#pullrequestreview-2707226252\">PR review</a>.</p>",
        "id": 507364630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742590033
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#discussion_r2008311434\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh this is a bit subtle, and this also changed historically with Wasmtime. In essence though <code>REFERENCE_TYPES</code> should always be enabled regardless of what the crate features are, it's the <code>GC_TYPES</code> feature which is actually gated based on <code>feature = \"gc\"</code>. There's no <code>wasm_gc_types(...)</code> configuration method, though. </p>\n<p>I think this can be fixed by updating the validator to allow reference-types being enabled with <code>feature = \"gc\"</code> being turned off. It's <code>feature = \"gc\"</code> being turned off plus <code>GC_TYPES</code> being turned on that should be an error.</p>\n</blockquote>",
        "id": 507364644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742590039
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#issuecomment-2744418241\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455\">PR #10455</a>:</p>\n<blockquote>\n<p>I think it might make sense to un-gate <code>wasm_*</code> configuration while you're here, but for the others I think it's ok to leave them as-is and deal with them as they come up later. Although if you'd like to handle them here that's also ok.</p>\n</blockquote>",
        "id": 507364776,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742590100
    },
    {
        "content": "<p>Stebalien submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#pullrequestreview-2707472606\">PR review</a>.</p>",
        "id": 507379064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742596634
    },
    {
        "content": "<p>Stebalien created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#discussion_r2008433293\">PR review comment</a>:</p>\n<blockquote>\n<ul>\n<li>What happens if I turn off <code>wasm_reference_types</code> but enable the GC feature?</li>\n<li>Should <code>wasm_gc</code> toggle <code>GC_TYPES</code>?</li>\n</ul>\n</blockquote>",
        "id": 507379065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742596634
    },
    {
        "content": "<p>Stebalien updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455\">PR #10455</a>.</p>",
        "id": 507379182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742596706
    },
    {
        "content": "<p>Stebalien submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#pullrequestreview-2707479170\">PR review</a>.</p>",
        "id": 507379672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742597026
    },
    {
        "content": "<p>Stebalien created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#discussion_r2008436743\">PR review comment</a>:</p>\n<blockquote>\n<p>Also, does this apply to function references? That is, can I enable function references _without_ the GC feature?</p>\n</blockquote>",
        "id": 507379673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742597026
    },
    {
        "content": "<p>Stebalien updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455\">PR #10455</a>.</p>",
        "id": 507380215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742597290
    },
    {
        "content": "<p>Stebalien edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455\">PR #10455</a>:</p>\n<blockquote>\n<p>This patch keeps config options for disabling default-enabled wasmtime features, even when those features are disabled via crate feature flags. That way, these wasm features can be disabled by libraries even if the crate-level features are later enabled by some other crate in the build-tree.</p>\n<p>Specifically, the following <code>wasmtime::Config</code> methods are now enabled regardless of compile-time features (removed dependency on the GC feature):</p>\n<ol>\n<li><code>Config::wasm_reference_types</code>.</li>\n<li><code>Config::wasm_function_references</code>.</li>\n</ol>\n<p>The following methods are available on the <code>wasmtime::Config</code> type, regardless of the enabled crate features but will lead to runtime errors when constructing a <code>wasmtime::Engine</code>:</p>\n<ol>\n<li><code>Config::wasm_threads</code>.</li>\n<li><code>Config::wasm_gc</code>.</li>\n<li><code>Config::wasm_component_model</code>.</li>\n<li><code>Config::wasm_component_model_async</code>.</li>\n</ol>\n<p>Finally, <code>Config::parallel_compilation</code> is defined regardless of whether or not the parallel compilation feature is enabled. However, without the corresponding crate feature, this config option is a no-op.</p>\n<p>fixes #10454</p>\n</blockquote>",
        "id": 507380327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742597366
    },
    {
        "content": "<p>Stebalien <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#issuecomment-2744622010\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455\">PR #10455</a>:</p>\n<blockquote>\n<p>I've updated the PR per the new description to:</p>\n<ol>\n<li>Always define the <code>Config::wasm_*</code> functions.</li>\n<li>Allow setting <code>Config::wasm_reference_types</code> and <code>Config::wasm_function_references</code> (I'm not sure if this second one is correct, pending discussion in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#discussion_r2008436743\">https://github.com/bytecodealliance/wasmtime/pull/10455#discussion_r2008436743</a>).</li>\n</ol>\n</blockquote>",
        "id": 507380521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742597481
    },
    {
        "content": "<p>Stebalien updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455\">PR #10455</a>.</p>",
        "id": 507380558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742597515
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#issuecomment-2744688733\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455\">PR #10455</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 507385578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742600707
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#pullrequestreview-2707582008\">PR review</a>.</p>",
        "id": 507386547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742601458
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#discussion_r2008491047\">PR review comment</a>:</p>\n<blockquote>\n<p>If reference-types is turned off but GC is enabled, then that means GC-using modules will fail to load/compile because the feature is turned off, and the active feature at compile time is basically bloat/inert code and doesn't get used.</p>\n<p>For now the hope is we can internalize GC_TYPES to exclusively the <code>feature = \"gc\"</code> toggle, so <code>wasm_gc</code> should not turn on <code>GC_TYPES</code>. If <code>wasm_gc</code> is turned on though and <code>GC_TYPES</code> is off then you can still load modules, but only those that don't use types that require a GC.</p>\n<p>For function-references we don't require a GC for typed function references so you should be able to use such a module without the GC feature. </p>\n<p>The end goal is to have <code>wasm_gc</code> on-by-default in the future, and in such a world we still want GC-disabled builds of Wasmtime to still load modules, so that's what <code>GC_TYPES</code> is doing, basically disallowing loading modules at runtime which use features disabled at compile time.</p>\n</blockquote>",
        "id": 507386548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742601458
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#pullrequestreview-2707583770\">PR review</a>.</p>",
        "id": 507386819,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742601634
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#discussion_r2008491906\">PR review comment</a>:</p>\n<blockquote>\n<p>For this we should be able to remove this check entirely. I commented a bit above but on this specifically it's where <code>gc</code> is  safe to enable and it's just GC-using-things that aren't safe to enable. This is mostly because the GC proposal was larger than <em>just</em> GC references, it also introduced many other highly-related but still somewhat orthogonal things. The goal is to use <code>GC_TYPES</code> to separate out the runtime requirement but otherwise all the other stuff in the GC proposal is still valid.</p>\n</blockquote>",
        "id": 507386820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742601635
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#pullrequestreview-2707584650\">PR review</a>.</p>",
        "id": 507386885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742601665
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10455#discussion_r2008492214\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind adding a check below to return an error if this is explicitly enabled but disabled at compile time?</p>\n</blockquote>",
        "id": 507386886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742601665
    }
]