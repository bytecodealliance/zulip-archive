[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11690\">PR #11690</a> from <code>cfallin:wasm-impl-limit-function-size</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>In #11682 we see a module with an extremely large single function body (function index 193). This causes a panic in Cranelift as we run out of SSA value numbers: the <code>ValueDataPacked</code> bit-packing supports only 2^24 (16M) values per function.</p>\n<p>I started down the path of propagating <code>CodegenError</code>s everywhere throughout Cranelift to properly bubble up a<br>\n<code>CodegenError::CodeTooLarge</code>, but that turns out to be an extremely pervasive change: it means not only that we have more Result plumbing, but that (i) Cranelift's public API changes so that all function builder methods return Results, which is a huge change for any existing user; and (ii) ISLE can't generate Rust that propagates Results, so we need to awkwardly set an error flag on a context, return a fake Value, and \"catch\" it on the other side of the invocation, which is error-prone.</p>\n<p>I then considered a size-check on function bodies as they enter Cranelift, but at that point, realized that Wasm already provides for implementation limits for this purpose. The JS embedding spec at <a href=\"https://webassembly.github.io/spec/js-api/index.html#limits\">https://webassembly.github.io/spec/js-api/index.html#limits</a> specifies that a function body can be at most 7_654_321 bytes (7.65MB). We don't <em>have</em> to follow the JS embedding's implementation limits, but there is good reason to expect that producers will try to stay within them, and the reasons that led to those limits in Web engines' compilers equally apply to ours. This PR thus instead enforces the limit directly.</p>\n<p>Fixes #11682.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 538959035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757635530
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11690\">PR #11690</a>.</p>",
        "id": 538959037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757635531
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11690\">PR #11690</a>.</p>",
        "id": 538959038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757635531
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11690\">PR #11690</a>.</p>",
        "id": 538959039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757635531
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11690#issuecomment-3285782081\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11690\">PR #11690</a>:</p>\n<blockquote>\n<p>It might be better to enforce this in <code>wasmparser</code>, where we enforce the rest of these implementation limits:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/35f8671bce74190ef0b00ce36c399b053b490374/crates/wasmparser/src/limits.rs#L18-L44\">https://github.com/bytecodealliance/wasm-tools/blob/35f8671bce74190ef0b00ce36c399b053b490374/crates/wasmparser/src/limits.rs#L18-L44</a></p>\n</blockquote>",
        "id": 539100235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757691676
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11690#issuecomment-3286142766\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11690\">PR #11690</a>:</p>\n<blockquote>\n<p>Good point -- opened <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/2302\">https://github.com/bytecodealliance/wasm-tools/pull/2302</a> for this.</p>\n</blockquote>",
        "id": 539130153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757696951
    },
    {
        "content": "<p>cfallin closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11690\">PR #11690</a>.</p>",
        "id": 539130267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757696972
    }
]