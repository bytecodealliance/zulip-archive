[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11505\">issue #11505</a>:</p>\n<blockquote>\n<p>This input:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func))\n  (tag (;0;) (type 0))\n  (global (;0;) (mut i32) i32.const 1000)\n  (export \"\" (func 0))\n  (func (;0;) (type 0)\n    global.get 0\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 0\n    i32.const 1\n    i32.sub\n    global.set 0\n    loop (type 0) ;; label = @1\n      global.get 0\n      i32.eqz\n      if ;; label = @2\n        unreachable\n      end\n      global.get 0\n      i32.const 1\n      i32.sub\n      global.set 0\n      return_call 0\n      try_table ;; label = @2\n        try_table (type 0) (catch_all 0 (;@2;)) (catch_all 0 (;@2;)) (catch_all 0 (;@2;)) ;; label = @3\n        end\n      end\n    end\n  )\n)\n</code></pre></div>\n<p>panics with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">exceptions</span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">dev</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.10</span><span class=\"n\">s</span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">exceptions</span><span class=\"err\">`</span>\n\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">translate</span><span class=\"o\">/</span><span class=\"n\">code_translator</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">3162</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span>\n<span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Option</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">None</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>@cfallin I was curious to see what would happen since wasm-smith has support for exceptions. I don't think the support is too useful from a runtime perspective but it's likely interesting from a compile-time perspective (similar with most of our other wasm-smith-generated modules). If you're curious this is the diff I used to get <code>differential</code> running and it took a few seconds to find the above case:</p>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/fuzzing/src/generators/config.rs b/crates/fuzzing/src/generators/config.rs</span>\n<span class=\"gh\">index 553bbea530..72b9c0fc46 100644</span>\n<span class=\"gd\">--- a/crates/fuzzing/src/generators/config.rs</span>\n<span class=\"gi\">+++ b/crates/fuzzing/src/generators/config.rs</span>\n<span class=\"gu\">@@ -662,6 +662,7 @@ impl WasmtimeConfig {</span>\n<span class=\"w\"> </span>                config.config.gc_enabled = false;\n<span class=\"w\"> </span>                config.config.tail_call_enabled = false;\n<span class=\"w\"> </span>                config.config.reference_types_enabled = false;\n<span class=\"gi\">+                config.config.exceptions_enabled = false;</span>\n<span class=\"w\"> </span>                config.function_references_enabled = false;\n\n<span class=\"w\"> </span>                // Winch's SIMD implementations require AVX and AVX2.\n<span class=\"gh\">diff --git a/crates/fuzzing/src/generators/module.rs b/crates/fuzzing/src/generators/module.rs</span>\n<span class=\"gh\">index 97078890b8..7b65c92c4c 100644</span>\n<span class=\"gd\">--- a/crates/fuzzing/src/generators/module.rs</span>\n<span class=\"gi\">+++ b/crates/fuzzing/src/generators/module.rs</span>\n<span class=\"gu\">@@ -48,7 +48,7 @@ impl&lt;'a&gt; Arbitrary&lt;'a&gt; for ModuleConfig {</span>\n<span class=\"w\"> </span>        let _ = config.tail_call_enabled;\n<span class=\"w\"> </span>        let _ = config.extended_const_enabled;\n<span class=\"w\"> </span>        let _ = config.gc_enabled;\n<span class=\"gd\">-        config.exceptions_enabled = false;</span>\n<span class=\"gi\">+        let _ = config.exceptions_enabled;</span>\n<span class=\"w\"> </span>        config.custom_page_sizes_enabled = u.arbitrary()?;\n<span class=\"w\"> </span>        config.wide_arithmetic_enabled = u.arbitrary()?;\n<span class=\"w\"> </span>        config.memory64_enabled = u.ratio(1, 20)?;\n<span class=\"gh\">diff --git a/crates/fuzzing/src/oracles.rs b/crates/fuzzing/src/oracles.rs</span>\n<span class=\"gh\">index 39e6a948fc..1e717ccd44 100644</span>\n<span class=\"gd\">--- a/crates/fuzzing/src/oracles.rs</span>\n<span class=\"gi\">+++ b/crates/fuzzing/src/oracles.rs</span>\n<span class=\"gu\">@@ -1417,7 +1417,8 @@ mod tests {</span>\n<span class=\"w\"> </span>            | WasmFeatures::GC\n<span class=\"w\"> </span>            | WasmFeatures::GC_TYPES\n<span class=\"w\"> </span>            | WasmFeatures::CUSTOM_PAGE_SIZES\n<span class=\"gd\">-            | WasmFeatures::EXTENDED_CONST;</span>\n<span class=\"gi\">+            | WasmFeatures::EXTENDED_CONST</span>\n<span class=\"gi\">+            | WasmFeatures::EXCEPTIONS;</span>\n\n<span class=\"w\"> </span>        // All other features that wasmparser supports, which is presumably a\n<span class=\"w\"> </span>        // superset of the features that wasm-smith supports, are listed here as\n<span class=\"gh\">diff --git a/crates/fuzzing/src/oracles/diff_spec.rs b/crates/fuzzing/src/oracles/diff_spec.rs</span>\n<span class=\"gh\">index 643e9cb3b4..c5b9edbafc 100644</span>\n<span class=\"gd\">--- a/crates/fuzzing/src/oracles/diff_spec.rs</span>\n<span class=\"gi\">+++ b/crates/fuzzing/src/oracles/diff_spec.rs</span>\n<span class=\"gu\">@@ -28,6 +28,7 @@ impl SpecInterpreter {</span>\n<span class=\"w\"> </span>        config.custom_page_sizes_enabled = false;\n<span class=\"w\"> </span>        config.wide_arithmetic_enabled = false;\n<span class=\"w\"> </span>        config.extended_const_enabled = false;\n<span class=\"gi\">+        config.exceptions_enabled = false;</span>\n\n<span class=\"w\"> </span>        Self\n<span class=\"w\"> </span>    }\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 535592571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755818870
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the fuzz-bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11505\">Issue #11505</a>.</p>",
        "id": 535592573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755818870
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:exceptions label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11505\">Issue #11505</a>.</p>",
        "id": 535592575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755818871
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11505#issuecomment-3212495294\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11505\">issue #11505</a>:</p>\n<blockquote>\n<p>Thanks; taking a look!</p>\n</blockquote>",
        "id": 535594427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755820600
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11505#issuecomment-3212652853\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11505\">issue #11505</a>:</p>\n<blockquote>\n<p>Minimizes to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">unreachable</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">try_table</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>and happens because I missed adding a control-stack entry in the unreachable-code handler in the translator for a <code>try_block</code>, so we underflow the control stack. PR incoming.</p>\n</blockquote>",
        "id": 535600194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755825596
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11505\">issue #11505</a>:</p>\n<blockquote>\n<p>This input:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func))\n  (tag (;0;) (type 0))\n  (global (;0;) (mut i32) i32.const 1000)\n  (export \"\" (func 0))\n  (func (;0;) (type 0)\n    global.get 0\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 0\n    i32.const 1\n    i32.sub\n    global.set 0\n    loop (type 0) ;; label = @1\n      global.get 0\n      i32.eqz\n      if ;; label = @2\n        unreachable\n      end\n      global.get 0\n      i32.const 1\n      i32.sub\n      global.set 0\n      return_call 0\n      try_table ;; label = @2\n        try_table (type 0) (catch_all 0 (;@2;)) (catch_all 0 (;@2;)) (catch_all 0 (;@2;)) ;; label = @3\n        end\n      end\n    end\n  )\n)\n</code></pre></div>\n<p>panics with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">exceptions</span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">dev</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.10</span><span class=\"n\">s</span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">exceptions</span><span class=\"err\">`</span>\n\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">translate</span><span class=\"o\">/</span><span class=\"n\">code_translator</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">3162</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span>\n<span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Option</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">None</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>@cfallin I was curious to see what would happen since wasm-smith has support for exceptions. I don't think the support is too useful from a runtime perspective but it's likely interesting from a compile-time perspective (similar with most of our other wasm-smith-generated modules). If you're curious this is the diff I used to get <code>differential</code> running and it took a few seconds to find the above case:</p>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/fuzzing/src/generators/config.rs b/crates/fuzzing/src/generators/config.rs</span>\n<span class=\"gh\">index 553bbea530..72b9c0fc46 100644</span>\n<span class=\"gd\">--- a/crates/fuzzing/src/generators/config.rs</span>\n<span class=\"gi\">+++ b/crates/fuzzing/src/generators/config.rs</span>\n<span class=\"gu\">@@ -662,6 +662,7 @@ impl WasmtimeConfig {</span>\n<span class=\"w\"> </span>                config.config.gc_enabled = false;\n<span class=\"w\"> </span>                config.config.tail_call_enabled = false;\n<span class=\"w\"> </span>                config.config.reference_types_enabled = false;\n<span class=\"gi\">+                config.config.exceptions_enabled = false;</span>\n<span class=\"w\"> </span>                config.function_references_enabled = false;\n\n<span class=\"w\"> </span>                // Winch's SIMD implementations require AVX and AVX2.\n<span class=\"gh\">diff --git a/crates/fuzzing/src/generators/module.rs b/crates/fuzzing/src/generators/module.rs</span>\n<span class=\"gh\">index 97078890b8..7b65c92c4c 100644</span>\n<span class=\"gd\">--- a/crates/fuzzing/src/generators/module.rs</span>\n<span class=\"gi\">+++ b/crates/fuzzing/src/generators/module.rs</span>\n<span class=\"gu\">@@ -48,7 +48,7 @@ impl&lt;'a&gt; Arbitrary&lt;'a&gt; for ModuleConfig {</span>\n<span class=\"w\"> </span>        let _ = config.tail_call_enabled;\n<span class=\"w\"> </span>        let _ = config.extended_const_enabled;\n<span class=\"w\"> </span>        let _ = config.gc_enabled;\n<span class=\"gd\">-        config.exceptions_enabled = false;</span>\n<span class=\"gi\">+        let _ = config.exceptions_enabled;</span>\n<span class=\"w\"> </span>        config.custom_page_sizes_enabled = u.arbitrary()?;\n<span class=\"w\"> </span>        config.wide_arithmetic_enabled = u.arbitrary()?;\n<span class=\"w\"> </span>        config.memory64_enabled = u.ratio(1, 20)?;\n<span class=\"gh\">diff --git a/crates/fuzzing/src/oracles.rs b/crates/fuzzing/src/oracles.rs</span>\n<span class=\"gh\">index 39e6a948fc..1e717ccd44 100644</span>\n<span class=\"gd\">--- a/crates/fuzzing/src/oracles.rs</span>\n<span class=\"gi\">+++ b/crates/fuzzing/src/oracles.rs</span>\n<span class=\"gu\">@@ -1417,7 +1417,8 @@ mod tests {</span>\n<span class=\"w\"> </span>            | WasmFeatures::GC\n<span class=\"w\"> </span>            | WasmFeatures::GC_TYPES\n<span class=\"w\"> </span>            | WasmFeatures::CUSTOM_PAGE_SIZES\n<span class=\"gd\">-            | WasmFeatures::EXTENDED_CONST;</span>\n<span class=\"gi\">+            | WasmFeatures::EXTENDED_CONST</span>\n<span class=\"gi\">+            | WasmFeatures::EXCEPTIONS;</span>\n\n<span class=\"w\"> </span>        // All other features that wasmparser supports, which is presumably a\n<span class=\"w\"> </span>        // superset of the features that wasm-smith supports, are listed here as\n<span class=\"gh\">diff --git a/crates/fuzzing/src/oracles/diff_spec.rs b/crates/fuzzing/src/oracles/diff_spec.rs</span>\n<span class=\"gh\">index 643e9cb3b4..c5b9edbafc 100644</span>\n<span class=\"gd\">--- a/crates/fuzzing/src/oracles/diff_spec.rs</span>\n<span class=\"gi\">+++ b/crates/fuzzing/src/oracles/diff_spec.rs</span>\n<span class=\"gu\">@@ -28,6 +28,7 @@ impl SpecInterpreter {</span>\n<span class=\"w\"> </span>        config.custom_page_sizes_enabled = false;\n<span class=\"w\"> </span>        config.wide_arithmetic_enabled = false;\n<span class=\"w\"> </span>        config.extended_const_enabled = false;\n<span class=\"gi\">+        config.exceptions_enabled = false;</span>\n\n<span class=\"w\"> </span>        Self\n<span class=\"w\"> </span>    }\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 535609391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755834147
    }
]