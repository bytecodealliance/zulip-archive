[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>.</p>",
        "id": 546128271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761010003
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a> from <code>cfallin:wasmtime-debug-callbacks</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This PR adds a notion of \"debug events\", and a mechanism in Wasmtime to associate a \"debug handler\" with a store such that the handler is invoked as-if it were an async hostcall on each event. The async handler owns the store while its future exists, so the whole \"world\" (within the store) is frozen and the handler can examine any state it likes with a <code>StoreContextMut</code>.</p>\n<p>Note that this callback-based scheme is a compromise: eventually, we would like to have a native async API that produces a stream of events, as sketched in #11826 and in [this branch]. However, the async approach implemented naively (that is, with manual fiber suspends and with state passed on the store) suffers from unsoundness in the presence of dropped futures. Alex, Nick and I discussed this extensively and agreed that the <code>Accessor</code> mechanism is the right way to allow for a debugger to have \"timesliced\"/\"shared\" access to a store (only when polled/when an event is delivered), but we will defer that for now, because it requires additional work (mainly, converting existing async yield points in the runtime to \"give up\" the store with the <code>run_concurrent</code> mechanism). I'll file a followup issue to track that. The idea is that we can eventually build that when ready, but the API we provide to a debugger component can remain unchanged; only this plumbing and the glue to the debugger component will be reworked.</p>\n<p>With this scheme based on callbacks, we expect that one should be able to implement a debugger using async channels to communicate with the callback. The idea is that there would be a protocol where the callback sends a debug event to the debugger main loop elsewhere in the executor (e.g., over a Tokio channel or other async channel mechanism), and when the debugger wants to allow execution to continue, it sends a \"continue\" message back. In the meantime, while the world is paused, the debugger can send messages to the callback to query the <code>StoreContextMut</code> it has and read out state. This indirection/proxying of Store access is necessary for soundness: again, teleporting the Store out may look like it almost works (\"it is like a mutable reborrow on a hostcall\") except in the presence of dropped futures with sandwiched Wasm-&gt;host-&gt;Wasm situations.</p>\n<p>This PR implements debug events for a few cases that can be caught directly in the runtime, e.g., exceptions and traps raised just before re-entry to Wasm. Other kinds of traps, such as those normally implemented by host signals, require additional work (as in #11826) to implement \"hostcall injection\" on signal reception; and breakpoints will be built on top of that. The point of this PR is only to get the initial plumbing in place for events.</p>\n<p>Thanks to Alex for help on working how how to keep this from requiring <code>T: Send</code> throughout Wasmtime!</p>\n<p>[this branch]: <a href=\"https://github.com/cfallin/wasmtime/tree/wasmtime-debug-async\">https://github.com/cfallin/wasmtime/tree/wasmtime-debug-async</a></p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 546128272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761010004
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>.</p>",
        "id": 546128273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761010004
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>.</p>",
        "id": 546131866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761012938
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>.</p>",
        "id": 546153723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761029034
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449374285\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think we ever use the term \"activation\" in our public docs today, just in the internal unwinding and <code>CallThreadState</code> docs. That isn't to say we shouldn't use it here, but we probably want to define what it means in parens or something.</p>\n</blockquote>",
        "id": 546309590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761073775
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449426802\">PR review comment</a>:</p>\n<blockquote>\n<p>Nice, IIUC we don't even need out own <code>unsafe</code> block whose correctness is justified via <code>DebugHandler: Send</code> because everything falls out from the existing <code>block_on</code>, right?</p>\n</blockquote>",
        "id": 546309591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761073775
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449396782\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick: the docs should have a <code>## Panics</code> section and note that this panics when async is not enabled.</p>\n<p>And should this also be <code>cfg</code>'d on <code>feature = \"async\"</code>? Because <code>feature = \"debug\"</code> does not imply that right now (should it?)</p>\n</blockquote>",
        "id": 546309592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761073775
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3362222460\">PR review</a>:</p>\n<blockquote>\n<p>LGTM! Will hold off on adding to the merge queue until @alexcrichton has a chance to look at this.</p>\n</blockquote>",
        "id": 546309593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761073775
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449365683\">PR review comment</a>:</p>\n<blockquote>\n<p>Should we add an <code>Arc&lt;anyhow::Error&gt;</code> field here (and update <code>TrapReason::User</code> accordingly) so that the debugger can inspect the host error? Not something we have to do now, in this PR, ofc. And if we are concerned about the extra allocation in <code>TrapReaason::User</code>, even when debugging is disabled, we could potentially do a <code>Cow</code>-esque thing where it is a regular <code>anyhow::Error</code> until it needs to be shared, at which point it gets put into an <code>Arc</code>.</p>\n</blockquote>",
        "id": 546309594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761073775
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3362596931\">PR review</a>:</p>\n<blockquote>\n<p>Would it make sense to also start something like a mask of events for a debug handler? For example if a <code>HostcallError</code> isn't desired then that could get masked out while other events would still be processed.</p>\n</blockquote>",
        "id": 546325101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761079689
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449623655\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be <code>-&gt; impl Future</code> instead of <code>Box</code>? That'd enable implementing this trait with <code>async fn ...</code></p>\n</blockquote>",
        "id": 546325106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761079689
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449637256\">PR review comment</a>:</p>\n<blockquote>\n<p>We'll definitely want to handle the result of <code>block_on</code>. If <code>block_on</code> returns an <code>Err</code> then that means that the fiber needs to exit ASAP (e.g. a dropped future, forcible cleanup, etc), meaning that if this is ignored then wasm might just continue on its merry way while the caller expects it to exit ASAP.</p>\n<p>Basically the <code>Result</code> here should be plumbed to the caller.</p>\n</blockquote>",
        "id": 546325107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761079689
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449628207\">PR review comment</a>:</p>\n<blockquote>\n<p>One possible alternative: use <code>&amp;self</code> here but have <code>Clone</code> as a supertrait of <code>DebugHandler</code>. That way we don't require <code>Arc</code> here (e.g. if the implementor is zero-sized) and the implementation internally would clone-out-of-the-store to avoid borrowing the store to be able to pass it to the context today (basically as what already happens here)</p>\n</blockquote>",
        "id": 546325108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761079689
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449656156\">PR review comment</a>:</p>\n<blockquote>\n<p>Could the other states be listed out in an exhaustive match with a comment why they don't have debug events?</p>\n</blockquote>",
        "id": 546325109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761079689
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449655442\">PR review comment</a>:</p>\n<blockquote>\n<p>Two events? Wouldn't <code>UncaughtException</code> always imply the former <code>ThrownException</code>?</p>\n</blockquote>",
        "id": 546325110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761079689
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449634974\">PR review comment</a>:</p>\n<blockquote>\n<p>Well, while you're technically true we're still lying. The stack frame above this has <code>&amp;mut VMStore</code> on the stack and that's not <code>Send</code> and it's just invisible from rustc.</p>\n</blockquote>",
        "id": 546325111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761079689
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449659871\">PR review comment</a>:</p>\n<blockquote>\n<p>This is a subtle, but load bearing, <code>where</code> clause. Could the function have a Rust-level comment (e.g. <code>//</code>, not <code>///</code>) indicating why? Basically explaining how a <code>&amp;mut dyn VMStore</code> is gonna be on the stack and that is required to be <code>Send</code>, so therefore this must be <code>Send</code>.</p>\n</blockquote>",
        "id": 546325112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761079689
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449629829\">PR review comment</a>:</p>\n<blockquote>\n<p>To add to this, should this also <code>assert!</code> that the <code>debug_guest</code> is enabled?</p>\n</blockquote>",
        "id": 546325113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761079689
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449620416\">PR review comment</a>:</p>\n<blockquote>\n<p>Or, alternatively, this doesn't look like it needs to be owned, so this could be <code>HostcallError(&amp;'a anyhow::Error)</code> maybe?</p>\n</blockquote>",
        "id": 546325114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761079689
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3362822984\">PR review</a>.</p>",
        "id": 546332929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761083174
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449784638\">PR review comment</a>:</p>\n<blockquote>\n<p>I was assuming that the borrowing probably wouldn't work out, but if it does then yeah let's do that</p>\n</blockquote>",
        "id": 546332930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761083174
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3362827171\">PR review</a>.</p>",
        "id": 546333145,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761083288
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449787703\">PR review comment</a>:</p>\n<blockquote>\n<p>To be sure I understand you correctly: you're effectively saying \"push the arc into the <code>T: DebugHandler</code>, if necessary\"? If so, I like that <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 546333146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761083288
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3362831803\">PR review</a>.</p>",
        "id": 546333418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761083409
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449791043\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed!</p>\n</blockquote>",
        "id": 546333419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761083409
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3362871012\">PR review</a>.</p>",
        "id": 546334820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761084203
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449815869\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh also: shouldn't this future (eventually?) result in a <code>ContinuationCommand</code> or whatever, where</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">ContinuationCommand</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Normal continue.</span>\n<span class=\"w\">    </span><span class=\"n\">Resume</span><span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Val</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Exceptional continue.</span>\n<span class=\"w\">    </span><span class=\"n\">ResumeThrow</span><span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Val</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Forcibly return from the current frame.</span>\n<span class=\"w\">    </span><span class=\"n\">ResumeFinish</span><span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Val</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Terminate execution, raising a trap.</span>\n<span class=\"w\">    </span><span class=\"n\">Terminate</span><span class=\"p\">(</span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// or `wasmtime::Trap`?</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>?</p>\n<p>Some variants might be invalid to return when handling some events, and we don't need to implement all variants immediately, but this is the place we would want to do this kind of thing, right?</p>\n</blockquote>",
        "id": 546334821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761084203
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363012777\">PR review</a>.</p>",
        "id": 546339423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761087299
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449918073\">PR review comment</a>:</p>\n<blockquote>\n<p>Either that or a mutation API on the store to alter the return-point/state of the current activation; but honestly I do like the functional style here better.</p>\n<p>Right now since we don't support mutating the execution at all, only observing, I don't think we need anything here since there is only one option (<code>Resume</code> with no alternative values specified) implied by return, no?</p>\n</blockquote>",
        "id": 546339424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761087300
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363018392\">PR review</a>.</p>",
        "id": 546339599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761087435
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449921752\">PR review comment</a>:</p>\n<blockquote>\n<p>I did spend a bit of time in lifetime hell yesterday trying to get <code>&amp;'a anyhow::Error</code> to work; it was <em>really</em> not gelling well with the future's lifetime so I gave up. I can try a bit more but I do like the <code>Arc</code> alternative as well from the external perspective at least.</p>\n</blockquote>",
        "id": 546339600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761087436
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363025546\">PR review</a>.</p>",
        "id": 546339972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761087666
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449926251\">PR review comment</a>:</p>\n<blockquote>\n<p>That sounds right to me, and also I guess <code>ContinuationCommand::Resume</code> shouldn't have a payload, only the other variants should.</p>\n<p>I also like the \"functional style\" better than some roundabout mechanism to stash data on the side temporarily to pass things from a callee to a caller.</p>\n</blockquote>",
        "id": 546339973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761087666
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>.</p>",
        "id": 546342382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761089359
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363084415\">PR review</a>.</p>",
        "id": 546342444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761089395
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449969017\">PR review comment</a>:</p>\n<blockquote>\n<p>Updated in 08f1ba4a0d, along with a mention of activations in the doc-comment for <code>Store::debug_frames</code> as well.</p>\n</blockquote>",
        "id": 546342445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761089395
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>.</p>",
        "id": 546342841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761089649
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363092561\">PR review</a>.</p>",
        "id": 546342884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761089691
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449975248\">PR review comment</a>:</p>\n<blockquote>\n<p>Addressed in 08f1ba4a0dffdb1f4686d88c3be28b8f625202e6 and 28c63d58d7ce65f1b6871954735a11a291e1ab45; <code>async</code> is now a feature dependency of <code>debug</code>, assert was added, and added panic conditions for the two required settings.</p>\n</blockquote>",
        "id": 546342886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761089692
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363093515\">PR review</a>.</p>",
        "id": 546342955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761089740
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449976114\">PR review comment</a>:</p>\n<blockquote>\n<p>Right; it's at least not a new kind of unsafety relative to the other places that we have fiber suspends from hostcalls, AFAIK.</p>\n</blockquote>",
        "id": 546342956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761089740
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363099011\">PR review</a>.</p>",
        "id": 546343291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761089994
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449980658\">PR review comment</a>:</p>\n<blockquote>\n<p>Unfortunately no, because then the trait is not dyn-compatible -- or at least I don't know how to work around this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0038</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">debug</span><span class=\"p\">::</span><span class=\"n\">DebugHandler</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">compatible</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">275</span><span class=\"p\">:</span><span class=\"mi\">42</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">275</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">debug_handler</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">DebugHandler</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                          </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">debug</span><span class=\"p\">::</span><span class=\"n\">DebugHandler</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">compatible</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">for</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">compatible</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">needs</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">allow</span><span class=\"w\"> </span><span class=\"n\">building</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">vtable</span>\n<span class=\"w\">      </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">visit</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"c1\">//doc.rust-lang.org/reference/items/traits.html#dyn-compatibility&gt;</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">512</span><span class=\"p\">:</span><span class=\"mi\">10</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">502</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">DebugHandler</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">           </span><span class=\"o\">------------</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">compatible</span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"mi\">512</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">handle</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">references</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">in</span><span class=\"w\"> </span><span class=\"n\">its</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">type</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">consider</span><span class=\"w\"> </span><span class=\"n\">moving</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">handle</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">another</span><span class=\"w\"> </span><span class=\"k\">trait</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 546343295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761089995
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363106898\">PR review</a>.</p>",
        "id": 546343695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761090341
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449987064\">PR review comment</a>:</p>\n<blockquote>\n<p>Unfortunately this seems to run afoul of dyn compatibility as well... happy to see it refactored in followup if there is some clever trait-constraint trickery that can work around this. I see <code>dyn_clone</code> and similar things but it seems that may not be worth it for a single use-case like this...</p>\n</blockquote>",
        "id": 546343696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761090341
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449990416\">PR review comment</a>:</p>\n<blockquote>\n<p>My thought process that led here was: I initially wanted events on caught and uncaught exceptions; but we don't yet have the mechanisms to give a view of state at the catch-point, only the throw-point, so the former became \"thrown exception\"; but then the exception is thrown whether it's caught in Wasm or uncaught.</p>\n<p>I suppose I could rename <code>ThrownException</code> to <code>ThrownExceptionToWasm</code> or something similar, but then an observer who wants to see all exception throws needs to watch two different events.</p>\n<p>I do agree it's a little awkward to see two distinct hooks at one static point; maybe we just document what <code>ThrownException</code> means and invoke (only) that here...</p>\n</blockquote>",
        "id": 546343910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761090519
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363111180\">PR review</a>.</p>",
        "id": 546343912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761090519
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363111952\">PR review</a>.</p>",
        "id": 546343956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761090564
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449991109\">PR review comment</a>:</p>\n<blockquote>\n<p>Cool -- I'll build this out once we have the other return options.</p>\n</blockquote>",
        "id": 546343957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761090564
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363115079\">PR review</a>.</p>",
        "id": 546344149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761090724
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2449993726\">PR review comment</a>:</p>\n<blockquote>\n<p>Concretely, we're inside <code>CallThreadState::unwind</code> when we invoke this method; I guess we transmute an <code>Err</code> into a host unwind then? It's a little awkward as it overrides an existing unwind but I guess we can make that work.</p>\n</blockquote>",
        "id": 546344151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761090724
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>.</p>",
        "id": 546345272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761091569
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363133629\">PR review</a>.</p>",
        "id": 546345286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761091578
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2450009475\">PR review comment</a>:</p>\n<blockquote>\n<p>OK, handled in 7e9d38686a.</p>\n</blockquote>",
        "id": 546345288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761091579
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363133870\">PR review</a>.</p>",
        "id": 546345302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761091587
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2450009660\">PR review comment</a>:</p>\n<blockquote>\n<p>Good idea -- handled in 7e9d38686a.</p>\n</blockquote>",
        "id": 546345303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761091587
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363134258\">PR review</a>.</p>",
        "id": 546345319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761091604
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2450010006\">PR review comment</a>:</p>\n<blockquote>\n<p>OK, renamed to <code>CaughtExceptionThrown</code> and <code>UncaughtExceptionThrown</code> in 7e9d38686a.</p>\n</blockquote>",
        "id": 546345320,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761091604
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>.</p>",
        "id": 546345590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761091810
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363138883\">PR review</a>.</p>",
        "id": 546345604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761091817
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2450013784\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep definitely -- added in 50bb08e40e.</p>\n</blockquote>",
        "id": 546345605,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761091817
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>.</p>",
        "id": 546345713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761091893
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#issuecomment-3429988901\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would it make sense to also start something like a mask of events for a debug handler? For example if a HostcallError isn't desired then that could get masked out while other events would still be processed.</p>\n</blockquote>\n<p>Maybe eventually, yeah -- that's a good idea. I might defer that to the point that we're building out the top half to see how we want to use it.</p>\n</blockquote>",
        "id": 546345838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761091975
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363153769\">PR review</a>.</p>",
        "id": 546346289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761092319
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2450025919\">PR review comment</a>:</p>\n<blockquote>\n<p>In particular it is always some variant of</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">lifetime</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">live</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">enough</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">2726</span><span class=\"p\">:</span><span class=\"mi\">52</span>\n<span class=\"w\">     </span><span class=\"o\">|</span>\n<span class=\"mi\">2723</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">block_on_debug_handler</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">crate</span><span class=\"p\">::</span><span class=\"n\">DebugEvent</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                          </span><span class=\"o\">-----</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">debug</span><span class=\"p\">::</span><span class=\"n\">DebugEvent</span><span class=\"o\">&lt;'</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"err\">`</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"mi\">2726</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"n\">StoreContextMut</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">).</span><span class=\"n\">block_on</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Pin</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"p\">)))</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                                    </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">returning</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">outlive</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"err\">`</span>\n</code></pre></div>\n<p>even with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"mi\">507</span><span class=\"w\">     </span><span class=\"sd\">/// Handle a debug event.</span>\n<span class=\"w\">   </span><span class=\"mi\">508</span><span class=\"w\">     </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">handle</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">   </span><span class=\"mi\">509</span><span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Arc</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"mi\">510</span><span class=\"w\">         </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">StoreContextMut</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">::</span><span class=\"n\">Data</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"mi\">511</span><span class=\"w\">         </span><span class=\"n\">event</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">DebugEvent</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"mi\">512</span><span class=\"w\">     </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>that <em>should</em> tie the lifetime inside the event to the store. Something to do with the anonymous lifetime inference with <code>block_on</code>; it feels like it should be possible but I don't have enough constraint-fu right now to make it work, sorry!</p>\n</blockquote>",
        "id": 546346290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761092319
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3363161178\">PR review</a>.</p>",
        "id": 546346563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761092543
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#discussion_r2450031446\">PR review comment</a>:</p>\n<blockquote>\n<p>The <code>Arc</code> variant of this is pretty messy too: it requires taking apart the unwind-state to temporarily take ownership, then reconstructing it later. I think I'm going to defer this as well since the error will come out of the invocation immediately after the debug event anyway. If we can make the borrowing work I'm happy to see a refactor in a followup though!</p>\n</blockquote>",
        "id": 546346565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761092543
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>.</p>",
        "id": 546346659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761092617
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#issuecomment-3430010866\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>:</p>\n<blockquote>\n<p>OK, updated based on feedback -- final look before I merge? Thanks!</p>\n</blockquote>",
        "id": 546346715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761092658
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#pullrequestreview-3366277385\">PR review</a>:</p>\n<blockquote>\n<p>LGTM, thanks!</p>\n</blockquote>",
        "id": 546483591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761145758
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#issuecomment-3432987750\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>:</p>\n<blockquote>\n<p>With respect to clones, object-safety, lifetimes, and <code>async fn</code>, it's <a href=\"https://gist.github.com/alexcrichton/6ed6165bf9d2956aadcf5e8fddc02f04\">all possible</a>. That at least compiles in the <code>wasmtime</code> crate, although I didn't go through tests yet. Would you prefer the design in this PR? Or ok if I have a follow-up to improve the API?</p>\n</blockquote>",
        "id": 546487120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761146554
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#issuecomment-3433016383\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>:</p>\n<blockquote>\n<p>Ah, neat, an internal adapter that gets monomorphized in the top layer where we have T -- I'll incorporate that, thanks!</p>\n</blockquote>",
        "id": 546488880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761146949
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>.</p>",
        "id": 546546683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761165338
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#issuecomment-3434127576\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>:</p>\n<blockquote>\n<p>All of that worked fine, thanks! I pulled in your patch and then added some more comments to the trait to indicate that it should be cheap to clone, i.e., is recommended to be an <code>Arc</code> under the covers or something similar.</p>\n</blockquote>",
        "id": 546546854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761165398
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>.</p>",
        "id": 546546861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761165401
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>.</p>",
        "id": 546559072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761171150
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895#issuecomment-3434369895\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>:</p>\n<blockquote>\n<p>I pushed a change to avoid <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/18729496627/job/53422724976\">this failure</a> where execution in Pulley did not emit a debug event for a divide-by-zero; this is because the trap-handling path is ever so slightly different in Pulley. I'll address in a followup (we're very close and it'd be honestly easier to keep Pulley working throughout this process than to exclude it in config); the <code>cfg</code> to limit to Cranelift-native architectures is in 97336c19963fda33b229dcfbe33f9b880725fc4f.</p>\n</blockquote>",
        "id": 546559248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761171250
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>.</p>",
        "id": 546559273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761171269
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11895\">PR #11895</a>.</p>",
        "id": 546562760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761173389
    }
]