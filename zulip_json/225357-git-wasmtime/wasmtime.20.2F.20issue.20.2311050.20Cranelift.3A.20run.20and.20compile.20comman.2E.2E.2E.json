[
    {
        "content": "<p>akldc opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11050\">issue #11050</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">preserve_frame_pointers</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_multi_ret_implicit_sret</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64</span><span class=\"w\"> </span><span class=\"n\">has_zcd</span><span class=\"w\"> </span><span class=\"n\">has_zbkb</span><span class=\"w\"> </span><span class=\"n\">has_zbc</span><span class=\"w\"> </span><span class=\"n\">has_zbs</span><span class=\"w\"> </span><span class=\"n\">has_zicond</span><span class=\"w\"> </span><span class=\"n\">has_zvl32b</span><span class=\"w\"> </span><span class=\"n\">has_zvl64b</span><span class=\"w\"> </span><span class=\"n\">has_zvl128b</span><span class=\"w\"> </span><span class=\"n\">has_zvl1024b</span><span class=\"w\"> </span><span class=\"n\">has_zvl2048b</span><span class=\"w\"> </span><span class=\"n\">has_zvl4096b</span><span class=\"w\"> </span><span class=\"n\">has_zvl8192b</span><span class=\"w\"> </span><span class=\"n\">has_zvl16384b</span><span class=\"w\"> </span><span class=\"n\">has_zvl32768b</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">sse42</span><span class=\"w\"> </span><span class=\"n\">has_avx</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"n\">ss1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"n\">const0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x40ad3fb47cb16076c8cb1fdd8189d40f</span>\n\n<span class=\"n\">block0</span><span class=\"p\">():</span>\n<span class=\"w\">    </span><span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bxor</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>On x86  <code>./clif-util run -v test1.clif</code> —— It runs correctly.</p>\n<p>But when executed via <code>qemu-riscv64</code>, it reports an error.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test1</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">The</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">ISA</span><span class=\"w\"> </span><span class=\"n\">specified</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">compatible</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">ISA</span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">file</span>\n<span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n</code></pre></div>\n<p>Similarly, for the <code>compile</code> command</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">test1</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<p>This command runs as expected.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">qemu</span><span class=\"o\">-</span><span class=\"n\">riscv64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">LD_LIBRARY_PATH</span><span class=\"o\">=/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">riscv64gc</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">riscv64</span><span class=\"w\">  </span><span class=\"n\">test1</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<p>However, on riscv64, returning a vector value consistently results in an error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Unsupported</span><span class=\"w\"> </span><span class=\"n\">feature</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Too</span><span class=\"w\"> </span><span class=\"n\">many</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">fit</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">registers</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">Use</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">StructReturn</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"n\">instead</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">(#</span><span class=\"mi\">9510</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>So, is this due to a mistake in how I'm using it, or is it a problem with the implementation?<br>\n</p>\n</blockquote>",
        "id": 524266075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750082924
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11050\">Issue #11050</a>.</p>",
        "id": 524266076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750082924
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11050\">Issue #11050</a>.</p>",
        "id": 524266077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750082924
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11050#issuecomment-2977031819\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11050\">issue #11050</a>:</p>\n<blockquote>\n<blockquote>\n<p><code>test1.clif: The target ISA specified in the file is not compatible with the host ISA</code></p>\n</blockquote>\n<p>it looks like this is <code>target riscv64</code> vs <code>target riscv64gc</code> in the CLIF input. I believe this is due to the fact that the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/60269d642510263ccf5fe637c042d663fecfc43a/cranelift/filetests/src/test_run.rs#L66-L89\">check when testing</a> is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/60269d642510263ccf5fe637c042d663fecfc43a/cranelift/src/run.rs#L117\">different than when running</a> which is why all tests work with <code>test riscv64</code> b ut <code>./clif-util run ...</code> isn't working.</p>\n<p>After changing the input <code>foo.clif</code> file from <code>target riscv64 ...</code> to <code>target riscv64gc ...</code> I was able to get things working </p>\n<blockquote>\n<p><code>Error: Unsupported feature: Too many return values to fit in registers. Use a StructReturn argument instead. (#9510)</code></p>\n</blockquote>\n<p>I believe what you're seeing here is a difference between the <code>run</code> and <code>compile</code> subcommands of clif-util. The <code>run</code> subcommand looks to read flags/options from the input <code>*.clif</code> file, but the <code>compile</code> subcommand does not. That means that despite the test saying <code>set enable_multi_ret_implicit_sret=true</code> inside of it that's actually ignored as part of <code>./clif-util compile ...</code>.  For <code>clif-util compile</code> you'll need to pass <code>--set enable_multi_ret_implicit_sret=true</code> (and then also <code>--set has_v</code> for riscv64 things using vectors)</p>\n<p>(this is probably bits and bobs that can be improved in <code>clif-util</code>)</p>\n</blockquote>",
        "id": 524277920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750086561
    },
    {
        "content": "<p>akldc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11050#issuecomment-2979163342\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11050\">issue #11050</a>:</p>\n<blockquote>\n<p>@alexcrichton <br>\nThanks for your reply. Hopefully, <code>clif-util</code> can be improved in the future so that the <code>compile</code> command respects the settings in the <code>.clif</code> file as well.</p>\n</blockquote>",
        "id": 524383243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750143378
    }
]