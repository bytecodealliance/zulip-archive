[
    {
        "content": "<p>nathanielc opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11650\">issue #11650</a>:</p>\n<blockquote>\n<p>The issue I am having is I get a trap for a failed cast when I try and run my component.  The component is two composed components, one that links several core modules together generated by a compiler I have written. This is where the bug is found.</p>\n<p>Here is the main core module:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code>    <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"k\">module</span> <span class=\"cm\">(;1;)</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">0</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">2</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;5;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;6;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;7;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"err\">final</span> <span class=\"mi\">6</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"std::math\"</span> <span class=\"s2\">\"compute\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"remote1\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">0</span>\n        <span class=\"err\">struct.new</span> <span class=\"mi\">7</span>\n        <span class=\"err\">ref.cast</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">i64.const</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">6 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">4</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1p</span><span class=\"mi\">+1</span> <span class=\"cm\">(;=2;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">3 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">3</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1.8p+1</span> <span class=\"cm\">(;=3;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">1 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">0</span>\n        <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</code></pre></div>\n<p>The trap occurs on the call_ref 4 instruction. My DSL has curried closures so we are seeing a pattern of creating a struct (GC proposal) with a function reference as the first field and a its closed over env as the remaining fields.</p>\n<p>Reading this code we create function ref to function 0 which is an imported function. Then after getting it out of the struct we call it with call_ref 4. We can easily see that the struct's field is of type 4 so this should be valid however I get the trap.</p>\n<p>If I instead change the ref.func 0 to a locally defined function instead of an imported one it I do not get the trap.</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code>    <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"k\">module</span> <span class=\"cm\">(;1;)</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">0</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">2</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;5;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;6;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;7;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"err\">final</span> <span class=\"mi\">6</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"std::math\"</span> <span class=\"s2\">\"compute\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"remote1\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo1\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo2\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">2</span>\n        <span class=\"err\">struct.new</span> <span class=\"mi\">7</span>\n        <span class=\"err\">ref.cast</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">i64.const</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">6 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">4</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1p</span><span class=\"mi\">+1</span> <span class=\"cm\">(;=2;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">3 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">3</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1.8p+1</span> <span class=\"cm\">(;=3;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">1 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">0</span>\n        <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n            <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">3</span>\n            <span class=\"err\">struct.new</span> <span class=\"mi\">3</span>\n            <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n            <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">4</span>\n            <span class=\"err\">struct.new</span> <span class=\"mi\">1</span>\n            <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n            <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1p</span><span class=\"mi\">+1</span> <span class=\"cm\">(;=2;)</span>\n            <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</code></pre></div>\n<p>Again lots of currying so I need multiple local functions to make this type check.</p>\n<p>Here is the complete component </p>\n<p><a href=\"https://github.com/user-attachments/files/22233775/blr.wat.txt\">blr.wat.txt</a></p>\n<p>I can invoke it with</p>\n<p>wasmtime run -W gc=y,function-references=y,component-model-gc=y --invoke 'main(1)' blr.wat</p>\n<p>I get this output:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">blr</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">           </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0x17e517</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0x17e626</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">cast</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n</code></pre></div>\n</blockquote>",
        "id": 538421939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757419915
    },
    {
        "content": "<p><a href=\"https://github.com/nathanielc\">nathanielc</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11650\">Issue #11650</a>.</p>",
        "id": 538421942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757419916
    },
    {
        "content": "<p>nathanielc edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11650\">issue #11650</a>:</p>\n<blockquote>\n<p>The issue I am having is I get a trap for a failed cast when I try and run my component.  The component is two composed components, one that links several core modules together generated by a compiler I have written. This is where the bug is found.</p>\n<p>Here is the main core module:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code>    <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"k\">module</span> <span class=\"cm\">(;1;)</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">0</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">2</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;5;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;6;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;7;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"err\">final</span> <span class=\"mi\">6</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"std::math\"</span> <span class=\"s2\">\"compute\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"remote1\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">0</span>\n        <span class=\"err\">struct.new</span> <span class=\"mi\">7</span>\n        <span class=\"err\">ref.cast</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">i64.const</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">6 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">4</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1p</span><span class=\"mi\">+1</span> <span class=\"cm\">(;=2;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">3 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">3</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1.8p+1</span> <span class=\"cm\">(;=3;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">1 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">0</span>\n        <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</code></pre></div>\n<p>The trap occurs on the call_ref 4 instruction. My DSL has curried closures so we are seeing a pattern of creating a struct (GC proposal) with a function reference as the first field and a its closed over env as the remaining fields.</p>\n<p>Reading this code we create function ref to function 0 which is an imported function. Then after getting it out of the struct we call it with call_ref 4. We can easily see that the struct's field is of type 4 so this should be valid however I get the trap.</p>\n<p>If I instead change the ref.func 0 to a locally defined function instead of an imported one it I do not get the trap.</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code>    <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"k\">module</span> <span class=\"cm\">(;1;)</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">0</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">2</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;5;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;6;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;7;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"err\">final</span> <span class=\"mi\">6</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"std::math\"</span> <span class=\"s2\">\"compute\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"remote1\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo1\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo2\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">2</span>\n        <span class=\"err\">struct.new</span> <span class=\"mi\">7</span>\n        <span class=\"err\">ref.cast</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">i64.const</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">6 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">4</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1p</span><span class=\"mi\">+1</span> <span class=\"cm\">(;=2;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">3 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">3</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1.8p+1</span> <span class=\"cm\">(;=3;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">1 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">0</span>\n        <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n            <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">3</span>\n            <span class=\"err\">struct.new</span> <span class=\"mi\">3</span>\n            <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n            <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">4</span>\n            <span class=\"err\">struct.new</span> <span class=\"mi\">1</span>\n            <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n            <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1p</span><span class=\"mi\">+1</span> <span class=\"cm\">(;=2;)</span>\n            <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</code></pre></div>\n<p>Again lots of currying so I need multiple local functions to make this type check.</p>\n<p>Here is the complete component </p>\n<p><a href=\"https://github.com/user-attachments/files/22233775/blr.wat.txt\">blr.wat.txt</a></p>\n<p>I can invoke it with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">gc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">references</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">component</span><span class=\"o\">-</span><span class=\"n\">model</span><span class=\"o\">-</span><span class=\"n\">gc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">blr</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n</code></pre></div>\n<p>I get this output:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">blr</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">           </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0x17e517</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0x17e626</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">cast</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n</code></pre></div>\n</blockquote>",
        "id": 538422052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757419944
    },
    {
        "content": "<p>nathanielc edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11650\">issue #11650</a>:</p>\n<blockquote>\n<p>The issue I am having is I get a trap for a failed cast when I try and run my component.  The component is two composed components, one that links several core modules together generated by a compiler I have written. This is where the bug is found.</p>\n<p>Here is the main core module:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code>    <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"k\">module</span> <span class=\"cm\">(;1;)</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">0</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">2</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;5;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;6;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;7;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"err\">final</span> <span class=\"mi\">6</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"std::math\"</span> <span class=\"s2\">\"compute\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"remote1\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">0</span>\n        <span class=\"err\">struct.new</span> <span class=\"mi\">7</span>\n        <span class=\"err\">ref.cast</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">i64.const</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">6 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">4</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1p</span><span class=\"mi\">+1</span> <span class=\"cm\">(;=2;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">3 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">3</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1.8p+1</span> <span class=\"cm\">(;=3;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">1 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">0</span>\n        <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</code></pre></div>\n<p>The trap occurs on the call_ref 4 instruction. My DSL has curried closures so we are seeing a pattern of creating a struct (GC proposal) with a function reference as the first field and a its closed over env as the remaining fields.</p>\n<p>Reading this code we create function ref to function 0 which is an imported function. Then after getting it out of the struct we call it with call_ref 4. We can easily see that the struct's field is of type 4 so this should be valid however I get the trap.</p>\n<p>If I instead change the ref.func 0 to a locally defined function instead of an imported one it I do not get the trap.</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code>    <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"k\">module</span> <span class=\"cm\">(;1;)</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">0</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">2</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;5;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;6;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;7;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"err\">final</span> <span class=\"mi\">6</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"std::math\"</span> <span class=\"s2\">\"compute\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"remote1\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo1\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo2\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">2</span>\n        <span class=\"err\">struct.new</span> <span class=\"mi\">7</span>\n        <span class=\"err\">ref.cast</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">i64.const</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">6 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">4</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1p</span><span class=\"mi\">+1</span> <span class=\"cm\">(;=2;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">3 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">3</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1.8p+1</span> <span class=\"cm\">(;=3;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">1 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">0</span>\n        <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n            <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">3</span>\n            <span class=\"err\">struct.new</span> <span class=\"mi\">3</span>\n            <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n            <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">4</span>\n            <span class=\"err\">struct.new</span> <span class=\"mi\">1</span>\n            <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n            <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1p</span><span class=\"mi\">+1</span> <span class=\"cm\">(;=2;)</span>\n            <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</code></pre></div>\n<p>Again lots of currying so I need multiple local functions to make this type check.</p>\n<p>Here is the complete component </p>\n<p><a href=\"https://github.com/user-attachments/files/22233775/blr.wat.txt\">blr.wat.txt</a></p>\n<p>I can invoke it with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">gc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">references</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">component</span><span class=\"o\">-</span><span class=\"n\">model</span><span class=\"o\">-</span><span class=\"n\">gc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">blr</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"p\">.</span><span class=\"n\">txt</span>\n</code></pre></div>\n<p>I get this output:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">blr</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">           </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0x17e517</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0x17e626</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">cast</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n</code></pre></div>\n</blockquote>",
        "id": 538422133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757419967
    },
    {
        "content": "<p>nathanielc edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11650\">issue #11650</a>:</p>\n<blockquote>\n<p>The issue I am having is I get a trap for a failed cast when I try and run my component.  The component is two composed components, one that links several core modules together generated by a compiler I have written. This is where the bug is found.</p>\n<p>Here is the main core module:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code>    <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"k\">module</span> <span class=\"cm\">(;1;)</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">0</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">2</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;5;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;6;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;7;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"err\">final</span> <span class=\"mi\">6</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"std::math\"</span> <span class=\"s2\">\"compute\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"remote1\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">0</span>\n        <span class=\"err\">struct.new</span> <span class=\"mi\">7</span>\n        <span class=\"err\">ref.cast</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">i64.const</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">6 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">4</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1p</span><span class=\"mi\">+1</span> <span class=\"cm\">(;=2;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">3 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">3</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1.8p+1</span> <span class=\"cm\">(;=3;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">1 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">0</span>\n        <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</code></pre></div>\n<p>The trap occurs on the call_ref 4 instruction. My DSL has curried closures so we are seeing a pattern of creating a struct (GC proposal) with a function reference as the first field and a its closed over env as the remaining fields.</p>\n<p>Reading this code we create function ref to function 0 which is an imported function. Then after getting it out of the struct we call it with call_ref 4. We can easily see that the struct's field is of type 4 so this should be valid however I get the trap.</p>\n<p>If I instead change the ref.func 0 to a locally defined function instead of an imported one it I do not get the trap.</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code>    <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"k\">module</span> <span class=\"cm\">(;1;)</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">0</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">2</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;5;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;6;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;7;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"err\">final</span> <span class=\"mi\">6</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"std::math\"</span> <span class=\"s2\">\"compute\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"remote1\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo1\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo2\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">2</span>\n        <span class=\"err\">struct.new</span> <span class=\"mi\">7</span>\n        <span class=\"err\">ref.cast</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">i64.const</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">6 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">4</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1p</span><span class=\"mi\">+1</span> <span class=\"cm\">(;=2;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">3 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">3</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1.8p+1</span> <span class=\"cm\">(;=3;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">1 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">0</span>\n        <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n            <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">3</span>\n            <span class=\"err\">struct.new</span> <span class=\"mi\">3</span>\n            <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n            <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">4</span>\n            <span class=\"err\">struct.new</span> <span class=\"mi\">1</span>\n            <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n            <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1p</span><span class=\"mi\">+1</span> <span class=\"cm\">(;=2;)</span>\n            <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</code></pre></div>\n<p>Again lots of currying so I need multiple local functions to make this type check.</p>\n<p>Here is the complete component </p>\n<p><a href=\"https://github.com/user-attachments/files/22233775/blr.wat.txt\">blr.wat.txt</a></p>\n<p>I can invoke it with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">gc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">references</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">component</span><span class=\"o\">-</span><span class=\"n\">model</span><span class=\"o\">-</span><span class=\"n\">gc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">blr</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"p\">.</span><span class=\"n\">txt</span>\n</code></pre></div>\n<p>I get this output:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">blr</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">           </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0x17e517</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0x17e626</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">cast</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n</code></pre></div>\n</blockquote>",
        "id": 538422305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757420023
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11650#issuecomment-3271216069\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11650\">issue #11650</a>:</p>\n<blockquote>\n<p>I followed up <a href=\"#narrow/channel/206238-general/topic/Trap.20on.20failed.20cast.20from.20imported.20function/near/538463941\">a bit on Zulip</a> for this</p>\n</blockquote>",
        "id": 538464337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757431396
    },
    {
        "content": "<p>nathanielc closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11650\">issue #11650</a>:</p>\n<blockquote>\n<p>The issue I am having is I get a trap for a failed cast when I try and run my component.  The component is two composed components, one that links several core modules together generated by a compiler I have written. This is where the bug is found.</p>\n<p>Here is the main core module:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code>    <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"k\">module</span> <span class=\"cm\">(;1;)</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">0</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">2</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;5;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;6;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;7;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"err\">final</span> <span class=\"mi\">6</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"std::math\"</span> <span class=\"s2\">\"compute\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"remote1\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">0</span>\n        <span class=\"err\">struct.new</span> <span class=\"mi\">7</span>\n        <span class=\"err\">ref.cast</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">i64.const</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">6 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">4</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1p</span><span class=\"mi\">+1</span> <span class=\"cm\">(;=2;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">3 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">3</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1.8p+1</span> <span class=\"cm\">(;=3;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">1 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">0</span>\n        <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</code></pre></div>\n<p>The trap occurs on the call_ref 4 instruction. My DSL has curried closures so we are seeing a pattern of creating a struct (GC proposal) with a function reference as the first field and a its closed over env as the remaining fields.</p>\n<p>Reading this code we create function ref to function 0 which is an imported function. Then after getting it out of the struct we call it with call_ref 4. We can easily see that the struct's field is of type 4 so this should be valid however I get the trap.</p>\n<p>If I instead change the ref.func 0 to a locally defined function instead of an imported one it I do not get the trap.</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code>    <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"k\">module</span> <span class=\"cm\">(;1;)</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">0</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">2</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;5;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;6;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;7;)</span> <span class=\"p\">(</span><span class=\"err\">sub</span> <span class=\"err\">final</span> <span class=\"mi\">6</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">4</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"std::math\"</span> <span class=\"s2\">\"compute\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"remote1\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo1\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"foo2\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">2</span>\n        <span class=\"err\">struct.new</span> <span class=\"mi\">7</span>\n        <span class=\"err\">ref.cast</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">i64.const</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">6 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">4</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1p</span><span class=\"mi\">+1</span> <span class=\"cm\">(;=2;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">3 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">local.tee</span> <span class=\"mi\">3</span>\n        <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1.8p+1</span> <span class=\"cm\">(;=3;)</span>\n        <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n        <span class=\"err\">struct.get</span> <span class=\"mf\">1 0</span>\n        <span class=\"nb\">call</span><span class=\"err\">_ref</span> <span class=\"mi\">0</span>\n        <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n            <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">3</span>\n            <span class=\"err\">struct.new</span> <span class=\"mi\">3</span>\n            <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n            <span class=\"err\">ref.</span><span class=\"k\">func</span> <span class=\"mi\">4</span>\n            <span class=\"err\">struct.new</span> <span class=\"mi\">1</span>\n            <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">struct</span><span class=\"p\">)</span> <span class=\"kt\">f64</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">f64</span><span class=\"p\">)</span>\n            <span class=\"nb\">f64.const</span> <span class=\"mf\">0x1p</span><span class=\"mi\">+1</span> <span class=\"cm\">(;=2;)</span>\n            <span class=\"nb\">return</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</code></pre></div>\n<p>Again lots of currying so I need multiple local functions to make this type check.</p>\n<p>Here is the complete component </p>\n<p><a href=\"https://github.com/user-attachments/files/22233775/blr.wat.txt\">blr.wat.txt</a></p>\n<p>I can invoke it with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">gc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">references</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">component</span><span class=\"o\">-</span><span class=\"n\">model</span><span class=\"o\">-</span><span class=\"n\">gc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">blr</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"p\">.</span><span class=\"n\">txt</span>\n</code></pre></div>\n<p>I get this output:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">blr</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">           </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0x17e517</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0x17e626</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">cast</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n</code></pre></div>\n</blockquote>",
        "id": 538467448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757432229
    },
    {
        "content": "<p>nathanielc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11650#issuecomment-3271268666\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11650\">issue #11650</a>:</p>\n<blockquote>\n<p>This is a bug on my side, I had the stacktrace backwards in my head and read the wrong code. The <code>call_ref 4</code> instruction is working as expected but the passed struct doesn't match what the function is expecting. Thanks again</p>\n</blockquote>",
        "id": 538467457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757432231
    }
]