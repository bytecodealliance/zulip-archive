[
    {
        "content": "<p>pnodet opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a> from <code>pnodet:pnodet-2</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>ensures that Cranelift's frame pointer optimization and stack checks are applied correctly based on the actual presence of call instructions in the generated machine code, rather than potentially inaccurate heuristics based on IR-level information.</p>\n<p>- Scanning actual VCode instructions for calls<br>\n  - Detecting all call types (direct, indirect, tail calls, libcalls)<br>\n  - Using this for frame pointer optimization decisions<br>\n  - Properly handling stack check insertion</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 537088955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756726008
    },
    {
        "content": "<p>pnodet edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>:</p>\n<blockquote>\n<p>ensures that Cranelift's frame pointer optimization and stack checks are applied correctly based on the actual presence of call instructions in the generated machine code, rather than potentially inaccurate heuristics based on IR-level information.</p>\n<p>- Scanning actual VCode instructions for calls<br>\n  - Detecting all call types (direct, indirect, tail calls, libcalls)<br>\n  - Using this for frame pointer optimization decisions<br>\n  - Properly handling stack check insertion</p>\n<p>Fix #11573</p>\n</blockquote>",
        "id": 537089046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756726044
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537089122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756726072
    },
    {
        "content": "<p><strong>pnodet</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a> as ready for review.</p>",
        "id": 537089140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756726078
    },
    {
        "content": "<p><strong>pnodet</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537089144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756726079
    },
    {
        "content": "<p><strong>pnodet</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537089145,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756726080
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2313702089\">PR review comment</a>:</p>\n<blockquote>\n<p>Does this function even still need to exist?</p>\n</blockquote>",
        "id": 537089693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756726276
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3173287889\">PR review</a>.</p>",
        "id": 537089694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756726276
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3173299150\">PR review</a>.</p>",
        "id": 537090414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756726507
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2313709634\">PR review comment</a>:</p>\n<blockquote>\n<p><code>self.insts.iter().any(|inst| inst.is_call())</code>?</p>\n</blockquote>",
        "id": 537090415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756726507
    },
    {
        "content": "<p>pnodet submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3173340395\">PR review</a>.</p>",
        "id": 537093296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756727443
    },
    {
        "content": "<p>pnodet created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2313741943\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed, looks cleaner, will change.</p>\n</blockquote>",
        "id": 537093297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756727443
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537093325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756727454
    },
    {
        "content": "<p>pnodet submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3173343632\">PR review</a>.</p>",
        "id": 537093491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756727519
    },
    {
        "content": "<p>pnodet created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2313744521\">PR review comment</a>:</p>\n<blockquote>\n<p>I let @alexcrichton weigh in on this</p>\n</blockquote>",
        "id": 537093492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756727519
    },
    {
        "content": "<p>pnodet edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2313744521\">PR review comment</a>.</p>",
        "id": 537093511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756727527
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3174505935\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for working on this! Leaving a few thoughts below:</p>\n</blockquote>",
        "id": 537175145,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756763279
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2314592859\">PR review comment</a>:</p>\n<blockquote>\n<p>Rather than use a mutable setter pattern with action-at-a-distance plumbing, let's compute the property directly from the ABI code. We already make a pass to find clobbers and so we should be able to detect this at the same time.</p>\n</blockquote>",
        "id": 537175146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756763279
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2314594805\">PR review comment</a>:</p>\n<blockquote>\n<p>A few things:</p>\n<ul>\n<li>We want to compute this during the clobber scan in ABI code, so let's not do a separate scan;</li>\n<li>Providing an accessor method like this is (IMHO) slightly un-idiomatic, in that it hides a potentially expensive scan behind something that looks like a simple feature/flag test;</li>\n<li>If we do add a helper, (tiny minor nit but) putting it right at the top of the VCode methods, before <code>fn new</code>, is probably not the place to do it to make the file read nicely.</li>\n</ul>\n</blockquote>",
        "id": 537175147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756763279
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2314592277\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for adding these tests, but (i) they all appear to be testing <code>is_leaf</code>, which we want to remove, per above; (ii) they don't actually test the ABI behavior, which is visible only in the emitted code.</p>\n<p>Could you add some compile filetests instead, showing disassemblies with and without frame-pointer setup? In particular I'd expect the case where I commented and asked for #11573 to be filed to revert back to no-frame-pointer.</p>\n</blockquote>",
        "id": 537175148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756763279
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2314588731\">PR review comment</a>:</p>\n<blockquote>\n<p>(I'm not Alex, but I noted this issue originally and suggested that he file #11573 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11570#discussion_r2310845668\">here</a>)</p>\n<p>IMHO: we should remove this method -- firstly, we don't need it internally, and secondly, it's nearly impossible to use it for anything useful externally because of the caveats we have found. An API that looks \"almost useful\" but provides misleading or inaccurate results with both false positives <em>and</em> false negatives is a footgun shouldn't exist.</p>\n</blockquote>",
        "id": 537175149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756763279
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2314588731\">PR review comment</a>.</p>",
        "id": 537175188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756763311
    },
    {
        "content": "<p>pnodet <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#issuecomment-3243300905\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>:</p>\n<blockquote>\n<p>Thanks for the suggestions @cfallin<br>\nIf it's okay with you all I'll wait for a decision on wether <code>is_leaf</code> should be removed or improved before implementing more changes</p>\n</blockquote>",
        "id": 537175549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756763588
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#issuecomment-3243305384\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>:</p>\n<blockquote>\n<blockquote>\n<p>If it's okay with you all I'll wait for a decision on wether is_leaf should be removed or improved before implementing more changes</p>\n</blockquote>\n<p>As noted in my code review, please remove it, thanks!</p>\n</blockquote>",
        "id": 537175913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756763909
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537176417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756764262
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#issuecomment-3243305384\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>:</p>\n<blockquote>\n<blockquote>\n<p>If it's okay with you all I'll wait for a decision on wether is_leaf should be removed or improved before implementing more changes</p>\n</blockquote>\n<p>As noted in my code review, please remove it, thanks!</p>\n<p>(In more detail: I am a core reviewer on Cranelift too and originally asked for the issue to be filed, so I'm happy to take the review; there isn't any other \"decision\" process, but you're welcome to raise any other concerns or, in the limit, take it to the Cranelift weekly meeting)</p>\n</blockquote>",
        "id": 537176487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756764318
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537178121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756765569
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537179604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756766716
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537180191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756767224
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537180899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756767708
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537231702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756801048
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537232156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756801182
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537236889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756802630
    },
    {
        "content": "<p>pnodet edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>:</p>\n<blockquote>\n<p>## Problem</p>\n<p>The previous leaf function detection in <code>FunctionStencil::is_leaf()</code> was overly conservative. It would incorrectly mark functions as non-leaf if they:</p>\n<p>- Had any function signatures defined (even if unused)<br>\n  - Referenced any TLS global values (even without calling)</p>\n<p>This conservative approach prevented valid leaf functions from benefiting from frame pointer optimizations, particularly affecting performance when <code>preserve_frame_pointers=false</code>.</p>\n<p>## Solution</p>\n<p>This PR implements accurate leaf function detection by analyzing the actual generated machine code during the VCode register allocation phase. The new approach:</p>\n<p>1. <strong>Adds <code>is_call()</code> method to <code>MachInst</code> trait</strong> - Each architecture implementation now identifies its call instructions (including indirect calls and tail calls)</p>\n<p>2. <strong>Detects calls during register allocation</strong> - The <code>compute_clobbers()</code> method in VCode now tracks whether any actual call instructions exist</p>\n<p>3. <strong>Removes the conservative <code>is_leaf()</code> method</strong> - The old method that made assumptions based on IR-level information is replaced</p>\n<p>4. <strong>Provides comprehensive test coverage</strong> - Tests verify various scenarios including:</p>\n<div class=\"codehilite\"><pre><span></span><code> - True leaf functions (correctly identified as leaf)\n - Functions with unused signatures (correctly identified as leaf)\n - Functions with actual calls (correctly identified as non-leaf)\n - Functions taking function addresses (correctly identified as leaf)\n</code></pre></div>\n\n<p>Fix #11573</p>\n</blockquote>",
        "id": 537237395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756802793
    },
    {
        "content": "<p><strong>pnodet</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a> as ready for review.</p>",
        "id": 537237428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756802804
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3175572928\">PR review</a>.</p>",
        "id": 537240300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756803774
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2315417197\">PR review comment</a>:</p>\n<blockquote>\n<p>Do we actually need to set up a stack frame if the only call we would do is a tail call? Fair chance the tail call handling doesn't currently handle not having a stack frame, so this doesn't have to be changed in this PR. Just noting a potential optimization opportunity.</p>\n</blockquote>",
        "id": 537240302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756803775
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3175578793\">PR review</a>.</p>",
        "id": 537240531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756803850
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2315420723\">PR review comment</a>:</p>\n<blockquote>\n<p>How hard would it be to return this value instead of mutating the <code>Callee</code>?</p>\n</blockquote>",
        "id": 537240532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756803851
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537240989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756803980
    },
    {
        "content": "<p>pnodet submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3175606772\">PR review</a>.</p>",
        "id": 537242123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756804334
    },
    {
        "content": "<p>pnodet created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2315441375\">PR review comment</a>:</p>\n<blockquote>\n<p>@bjorn3 I don't think this would be too much of a hassle, I could see something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-  let clobbers = self.compute_clobbers(regalloc);</span>\n<span class=\"gd\">-  self.abi.compute_frame_layout(&amp;self.sigs, regalloc.num_spillslots, clobbers);</span>\n\n<span class=\"gi\">+  let (clobbers, is_leaf) = self.compute_clobbers(regalloc);</span>\n<span class=\"gi\">+  self.abi.set_is_leaf(is_leaf);</span>\n<span class=\"gi\">+  self.abi.compute_frame_layout(&amp;self.sigs, regalloc.num_spillslots, clobbers);</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 537242125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756804334
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3175637498\">PR review</a>.</p>",
        "id": 537243490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756804786
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2315464684\">PR review comment</a>:</p>\n<blockquote>\n<p>This needs to be considered a call instruction too. As should the <code>blr x3 ; reloc_external Aarch64TlsDescCall u1:0 0</code> on arm64 and if it doesn't already happen whichever instruction is used for <code>__tls_get_addr</code> calls in the <code>tls_value</code> lowering on other platforms.</p>\n</blockquote>",
        "id": 537243491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756804787
    },
    {
        "content": "<p>pnodet submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3175650689\">PR review</a>.</p>",
        "id": 537243992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756804954
    },
    {
        "content": "<p>pnodet created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2315474407\">PR review comment</a>:</p>\n<blockquote>\n<p>@bjorn3 We could have  the vcode analysis distinguish </p>\n<p>- Leaf: No calls at all<br>\n  - Tail-call-only: Only tail calls<br>\n  - Non-leaf: Has regular calls (with or without tail calls)</p>\n<p>Something like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">call_type</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">CallType</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"n\">Inst</span><span class=\"p\">::</span><span class=\"n\">Call</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Inst</span><span class=\"p\">::</span><span class=\"n\">CallInd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">CallType</span><span class=\"p\">::</span><span class=\"n\">Regular</span><span class=\"p\">,</span>\n\n<span class=\"w\">          </span><span class=\"n\">Inst</span><span class=\"p\">::</span><span class=\"n\">ReturnCall</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Inst</span><span class=\"p\">::</span><span class=\"n\">ReturnCallInd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">CallType</span><span class=\"p\">::</span><span class=\"n\">TailOnly</span><span class=\"p\">,</span>\n\n<span class=\"w\">          </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">CallType</span><span class=\"p\">::</span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>so that tail call only functions skip prologue and epilogue?</p>\n</blockquote>",
        "id": 537243993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756804955
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3175669468\">PR review</a>.</p>",
        "id": 537244583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756805150
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2315487327\">PR review comment</a>:</p>\n<blockquote>\n<p>I meant removing <code>set_is_leaf</code> and the <code>is_leaf</code> field of <code>Callee</code> entirely and instead passing <code>is_leaf</code> around to functions that need it. I don't know how much of a hassle that would be.</p>\n</blockquote>",
        "id": 537244585,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756805150
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537245104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756805339
    },
    {
        "content": "<p>pnodet submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3176066310\">PR review</a>.</p>",
        "id": 537261363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756811280
    },
    {
        "content": "<p>pnodet created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2315752471\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm wondering if in </p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/10d2cbc59d35b14c3027a8542f636c591b2ec96b/cranelift/codegen/src/isa/x64/abi.rs#L937\">https://github.com/bytecodealliance/wasmtime/blob/10d2cbc59d35b14c3027a8542f636c591b2ec96b/cranelift/codegen/src/isa/x64/abi.rs#L937</a></p>\n<p>Should we have something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-          let setup_area_size = 16; // RBP, return address</span>\n<span class=\"gi\">+          let setup_area_size = is_leaf {</span>\n<span class=\"gi\">+              0</span>\n<span class=\"gi\">+          } else {</span>\n<span class=\"gi\">+              16 // RBP, return address</span>\n<span class=\"gi\">+          };</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 537261364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756811281
    },
    {
        "content": "<p>pnodet submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3176068807\">PR review</a>.</p>",
        "id": 537261501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756811334
    },
    {
        "content": "<p>pnodet created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2315754353\">PR review comment</a>:</p>\n<blockquote>\n<p>And also checking flags.preserve_frame_pointers</p>\n</blockquote>",
        "id": 537261502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756811335
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3176103237\">PR review</a>.</p>",
        "id": 537263666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756812075
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2315780668\">PR review comment</a>:</p>\n<blockquote>\n<p>You mean for tail calls? I think those are best left to a separate PR.</p>\n</blockquote>",
        "id": 537263667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756812075
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537274394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756815917
    },
    {
        "content": "<p><strong>pnodet</strong> requested <a href=\"https://github.com/bjorn3\">bjorn3</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537274437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756815930
    },
    {
        "content": "<p>pnodet submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3176316110\">PR review</a>.</p>",
        "id": 537274506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756815953
    },
    {
        "content": "<p>pnodet created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2315927594\">PR review comment</a>:</p>\n<blockquote>\n<p>I made another pass on this</p>\n</blockquote>",
        "id": 537274509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756815953
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537274821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756816053
    },
    {
        "content": "<p>pnodet edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>:</p>\n<blockquote>\n<p>## Problem</p>\n<p>The previous leaf function detection in <code>FunctionStencil::is_leaf()</code> was overly conservative. It would incorrectly mark functions as non-leaf if they:</p>\n<p>- Had any function signatures defined (even if unused)<br>\n  - Referenced any TLS global values (even without calling)</p>\n<p>## Solution</p>\n<p>This PR implements accurate leaf function detection by analyzing the actual generated machine code during the VCode register allocation phase. The new approach:</p>\n<p>1. <strong>Adds <code>is_call()</code> method to <code>MachInst</code> trait</strong> - Each architecture implementation now identifies its call instructions (including indirect calls and tail calls)</p>\n<p>2. <strong>Detects calls during register allocation</strong> - The <code>compute_clobbers()</code> method in VCode now tracks whether any actual call instructions exist</p>\n<p>3. <strong>Removes the conservative <code>is_leaf()</code> method</strong> - The old method that made assumptions based on IR-level information is replaced</p>\n<p>Fix #11573</p>\n</blockquote>",
        "id": 537275216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756816180
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3176347349\">PR review</a>.</p>",
        "id": 537276000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756816453
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2315948672\">PR review comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            | Inst::MachOTlsGetAddr { .. } =&gt; true,\n</code></pre></div>\n<p>PE/COFF unlike other object file formats directly emits a <code>%fs</code> relative access rather than by emitting a call that may later be relaxed by the linker.</p>\n</blockquote>",
        "id": 537276001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756816453
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3176355006\">PR review</a>.</p>",
        "id": 537276439,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756816586
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537296989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756822595
    },
    {
        "content": "<p>pnodet <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#issuecomment-3245557638\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>:</p>\n<blockquote>\n<p>@cfallin I've updated this PR thanks to the given insights and to reflect the changes discussed above, would mind giving it another look?</p>\n</blockquote>",
        "id": 537297264,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756822678
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3177286685\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for the updates! Looks generally good now. Just a few small nits below; happy to merge once those are changed.</p>\n</blockquote>",
        "id": 537322177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756829938
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2316576585\">PR review comment</a>:</p>\n<blockquote>\n<p>Tiny nit, but our style is usually to end comments with a <code>.</code>.</p>\n</blockquote>",
        "id": 537322178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756829939
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2316581592\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we update the header comment here to note that we're including the test for completeness with respect to other ISAs, but that x64 does not yet implement the leaf-function optimization, so frame setup is still present below?</p>\n</blockquote>",
        "id": 537322179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756829939
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2316575804\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's call this <code>compute_clobbers_and_leaf</code> for clarity, now that it returns both.</p>\n</blockquote>",
        "id": 537322180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756829939
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3177312289\">PR review</a>.</p>",
        "id": 537322703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756830131
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2316590259\">PR review comment</a>:</p>\n<blockquote>\n<p>x64 actually doesn't implement the leaf-function optimization at all (it is a bit different than the other ISAs because the call still pushes the return address; that created some complications that I'm forgetting at the moment; in any case, indeed, that is territory for a separate PR).</p>\n</blockquote>",
        "id": 537322705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756830131
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3177316211\">PR review</a>.</p>",
        "id": 537322998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756830211
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#discussion_r2316593216\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's leave tail call support for a separate PR as well -- it would be nice to have, but the tail-call implementation itself is quite finicky and specific to our frame layout, and would need updating as well; in other words, it's not just a matter of omitting the prologue.</p>\n</blockquote>",
        "id": 537322999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756830211
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537370835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756850690
    },
    {
        "content": "<p>pnodet <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#issuecomment-3246939833\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>:</p>\n<blockquote>\n<p>Thanks for the review. I made the changes you pointed out. I'll let you merge at your own convenience! </p>\n</blockquote>",
        "id": 537371024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756850787
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537371066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756850815
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#pullrequestreview-3178289319\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 537371535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756851089
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537371542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756851095
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#issuecomment-3246997137\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>:</p>\n<blockquote>\n<p>@pnodet it looks like this needs some test expectation updates (use the \"bless\" environment variable to do this then commit the deltas in a separate commit) -- happy to merge once CI is green.</p>\n</blockquote>",
        "id": 537373215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756852107
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537375142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756853466
    },
    {
        "content": "<p>cfallin has disabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537375143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756853466
    },
    {
        "content": "<p>pnodet <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#issuecomment-3247046828\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>:</p>\n<blockquote>\n<p>@cfallin Indeed, this was from newly added tests and I hadn't rebased the main branch since</p>\n</blockquote>",
        "id": 537375276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756853558
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#issuecomment-3247656890\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>:</p>\n<blockquote>\n<p>@pnodet there is a failure when testing this PR on the merge queue because <code>main</code> now has new filetests whose outputs shift with this PR. Could you merge (not rebase) <code>main</code> and then in a separate commit, update filetest outputs?</p>\n</blockquote>",
        "id": 537398861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756874249
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537410065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756881765
    },
    {
        "content": "<p>pnodet edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>:</p>\n<blockquote>\n<p>## Problem</p>\n<p>The previous leaf function detection in <code>FunctionStencil::is_leaf()</code> was overly conservative. It would incorrectly mark functions as non-leaf if they:</p>\n<p>- Had any function signatures defined (even if unused)<br>\n  - Referenced any TLS global values (even without calling)</p>\n<p>## Solution</p>\n<p>This PR implements accurate leaf function detection by analyzing the actual generated machine code during the VCode register allocation phase. The new approach:</p>\n<p>1. <strong>Adds <code>is_call()</code> method to <code>MachInst</code> trait</strong> - Each architecture implementation now identifies its call instructions (including indirect calls and tail calls)</p>\n<p>2. <strong>Detects calls during register allocation</strong> - The <code>compute_clobbers()</code> method in VCode now tracks whether any actual call instructions exist</p>\n<p>3. <strong>Removes the conservative <code>is_leaf()</code> method</strong> - The old method that made assumptions based on IR-level information is replaced</p>\n<p>Fixes #11573</p>\n</blockquote>",
        "id": 537457080,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756899870
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>.</p>",
        "id": 537512372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756916400
    },
    {
        "content": "<p>pnodet <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581#issuecomment-3249968386\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11581\">PR #11581</a>:</p>\n<blockquote>\n<p>@cfallin @bjorn3 Thanks!</p>\n</blockquote>",
        "id": 537515432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756917325
    }
]