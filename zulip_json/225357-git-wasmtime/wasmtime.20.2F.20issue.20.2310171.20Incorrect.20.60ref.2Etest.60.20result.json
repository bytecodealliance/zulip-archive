[
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10171\">issue #10171</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"webassembly\"><pre><span></span><code>(module\n    (type $appNode\n        (struct (field $left anyref)\n                (field $right anyref)))\n\n    (type $comb (struct (field $asciiTag i32)))\n\n    (func $prob1 (export \"prob1\") (param $p (ref null $appNode)) (result i32)\n        (local.get $p)\n        (struct.get $appNode $left)\n        (ref.cast (ref null $appNode))\n        (struct.get $appNode $right)\n        (ref.test (ref null $comb))\n    )\n\n    (func $prob2 (export \"prob2\") (param $p (ref null $appNode)) (result i32)\n        (local.get $p)\n        (struct.get $appNode $left)\n        (ref.cast (ref null $appNode))\n        (struct.get $appNode $left)\n        (ref.test (ref null $comb))\n    )\n\n    (func $main (export \"main\") (result i32)\n        (struct.new $appNode (struct.new $appNode (struct.new $comb (i32.const 67))\n                                                  (struct.new $comb (i32.const 73)))\n                             (ref.i31 (i32.const 2)))\n        (call $prob2)\n    )\n)\n</code></pre></div>\n<p>Hey Wasmtime team! <code>call</code>ing <code>$prob1</code> returns 1 but <code>$prob2</code> returns 0. Why is that? Shouldn't it be reading the <code>(struct.new $comb (i32.const 67))</code> which indeed is a <code>comb</code>? I've tried reading the GC spec but haven't been able to figure out why the runtime behaves this way.</p>\n</blockquote>",
        "id": 497505424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738607262
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10171#issuecomment-2631775385\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10171\">issue #10171</a>:</p>\n<blockquote>\n<p>Haven't managed to meaningfully reduce it past this:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$tree</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"nv\">$left</span> <span class=\"err\">anyref</span><span class=\"p\">)</span>\n                      <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"nv\">$right</span> <span class=\"err\">anyref</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$s</span> <span class=\"p\">(</span><span class=\"err\">struct</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"err\">struct.new</span> <span class=\"nv\">$tree</span>\n                <span class=\"p\">(</span><span class=\"err\">struct.new</span> <span class=\"nv\">$tree</span>\n                            <span class=\"p\">(</span><span class=\"err\">struct.new</span> <span class=\"nv\">$s</span><span class=\"p\">)</span>\n                            <span class=\"p\">(</span><span class=\"err\">ref.i</span><span class=\"mi\">31</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n                <span class=\"p\">(</span><span class=\"err\">ref.i</span><span class=\"mi\">31</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n    <span class=\"err\">struct.get</span> <span class=\"nv\">$tree</span> <span class=\"nv\">$left</span>\n    <span class=\"err\">ref.cast</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">null</span> <span class=\"nv\">$tree</span><span class=\"p\">)</span>\n    <span class=\"err\">struct.get</span> <span class=\"nv\">$tree</span> <span class=\"nv\">$left</span>\n    <span class=\"err\">ref.test</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">null</span> <span class=\"nv\">$s</span><span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>Interestingly, changing <code>$right</code> to be an <code>i31ref</code> also makes the test pass.</p>\n</blockquote>",
        "id": 497507724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738607944
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10171#issuecomment-2631776331\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10171\">issue #10171</a>:</p>\n<blockquote>\n<p>And removing one layer of tree nesting also makes the test pass.</p>\n</blockquote>",
        "id": 497507810,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738607973
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10171#issuecomment-2631805884\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10171\">issue #10171</a>:</p>\n<blockquote>\n<p>Using the null collector instead of the DRC collector also makes the test pass. I'm starting to suspect that this involves a Wasm-to-CLIF translation bug where we are accidentally generating CLIF that is more optimizable than it should be.</p>\n</blockquote>",
        "id": 497510450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738608876
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10171#issuecomment-2637574987\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10171\">issue #10171</a>:</p>\n<blockquote>\n<p>FWIW, here is the flattened version of the test case, which makes the order of instructions a little easier to read when staring at clif and comparing it to the original wasm:</p>\n<p><div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$tree</span> <span class=\"p\">(</span><span class=\"err\">struct</span> <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"nv\">$left</span> <span class=\"err\">anyref</span><span class=\"p\">)</span>\n                      <span class=\"p\">(</span><span class=\"err\">field</span> <span class=\"nv\">$right</span> <span class=\"err\">anyref</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$s</span> <span class=\"p\">(</span><span class=\"err\">struct</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"main\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"err\">struct.new</span> <span class=\"nv\">$s</span>\n    <span class=\"err\">ref.null</span> <span class=\"err\">i</span><span class=\"mi\">31</span>\n    <span class=\"err\">struct.new</span> <span class=\"nv\">$tree</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">2</span>\n    <span class=\"err\">ref.i</span><span class=\"mi\">31</span>\n    <span class=\"err\">struct.new</span> <span class=\"nv\">$tree</span>\n    <span class=\"err\">struct.get</span> <span class=\"nv\">$tree</span> <span class=\"nv\">$left</span>\n    <span class=\"err\">ref.cast</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">null</span> <span class=\"nv\">$tree</span><span class=\"p\">)</span>\n    <span class=\"err\">struct.get</span> <span class=\"nv\">$tree</span> <span class=\"nv\">$left</span>\n    <span class=\"err\">ref.test</span> <span class=\"p\">(</span><span class=\"err\">ref</span> <span class=\"err\">null</span> <span class=\"nv\">$s</span><span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 497946528,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738776525
    },
    {
        "content": "<p>apoorvaanand1998 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10171#issuecomment-2645792417\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10171\">issue #10171</a>:</p>\n<blockquote>\n<p>Thank you for your quick response <span aria-label=\"bow\" class=\"emoji emoji-1f647\" role=\"img\" title=\"bow\">:bow:</span></p>\n<p>Now that I know it's a bug with Wasmtime, I've been trying to run this on firefox. The first step I suppose is to use <code>wat2wasm</code> to compile this to a <code>.wasm</code> file so I can run it as shown <a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly/Guides/Loading_and_running\">here</a>. But <code>wat2wasm</code> fails to parse my program</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">parseWat</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">:</span>\n<span class=\"nc\">test</span><span class=\"p\">.</span><span class=\"n\">wast</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">30</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">unexpected</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"s\">\"anyref\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">externref</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">funcref</span><span class=\"p\">.</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"w\"> </span><span class=\"cp\">$left</span><span class=\"w\"> </span><span class=\"n\">anyref</span><span class=\"p\">)</span>\n<span class=\"w\">                             </span><span class=\"o\">^^^^^^</span>\n<span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wast</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">31</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">unexpected</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"n\">anyref</span><span class=\"p\">.</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"w\"> </span><span class=\"cp\">$right</span><span class=\"w\"> </span><span class=\"n\">anyref</span><span class=\"p\">)))</span>\n<span class=\"w\">                              </span><span class=\"o\">^^^^^^</span>\n<span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wast</span><span class=\"p\">:</span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">unexpected</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"s\">\"null\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">numeric</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"cp\">$foo</span><span class=\"p\">).</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$prob1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"prob1\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"cp\">$p</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">null</span><span class=\"w\"> </span><span class=\"cp\">$appNode</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">                                                 </span><span class=\"o\">^^^^</span>\n</code></pre></div>\n<p>How did you get it to run on firefox?</p>\n<p>I am sorry if this isn't the right place to be asking this. Let me know if it isn't and we can switch communication channels. Thank you for your help!</p>\n</blockquote>",
        "id": 498512017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739029231
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10171#issuecomment-2645889847\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10171\">issue #10171</a>:</p>\n<blockquote>\n<p>You can try using <a href=\"https://github.com/bytecodealliance/wasm-tools\">wasm-tools</a> as <code>wasm-tools parse foo.wat -o foo.wasm</code></p>\n</blockquote>",
        "id": 498523463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739038750
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10171\">issue #10171</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"webassembly\"><pre><span></span><code>(module\n    (type $appNode\n        (struct (field $left anyref)\n                (field $right anyref)))\n\n    (type $comb (struct (field $asciiTag i32)))\n\n    (func $prob1 (export \"prob1\") (param $p (ref null $appNode)) (result i32)\n        (local.get $p)\n        (struct.get $appNode $left)\n        (ref.cast (ref null $appNode))\n        (struct.get $appNode $right)\n        (ref.test (ref null $comb))\n    )\n\n    (func $prob2 (export \"prob2\") (param $p (ref null $appNode)) (result i32)\n        (local.get $p)\n        (struct.get $appNode $left)\n        (ref.cast (ref null $appNode))\n        (struct.get $appNode $left)\n        (ref.test (ref null $comb))\n    )\n\n    (func $main (export \"main\") (result i32)\n        (struct.new $appNode (struct.new $appNode (struct.new $comb (i32.const 67))\n                                                  (struct.new $comb (i32.const 73)))\n                             (ref.i31 (i32.const 2)))\n        (call $prob2)\n    )\n)\n</code></pre></div>\n<p>Hey Wasmtime team! <code>call</code>ing <code>$prob1</code> returns 1 but <code>$prob2</code> returns 0. Why is that? Shouldn't it be reading the <code>(struct.new $comb (i32.const 67))</code> which indeed is a <code>comb</code>? I've tried reading the GC spec but haven't been able to figure out why the runtime behaves this way.</p>\n</blockquote>",
        "id": 499291214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739381708
    }
]