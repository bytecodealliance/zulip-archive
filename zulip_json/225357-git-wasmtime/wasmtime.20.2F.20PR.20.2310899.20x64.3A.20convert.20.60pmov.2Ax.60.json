[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899\">PR #10899</a> from <code>abrown:asm-pmovx</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This change converts all <code>pmovsx*</code> and <code>pmovzx*</code> instructions to use the new assembler.</p>\n</blockquote>",
        "id": 521821195,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748890673
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899\">PR #10899</a>.</p>",
        "id": 521821200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748890674
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899\">PR #10899</a>.</p>",
        "id": 521821202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748890674
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899#issuecomment-2932062363\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899\">PR #10899</a>:</p>\n<blockquote>\n<p>We can wait on merging this until #10881 is resolved to avoid merge conflicts for @jlb6740.</p>\n</blockquote>",
        "id": 521821311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748890705
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899#pullrequestreview-2889695520\">PR review</a>:</p>\n<blockquote>\n<p>Looks good overall, just a doc-comment request below; thanks!</p>\n</blockquote>",
        "id": 521827804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748892896
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899#discussion_r2121998526\">PR review comment</a>:</p>\n<blockquote>\n<p>I see these are pre-existing (this part of the diff is just code motion) but even so, I'm not sure I understand what these variants mean -- could we have doc-comments on <code>xmm1</code>, <code>xmm2</code>, <code>xmm3</code> describing what they're for and how they differ?</p>\n</blockquote>",
        "id": 521827805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748892896
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899#discussion_r2122570613\">PR review comment</a>:</p>\n<blockquote>\n<p>@cfallin When describing an instruction a unique location is required for each reg/mem operand to avoid name clashes when generating lowering code (<a href=\"http://assembler.rs\">assembler.rs</a>). Before vex, there was just a single xmm location and that was fine, but when describing vex instructions that use multiple xmm registers, that not longer was adequate. There was an attempt append  subscripts to locations while generating code in <a href=\"http://assembler.rs\">assembler.rs</a>, but it became clear that it made the most sense to create multiple xmm registers in the enum and just use the same subscript naming as is used as the Intel manual. </p>\n</blockquote>",
        "id": 521890971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748921729
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899#pullrequestreview-2890493777\">PR review</a>.</p>",
        "id": 521890972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748921729
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899#pullrequestreview-2890504793\">PR review</a>.</p>",
        "id": 521891566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748922091
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899#discussion_r2122577998\">PR review comment</a>:</p>\n<blockquote>\n<p>OK, I'm not sure I understand why we need to define new <em>types of operands</em> though -- can't we have DSL methods that somehow specify which slot the registers correspond to?</p>\n<p>In essence this seems like a category error to me: the enum so far defines the kinds of things we can operate on; an XMM register, a reg-or-mem, that sort of thing. Whether we use that as input X or Y, it's still that kind of thing. The fact that we use the operand in a certain way should be a property of the <em>instruction</em>, not the operand kind. The concern I have with this kind of conflation is that it's not at all clear to me (or presumably others in the future) which of these variants to use or what they mean -- a recipe for subtle bugs and footguns in the future. So I'd rather we find a way to store the information elsewhere...</p>\n</blockquote>",
        "id": 521891568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748922091
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899#discussion_r2122570613\">PR review comment</a>.</p>",
        "id": 521892663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748922748
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899#issuecomment-2933321427\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899\">PR #10899</a>:</p>\n<blockquote>\n<blockquote>\n<p>We can wait on merging this until #10881 is resolved to avoid merge conflicts for @jlb6740.</p>\n</blockquote>\n<p>@abrown Thanks. #10881 should be resolved now. </p>\n</blockquote>",
        "id": 521893085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748923012
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899#pullrequestreview-2893790947\">PR review</a>.</p>",
        "id": 522199056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748978284
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899#discussion_r2124716919\">PR review comment</a>:</p>\n<blockquote>\n<p>Here's what is going on: this <code>enum Location</code> is actually the _concrete_ list of names accepted as operands, not a classification of operands. There are three reasons why this became concrete: (1) it makes it really simple for us to write <code>rax</code> or <code>m16</code> or <code>r32b</code> when defining instructions, (2) that name then matches how the manual defines the instruction, and (3) that name is then unique for the operand and we can use it as Rust field, e.g.</p>\n<p>When it comes to _classifications_ of operands, we actually have two different ways of categorizing operands:</p>\n<ul>\n<li><code>enum OperandKind</code>, which we use to distinguish between <code>Reg</code>, <code>Mem</code>, etc.</li>\n<li><code>enum RegClass</code>, which we use to distinguish between <code>Xmm</code> and <code>Gpr</code></li>\n</ul>\n<p>The concrete <code>Location</code> names get categorized appropriately in <code>Location::kind()</code> and <code>Location::reg_class()</code>. Most of the assembler code generation uses their output. I think it would be helpful to summarize all of this this text above in the doc comments of <code>Location</code>, which is what @cfallin you were originally asking, right? I think that would be a good addition: do you have any specific wording choices that would be most helpful here?</p>\n</blockquote>",
        "id": 522199057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748978285
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899\">PR #10899</a>.</p>",
        "id": 522393734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749052214
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899\">PR #10899</a>.</p>",
        "id": 522394719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749052483
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899#pullrequestreview-2897523386\">PR review</a>.</p>",
        "id": 522412295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749057562
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899#discussion_r2127085470\">PR review comment</a>:</p>\n<blockquote>\n<p>For later reference: we discussed this in the Cranelift meeting today and @cfallin is planning to look into this a bit more. There are other ways to factor this that avoids having the concrete things in the same bucket with general ones while still \"looking like the manual\" and having unique Rust field names; @alexcrichton had some thoughts to write up in an issue. I'll go ahead and merge this for now since this discussion was unrelated to this PR.</p>\n</blockquote>",
        "id": 522412296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749057562
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899#pullrequestreview-2897528911\">PR review</a>.</p>",
        "id": 522412747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749057690
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899#discussion_r2127089067\">PR review comment</a>:</p>\n<blockquote>\n<p>See <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10922\">https://github.com/bytecodealliance/wasmtime/issues/10922</a> for future discussion.</p>\n</blockquote>",
        "id": 522412748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749057690
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10899\">PR #10899</a>.</p>",
        "id": 522416849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749058958
    }
]