[
    {
        "content": "<p>stevenj opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>Our implementation requires filesystems to be fully controlled, and files come from a VFS not any mounted filesystem.<br>\nThat means we need to control the low level aspects of filesystem access for WasiP2.</p>\n<p>I don't see how that can be achieved, because the only option I see is giving Wasi access to a pre-opened directory, which is 100% off the table for our application.  How to use the WaiCtxBuilder, and abstract the necessary filesystem interfaces to the runtime?</p>\n</blockquote>",
        "id": 451757440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721136035
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-2231096470\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>For a fully virtual filesystem you won't be using <code>WasiCtxBuilder</code>. You'll want to instead implement the <code>Host</code> traits directly generated in the <code>wasmtime-wasi</code> crate such as <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/bindings/sync/filesystem/types/trait.Host.html\">this</a>. You'd then call <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/bindings/filesystem/types/fn.add_to_linker.html\"><code>add_to_linker</code></a> or similarly.</p>\n</blockquote>",
        "id": 451774291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721140878
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-2742892700\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>It looks like there <a href=\"https://github.com/bytecodealliance/wasmtime/pull/701\">was once a <code>preopened_virt()</code> function</a> that maybe did this? It seems to have been removed though. :-(</p>\n<p>It's a bit of a shame you can't use <code>WasiCtxBuilder</code> - I don't want to have to reimplement all the other APIs it provides too. Perhaps <code>WasiCtx</code> should be broken up into components (stdio, networking, filesystem etc?). Kind of feels like the trait system could solve this.</p>\n</blockquote>",
        "id": 507235594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742551421
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-2744131762\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>We used to have a more dynamic trait system to make this pluggable when wasmtime-wasi was backed by wasi-common, and when we rewrote wasmtime-wasi to detach it from the legacy wasi-common implementation, we got rid of it because it created significant maintenance burden and complexity for very little benefit over using the linker to do the same.</p>\n<p>You can still use the linker to define the filesystem interfaces, and use the rest of wasmtime-wasi's linkers to define the rest of wasi based on WasiCtx, and they will interoperate fine as long as your wasmtime::component::bindgen to generate your filesystem traits has the same <code>with</code> settings for the wasi:io package <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/bindings.rs#L412-L418\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/bindings.rs#L412-L418</a></p>\n</blockquote>",
        "id": 507341559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742581335
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-2744333079\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>Ah ok thanks. Sounds a little bit beyond me tbh but I'll have a go. So I wonder get multiple definition linker errors or something like that?</p>\n</blockquote>",
        "id": 507357309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742587324
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-2748763705\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>Symbols will be duplicated if you call the <code>wasmtime_wasi::add_to_linker_*</code> functions directly, because those put all symbols into the linker. If you drop down to using the individual <code>wasmtime_wasi::bindings::&lt;package&gt;::&lt;interface&gt;::add_to_linker_get_host</code> (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/lib.rs#L356-L385\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/lib.rs#L356-L385</a> for how these are collected into the whole set for add_to_linker_async), you can add symbols to the linker on a per-interface basis.</p>\n</blockquote>",
        "id": 507823705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742834563
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-2954149013\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>Hmm I had a go at this but it gets kind of complicated because of <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7f8370a5fa37fe11c7a4581230cd09932656ea8d/crates/wasi/src/p2/bindings.rs#L429\">this code</a>, note this comment:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"c1\">// Configure all other resources to be concrete types defined in</span>\n<span class=\"w\">            </span><span class=\"c1\">// this crate</span>\n</code></pre></div>\n<p>So I got as far as this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">add_modified_wasi_apis_to_linker_async</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiView</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">options</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">LinkOptions</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi_io</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_async</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">type_annotate</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">t</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">WasiImpl</span><span class=\"p\">(</span><span class=\"n\">IoImpl</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)));</span>\n\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">clocks</span><span class=\"p\">::</span><span class=\"n\">wall_clock</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">clocks</span><span class=\"p\">::</span><span class=\"n\">monotonic_clock</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// We use our own instead.</span>\n<span class=\"w\">    </span><span class=\"c1\">// wasmtime_wasi::p2::bindings::filesystem::preopens::add_to_linker_get_host(l, closure)?;</span>\n<span class=\"w\">    </span><span class=\"k\">crate</span><span class=\"p\">::</span><span class=\"n\">vfs</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">random</span><span class=\"p\">::</span><span class=\"n\">random</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">random</span><span class=\"p\">::</span><span class=\"n\">insecure</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">random</span><span class=\"p\">::</span><span class=\"n\">insecure_seed</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">exit</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">options</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">environment</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stdin</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stdout</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stderr</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_input</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_output</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_stdin</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_stdout</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_stderr</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sockets</span><span class=\"p\">::</span><span class=\"n\">tcp</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sockets</span><span class=\"p\">::</span><span class=\"n\">tcp_create_socket</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sockets</span><span class=\"p\">::</span><span class=\"n\">udp</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sockets</span><span class=\"p\">::</span><span class=\"n\">udp_create_socket</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sockets</span><span class=\"p\">::</span><span class=\"n\">instance_network</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sockets</span><span class=\"p\">::</span><span class=\"n\">network</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">options</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sockets</span><span class=\"p\">::</span><span class=\"n\">ip_name_lookup</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_get_host</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>which is fine, and then</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::{</span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Resource</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::{</span><span class=\"n\">p2</span><span class=\"p\">::{</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">preopens</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">};</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">preopens</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[doc = </span><span class=\"s\">\" Return the set of preopened directories, and their paths.\"</span><span class=\"cp\">]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get_directories</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">preopens</span><span class=\"p\">::</span><span class=\"n\">Descriptor</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">preopens</span><span class=\"p\">::</span><span class=\"n\">Descriptor</span><span class=\"p\">::</span><span class=\"n\">Dir</span><span class=\"p\">(</span><span class=\"fm\">todo!</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">::</span><span class=\"n\">new_own</span><span class=\"p\">(</span><span class=\"fm\">todo!</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"s\">\"/\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()),</span>\n<span class=\"w\">        </span><span class=\"p\">])</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">add_to_linker_get_host</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">preopens</span><span class=\"p\">::</span><span class=\"n\">GetHost</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">preopens</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">host_getter</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">G</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I haven't figured out what <code>Resource</code>, <code>Descriptor</code>, <code>Host</code>, <code>GetHost</code>, etc. are yet (really awkward to find the definition of these things due to the heavy use of proc macros)... but anyway the point is that <code>preopens::Host</code> seems to force the use of <code>preopens::Descriptor</code>, which is hard-coded to open files from disk, and that's the behaviour I want to change.</p>\n<p>If I want custom FS behaviour do I need to completely replicate the entire <code>mod async_io {   wasmtime::component::bindgen!({ </code> call but change one line? That seems... awkward. :-/</p>\n</blockquote>",
        "id": 522985007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749397992
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-2973739472\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>I got a bit further... but ultimately you end up having to implement your own</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">add_to_linker_get_host</span><span class=\"o\">&lt;</span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">G</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">preopens</span><span class=\"p\">::</span><span class=\"n\">GetHost</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">preopens</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">host_getter</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">G</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In this repo that is full of generated code that ultimately comes from <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4f3ee9432a2500f910ab6958ab1dcfd188324b0b/crates/wasi/src/p2/bindings.rs#L428-L429\">these hard-coded types</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">async_io</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"src/p2/wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wasi:cli/command\"</span><span class=\"p\">,</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">        </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"c1\">// Configure all other resources to be concrete types defined in</span>\n<span class=\"w\">            </span><span class=\"c1\">// this crate</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">            </span><span class=\"s\">\"wasi:filesystem/types/directory-entry-stream\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">crate</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">ReaddirIterator</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"s\">\"wasi:filesystem/types/descriptor\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">crate</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">Descriptor</span><span class=\"p\">,</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>What I really want to do is just use a different type there, but it doesn't seem possible. I think probably the easiest solution is just to fork the entire repo, which is probably what I'll end up doing. That's a bit sad though. :-(</p>\n</blockquote>",
        "id": 524127075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749989574
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-2977287581\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>In your own crate, can you run bindgen for the wasi:cli/command world and use <code>with</code> to point to all of the parts of wasmtime-wasi and wasmtime-wasi-io that you do want to reuse, and then redefine just the filesystem bits in your crate?</p>\n</blockquote>",
        "id": 524292359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750091354
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-2977451264\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>Ooo yeah maybe, although that does mean I need to copy the exact <code>.wit</code> files into my crate right? I can't refer to the <code>.wit</code> files in another crate?</p>\n</blockquote>",
        "id": 524303166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750094993
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-2977500304\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>You may need to copy them if you are in a different repo. In the same repo, you can use <code>path:</code> to provide a folder to look inside.</p>\n</blockquote>",
        "id": 524306851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750096091
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-2977500304\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>You may need to copy them if you are in a different repo. In the same repo, you can use the <code>path:</code> argument to generate! to provide a folder to look inside.</p>\n</blockquote>",
        "id": 524306910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750096107
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-2977500304\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>You may need to copy them if you are in a different repo. In the same repo, you can use the <code>path:</code> argument to bindgen! to provide a folder to look inside.</p>\n</blockquote>",
        "id": 524306963,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750096122
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-3172568542\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>Ok I finally got this working (as far as having a noddy <code>ls</code> WASI program run and list some fake files). Demo repo here: <a href=\"https://github.com/Timmmm/wasmtime_fs_demo\">https://github.com/Timmmm/wasmtime_fs_demo</a></p>\n<p>It's pretty unsatisfying in a number of ways though:</p>\n<ol>\n<li>I had to import the entire <a href=\"https://github.com/WebAssembly/wasi-filesystem\"><code>wasi-filesystem</code></a> repo. So I have to manually keep it in sync with the <code>wasi-filesystem</code> <code>.wit</code> files that <code>wasmtime-wasi</code> uses.</li>\n<li>I had to <a href=\"https://github.com/Timmmm/wasmtime_fs_demo/blob/master/src/wasi_linker_excluding_filesystem.rs\">copy and paste the entire <code>add_to_linker_async()</code> functions</a> and then comment out the <code>wasi-filesystem</code> stuff. There's no easy way to only add some of it.</li>\n<li>I had to <a href=\"https://github.com/Timmmm/wasmtime_fs_demo/blob/3ffc9bd657867f7434b0ad11122fedc40ffc3416/src/wasi_fs.rs#L28\">copy and paste the bindgen call</a> and then comment everything except <code>wasi-filesystem</code> out, and change the <code>ReadDirIterator</code>/<code>Descriptor</code> types to point to my own versions. This contains a lot of stuff that appears to be undocumented (or at least unobvious and difficult to locate - unfortunately go-to-definition is useless here). E.g. what does <code>only_imports</code> do, or <code>tracing: false</code>?</li>\n<li>To work around the orphan rule, wasmtime uses two levels of nested newtypes with several associated traits that are really hard to follow (<code>IoView</code>, <code>WasiView</code>, <code>HasData</code>, <code>IoImpl</code>, <code>WasiImpl</code>, <code>HasWasi</code>... who can follow this?). I think technically if I wanted to provide a generic filesystem virtualisation library I'd need a <em>third</em> level... Fortunately I don't want that, so I just used a concrete type. But still, there must be a better way?</li>\n<li>The use of a proc macro to generate the code makes everything harder because rust-analyzer can't show you the code (apparently they're working on it). It took me an unreasonable amount of time just to create the empty trait impls. (Rust-analyzer helps a lot but it doesn't get everything right.)</li>\n</ol>\n<p>So I still think this could be improved. I guess it at least works for now though. Hopefully this helps someone.</p>\n<p>I'm going to keep working on the <code>wasmtime_fs_demo</code> and try to connect it to <code>gitoxide</code> so it exposes a git commit as a filesystem to WASI.</p>\n</blockquote>",
        "id": 533645996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754826087
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-3193668178\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>Ok I updated <a href=\"https://github.com/Timmmm/wasmtime_fs_demo\">my demo repo</a> to expose a Git commit as a read-only filesystem using <a href=\"https://github.com/GitoxideLabs/gitoxide\">Gix</a>. Not production quality, but a simple <code>tree</code>-style app that tries to infer the file type of every file works!</p>\n<p>I found it is quite hard to actually implement some of the WASI functions because there isn't actually a specification for them. You often get \"this is similar to &lt;some POSIX function&gt;\" which is hardly a specification. Good example: <code>read()</code>'s spec is:</p>\n<div class=\"codehilite\"><pre><span></span><code>    /// Read from a descriptor, without using and updating the descriptor&#39;s offset.\n    ///\n    /// This function returns a list of bytes containing the data that was\n    /// read, along with a bool which, when true, indicates that the end of the\n    /// file was reached. The returned list will contain up to `length` bytes; it\n    /// may return fewer than requested, if the end of the file is reached or\n    /// if the I/O operation is interrupted.\n    ///\n    /// In the future, this may change to return a `stream&lt;u8, error-code&gt;`.\n    ///\n    /// Note: This is similar to `pread` in POSIX.\n</code></pre></div>\n\n<ol>\n<li>As far as I know descriptors don't <em>have</em> an offset. Nothing else in the API indicates that they have one.</li>\n<li>What happens if you <code>read()</code> with an offset past the end of the file? What about just up to the end of the file?</li>\n<li>What if you try to read 0 bytes?</li>\n<li>What if you try to read 0 bytes but outside the file?</li>\n</ol>\n<p>Etc. I'm guessing the answer is going to be \"whatever POSIX does\", but it only says it's <em>similar</em> to <code>pread</code> so who knows.</p>\n<p>Hopefully that will be fixed before WASI 1.0. (Sorry that was a bit off-topic.)</p>\n<p>Anyway, it would be good if there was a nicer way to integrate a custom filesystem backend than what I've done in that repo.</p>\n</blockquote>",
        "id": 534762341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755350597
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-3197332330\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>In lieu of copying the bindings and doing <code>bindgen!</code> yourself, could you reuse the traits/types from <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/p2/bindings/filesystem/index.html\"><code>wasmtime_wasi::p2::bindings::filesystem</code></a></p>\n</blockquote>",
        "id": 534972249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755529892
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-3197334817\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<blockquote>\n<p>You often get \"this is similar to \" which is hardly a specification</p>\n</blockquote>\n<p>I'd recommend raising this in the WASI proposals themselves, Wasmtime is not the source of truth for the proposals.</p>\n</blockquote>",
        "id": 534972346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755529931
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-3197341065\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<blockquote>\n<p>could you reuse the traits/types from <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/p2/bindings/filesystem/index.html\">wasmtime_wasi::p2::bindings::filesystem</a></p>\n</blockquote>\n<p>Unfortunately not because I need to change <a href=\"https://github.com/Timmmm/wasmtime_fs_demo/blob/3fd016c0993e114709fffa4f9a698aa00f89fd82/src/wasi_fs.rs#L116\">these two concrete <code>with:</code> types</a>.</p>\n</blockquote>",
        "id": 534972663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755530023
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-3197364608\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>Technically you don't need to override <code>with:</code>, but it's a bit convoluted. IMO it's less convoluted than copy/pasting all the bindings, however, so I'll explain it here. Using the upstream <code>Resource&lt;T&gt;</code> types the <code>T</code> there points to some type in the wasmtime-wasi crate, but you can effectively cast the <code>Resource&lt;T&gt;</code> to any other type, such as <code>Resource&lt;U&gt;</code>, as it's just a \"helper\" type and not actually related to stored types. This would involve calling the <code>Resource::new_*</code> constructors. You  could then wrap that up in your own helper functions/methods/extension traits to lookup your own descriptor type <code>U</code> inside a table with a <code>Resource&lt;T&gt;</code> (or something like that)</p>\n</blockquote>",
        "id": 534973791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755530373
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-3197485250\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>So for example where I currently have this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">wasi_fs</span><span class=\"p\">::</span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">preopens</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WasiState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get_directories</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span>\n<span class=\"w\">        </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Descriptor</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// My own `Descriptor` type.</span>\n<span class=\"w\">            </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[(</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Descriptor</span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">kind</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">EntryKind</span><span class=\"p\">::</span><span class=\"n\">Tree</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">gitfs</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">}).</span><span class=\"n\">with_context</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"failed to push root preopen\"</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"s\">\"/\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">)])</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I would do something like this?</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">wasi_fs</span><span class=\"p\">::</span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">preopens</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WasiState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get_directories</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span>\n<span class=\"w\">        </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">Descriptor</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">my_resource</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Descriptor</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Descriptor</span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">kind</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">EntryKind</span><span class=\"p\">::</span><span class=\"n\">Tree</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">gitfs</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">}).</span><span class=\"n\">with_context</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"failed to push root preopen\"</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">converted_resource</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">Descriptor</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">           </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">my_resource</span><span class=\"p\">.</span><span class=\"n\">owned</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Resource</span><span class=\"p\">::</span><span class=\"n\">new_owned</span><span class=\"p\">(</span><span class=\"n\">my_resource</span><span class=\"p\">.</span><span class=\"n\">rep</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Resource</span><span class=\"p\">::</span><span class=\"n\">new_borrowed</span><span class=\"p\">(</span><span class=\"n\">my_resource</span><span class=\"p\">.</span><span class=\"n\">rep</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[(</span>\n<span class=\"w\">            </span><span class=\"n\">converted_resource</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"s\">\"/\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">)])</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 534979766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755532325
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-3197834823\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>Indeed yeah, that's functionally what reusing the <code>wasmtime_wasi</code>-based traits would look like. I'd recommend using an extension trait like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ResourceTableExt</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">push_my_descriptor</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">my_descriptor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Descriptor</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">Descriptor</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ResourceTableExt</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">ResourceTable</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>as that would reduce the noise of conversions and such. You could do similarly for accessors too. Whether or not this is more palatable to generating bindings yourself is mostly a subjective point, however.</p>\n</blockquote>",
        "id": 534994413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755538594
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-3223497055\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>Hmm unfortunately that doesn't quite work. The bindings that <code>wasmtime</code> generates use <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e767c56b824e5ce8947997b052859e050419d35b/crates/wasi/src/p2/filesystem.rs#L398\"><code>wasmtime_wasi::p2::filesystem::ReaddirIterator</code></a> for <code>read_dir()</code> but the <code>wasmtime_wasi::p2::filesystem</code> crate is private (<code>pub(crate)</code>) so I can't actually implement the <code>Host</code> trait.</p>\n<p>Can we make that type public so that this approach would be possible?</p>\n</blockquote>",
        "id": 536201942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756202533
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-3225030947\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>Oh definitely yeah, making that public is quite reasonable!</p>\n</blockquote>",
        "id": 536280934,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756228074
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-3225175490\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>Cool I will make a PR.</p>\n</blockquote>",
        "id": 536287728,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756231160
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-3241392892\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>I tried updating but unfortunately these types are now private so I can't implement <code>add_to_linker_except_filesystem()</code>...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">WasiCli</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">clocks</span><span class=\"p\">::</span><span class=\"n\">WasiClocks</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">WasiFilesystem</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">random</span><span class=\"p\">::</span><span class=\"n\">WasiRandom</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">sockets</span><span class=\"p\">::</span><span class=\"n\">WasiSockets</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Can we make them public too?</p>\n<p>Also, <a href=\"https://github.com/bytecodealliance/wasmtime/commit/0a074afce9fff4fe82e45069e1e493e7f13d33ba#diff-79f9dc0ff5e2ab859cfa7afc020cdeb7e7c10c9806a6317b824643b4c7de0063\">this commit</a> has such a great commit message.. Can you teach my colleagues to do that? :-D And thanks for addressing my point <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-3172568542\">above</a> about <code>IoView</code>, <code>WasiView</code>, <code>HasData</code>, <code>IoImpl</code>, <code>WasiImpl</code>, <code>HasWasi</code>...  - this is definitely an improvement!</p>\n</blockquote>",
        "id": 537060211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756715395
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-3246057137\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>Yeah I've gone back and forth on whether those should be public, but I've copied them outside of this repo before as well. Given that I think it's reasonable to make public, so feel free to make a PR!</p>\n</blockquote>",
        "id": 537325943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756831122
    },
    {
        "content": "<p>Timmmm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-3246886965\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>Woohoo I updated <a href=\"https://github.com/Timmmm/wasmtime_fs_demo/tree/master\">my test repo</a> to use the resource type casting approach and it works! Definitely uglier and much less type safe, but overall I'd say it's the better approach.</p>\n</blockquote>",
        "id": 537368245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756849152
    }
]