[
    {
        "content": "<p>koke1997 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10792\">issue #10792</a>:</p>\n<blockquote>\n<h2>Description</h2>\n<p>While working with Wasmtime's CLI, I discovered undocumented behavior differences between the two syntaxes for invoking WebAssembly functions:</p>\n<ul>\n<li><code>wasmtime add.wasm --invoke add 1 2</code> (space syntax) - executes the function but doesn't display its return value</li>\n<li><code>wasmtime --invoke=add add.wasm 1 2</code> (equals sign syntax) - executes the function AND displays its return value</li>\n</ul>\n<p>Both commands show warnings that this functionality is experimental, but the CLI documentation doesn't explain this syntax difference or mention that return value display is only enabled with the equals sign variant.</p>\n<h2>Example</h2>\n<p>Using a simple WebAssembly module with an <code>add</code> function that returns the sum of two integers:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$add</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"nv\">$lhs</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"nv\">$rhs</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n     <span class=\"p\">(</span><span class=\"nb\">i32.add</span>\n       <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$lhs</span><span class=\"p\">)</span>\n       <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$rhs</span><span class=\"p\">)</span>\n     <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"add\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$add</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>Compiled with <code>wat2wasm add.wat</code>, then:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># This command shows no return value</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>add.wasm<span class=\"w\"> </span>--invoke<span class=\"w\"> </span>add<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span>\n\n<span class=\"c1\"># This command shows '3' as the return value</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>--invoke<span class=\"o\">=</span>add<span class=\"w\"> </span>add.wasm<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span>\nwarning:<span class=\"w\"> </span>using<span class=\"w\"> </span><span class=\"sb\">`</span>--invoke<span class=\"sb\">`</span><span class=\"w\"> </span>with<span class=\"w\"> </span>a<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span>that<span class=\"w\"> </span>takes<span class=\"w\"> </span>arguments<span class=\"w\"> </span>is<span class=\"w\"> </span>experimental<span class=\"w\"> </span>and<span class=\"w\"> </span>may<span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>future\nwarning:<span class=\"w\"> </span>using<span class=\"w\"> </span><span class=\"sb\">`</span>--invoke<span class=\"sb\">`</span><span class=\"w\"> </span>with<span class=\"w\"> </span>a<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span>that<span class=\"w\"> </span>returns<span class=\"w\"> </span>values<span class=\"w\"> </span>is<span class=\"w\"> </span>experimental<span class=\"w\"> </span>and<span class=\"w\"> </span>may<span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>future\n<span class=\"m\">3</span>\n</code></pre></div>\n<h2>Suggested Documentation Improvement</h2>\n<p>I suggest updating the CLI documentation at <a href=\"https://docs.wasmtime.dev/cli-options.html\">https://docs.wasmtime.dev/cli-options.html</a> to explain:</p>\n<ol>\n<li>The difference between space syntax (<code>--invoke function</code>) and equals sign syntax (<code>--invoke=function</code>)</li>\n<li>That function return values are only displayed with the equals sign syntax</li>\n<li>That this feature is experimental and may change in future versions</li>\n</ol>\n<p>This would help new users understand the expected behavior and avoid confusion when trying to view function return values.</p>\n<p>I noticed this while doing a course from Linux Foundation , since resource mentions the first way of executing command without equal sign - <a href=\"https://trainingportal.linuxfoundation.org/learn/course/webassembly-components-from-cloud-to-edge-lfd134/webassembly-from-scratch/exploring-webassembly?page=7\">https://trainingportal.linuxfoundation.org/learn/course/webassembly-components-from-cloud-to-edge-lfd134/webassembly-from-scratch/exploring-webassembly?page=7</a></p>\n<h2>Additional Context</h2>\n<ul>\n<li>Wasmtime version: 32.0.0 (the current version I'm using)</li>\n<li>OS: Linux Ubuntu (but should be consistent across platforms)</li>\n</ul>\n</blockquote>",
        "id": 518924400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747576673
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10792#issuecomment-2889227176\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10792\">issue #10792</a>:</p>\n<blockquote>\n<p>Hello and thanks for the report! I think there's some confusion going on here, although I'm not sure how best to resolve it.</p>\n<p>To start off though I can try to clarify. Your first example of <code>wasmtime add.wasm --invoke add 1 2</code> is not passing <code>--invoke</code> to Wasmtime, which I think is leading to some confusion. That's passing <code>--invoke</code> to the wasm module itself as an argument on the CLI. The module itself then has no entrypoint so nothing ends up happening, meaning the argument is effectively ignored. This is probably a situation where we should print a warning or something like that about no entrypoint being found. Unsure!</p>\n<p>Your second example of <code>wasmtime --invoke=add add.wasm 1 2</code> is using Wasmtime's own <code>--invoke</code> argument. Note that the <code>=</code> here is not relevant, this equally works as <code>wasmtime --invoke add add.wasm 1 2</code>. Whether or not you use <code>=</code> is a stylistic/command-line choice on your part and is orthogonal to everything else here. That you used <code>=</code> here and didn't use <code>=</code> in the first example is probably just coincidence.</p>\n<p>Now overall I agree that this is all confusing! The warning here about this being unstable is quite longstanding and doesn't have any trajectory for being removed. Additionally we don't have a great mechanism for warning about passing Wasmtime arguments to the guest by accident. There's various degrees to which we can solve these issues, but I alas don't think that there's a silver bullet here. </p>\n<p>For some of your concrete suggestions:</p>\n<blockquote>\n<p>The difference between space syntax (--invoke function) and equals sign syntax (--invoke=function)</p>\n</blockquote>\n<p>I believe this is mostly a mistaken deduction on your part. The <code>=</code> here shouldn't matter, but the position of <code>--invoke</code> does matter. If you find the opposite though please let us know, that's a bug!</p>\n<blockquote>\n<p>That function return values are only displayed with the equals sign syntax</p>\n</blockquote>\n<p>Like above I think this is a mistaken deduction where the position of <code>--invoke</code> matters, but the <code>=</code> does not. Passing <code>--invoke</code> after the wasm means it's an argument for the wasm itself, not Wasmtime.</p>\n<blockquote>\n<p>That this feature is experimental and may change in future versions</p>\n</blockquote>\n<p>Agreed! I do think we should document this.</p>\n<blockquote>\n<p>I noticed this while doing a course from Linux Foundation</p>\n</blockquote>\n<p>I alas can't access the link you pasted there, but one thing which may be happening is that Wasmtime 13.0.0 and prior (or some version around there) supported <code>--invoke</code> after the wasm module but it now no longer does. If the tutorial was written on the scale of years ago it may have been using this syntax.<br>\n</p>\n</blockquote>",
        "id": 518961304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747604668
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10792#issuecomment-2889236246\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10792\">issue #10792</a>:</p>\n<blockquote>\n<p>(I've also submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10793\">https://github.com/bytecodealliance/wasmtime/pull/10793</a> now to help clarify the documentation, but if you feel there are still improvements to be made please let us know!)</p>\n</blockquote>",
        "id": 518962583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747605938
    },
    {
        "content": "<p>koke1997 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10792#issuecomment-2890467621\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10792\">issue #10792</a>:</p>\n<blockquote>\n<p>Hi,<br>\nThank you very much for this explanation. It makes now sense to me how the CLI is accepting the arguments. <br>\nI think personally that this feature of testing exported functions via CLI is big gamechanger as it allows us to take modular approach in development. <br>\nThe PR also looks good. I paste here also an image from course so you can see why i did raise this ticket.</p>\n<p>Thanks again for the swift response! </p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/9d778f51-392f-4ac1-b4cc-d57d0e5432b6\">https://github.com/user-attachments/assets/9d778f51-392f-4ac1-b4cc-d57d0e5432b6</a>)</p>\n</blockquote>",
        "id": 519061612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747649840
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10792#issuecomment-2891009299\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10792\">issue #10792</a>:</p>\n<blockquote>\n<p>Yes if possible can you report a bug to that documentation? That's incorrect and <code>--invoke</code> needs to be before <code>add.wasm</code></p>\n</blockquote>",
        "id": 519108859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747660732
    },
    {
        "content": "<p>koke1997 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10792#issuecomment-2891878062\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10792\">issue #10792</a>:</p>\n<blockquote>\n<p>Yes, I already posted in forum and also raised a ticket for this for Linux Foundation. You might not have access to the JIRA ticket, so here is a screenshot.</p>\n<p><a href=\"https://jira.linuxfoundation.org/plugins/servlet/desk/portal/15/TCCS-141351\">https://jira.linuxfoundation.org/plugins/servlet/desk/portal/15/TCCS-141351</a></p>\n<p><a href=\"https://forum.linuxfoundation.org/discussion/868852/wasmtime-cli-not-displaying-function-return-values-by-default#latest\">https://forum.linuxfoundation.org/discussion/868852/wasmtime-cli-not-displaying-function-return-values-by-default#latest</a> - here is the thread.</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/37928fd4-9277-4d5b-a1b8-5a9d07ff8030\">https://github.com/user-attachments/assets/37928fd4-9277-4d5b-a1b8-5a9d07ff8030</a>)</p>\n</blockquote>",
        "id": 519186936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747678223
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10792\">issue #10792</a>:</p>\n<blockquote>\n<h2>Description</h2>\n<p>While working with Wasmtime's CLI, I discovered undocumented behavior differences between the two syntaxes for invoking WebAssembly functions:</p>\n<ul>\n<li><code>wasmtime add.wasm --invoke add 1 2</code> (space syntax) - executes the function but doesn't display its return value</li>\n<li><code>wasmtime --invoke=add add.wasm 1 2</code> (equals sign syntax) - executes the function AND displays its return value</li>\n</ul>\n<p>Both commands show warnings that this functionality is experimental, but the CLI documentation doesn't explain this syntax difference or mention that return value display is only enabled with the equals sign variant.</p>\n<h2>Example</h2>\n<p>Using a simple WebAssembly module with an <code>add</code> function that returns the sum of two integers:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$add</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"nv\">$lhs</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"nv\">$rhs</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n     <span class=\"p\">(</span><span class=\"nb\">i32.add</span>\n       <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$lhs</span><span class=\"p\">)</span>\n       <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$rhs</span><span class=\"p\">)</span>\n     <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"add\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$add</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>Compiled with <code>wat2wasm add.wat</code>, then:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># This command shows no return value</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>add.wasm<span class=\"w\"> </span>--invoke<span class=\"w\"> </span>add<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span>\n\n<span class=\"c1\"># This command shows '3' as the return value</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>--invoke<span class=\"o\">=</span>add<span class=\"w\"> </span>add.wasm<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span>\nwarning:<span class=\"w\"> </span>using<span class=\"w\"> </span><span class=\"sb\">`</span>--invoke<span class=\"sb\">`</span><span class=\"w\"> </span>with<span class=\"w\"> </span>a<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span>that<span class=\"w\"> </span>takes<span class=\"w\"> </span>arguments<span class=\"w\"> </span>is<span class=\"w\"> </span>experimental<span class=\"w\"> </span>and<span class=\"w\"> </span>may<span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>future\nwarning:<span class=\"w\"> </span>using<span class=\"w\"> </span><span class=\"sb\">`</span>--invoke<span class=\"sb\">`</span><span class=\"w\"> </span>with<span class=\"w\"> </span>a<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span>that<span class=\"w\"> </span>returns<span class=\"w\"> </span>values<span class=\"w\"> </span>is<span class=\"w\"> </span>experimental<span class=\"w\"> </span>and<span class=\"w\"> </span>may<span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>future\n<span class=\"m\">3</span>\n</code></pre></div>\n<h2>Suggested Documentation Improvement</h2>\n<p>I suggest updating the CLI documentation at <a href=\"https://docs.wasmtime.dev/cli-options.html\">https://docs.wasmtime.dev/cli-options.html</a> to explain:</p>\n<ol>\n<li>The difference between space syntax (<code>--invoke function</code>) and equals sign syntax (<code>--invoke=function</code>)</li>\n<li>That function return values are only displayed with the equals sign syntax</li>\n<li>That this feature is experimental and may change in future versions</li>\n</ol>\n<p>This would help new users understand the expected behavior and avoid confusion when trying to view function return values.</p>\n<p>I noticed this while doing a course from Linux Foundation , since resource mentions the first way of executing command without equal sign - <a href=\"https://trainingportal.linuxfoundation.org/learn/course/webassembly-components-from-cloud-to-edge-lfd134/webassembly-from-scratch/exploring-webassembly?page=7\">https://trainingportal.linuxfoundation.org/learn/course/webassembly-components-from-cloud-to-edge-lfd134/webassembly-from-scratch/exploring-webassembly?page=7</a></p>\n<h2>Additional Context</h2>\n<ul>\n<li>Wasmtime version: 32.0.0 (the current version I'm using)</li>\n<li>OS: Linux Ubuntu (but should be consistent across platforms)</li>\n</ul>\n</blockquote>",
        "id": 519915591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747945600
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10792#issuecomment-2902468398\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10792\">issue #10792</a>:</p>\n<blockquote>\n<p>I'm going to closet his as being mostly handled in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10793\">https://github.com/bytecodealliance/wasmtime/pull/10793</a>, but thanks again @koke1997 for raising this and if you think there'se more we can do please let us know!</p>\n</blockquote>",
        "id": 519915596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747945600
    }
]