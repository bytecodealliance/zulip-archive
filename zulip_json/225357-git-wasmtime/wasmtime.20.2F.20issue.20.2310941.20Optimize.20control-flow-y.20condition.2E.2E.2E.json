[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10941\">issue #10941</a>:</p>\n<blockquote>\n<p>Wasm does not have conditional trap instructions, just control flow and unconditional traps. CLIF does have conditional trap instructions, but we do not translate the control-flow-y Wasm equivalent into these single conditionally-trapping instructions. This is unfortunate because Cranelift's mid-end cannot currently turn control-flow-y conditional traps into single <code>trap[n]z</code> instructions either, but the single instructions allow the optimizer to do more and also ultimately get better codegen in the backend.</p>\n<p>I'm sure that conditional traps show up frequently in real Wasm code. They additionally show up frequently in the fused adapters we generate when linking components together.</p>\n<p>Might be worth identifying blocks that contain a single unconditional trap instruction and rewrite conditional branches to these blocks during egraph construction or something.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/10940\">https://github.com/bytecodealliance/wasmtime/pull/10940</a> introduced the following disas tests that highlight the problem:</p>\n<p><div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"c1\">;; This function body should ideally get compiled down into a single `trapz`</span>\n  <span class=\"c1\">;; CLIF instruction.</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"trapnz\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span>\n      <span class=\"nb\">unreachable</span>\n    <span class=\"k\">end</span>\n  <span class=\"p\">)</span>\n\n  <span class=\"c1\">;; And this one into a single `trapnz` instruction.</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"trapz\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.eqz</span>\n    <span class=\"k\">if</span>\n      <span class=\"nb\">unreachable</span>\n    <span class=\"k\">end</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">;; function u0:0(i64 vmctx, i64, i32) tail {</span>\n<span class=\"c1\">;;     gv0 = vmctx</span>\n<span class=\"c1\">;;     gv1 = load.i64 notrap aligned readonly gv0+8</span>\n<span class=\"c1\">;;     gv2 = load.i64 notrap aligned gv1+16</span>\n<span class=\"c1\">;;     stack_limit = gv2</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block0(v0: i64, v1: i64, v2: i32):</span>\n<span class=\"c1\">;; @002f                               brif v2, block2, block3</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block2:</span>\n<span class=\"c1\">;; @0031                               trap user11</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block3:</span>\n<span class=\"c1\">;; @0033                               jump block1</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block1:</span>\n<span class=\"c1\">;; @0033                               return</span>\n<span class=\"c1\">;; }</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;; function u0:1(i64 vmctx, i64, i32) tail {</span>\n<span class=\"c1\">;;     gv0 = vmctx</span>\n<span class=\"c1\">;;     gv1 = load.i64 notrap aligned readonly gv0+8</span>\n<span class=\"c1\">;;     gv2 = load.i64 notrap aligned gv1+16</span>\n<span class=\"c1\">;;     stack_limit = gv2</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block0(v0: i64, v1: i64, v2: i32):</span>\n<span class=\"c1\">;;                                     v5 = iconst.i32 0</span>\n<span class=\"c1\">;; @0038                               v3 = icmp eq v2, v5  ; v5 = 0</span>\n<span class=\"c1\">;; @0038                               v4 = uextend.i32 v3</span>\n<span class=\"c1\">;; @0039                               brif v4, block2, block3</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block2:</span>\n<span class=\"c1\">;; @003b                               trap user11</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block3:</span>\n<span class=\"c1\">;; @003d                               jump block1</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block1:</span>\n<span class=\"c1\">;; @003d                               return</span>\n<span class=\"c1\">;; }</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 522676272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749161451
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the cranelift<span aria-label=\"goal\" class=\"emoji emoji-1f945\" role=\"img\" title=\"goal\">:goal:</span>optimize-speed label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10941\">Issue #10941</a>.</p>",
        "id": 522676339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749161491
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the wasm-proposal:component-model label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10941\">Issue #10941</a>.</p>",
        "id": 522676342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749161492
    },
    {
        "content": "<p>fitzgen assigned fitzgen to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10941\">issue #10941</a>.</p>",
        "id": 522852376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749247820
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10941\">issue #10941</a>:</p>\n<blockquote>\n<p>Wasm does not have conditional trap instructions, just control flow and unconditional traps. CLIF does have conditional trap instructions, but we do not translate the control-flow-y Wasm equivalent into these single conditionally-trapping instructions. This is unfortunate because Cranelift's mid-end cannot currently turn control-flow-y conditional traps into single <code>trap[n]z</code> instructions either, but the single instructions allow the optimizer to do more and also ultimately get better codegen in the backend.</p>\n<p>I'm sure that conditional traps show up frequently in real Wasm code. They additionally show up frequently in the fused adapters we generate when linking components together.</p>\n<p>Might be worth identifying blocks that contain a single unconditional trap instruction and rewrite conditional branches to these blocks during egraph construction or something.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/10940\">https://github.com/bytecodealliance/wasmtime/pull/10940</a> introduced the following disas tests that highlight the problem:</p>\n<p><div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"c1\">;; This function body should ideally get compiled down into a single `trapz`</span>\n  <span class=\"c1\">;; CLIF instruction.</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"trapnz\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span>\n      <span class=\"nb\">unreachable</span>\n    <span class=\"k\">end</span>\n  <span class=\"p\">)</span>\n\n  <span class=\"c1\">;; And this one into a single `trapnz` instruction.</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"trapz\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.eqz</span>\n    <span class=\"k\">if</span>\n      <span class=\"nb\">unreachable</span>\n    <span class=\"k\">end</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">;; function u0:0(i64 vmctx, i64, i32) tail {</span>\n<span class=\"c1\">;;     gv0 = vmctx</span>\n<span class=\"c1\">;;     gv1 = load.i64 notrap aligned readonly gv0+8</span>\n<span class=\"c1\">;;     gv2 = load.i64 notrap aligned gv1+16</span>\n<span class=\"c1\">;;     stack_limit = gv2</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block0(v0: i64, v1: i64, v2: i32):</span>\n<span class=\"c1\">;; @002f                               brif v2, block2, block3</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block2:</span>\n<span class=\"c1\">;; @0031                               trap user11</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block3:</span>\n<span class=\"c1\">;; @0033                               jump block1</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block1:</span>\n<span class=\"c1\">;; @0033                               return</span>\n<span class=\"c1\">;; }</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;; function u0:1(i64 vmctx, i64, i32) tail {</span>\n<span class=\"c1\">;;     gv0 = vmctx</span>\n<span class=\"c1\">;;     gv1 = load.i64 notrap aligned readonly gv0+8</span>\n<span class=\"c1\">;;     gv2 = load.i64 notrap aligned gv1+16</span>\n<span class=\"c1\">;;     stack_limit = gv2</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block0(v0: i64, v1: i64, v2: i32):</span>\n<span class=\"c1\">;;                                     v5 = iconst.i32 0</span>\n<span class=\"c1\">;; @0038                               v3 = icmp eq v2, v5  ; v5 = 0</span>\n<span class=\"c1\">;; @0038                               v4 = uextend.i32 v3</span>\n<span class=\"c1\">;; @0039                               brif v4, block2, block3</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block2:</span>\n<span class=\"c1\">;; @003b                               trap user11</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block3:</span>\n<span class=\"c1\">;; @003d                               jump block1</span>\n<span class=\"c1\">;;</span>\n<span class=\"c1\">;;                                 block1:</span>\n<span class=\"c1\">;; @003d                               return</span>\n<span class=\"c1\">;; }</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 523163949,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749501447
    }
]