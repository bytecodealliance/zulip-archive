[
    {
        "content": "<p><strong>Milek7</strong> requested <a href=\"https://github.com/dicej\">dicej</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865\">PR #10865</a>.</p>",
        "id": 521158182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748547274
    },
    {
        "content": "<p>Milek7 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865\">PR #10865</a> from <code>Milek7:customcodememory-dso</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><code>Module::deserialize_raw</code> combined with <code>CustomCodeMemory</code> were introduced with aim of supporting <code>no_std</code> platforms. With small tweaks they can also be used for using Wasmtime on platforms that have full-blown virtual memory capabilities, but doesn't allow for directly mapping executable pages from user code instead limiting that capability for system loader. Adding features necessary for such platforms was previously attempted by #8245.</p>\n<p>There are currently two issues with using <code>Module::deserialize_raw</code> for using images either statically linked into embedder executable or dynamically loaded shared objects:</p>\n<ul>\n<li><code>CodeMemory::publish</code> will initially make entire image read-only, destroying executable permissions that cannot be restored by user code. This will happen even if <code>CustomCodeMemory</code> is provided.</li>\n<li><code>CodeMemory::publish</code> will attempt to unconditionally register unwind information. As these are already properly registered by the system loader this is superfluous at best, or could fail module loading if system decides to return error on attempt for double-registration.</li>\n</ul>\n<p>This commit solves these issues by:</p>\n<ul>\n<li>Moving responsibility for making image RO to <code>CustomCodeMemory</code> hook.</li>\n<li>Making <code>CustomCodeMemory</code> publishing hook return enum that tells what steps (only mapping, or mapping with registartion), using default implementation only for actions not reported by the hook.</li>\n<li>Additionally <code>CustomCodeMemory</code> hooks also receive pointers to the entire image, not only executable section. This allows the embedder to keep track of the images and unload them in case they were loaded as dynamic shared object.</li>\n</ul>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 521158183,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748547274
    },
    {
        "content": "<p><strong>Milek7</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865\">PR #10865</a>.</p>",
        "id": 521158185,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748547274
    },
    {
        "content": "<p>Milek7 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865\">PR #10865</a>.</p>",
        "id": 521158212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748547288
    },
    {
        "content": "<p>Milek7 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865\">PR #10865</a>:</p>\n<blockquote>\n<p><code>Module::deserialize_raw</code> and <code>CustomCodeMemory</code> was introduced with aim of supporting <code>no_std</code> platforms. With small tweaks they can also be used for using Wasmtime on platforms that have full-blown virtual memory capabilities, but doesn't allow for directly mapping executable pages from user code instead limiting that capability for system loader. Adding features necessary for such platforms was previously attempted by #8245.</p>\n<p>There are currently two issues with using <code>Module::deserialize_raw</code> for using images either statically linked into embedder executable or dynamically loaded shared objects:</p>\n<ul>\n<li><code>CodeMemory::publish</code> will initially make entire image read-only, destroying executable permissions that cannot be restored by user code. This will happen even if <code>CustomCodeMemory</code> is provided.</li>\n<li><code>CodeMemory::publish</code> will attempt to unconditionally register unwind information. As these are already properly registered by the system loader this is superfluous at best, or could fail module loading if system decides to return error on attempt for double-registration.</li>\n</ul>\n<p>This commit solves these issues by:</p>\n<ul>\n<li>Moving responsibility for making image RO to <code>CustomCodeMemory</code> hook.</li>\n<li>Making <code>CustomCodeMemory</code> publishing hook return enum that tells what steps (only mapping, or mapping with registration) were performed, using default implementation only for actions not reported by the hook.</li>\n<li>Additionally <code>CustomCodeMemory</code> hooks also receive pointers to the entire image, not only executable section. This allows the embedder to keep track of the images and unload them in case they were loaded as dynamic shared object.</li>\n</ul>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 521158806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748547549
    },
    {
        "content": "<p>Milek7 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865\">PR #10865</a>:</p>\n<blockquote>\n<p><code>Module::deserialize_raw</code> and <code>CustomCodeMemory</code> were introduced with aim of supporting <code>no_std</code> platforms. With small tweaks they can also be used for using Wasmtime on platforms that have full-blown virtual memory capabilities, but doesn't allow for directly mapping executable pages from user code instead limiting that capability for system loader. Adding features necessary for such platforms was previously attempted by #8245.</p>\n<p>There are currently two issues with using <code>Module::deserialize_raw</code> for using images either statically linked into embedder executable or dynamically loaded shared objects:</p>\n<ul>\n<li><code>CodeMemory::publish</code> will initially make entire image read-only, destroying executable permissions that cannot be restored by user code. This will happen even if <code>CustomCodeMemory</code> is provided.</li>\n<li><code>CodeMemory::publish</code> will attempt to unconditionally register unwind information. As these are already properly registered by the system loader this is superfluous at best, or could fail module loading if system decides to return error on attempt for double-registration.</li>\n</ul>\n<p>This commit solves these issues by:</p>\n<ul>\n<li>Moving responsibility for making image RO to <code>CustomCodeMemory</code> hook.</li>\n<li>Making <code>CustomCodeMemory</code> publishing hook return enum that tells what steps (only mapping, or mapping with registration) were performed, using default implementation only for actions not reported by the hook.</li>\n<li>Additionally <code>CustomCodeMemory</code> hooks also receive pointers to the entire image, not only executable section. This allows the embedder to keep track of the images and unload them in case they were loaded as dynamic shared object.</li>\n</ul>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 521159370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748547781
    },
    {
        "content": "<p>Milek7 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865\">PR #10865</a>.</p>",
        "id": 521160075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748548074
    },
    {
        "content": "<p>Milek7 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865#issuecomment-2920541333\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865\">PR #10865</a>:</p>\n<blockquote>\n<p>Okay, I got a little ahead of myself.</p>\n<p><code>make_readonly</code> won't be actually get called for modules created by <code>Module::deserialize_raw</code>. So first issue is not true.<br>\nHowever double-registration is still a concern.<br>\nProviding address of entire image to hooks is still useful for keeping track for unloading purposes (and maybe for no virtual memory target if they actually want to make that RO mapping).</p>\n<p>So I still think this make sense.</p>\n</blockquote>",
        "id": 521167450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748551446
    },
    {
        "content": "<p><strong>Milek7</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865\">PR #10865</a> as ready for review.</p>",
        "id": 521167461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748551450
    },
    {
        "content": "<p>Milek7 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865#issuecomment-2920541333\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865\">PR #10865</a>:</p>\n<blockquote>\n<p>Okay, I got a little ahead of myself.</p>\n<p><code>make_readonly</code> won't be actually get called for modules created by <code>Module::deserialize_raw</code>. So first issue is not true.<br>\nHowever double-registration is still a concern.<br>\nProviding address of entire image to hooks is still useful for keeping track for unloading purposes (and maybe for no virtual memory target if they actually want to make that RO mapping).</p>\n<p>So I still think this makes sense.</p>\n</blockquote>",
        "id": 521167506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748551482
    },
    {
        "content": "<p>Milek7 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865\">PR #10865</a>:</p>\n<blockquote>\n<p><code>Module::deserialize_raw</code> and <code>CustomCodeMemory</code> were introduced with aim of supporting <code>no_std</code> platforms. With small tweaks they can also be used for using Wasmtime on platforms that have full-blown virtual memory capabilities, but doesn't allow for directly mapping executable pages from user code instead limiting that capability for system loader. Adding features necessary for such platforms was previously attempted by #8245.</p>\n<p>There are currently two issues with using <code>Module::deserialize_raw</code> for using images either statically linked into embedder executable or dynamically loaded shared objects:</p>\n<ul>\n<li><del><code>CodeMemory::publish</code> will initially make entire image read-only, destroying executable permissions that cannot be restored by user code. This will happen even if <code>CustomCodeMemory</code> is provided.</del></li>\n<li><code>CodeMemory::publish</code> will attempt to unconditionally register unwind information. As these are already properly registered by the system loader this is superfluous at best, or could fail module loading if system decides to return error on attempt for double-registration.</li>\n</ul>\n<p>This commit solves these issues by:</p>\n<ul>\n<li>Moving responsibility for making image RO to <code>CustomCodeMemory</code> hook.</li>\n<li>Making <code>CustomCodeMemory</code> publishing hook return enum that tells what steps (only mapping, or mapping with registration) were performed, using default implementation only for actions not reported by the hook.</li>\n<li>Additionally <code>CustomCodeMemory</code> hooks also receive pointers to the entire image, not only executable section. This allows the embedder to keep track of the images and unload them in case they were loaded as dynamic shared object.</li>\n</ul>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 521167595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748551530
    },
    {
        "content": "<p>Milek7 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865#issuecomment-2920541333\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865\">PR #10865</a>:</p>\n<blockquote>\n<p>Okay, I got a little ahead of myself.</p>\n<p><code>make_readonly</code> don't actually get called for modules created by <code>Module::deserialize_raw</code>. So first issue is not true.<br>\nHowever double-registration is still a concern.<br>\nProviding address of entire image to hooks is still useful for keeping track for unloading purposes (and maybe for no virtual memory target if they actually want to make that RO mapping).</p>\n<p>So I still think this makes sense.</p>\n</blockquote>",
        "id": 521167647,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748551560
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865#issuecomment-2924019281\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865\">PR #10865</a>:</p>\n<blockquote>\n<p>This seems reasonable to me to support, but what do you think of modeling this a bit differently? This is a pretty sensitive piece of the codebase which we want to ensure doesn't accidentally regress and having a lot of intertwined \"if this else that\" style logic can be relatively confusing to follow. Do you think it would be possible to internally model this as \"assume there's always a custom memory publisher\"? That way adding more hooks would mean adding more trait methods, and the \"driver\" would still be relatively straightforward of \"do this, then that, then that\".</p>\n<p>A custom trait could then override any one particular step to a noop and that wouldn't involve a need for custom enums/etc which are pretty tightly bound to the exact structure of what we have today as well.</p>\n</blockquote>",
        "id": 521397991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748658290
    },
    {
        "content": "<p>Milek7 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865#issuecomment-2930848246\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865\">PR #10865</a>:</p>\n<blockquote>\n<p>Do you think about trait methods that would return bool indicating whether default implementation should be called, or calling only trait methods with default implementation provided as default CustomCodeMemory? In second case should MmapVec become part of public API?</p>\n</blockquote>",
        "id": 521753126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748872409
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865#issuecomment-2940350976\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10865\">PR #10865</a>:</p>\n<blockquote>\n<p>Ideally we'd model everything with the trait to allow embedders to customize all the hooks necessary, but that's also not easy as there's internal types, like <code>MmapVec</code>, which we don't want to expose. This came up in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10740\">https://github.com/bytecodealliance/wasmtime/issues/10740</a> where we have an internal trait with private types and a public trait with less functionality and that became a problem as well. Unfortunately I'm not sure how best to thread this needle...</p>\n</blockquote>",
        "id": 522379846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749048726
    }
]