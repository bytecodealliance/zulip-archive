[
    {
        "content": "<p><strong>MarinPostma</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066\">PR #10066</a>.</p>",
        "id": 495128572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737487398
    },
    {
        "content": "<p><strong>MarinPostma</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066\">PR #10066</a>.</p>",
        "id": 495128573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737487398
    },
    {
        "content": "<p>MarinPostma opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066\">PR #10066</a> from <code>MarinPostma:movzv-unsigned-extend</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Followup to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10053\">https://github.com/bytecodealliance/wasmtime/pull/10053</a></p>\n<p>This PR has two commit:</p>\n<p>1) The first commit makes <code>mov*</code> instruct receive the adequate <code>Extend</code> operation. And it makes extend conversion  operation harder to misuse.<br>\n2) The second commit it <strong>optional</strong>. This is an alternative to <code>Signed/UnsignedExtend</code>, that merges the two into a <code>Extend&lt;T&gt;</code>, and factorizes common behaviour, avoiding repetition. The <code>T</code> is either <code>Signed</code> or <code>Zero</code>, with precautions in the design so that it's hard to misuse.<br>\n</p>\n</blockquote>",
        "id": 495128574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737487398
    },
    {
        "content": "<p>MarinPostma edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066\">PR #10066</a>:</p>\n<blockquote>\n<p>Followup to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10053\">https://github.com/bytecodealliance/wasmtime/pull/10053</a></p>\n<p>This PR has two commit:</p>\n<p>1) The first commit makes <code>mov*</code> instruct receive the adequate <code>Extend</code> operation. And it makes extend conversion  operation harder to misuse.<br>\n2) The second commit is <strong>optional</strong>. This is an alternative to <code>Signed/UnsignedExtend</code>, that merges the two into a <code>Extend&lt;T&gt;</code>, and factorizes common behaviour, avoiding repetition. The <code>T</code> is either <code>Signed</code> or <code>Zero</code>, with precautions in the design so that it's hard to misuse.<br>\n</p>\n</blockquote>",
        "id": 495129356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737487729
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#pullrequestreview-2565581348\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for this. Left two minor comments inline. </p>\n</blockquote>",
        "id": 495135038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737489788
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#discussion_r1924296384\">PR review comment</a>:</p>\n<blockquote>\n<p>To avoid an unused member, could you use <code>PhantomData</code> to hold the type instead? <a href=\"https://doc.rust-lang.org/std/marker/struct.PhantomData.html\">https://doc.rust-lang.org/std/marker/struct.PhantomData.html</a></p>\n</blockquote>",
        "id": 495135040,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737489788
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#discussion_r1924299032\">PR review comment</a>:</p>\n<blockquote>\n<p>Small naming convention/suggestion: we usually use <code>src</code>, <code>dst</code> for explicit moves, could we keep <code>from_bits</code> and <code>to_bits</code>? Although given that this now returns <code>OperandSize</code> it could maybe be <code>from_size</code> and <code>to_size</code>?</p>\n</blockquote>",
        "id": 495135041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737489788
    },
    {
        "content": "<p>MarinPostma submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#pullrequestreview-2565637819\">PR review</a>.</p>",
        "id": 495139506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737491610
    },
    {
        "content": "<p>MarinPostma created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#discussion_r1924330295\">PR review comment</a>:</p>\n<blockquote>\n<p>do you mean for every variant? like <code>I64ExtendI8(PhantomData&lt;T&gt;)</code>? I think that would make construction pretty cumbersome, no?<br>\nIf you mean <code>__Kind(PhamtomData&lt;T&gt;)</code>, then that defeats the purpose of this variant being unconstructible, since you can't construct <code>Signed</code> and <code>Zero</code></p>\n</blockquote>",
        "id": 495139507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737491610
    },
    {
        "content": "<p>MarinPostma created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#discussion_r1924332006\">PR review comment</a>:</p>\n<blockquote>\n<p>No problem. It's just that it kinda overlaps with usual rust naming convention for <code>from_</code> and <code>to_</code>, which I found a bit confusing. I'll make the change now.</p>\n</blockquote>",
        "id": 495139748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737491701
    },
    {
        "content": "<p>MarinPostma submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#pullrequestreview-2565640591\">PR review</a>.</p>",
        "id": 495139749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737491701
    },
    {
        "content": "<p>MarinPostma updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066\">PR #10066</a>.</p>",
        "id": 495140560,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737492025
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#pullrequestreview-2565681180\">PR review</a>.</p>",
        "id": 495143424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737493166
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#discussion_r1924356498\">PR review comment</a>:</p>\n<blockquote>\n<p>I meant more around the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">ExtendBits</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"sd\">/// 8 to 32 bit extend.</span>\n<span class=\"w\">    </span><span class=\"n\">I32Extend8</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"sd\">/// 16 to 32 bit extend.</span>\n<span class=\"w\">    </span><span class=\"n\">I32Extend16</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"sd\">/// 8 to 64 bit extend.</span>\n<span class=\"w\">    </span><span class=\"n\">I64Extend8</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"sd\">/// 16 to 64 bit extend.</span>\n<span class=\"w\">    </span><span class=\"n\">I64Extend16</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"sd\">/// 32 to 64 bit extend.</span>\n<span class=\"w\">    </span><span class=\"n\">I64Extend32</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nb\">Extend</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">bits</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ExtendBits</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">marker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Which is the kind of job that <code>PhantomData</code> is for. </p>\n<p>That way you can avoid the unused enum member. In your approach <code>Signed</code> and <code>Zero</code> are mostly used as type flags to ensure that the extension is associated correctly, but even though your comment states that the <code>__Kind(T)</code> variant cannot be constructed, from a practical perspective, you could do <code>Extend::__Kind(Signed)</code> I believe. </p>\n</blockquote>",
        "id": 495143425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737493166
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#pullrequestreview-2565682352\">PR review</a>.</p>",
        "id": 495143567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737493208
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#discussion_r1924357206\">PR review comment</a>:</p>\n<blockquote>\n<p>The general disadvantage that I see is that this approach adds a bit more complexity to the implementation. </p>\n</blockquote>",
        "id": 495143570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737493208
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#pullrequestreview-2565693075\">PR review</a>.</p>",
        "id": 495144587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737493601
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#discussion_r1924363716\">PR review comment</a>:</p>\n<blockquote>\n<p>But we can always iterate on this after landing this change, I think regardless of the unused member, extends are in a better place now. </p>\n</blockquote>",
        "id": 495144589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737493602
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#pullrequestreview-2565693577\">PR review</a>.</p>",
        "id": 495144630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737493621
    },
    {
        "content": "<p>MarinPostma submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#pullrequestreview-2565702602\">PR review</a>.</p>",
        "id": 495145455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737493953
    },
    {
        "content": "<p>MarinPostma created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#discussion_r1924369636\">PR review comment</a>:</p>\n<blockquote>\n<p>| from a practical perspective, you could do Extend::__Kind(Signed) I believe.</p>\n<p>that's in fact not possible :) You would need to exhibit a variant, but there are none, c.f: <a href=\"https://doc.rust-lang.org/reference/items/enumerations.html#zero-variant-enums\">https://doc.rust-lang.org/reference/items/enumerations.html#zero-variant-enums</a></p>\n</blockquote>",
        "id": 495145456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737493953
    },
    {
        "content": "<p>MarinPostma submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#pullrequestreview-2565707368\">PR review</a>.</p>",
        "id": 495145856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737494136
    },
    {
        "content": "<p>MarinPostma created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#discussion_r1924372426\">PR review comment</a>:</p>\n<blockquote>\n<p>I think your proposal could work nicely too, if we implemented <code>Deref&lt;Target = ExtendBits&gt;</code> for <code>Extend&lt;T: ExtendType&gt;</code></p>\n</blockquote>",
        "id": 495145860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737494136
    },
    {
        "content": "<p>MarinPostma submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#pullrequestreview-2565709025\">PR review</a>.</p>",
        "id": 495145990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737494198
    },
    {
        "content": "<p>MarinPostma created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#discussion_r1924373478\">PR review comment</a>:</p>\n<blockquote>\n<p>we'd need to add contructors to make instanciation simpler, though, which may hurt readability</p>\n</blockquote>",
        "id": 495145991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737494198
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#pullrequestreview-2565715627\">PR review</a>.</p>",
        "id": 495146553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737494444
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066#discussion_r1924377582\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh I see, I overlooked, I read this as <code>struct</code> not <code>enum</code> (for <code>Signed</code> and <code>Zero</code>), but this makes sense. Thanks for clarifying. </p>\n<blockquote>\n<p>we'd need to add contructors to make instanciation simpler, though, which may hurt readability</p>\n</blockquote>\n<p>Yeah, I think the current approach is simple enough, if there's a strong reason to change it in the future then we can. For now I'd suggest we keep it as is. </p>\n</blockquote>",
        "id": 495146555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737494444
    },
    {
        "content": "<p>saulecabrera merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10066\">PR #10066</a>.</p>",
        "id": 495149539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737495688
    }
]