[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a> from <code>fitzgen:wasmtime-inlining</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit plumbs together two pieces of recently-added infrastructure:</p>\n<ol>\n<li>function inlining in Cranelift, and</li>\n<li>the parallel bottom-up inlining scheduler in Wasmtime.</li>\n</ol>\n<p>Sprinkle some very simple inlining heuristics on top, and this gives us function<br>\ninlining in Wasm compilation.</p>\n<p>The default Wasmtime configuration does not enable inlining, and when we do<br>\nenable it, we only enable it for cross-component calls by default (since<br>\npresumably the toolchain that produced a particular core Wasm module, like LLVM,<br>\nalready performed any inlining that was beneficial within that module, but that<br>\ntoolchain couldn't know how that Wasm module would be getting linked together<br>\nwith other modules via component composition, and so it could not have done any<br>\ncross-component inlining). For what it is worth, there is a config knob to<br>\nenable intra-module function inlining, but this is primarily for use by our<br>\nfuzzers, so that they can easily excercise and explore this new inlining<br>\nfunctionality.</p>\n<p>All this plumbing required some changes to the <code>wasmtime_environ::Compiler</code><br>\ntrait, since Winch cannot do inlining but Cranelift can. This is mostly<br>\nencapsulated in the new <code>wasmtime_environ::InliningCompiler</code> trait, for the most<br>\npart. Additionally, we take care not to construct the call graph, or any other<br>\ndata structures required only by the inliner and not regular compilation, both<br>\nwhen using Winch and when using Cranelift with inlining disabled.</p>\n<p>Finally, we add a <code>disas</code> test to verify that we successfully inline a series of<br>\ncalls from a function in one component, to a cross-component adapter function,<br>\nto a function in another component. Most test coverage is expected to come from<br>\nour fuzzing, however.</p>\n<p>Depends on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11282\">https://github.com/bytecodealliance/wasmtime/pull/11282</a></p>\n</blockquote>",
        "id": 529535020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752879496
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>.</p>",
        "id": 529535024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752879497
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>.</p>",
        "id": 529535025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752879497
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>.</p>",
        "id": 529535026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752879497
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>.</p>",
        "id": 529535027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752879498
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>.</p>",
        "id": 529535352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752879800
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>.</p>",
        "id": 529535564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752879978
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>.</p>",
        "id": 529536617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752881025
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#issuecomment-3091405332\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen, @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"fuzzing\", \"wasmtime:api\", \"wasmtime:config\", \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 529545040,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752891903
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#issuecomment-3091455400\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 529546986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752894830
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>.</p>",
        "id": 529947096,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753123023
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#discussion_r2223935045\">PR review comment</a>:</p>\n<blockquote>\n<p>Should this extend into a set instead of a vec?</p>\n</blockquote>",
        "id": 530234193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753223861
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#discussion_r2223932771\">PR review comment</a>:</p>\n<blockquote>\n<p>To bikeshed a bit, what about <code>-C</code> instead and dropping the <code>compiler_*</code> prefix?</p>\n</blockquote>",
        "id": 530234194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753223861
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#discussion_r2223947489\">PR review comment</a>:</p>\n<blockquote>\n<p>Given the quantity of parameters here and how this is probably going to get tuned over time, how about packaging this all up in <code>struct InlineDecisionParams { .. }</code> or something like that? That way there's named keys and no need to worry about getting things in the wrong order by accident.</p>\n</blockquote>",
        "id": 530234195,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753223861
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#discussion_r2223933153\">PR review comment</a>:</p>\n<blockquote>\n<p>How come these are doc(hidden)?</p>\n</blockquote>",
        "id": 530234196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753223861
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#pullrequestreview-3045031116\">PR review</a>.</p>",
        "id": 530234197,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753223861
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#discussion_r2223952318\">PR review comment</a>:</p>\n<blockquote>\n<p>These can probably all be ignored, right? Regardless of what the host and artifact have configured the artifact should still work the same way? (e.g. inlining doesn't affect abi)</p>\n</blockquote>",
        "id": 530234198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753223861
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#discussion_r2223950957\">PR review comment</a>:</p>\n<blockquote>\n<p>An alternative to this perhaps, the <code>LinkOptions::padding_between_functions</code> field is a \"compiler setting\" but layered on top of Cranelift sort of. These sorts of options might make sense there too? That might require pushing more deduction of whether to inline into the <code>InliningCompiler</code> trait but that seems reasonable. That way we get <code>-Ccranelift-...</code> options for everything and don't have to have custom <code>Config</code> methods.</p>\n</blockquote>",
        "id": 530234199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753223861
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#pullrequestreview-3064086421\">PR review</a>.</p>",
        "id": 531429391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753726127
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#discussion_r2237485533\">PR review comment</a>:</p>\n<blockquote>\n<p>That would require sorting just to be safe w.r.t. non-determinism and also propagating a dependency on hashbrown up to wasmtime-environ. Neither is really a problem, but they are both a little annoying. Pair this with the fact that the deduplication shouldn't matter, since we are creating call-graph edges based on the imported funcs arena and not based on call instructions, and we deduplicate the former during Wasm-to-CLIF construction, I don't think it is worth switching this from a vec to a set.</p>\n</blockquote>",
        "id": 531429392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753726127
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#pullrequestreview-3064103393\">PR review</a>.</p>",
        "id": 531430290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753726454
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#discussion_r2237496301\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, this is true but I figured the safest, most conservative thing to do here was to require them to be identical, so that's what I did out of an abundance of caution. If you feel strongly, I can remove these checks and ignore these options.</p>\n</blockquote>",
        "id": 531430293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753726454
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>.</p>",
        "id": 531430786,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753726644
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#pullrequestreview-3064404827\">PR review</a>.</p>",
        "id": 531445919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753731924
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#discussion_r2237708081\">PR review comment</a>:</p>\n<blockquote>\n<p>I think <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1155d6dfbfe859cad85cfe0d5700d4acefd04745/crates/environ/src/prelude.rs#L28\"><code>IndexSet</code> in wasmtime-environ</a> would solve that? Basically I'm worried about big-O factors here of making a very large list of effectively all callsites.</p>\n</blockquote>",
        "id": 531445920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753731925
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#discussion_r2237714581\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Basically I'm worried about big-O factors here of making a very large list of effectively all callsites.</p>\n</blockquote>\n<p>We already dedupe imported functions when building the CLIF so we don't need to worry about the big-O factors here. But it would be more future proof, I suppose.</p>\n</blockquote>",
        "id": 531449553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753732082
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#pullrequestreview-3064413909\">PR review</a>.</p>",
        "id": 531449554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753732082
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>.</p>",
        "id": 531457259,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753735101
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#issuecomment-3129706473\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>:</p>\n<blockquote>\n<p>@alexcrichton okay, this should be ready for a second look</p>\n</blockquote>",
        "id": 531457327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753735126
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#pullrequestreview-3064600932\">PR review</a>.</p>",
        "id": 531461492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753736513
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#discussion_r2237850045\">PR review comment</a>:</p>\n<blockquote>\n<p>I think these can be removed now?</p>\n</blockquote>",
        "id": 531461494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753736513
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>.</p>",
        "id": 531463122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753737090
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#pullrequestreview-3064631826\">PR review</a>.</p>",
        "id": 531463167,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753737105
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283#discussion_r2237873821\">PR review comment</a>:</p>\n<blockquote>\n<p>Good eye, thanks</p>\n</blockquote>",
        "id": 531463169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753737105
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>.</p>",
        "id": 531463182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753737112
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>.</p>",
        "id": 531471988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753741025
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>.</p>",
        "id": 531472016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753741034
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11283\">PR #11283</a>.</p>",
        "id": 531632397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753801159
    }
]