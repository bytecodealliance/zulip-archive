[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10922\">issue #10922</a>:</p>\n<blockquote>\n<p>We discussed this at today's Cranelift meeting but I wanted to write up my thoughts in an issue. @cfallin brought up that <code>Location::xmm{1,2,3}</code> are a bit odd in that they are all the same thing conceptually just different names of the same thing. I brought up that this is in contracts to <code>Location::{eax, edx}</code> for example which are two names for two different things, and this clashes because <code>xmm{1,2,3}</code> are both valid physical register names.</p>\n<p>An alternative I think migth be possible is something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">rust_field_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">kind</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">LocationKind</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">LocationKind</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// ... everything we have today in `Location` minus r32a, r32b, xmm1/2/3 (collapsed to \"xmm\")</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">r32a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Location</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">rust_field_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"r32a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">LocationKind</span><span class=\"p\">::</span><span class=\"n\">r32</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Location</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">rust_field_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"xmm1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">LocationKind</span><span class=\"p\">::</span><span class=\"n\">xmm</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>That way we wouldn't actually need to change anything (<code>r32a</code> would still work as a location) and we could perhaps refactor how fixed physical registers work to be all-caps ro some sort of similar convention to distinguish fixed register usages from non-fixed-register-usages (e.g. xmm1 vs XMM0)</p>\n<p>cc @abrown </p>\n</blockquote>",
        "id": 522412196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749057528
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the cranelift:area:x64 label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10922\">Issue #10922</a>.</p>",
        "id": 522412197,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749057528
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10922#issuecomment-2940828582\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10922\">issue #10922</a>:</p>\n<blockquote>\n<p>Yes, I think this all makes sense, but now I'm pondering the categorical question that @cfallin posed: should we treat the fixed locations (e.g., <code>eax</code>) differently than the generic ones (e.g., <code>r32</code>) &mdash; should those continue live together in the same <code>LocationKind</code> bucket? I guess so if we are only separating out the \"need a new operand name\" locations...</p>\n<p>By the way, the <code>&amp;'static str</code> would be used for more that Rust so we may just want to call it <code>name</code>?</p>\n</blockquote>",
        "id": 522413640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749057987
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10922#issuecomment-2940853137\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10922\">issue #10922</a>:</p>\n<blockquote>\n<blockquote>\n<p>should we treat the fixed locations (e.g., eax) differently than the generic ones (e.g., r32)</p>\n</blockquote>\n<p>Personally I think this makes sense still: fixed location is a property of the place the operand is stored, not its role for the instruction. So <code>xmm1</code> vs. <code>xmm2</code> both refer to the same pool of XMM registers but are encoding how the instruction uses them; while <code>r32</code> vs <code>eax</code> refer to different register locations. Or to go by concrete code differences: <code>r32</code> vs <code>eax</code> changes the regalloc constraints, while <code>xmm1</code> vs <code>xmm2</code> does not.</p>\n</blockquote>",
        "id": 522415773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749058595
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10922#issuecomment-2940861800\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10922\">issue #10922</a>:</p>\n<blockquote>\n<blockquote>\n<p>By the way, the &amp;'static str would be used for more that Rust so we may just want to call it name?</p>\n</blockquote>\n<p>Oh I think we'd definitely want to bikeshed the above and consider some <code>From</code>/<code>Into</code> impls to cut down on verbosity for sure, I mostly just wanted to make it clear that the name there is purely a construct for the generated Rust code</p>\n</blockquote>",
        "id": 522416402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749058811
    }
]