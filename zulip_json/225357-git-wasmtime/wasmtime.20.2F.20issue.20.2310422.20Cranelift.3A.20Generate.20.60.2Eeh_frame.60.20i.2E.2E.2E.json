[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10422\">issue #10422</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10421\">https://github.com/bytecodealliance/wasmtime/issues/10421</a>, I noticed that we do not emit unwind info for function epilogues:</p>\n<blockquote>\n<p>Here is the Wasm function f(x) = x + 1 compiled by Wasmtime and Cranelift:</p>\n<p><code>asm\n0000000000000000 &lt;wasm[0]::function[0]&gt;:\n       0: 55                            pushq   %rbp\n       1: 48 89 e5                      movq    %rsp, %rbp\n       4: 8d 42 01                      leal    0x1(%rdx), %eax\n       7: 48 89 ec                      movq    %rbp, %rsp\n       a: 5d                            popq    %rbp\n       b: c3                            retq\n</code></p>\n<p>Here is the FDE that covers that function (lightly edited output of dwarfdump --eh-frame):</p>\n<p>```asm<br>\nFDE cie=00000000 pc=fffffffffffff000...fffffffffffff00c<br>\n  Format:       DWARF32<br>\n  DW_CFA_advance_loc: 1<br>\n  DW_CFA_def_cfa_offset: +16<br>\n  DW_CFA_offset: RBP -16<br>\n  DW_CFA_advance_loc: 3<br>\n  DW_CFA_def_cfa_register: RBP</p>\n<p>0xfffffffffffff000: CFA=RSP+8: RIP=[CFA-8]<br>\n  0xfffffffffffff001: CFA=RSP+16: RBP=[CFA-16], RIP=[CFA-8]<br>\n  0xfffffffffffff004: CFA=RBP+16: RBP=[CFA-16], RIP=[CFA-8]<br>\n```</p>\n<p>...</p>\n<p>(Aside 1: we don't properly encode the CFA for the epilogue, but probably should for completeness. Will file a separate issue about this.)</p>\n</blockquote>\n</blockquote>",
        "id": 506802859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742409564
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10422\">Issue #10422</a>.</p>",
        "id": 506802899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742409579
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the cranelift<span aria-label=\"goal\" class=\"emoji emoji-1f945\" role=\"img\" title=\"goal\">:goal:</span>native-ABI label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10422\">Issue #10422</a>.</p>",
        "id": 506802901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742409579
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the cranelift:area:debug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10422\">Issue #10422</a>.</p>",
        "id": 506802902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742409579
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10422\">issue #10422</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10421\">https://github.com/bytecodealliance/wasmtime/issues/10421</a>, I noticed that we do not emit unwind info for function epilogues:</p>\n<blockquote>\n<p>Here is the Wasm function <code>f(x) = x + 1</code> compiled by Wasmtime and Cranelift:</p>\n<p><code>asm\n0000000000000000 &lt;wasm[0]::function[0]&gt;:\n       0: 55                            pushq   %rbp\n       1: 48 89 e5                      movq    %rsp, %rbp\n       4: 8d 42 01                      leal    0x1(%rdx), %eax\n       7: 48 89 ec                      movq    %rbp, %rsp\n       a: 5d                            popq    %rbp\n       b: c3                            retq\n</code></p>\n<p>Here is the FDE that covers that function (lightly edited output of dwarfdump --eh-frame):</p>\n<p>```asm<br>\nFDE cie=00000000 pc=fffffffffffff000...fffffffffffff00c<br>\n  Format:       DWARF32<br>\n  DW_CFA_advance_loc: 1<br>\n  DW_CFA_def_cfa_offset: +16<br>\n  DW_CFA_offset: RBP -16<br>\n  DW_CFA_advance_loc: 3<br>\n  DW_CFA_def_cfa_register: RBP</p>\n<p>0xfffffffffffff000: CFA=RSP+8: RIP=[CFA-8]<br>\n  0xfffffffffffff001: CFA=RSP+16: RBP=[CFA-16], RIP=[CFA-8]<br>\n  0xfffffffffffff004: CFA=RBP+16: RBP=[CFA-16], RIP=[CFA-8]<br>\n```</p>\n<p>...</p>\n<p>(Aside 1: we don't properly encode the CFA for the epilogue, but probably should for completeness. Will file a separate issue about this.)</p>\n</blockquote>\n</blockquote>",
        "id": 506802943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742409597
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10422#issuecomment-2737680125\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10422\">issue #10422</a>:</p>\n<blockquote>\n<p>That is only necessary if you want to do async stack unwind, right? LLVM doesn't support that at all and GCC requires you to explicitly enable support for it.</p>\n</blockquote>",
        "id": 506803650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742409802
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10422#issuecomment-2737682607\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10422\">issue #10422</a>:</p>\n<blockquote>\n<p>IIRC, at the time we built unwind support, the justification for this is that we didn't expect an exception/trap to ever occur in an epilogue and knew we would not get async unwinds, yeah. The other situation where this matters is when debugging and stepping by instruction through the epilogue; one will have a few states where the frame is nonsensical.</p>\n<p>In any case this seems pretty easy to fix if it becomes important or if someone has the time to put into it...</p>\n</blockquote>",
        "id": 506803970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742409878
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10422#issuecomment-2737688427\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10422\">issue #10422</a>:</p>\n<blockquote>\n<p>Right, this would be useful for external profilers, and maybe external debuggers, and that's about it.</p>\n<p>Figured it was worth getting an issue on file though.</p>\n</blockquote>",
        "id": 506804404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742410029
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10422#issuecomment-2737692973\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10422\">issue #10422</a>:</p>\n<blockquote>\n<p>But if we are in the mode of \"only generate unwind info for common locations\" then we should probably skip emitting unwind info for function prologues after we make the multiple-FDEs-per-function change described in #10421.</p>\n</blockquote>",
        "id": 506804706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742410142
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10422#issuecomment-2737803016\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10422\">issue #10422</a>:</p>\n<blockquote>\n<blockquote>\n<p>But if we are in the mode of \"only generate unwind info for common locations\" then we should probably skip emitting unwind info for function prologues after we make the multiple-FDEs-per-function change described in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10421\">https://github.com/bytecodealliance/wasmtime/issues/10421</a>.</p>\n</blockquote>\n<p>I think that case is (or was) actually load-bearing in a way epilogues aren't right now: stack-limit checks come before the prologue and can cause a trap, and when we still did DWARF-based backtraces, we needed to be able to parse the stack in that state. Maybe still important if one wants to pause a debugger in the runtime when a stack limit check hits and look at the stack.</p>\n</blockquote>",
        "id": 506811799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742412460
    }
]