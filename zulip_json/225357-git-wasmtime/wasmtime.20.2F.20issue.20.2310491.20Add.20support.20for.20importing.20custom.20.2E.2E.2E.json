[
    {
        "content": "<p>PPakalns opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491\">issue #10491</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Support adding SharedMemory defines to ?Linker? for use in components in Component Model.</p>\n<h4>Benefit</h4>\n<p>Wasm on web supports threaded execution. Wasmtime supports threaded execution. WIT (Component model) simplifies host - guest interface definition a lot.</p>\n<p>It would be very useful to add some kind of (experimental) support for threaded execution in Component model. Threaded execution requires SharedMemory.</p>\n<h4>Use case</h4>\n<p>This would allow to execute Wasm component in multi-threaded program. For example in multi threaded game engines the same Wasm component can be called from multiple threads to process/generate data.</p>\n<p>Related discussion and collection of blog posts:<br>\n<a href=\"#narrow/channel/206238-general/topic/Calling.20Wasm.20logic.20from.20multiple.20threads.20with.20shared.20memory\">#general &gt; Calling Wasm logic from multiple threads with shared memory</a></p>\n<h4>Implementation</h4>\n<p>Allow to define shared memory imports in wasmtime::component::Linker?</p>\n<p>Component linker defines:<br>\n<a href=\"https://docs.wasmtime.dev/api/src/wasmtime/runtime/component/linker.rs.html#103\">https://docs.wasmtime.dev/api/src/wasmtime/runtime/component/linker.rs.html#103</a></p>\n<p>Wasmtime main linker defines:<br>\n<a href=\"https://docs.wasmtime.dev/api/src/wasmtime/runtime/linker.rs.html#119\">https://docs.wasmtime.dev/api/src/wasmtime/runtime/linker.rs.html#119</a></p>\n<p>Maybe this can be added as experimental feature under feature flag.</p>\n<h4>Alternatives</h4>\n<p>Avoid using WIT and try to reimplement the same functionality using wasmtime without Component Model.</p>\n</blockquote>",
        "id": 509037115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743348467
    },
    {
        "content": "<p>PPakalns edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491\">issue #10491</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Support SharedMemory for use in component in Component Model (WIT).</p>\n<h4>Benefit</h4>\n<p>Wasm on web supports threaded execution. Wasmtime supports threaded execution. WIT (Component model) simplifies host - guest interface definition a lot.</p>\n<p>It would be very useful to add some kind of (experimental) support for threaded execution in Component model. Threaded execution requires SharedMemory.</p>\n<h4>Use case</h4>\n<p>This would allow to execute Wasm component in multi-threaded program. For example in multi threaded game engines the same Wasm component can be called from multiple threads to process/generate data.</p>\n<p>Related discussion and collection of blog posts:<br>\n<a href=\"#narrow/channel/206238-general/topic/Calling.20Wasm.20logic.20from.20multiple.20threads.20with.20shared.20memory\">#general &gt; Calling Wasm logic from multiple threads with shared memory</a></p>\n<h4>Implementation</h4>\n<p>Allow to define shared memory imports in wasmtime::component::Linker?</p>\n<p>Component linker defines:<br>\n<a href=\"https://docs.wasmtime.dev/api/src/wasmtime/runtime/component/linker.rs.html#103\">https://docs.wasmtime.dev/api/src/wasmtime/runtime/component/linker.rs.html#103</a></p>\n<p>Wasmtime main linker defines:<br>\n<a href=\"https://docs.wasmtime.dev/api/src/wasmtime/runtime/linker.rs.html#119\">https://docs.wasmtime.dev/api/src/wasmtime/runtime/linker.rs.html#119</a></p>\n<p>Maybe this can be added as experimental feature under feature flag.</p>\n<h4>Alternatives</h4>\n<p>Avoid using WIT and try to reimplement the same functionality using wasmtime without Component Model.</p>\n</blockquote>",
        "id": 509037262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743348525
    },
    {
        "content": "<p>PPakalns <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491#issuecomment-2764618346\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491\">issue #10491</a>:</p>\n<blockquote>\n<p>Sadly I don't know in detail how Component model is implemented. </p>\n<p>Would like to call wasm component from multiple threads. And with WIT (Component model) Wasm is very easy to integrate in projects.  </p>\n<p>I hope that there aren't major problems of using Shared Memory inside Wasm Instance in Component model context.</p>\n<p>Thank you for this great project, looking forward to how wasmtime will improve in future.</p>\n</blockquote>",
        "id": 509038764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743349158
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491#issuecomment-2764623826\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491\">issue #10491</a>:</p>\n<blockquote>\n<p>Threading support for the component model will use the <a href=\"https://github.com/WebAssembly/shared-everything-threads/blob/main/proposals/shared-everything-threads/Overview.md\">shared-everything threads</a> proposal, which Wasmtime doesn't support yet. As opposed to the instance-per-thread pattern as commonly used in the browser that requires importing shared memories.</p>\n</blockquote>",
        "id": 509041026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743350112
    },
    {
        "content": "<p>PPakalns <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491#issuecomment-2764656603\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491\">issue #10491</a>:</p>\n<blockquote>\n<p>Related issue: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9466\">https://github.com/bytecodealliance/wasmtime/issues/9466</a></p>\n</blockquote>",
        "id": 509048198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743355416
    },
    {
        "content": "<p>PPakalns edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491#issuecomment-2764656603\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491\">issue #10491</a>:</p>\n<blockquote>\n<p>Related shared-everything-threads issue: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9466\">https://github.com/bytecodealliance/wasmtime/issues/9466</a></p>\n</blockquote>",
        "id": 509048208,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743355430
    },
    {
        "content": "<p>PPakalns <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491#issuecomment-2765859002\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491\">issue #10491</a>:</p>\n<blockquote>\n<p>Maybe someone with knowledge can answer if there are major problems with \"highly experimental temporary\" approach until shared-everything-threads is implemented.</p>\n<p>Theoretically, If I fork wasmtime and I modify wasmtime so that SharedMemory is passed to Instance (and I initialize multiple Instances with the same shared memory and correctly initialize stack/TLS for each instance), is there obvious problems why it might not work and would conflict with Component model.</p>\n</blockquote>",
        "id": 509163446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743418170
    },
    {
        "content": "<p>PPakalns edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491#issuecomment-2765859002\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491\">issue #10491</a>:</p>\n<blockquote>\n<p>Maybe someone with knowledge can answer if there are major problems with \"highly experimental temporary\" approach until shared-everything-threads is implemented.</p>\n<p>Theoretically, If I fork wasmtime and I modify wasmtime so that SharedMemory is passed to Instance (and I initialize multiple Instances with the same shared memory and correctly initialize stack/TLS for each instance), is there obvious problems why it might not work and would conflict with Component model.</p>\n<p>Thank you for your help.</p>\n</blockquote>",
        "id": 509163722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743418236
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491\">issue #10491</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Support SharedMemory for use in component in Component Model (WIT).</p>\n<h4>Benefit</h4>\n<p>Wasm on web supports threaded execution. Wasmtime supports threaded execution. WIT (Component model) simplifies host - guest interface definition a lot.</p>\n<p>It would be very useful to add some kind of (experimental) support for threaded execution in Component model. Threaded execution requires SharedMemory.</p>\n<h4>Use case</h4>\n<p>This would allow to execute Wasm component in multi-threaded program. For example in multi threaded game engines the same Wasm component can be called from multiple threads to process/generate data.</p>\n<p>Related discussion and collection of blog posts:<br>\n<a href=\"#narrow/channel/206238-general/topic/Calling.20Wasm.20logic.20from.20multiple.20threads.20with.20shared.20memory\">#general &gt; Calling Wasm logic from multiple threads with shared memory</a></p>\n<h4>Implementation</h4>\n<p>Allow to define shared memory imports in wasmtime::component::Linker?</p>\n<p>Component linker defines:<br>\n<a href=\"https://docs.wasmtime.dev/api/src/wasmtime/runtime/component/linker.rs.html#103\">https://docs.wasmtime.dev/api/src/wasmtime/runtime/component/linker.rs.html#103</a></p>\n<p>Wasmtime main linker defines:<br>\n<a href=\"https://docs.wasmtime.dev/api/src/wasmtime/runtime/linker.rs.html#119\">https://docs.wasmtime.dev/api/src/wasmtime/runtime/linker.rs.html#119</a></p>\n<p>Maybe this can be added as experimental feature under feature flag.</p>\n<h4>Alternatives</h4>\n<p>Avoid using WIT and try to reimplement the same functionality using wasmtime without Component Model.</p>\n</blockquote>",
        "id": 509275784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743446248
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491#issuecomment-2767085843\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491\">issue #10491</a>:</p>\n<blockquote>\n<p>I'm going to close this in favor of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9466\">https://github.com/bytecodealliance/wasmtime/issues/9466</a> as that's the tracking issue for now of implementing that proposal. @abrown has been working on this for now, but no demos are ready as of now of everything working end-to-end.</p>\n<p>Threads + components is, at this time, a pretty broad topic that spans everything from standards to implementation to toolchains to conventions and such. It's not really in a state of \"oh just hack this up here and you can see it all working\". Even just understanding why it's not possible to easily tack on threads requires background knowledge of components/wasm/etc. Basically I do not have the time/energy to type up what I feel will be a satisfactory answer to your questions here, and all I can leave you with is that components + threads does not work at this time. You're welcome to check back in in the future, but for now there is no feasible short path to getting this working.</p>\n</blockquote>",
        "id": 509275785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743446248
    },
    {
        "content": "<p>PPakalns <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491#issuecomment-2767141947\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10491\">issue #10491</a>:</p>\n<blockquote>\n<p>Thank you for your explanation :)  Looking forward to shared-everything-threads proposal.</p>\n</blockquote>",
        "id": 509280326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743447783
    }
]