[
    {
        "content": "<p><a href=\"https://github.com/OwenWangbattle\">OwenWangbattle</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11045\">Issue #11045</a>.</p>",
        "id": 524064292,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749906634
    },
    {
        "content": "<p>OwenWangbattle opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11045\">issue #11045</a>:</p>\n<blockquote>\n<h3>evalloop.c</h3>\n<p>The full code is in <a href=\"http://url\">https://github.com/llvm/llvm-test-suite/blob/main/SingleSource/Benchmarks/Misc/evalloop.c</a></p>\n<h3>Compile Command</h3>\n<p><code>emcc -O0/-O3 -s WASM=1 -s TOTAL_MEMORY=512MB evalloop.c -o evalloop.wasm\nwasmtime compile -C compiler=cranelift -O opt-level=2 evalloop.wasm -o evalloop.cwasm</code></p>\n<h3>Run Command</h3>\n<p><code>wasmtime --wasm max-wasm-stack=8388608 --allow-precompiled evalloop.cwasm</code></p>\n<h3>Results</h3>\n<p>I ran the program 10 times and got the average execution time.<br>\nTime for O3 optimization flag: 2.43s<br>\nTime for O0 optimization flag: 0.81s<br>\nTime for Wasmer LLVM Compiler AOT: 1.09s</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: wasmtime-cli 22.0.0 (761f044ef 2024-06-20)</p>\n<p>Operating system: Ubuntu 22.04.5 LTS(Linux)</p>\n<p>Architecture: x86_64</p>\n<p>CPU: Intel(R) Xeon(R) Gold 5218R CPU @ 2.10GHz</p>\n<h3>Extra Info</h3>\n<p>I think there may be some negative optimization for the pattern that calling function in the switch structure.<br>\n</p>\n</blockquote>",
        "id": 524064293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749906634
    },
    {
        "content": "<p><a href=\"https://github.com/OwenWangbattle\">OwenWangbattle</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11045\">Issue #11045</a>.</p>",
        "id": 524064294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749906635
    },
    {
        "content": "<p>OwenWangbattle <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11045#issuecomment-2972757453\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11045\">issue #11045</a>:</p>\n<blockquote>\n<p>Sorry, the Compile Command is <br>\n<code>emcc -O0/-O3 -s WASM=1 -s TOTAL_MEMORY=512MB evalloop.c -o evalloop.wasm</code><br>\n<code>wasmtime compile -C compiler=cranelift -O opt-level=2 evalloop.wasm -o evalloop.cwasm</code></p>\n</blockquote>",
        "id": 524064359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749906720
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11045\">issue #11045</a>:</p>\n<blockquote>\n<h3>evalloop.c</h3>\n<p>The full code is in <a href=\"https://github.com/llvm/llvm-test-suite/blob/main/SingleSource/Benchmarks/Misc/evalloop.c\">https://github.com/llvm/llvm-test-suite/blob/main/SingleSource/Benchmarks/Misc/evalloop.c</a></p>\n<h3>Compile Command</h3>\n<p><code>emcc -O0/-O3 -s WASM=1 -s TOTAL_MEMORY=512MB evalloop.c -o evalloop.wasm\nwasmtime compile -C compiler=cranelift -O opt-level=2 evalloop.wasm -o evalloop.cwasm</code></p>\n<h3>Run Command</h3>\n<p><code>wasmtime --wasm max-wasm-stack=8388608 --allow-precompiled evalloop.cwasm</code></p>\n<h3>Results</h3>\n<p>I ran the program 10 times and got the average execution time.<br>\nTime for O3 optimization flag: 2.43s<br>\nTime for O0 optimization flag: 0.81s<br>\nTime for Wasmer LLVM Compiler AOT: 1.09s</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: wasmtime-cli 22.0.0 (761f044ef 2024-06-20)</p>\n<p>Operating system: Ubuntu 22.04.5 LTS(Linux)</p>\n<p>Architecture: x86_64</p>\n<p>CPU: Intel(R) Xeon(R) Gold 5218R CPU @ 2.10GHz</p>\n<h3>Extra Info</h3>\n<p>I think there may be some negative optimization for the pattern that calling function in the switch structure.<br>\n</p>\n</blockquote>",
        "id": 524143886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750006678
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11045#issuecomment-2974275667\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11045\">issue #11045</a>:</p>\n<blockquote>\n<p>Originally the link in the issue pointed to <code>url</code> so I updated it to point to the file that the text of the link was showing, but just wanted to confirm -- if you follow that link is that the test you're interested in?</p>\n<p>This may be a producer toolchain issue rather than a Wasmtime issue as well. The <code>emcc</code> compiler I believe by default runs <code>wasm-opt</code> which means that you're dealing with both the LLVM and <code>wasm-opt</code> optimization pipeline. I'd recommend narrowing this down further to figure out what optimization is causing the slowdown vs not as that will make this much easier to debug.</p>\n<p>I used a small script:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kr\">do</span>\n<span class=\"w\">  </span><span class=\"cp\">$WASI_SDK_PATH</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"cp\">$i</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O</span><span class=\"cp\">$i</span>\n<span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"cp\">$i</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">  </span><span class=\"n\">echo</span><span class=\"w\"> </span><span class=\"s\">\"O$i\"</span>\n<span class=\"w\">  </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"cp\">$i</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n<span class=\"n\">done</span>\n</code></pre></div>\n<p>which uses just wasi-sdk which is just LLVM, not <code>wasm-opt</code>, and I get:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">O0</span>\n<span class=\"n\">Sum</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">3273600000</span>\n\n<span class=\"n\">real</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"p\">.</span><span class=\"mi\">546</span><span class=\"n\">s</span>\n<span class=\"n\">user</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"p\">.</span><span class=\"mi\">544</span><span class=\"n\">s</span>\n<span class=\"n\">sys</span><span class=\"w\">     </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"p\">.</span><span class=\"mi\">006</span><span class=\"n\">s</span>\n<span class=\"n\">O1</span>\n<span class=\"n\">Sum</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">3273600000</span>\n\n<span class=\"n\">real</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"p\">.</span><span class=\"mi\">306</span><span class=\"n\">s</span>\n<span class=\"n\">user</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"p\">.</span><span class=\"mi\">301</span><span class=\"n\">s</span>\n<span class=\"n\">sys</span><span class=\"w\">     </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"p\">.</span><span class=\"mi\">006</span><span class=\"n\">s</span>\n<span class=\"n\">O2</span>\n<span class=\"n\">Sum</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">3273600000</span>\n\n<span class=\"n\">real</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"p\">.</span><span class=\"mi\">317</span><span class=\"n\">s</span>\n<span class=\"n\">user</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"p\">.</span><span class=\"mi\">320</span><span class=\"n\">s</span>\n<span class=\"n\">sys</span><span class=\"w\">     </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"p\">.</span><span class=\"mi\">003</span><span class=\"n\">s</span>\n<span class=\"n\">O3</span>\n<span class=\"n\">Sum</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">3273600000</span>\n\n<span class=\"n\">real</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"p\">.</span><span class=\"mi\">308</span><span class=\"n\">s</span>\n<span class=\"n\">user</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"p\">.</span><span class=\"mi\">305</span><span class=\"n\">s</span>\n<span class=\"n\">sys</span><span class=\"w\">     </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"p\">.</span><span class=\"mi\">006</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>which looks like this doesn't show any slowdown with higher optimization levels, definitely nothing close to 2+ seconds as you're seeing.</p>\n<p>For me though it's just a hunch that <code>wasm-opt</code> might be doing something here, I don't actually have either <code>emcc</code> or <code>wasm-opt</code> installed locally. Can you @OwenWangbattle work on debugging this more? Can you reproduce with just wasi-sdk? Can you disable <code>wasm-opt</code> (I'm not sure how to do this) with <code>emcc</code> and see if that's causing the issue? If so this might be an issue best for Binaryen rather than Wasmtime.</p>\n</blockquote>",
        "id": 524144311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750007037
    },
    {
        "content": "<p>OwenWangbattle <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11045#issuecomment-2979075993\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11045\">issue #11045</a>:</p>\n<blockquote>\n<blockquote>\n<p>Originally the link in the issue pointed to <code>url</code> so I updated it to point to the file that the text of the link was showing, but just wanted to confirm -- if you follow that link is that the test you're interested in?</p>\n<p>This may be a producer toolchain issue rather than a Wasmtime issue as well. The <code>emcc</code> compiler I believe by default runs <code>wasm-opt</code> which means that you're dealing with both the LLVM and <code>wasm-opt</code> optimization pipeline. I'd recommend narrowing this down further to figure out what optimization is causing the slowdown vs not as that will make this much easier to debug.</p>\n<p>I used a small script:</p>\n<p><code>\nfor i in 0 1 2 3; do\n  $WASI_SDK_PATH/bin/clang foo.c -o o$i.wasm -O$i\n  wasmtime compile o$i.wasm\n  echo \"O$i\"\n  time wasmtime run --allow-precompiled o$i.cwasm\ndone\n</code></p>\n<p>which uses just wasi-sdk which is just LLVM, not <code>wasm-opt</code>, and I get:</p>\n<p>```<br>\nO0<br>\nSum: 3273600000</p>\n<p>real    0m0.546s<br>\nuser    0m0.544s<br>\nsys     0m0.006s<br>\nO1<br>\nSum: 3273600000</p>\n<p>real    0m0.306s<br>\nuser    0m0.301s<br>\nsys     0m0.006s<br>\nO2<br>\nSum: 3273600000</p>\n<p>real    0m0.317s<br>\nuser    0m0.320s<br>\nsys     0m0.003s<br>\nO3<br>\nSum: 3273600000</p>\n<p>real    0m0.308s<br>\nuser    0m0.305s<br>\nsys     0m0.006s<br>\n```</p>\n<p>which looks like this doesn't show any slowdown with higher optimization levels, definitely nothing close to 2+ seconds as you're seeing.</p>\n<p>For me though it's just a hunch that <code>wasm-opt</code> might be doing something here, I don't actually have either <code>emcc</code> or <code>wasm-opt</code> installed locally. Can you <a href=\"https://github.com/OwenWangbattle\">@OwenWangbattle</a> work on debugging this more? Can you reproduce with just wasi-sdk? Can you disable <code>wasm-opt</code> (I'm not sure how to do this) with <code>emcc</code> and see if that's causing the issue? If so this might be an issue best for Binaryen rather than Wasmtime.</p>\n</blockquote>\n<p>I investigated this case further these days. I thought you might be right. <strong>It might be caused by Binaryen instead of wasmtime.</strong> <br>\n<code>emcc -O3 -s WASM=1 -s TOTAL_MEMORY=512MB evalloop.c -o evalloop.wasm -v</code> to see how emscripten compiled this program to wasm module. I followed its process without the wasm-opt optimization. And I found that the execution time of the program reduced to 1.6s. If I only used wasi-sdk and clang to compile the program, the execution time for O3 optimization flag was 0.64s and for O0 was 0.86s. The result was the same as you mentioned. <br>\nThank you for your suggestion! </p>\n</blockquote>",
        "id": 524378618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750140887
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11045\">issue #11045</a>:</p>\n<blockquote>\n<h3>evalloop.c</h3>\n<p>The full code is in <a href=\"https://github.com/llvm/llvm-test-suite/blob/main/SingleSource/Benchmarks/Misc/evalloop.c\">https://github.com/llvm/llvm-test-suite/blob/main/SingleSource/Benchmarks/Misc/evalloop.c</a></p>\n<h3>Compile Command</h3>\n<p><code>emcc -O0/-O3 -s WASM=1 -s TOTAL_MEMORY=512MB evalloop.c -o evalloop.wasm\nwasmtime compile -C compiler=cranelift -O opt-level=2 evalloop.wasm -o evalloop.cwasm</code></p>\n<h3>Run Command</h3>\n<p><code>wasmtime --wasm max-wasm-stack=8388608 --allow-precompiled evalloop.cwasm</code></p>\n<h3>Results</h3>\n<p>I ran the program 10 times and got the average execution time.<br>\nTime for O3 optimization flag: 2.43s<br>\nTime for O0 optimization flag: 0.81s<br>\nTime for Wasmer LLVM Compiler AOT: 1.09s</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: wasmtime-cli 22.0.0 (761f044ef 2024-06-20)</p>\n<p>Operating system: Ubuntu 22.04.5 LTS(Linux)</p>\n<p>Architecture: x86_64</p>\n<p>CPU: Intel(R) Xeon(R) Gold 5218R CPU @ 2.10GHz</p>\n<h3>Extra Info</h3>\n<p>I think there may be some negative optimization for the pattern that calling function in the switch structure.<br>\n</p>\n</blockquote>",
        "id": 524467489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750170664
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11045#issuecomment-2980619984\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11045\">issue #11045</a>:</p>\n<blockquote>\n<p>Ok  sounds good! I'm going to close this then.</p>\n</blockquote>",
        "id": 524467502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750170667
    }
]