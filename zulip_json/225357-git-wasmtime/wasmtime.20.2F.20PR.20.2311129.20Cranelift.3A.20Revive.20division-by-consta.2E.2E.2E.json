[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129\">PR #11129</a> from <code>fitzgen:revive-div-rem-magic-consts</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<ul>\n<li>\n<p>Revive the old module for generating division-by-constant magic numbers</p>\n</li>\n<li>\n<p>Add proptests for divide-by-constant magic number generators, just for a little extra correctness assurances</p>\n</li>\n<li>\n<p>Apply division-by-constant magic sequences in the ISLE mid-end.</p>\n<p>The application of these sequences have been ported to ISLE now to better integrate with our existing mid-end optimizations and to allow for recursive rule application in the optimized right-hand sides.</p>\n</li>\n</ul>\n</blockquote>",
        "id": 525600233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750801418
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129\">PR #11129</a>.</p>",
        "id": 525600237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750801420
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129\">PR #11129</a>.</p>",
        "id": 525600238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750801420
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129\">PR #11129</a>.</p>",
        "id": 525600239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750801420
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129\">PR #11129</a>:</p>\n<blockquote>\n<ul>\n<li>\n<p>Revive the old module for generating division-by-constant magic numbers</p>\n</li>\n<li>\n<p>Add proptests for divide-by-constant magic number generators, just for a little extra correctness assurances</p>\n</li>\n<li>\n<p>Apply division-by-constant magic sequences in the ISLE mid-end.</p>\n<p>The application of these sequences have been ported to ISLE now to better integrate with our existing mid-end optimizations and to allow for recursive rule application in the optimized right-hand sides.</p>\n</li>\n</ul>\n<p>Fixes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6049\">https://github.com/bytecodealliance/wasmtime/issues/6049</a></p>\n</blockquote>",
        "id": 525600289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750801446
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129#pullrequestreview-2955586973\">PR review</a>:</p>\n<blockquote>\n<p>Very nice <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>. Review-wise the main thing I did was double-check that the <code>eval_*</code> functions match the ISLE lowerings of the instructions to ensure that all the goodness of the proptest/test suite/etc mirrors into ISLE well. Very much appreciate the extensive test suite here!</p>\n<p>A few thoughts:</p>\n<ul>\n<li>Could the proptest bits be expanded to <code>{u,s}rem</code> as well as division? That way the final bits of ISLE can all additionally be mapped into Rust/proptest as well.</li>\n<li>Is it true that in all cases this expansion is better than whatever the hardware does?</li>\n<li>More of a curiosity, but how do egraphs know to favor these instruction sequences? This is expanding to quite a few more instrunctions than a div so do we have the cost of div/rem set really high?</li>\n</ul>\n</blockquote>",
        "id": 525606618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750805033
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129#discussion_r2165054910\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW while these were probably copied from C or similar you can probably simplify these greatly with 128-bit integers</p>\n</blockquote>",
        "id": 525606621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750805033
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129#discussion_r2165055340\">PR review comment</a>:</p>\n<blockquote>\n<p>Also this sort of makes me wonder if we could have a monster ISLE rule to pattern match this and generate <code>smulhi</code>....</p>\n</blockquote>",
        "id": 525606623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750805033
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129#issuecomment-3002102253\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129\">PR #11129</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is it true that in all cases this expansion is better than whatever the hardware does?</p>\n</blockquote>\n<p>I guess I'm becoming the resident instruction latency/throughput oracle today but yes definitely -- 64-bit integer divide has a latency of 35-88 cycles (!) on Skylake, with a throughput of 1/6 (so not fully pipelined), while 64-bit integer multiply is 3 cycles and is fully pipelined (1 per cycle). I vaguely recall some issue discussion from when we first switched over to the egraph mid-end where we noticed some benchmarks where this showed up as minor regressions, too. Very happy to see this finally ported over!</p>\n</blockquote>",
        "id": 525608012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750806006
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129#issuecomment-3002281043\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129\">PR #11129</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:meta\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 525618929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750813538
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129#pullrequestreview-2959226703\">PR review</a>.</p>",
        "id": 525768553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750876252
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129#discussion_r2167352966\">PR review comment</a>:</p>\n<blockquote>\n<p>The tricky bit with matching this gunk to produce <code>smulhi</code> is all of the commutative operations.</p>\n</blockquote>",
        "id": 525768554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750876252
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129\">PR #11129</a>.</p>",
        "id": 525771481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750877578
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129#issuecomment-3005826369\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129\">PR #11129</a>:</p>\n<blockquote>\n<blockquote>\n<p>More of a curiosity, but how do egraphs know to favor these instruction sequences? This is expanding to quite a few more instrunctions than a div so do we have the cost of div/rem set really high?</p>\n</blockquote>\n<p>We don't put the values defined by side-effectful instructions into the egraph, so we have a slightly different path. This is why we use the ISLE <code>simplify_skeleton</code> term instead of the usual <code>simplify</code>. This path assumes that all RHSes are an improvement over the LHS, and does a shallow/greedy cost comparison for choosing among multiple RHSes (rather than a dynamic programming thing that looks at deep structure).</p>\n<p>Concretely, in this case there will be one RHS candidate (the new magic sequence), the one RHS is trivially the best RHS, and for <code>simplify_skeleton</code> we always take RHSes over LHSes when available. So basically, \"we favor these instructions because we generated them\".</p>\n</blockquote>",
        "id": 525771984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750877838
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129\">PR #11129</a>.</p>",
        "id": 525772080,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750877874
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129\">PR #11129</a>.</p>",
        "id": 525777413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750880387
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129\">PR #11129</a>.</p>",
        "id": 525783692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750882832
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129#pullrequestreview-2959695602\">PR review</a>.</p>",
        "id": 525791992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750886249
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11129#discussion_r2167651959\">PR review comment</a>:</p>\n<blockquote>\n<p>I think what you're describing is the draft work I did, and comments I wrote, in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8653\">https://github.com/bytecodealliance/wasmtime/pull/8653</a>; I was trying to get all the way to wide imul, but I think similar reasoning should work for *mulhi.</p>\n</blockquote>",
        "id": 525791994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750886249
    }
]