[
    {
        "content": "<p>yophilav opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10788\">issue #10788</a>:</p>\n<blockquote>\n<p>Hi Wasmtime folks!<br>\nHope you are having a great day so far!<br>\nTL;DR - How to keep a unix named pipe alive on continuous read with wasmtime's <code>.stdin()</code>?</p>\n<p>Full Context:<br>\nI have Python Debugger (PDB) \"compiles\" into a WASM component using <code>componentize-py</code>. The WASM component is then loaded into the latest <code>wasmtime</code> in Rust from the <code>main</code> branch. The Rust wasmtime is then compiled and run to load the wasm component. The wasm component then launches an interative terminal -- a debugging session. </p>\n<p>When I do <code>WasiCtxBuilder::new().inherit_stdin()</code>, this works great. I can have an interactive on-going PDB session.<br>\nHowever, when I change from getting user input via STDIN to be using a FIFO named pipe with <code>WasiCtxBuilder::new().stdin(wasm_stdin_stream)</code>, the communication seem to just stopped (and the PDB returned) after the first command is provided through the pipe. I'm hoping there is a way I can implement an interactive debugging session through the FIFO pipe just like when <code>.inherit_stdin()</code> is used.</p>\n<p>WASM component setup:<br>\nA <code>simpleadd.wasm</code> was built using <code>componentize-py -d simpleadd.wit -w simpleadd componentize impl -o simpleadd.wasm</code></p>\n<p>simpleadd.wit:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"p\">:</span><span class=\"nc\">simpleadd</span><span class=\"p\">;</span>\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">simpleadd</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>impl.py:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">simpleadd</span>\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">pdb</span>\n<span class=\"n\">class</span><span class=\"w\"> </span><span class=\"n\">Simpleadd</span><span class=\"p\">(</span><span class=\"n\">simpleadd</span><span class=\"p\">.</span><span class=\"n\">Simpleadd</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">def</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">int</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"nc\">try</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"nc\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"w\">            </span><span class=\"n\">pdb</span><span class=\"p\">.</span><span class=\"n\">set_trace</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">        </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">Exception</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"nc\">if</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">).</span><span class=\"n\">__name__</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"BdbQuit\"</span><span class=\"p\">:</span>\n<span class=\"w\">                </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">            </span><span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"w\">                </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p><a href=\"http://main.rs\">main.rs</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">tokio</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">File</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::{</span><span class=\"n\">OpenOptions</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::{</span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AsyncStdinStream</span><span class=\"p\">,</span><span class=\"n\">OutputFile</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pipe</span><span class=\"p\">::</span><span class=\"n\">AsyncReadStream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">IoView</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">};</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span>\n<span class=\"w\">    </span><span class=\"n\">component</span><span class=\"p\">::{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Ctx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasi_ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IoView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasi_ctx</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\">  </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">debug_info</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"/path/to/simpleadd.wasm\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Waiting for FIFO Rx...\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// mkfifo /path/to/test_fifo</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stdin_fifo_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"/path/to/test_fifo\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stdin_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OpenOptions</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">stdin_fifo_path</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Failed to open FIFO file\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tokio_stdin_fifo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">File</span><span class=\"p\">::</span><span class=\"n\">from_std</span><span class=\"p\">(</span><span class=\"n\">stdin_file</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_stdin_stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AsyncStdinStream</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">AsyncReadStream</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">tokio_stdin_fifo</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"n\">wasi_ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">stdin</span><span class=\"p\">(</span><span class=\"n\">wasm_stdin_stream</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"c1\">//.inherit_stdin()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inherit_stdout</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inherit_stderr</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Instantiated component...\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">add_fnx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"add\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">add_fnx</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Result from add module: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>To run: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">mkfifo</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">test_fifo</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span>\n</code></pre></div>\n<p>Thanks,<br>\nBear</p>\n</blockquote>",
        "id": 518758909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747436198
    },
    {
        "content": "<p>yophilav edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10788\">issue #10788</a>:</p>\n<blockquote>\n<p>Hi Wasmtime folks!<br>\nHope you are having a great day so far!<br>\nTL;DR - How to keep a unix named pipe alive on continuous read with wasmtime's <code>.stdin()</code>?</p>\n<p>Full Context:<br>\nI have Python Debugger (PDB) \"compiles\" into a WASM component using <code>componentize-py</code>. The WASM component is then loaded into the latest <code>wasmtime</code> in Rust from the <code>main</code> branch. The Rust wasmtime is then compiled and run to load the wasm component. The wasm component then launches an interative terminal -- a debugging session. </p>\n<p>When I do <code>WasiCtxBuilder::new().inherit_stdin()</code>, this works great. I can have an interactive on-going PDB session.<br>\nHowever, when I change from getting user input via STDIN to be using a FIFO named pipe with <code>WasiCtxBuilder::new().stdin(wasm_stdin_stream)</code>, the communication seem to just stopped (and the PDB returned) after the first command is provided through the pipe. I'm hoping there is a way I can implement an interactive debugging session through the FIFO pipe just like when <code>.inherit_stdin()</code> is used.</p>\n<p>WASM component setup:<br>\n<code>simpleadd.wasm</code> was built using <code>componentize-py -d simpleadd.wit -w simpleadd componentize impl -o simpleadd.wasm</code></p>\n<p>simpleadd.wit:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"p\">:</span><span class=\"nc\">simpleadd</span><span class=\"p\">;</span>\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">simpleadd</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>impl.py:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">simpleadd</span>\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">pdb</span>\n<span class=\"n\">class</span><span class=\"w\"> </span><span class=\"n\">Simpleadd</span><span class=\"p\">(</span><span class=\"n\">simpleadd</span><span class=\"p\">.</span><span class=\"n\">Simpleadd</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">def</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">int</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"nc\">try</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"nc\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"w\">            </span><span class=\"n\">pdb</span><span class=\"p\">.</span><span class=\"n\">set_trace</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">        </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">Exception</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"nc\">if</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">).</span><span class=\"n\">__name__</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"BdbQuit\"</span><span class=\"p\">:</span>\n<span class=\"w\">                </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">            </span><span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"w\">                </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p><a href=\"http://main.rs\">main.rs</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">tokio</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">File</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::{</span><span class=\"n\">OpenOptions</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::{</span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AsyncStdinStream</span><span class=\"p\">,</span><span class=\"n\">OutputFile</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pipe</span><span class=\"p\">::</span><span class=\"n\">AsyncReadStream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">IoView</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">};</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span>\n<span class=\"w\">    </span><span class=\"n\">component</span><span class=\"p\">::{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Ctx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasi_ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IoView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasi_ctx</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\">  </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">debug_info</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"/path/to/simpleadd.wasm\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Waiting for FIFO Rx...\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// mkfifo /path/to/test_fifo</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stdin_fifo_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"/path/to/test_fifo\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stdin_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OpenOptions</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">stdin_fifo_path</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Failed to open FIFO file\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tokio_stdin_fifo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">File</span><span class=\"p\">::</span><span class=\"n\">from_std</span><span class=\"p\">(</span><span class=\"n\">stdin_file</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_stdin_stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AsyncStdinStream</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">AsyncReadStream</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">tokio_stdin_fifo</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"n\">wasi_ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">stdin</span><span class=\"p\">(</span><span class=\"n\">wasm_stdin_stream</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"c1\">//.inherit_stdin()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inherit_stdout</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inherit_stderr</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Instantiated component...\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">add_fnx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"add\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">add_fnx</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Result from add module: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>To run: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">mkfifo</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">test_fifo</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span>\n</code></pre></div>\n<p>Thanks,<br>\nBear</p>\n</blockquote>",
        "id": 518758955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747436235
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10788#issuecomment-2889067489\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10788\">issue #10788</a>:</p>\n<blockquote>\n<p>Can you describe a bit more about what you're seeing and how it differs from what you expect? I tried this example locally and it seems to work reasonably well, but I've also never worked with FIFOs before and I also am not 100% sure what you're expecting.</p>\n<p>For example what I used was <code>cat &gt; ./test_fifo</code> to write to the FIFO and from there once the component was running I was able to type <code>help</code> plus enter multiple times and the help text showed up in the wasmtime session. I could enter other commands and then once Wasmtime exited a write into the FIFO would abort the <code>cat</code> process due to what I suspect was SIGPIPE.</p>\n<p>Above you say:</p>\n<blockquote>\n<p>the communication seem to just stopped (and the PDB returned) after the first command is provided through the pipe</p>\n</blockquote>\n<p>Can you provide the commands you're trying to execute through the FIFO? And what you're seeing and what you're expecting to see? I've also never worked with PDB/Python in this regard before so my test of running <code>help</code> a few times may not be sufficient to test what you're thinking.<br>\n</p>\n</blockquote>",
        "id": 518933643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747583669
    },
    {
        "content": "<p>yophilav closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10788\">issue #10788</a>:</p>\n<blockquote>\n<p>Hi Wasmtime folks!<br>\nHope you are having a great day so far!<br>\nTL;DR - How to keep a unix named pipe alive on continuous read with wasmtime's <code>.stdin()</code>?</p>\n<p>Full Context:<br>\nI have Python Debugger (PDB) \"compiles\" into a WASM component using <code>componentize-py</code>. The WASM component is then loaded into the latest <code>wasmtime</code> in Rust from the <code>main</code> branch. The Rust wasmtime is then compiled and run to load the wasm component. The wasm component then launches an interative terminal -- a debugging session. </p>\n<p>When I do <code>WasiCtxBuilder::new().inherit_stdin()</code>, this works great. I can have an interactive on-going PDB session.<br>\nHowever, when I change from getting user input via STDIN to be using a FIFO named pipe with <code>WasiCtxBuilder::new().stdin(wasm_stdin_stream)</code>, the communication seem to just stopped (and the PDB returned) after the first command is provided through the pipe. I'm hoping there is a way I can implement an interactive debugging session through the FIFO pipe just like when <code>.inherit_stdin()</code> is used.</p>\n<p>WASM component setup:<br>\n<code>simpleadd.wasm</code> was built using <code>componentize-py -d simpleadd.wit -w simpleadd componentize impl -o simpleadd.wasm</code></p>\n<p>simpleadd.wit:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"p\">:</span><span class=\"nc\">simpleadd</span><span class=\"p\">;</span>\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">simpleadd</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>impl.py:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">simpleadd</span>\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">pdb</span>\n<span class=\"n\">class</span><span class=\"w\"> </span><span class=\"n\">Simpleadd</span><span class=\"p\">(</span><span class=\"n\">simpleadd</span><span class=\"p\">.</span><span class=\"n\">Simpleadd</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">def</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">int</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"nc\">try</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"nc\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"w\">            </span><span class=\"n\">pdb</span><span class=\"p\">.</span><span class=\"n\">set_trace</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">        </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">Exception</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"nc\">if</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">).</span><span class=\"n\">__name__</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"BdbQuit\"</span><span class=\"p\">:</span>\n<span class=\"w\">                </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">            </span><span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"w\">                </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p><a href=\"http://main.rs\">main.rs</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">tokio</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">File</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::{</span><span class=\"n\">OpenOptions</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::{</span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AsyncStdinStream</span><span class=\"p\">,</span><span class=\"n\">OutputFile</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pipe</span><span class=\"p\">::</span><span class=\"n\">AsyncReadStream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">IoView</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">};</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span>\n<span class=\"w\">    </span><span class=\"n\">component</span><span class=\"p\">::{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Ctx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasi_ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IoView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasi_ctx</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\">  </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">debug_info</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"/path/to/simpleadd.wasm\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Waiting for FIFO Rx...\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// mkfifo /path/to/test_fifo</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stdin_fifo_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"/path/to/test_fifo\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stdin_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OpenOptions</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">stdin_fifo_path</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Failed to open FIFO file\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tokio_stdin_fifo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">File</span><span class=\"p\">::</span><span class=\"n\">from_std</span><span class=\"p\">(</span><span class=\"n\">stdin_file</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_stdin_stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AsyncStdinStream</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">AsyncReadStream</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">tokio_stdin_fifo</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"n\">wasi_ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">stdin</span><span class=\"p\">(</span><span class=\"n\">wasm_stdin_stream</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"c1\">//.inherit_stdin()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inherit_stdout</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inherit_stderr</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Instantiated component...\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">add_fnx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"add\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">add_fnx</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Result from add module: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>To run: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">mkfifo</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">test_fifo</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span>\n</code></pre></div>\n<p>Thanks,<br>\nBear</p>\n</blockquote>",
        "id": 519200273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747681942
    },
    {
        "content": "<p>yophilav <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10788#issuecomment-2892025059\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10788\">issue #10788</a>:</p>\n<blockquote>\n<p>Welp. Thank you for pointing out that it's a fumble on my part. The <code>cat &gt; ./test_fifo</code> works as expected.  I did <code>echo -n \"where\"</code> which doesn't accept stdio, only string param which obv terminates at the end of the string. </p>\n<p>Thank you!</p>\n</blockquote>",
        "id": 519200274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747681943
    }
]