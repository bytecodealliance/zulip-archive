[
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942\">PR #10942</a>.</p>",
        "id": 522677176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749162120
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942\">PR #10942</a>.</p>",
        "id": 522677177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749162120
    },
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942\">PR #10942</a> from <code>abrown:asm-auto-alt</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>The new assembler gives us the opportunity to generate some extra ISLE rules to eliminate boilerplate like the following, hand-written around 180 times throughout <code>inst.isle</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Xmm</span><span class=\"w\"> </span><span class=\"n\">XmmMem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Xmm</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">src1</span><span class=\"w\"> </span><span class=\"n\">src2</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"o\">-</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">use_avx</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">avx</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"o\">&gt;</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">src1</span><span class=\"w\"> </span><span class=\"n\">src2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">sse</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"o\">&gt;</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>This PR only attempts to solve that exact pattern (i.e., <code>Xmm XmmMem</code>) but the approach could scale to more patterns in the future.</p>\n</blockquote>",
        "id": 522677178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749162120
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#discussion_r2130671880\">PR review comment</a>:</p>\n<blockquote>\n<p>The implementation (below) _could_ all go live in a separate module (?).</p>\n</blockquote>",
        "id": 522677225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749162174
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#pullrequestreview-2902693769\">PR review</a>.</p>",
        "id": 522677226,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749162174
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#pullrequestreview-2902698235\">PR review</a>.</p>",
        "id": 522677304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749162235
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#discussion_r2130675813\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not terribly happy about dropping this here; it will work fine but at some point we may need to refactor the function this is in. It is just quite handy that all the parameter types and names have been pre-calculated for us.</p>\n</blockquote>",
        "id": 522677305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749162235
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#pullrequestreview-2902847165\">PR review</a>:</p>\n<blockquote>\n<p>Thanks -- neat that this was made to work! Some thoughts below. If this PR turns out to be the best way I'm fine with it going in but I'm curious what you think of the below...</p>\n</blockquote>",
        "id": 522680743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749164666
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#discussion_r2130786500\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we put this nested <code>match</code> in an <code>opcode()</code> method on <code>rex.opcodes</code>?</p>\n<p>Also, it's not totally clear to me what \"primary opcode\" means in the doc-comment above and why we return the <em>secondary</em> for the \"primary\" if it exists -- I read the doc-comment for <code>Opcodes</code> below too and I'm still a little fuzzy. Could we say what we mean here by \"primary\" and why the secondary is the primary?</p>\n</blockquote>",
        "id": 522680744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749164666
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#discussion_r2130820570\">PR review comment</a>:</p>\n<blockquote>\n<p>It's neat that this was made to work automagically -- all the same, I worry a tiny bit that it may be brittle (unexpectedly determine a match when some subtle condition means they're not quite equivalent; or on the other side, miss a match because of something). The note below about rounding and the fact this limits things to just one format for now as a result seems to bear this out a little.</p>\n<p>In the spirit of the explicit DSL, I wonder if it would be better to have a clause on the instruction builder that sets the alternate? Something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">inst</span><span class=\"p\">(</span><span class=\"s\">\"vpadd\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.).</span><span class=\"n\">avx_for</span><span class=\"p\">(</span><span class=\"s\">\"padd\"</span><span class=\"p\">),</span>\n<span class=\"w\">  </span><span class=\"n\">inst</span><span class=\"p\">(</span><span class=\"s\">\"padd\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.),</span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>(<code>avx_for</code>, <code>upgrades</code>, <code>equiv</code>, pick a verb phrase...)</p>\n<p>Thoughts?</p>\n</blockquote>",
        "id": 522680745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749164666
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#pullrequestreview-2903145693\">PR review</a>.</p>",
        "id": 522685234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749168331
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#discussion_r2131024670\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I did consider adding an explicit version: <code>inst(...).alt(\"vpadd\")</code>. I can't remember what dissuaded me, but probably laziness (there will be a lot of places to update!). But it is more clear so I'm in favor of that &mdash; less magic. I'll rework this to use a DSL function and use the current \"check the SSE-to-AVX link\" logic to verify that the user has specified <code>.alt(...)</code> correctly.</p>\n</blockquote>",
        "id": 522685235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749168331
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#pullrequestreview-2903148329\">PR review</a>.</p>",
        "id": 522685304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749168386
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#discussion_r2131026541\">PR review comment</a>:</p>\n<blockquote>\n<p>Sounds good, thanks!</p>\n</blockquote>",
        "id": 522685305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749168386
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#pullrequestreview-2903152017\">PR review</a>.</p>",
        "id": 522685406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749168460
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#discussion_r2131029166\">PR review comment</a>:</p>\n<blockquote>\n<p>The manual uses \"primary\" and \"secondary\" to explain all this but, yes, it kind of feels like the \"primary\" opcode should always be the last one. I'll add <code>Opcodes::opcode</code> and try to explain things there a bit better.</p>\n</blockquote>",
        "id": 522685407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749168460
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#pullrequestreview-2905125978\">PR review</a>.</p>",
        "id": 522791331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749220526
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#discussion_r2132318075\">PR review comment</a>:</p>\n<blockquote>\n<p>Personally I'd agree with @cfallin as well in that I'm in favor of explicitly saying \"this is the AVX thing for that other instruction\" which then generates a panic/assertion/etc if something doesn't match. (I realize y'all've already reached this conclusion but wanted to echo my opinion here too to voice support)</p>\n</blockquote>",
        "id": 522791333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749220527
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942\">PR #10942</a>.</p>",
        "id": 523133031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749488021
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942#pullrequestreview-2910843164\">PR review</a>:</p>\n<blockquote>\n<p>Nice <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 523140998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749491284
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10942\">PR #10942</a>.</p>",
        "id": 523144499,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749492783
    }
]