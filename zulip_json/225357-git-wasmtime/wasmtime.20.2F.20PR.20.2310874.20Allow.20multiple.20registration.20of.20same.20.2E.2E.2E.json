[
    {
        "content": "<p>Milek7 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10874\">PR #10874</a> from <code>Milek7:global-trap-registry</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>With <code>Module::deserialize_raw</code> it is possible to create multiple <code>CodeMemory</code> objects that refer to the same underlying image. This is useful when embedder uses multiple <code>Engine</code> objects with different config. Currently this fails on assertion when trying to register same region of code second time in the <code>global_code</code> registry.</p>\n<p>Global code registry stores <code>Arc&lt;CodeMemory&gt;</code>, but only needs to access trap data section in the image. Storing list of these in code registry would be silly, because on PC lookup one item would need to be picked arbitrarily, possibly different than the one which is currently executing, only to access <code>trap_data</code> field which must be identical for all items.</p>\n<p>This commit modifies global registry to only store raw pointers to the <code>trap_data</code> section along with an usage count. Unregistration is moved into <code>Drop</code> guard to ensure that underlying data is not freed before unregistration is manually called.<br>\n</p>\n</blockquote>",
        "id": 521362825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748634898
    },
    {
        "content": "<p><strong>Milek7</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10874\">PR #10874</a>.</p>",
        "id": 521362826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748634898
    },
    {
        "content": "<p><strong>Milek7</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10874\">PR #10874</a>.</p>",
        "id": 521362827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748634899
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10874#issuecomment-2923384484\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10874\">PR #10874</a>:</p>\n<blockquote>\n<blockquote>\n<p>This is useful when embedder uses multiple <code>Engine</code> objects with different config.</p>\n</blockquote>\n<p>If the engines have different configs, then the same compiled artifact will not be compatible with all engines, only the one using the config that it was compiled with.</p>\n</blockquote>",
        "id": 521365052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748635861
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10874#issuecomment-2923385158\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10874\">PR #10874</a>:</p>\n<blockquote>\n<p>(And if the engines all have the same config, then you might as well just use one engine.)</p>\n</blockquote>",
        "id": 521365101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748635883
    },
    {
        "content": "<p>Milek7 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10874#issuecomment-2923447135\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10874\">PR #10874</a>:</p>\n<blockquote>\n<p>I think it's not nice if it crashes on assert just because you used same image more than once. There's no such limitation for modules loaded from normal file. (and to be precise there are config settings that are not dependent on the artifact, like stack limits, memory allocators and few others)</p>\n</blockquote>",
        "id": 521369388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748637922
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10874#issuecomment-2941836809\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10874\">PR #10874</a>:</p>\n<blockquote>\n<p>One comment on this I've got is that we've generally been trying to reduce <code>unsafe</code> usage in Wasmtime wherever possible, so if this is added it'd be great to do it without increasing the amount of <code>unsafe</code>. Additionally can you ensure there's a test for this? Otherwise it's pretty likely functionality is lost in a future refactoring.</p>\n</blockquote>",
        "id": 522464588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749077425
    },
    {
        "content": "<p>Milek7 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10874#issuecomment-2950504676\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10874\">PR #10874</a>:</p>\n<blockquote>\n<p>I think avoiding unsafe would require storing registry as <code>BTreeMap&lt;usize, Vec&lt;Arc&lt;CodeMemory&gt;&gt;&gt;</code>, would that be preferable?</p>\n</blockquote>",
        "id": 522837411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749238575
    }
]