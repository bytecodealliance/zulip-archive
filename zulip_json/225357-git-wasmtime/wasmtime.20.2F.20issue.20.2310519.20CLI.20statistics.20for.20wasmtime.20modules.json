[
    {
        "content": "<p>MA3CIN opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10519\">issue #10519</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>I believe wasmtime could benefit from outputting statistics regarding running instances. I'd ideally love to see: CPU, MEMORY usage and start up time (for cold starts)</p>\n<h4>Benefit</h4>\n<p>I believe outputting these stats will make a direct comparison to containers easier, thus making wasmtime adoption more appealing by highlighting its strong sides</p>\n<h4>Implementation</h4>\n<p>WasmEdge CLI has something simliar (not exactly all of the stats, but its a start) with the CLI option \"--enable-all-statistics\" (<a href=\"https://wasmedge.org/docs/start/build-and-run/cli/\">https://wasmedge.org/docs/start/build-and-run/cli/</a>)</p>\n<h4>Alternatives</h4>\n<p>I know that wasmtime supports linux profiling with perf, but i was not able to measure the 3 metrics mentioned above using perf</p>\n</blockquote>",
        "id": 509877954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743669774
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10519#issuecomment-2794399831\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10519\">issue #10519</a>:</p>\n<blockquote>\n<p>Thanks for the report! These sorts of metrics wouldn't be too bad to measure, for example memory consumed by the wasm module would be pretty easy to measure. Other metrics though like time taken, instructions executed, or fuel, can come at a cost of runtime in wasm itself. </p>\n<p>These sorts of features can of course always be built for embeddings of Wasmtime and so this is mostly a question of what the CLI does. I think it'd be reasonable to experiment with some flags to the CLI and test this out, and PRs are definitely welcome in this area!</p>\n</blockquote>",
        "id": 511453352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744301658
    }
]