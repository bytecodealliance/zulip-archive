[
    {
        "content": "<p><a href=\"https://github.com/saulecabrera\">saulecabrera</a> added the fuzz-bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418\">Issue #10418</a>.</p>",
        "id": 506456765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742298270
    },
    {
        "content": "<p><a href=\"https://github.com/saulecabrera\">saulecabrera</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418\">Issue #10418</a>.</p>",
        "id": 506456766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742298270
    },
    {
        "content": "<p>saulecabrera opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418\">issue #10418</a>:</p>\n<blockquote>\n<p>For the following program:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"nb\">i64.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\" \"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"c1\">;; label = @1</span>\n      <span class=\"nb\">unreachable</span>\n    <span class=\"k\">end</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">global.set</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">i64.const</span> <span class=\"mf\">288230376151711744</span>\n    <span class=\"nb\">i64.const</span> <span class=\"mf\">288230376151711744</span>\n    <span class=\"nb\">i64.mul</span><span class=\"err\">_wide_s</span>\n    <span class=\"nb\">i32.wrap_i64</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.xor</span>\n    <span class=\"nb\">global.set</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">i64.xor</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>When invoked via:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo<span class=\"w\"> </span>run<span class=\"w\"> </span>--<span class=\"w\"> </span>run<span class=\"w\"> </span>-Wwide-arithmetic<span class=\"o\">=</span>y<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\" \"</span><span class=\"w\"> </span>index.wat<span class=\"w\"> </span><span class=\"m\">0</span>\n</code></pre></div>\n<p>The result, using <code>-Ccompiler=cranelift</code> or <code>-Ccompiler=winch</code> or <code>--target=pulley64</code> is consistently the same: <code>0</code>. However, when invoked via:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>wasm_cli<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\" \"</span><span class=\"w\"> </span>index.wat<span class=\"w\"> </span><span class=\"m\">0</span>\n</code></pre></div>\n<p>The result is <code>4503599627370496</code></p>\n<p>Reducing a bit further, it seems the the problem is the ordering of the return values from <code>i64.mul_wide_s</code></p>\n<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"nb\">i64.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\" \"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"c1\">;; label = @1</span>\n      <span class=\"nb\">unreachable</span>\n    <span class=\"k\">end</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">global.set</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">i64.const</span> <span class=\"mf\">288230376151711744</span>\n    <span class=\"nb\">i64.const</span> <span class=\"mf\">288230376151711744</span>\n    <span class=\"nb\">i64.mul</span><span class=\"err\">_wide_s</span>\n    <span class=\"nb\">drop</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>The result for Wasmtime (using any of the compilers or pulley) is: <code>0</code>.<br>\nUsing <code>wasmi</code>  the result is: <code>4503599627370496</code></p>\n<p>Which clearly suggests that there's a discrepancy on how the results of <code>i64.mul_wide_s</code>  are handled in <code>wasmi</code>. According to the consistent results in Wasmtime, I'm tempted to suggest that this probably a bug in <code>wasmi</code>  itself, however, I'm opening this issue here first for confirmation. </p>\n<p>cc @alexcrichton @Robbepop <br>\n</p>\n</blockquote>",
        "id": 506456772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742298271
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418#issuecomment-2732915918\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418\">issue #10418</a>:</p>\n<blockquote>\n<p>Since the <code>wide-arithmetic</code> support in Wasmi is fairly new it likely is a bug in Wasmi. Going to inspect it as soon as I find time.</p>\n</blockquote>",
        "id": 506457257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742298391
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418\">issue #10418</a>:</p>\n<blockquote>\n<p>For the following program:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"nb\">i64.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\" \"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"c1\">;; label = @1</span>\n      <span class=\"nb\">unreachable</span>\n    <span class=\"k\">end</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">global.set</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">i64.const</span> <span class=\"mf\">288230376151711744</span>\n    <span class=\"nb\">i64.const</span> <span class=\"mf\">288230376151711744</span>\n    <span class=\"nb\">i64.mul</span><span class=\"err\">_wide_s</span>\n    <span class=\"nb\">i32.wrap_i64</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.xor</span>\n    <span class=\"nb\">global.set</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">i64.xor</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>When invoked via:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo<span class=\"w\"> </span>run<span class=\"w\"> </span>--<span class=\"w\"> </span>run<span class=\"w\"> </span>-Wwide-arithmetic<span class=\"o\">=</span>y<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\" \"</span><span class=\"w\"> </span>index.wat<span class=\"w\"> </span><span class=\"m\">0</span>\n</code></pre></div>\n<p>The result, using <code>-Ccompiler=cranelift</code> or <code>-Ccompiler=winch</code> or <code>--target=pulley64</code> is consistently the same: <code>0</code>. However, when invoked via:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>wasmi_cli<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\" \"</span><span class=\"w\"> </span>index.wat<span class=\"w\"> </span><span class=\"m\">0</span>\n</code></pre></div>\n<p>The result is <code>4503599627370496</code></p>\n<p>Reducing a bit further, it seems the the problem is the ordering of the return values from <code>i64.mul_wide_s</code></p>\n<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"nb\">i64.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\" \"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"c1\">;; label = @1</span>\n      <span class=\"nb\">unreachable</span>\n    <span class=\"k\">end</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">global.set</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">i64.const</span> <span class=\"mf\">288230376151711744</span>\n    <span class=\"nb\">i64.const</span> <span class=\"mf\">288230376151711744</span>\n    <span class=\"nb\">i64.mul</span><span class=\"err\">_wide_s</span>\n    <span class=\"nb\">drop</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>The result for Wasmtime (using any of the compilers or pulley) is: <code>0</code>.<br>\nUsing <code>wasmi</code>  the result is: <code>4503599627370496</code></p>\n<p>Which clearly suggests that there's a discrepancy on how the results of <code>i64.mul_wide_s</code>  are handled in <code>wasmi</code>. According to the consistent results in Wasmtime, I'm tempted to suggest that this probably a bug in <code>wasmi</code>  itself, however, I'm opening this issue here first for confirmation. </p>\n<p>cc @alexcrichton @Robbepop <br>\n</p>\n</blockquote>",
        "id": 506457260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742298391
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418#issuecomment-2732915918\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418\">issue #10418</a>:</p>\n<blockquote>\n<p>Since the <code>wide-arithmetic</code> support in Wasmi is fairly new it likely is a bug in Wasmi. Going to inspect it as soon as I find time.<br>\nFrom my understanding the <code>drop</code> instructions drops the high 64-bits of the result.<br>\n<code>288230376151711744^2 ~= 8,30767497e34</code> and <code>8,30767497e34 / 2^64 = 4503599627370496</code></p>\n</blockquote>",
        "id": 506458280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742298654
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418#issuecomment-2732915918\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418\">issue #10418</a>:</p>\n<blockquote>\n<p>Since the <code>wide-arithmetic</code> support in Wasmi is fairly new it likely is a bug in Wasmi. Going to inspect it as soon as I find time.</p>\n<p>From my understanding the <code>drop</code> instructions drops the high 64-bits of the result.<br>\n<code>288230376151711744^2 ~= 8,30767497e34</code> and <code>8,30767497e34 / 2^64 = 4503599627370496</code></p>\n</blockquote>",
        "id": 506458297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742298660
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418#issuecomment-2733460521\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418\">issue #10418</a>:</p>\n<blockquote>\n<p>@Robbepop this program:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">288230376151711744_</span><span class=\"k\">i64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">288230376151711744_</span><span class=\"k\">i64</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{a} * {b} = {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">wrapping_mul</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{a:#x} * {b:#x} = {:#x}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">wrapping_mul</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i128</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i128</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{a} * {b} = {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">wrapping_mul</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{a:#x} * {b:#x} = {:#x}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">wrapping_mul</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>prints</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">288230376151711744</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">288230376151711744</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"mh\">0x400000000000000</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mh\">0x400000000000000</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x0</span>\n<span class=\"mi\">288230376151711744</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">288230376151711744</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">83076749736557242056487941267521536</span>\n<span class=\"mh\">0x400000000000000</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mh\">0x400000000000000</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x100000000000000000000000000000</span>\n</code></pre></div>\n<p>so I think it's expected that the low bits are all zero?</p>\n</blockquote>",
        "id": 506496396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742308089
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418#issuecomment-2733517619\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418\">issue #10418</a>:</p>\n<blockquote>\n<p>@alexcrichton indeed, it seems that Wasmi const-eval for <code>wide-arithmetic</code> is off here. Sorry about that!</p>\n</blockquote>",
        "id": 506500822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742309105
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418\">issue #10418</a>:</p>\n<blockquote>\n<p>For the following program:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"nb\">i64.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\" \"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"c1\">;; label = @1</span>\n      <span class=\"nb\">unreachable</span>\n    <span class=\"k\">end</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">global.set</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">i64.const</span> <span class=\"mf\">288230376151711744</span>\n    <span class=\"nb\">i64.const</span> <span class=\"mf\">288230376151711744</span>\n    <span class=\"nb\">i64.mul</span><span class=\"err\">_wide_s</span>\n    <span class=\"nb\">i32.wrap_i64</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.xor</span>\n    <span class=\"nb\">global.set</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">i64.xor</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>When invoked via:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo<span class=\"w\"> </span>run<span class=\"w\"> </span>--<span class=\"w\"> </span>run<span class=\"w\"> </span>-Wwide-arithmetic<span class=\"o\">=</span>y<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\" \"</span><span class=\"w\"> </span>index.wat<span class=\"w\"> </span><span class=\"m\">0</span>\n</code></pre></div>\n<p>The result, using <code>-Ccompiler=cranelift</code> or <code>-Ccompiler=winch</code> or <code>--target=pulley64</code> is consistently the same: <code>0</code>. However, when invoked via:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>wasmi_cli<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\" \"</span><span class=\"w\"> </span>index.wat<span class=\"w\"> </span><span class=\"m\">0</span>\n</code></pre></div>\n<p>The result is <code>4503599627370496</code></p>\n<p>Reducing a bit further, it seems the the problem is the ordering of the return values from <code>i64.mul_wide_s</code></p>\n<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i64</span><span class=\"p\">)</span> <span class=\"nb\">i64.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\" \"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i64</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"c1\">;; label = @1</span>\n      <span class=\"nb\">unreachable</span>\n    <span class=\"k\">end</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">global.set</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">i64.const</span> <span class=\"mf\">288230376151711744</span>\n    <span class=\"nb\">i64.const</span> <span class=\"mf\">288230376151711744</span>\n    <span class=\"nb\">i64.mul</span><span class=\"err\">_wide_s</span>\n    <span class=\"nb\">drop</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>The result for Wasmtime (using any of the compilers or pulley) is: <code>0</code>.<br>\nUsing <code>wasmi</code>  the result is: <code>4503599627370496</code></p>\n<p>Which clearly suggests that there's a discrepancy on how the results of <code>i64.mul_wide_s</code>  are handled in <code>wasmi</code>. According to the consistent results in Wasmtime, I'm tempted to suggest that this probably a bug in <code>wasmi</code>  itself, however, I'm opening this issue here first for confirmation. </p>\n<p>cc @alexcrichton @Robbepop <br>\n</p>\n</blockquote>",
        "id": 506507043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742310462
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418#issuecomment-2739519584\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418\">issue #10418</a>:</p>\n<blockquote>\n<p>@saulecabrera @alexcrichton The bug has been fixed in Wasmi yesterday and today I released Wasmi v0.42.1 that includes this fix. So technically Wasmtime fuzzing could use v0.42.1 again with <code>wide-arithmetic</code> enabled if you feel like it makes sense. Not sure so I didn't create a PR, yet.</p>\n</blockquote>",
        "id": 506903139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742458147
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418#issuecomment-2739519584\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418\">issue #10418</a>:</p>\n<blockquote>\n<p>@saulecabrera @alexcrichton The bug has been fixed in Wasmi yesterday and today I released Wasmi v0.42.1 that includes this fix. So technically Wasmtime fuzzing could use v0.42.1 again with <code>wide-arithmetic</code> enabled if you feel like it makes sense. Not sure so I didn't create a PR, yet.</p>\n<p>The fix was trivial: <a href=\"https://github.com/wasmi-labs/wasmi/pull/1397\">https://github.com/wasmi-labs/wasmi/pull/1397</a></p>\n</blockquote>",
        "id": 506903251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742458187
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418#issuecomment-2740749284\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10418\">issue #10418</a>:</p>\n<blockquote>\n<p>Thanks! Opened up <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10430\">https://github.com/bytecodealliance/wasmtime/pull/10430</a> to re-enable</p>\n</blockquote>",
        "id": 506996917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742482551
    }
]