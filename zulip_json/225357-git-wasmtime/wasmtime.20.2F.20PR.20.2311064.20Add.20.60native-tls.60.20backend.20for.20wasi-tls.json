[
    {
        "content": "<p><strong>badeend</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-wasi-reviewers\">wasmtime-wasi-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>.</p>",
        "id": 524507566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750185025
    },
    {
        "content": "<p>badeend opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a> from <code>badeend:native_tls</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10089#issuecomment-2610420435\">initial wasi-tls implementation discussion</a>, the suggestion was floated to support both <code>rustls</code> and <code>native-tls</code>. The <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10249\">initial/current implementation</a> only supports <code>rustls</code>. This PR adds <code>native-tls</code> as an alternative TLS backend.</p>\n<p>The default TLS provider remains <code>rustls</code>. Consumers can switch to the <code>native-tls</code> backend by enabling the corresponding feature flags and then use the newly created <code>WasiTlsCtxBuilder::provider</code> method. On the CLI, this is exposed as <code>-S tls-provider=nativetls</code>.</p>\n<p>Adding this new backend immediately surfaced two bugs:</p>\n<h4>1. Improved compatibility of <code>test_tls_sample_application</code></h4>\n<p>The test used to perform a \"half-close\" after sending the HTTP request. This is a TLS1.3+ feature, though Rustls &amp; OpenSSL already supported it for TLS1.2 and lower. Technically, that makes them non-spec compliant, but they chose to align with the semantics of the underlying TCP connection. I suspect the TLS1.3 spec was updated to match what was already happening in reality.</p>\n<p>Anyhow, SChannel does not support half-closed connections and so the <code>read</code> call after the <code>close_output+shutdown</code> failed. I've reordered the test to first perform the HTTP conversation and _then_ do the TLS+TCP teardown.</p>\n<h4>2. Implement flushing on the AsyncWriteStream.</h4>\n<p>The AsyncWriteStream implementation was copied from the TCP equivalent, which doesn't need flushing. The TLS implementations _do_ maintain an internal buffer, so the <code>flush</code> call needs to be hooked up. Without it, the test would hang after making the change mentioned above.</p>\n<h4>Misc: Reorganized wasi-tls folder</h4>\n<p>To make life easier for myself, I've shuffled some code around. I've isolated the rustls-specific bits from the rest of the implementation. The folder structure now looks like:</p>\n<ul>\n<li><code>providers/*</code>: The rustls &amp; native-tls specific parts.</li>\n<li><code>bindings.rs</code>: The generated bindings.</li>\n<li><code>host.rs</code>: The host types + impls.</li>\n<li><code>io.rs</code>: WASI I/O conversion utility types.</li>\n</ul>\n</blockquote>",
        "id": 524507567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750185025
    },
    {
        "content": "<p><strong>badeend</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>.</p>",
        "id": 524507570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750185026
    },
    {
        "content": "<p><strong>badeend</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>.</p>",
        "id": 524507571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750185026
    },
    {
        "content": "<p><strong>badeend</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>.</p>",
        "id": 524507572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750185026
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>.</p>",
        "id": 524516337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750185615
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064#issuecomment-2984569067\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>:</p>\n<blockquote>\n<p>This all looks great to me, thanks again for working on this!</p>\n<p>My only comment would be could this update CI checks to perform a build of the <code>wasmtime-wasi-tls</code> crate with some feature combinations? I'd be interested to see <code>--no-default-features --features rustls</code> and one for native-tls to ensure the crate can built with only one of the two enabled.</p>\n<p>I'll file a separate PR to perform the vets as well.</p>\n</blockquote>",
        "id": 524727467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750258788
    },
    {
        "content": "<p>badeend edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10089#issuecomment-2610420435\">initial wasi-tls implementation discussion</a>, the suggestion was floated to support both <code>rustls</code> and <code>native-tls</code>. The <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10249\">initial/current implementation</a> only supports <code>rustls</code>. This PR adds <code>native-tls</code> as an alternative TLS backend.</p>\n<p>The default TLS provider remains <code>rustls</code>. Consumers can switch to the <code>native-tls</code> backend by enabling the corresponding feature flags and then use the newly created <code>WasiTlsCtxBuilder::provider</code> method. On the CLI, this is exposed as <code>-S tls-provider=nativetls</code>.</p>\n<p>Adding this new backend immediately surfaced two bugs:</p>\n<h4>1. Improved compatibility of <code>test_tls_sample_application</code></h4>\n<p>The test used to perform a \"half-close\" after sending the HTTP request. This is a TLS1.3+ feature, though Rustls &amp; OpenSSL already supported it for TLS1.2 and lower. Technically, that makes them non-spec compliant, but they chose to align with the semantics of the underlying TCP connection. I suspect the TLS1.3 spec was updated to match what was already happening in reality.</p>\n<p>Anyhow, SChannel does not support half-closed connections and so the <code>read</code> call after the <code>close_output+shutdown</code> failed. I've reordered the test to first perform the HTTP conversation and _then_ do the TLS+TCP teardown.</p>\n<h4>2. Implement flushing on the AsyncWriteStream.</h4>\n<p>The AsyncWriteStream implementation was copied from the TCP equivalent, which doesn't need flushing. The TLS implementations _do_ maintain an internal buffer, so the <code>flush</code> call needs to be hooked up. Without it, the test would hang after making the change mentioned above.</p>\n<h4>Misc: Reorganized wasi-tls folder</h4>\n<p>To make life easier for myself, I've shuffled some code around. I've isolated the rustls-specific bits from the rest of the implementation. The folder structure now looks like:</p>\n<ul>\n<li><code>providers/*</code>: The rustls &amp; native-tls specific parts.</li>\n<li><code>bindings.rs</code>: The generated bindings.</li>\n<li><code>host.rs</code>: The host types + impls.</li>\n<li><code>io.rs</code>: WASI I/O conversion utility types.</li>\n</ul>\n<p>CC: @jsturtevant </p>\n</blockquote>",
        "id": 524839594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750322131
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>.</p>",
        "id": 524841924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750323063
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>.</p>",
        "id": 524841982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750323083
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064#issuecomment-2987280367\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>:</p>\n<blockquote>\n<p>Is <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064/commits/4040567f21929a1d672ffdb1a587c74d5603a035\">this</a> the right place to do that?</p>\n</blockquote>",
        "id": 524842878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750323397
    },
    {
        "content": "<p>jsturtevant created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064#discussion_r2157405357\">PR review comment</a>:</p>\n<blockquote>\n<p>does it make sense to have to set two feature flags to enable the feature or should we provide a default to enable the feature or should we provide a default? </p>\n<p>Also a bit confused in the way to set this up. Do I need to configure both feature flags (<code>wasi-tls</code> and <code>nativetls</code> or <code>rusttls</code>) and then also set the provider with   <code>wasi_tls_ctx: WasiTlsCtxBuilder::new().provider(provider).build(),</code>?</p>\n</blockquote>",
        "id": 524922667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750352458
    },
    {
        "content": "<p>jsturtevant submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064#pullrequestreview-2943660741\">PR review</a>:</p>\n<blockquote>\n<p>Great finds in the bugs.  LGTM me overall</p>\n</blockquote>",
        "id": 524922668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750352458
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>.</p>",
        "id": 524936472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750360099
    },
    {
        "content": "<p>badeend submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064#pullrequestreview-2943851536\">PR review</a>.</p>",
        "id": 524936562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750360148
    },
    {
        "content": "<p>badeend created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064#discussion_r2157536442\">PR review comment</a>:</p>\n<blockquote>\n<p><code>rustls</code> is part of the <code>default</code> feature. So by default, <code>DefaultProvider</code> will point to the rustls provider and there's no need to configure anything on the <code>WasiTlsCtxBuilder</code>.</p>\n<p>Similarly, if you build with <code>--no-default-features --features nativetls</code>, then <code>DefaultProvider</code> will point to the native_tls provider and there's again no need to configure anything on the <code>WasiTlsCtxBuilder</code>.</p>\n<p>The only reason to call <code>WasiTlsCtxBuilder::provider</code> is when the crate has been built with multiple providers and you want to switch between them at run time. This is what happens in e.g. the test suite and in the CLI code.</p>\n<p>I've <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064/commits/240f5619541ae8ad0fa61cbe89831cd0d45c2995\">added some docs</a> to clarify this.</p>\n</blockquote>",
        "id": 524936564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750360148
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064#pullrequestreview-2946336977\">PR review</a>:</p>\n<blockquote>\n<p>Yep that works <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 525050760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750428929
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064#issuecomment-2992547536\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>:</p>\n<blockquote>\n<p>Hm ok so this is actually going to be kind of tricky. We test crates in CI with <code>--all-features</code> but we also test cross-compilations to various architectures, and native-tls on Linux wants OpenSSL which wants a system copy by default which isn't present for cross-compiled variants. </p>\n<p>One option might be to have a feature such as <code>openssl-vendored</code> on the <code>wasmtime-wasi-tls</code> crate which builds a vendored copy of <code>openssl-src</code>. That way <code>--all-features</code> of that would be activated an OpenSSL would be built from source?</p>\n<p>That's not an ideal option though IMO as ideally we wouldn't test native-tls by default and we'd instead have a dedicated job for just testin native-tls, but with <code>--all-features</code> that's not easy :(</p>\n</blockquote>",
        "id": 525090192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750445855
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064#issuecomment-2994082591\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>:</p>\n<blockquote>\n<p>How about moving <code>/crates/wasi-tls/src/providers/native_tls.rs</code> into a dedicated <code>wasi-tls-nativetls</code> crate and excluding that entire crate from the default test runs?</p>\n</blockquote>",
        "id": 525204293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750585524
    },
    {
        "content": "<p>badeend edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064#issuecomment-2994082591\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>:</p>\n<blockquote>\n<p>How about moving <code>/crates/wasi-tls/src/providers/native_tls.rs</code> into a dedicated <code>wasi-tls-nativetls</code> crate and excluding that entire crate from the default test runs?</p>\n<p><strong>Edit:</strong> And set up a separate CI job to test <code>wasi-tls-nativetls</code> in isolation on a Linux, MacOS and Windows host</p>\n</blockquote>",
        "id": 525204652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750586202
    },
    {
        "content": "<p>badeend edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064#issuecomment-2994082591\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>:</p>\n<blockquote>\n<p>How about moving <code>/crates/wasi-tls/src/providers/native_tls.rs</code> into a dedicated <code>wasi-tls-nativetls</code> crate and exclude that entire crate from the default test runs?</p>\n<p><strong>Edit:</strong> And set up a separate CI job to test <code>wasi-tls-nativetls</code> in isolation on a Linux, MacOS and Windows host</p>\n</blockquote>",
        "id": 525204667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750586228
    },
    {
        "content": "<p>badeend edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064#issuecomment-2994082591\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>:</p>\n<blockquote>\n<p>How about moving <code>/crates/wasi-tls/src/providers/native_tls.rs</code> into a dedicated <code>wasi-tls-nativetls</code> crate and exclude that entire crate from the default test runs?</p>\n<p><strong>Edit:</strong> And set up a separate CI job to test <code>wasi-tls-nativetls</code> in isolation on a Linux, MacOS and Windows host.</p>\n<p><strong>Edit2:</strong> A downside of this approach is that the wasmtime CLI may not reference the <code>wasi-tls-nativetls</code> package anymore either.</p>\n</blockquote>",
        "id": 525205253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750587309
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064#issuecomment-2997177470\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>:</p>\n<blockquote>\n<p>I think what you're proposing is probably the best option for now. You're right that it means that the CLI won't be easily buildable with native-tls, but that seems like a reasonable state of affairs for the time being and we can address that later if need be</p>\n</blockquote>",
        "id": 525371596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750697154
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>.</p>",
        "id": 525970391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750966988
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>.</p>",
        "id": 525972452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750968003
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>.</p>",
        "id": 525976839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750970076
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064#issuecomment-3009927480\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>:</p>\n<blockquote>\n<p>Could you take a look at my latest changes? I've ran it with <code>prtest:full</code> and everything (except <code>cargo vet</code>) now succeeds.</p>\n</blockquote>",
        "id": 525977464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750970390
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>.</p>",
        "id": 526097169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751034681
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>.</p>",
        "id": 526097188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751034686
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11064\">PR #11064</a>.</p>",
        "id": 526105989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751037312
    }
]