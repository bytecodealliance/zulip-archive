[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11784\">issue #11784</a>:</p>\n<blockquote>\n<p>Currently, the <code>Config</code> API has only <code>compiler_inlining</code>, which flips a global flag to enable the inliner, but its behavior is governed by more fine-grained flags.</p>\n<p>Some of these flags are exposed as hidden \"Cranelift flags\" interpreted by <code>wasmtime-cranelift</code> <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7cebfa206fe4a40ab54e9862f30b05c5fefb9043/crates/cranelift/src/builder.rs#L74-L85\">here</a>. These flags are set at least by the fuzzer <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7cebfa206fe4a40ab54e9862f30b05c5fefb9043/crates/fuzzing/src/generators/config.rs#L333-L352\">here</a>. That match in the setter in turn alters the tunables that are contained on the <code>wasmtime_cranelift::compiler::Compiler</code>.</p>\n<p>However, the actual inlining decision is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7cebfa206fe4a40ab54e9862f30b05c5fefb9043/crates/wasmtime/src/compile.rs#L787\">governed</a> by the <code>Tunables</code> held <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7cebfa206fe4a40ab54e9862f30b05c5fefb9043/crates/wasmtime/src/compile.rs#L676\">on the Engine</a>. These <code>Tunables</code> are <em>passed into</em> the compiler <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7cebfa206fe4a40ab54e9862f30b05c5fefb9043/crates/wasmtime/src/config.rs#L2531\">here</a>, when using the configuration to build the compiler object. However, note that the flow is one-way: the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7cebfa206fe4a40ab54e9862f30b05c5fefb9043/crates/environ/src/compile/mod.rs#L129\"><code>set_tunables</code></a> trait method takes a <code>Tunables</code> by value, i.e., copies all the tunable knobs once at that time. The copy is then altered <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7cebfa206fe4a40ab54e9862f30b05c5fefb9043/crates/wasmtime/src/config.rs#L2532-L2534\">in the next few lines</a> as the compiler flags are applied, but the original that ends up on the <code>Engine</code> never is.</p>\n<p>It's still a bit unclear to me how the fuzzer ultimately is able to set up fuzzing of inlining appropriately, but when I try to get intra-module inlining to work with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">compiler_inlining</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">cranelift_flag_set</span><span class=\"p\">(</span><span class=\"s\">\"wasmtime_inlining_intra_module\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"true\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I find that <code>intra_module_inlining</code> when queried by the inlining heuristics is still at its default <code>WhenUsingGc</code> rather than <code>Yes</code>. I had to add a <code>Config::compiler_force_Inlining()</code> method as a hack in #11769 to allow for testing, but we should probably support the hidden flag properly from the <code>Config</code> API instead. It's unclear to me what the right fix should be: either alter the plumbing so tunables updates can be made by the compiler (should <code>set_tunables</code> take a mutable borrow of the <code>Tunables</code>, held only while the builder is alive, and we can then move the clone into the build step?) or by adding a more first-class way of setting these inlining heuristics on the <code>Config</code>.</p>\n<p>cc @fitzgen </p>\n</blockquote>",
        "id": 542868644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759467736
    },
    {
        "content": "<p><a href=\"https://github.com/cfallin\">cfallin</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11784\">Issue #11784</a>.</p>",
        "id": 542868645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759467736
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11784\">issue #11784</a>:</p>\n<blockquote>\n<p>Currently, the <code>Config</code> API has only <code>compiler_inlining</code>, which flips a global flag to enable the inliner, but its behavior is governed by more fine-grained flags.</p>\n<p>Some of these flags are exposed as hidden \"Cranelift flags\" interpreted by <code>wasmtime-cranelift</code> <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7cebfa206fe4a40ab54e9862f30b05c5fefb9043/crates/cranelift/src/builder.rs#L74-L85\">here</a>. These flags are set at least by the fuzzer <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7cebfa206fe4a40ab54e9862f30b05c5fefb9043/crates/fuzzing/src/generators/config.rs#L333-L352\">here</a>. That match in the setter in turn alters the tunables that are contained on the <code>wasmtime_cranelift::compiler::Compiler</code>.</p>\n<p>However, the actual inlining decision is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7cebfa206fe4a40ab54e9862f30b05c5fefb9043/crates/wasmtime/src/compile.rs#L787\">governed</a> by the <code>Tunables</code> held <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7cebfa206fe4a40ab54e9862f30b05c5fefb9043/crates/wasmtime/src/compile.rs#L676\">on the Engine</a>. These <code>Tunables</code> are <em>passed into</em> the compiler <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7cebfa206fe4a40ab54e9862f30b05c5fefb9043/crates/wasmtime/src/config.rs#L2531\">here</a>, when using the configuration to build the compiler object. However, note that the flow is one-way: the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7cebfa206fe4a40ab54e9862f30b05c5fefb9043/crates/environ/src/compile/mod.rs#L129\"><code>set_tunables</code></a> trait method takes a <code>Tunables</code> by value, i.e., copies all the tunable knobs once at that time. The copy is then altered <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7cebfa206fe4a40ab54e9862f30b05c5fefb9043/crates/wasmtime/src/config.rs#L2532-L2534\">in the next few lines</a> as the compiler flags are applied, but the original that ends up on the <code>Engine</code> never is.</p>\n<p>It's still a bit unclear to me how the fuzzer ultimately is able to set up fuzzing of inlining appropriately, but when I try to get intra-module inlining to work with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">compiler_inlining</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">cranelift_flag_set</span><span class=\"p\">(</span><span class=\"s\">\"wasmtime_inlining_intra_module\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"true\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I find that <code>intra_module_inlining</code> when queried by the inlining heuristics is still at its default <code>WhenUsingGc</code> rather than <code>Yes</code>. I had to add a <code>Config::compiler_force_Inlining()</code> method as a hack in #11769 to allow for testing, but we should probably support the hidden flag properly from the <code>Config</code> API instead. It's unclear to me what the right fix should be: either alter the plumbing so tunables updates can be made by the compiler (should <code>set_tunables</code> take a mutable borrow of the <code>Tunables</code>, held only while the builder is alive, and we can then move the clone into the build step?) or by adding a more first-class way of setting these inlining heuristics on the <code>Config</code>.</p>\n<p>cc @fitzgen </p>\n</blockquote>",
        "id": 543411525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759786184
    }
]