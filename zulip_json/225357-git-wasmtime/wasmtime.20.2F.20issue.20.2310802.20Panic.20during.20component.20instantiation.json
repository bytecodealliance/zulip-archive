[
    {
        "content": "<p>moldhouse opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802\">issue #10802</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Work in progress. Currently we only witness this in our production code base. We are currently working on a minimal example. Yet we found it may be valuable to share the back trace with you up front.</p>\n<h3>Steps to Reproduce</h3>\n<p>See above.</p>\n<h3>Expected Results</h3>\n<p>Instantiating the component without a panic.</p>\n<h3>Actual Results</h3>\n<p>We encounter a panic.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>thread<span class=\"w\"> </span><span class=\"s1\">'tokio-runtime-worker'</span><span class=\"w\"> </span>panicked<span class=\"w\"> </span>at<span class=\"w\"> </span>/root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.5/src/backend/linux_raw/param/auxv.rs:302:68:\ncalled<span class=\"w\"> </span><span class=\"sb\">`</span>Option::unwrap<span class=\"o\">()</span><span class=\"sb\">`</span><span class=\"w\"> </span>on<span class=\"w\"> </span>a<span class=\"w\"> </span><span class=\"sb\">`</span>None<span class=\"sb\">`</span><span class=\"w\"> </span>value\nstack<span class=\"w\"> </span>backtrace:\n<span class=\"w\">   </span><span class=\"m\">0</span>:<span class=\"w\"> </span>__rustc::rust_begin_unwind\n<span class=\"w\">   </span><span class=\"m\">1</span>:<span class=\"w\"> </span>core::panicking::panic_fmt\n<span class=\"w\">   </span><span class=\"m\">2</span>:<span class=\"w\"> </span>core::panicking::panic\n<span class=\"w\">   </span><span class=\"m\">3</span>:<span class=\"w\"> </span>core::option::unwrap_failed\n<span class=\"w\">   </span><span class=\"m\">4</span>:<span class=\"w\"> </span>rustix::backend::param::auxv::init_auxv_impl\n<span class=\"w\">   </span><span class=\"m\">5</span>:<span class=\"w\"> </span>rustix::backend::param::auxv::init_auxv\n<span class=\"w\">   </span><span class=\"m\">6</span>:<span class=\"w\"> </span>&lt;wasmtime::runtime::vm::instance::allocator::on_demand::OnDemandInstanceAllocator<span class=\"w\"> </span>as<span class=\"w\"> </span>wasmtime::runtime::vm::instance::allocator::InstanceAllocatorImpl&gt;::allocate_fiber_stack\n<span class=\"w\">   </span><span class=\"m\">7</span>:<span class=\"w\"> </span>wasmtime::runtime::component::instance::InstancePre&lt;T&gt;::instantiate_async::<span class=\"o\">{{</span>closure<span class=\"o\">}}</span>\n<span class=\"w\">   </span><span class=\"m\">8</span>:<span class=\"w\"> </span>pharia_kernel::skills::v0_3::skill::SkillPre&lt;_T&gt;::instantiate_async::<span class=\"o\">{{</span>closure<span class=\"o\">}}</span>\n<span class=\"w\">   </span><span class=\"m\">9</span>:<span class=\"w\"> </span>&lt;pharia_kernel::skills::v0_3::skill::SkillPre&lt;engine_room::LinkerImpl&lt;alloc::boxed::Box&lt;dyn<span class=\"w\"> </span>pharia_kernel::csi::CsiForSkills+core::marker::Send&gt;&gt;&gt;<span class=\"w\"> </span>as<span class=\"w\"> </span>pharia_kernel::skills::Skill&gt;::run_as_function::<span class=\"o\">{{</span>closure<span class=\"o\">}}</span>\n<span class=\"w\">  </span><span class=\"m\">10</span>:<span class=\"w\"> </span>pharia_kernel::skill_runtime::SkillRuntimeActor&lt;C,S&gt;::run::<span class=\"o\">{{</span>closure<span class=\"o\">}}</span>::<span class=\"o\">{{</span>closure<span class=\"o\">}}</span>\n<span class=\"w\">  </span><span class=\"m\">11</span>:<span class=\"w\"> </span>&lt;futures_util::stream::stream::select_next_some::SelectNextSome&lt;St&gt;<span class=\"w\"> </span>as<span class=\"w\"> </span>core::future::future::Future&gt;::poll\n<span class=\"w\">  </span><span class=\"m\">12</span>:<span class=\"w\"> </span>tokio::runtime::task::core::Core&lt;T,S&gt;::poll\n<span class=\"w\">  </span><span class=\"m\">13</span>:<span class=\"w\"> </span>tokio::runtime::task::raw::poll\n<span class=\"w\">  </span><span class=\"m\">14</span>:<span class=\"w\"> </span>tokio::runtime::scheduler::multi_thread::worker::Context::run_task\n<span class=\"w\">  </span><span class=\"m\">15</span>:<span class=\"w\"> </span>tokio::runtime::task::raw::poll\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>We see the panic in wasmtime 32, not in 31. We do not see the problem on all platforms.</p>\n<p>We saw it on:</p>\n<ul>\n<li>MacOS (arm) running a Container with Ubuntu 24 (always)</li>\n<li>GitHub CI running the same Container (sometimes, flaky)</li>\n</ul>\n<p>We did not see it on:</p>\n<ul>\n<li>MacOS (arm) without Container</li>\n<li>Running the Container in our Prod environment</li>\n</ul>\n</blockquote>",
        "id": 519040028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747644773
    },
    {
        "content": "<p><a href=\"https://github.com/moldhouse\">moldhouse</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802\">Issue #10802</a>.</p>",
        "id": 519040029,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747644773
    },
    {
        "content": "<p>moldhouse <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802#issuecomment-2890192176\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802\">issue #10802</a>:</p>\n<blockquote>\n<p>@pacman82 @markus-klein-aa</p>\n</blockquote>",
        "id": 519040373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747644849
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802#issuecomment-2890412946\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802\">issue #10802</a>:</p>\n<blockquote>\n<p>The error happens at <a href=\"https://github.com/bytecodealliance/rustix/blob/cb01fbe4660844b67fdd4eee2a5f769518f6a655/src/backend/linux_raw/param/auxv.rs#L302\">https://github.com/bytecodealliance/rustix/blob/cb01fbe4660844b67fdd4eee2a5f769518f6a655/src/backend/linux_raw/param/auxv.rs#L302</a> which indicates that one of the auxv entries for the process may be incorrect. By the way are you running an arm64 version of Wasmtime or an x86_64 version on your mac?</p>\n</blockquote>",
        "id": 519057583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747648839
    },
    {
        "content": "<p>markus-klein-aa <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802#issuecomment-2890795533\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802\">issue #10802</a>:</p>\n<blockquote>\n<p>On CI we build for x86_64. Locally on our Mac OS Developer machines we build with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">podman</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">tag</span><span class=\"w\"> </span><span class=\"n\">pharia</span><span class=\"o\">-</span><span class=\"n\">kernel</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"n\">linux</span><span class=\"o\">/</span><span class=\"n\">arm64</span>\n</code></pre></div>\n<p>I am walking back a bit, that we witness the same error on CI. We need to validate that. It might be a different issue.</p>\n</blockquote>",
        "id": 519091337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747656997
    },
    {
        "content": "<p>markus-klein-aa <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802#issuecomment-2890801516\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802\">issue #10802</a>:</p>\n<blockquote>\n<p>Verified it also fails locally on our dev machines if we build for <code>x86_64</code>.</p>\n<p>Yet, it does not fail, if we build it natively without a container around it.</p>\n</blockquote>",
        "id": 519091885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747657119
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802#issuecomment-2890906146\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802\">issue #10802</a>:</p>\n<blockquote>\n<p>I'm not sure why this is panicking as I'm not familiar with auxv or how rustix is calculating the host page size, but I've submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10803\">https://github.com/bytecodealliance/wasmtime/pull/10803</a> to remove calls to this function which will somewhat indirectly \"fix\" this insofar as Wasmtime won't panic at that location any more.</p>\n<p>@markus-klein-aa if you're able to reduce I believe the rustix project would likely be thankful to have an issue about this panic on their issue tracker.</p>\n</blockquote>",
        "id": 519101655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747659236
    },
    {
        "content": "<p>markus-klein-aa <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802#issuecomment-2890918515\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802\">issue #10802</a>:</p>\n<blockquote>\n<p>Yeah, absolutely we want a minimal example. Yet this is some effort and we thought there might be value in sharing the stack trace up front.</p>\n</blockquote>",
        "id": 519102708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747659445
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802#issuecomment-2890995803\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802\">issue #10802</a>:</p>\n<blockquote>\n<p>FWIW the reproduction will likely be <a href=\"https://docs.rs/rustix/latest/rustix/param/fn.page_size.html\">invoking this function</a> and that's pretty much it. The main thing to reproduce is your environment which triggers this panic.</p>\n</blockquote>",
        "id": 519107678,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747660477
    },
    {
        "content": "<p>markus-klein-aa <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802#issuecomment-2891054592\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802\">issue #10802</a>:</p>\n<blockquote>\n<p>Hey, thanks for the hint. I'll give it a try!</p>\n</blockquote>",
        "id": 519113011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747661568
    },
    {
        "content": "<p>markus-klein-aa <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802#issuecomment-2897721897\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802\">issue #10802</a>:</p>\n<blockquote>\n<p>@alexcrichton You were correct about that we only need to call the function to reproduce it. Opened an issue in rustix. Thanks again.</p>\n</blockquote>",
        "id": 519595677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747829413
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10802\">issue #10802</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Work in progress. Currently we only witness this in our production code base. We are currently working on a minimal example. Yet we found it may be valuable to share the back trace with you up front.</p>\n<h3>Steps to Reproduce</h3>\n<p>See above.</p>\n<h3>Expected Results</h3>\n<p>Instantiating the component without a panic.</p>\n<h3>Actual Results</h3>\n<p>We encounter a panic.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>thread<span class=\"w\"> </span><span class=\"s1\">'tokio-runtime-worker'</span><span class=\"w\"> </span>panicked<span class=\"w\"> </span>at<span class=\"w\"> </span>/root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.5/src/backend/linux_raw/param/auxv.rs:302:68:\ncalled<span class=\"w\"> </span><span class=\"sb\">`</span>Option::unwrap<span class=\"o\">()</span><span class=\"sb\">`</span><span class=\"w\"> </span>on<span class=\"w\"> </span>a<span class=\"w\"> </span><span class=\"sb\">`</span>None<span class=\"sb\">`</span><span class=\"w\"> </span>value\nstack<span class=\"w\"> </span>backtrace:\n<span class=\"w\">   </span><span class=\"m\">0</span>:<span class=\"w\"> </span>__rustc::rust_begin_unwind\n<span class=\"w\">   </span><span class=\"m\">1</span>:<span class=\"w\"> </span>core::panicking::panic_fmt\n<span class=\"w\">   </span><span class=\"m\">2</span>:<span class=\"w\"> </span>core::panicking::panic\n<span class=\"w\">   </span><span class=\"m\">3</span>:<span class=\"w\"> </span>core::option::unwrap_failed\n<span class=\"w\">   </span><span class=\"m\">4</span>:<span class=\"w\"> </span>rustix::backend::param::auxv::init_auxv_impl\n<span class=\"w\">   </span><span class=\"m\">5</span>:<span class=\"w\"> </span>rustix::backend::param::auxv::init_auxv\n<span class=\"w\">   </span><span class=\"m\">6</span>:<span class=\"w\"> </span>&lt;wasmtime::runtime::vm::instance::allocator::on_demand::OnDemandInstanceAllocator<span class=\"w\"> </span>as<span class=\"w\"> </span>wasmtime::runtime::vm::instance::allocator::InstanceAllocatorImpl&gt;::allocate_fiber_stack\n<span class=\"w\">   </span><span class=\"m\">7</span>:<span class=\"w\"> </span>wasmtime::runtime::component::instance::InstancePre&lt;T&gt;::instantiate_async::<span class=\"o\">{{</span>closure<span class=\"o\">}}</span>\n<span class=\"w\">   </span><span class=\"m\">8</span>:<span class=\"w\"> </span>pharia_kernel::skills::v0_3::skill::SkillPre&lt;_T&gt;::instantiate_async::<span class=\"o\">{{</span>closure<span class=\"o\">}}</span>\n<span class=\"w\">   </span><span class=\"m\">9</span>:<span class=\"w\"> </span>&lt;pharia_kernel::skills::v0_3::skill::SkillPre&lt;engine_room::LinkerImpl&lt;alloc::boxed::Box&lt;dyn<span class=\"w\"> </span>pharia_kernel::csi::CsiForSkills+core::marker::Send&gt;&gt;&gt;<span class=\"w\"> </span>as<span class=\"w\"> </span>pharia_kernel::skills::Skill&gt;::run_as_function::<span class=\"o\">{{</span>closure<span class=\"o\">}}</span>\n<span class=\"w\">  </span><span class=\"m\">10</span>:<span class=\"w\"> </span>pharia_kernel::skill_runtime::SkillRuntimeActor&lt;C,S&gt;::run::<span class=\"o\">{{</span>closure<span class=\"o\">}}</span>::<span class=\"o\">{{</span>closure<span class=\"o\">}}</span>\n<span class=\"w\">  </span><span class=\"m\">11</span>:<span class=\"w\"> </span>&lt;futures_util::stream::stream::select_next_some::SelectNextSome&lt;St&gt;<span class=\"w\"> </span>as<span class=\"w\"> </span>core::future::future::Future&gt;::poll\n<span class=\"w\">  </span><span class=\"m\">12</span>:<span class=\"w\"> </span>tokio::runtime::task::core::Core&lt;T,S&gt;::poll\n<span class=\"w\">  </span><span class=\"m\">13</span>:<span class=\"w\"> </span>tokio::runtime::task::raw::poll\n<span class=\"w\">  </span><span class=\"m\">14</span>:<span class=\"w\"> </span>tokio::runtime::scheduler::multi_thread::worker::Context::run_task\n<span class=\"w\">  </span><span class=\"m\">15</span>:<span class=\"w\"> </span>tokio::runtime::task::raw::poll\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>We see the panic in wasmtime 32, not in 31. We do not see the problem on all platforms.</p>\n<p>We saw it on:</p>\n<ul>\n<li>MacOS (arm) running a Container with Ubuntu 24 (always)</li>\n<li>GitHub CI running the same Container (sometimes, flaky)</li>\n</ul>\n<p>We did not see it on:</p>\n<ul>\n<li>MacOS (arm) without Container</li>\n<li>Running the Container in our Prod environment</li>\n</ul>\n</blockquote>",
        "id": 519722460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747872706
    }
]