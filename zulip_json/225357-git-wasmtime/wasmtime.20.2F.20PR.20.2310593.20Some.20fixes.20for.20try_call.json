[
    {
        "content": "<p>bjorn3 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a> from <code>bjorn3:fix_try_call</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Together with a change to allow the system_v call conv, this is enough to pass as much of cg_clif's test suite as is expected given how much I wired up on the cg_clif side.</p>\n<p>The second commit is not strictly necessary for correctness, but does make the optimizer work better with try_call.</p>\n</blockquote>",
        "id": 512538578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744805753
    },
    {
        "content": "<p><strong>bjorn3</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>.</p>",
        "id": 512538579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744805753
    },
    {
        "content": "<p><strong>bjorn3</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>.</p>",
        "id": 512538580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744805753
    },
    {
        "content": "<p>bjorn3 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>:</p>\n<blockquote>\n<p><del>Together with a change to allow the system_v call conv, this is enough to pass as much of cg_clif's test suite as is expected given how much I wired up on the cg_clif side.</del></p>\n<p>Edit: Seems like rust's bootstrap executable still gets miscompiled, will fix in a later PR.</p>\n<p>The second commit is not strictly necessary for correctness, but does make the optimizer work better with try_call.</p>\n</blockquote>",
        "id": 512555034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744810463
    },
    {
        "content": "<p>bjorn3 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>:</p>\n<blockquote>\n<p><del>Together with a change to allow the system_v call conv, this is enough to pass as much of cg_clif's test suite as is expected given how much I wired up on the cg_clif side.</del></p>\n<p>The second commit is not strictly necessary for correctness, but does make the optimizer work better with try_call.</p>\n</blockquote>",
        "id": 512572799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744814991
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#issuecomment-2809842210\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>:</p>\n<blockquote>\n<p>The following gets miscompiled even with this PR (will fix in a future PR, but leaving my debugging notes here):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">ffi</span><span class=\"p\">::</span><span class=\"n\">CString</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">b\"ar\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"{s:?}\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Reduced so far to:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline(never)]</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">.</span><span class=\"n\">to_vec</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">buffer</span><span class=\"p\">.</span><span class=\"n\">into_boxed_slice</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">b\"ar\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// nul-terminator gets lost</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 512573257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744815096
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#issuecomment-2809842210\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>:</p>\n<blockquote>\n<p>The following gets miscompiled even with this PR (will fix in a future PR, but leaving my debugging notes here):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">ffi</span><span class=\"p\">::</span><span class=\"n\">CString</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">b\"ar\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"{s:?}\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Reduced so far to:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline(never)]</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">.</span><span class=\"n\">to_vec</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">buffer</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">b\"ar\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// nul-terminator gets lost</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 512573478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744815135
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#issuecomment-2809842210\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>:</p>\n<blockquote>\n<p>The following gets miscompiled even with this PR in release mode (will fix in a future PR, but leaving my debugging notes here):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">ffi</span><span class=\"p\">::</span><span class=\"n\">CString</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">b\"ar\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"{s:?}\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Reduced so far to:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline(never)]</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">.</span><span class=\"n\">to_vec</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">buffer</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">b\"ar\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// nul-terminator gets lost</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 512573610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744815167
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#pullrequestreview-2772928750\">PR review</a>:</p>\n<blockquote>\n<p>LGTM, but we should have a test for the first commit before this merges. Thanks!</p>\n</blockquote>",
        "id": 512581879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744817257
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#discussion_r2047171835\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind adding a simple test for a <code>try_call</code> where the same successor appears multiple times?</p>\n</blockquote>",
        "id": 512581885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744817257
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#discussion_r2047186215\">PR review comment</a>:</p>\n<blockquote>\n<p>This pass is used by <code>cg_clif</code>, I assume? We should probably have filetests for these changes, but I see that we don't have the infrastructure to run this pass on filetests at the moment, and I don't want to necessarily block on that. But longer term, we should either gain that functionality, so that we can hold it to our usual code standards, or else this pass should move into <code>cg_clif</code> (since I don't believe it relies on anything that isn't publicly exported).</p>\n</blockquote>",
        "id": 512581886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744817257
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#pullrequestreview-2772964061\">PR review</a>.</p>",
        "id": 512582658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744817411
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#discussion_r2047193792\">PR review comment</a>:</p>\n<blockquote>\n<p>This pass is part of the normal optimization pipeline of Cranelift and runs unconditionally.</p>\n</blockquote>",
        "id": 512582659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744817411
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#pullrequestreview-2773104449\">PR review</a>.</p>",
        "id": 512593493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744820125
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#discussion_r2047281171\">PR review comment</a>:</p>\n<blockquote>\n<p>Huh. <code>rust-analyzer</code> wasn't finding uses of it for me.</p>\n<p>Do we exercise it under the <code>test optimize</code> filetest mode? If so, can you add a filetest for it?</p>\n</blockquote>",
        "id": 512593496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744820125
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#issuecomment-2809842210\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>:</p>\n<blockquote>\n<p>The following gets miscompiled even with this PR in release mode (will fix in a future PR, but leaving my debugging notes here):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">ffi</span><span class=\"p\">::</span><span class=\"n\">CString</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">b\"ar\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"{s:?}\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Reduced so far to:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[inline(never)]</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline(never)]</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">buffer</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// nul-terminator gets lost</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 512802870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744889251
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#issuecomment-2809842210\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>:</p>\n<blockquote>\n<p>The following gets miscompiled even with this PR in release mode (will fix in a future PR, but leaving my debugging notes here):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">ffi</span><span class=\"p\">::</span><span class=\"n\">CString</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">b\"ar\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"{s:?}\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Reduced so far to:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[inline(never)]</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline(never)]</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">buffer</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// nul-terminator gets lost</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 512803322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744889403
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#issuecomment-2809842210\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>:</p>\n<blockquote>\n<p>The following gets miscompiled even with this PR in release mode (will fix in a future PR, but leaving my debugging notes here):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">ffi</span><span class=\"p\">::</span><span class=\"n\">CString</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">b\"ar\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"{s:?}\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Reduced so far to:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[inline(never)]</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline(never)]</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">buffer</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// nul-terminator gets lost</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 512803506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744889468
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>.</p>",
        "id": 512828041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744896765
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#issuecomment-2809842210\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>:</p>\n<blockquote>\n<p>&lt;details&gt;&lt;summary&gt;Fixed miscompilation&lt;/summary&gt;</p>\n<p>The following gets miscompiled even with this PR in release mode (will fix in a future PR, but leaving my debugging notes here):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">ffi</span><span class=\"p\">::</span><span class=\"n\">CString</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">b\"ar\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"{s:?}\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Reduced so far to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[inline(never)]</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline(never)]</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">buffer</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyCString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// nul-terminator gets lost</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>Edit: Pushed a commit to fix this miscompilation.</p>\n</blockquote>",
        "id": 512828347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744896848
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#pullrequestreview-2775770565\">PR review</a>.</p>",
        "id": 512828701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744896950
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#discussion_r2048969706\">PR review comment</a>:</p>\n<blockquote>\n<p><code>Context::optimize</code> contains an unconditional call to <code>self.eliminate_unreachable_code(isa)?;</code> which in turn calls this function.</p>\n</blockquote>",
        "id": 512828702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744896951
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>.</p>",
        "id": 512833568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744898308
    },
    {
        "content": "<p>bjorn3 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>:</p>\n<blockquote>\n<p>Together with a change to allow the system_v call conv, this is enough to pass most of cg_clif's test suite (including panicking tests). In addition rustc's compiletest now works just fine in panic=unwind mode. Not all rustc tests pass yet, but the test failures seem to be caused by either cg_clif or bugs in the tests themself.</p>\n<p>The second commit is not strictly necessary for correctness, but does make the optimizer work better with try_call.</p>\n</blockquote>",
        "id": 512834483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744898570
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>.</p>",
        "id": 512836096,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744898989
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>.</p>",
        "id": 512841170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744900250
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>.</p>",
        "id": 512848582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744902054
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#pullrequestreview-2776090353\">PR review</a>.</p>",
        "id": 512848750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744902097
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#discussion_r2049148139\">PR review comment</a>:</p>\n<blockquote>\n<p>Added a test. Also saw that there was a debug assertion that would have caused it. I've upgraded it to a regular assertion as it should be cheap.</p>\n</blockquote>",
        "id": 512848754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744902097
    },
    {
        "content": "<p>bjorn3 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#discussion_r2049148139\">PR review comment</a>.</p>",
        "id": 512848785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744902104
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>.</p>",
        "id": 512851242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744902681
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#pullrequestreview-2776134767\">PR review</a>.</p>",
        "id": 512851865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744902823
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#discussion_r2049173672\">PR review comment</a>:</p>\n<blockquote>\n<p>As for testing, I'm not sure how to do that given that the clif ir printing doesn't show a list of all exception tables, but rather only shows them as part of a <code>try_call</code> instruction.</p>\n</blockquote>",
        "id": 512851866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744902823
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>.</p>",
        "id": 512853553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744903235
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#pullrequestreview-2776222652\">PR review</a>:</p>\n<blockquote>\n<p>LGTM on the additional commits -- just one thought on the verifier change below. I'm excited that you found the memory-fence issue and have things working with <code>cg_clif</code> now!</p>\n</blockquote>",
        "id": 512859193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744904776
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#discussion_r2049228112\">PR review comment</a>:</p>\n<blockquote>\n<p>Perhaps we could <code>continue</code> here so we still check the remaining args?</p>\n</blockquote>",
        "id": 512859196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744904776
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#pullrequestreview-2776241529\">PR review</a>.</p>",
        "id": 512860095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744905048
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#discussion_r2049240202\">PR review comment</a>:</p>\n<blockquote>\n<p>Right, will fix.</p>\n</blockquote>",
        "id": 512860098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744905049
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>.</p>",
        "id": 512860419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744905136
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#pullrequestreview-2776245240\">PR review</a>.</p>",
        "id": 512860450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744905145
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#discussion_r2049242509\">PR review comment</a>:</p>\n<blockquote>\n<p>Done</p>\n</blockquote>",
        "id": 512860453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744905145
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#pullrequestreview-2776300162\">PR review</a>.</p>",
        "id": 512865572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744906556
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#discussion_r2049275718\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that's correct -- I can't see a way to test for dangling exception tables either unless we change the print format. I think this is probably fine to merge as-is -- the other direction (avoiding false-removals of actually used exception tables) is the more important one and is implicitly tested.</p>\n</blockquote>",
        "id": 512865576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744906556
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593#issuecomment-2813466257\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>:</p>\n<blockquote>\n<p>Looked over all commits and this looks good -- I'm going to do a short followup based on @bjorn3's <code>cg_clif</code> unwinding enabling work, so I'll go ahead and merge this now.</p>\n</blockquote>",
        "id": 512865750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744906600
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10593\">PR #10593</a>.</p>",
        "id": 512870364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744907860
    }
]