[
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10719\">issue #10719</a>:</p>\n<blockquote>\n<p>See the following existing compilation test:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e0431281326eb13b45af0d6dd7829304e18581d4/cranelift/filetests/filetests/isa/x64/simd-lane-access-compile.clif#L134-L137\">https://github.com/bytecodealliance/wasmtime/blob/e0431281326eb13b45af0d6dd7829304e18581d4/cranelift/filetests/filetests/isa/x64/simd-lane-access-compile.clif#L134-L137</a></p>\n<p>A constant from the post-function pool is being loaded into <code>%xmm1</code>, but the instruction that would use it <code>paddusb</code>, then re-loads it as it writes into <code>%xmm1</code>. Now, the <code>movdqu</code> seems correct in one sense: memory addresses to packed instructions must be 128-bit aligned so, when converting an <code>XmmMemAligned</code> to an <code>XmmMem</code>, Cranelift inserts an unaligned load. But the direct use by <code>paddusb</code> might also be correct: we may be aligning the start of the constant pool and so this may be just fine.</p>\n<p>Either way, something is not quite right, though:</p>\n<ul>\n<li>if the constant pool is _not_ aligned or this can't be communicated to the instruction, <code>paddusb</code> should not be using the address directly</li>\n<li>if the constant pool _is_ aligned and communicated properly, then the <code>movdqu</code> is redundant and should be removed</li>\n</ul>\n<p>Which is it? I'm leaning towards the latter because of sequences like the following:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e0431281326eb13b45af0d6dd7829304e18581d4/cranelift/filetests/filetests/isa/x64/simd-pairwise-add.clif#L154-L156\">https://github.com/bytecodealliance/wasmtime/blob/e0431281326eb13b45af0d6dd7829304e18581d4/cranelift/filetests/filetests/isa/x64/simd-pairwise-add.clif#L154-L156</a></p>\n<p>Those instructions have no trouble accessing the pool by aligned address... or are they incorrect?</p>\n</blockquote>",
        "id": 515817557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746230224
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10719#issuecomment-2852770415\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10719\">issue #10719</a>:</p>\n<blockquote>\n<p>Ok, I was getting confused by all of these constants and RIP-relative offsets. In the example I gave in the issue description, the disassembly corresponds to:</p>\n<table>\n<thead>\n<tr>\n<th>CLIF</th>\n<th>Disassembly</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>v0 = vconst.i8x16 ...</code></td>\n<td><code>movdqu 0x24(%rip), %xmm0</code></td>\n</tr>\n<tr>\n<td><code>v1 = vconst.i8x16 ...</code></td>\n<td><code>movdqu 0x1c(%rip), %xmm1</code></td>\n</tr>\n<tr>\n<td><code>v2 = swizzle v0, v1</code></td>\n<td><code>paddusb 0x24(%rip), %xmm1</code></td>\n</tr>\n<tr>\n<td>''</td>\n<td><code>pshufb %xmm1, %xmm0</code></td>\n</tr>\n</tbody>\n</table>\n<p>That lowering of <code>swizzle</code> corresponds to:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/1761bc3340438897fd9b8ce0676ab811912347d2/cranelift/codegen/src/isa/x64/lower.isle#L4644-L4646\">https://github.com/bytecodealliance/wasmtime/blob/1761bc3340438897fd9b8ce0676ab811912347d2/cranelift/codegen/src/isa/x64/lower.isle#L4644-L4646</a></p>\n<p>So there are three different constants being referred to here and <code>paddusb</code> is reading the constant we've already read into <code>%xmm1</code> and adding to it the <code>0x7070...</code> constant. All is well.</p>\n<p>I was worried about something more dire, so I feel we should close the issue, but you're right that we could deduplicate the constants in <code>v0</code> and <code>v1</code>.</p>\n</blockquote>",
        "id": 516317671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746489416
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10719\">issue #10719</a>:</p>\n<blockquote>\n<p>See the following existing compilation test:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e0431281326eb13b45af0d6dd7829304e18581d4/cranelift/filetests/filetests/isa/x64/simd-lane-access-compile.clif#L134-L137\">https://github.com/bytecodealliance/wasmtime/blob/e0431281326eb13b45af0d6dd7829304e18581d4/cranelift/filetests/filetests/isa/x64/simd-lane-access-compile.clif#L134-L137</a></p>\n<p>A constant from the post-function pool is being loaded into <code>%xmm1</code>, but the instruction that would use it <code>paddusb</code>, then re-loads it as it writes into <code>%xmm1</code>. Now, the <code>movdqu</code> seems correct in one sense: memory addresses to packed instructions must be 128-bit aligned so, when converting an <code>XmmMemAligned</code> to an <code>XmmMem</code>, Cranelift inserts an unaligned load. But the direct use by <code>paddusb</code> might also be correct: we may be aligning the start of the constant pool and so this may be just fine.</p>\n<p>Either way, something is not quite right, though:</p>\n<ul>\n<li>if the constant pool is _not_ aligned or this can't be communicated to the instruction, <code>paddusb</code> should not be using the address directly</li>\n<li>if the constant pool _is_ aligned and communicated properly, then the <code>movdqu</code> is redundant and should be removed</li>\n</ul>\n<p>Which is it? I'm leaning towards the latter because of sequences like the following:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e0431281326eb13b45af0d6dd7829304e18581d4/cranelift/filetests/filetests/isa/x64/simd-pairwise-add.clif#L154-L156\">https://github.com/bytecodealliance/wasmtime/blob/e0431281326eb13b45af0d6dd7829304e18581d4/cranelift/filetests/filetests/isa/x64/simd-pairwise-add.clif#L154-L156</a></p>\n<p>Those instructions have no trouble accessing the pool by aligned address... or are they incorrect?</p>\n</blockquote>",
        "id": 516319492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746490508
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10719#issuecomment-2852812534\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10719\">issue #10719</a>:</p>\n<blockquote>\n<p>Ah, great. I think also I missed previously that constants <em>are</em> deduplicated at the CLIF level; writing a little test by hand with two <code>vconst.i8x16 ABCD...</code> instances shows that they reduce to two <code>vconst.i8x16 const0</code> instructions. So we're doing all we can in the compiler already, and I agree we can close this.</p>\n</blockquote>",
        "id": 516319493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746490508
    }
]