[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411\">PR #11411</a> from <code>alexcrichton:less-lazy-gc-store</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit is an effort to minimize the number of entrypoints which might lazily allocate a GC store. The is currently done through <code>StoreOpaque::gc_store_mut</code> but this method is very commonly used meaning that there are many many places to audit for lazily allocating a GC store. The reason that this needs an audit is that lazy allocation is an async operation right now that must be on a fiber and is something I'm looking to fix as part of #11262.</p>\n<p>This commit performs a few refactorings to achieve this:</p>\n<ul>\n<li>\n<p><code>gc_store_mut</code> is renamed to <code>ensure_gc_store</code>. This is intended to be an <code>async</code> function in the future and clearly demarcates where lazy allocation of a GC store is occurring.</p>\n</li>\n<li>\n<p><code>require_gc_store{,_mut}</code> is now added which is a pure accessor of the GC store with no lazy allocation. Most locations previously using <code>gc_store_mut</code> are updated to use this instead.</p>\n</li>\n</ul>\n<p>Documentation is added to store methods to clearly indicate which ones are allocating and which ones should only be called in a context where allocation should already have happened.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 533546174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754703667
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411\">PR #11411</a>.</p>",
        "id": 533546175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754703667
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411\">PR #11411</a>.</p>",
        "id": 533546176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754703668
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#issuecomment-3170057022\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411\">PR #11411</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\", \"wasmtime:ref-types\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: wasmtime:ref-types</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 533551431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754711868
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#issuecomment-3175024934\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411\">PR #11411</a>:</p>\n<blockquote>\n<p>@fitzgen ok so turns out there were more places than expected that really do lazily allocate a GC store, notably dealing with i31ref and null references. Best I can think of for handling this is to either:</p>\n<ol>\n<li>Support allocating a GC store without a GC heap so things like <code>write_gc_ref</code> if the reference is i31ref or null. We'd then have <code>ensure_gc_store</code> (sync, just allocates some data structures) and <code>ensure_gc_heap</code> (async, allocates a heap) where both return <code>&amp;mut GcStore</code>. Just <code>ensure_gc_store</code> wouldn't allocate a heap so we'd still skip it with i31ref and null references.</li>\n<li>Change  callers of <code>write_gc_ref</code> to internally check for null references and i31ref an directly perform writes. This would basically require that all GC implementations don't need barriers for i31ref and null and would require more runtime checking in the host when performing those writes.</li>\n</ol>\n<p>Do you  have other ideas and/or a preference about how might be best to resolve this?</p>\n</blockquote>",
        "id": 533803019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754921475
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#issuecomment-3175974531\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411\">PR #11411</a>:</p>\n<blockquote>\n<blockquote>\n<p>Change callers of <code>write_gc_ref</code> to internally check for null references and i31ref an directly perform writes. This would basically require that all GC implementations don't need barriers for i31ref and null and would require more runtime checking in the host when performing those writes.</p>\n</blockquote>\n<p>We already bake in the assumption that <code>i31ref</code>s don't need barriers in various places, because they aren't actually GC heap objects, so they aren't managed by the GC runtime. Same for null pointers. <em>Although</em> writing an <code>i31ref</code> or null reference into a field of a non-null object <em>does</em> need to call GC barriers.</p>\n<p>Anyways, we have some of these checks in the <code>GcStore::*</code> barrier methods, and we could pull them out to being <code>StoreOpaque::*</code> barrier methods perhaps.</p>\n<p>Also, if we have a non-<code>i31ref</code>, non-null reference, then we <em>must</em> have already allocated the GC store. And if we don't have one of those, then we don't need barriers, so we don't need to allocate a <code>GcStore</code> lazily to run barriers.</p>\n<p>So I think that the <code>StoreOpaque::*</code> barrier methods shouldn't ever need to lazily allocate a <code>GcStore</code>. Basically something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">StoreOpaque</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">clone_gc_ref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">gc_ref</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">GcRef</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">GcRef</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">gc_ref</span><span class=\"p\">.</span><span class=\"n\">is_i31</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">gc_ref</span><span class=\"p\">.</span><span class=\"n\">copy_i31</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">gc_store</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"non-null, non-i31 gc ref means we must have a gc store\"</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">clone_gc_ref</span><span class=\"p\">(</span><span class=\"n\">gc_ref</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 533835452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754932290
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411\">PR #11411</a>.</p>",
        "id": 533836784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754932849
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#pullrequestreview-3106910664\">PR review</a>.</p>",
        "id": 533838267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754933459
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#discussion_r2267479377\">PR review comment</a>:</p>\n<blockquote>\n<p>Reminder to finish this doc comment</p>\n</blockquote>",
        "id": 533838268,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754933459
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#discussion_r2267504717\">PR review comment</a>:</p>\n<blockquote>\n<p>It isn't clear to me why these can <code>require</code> rather than <code>ensure</code>? Wouldn't we need to <code>ensure</code> in <code>Global::new</code> or somewhere in order for this <code>require</code> to be okay?</p>\n</blockquote>",
        "id": 533838269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754933459
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#discussion_r2267492875\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW, if these lazy-allocation sites in <code>initialize_tables</code> are problematic, we could do <code>require_gc_store</code> here and require that callers check and initialize the gc heap if necessary. For instances, they should already be allocated by instantiation. For host tables, we would need to add a new check, but that should be straightforward enough to add.</p>\n</blockquote>",
        "id": 533838270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754933459
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#discussion_r2267484617\">PR review comment</a>:</p>\n<blockquote>\n<p>Perhaps provide some examples of when it should have already happened?</p>\n<ul>\n<li>We have a non-null, non-i31ref gc ref: in order to have allocated this reference's object, we must have allocated a gc heap and associated <code>GcStore</code></li>\n<li>We are working with an instance whose associated <code>wasmtime_environ::Module::needs_gc_heap</code> flag is true: we always allocate the gc store during instantiation for these moduels.</li>\n<li>etc</li>\n</ul>\n</blockquote>",
        "id": 533838271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754933459
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#pullrequestreview-3107276443\">PR review</a>.</p>",
        "id": 533849947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754938675
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#discussion_r2267712516\">PR review comment</a>:</p>\n<blockquote>\n<p>These are the problematic writes yeah and a leading cause of failure in the tests below. There's no such <code>ensure</code> in <code>Global::new</code> right now which is why these are failing.</p>\n</blockquote>",
        "id": 533849949,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754938676
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411\">PR #11411</a>.</p>",
        "id": 533856052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754941327
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411\">PR #11411</a>.</p>",
        "id": 533857351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754941918
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#pullrequestreview-3107566097\">PR review</a>.</p>",
        "id": 533857476,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754941962
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#discussion_r2267869507\">PR review comment</a>:</p>\n<blockquote>\n<p>Agreed yeah, I updated compilation to look at the top type of tables and flag <code>needs_gc_heap</code> from that as appropriate.</p>\n</blockquote>",
        "id": 533857477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754941963
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#issuecomment-3176685345\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411\">PR #11411</a>:</p>\n<blockquote>\n<p>Ok I think everything should be handled now. Mind taking another look @fitzgen?</p>\n</blockquote>",
        "id": 533857519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754941984
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411\">PR #11411</a>.</p>",
        "id": 533857763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754942102
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#pullrequestreview-3107586245\">PR review</a>.</p>",
        "id": 533859821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754942933
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#discussion_r2267886136\">PR review comment</a>:</p>\n<blockquote>\n<p>LOL how did this sneak by????</p>\n</blockquote>",
        "id": 533859822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754942933
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#discussion_r2267883590\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                    self.result.module.needs_gc_heap |= table\n                        .ref_type\n                        .is_vmgcref_type_and_points_to_object();\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 533859823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754942933
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411\">PR #11411</a>.</p>",
        "id": 533861202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754943590
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#pullrequestreview-3107669108\">PR review</a>.</p>",
        "id": 533861422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754943695
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411#discussion_r2267937857\">PR review comment</a>:</p>\n<blockquote>\n<p>I ended up going with <code>is_vmgcref_type</code> since the method here is on <code>wasmtime_environ</code> types and not <code>wasmtime</code> types (therefore <code>is_vmgcref_type_and_points_to_object</code> not naively available). I tried using <code>is_vmgcref_type_not_i31</code> but due to the way table initialization works it requires the GC store to be <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8b68f6f193cd745b65cfea91d111582654a2701f/crates/wasmtime/src/runtime/vm/instance/allocator.rs#L630\">present right now</a> so I switched it to <code>is_vmgcref_type</code>. Should be easy enough to fix in the future if we really want, but I figure it's not too important to be too optimal here and keeping the same code between the externref/exnref/anyref clauses is nice</p>\n</blockquote>",
        "id": 533861424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754943695
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411\">PR #11411</a>.</p>",
        "id": 533862922,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754944441
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411\">PR #11411</a>.</p>",
        "id": 533863616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754944767
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11411\">PR #11411</a>.</p>",
        "id": 533867885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754946598
    }
]