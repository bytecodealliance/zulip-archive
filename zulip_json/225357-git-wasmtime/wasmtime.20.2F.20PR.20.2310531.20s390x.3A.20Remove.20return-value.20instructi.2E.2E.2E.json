[
    {
        "content": "<p>uweigand opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10531\">PR #10531</a> from <code>uweigand:s390x-retval-loads</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This is a follow-on to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10502\">https://github.com/bytecodealliance/wasmtime/pull/10502</a> implementing the same logic for s390x.</p>\n<p>Like other platforms, we now no longer emit any instructions handling return values after the call instruction; instead, everything is done within a pseudo Call instruction.  Unlike other platforms, this also has to handle vector lane swapping when calling between ABIs that mix BE and LE lane orders.  The pseudo Call instruction needs enough type information to make this choice, therefore I had to add a type field to the RetLocation::Reg case (the ::Stack case already had one).</p>\n<p>All other changes are contained within the s390x back-end.  To simplify the implementation, the patch also implements a number of clean-ups:</p>\n<ul>\n<li>Introduce a MemArg::SpillOffset variant</li>\n<li>Remove the (unnecessary on this platform) island code size check</li>\n<li>Merge the CallInd instructions into the base Call instructions, using a new CallInstDest type to carry the call destination</li>\n</ul>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 510503413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743960675
    },
    {
        "content": "<p><strong>uweigand</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10531\">PR #10531</a>.</p>",
        "id": 510503416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743960676
    },
    {
        "content": "<p><strong>uweigand</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10531\">PR #10531</a>.</p>",
        "id": 510503417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743960676
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10531#issuecomment-2781525866\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10531\">PR #10531</a>:</p>\n<blockquote>\n<p>Hi @cfallin , this is the s390x implementation of the new return-value logic.   Note that I'm seeing some slight code-gen (performance) regressions, e.g. in <code>vec-abi-128.clif</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">basr</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r4</span>\n<span class=\"o\">-</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">vl</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xb0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r15</span><span class=\"p\">)</span>\n<span class=\"o\">+</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">vl</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xb0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r15</span><span class=\"p\">)</span>\n<span class=\"o\">+</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">vst</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xc0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r15</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">lgr</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r6</span>\n<span class=\"o\">-</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">vst</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r2</span><span class=\"p\">)</span>\n<span class=\"o\">-</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">lmg</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xf0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r15</span><span class=\"p\">)</span>\n<span class=\"o\">+</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">vl</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v19</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xc0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r15</span><span class=\"p\">)</span>\n<span class=\"o\">+</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">vst</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v19</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r2</span><span class=\"p\">)</span>\n<span class=\"o\">+</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">lmg</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x100</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r15</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">br</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r14</span>\n</code></pre></div>\n<p>Looks like the register allocator does not allocate the vector return value into a register but to a spill slot, even though most registers would be available.   Maybe the problem is that on the platform all vector registers are clobbered by calls, and therefore in the clobber list of the pseudo Call instruction.  But that shouldn't prevent the allocator from chosing the register as output - not sure if this can be modeled ...<br>\n</p>\n</blockquote>",
        "id": 510503753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743960931
    },
    {
        "content": "<p>uweigand updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10531\">PR #10531</a>.</p>",
        "id": 510504116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743961212
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10531#issuecomment-2781549133\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10531\">PR #10531</a>:</p>\n<blockquote>\n<p>A register can only be in the clobber list or the output list, not both at the same time.</p>\n</blockquote>",
        "id": 510508234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743964234
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10531#issuecomment-2781607980\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10531\">PR #10531</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:area:machinst\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 510514002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743968686
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10531#pullrequestreview-2747656870\">PR review</a>:</p>\n<blockquote>\n<p>LGTM but I will fully admit I am least familiar with s390x out of all of our backends.</p>\n<p>Not sure if you also want to take a look at this, @cfallin.</p>\n</blockquote>",
        "id": 510735126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744048905
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10531#issuecomment-2784170427\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10531\">PR #10531</a>:</p>\n<blockquote>\n<p>Yep, this is on my queue as well; I'll make a pass over it. Thanks Ulrich for getting this together so quickly!</p>\n</blockquote>",
        "id": 510736690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744049435
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10531#pullrequestreview-2747797110\">PR review</a>:</p>\n<blockquote>\n<p>Looks great to me as well. Thanks!</p>\n</blockquote>",
        "id": 510745001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744052223
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10531\">PR #10531</a>.</p>",
        "id": 510748967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744053487
    }
]