[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10775\">PR #10775</a> from <code>abrown:refactor-reg-mem-imm</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>While reflecting on why #10762 is hard, it seemed that the underlying problem to many ISLE matching issues is our inability to actually inspect the variants of the register specific versions of <code>RegMem</code> and <code>RegMemImm</code>. We had been wrapping instances of these <code>Reg*</code> types, but this change pushes the variants down to: <code>GprMem</code>, <code>GprMemImm</code>, <code>XmmMem</code>, <code>XmmMemAligned</code>, <code>XmmMemImm</code>, and <code>XmmMemAlignedImm</code>. With this, it should be possible to match directly on the variants in ISLE. This does not change any functionality.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 518144980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747251225
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10775\">PR #10775</a>.</p>",
        "id": 518144981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747251225
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10775\">PR #10775</a>.</p>",
        "id": 518144982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747251225
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10775#pullrequestreview-2841291603\">PR review</a>.</p>",
        "id": 518145163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747251288
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10775#discussion_r2089607544\">PR review comment</a>:</p>\n<blockquote>\n<p>Is it possible to create a <code>GprMem.Reg</code> in ISLE using the wrong kind of register? If so, we could alter this type to <code>Gpr</code>?</p>\n</blockquote>",
        "id": 518145164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747251289
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10775#discussion_r2089607544\">PR review comment</a>.</p>",
        "id": 518145228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747251312
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10775#issuecomment-2881701917\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10775\">PR #10775</a>:</p>\n<blockquote>\n<p>I will say, having tried to use this in #10762, that it doesn't just \"solve everything.\" So we should judge this on whether it will make future matching easier. I know that I've reached for this kind of matching in the past but was frustrated it didn't exist.</p>\n</blockquote>",
        "id": 518167319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747260638
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10775#pullrequestreview-2849038547\">PR review</a>.</p>",
        "id": 518936609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747586080
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10775#discussion_r2094572604\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be possible to type this as <code>(Gpr (reg Gpr))</code>? That more closely matches the semantics of the <code>GprMem</code> constructor in Rust</p>\n</blockquote>",
        "id": 518936611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747586081
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10775#discussion_r2112279516\">PR review comment</a>:</p>\n<blockquote>\n<p>Following up from today's Cranelift meeting, where we briefly discussed this PR: I want to +1 Alex's comment here.</p>\n<p>We want to maintain the invariant that all <code>Gpr*</code> newtypes can only ever contain GPR registers when they aren't a memory or immediate or whatever. If we expose raw <code>Reg</code>s in these <code>enum</code> variants, then users can accidentally (say transitively through a series of abstractions) do something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"p\">::</span><span class=\"n\">Reg</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">gpr_mem</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">mem</span><span class=\"p\">::</span><span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">my_xmm_reg</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>which would break that invariant.</p>\n<p>In order to both allow matching on <code>GprMem</code> et al and preserve that invariant, we need to define new <code>enum</code>s (to allow matching) but keep the register variants as <code>Gpr</code>s (to preserve encapsulation and the GPR invariant). This would look like the ISLE equivalent of something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">GprMem</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Gpr</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">Mem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">SyntheticAmode</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Which is, I believe, what Alex is suggesting just above this comment.</p>\n</blockquote>",
        "id": 520929400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748448780
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10775#pullrequestreview-2875685131\">PR review</a>.</p>",
        "id": 520929401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748448780
    }
]