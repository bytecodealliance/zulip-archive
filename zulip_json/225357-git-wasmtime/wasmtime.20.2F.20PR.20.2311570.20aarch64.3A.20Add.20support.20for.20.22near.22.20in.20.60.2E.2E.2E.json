[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11570\">PR #11570</a> from <code>alexcrichton:aarch64-near-symbol</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>The current aarch64 backend does not support <code>symbol_value</code> to get the value of a function, for example, with a \"near\" relocation using a relative relocation. Currently it uses an <code>Abs8</code> relocation which means that it's not suitable in Wasmtime, for example.</p>\n<p>This commit refactors relocation/external name support in the aarch64 backend to support this mode of relocation. The previous <code>LoadExtName</code> was split into <code>LoadExtName{Got,Near,Far}</code> where the \"near\" bit is what's new to the backend. The preexisting <code>symbol-value.clif</code>-style tests were updated to match the x64 backend which has a more comprehensive suite of examples of what it looks like to refer to various symbols.</p>\n<p>The goal of this commit is to enable Wasmtime to generate code which refers to a relative point elsewhere in the code (e.g. an exception handler) and load the value into a register. This part isn't filled out yet, but it seemed good to at least in the meantime fill out these missing relocations in the backend.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 536839154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756490790
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11570\">PR #11570</a>.</p>",
        "id": 536839155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756490791
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11570\">PR #11570</a>.</p>",
        "id": 536839156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756490791
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11570#pullrequestreview-3169683118\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! This definitely makes sense to have.</p>\n</blockquote>",
        "id": 536843578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756492756
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11570#discussion_r2310845668\">PR review comment</a>:</p>\n<blockquote>\n<p>On looking a bit further, it seems that <a href=\"https://github.com/bytecodealliance/wasmtime/blob/0744262f79e235b172331f5ba1a2c43b5aedcbfb/cranelift/codegen/src/ir/function.rs#L325\"><code>Function::is_leaf</code></a> only looks to see if there are signatures -- so <code>func_addr</code> triggers the \"not a leaf function\" mode and forces the frame.</p>\n<p>Mind filing an issue that we should probably determine leaf-ness by scanning VCode instead for any instructions that claim to be calls? It should be machine-dependent anyway since libcalls can happen even in functions without IR-level calls. (I suppose that <code>is_leaf</code> and the no-frame ABI optimization isn't even right, in that case -- but we get away with it because the aarch64 backend doesn't fall back to any libcalls for FP stuff, and also because this configuration isn't exposed to Wasmtime?)</p>\n</blockquote>",
        "id": 536843579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756492756
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11570#discussion_r2310830858\">PR review comment</a>:</p>\n<blockquote>\n<p>Sort of curious that the leaf-function optimization is no longer happening here, and we're getting a frame now -- won't matter for Wasmtime since we always force frames, but is there a reason you're aware of that this is happening?</p>\n</blockquote>",
        "id": 536843580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756492756
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11570#issuecomment-3238232005\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11570\">PR #11570</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:area:machinst\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 536859719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756500298
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11570#pullrequestreview-3170277898\">PR review</a>.</p>",
        "id": 536863000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756502149
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11570#discussion_r2311299720\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure thing! <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11573\">https://github.com/bytecodealliance/wasmtime/issues/11573</a></p>\n<p>And yeah AFAIK we're ok in Wasmtime, but I''m not 100% sure in that judgment. Your reasoning sounds reasonable to me, however</p>\n</blockquote>",
        "id": 536863002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756502150
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11570\">PR #11570</a>.</p>",
        "id": 536866332,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756504715
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11570\">PR #11570</a>.</p>",
        "id": 536874991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756512400
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11570\">PR #11570</a>.</p>",
        "id": 536876637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756514044
    }
]