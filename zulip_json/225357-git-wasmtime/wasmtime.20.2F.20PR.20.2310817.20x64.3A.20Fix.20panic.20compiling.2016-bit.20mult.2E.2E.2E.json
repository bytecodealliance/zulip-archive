[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817\">PR #10817</a>.</p>",
        "id": 519460902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747769684
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817\">PR #10817</a> from <code>alexcrichton:fix-imul-fuzz</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit fixes a minor regression from #10782 found via fuzzing. The regression is 16-bit immediates were forced to fit from an <code>i32</code> value into a <code>u16</code> for 16-bit multiplication. This meant though that negative numbers failed this conversion which meant that ISLE would panic due to the value not being matched. This fixes the logic to first fit the i32 into an i16 and then cast that to a u16 where the first phase should hit all the constants that are possible in Cranelift.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 519460903,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747769684
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817\">PR #10817</a>.</p>",
        "id": 519460904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747769684
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/dicej\">dicej</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817\">PR #10817</a>.</p>",
        "id": 519460906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747769684
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817\">PR #10817</a>.</p>",
        "id": 519460907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747769684
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817#pullrequestreview-2855375400\">PR review</a>.</p>",
        "id": 519461265,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747769809
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817#discussion_r2098726101\">PR review comment</a>:</p>\n<blockquote>\n<p>I'll admit this is testing the limits of my CLIF knowledge. This will fail when the <code>i32</code> value fits in a <code>u16</code>, but not an <code>i16</code>, meaning that we'll still panic during instruction selection from that. I don't know whether that's possible in CLIF though, or if <code>iconst</code> values are always sign-extended from their type.</p>\n</blockquote>",
        "id": 519461267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747769809
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817#pullrequestreview-2855375444\">PR review</a>.</p>",
        "id": 519461268,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747769810
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817\">PR #10817</a>.</p>",
        "id": 519461282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747769815
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817#discussion_r2098747005\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh, missed that, sorry -- unfortunately we've standardized on zero extension instead (it keeps the majority of cases simpler). Fortunately if this extractor returns <code>None</code> then the rule just doesn't match -- no runtime panic unless there's not another fallback? Let's (i) add a test case with a value in that range (say 40000) and (ii) verify there is...</p>\n</blockquote>",
        "id": 519463608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747770725
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817#pullrequestreview-2855408908\">PR review</a>.</p>",
        "id": 519463609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747770725
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817\">PR #10817</a>.</p>",
        "id": 519475998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747775837
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817#pullrequestreview-2855623454\">PR review</a>.</p>",
        "id": 519476270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747775987
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817#discussion_r2098895239\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok I've added a few CLIF tests for this and it looks like things are actually working as intended. Looks like <a href=\"https://github.com/bytecodealliance/wasmtime/blob/24730416736955f370b5074f1874cea2dab2784d/cranelift/codegen/src/machinst/isle.rs#L222\">when accessing the constant in ISLE</a> it gets sign-extended based on the type of the constant itself, which is why this ended up working out. Yay!</p>\n</blockquote>",
        "id": 519476272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747775988
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817\">PR #10817</a>.</p>",
        "id": 519476285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747775993
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10817\">PR #10817</a>.</p>",
        "id": 519480417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747777944
    }
]