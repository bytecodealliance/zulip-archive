[
    {
        "content": "<p>akldc opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11911\">issue #11911</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">none</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">preserve_frame_pointers</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">        </span><span class=\"n\">const0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000000000000000000000</span>\n<span class=\"w\">        </span><span class=\"n\">const1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x7ecbb59efd61c837c76c86aef296bb9f</span>\n\n<span class=\"w\">        </span><span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"nc\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">        </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">const1</span>\n<span class=\"w\">        </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bnot</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const1</span>\n<span class=\"w\">        </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v10</span>\n<span class=\"w\">        </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sqrt</span><span class=\"w\"> </span><span class=\"n\">v11</span>\n<span class=\"w\">        </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sqrt</span><span class=\"w\"> </span><span class=\"n\">v12</span>\n<span class=\"w\">        </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v13</span>\n<span class=\"w\">        </span><span class=\"n\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0x3693_344b</span>\n<span class=\"w\">        </span><span class=\"n\">v16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v13</span>\n<span class=\"w\">        </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"p\">(</span><span class=\"n\">v16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x3693_344b</span>\n<span class=\"n\">block1</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n<h3>Description</h3>\n<p>The execution results of the above Cranelift code differ between x86_64 and aarch64.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">x86</span><span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0xfff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xfff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xfff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">915616843</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xfff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xfff80000000000003e17c443ecb03841</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"n\">aarch64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0x7ff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x7ff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x7ff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">915616843</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x7ff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x7ff80000000000003e17c443ecb03841</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>To verify if the architecture-specific discrepancy stems from Cranelift's handling, I lifted the original <code>.clif</code> code to its equivalent WebAssembly module. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v128</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"mh\">0xf296bb9f</span><span class=\"w\"> </span><span class=\"mh\">0xc76c86ae</span><span class=\"w\"> </span><span class=\"mh\">0xfd61c837</span><span class=\"w\"> </span><span class=\"mh\">0x7ecbb59e</span>\n<span class=\"w\">    </span><span class=\"n\">v128</span><span class=\"p\">.</span><span class=\"n\">not</span>\n<span class=\"w\">    </span><span class=\"n\">f64x2</span><span class=\"p\">.</span><span class=\"n\">sqrt</span>\n<span class=\"w\">    </span><span class=\"n\">f64x2</span><span class=\"p\">.</span><span class=\"n\">sqrt</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">tee</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">915616843</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"main\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>The Wasm module shows similar architecture differences.<br>\nx86_64 result:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">340240828546070184846820624011963152449</span>\n<span class=\"mi\">340240828546070184846820624011963152449</span>\n<span class=\"mi\">340240828546070184846820624011963152449</span>\n<span class=\"mi\">915616843</span>\n<span class=\"mi\">340240828546070184846820624011963152449</span>\n<span class=\"mi\">340240828546070184846820624011963152449</span>\n</code></pre></div>\n<p>aarch64 result:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">170099645085600953115133320296079046721</span>\n<span class=\"mi\">170099645085600953115133320296079046721</span>\n<span class=\"mi\">170099645085600953115133320296079046721</span>\n<span class=\"mi\">915616843</span>\n<span class=\"mi\">170099645085600953115133320296079046721</span>\n<span class=\"mi\">170099645085600953115133320296079046721</span>\n</code></pre></div>\n<p>This is just like the ordinary Wasm programs we usually encounter, and the same code should produce consistent results across different architectures.</p>\n</blockquote>",
        "id": 546466951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761141879
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11911\">Issue #11911</a>.</p>",
        "id": 546466954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761141880
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11911\">Issue #11911</a>.</p>",
        "id": 546466957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761141880
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11911#issuecomment-3432594279\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11911\">issue #11911</a>:</p>\n<blockquote>\n<p>Wasm doesn't specify the NaN payload that is used for float operations that produce a NaN for performance reasons as architectures disagree about when they preserve the input NaN vs when they create a new NaN with a payload specified by the architecture. You can set the <code>enable_nan_canonicalization</code> Cranelift flag if you absolutely need consistent NaN payloads across architectures and don't care about the perf hit.</p>\n</blockquote>",
        "id": 546470039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761142618
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11911\">issue #11911</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">none</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">preserve_frame_pointers</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">        </span><span class=\"n\">const0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000000000000000000000</span>\n<span class=\"w\">        </span><span class=\"n\">const1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x7ecbb59efd61c837c76c86aef296bb9f</span>\n\n<span class=\"w\">        </span><span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"nc\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">        </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">const1</span>\n<span class=\"w\">        </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bnot</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const1</span>\n<span class=\"w\">        </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v10</span>\n<span class=\"w\">        </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sqrt</span><span class=\"w\"> </span><span class=\"n\">v11</span>\n<span class=\"w\">        </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sqrt</span><span class=\"w\"> </span><span class=\"n\">v12</span>\n<span class=\"w\">        </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v13</span>\n<span class=\"w\">        </span><span class=\"n\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0x3693_344b</span>\n<span class=\"w\">        </span><span class=\"n\">v16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v13</span>\n<span class=\"w\">        </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"p\">(</span><span class=\"n\">v16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x3693_344b</span>\n<span class=\"n\">block1</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n<h3>Description</h3>\n<p>The execution results of the above Cranelift code differ between x86_64 and aarch64.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">x86</span><span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0xfff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xfff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xfff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">915616843</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xfff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xfff80000000000003e17c443ecb03841</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"n\">aarch64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0x7ff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x7ff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x7ff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">915616843</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x7ff80000000000003e17c443ecb03841</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x7ff80000000000003e17c443ecb03841</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>To verify if the architecture-specific discrepancy stems from Cranelift's handling, I lifted the original <code>.clif</code> code to its equivalent WebAssembly module. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"n\">v128</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">v128</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"mh\">0xf296bb9f</span><span class=\"w\"> </span><span class=\"mh\">0xc76c86ae</span><span class=\"w\"> </span><span class=\"mh\">0xfd61c837</span><span class=\"w\"> </span><span class=\"mh\">0x7ecbb59e</span>\n<span class=\"w\">    </span><span class=\"n\">v128</span><span class=\"p\">.</span><span class=\"n\">not</span>\n<span class=\"w\">    </span><span class=\"n\">f64x2</span><span class=\"p\">.</span><span class=\"n\">sqrt</span>\n<span class=\"w\">    </span><span class=\"n\">f64x2</span><span class=\"p\">.</span><span class=\"n\">sqrt</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">tee</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">915616843</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"main\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>The Wasm module shows similar architecture differences.<br>\nx86_64 result:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">340240828546070184846820624011963152449</span>\n<span class=\"mi\">340240828546070184846820624011963152449</span>\n<span class=\"mi\">340240828546070184846820624011963152449</span>\n<span class=\"mi\">915616843</span>\n<span class=\"mi\">340240828546070184846820624011963152449</span>\n<span class=\"mi\">340240828546070184846820624011963152449</span>\n</code></pre></div>\n<p>aarch64 result:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">170099645085600953115133320296079046721</span>\n<span class=\"mi\">170099645085600953115133320296079046721</span>\n<span class=\"mi\">170099645085600953115133320296079046721</span>\n<span class=\"mi\">915616843</span>\n<span class=\"mi\">170099645085600953115133320296079046721</span>\n<span class=\"mi\">170099645085600953115133320296079046721</span>\n</code></pre></div>\n<p>This is just like the ordinary Wasm programs we usually encounter, and the same code should produce consistent results across different architectures.</p>\n</blockquote>",
        "id": 546477832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761144422
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11911#issuecomment-3432752468\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11911\">issue #11911</a>:</p>\n<blockquote>\n<p>Agreed yes, this is NaN issues which is expected for Cranelift to have diverging results on different platforms with. There's some brief information on the topic <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html#divergent-webassembly-behavior-across-runtimes\">here</a> and in addition to the Cranelift setting <code>enable_nan_canonicalization</code> you  can also for wasm set the <code>-Wnan-canonicalization</code> flag which makes the wasm behave the same across architectures.</p>\n</blockquote>",
        "id": 546477843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761144423
    }
]