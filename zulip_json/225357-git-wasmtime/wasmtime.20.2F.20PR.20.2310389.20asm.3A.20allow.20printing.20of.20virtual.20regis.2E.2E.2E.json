[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10389\">PR #10389</a> from <code>abrown:assembler-print-vreg</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>#10361 identifies a situation in which we want to print assembly instructions that have not yet been register allocated. Because of this, the register slots hold virtual registers, which the assembler does not know how to pretty-print. This change overrides <code>AsReg::to_string</code> in a few places so that <code>cranelift-codegen</code>'s view of registers can be pretty-printed using the existing code for doing so.</p>\n</blockquote>",
        "id": 505280350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741824719
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10389\">PR #10389</a>.</p>",
        "id": 505280352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741824720
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10389\">PR #10389</a>.</p>",
        "id": 505280353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741824720
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10389\">PR #10389</a>:</p>\n<blockquote>\n<p>#10361 identifies a situation in which we want to print assembly instructions that have not yet been register allocated. Because of this, the register slots hold virtual registers, which the assembler does not know how to pretty-print. This change overrides <code>AsReg::to_string</code> in a few places so that <code>cranelift-codegen</code>'s view of registers can be pretty-printed using the existing code for doing so. Closes #10361.</p>\n</blockquote>",
        "id": 505280441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741824747
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10389#issuecomment-2719398945\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10389\">PR #10389</a>:</p>\n<blockquote>\n<p>@cfallin, I was going to add some tests to keep this working correctly: can you remind me how to create a virtual <code>Reg</code> out of thin air?</p>\n</blockquote>",
        "id": 505280535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741824795
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10389#issuecomment-2719482205\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10389\">PR #10389</a>:</p>\n<blockquote>\n<p>Thanks for addressing this!</p>\n<blockquote>\n<p>@cfallin, I was going to add some tests to keep this working correctly: can you remind me how to create a virtual Reg out of thin air?</p>\n</blockquote>\n<p>Sounds good; something like <code>VReg::new(200, RegClass::Int)</code> should work I think?</p>\n</blockquote>",
        "id": 505287631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741827959
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10389#pullrequestreview-2680201695\">PR review</a>:</p>\n<blockquote>\n<p>This approach is definitely workable -- I'm fine with landing this. However I note that <code>AsReg</code> in the assembler crate carries a <code>Debug</code> constraint already, meaning that we're requiring the user of the assembler library to provide a <code>Debug</code>-printable type -- is there any way we could make <code>to_string</code> handle this case at the assembler crate level by delegating to that (e.g. <code>format!(\"{:?}\", self)</code>) and differeniate between the real and virtual cases by making <code>enc()</code> return an <code>Option&lt;u8&gt;</code>? I also feel this is a little more \"honest\" in the sense that not every <code>AsReg</code> value will be a physical register at all times. <code>.enc().expect(\"need physreg for encoding\")</code> in actual emission code seems fine in that case.</p>\n<p>If that turns out to be too complex, no worries, this existing solution is fine too.</p>\n</blockquote>",
        "id": 505288826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741828361
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10389\">PR #10389</a>.</p>",
        "id": 505541932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741906914
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10389#issuecomment-2722930573\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10389\">PR #10389</a>:</p>\n<blockquote>\n<p>I poked at this a little myself and I think I'm actually fine with the way this works currently. Modifying <code>AsReg::enc()</code> to return <code>Option&lt;u8&gt;</code> is in some sense closer to reality -- the register may or may not have a physical encoding -- but almost all users use it only when it does, and only pretty-printing differs, so it's probably just as good to simply document that it can panic when the reg is virtual, and make pretty-printing work explicitly instead, as you've done here. I also played a bit with the plumbing on pretty-printing -- one could invert so that <code>to_string()</code> in the assembler crate calls back to the embedder (Cranelift) for vregs but again it's about the same amount of code, and this works fine. So I'll say LGTM, and we can always refactor later if needed.</p>\n<p>Thanks for adding the test as well!</p>\n</blockquote>",
        "id": 505545858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741908968
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10389\">PR #10389</a>.</p>",
        "id": 505699576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741965047
    }
]