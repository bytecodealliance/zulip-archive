[
    {
        "content": "<p>Wybxc opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11813\">issue #11813</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p><code>eqref</code> includes <code>structref</code>, <code>arrayref</code>, and <code>i31ref</code>, but currently only the first two can be directly cast to <code>eqref</code> in the host language. Methods should be provided to create <code>eqref</code> from <code>i31ref</code> in the host language.</p>\n<h4>Implementation</h4>\n<p>This should only require transmuting the internal value.</p>\n<h4>Alternatives</h4>\n<p>The current workaround is to convert to <code>AnyRef</code> and then to <code>EqRef</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"k\">i32</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i31</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">I31</span><span class=\"p\">::</span><span class=\"n\">new_i32</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">any_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AnyRef</span><span class=\"p\">::</span><span class=\"n\">from_i31</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i31</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">eq_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">unwrap_eqref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">);</span>\n</code></pre></div>\n</blockquote>",
        "id": 543695976,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759914472
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime:api label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11813\">Issue #11813</a>.</p>",
        "id": 543763651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759933878
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:gc label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11813\">Issue #11813</a>.</p>",
        "id": 543763652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759933878
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11813#issuecomment-3417352188\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11813\">issue #11813</a>:</p>\n<blockquote>\n<p>We can't transmute an <code>I31</code> into a <code>Rooted&lt;EqRef&gt;</code>, as they have different representations, but we could certainly create a <code>EqRef::from_i31(&amp;mut store, my_i31)</code> constructor. It should be pretty much identical to <code>AnyRef::from_i31</code>.</p>\n<p>@Wybxc would you be up for sending a PR to implement this?</p>\n</blockquote>",
        "id": 545705263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760737634
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11813\">issue #11813</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p><code>eqref</code> includes <code>structref</code>, <code>arrayref</code>, and <code>i31ref</code>, but currently only the first two can be directly cast to <code>eqref</code> in the host language. Methods should be provided to create <code>eqref</code> from <code>i31ref</code> in the host language.</p>\n<h4>Implementation</h4>\n<p>This should only require transmuting the internal value.</p>\n<h4>Alternatives</h4>\n<p>The current workaround is to convert to <code>AnyRef</code> and then to <code>EqRef</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"k\">i32</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i31</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">I31</span><span class=\"p\">::</span><span class=\"n\">new_i32</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">any_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AnyRef</span><span class=\"p\">::</span><span class=\"n\">from_i31</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i31</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">eq_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">unwrap_eqref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">);</span>\n</code></pre></div>\n</blockquote>",
        "id": 545803559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760850361
    }
]