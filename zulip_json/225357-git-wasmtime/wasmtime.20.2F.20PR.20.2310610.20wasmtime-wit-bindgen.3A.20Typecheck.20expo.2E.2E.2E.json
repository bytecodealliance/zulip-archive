[
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>.</p>",
        "id": 513094856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745008821
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>.</p>",
        "id": 513096249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745009592
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>:</p>\n<blockquote>\n<p>Based on #10616.</p>\n<p>Currently, in bindgen-emitted component wrappers, the existence of export functions is checked at the construction of the {interface-name}Indices struct, but each export function is only finally typechecked on their invocation in {interface-name}::call_{func-name}.</p>\n<p>The goal of this PR is to typecheck component exports at the construction of Indices. This is desirable because it gives a type error as early as possible - when using Indices by way of {interface-name}Pre, this can be performed with only an InstancePre, where the creation of an InstancePre requires only a Component and Linker, and typechecks all of the Component's imports. So, really, this is about getting exports on parity with imports.</p>\n<p>Closes #9155 . I've worked around this with ugly hacks in embeddings for 2 different employers now and I'm not about to do it for a third :).</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 513097166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745010091
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>:</p>\n<blockquote>\n<p>Based on #10616.</p>\n<p>Currently, in bindgen-emitted component wrappers, the existence of export functions is checked at the construction of the {interface-name}Indices struct, but each export function is only finally typechecked on their invocation in {interface-name}::call_{func-name}.</p>\n<p>The goal of this PR is to typecheck component exports at the construction of Indices. This is desirable because it gives a type error as early as possible - when using Indices by way of {interface-name}Pre, this can be performed with only an InstancePre, where the creation of an InstancePre requires only a Component and Linker, and typechecks all of the Component's imports. So, really, this is about getting exports on parity with imports.</p>\n<p>Closes #9155 . I've worked around this with ugly hacks in embeddings for 2 different employers now and I'm not about to do it for a third.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 513097184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745010101
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>.</p>",
        "id": 513108570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745017565
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>:</p>\n<blockquote>\n<p>Based on #10616.</p>\n<p>Currently, in bindgen-emitted component wrappers, the existence of export functions is checked at the construction of the {interface-name}Indices struct, but each export function is only finally typechecked on their invocation in {interface-name}::call_{func-name}.</p>\n<p>The goal of this PR is to typecheck component exports at the construction of Indices. This is desirable because it gives a type error as early as possible - when using Indices by way of {interface-name}Pre, this can be performed with only an InstancePre, where the creation of an InstancePre requires only a Component and Linker, and typechecks all of the Component's imports. So, really, this is about getting exports on parity with imports.</p>\n<p>Closes #9155 . I've worked around this with ugly hacks in embeddings for 2 different employers now and I'm not about to do it for a third.</p>\n<h2>Additions to Wasmtime</h2>\n<ul>\n<li><code>InstancePre</code> now has an additional <code>InstanceType</code> member. The <code>InstanceType</code> represents the type information carried in the <code>Linker</code> used to typecheck all of the <code>InstancePre</code>'s imports. This is accessible by a new accessor <code>instance_type(&amp;self) -&gt; &amp;InstanceType</code>.</li>\n<li><code>Instance</code> has a new accessor <code>instance_type(&amp;self, store: impl AsContextMut) -&gt; InstanceType</code>. The store contains all of the information required to construct the InstanceType, so this is just a matter of exposing whats already there.</li>\n<li><code>component::types::ComponentFunc</code> has a new method <code>typecheck&lt;Params, Returns&gt;(&amp;self, instance_type: &amp;InstanceType) -&gt; Result&lt;()&gt;</code>. The underlying typecheck performed here is the exact same one performed in <code>Func::typed&lt;Params, Returns&gt;(&amp;self, store: impl AsContextMut) -&gt; Result&lt;()&gt;</code>, except rather than the type information coming out of the store, its provided by the InstanceType.</li>\n</ul>\n<p>All of these additions are pub interfaces but marked <code>#[doc(hidden)]</code> to make them \"internal\", because the prior art was that <code>InstanceType</code> and is internal, and there are no other public interfaces for retrieving <code>InstanceType</code> or typechecking, with the sole exception of <code>Func::typed</code>. I think that we should consider making these documented public interfaces, but I'll leave that to a future PR unless requested.</p>\n<h2>Changes to wasmtime-wit-bindgen</h2>\n<p>This test case demonstates the extent of the changes: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610/files#diff-0b0815115f3addd488fbf1f032466f210b9fcd29ec42f4b4a777e58f80abba16\">https://github.com/bytecodealliance/wasmtime/pull/10610/files#diff-0b0815115f3addd488fbf1f032466f210b9fcd29ec42f4b4a777e58f80abba16</a></p>\n<ul>\n<li>The <code>{Foo}Indicies</code> constructor which is used in the <code>InstancePre</code> path <code>new(&amp;Component) -&gt; Result&lt;Self&gt;</code> now has signature <code>new(&amp;Component, &amp;InstanceType) -&gt; Result&lt;Self&gt;</code> .</li>\n<li>The other constructor <code>new_instance(impl AsContextMut, &amp;Instance) -&gt; Result&lt;Self&gt;</code> keeps the same signature, because the combination of an Instance and its store are sufficient to create an InstanceType.</li>\n<li>The InstanceType is plumbed through to the common <code>_new</code> internals.</li>\n<li>Each place an export index is retrieved for a function, <code>.get_export_index</code> has been substituted out with <code>.get_export</code>, and the returned <code>ComponentItem</code> is checked to be a ComponentItem::ComponentFunc(func), and then <code>func.typecheck</code> is invoked with the type argument corresponding to the <code>TypedFunc</code> type parameters.</li>\n</ul>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 513109288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745018142
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>:</p>\n<blockquote>\n<p>Based on #10616.</p>\n<p>Currently, in bindgen-emitted component wrappers, the existence of export functions is checked at the construction of the {interface-name}Indices struct, but each export function is only finally typechecked on their invocation in {interface-name}::call_{func-name}.</p>\n<p>The goal of this PR is to typecheck component exports at the construction of Indices. This is desirable because it gives a type error as early as possible - when using Indices by way of {interface-name}Pre, this can be performed with only an InstancePre, where the creation of an InstancePre requires only a Component and Linker, and typechecks all of the Component's imports. So, really, this is about getting exports on parity with imports.</p>\n<p>Closes #9155 . I've worked around this with ugly hacks in embeddings for 2 different employers now and I'm not about to do it for a third.</p>\n<h2>Additions to Wasmtime</h2>\n<ul>\n<li><code>InstancePre</code> now has an additional <code>InstanceType</code> member. The <code>InstanceType</code> represents the type information carried in the <code>Linker</code> used to typecheck all of the <code>InstancePre</code>'s imports. This is accessible by a new accessor <code>instance_type(&amp;self) -&gt; &amp;InstanceType</code>.</li>\n<li><code>Instance</code> has a new accessor <code>instance_type(&amp;self, store: impl AsContextMut) -&gt; InstanceType</code>. The store contains all of the information required to construct the InstanceType, so this is just a matter of exposing whats already there.</li>\n<li><code>component::types::ComponentFunc</code> has a new method <code>typecheck&lt;Params, Returns&gt;(&amp;self, instance_type: &amp;InstanceType) -&gt; Result&lt;()&gt;</code>. The underlying typecheck performed here is the exact same one performed in <code>Func::typed&lt;Params, Returns&gt;(&amp;self, store: impl AsContextMut) -&gt; Result&lt;()&gt;</code>, except rather than the type information coming out of the store, its provided by the InstanceType.</li>\n</ul>\n<p>All of these additions are pub interfaces but marked <code>#[doc(hidden)]</code> to make them \"internal\", because the prior art was that <code>InstanceType</code> and is internal, and there are no other public interfaces for retrieving <code>InstanceType</code> or typechecking, with the sole exception of <code>Func::typed</code>. I think that we should consider making these documented public interfaces, but I'll leave that to a future PR unless requested.</p>\n<h2>Changes to wasmtime-wit-bindgen</h2>\n<p>This test case demonstates the extent of the changes: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610/files#diff-0b0815115f3addd488fbf1f032466f210b9fcd29ec42f4b4a777e58f80abba16\">https://github.com/bytecodealliance/wasmtime/pull/10610/files#diff-0b0815115f3addd488fbf1f032466f210b9fcd29ec42f4b4a777e58f80abba16</a></p>\n<ul>\n<li>The <code>{Foo}Indicies</code> constructor which is used in the <code>InstancePre</code> path <code>new(&amp;Component) -&gt; Result&lt;Self&gt;</code> now has signature <code>new(&amp;Component, &amp;InstanceType) -&gt; Result&lt;Self&gt;</code> .</li>\n<li>The other constructor <code>new_instance(impl AsContextMut, &amp;Instance) -&gt; Result&lt;Self&gt;</code> keeps the same signature, because the combination of an Instance and its store are sufficient to create an InstanceType.</li>\n<li>The InstanceType is plumbed through to the common <code>_new</code> internals.</li>\n<li>Each place an export index is retrieved for a function, <code>.get_export_index</code> has been substituted out with <code>.get_export</code>, and the returned <code>ComponentItem</code> is checked to be a ComponentItem::ComponentFunc(func), and then <code>func.typecheck</code> is invoked with the type argument corresponding to the <code>TypedFunc</code> type parameters.</li>\n</ul>\n<h2>Future work</h2>\n<p>Each export func is typechecked again in its bindgen <code>call_{funcname}</code> function, in which the <code>Func</code> member owned by the typed instance <code>{Foo}</code> struct is cast to a <code>TypedFunc</code> with the specific type parameters bindgen keeps track of for each func. Since the <code>{Foo}</code> struct is created from a <code>{Foo}Indices</code>, we can guarantee that the export funcs have been typechecked against a given <code>Linker</code> or <code>Store</code>, so we could potentially elide the repeated typecheck there, and make an unchecked cast to TypedFunc instead. (TypedFuncs are not stored in the <code>{Foo}</code> struct at least in part because their type parameters may use <code>&amp;'a ...</code> which only apply to the site of the call, and not to the storage of that member in <code>{Foo}</code>. The <code>for&lt;'a&gt;</code> trick only works for trait objects, not concrete types like TypedFunc.)</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 513109770,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745018575
    },
    {
        "content": "<p><strong>pchickey</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a> as ready for review.</p>",
        "id": 513109813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745018615
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/dicej\">dicej</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>.</p>",
        "id": 513109814,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745018616
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>.</p>",
        "id": 513109816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745018616
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>:</p>\n<blockquote>\n<p>Based on #10616.</p>\n<p>Currently, in bindgen-emitted component wrappers, the existence of export functions is checked at the construction of the {interface-name}Indices struct, but each export function is only finally typechecked on their invocation in {interface-name}::call_{func-name}.</p>\n<p>The goal of this PR is to typecheck component exports at the construction of Indices. This is desirable because it gives a type error as early as possible - when using {interface-name}Indices by way of {interface-name}Pre, this can be performed with only an InstancePre, where the creation of an InstancePre requires only a Component and Linker, and typechecks all of the Component's imports. So, really, this is about getting exports on parity with imports.</p>\n<p>Closes #9155 . I've worked around this with ugly hacks in embeddings for 2 different employers now and I'm not about to do it for a third.</p>\n<h2>Additions to Wasmtime</h2>\n<ul>\n<li><code>InstancePre</code> now has an additional <code>InstanceType</code> member. The <code>InstanceType</code> represents the type information carried in the <code>Linker</code> used to typecheck all of the <code>InstancePre</code>'s imports. This is accessible by a new accessor <code>instance_type(&amp;self) -&gt; &amp;InstanceType</code>.</li>\n<li><code>Instance</code> has a new accessor <code>instance_type(&amp;self, store: impl AsContextMut) -&gt; InstanceType</code>. The store contains all of the information required to construct the InstanceType, so this is just a matter of exposing whats already there.</li>\n<li><code>component::types::ComponentFunc</code> has a new method <code>typecheck&lt;Params, Returns&gt;(&amp;self, instance_type: &amp;InstanceType) -&gt; Result&lt;()&gt;</code>. The underlying typecheck performed here is the exact same one performed in <code>Func::typed&lt;Params, Returns&gt;(&amp;self, store: impl AsContextMut) -&gt; Result&lt;()&gt;</code>, except rather than the type information coming out of the store, its provided by the InstanceType.</li>\n</ul>\n<p>All of these additions are pub interfaces but marked <code>#[doc(hidden)]</code> to make them \"internal\", because the prior art was that <code>InstanceType</code> and is internal, and there are no other public interfaces for retrieving <code>InstanceType</code> or typechecking, with the sole exception of <code>Func::typed</code>. I think that we should consider making these documented public interfaces, but I'll leave that to a future PR unless requested.</p>\n<h2>Changes to wasmtime-wit-bindgen</h2>\n<p>This test case demonstates the extent of the changes: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610/files#diff-0b0815115f3addd488fbf1f032466f210b9fcd29ec42f4b4a777e58f80abba16\">https://github.com/bytecodealliance/wasmtime/pull/10610/files#diff-0b0815115f3addd488fbf1f032466f210b9fcd29ec42f4b4a777e58f80abba16</a></p>\n<ul>\n<li>The <code>{Foo}Indicies</code> constructor which is used in the <code>InstancePre</code> path <code>new(&amp;Component) -&gt; Result&lt;Self&gt;</code> now has signature <code>new(&amp;Component, &amp;InstanceType) -&gt; Result&lt;Self&gt;</code> .</li>\n<li>The other constructor <code>new_instance(impl AsContextMut, &amp;Instance) -&gt; Result&lt;Self&gt;</code> keeps the same signature, because the combination of an Instance and its store are sufficient to create an InstanceType.</li>\n<li>The InstanceType is plumbed through to the common <code>_new</code> internals.</li>\n<li>Each place an export index is retrieved for a function, <code>.get_export_index</code> has been substituted out with <code>.get_export</code>, and the returned <code>ComponentItem</code> is checked to be a ComponentItem::ComponentFunc(func), and then <code>func.typecheck</code> is invoked with the type argument corresponding to the <code>TypedFunc</code> type parameters.</li>\n</ul>\n<h2>Future work</h2>\n<p>Each export func is typechecked again in its bindgen <code>call_{funcname}</code> function, in which the <code>Func</code> member owned by the typed instance <code>{Foo}</code> struct is cast to a <code>TypedFunc</code> with the specific type parameters bindgen keeps track of for each func. Since the <code>{Foo}</code> struct is created from a <code>{Foo}Indices</code>, we can guarantee that the export funcs have been typechecked against a given <code>Linker</code> or <code>Store</code>, so we could potentially elide the repeated typecheck there, and make an unchecked cast to TypedFunc instead. (TypedFuncs are not stored in the <code>{Foo}</code> struct at least in part because their type parameters may use <code>&amp;'a ...</code> which only apply to the site of the call, and not to the storage of that member in <code>{Foo}</code>. The <code>for&lt;'a&gt;</code> trick only works for trait objects, not concrete types like TypedFunc.)</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 513110250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745018999
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610#pullrequestreview-2781356505\">PR review</a>.</p>",
        "id": 513408971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745245349
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610#issuecomment-2818686165\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>:</p>\n<blockquote>\n<p>I'm a bit concerned about <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10616\">https://github.com/bytecodealliance/wasmtime/pull/10616</a> and the cost implications of having more <code>Arc</code>-clones on lifting/lowering paths, and after reading over this more I've got a possibilty which I forget if we already talked about and/or whether you tried, so let me know if I sound like a broken record. Could the various <code>*Indices</code> constructors take a <code>&amp;InstancePre&lt;T&gt;</code> instead of a <code>&amp;Component</code>? That way we could refactor the internals of <code>InstancePre&lt;T&gt;</code> to hold whatever is necessary to cheaply create the <code>InstanceType&lt;T&gt;</code> I think?</p>\n</blockquote>",
        "id": 513415255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745247679
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610#issuecomment-2818686165\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>:</p>\n<blockquote>\n<p>I'm a bit concerned about <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10616\">https://github.com/bytecodealliance/wasmtime/pull/10616</a> and the cost implications of having more <code>Arc</code>-clones on lifting/lowering paths, and after reading over this more I've got a possibilty which I forget if we already talked about and/or whether you tried, so let me know if I sound like a broken record. Could the various <code>*Indices</code> constructors take a <code>&amp;InstancePre&lt;T&gt;</code> instead of a <code>&amp;Component</code>? That way we could refactor the internals of <code>InstancePre&lt;T&gt;</code> to hold whatever is necessary to cheaply create the <code>InstanceType&lt;'_&gt;</code> I think?</p>\n</blockquote>",
        "id": 513415282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745247691
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610#issuecomment-2818970259\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>:</p>\n<blockquote>\n<p>Thanks, I'll explore that now!</p>\n</blockquote>",
        "id": 513431549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745253173
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>.</p>",
        "id": 513466943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745268105
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>.</p>",
        "id": 513469484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745269386
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>.</p>",
        "id": 513469963,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745269624
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>:</p>\n<blockquote>\n<p>Based on #10616.</p>\n<p>Currently, in bindgen-emitted component wrappers, the existence of export functions is checked at the construction of the {interface-name}Indices struct, but each export function is only finally typechecked on their invocation in {interface-name}::call_{func-name}.</p>\n<p>The goal of this PR is to typecheck component exports at the construction of Indices. This is desirable because it gives a type error as early as possible - when using {interface-name}Indices by way of {interface-name}Pre, this can be performed with only an InstancePre, where the creation of an InstancePre requires only a Component and Linker, and typechecks all of the Component's imports. So, really, this is about getting exports on parity with imports.</p>\n<p>Closes #9155 . I've worked around this with ugly hacks in embeddings for 2 different employers now and I'm not about to do it for a third.</p>\n<h2>Addition to Wasmtime</h2>\n<p><code>component::types::ComponentFunc</code> has a new method <code>typecheck&lt;Params, Returns&gt;(&amp;self, instance_type: &amp;InstanceType) -&gt; Result&lt;()&gt;</code>. The underlying typecheck performed here is the exact same one performed in <code>Func::typed&lt;Params, Returns&gt;(&amp;self, store: impl AsContextMut) -&gt; Result&lt;()&gt;</code>, except rather than the type information coming out of the store, its provided by the InstanceType.</p>\n<p>This addition is a pub interfaces but marked <code>#[doc(hidden)]</code> to make them \"internal\", because the prior art was that <code>InstanceType</code> and is internal, and there are no other public interfaces for retrieving <code>InstanceType</code> or typechecking, with the sole exception of <code>Func::typed</code>. I think that we should consider making these documented public interfaces, but I'll leave that to a future PR unless requested.</p>\n<h2>Changes to wasmtime-wit-bindgen</h2>\n<p>This test case demonstates the extent of the changes: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610/files#diff-0b0815115f3addd488fbf1f032466f210b9fcd29ec42f4b4a777e58f80abba16\">https://github.com/bytecodealliance/wasmtime/pull/10610/files#diff-0b0815115f3addd488fbf1f032466f210b9fcd29ec42f4b4a777e58f80abba16</a></p>\n<ul>\n<li>The <code>{Foo}Indicies</code> constructor which is used in the <code>InstancePre</code> path <code>new(&amp;Component) -&gt; Result&lt;Self&gt;</code> now has signature <code>new(&amp;Component, &amp;InstanceType) -&gt; Result&lt;Self&gt;</code> .</li>\n<li>The other constructor <code>new_instance(impl AsContextMut, &amp;Instance) -&gt; Result&lt;Self&gt;</code> keeps the same signature, because the combination of an Instance and its store are sufficient to create an InstanceType.</li>\n<li>The InstanceType is plumbed through to the common <code>_new</code> internals.</li>\n<li>Each place an export index is retrieved for a function, <code>.get_export_index</code> has been substituted out with <code>.get_export</code>, and the returned <code>ComponentItem</code> is checked to be a ComponentItem::ComponentFunc(func), and then <code>func.typecheck</code> is invoked with the type argument corresponding to the <code>TypedFunc</code> type parameters.</li>\n</ul>\n<h2>Future work</h2>\n<p>Each export func is typechecked again in its bindgen <code>call_{funcname}</code> function, in which the <code>Func</code> member owned by the typed instance <code>{Foo}</code> struct is cast to a <code>TypedFunc</code> with the specific type parameters bindgen keeps track of for each func. Since the <code>{Foo}</code> struct is created from a <code>{Foo}Indices</code>, we can guarantee that the export funcs have been typechecked against a given <code>Linker</code> or <code>Store</code>, so we could potentially elide the repeated typecheck there, and make an unchecked cast to TypedFunc instead. (TypedFuncs are not stored in the <code>{Foo}</code> struct at least in part because their type parameters may use <code>&amp;'a ...</code> which only apply to the site of the call, and not to the storage of that member in <code>{Foo}</code>. The <code>for&lt;'a&gt;</code> trick only works for trait objects, not concrete types like TypedFunc.)</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 513470209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745269745
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610#pullrequestreview-2782263404\">PR review</a>.</p>",
        "id": 513471395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745270308
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>:</p>\n<blockquote>\n<p>Based on #10616.</p>\n<p>Currently, in bindgen-emitted component wrappers, the existence of export functions is checked at the construction of the {interface-name}Indices struct, but each export function is only finally typechecked on their invocation in {interface-name}::call_{func-name}.</p>\n<p>The goal of this PR is to typecheck component exports at the construction of Indices. This is desirable because it gives a type error as early as possible - when using {interface-name}Indices by way of {interface-name}Pre, this can be performed with only an InstancePre, where the creation of an InstancePre requires only a Component and Linker, and typechecks all of the Component's imports. So, really, this is about getting exports on parity with imports.</p>\n<p>Closes #9155 . I've worked around this with ugly hacks in embeddings for 2 different employers now and I'm not about to do it for a third.</p>\n<h2>Addition to Wasmtime</h2>\n<p><code>component::types::ComponentFunc</code> has a new method <code>typecheck&lt;Params, Returns&gt;(&amp;self, instance_type: &amp;InstanceType) -&gt; Result&lt;()&gt;</code>. The underlying typecheck performed here is the exact same one performed in <code>Func::typed&lt;Params, Returns&gt;(&amp;self, store: impl AsContextMut) -&gt; Result&lt;()&gt;</code>, except rather than the type information coming out of the store, its provided by the InstanceType.</p>\n<p>This addition is a pub interfaces but marked <code>#[doc(hidden)]</code> to make them \"internal\", because the prior art was that <code>InstanceType</code> and is internal, and there are no other public interfaces for retrieving <code>InstanceType</code> or typechecking, with the sole exception of <code>Func::typed</code>. I think that we should consider making these documented public interfaces, but I'll leave that to a future PR unless requested.</p>\n<h2>Changes to wasmtime-wit-bindgen</h2>\n<p>The <code>resources-import</code> test case demonstates the extent of the changes: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610/files#diff-0b0815115f3addd488fbf1f032466f210b9fcd29ec42f4b4a777e58f80abba16\">https://github.com/bytecodealliance/wasmtime/pull/10610/files#diff-0b0815115f3addd488fbf1f032466f210b9fcd29ec42f4b4a777e58f80abba16</a></p>\n<ul>\n<li>Since typechecking information is available from the InstancePre (thanks to #10616), we can unify the two variations on constructing an Indices struct: there is now a single constructor <code>fn new&lt;T&gt;(_instance_pre: InstancePre&lt;T&gt;) -&gt; Result&lt;Self&gt;</code>. Deduplicating this eliminates both generated code and complexity in the generator.</li>\n<li></li>\n<li>\n<p>The new sigular constructor uses <code>_instance_pre.component()</code> to lookup exports (both their index and their ComponentItem), and <code>_instance_pre.instance_type()</code> is used to typecheck the export.</p>\n</li>\n<li>\n<p>Each place an export index is retrieved for a function, <code>.get_export_index</code> has been substituted out with <code>.get_export</code>, and the returned <code>ComponentItem</code> is checked to be a ComponentItem::ComponentFunc(func), and then <code>func.typecheck</code> is invoked with the type argument corresponding to the <code>TypedFunc</code> type parameters.</p>\n</li>\n</ul>\n<h2>Future work</h2>\n<p>Each export func is typechecked again in its bindgen <code>call_{funcname}</code> function, in which the <code>Func</code> member owned by the typed instance <code>{Foo}</code> struct is cast to a <code>TypedFunc</code> with the specific type parameters bindgen keeps track of for each func. Since the <code>{Foo}</code> struct is created from a <code>{Foo}Indices</code>, we can guarantee that the export funcs have been typechecked against a given <code>Linker</code> or <code>Store</code>, so we could potentially elide the repeated typecheck there, and make an unchecked cast to TypedFunc instead. (TypedFuncs are not stored in the <code>{Foo}</code> struct at least in part because their type parameters may use <code>&amp;'a ...</code> which only apply to the site of the call, and not to the storage of that member in <code>{Foo}</code>. The <code>for&lt;'a&gt;</code> trick only works for trait objects, not concrete types like TypedFunc.)</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 513471923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745270591
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>:</p>\n<blockquote>\n<p>Based on #10616.</p>\n<p>Currently, in bindgen-emitted component wrappers, the existence of export functions is checked at the construction of the {interface-name}Indices struct, but each export function is only finally typechecked on their invocation in {interface-name}::call_{func-name}.</p>\n<p>The goal of this PR is to typecheck component exports at the construction of Indices. This is desirable because it gives a type error as early as possible - when using {interface-name}Indices by way of {interface-name}Pre, this can be performed with only an InstancePre, where the creation of an InstancePre requires only a Component and Linker, and typechecks all of the Component's imports. So, really, this is about getting exports on parity with imports.</p>\n<p>Closes #9155 . I've worked around this with ugly hacks in embeddings for 2 different employers now and I'm not about to do it for a third.</p>\n<h2>Addition to Wasmtime</h2>\n<p><code>component::types::ComponentFunc</code> has a new method <code>typecheck&lt;Params, Returns&gt;(&amp;self, instance_type: &amp;InstanceType) -&gt; Result&lt;()&gt;</code>. The underlying typecheck performed here is the exact same one performed in <code>Func::typed&lt;Params, Returns&gt;(&amp;self, store: impl AsContextMut) -&gt; Result&lt;()&gt;</code>, except rather than the type information coming out of the store, its provided by the InstanceType.</p>\n<p>This addition is a pub interfaces but marked <code>#[doc(hidden)]</code> to make them \"internal\", because the prior art was that <code>InstanceType</code> and is internal, and there are no other public interfaces for retrieving <code>InstanceType</code> or typechecking, with the sole exception of <code>Func::typed</code>. I think that we should consider making these documented public interfaces, but I'll leave that to a future PR unless requested.</p>\n<h2>Changes to wasmtime-wit-bindgen</h2>\n<p>The <code>resources-import</code> test case demonstates the extent of the changes: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610/files#diff-0b0815115f3addd488fbf1f032466f210b9fcd29ec42f4b4a777e58f80abba16\">https://github.com/bytecodealliance/wasmtime/pull/10610/files#diff-0b0815115f3addd488fbf1f032466f210b9fcd29ec42f4b4a777e58f80abba16</a></p>\n<ul>\n<li>Since typechecking information is available from the InstancePre (thanks to #10616), we can unify the two variations on constructing an Indices struct: there is now a single constructor <code>fn new&lt;T&gt;(_instance_pre: InstancePre&lt;T&gt;) -&gt; Result&lt;Self&gt;</code>. Deduplicating this eliminates both generated code and complexity in the generator.</li>\n<li>The new sigular constructor uses <code>_instance_pre.component()</code> to lookup exports (both their index and their ComponentItem), and <code>_instance_pre.instance_type()</code> is used to typecheck the export.</li>\n<li>Each place an export index is retrieved for a function, <code>.get_export_index</code> has been substituted out with <code>.get_export</code>, and the returned <code>ComponentItem</code> is checked to be a ComponentItem::ComponentFunc(func), and then <code>func.typecheck</code> is invoked with the type argument corresponding to the <code>TypedFunc</code> type parameters.</li>\n</ul>\n<h2>Future work</h2>\n<p>Each export func is typechecked again in its bindgen <code>call_{funcname}</code> function, in which the <code>Func</code> member owned by the typed instance <code>{Foo}</code> struct is cast to a <code>TypedFunc</code> with the specific type parameters bindgen keeps track of for each func. Since the <code>{Foo}</code> struct is created from a <code>{Foo}Indices</code>, we can guarantee that the export funcs have been typechecked against a given <code>Linker</code> or <code>Store</code>, so we could potentially elide the repeated typecheck there, and make an unchecked cast to TypedFunc instead. (TypedFuncs are not stored in the <code>{Foo}</code> struct at least in part because their type parameters may use <code>&amp;'a ...</code> which only apply to the site of the call, and not to the storage of that member in <code>{Foo}</code>. The <code>for&lt;'a&gt;</code> trick only works for trait objects, not concrete types like TypedFunc.)</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 513471951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745270610
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>:</p>\n<blockquote>\n<p>Based on #10621</p>\n<p>Currently, in bindgen-emitted component wrappers, the existence of export functions is checked at the construction of the {interface-name}Indices struct, but each export function is only finally typechecked on their invocation in {interface-name}::call_{func-name}.</p>\n<p>The goal of this PR is to typecheck component exports at the construction of Indices. This is desirable because it gives a type error as early as possible - when using {interface-name}Indices by way of {interface-name}Pre, this can be performed with only an InstancePre, where the creation of an InstancePre requires only a Component and Linker, and typechecks all of the Component's imports. So, really, this is about getting exports on parity with imports.</p>\n<p>Closes #9155 . I've worked around this with ugly hacks in embeddings for 2 different employers now and I'm not about to do it for a third.</p>\n<h2>Addition to Wasmtime</h2>\n<p><code>component::types::ComponentFunc</code> has a new method <code>typecheck&lt;Params, Returns&gt;(&amp;self, instance_type: &amp;InstanceType) -&gt; Result&lt;()&gt;</code>. The underlying typecheck performed here is the exact same one performed in <code>Func::typed&lt;Params, Returns&gt;(&amp;self, store: impl AsContextMut) -&gt; Result&lt;()&gt;</code>, except rather than the type information coming out of the store, its provided by the InstanceType.</p>\n<p>This addition is a pub interfaces but marked <code>#[doc(hidden)]</code> to make them \"internal\", because the prior art was that <code>InstanceType</code> and is internal, and there are no other public interfaces for retrieving <code>InstanceType</code> or typechecking, with the sole exception of <code>Func::typed</code>. I think that we should consider making these documented public interfaces, but I'll leave that to a future PR unless requested.</p>\n<h2>Changes to wasmtime-wit-bindgen</h2>\n<p>The <code>resources-import</code> test case demonstates the extent of the changes: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610/files#diff-0b0815115f3addd488fbf1f032466f210b9fcd29ec42f4b4a777e58f80abba16\">https://github.com/bytecodealliance/wasmtime/pull/10610/files#diff-0b0815115f3addd488fbf1f032466f210b9fcd29ec42f4b4a777e58f80abba16</a></p>\n<ul>\n<li>Since typechecking information is available from the InstancePre (thanks to #10621), we can unify the two variations on constructing an Indices struct: there is now a single constructor <code>fn new&lt;T&gt;(_instance_pre: InstancePre&lt;T&gt;) -&gt; Result&lt;Self&gt;</code>. Deduplicating this eliminates both generated code and complexity in the generator.</li>\n<li>The new sigular constructor uses <code>_instance_pre.component()</code> to lookup exports (both their index and their ComponentItem), and <code>_instance_pre.instance_type()</code> is used to typecheck the export.</li>\n<li>Each place an export index is retrieved for a function, <code>.get_export_index</code> has been substituted out with <code>.get_export</code>, and the returned <code>ComponentItem</code> is checked to be a ComponentItem::ComponentFunc(func), and then <code>func.typecheck</code> is invoked with the type argument corresponding to the <code>TypedFunc</code> type parameters.</li>\n</ul>\n<h2>Future work</h2>\n<p>Each export func is typechecked again in its bindgen <code>call_{funcname}</code> function, in which the <code>Func</code> member owned by the typed instance <code>{Foo}</code> struct is cast to a <code>TypedFunc</code> with the specific type parameters bindgen keeps track of for each func. Since the <code>{Foo}</code> struct is created from a <code>{Foo}Indices</code>, we can guarantee that the export funcs have been typechecked against a given <code>Linker</code> or <code>Store</code>, so we could potentially elide the repeated typecheck there, and make an unchecked cast to TypedFunc instead. (TypedFuncs are not stored in the <code>{Foo}</code> struct at least in part because their type parameters may use <code>&amp;'a ...</code> which only apply to the site of the call, and not to the storage of that member in <code>{Foo}</code>. The <code>for&lt;'a&gt;</code> trick only works for trait objects, not concrete types like TypedFunc.)</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 513471986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745270634
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610#issuecomment-2819535602\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>:</p>\n<blockquote>\n<p>I addressed the concerns above and rewrote the description accordingly.</p>\n</blockquote>",
        "id": 513472065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745270660
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>.</p>",
        "id": 513473690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745271487
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>.</p>",
        "id": 513473990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745271646
    },
    {
        "content": "<p>pchickey has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>.</p>",
        "id": 513474003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745271654
    },
    {
        "content": "<p>pchickey merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10610\">PR #10610</a>.</p>",
        "id": 513477879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745273778
    }
]