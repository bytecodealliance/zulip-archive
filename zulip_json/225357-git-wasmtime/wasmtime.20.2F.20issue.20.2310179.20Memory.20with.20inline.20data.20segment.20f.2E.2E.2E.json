[
    {
        "content": "<p>Robbepop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10179\">issue #10179</a>:</p>\n<blockquote>\n<p>While implementing the <code>custom-page-sizes</code> proposal in Wasmi I encountered this failing test case in the official Wasm spectest mirror:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory (pagesize 1) (data \"xyz\"))\n  (func (export \"size\") (result i32)\n    memory.size)\n  (func (export \"grow\") (param i32) (result i32)\n    (memory.grow (local.get 0)))\n  (func (export \"load\") (param i32) (result i32)\n    (i32.load8_u (local.get 0)))\n)\n</code></pre></div>\n<p>(Link: <a href=\"https://github.com/WebAssembly/testsuite/blob/main/proposals/custom-page-sizes/custom-page-sizes.wast#L116\">https://github.com/WebAssembly/testsuite/blob/main/proposals/custom-page-sizes/custom-page-sizes.wast#L116</a>)</p>\n<p>Namely, <code>(memory (pagesize 1) (data \"xyz\"))</code> is a <code>memory</code> declaration with an inline <code>data</code> segment. The Wasm spec says the following about this:</p>\n<blockquote>\n<p>A data segment can be given inline with a memory definition, in which case its offset is and the limits of the memory type are inferred from the length of the data, rounded up to page size:</p>\n</blockquote>\n<p>(Source: <a href=\"https://webassembly.github.io/spec/core/text/modules.html#text-mem-abbrev\">https://webassembly.github.io/spec/core/text/modules.html#text-mem-abbrev</a>)</p>\n<p>However, i distilled my own test case:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory (pagesize 1) (data \"xyz\"))\n  (func (export \"hello\"))\n)\n</code></pre></div>\n<p>Ran <code>wasm-tools parse test-case.wat -o test-case.wasm</code> and ran both Wasmi and Wasmtime with it which both crashed during module instantiation with <code>memory out of bounds</code>.</p>\n<p>I re-converted the <code>test-case.wasm</code> back to <code>.wat</code> and saw the following:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func))\n  (memory (;0;) 1 1 (pagesize 0x1))\n  (export \"hello\" (func 0))\n  (func (;0;) (type 0))\n  (data (;0;) (i32.const 0) \"xyz\")\n)\n</code></pre></div>\n<p>Thus we clearly see that <code>memory</code> has <code>minimum</code> and <code>maximum</code> limits of 1 which is incorrect and should be 3 instead.<br>\nI am not sure where exactly the error is originating but since both Wasmi and Wasmtime are affected it might be in the <code>wasmparser</code> crate.<br>\nPlease move this issue if the exact source of the problem is located.</p>\n</blockquote>",
        "id": 497657380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738673323
    },
    {
        "content": "<p>Robbepop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10179\">issue #10179</a>:</p>\n<blockquote>\n<p>While implementing the <code>custom-page-sizes</code> proposal in Wasmi I encountered this failing test case in the official Wasm spectest mirror:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory (pagesize 1) (data \"xyz\"))\n  (func (export \"size\") (result i32)\n    memory.size)\n  (func (export \"grow\") (param i32) (result i32)\n    (memory.grow (local.get 0)))\n  (func (export \"load\") (param i32) (result i32)\n    (i32.load8_u (local.get 0)))\n)\n</code></pre></div>\n<p>(Link: <a href=\"https://github.com/WebAssembly/testsuite/blob/main/proposals/custom-page-sizes/custom-page-sizes.wast#L116\">https://github.com/WebAssembly/testsuite/blob/main/proposals/custom-page-sizes/custom-page-sizes.wast#L116</a>)</p>\n<p>Namely, <code>(memory (pagesize 1) (data \"xyz\"))</code> is a <code>memory</code> declaration with an inline <code>data</code> segment. The Wasm spec says the following about this:</p>\n<blockquote>\n<p>A data segment can be given inline with a memory definition, in which case its offset is and the limits of the memory type are inferred from the length of the data, rounded up to page size:</p>\n</blockquote>\n<p>(Source: <a href=\"https://webassembly.github.io/spec/core/text/modules.html#text-mem-abbrev\">https://webassembly.github.io/spec/core/text/modules.html#text-mem-abbrev</a>)</p>\n<p>However, i distilled my own test case:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory (pagesize 1) (data \"xyz\"))\n  (func (export \"hello\"))\n)\n</code></pre></div>\n<p>Ran <code>wasm-tools parse test-case.wat -o test-case.wasm</code> and ran both Wasmi and Wasmtime with it which both crashed during module instantiation with <code>memory out of bounds</code>.</p>\n<p>I re-converted the <code>test-case.wasm</code> back to <code>.wat</code> and saw the following:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func))\n  (memory (;0;) 1 1 (pagesize 0x1))\n  (export \"hello\" (func 0))\n  (func (;0;) (type 0))\n  (data (;0;) (i32.const 0) \"xyz\")\n)\n</code></pre></div>\n<p>Thus we clearly see that <code>memory</code> has <code>minimum</code> and <code>maximum</code> limits of 1 which is incorrect and should be 3 instead.<br>\nI am not sure where exactly the error is originating but since both Wasmi and Wasmtime are affected it might be in the <code>wast</code> crate.<br>\nPlease move this issue if the exact source of the problem is located.</p>\n</blockquote>",
        "id": 497657550,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738673376
    },
    {
        "content": "<p>Robbepop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10179\">issue #10179</a>:</p>\n<blockquote>\n<p>While implementing the <code>custom-page-sizes</code> proposal in Wasmi I encountered this failing test case in the official Wasm spectest mirror:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory (pagesize 1) (data \"xyz\"))\n  (func (export \"size\") (result i32)\n    memory.size)\n  (func (export \"grow\") (param i32) (result i32)\n    (memory.grow (local.get 0)))\n  (func (export \"load\") (param i32) (result i32)\n    (i32.load8_u (local.get 0)))\n)\n</code></pre></div>\n<p>(Link: <a href=\"https://github.com/WebAssembly/testsuite/blob/main/proposals/custom-page-sizes/custom-page-sizes.wast#L116\">https://github.com/WebAssembly/testsuite/blob/main/proposals/custom-page-sizes/custom-page-sizes.wast#L116</a>)</p>\n<p>Namely, <code>(memory (pagesize 1) (data \"xyz\"))</code> is a <code>memory</code> declaration with an inline <code>data</code> segment. The Wasm spec says the following about this:</p>\n<blockquote>\n<p>A data segment can be given inline with a memory definition, in which case its offset is and the limits of the memory type are inferred from the length of the data, rounded up to page size:</p>\n</blockquote>\n<p>(Source: <a href=\"https://webassembly.github.io/spec/core/text/modules.html#text-mem-abbrev\">https://webassembly.github.io/spec/core/text/modules.html#text-mem-abbrev</a>)</p>\n<p>However, i distilled my own test case:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory (pagesize 1) (data \"xyz\"))\n  (func (export \"hello\"))\n)\n</code></pre></div>\n<p>Ran <code>wasm-tools parse test-case.wat -o test-case.wasm</code> and ran both Wasmi and Wasmtime with it which both crashed during module instantiation with <code>memory out of bounds</code>.</p>\n<p>I re-converted the <code>test-case.wasm</code> back to <code>.wat</code> and saw the following:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func))\n  (memory (;0;) 1 1 (pagesize 0x1))\n  (export \"hello\" (func 0))\n  (func (;0;) (type 0))\n  (data (;0;) (i32.const 0) \"xyz\")\n)\n</code></pre></div>\n<p>Thus we clearly see that <code>memory</code> has <code>minimum</code> and <code>maximum</code> limits of 1 which is incorrect and should be 3 instead.<br>\nI am not sure where exactly the error is originating but since both Wasmi and Wasmtime are affected it might be in the <code>wast</code> crate.<br>\nPlease move this issue if the exact source of the problem is located.</p>\n<p>If I manually replace <code>(memory (;0;) 1 1 (pagesize 0x1))</code> with the correct limits of <code>(memory (;0;) 3 3 (pagesize 0x1))</code> both Wasmi and Wasmtime no longer crash.</p>\n</blockquote>",
        "id": 497657816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738673447
    },
    {
        "content": "<p>Robbepop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10179\">issue #10179</a>:</p>\n<blockquote>\n<p>While implementing the <code>custom-page-sizes</code> proposal in Wasmi I encountered this failing test case in the official Wasm spectest mirror:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory (pagesize 1) (data \"xyz\"))\n  (func (export \"size\") (result i32)\n    memory.size)\n  (func (export \"grow\") (param i32) (result i32)\n    (memory.grow (local.get 0)))\n  (func (export \"load\") (param i32) (result i32)\n    (i32.load8_u (local.get 0)))\n)\n</code></pre></div>\n<p>(Link: <a href=\"https://github.com/WebAssembly/testsuite/blob/main/proposals/custom-page-sizes/custom-page-sizes.wast#L116\">https://github.com/WebAssembly/testsuite/blob/main/proposals/custom-page-sizes/custom-page-sizes.wast#L116</a>)</p>\n<p>Namely, <code>(memory (pagesize 1) (data \"xyz\"))</code> is a <code>memory</code> declaration with an inline <code>data</code> segment. The Wasm spec says the following about this:</p>\n<blockquote>\n<p>A data segment can be given inline with a memory definition, in which case its offset is and the limits of the memory type are inferred from the length of the data, rounded up to page size:</p>\n</blockquote>\n<p>(Source: <a href=\"https://webassembly.github.io/spec/core/text/modules.html#text-mem-abbrev\">https://webassembly.github.io/spec/core/text/modules.html#text-mem-abbrev</a>)</p>\n<p>However, i distilled my own test case:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory (pagesize 1) (data \"xyz\"))\n  (func (export \"hello\"))\n)\n</code></pre></div>\n<p>Ran <code>wasm-tools parse test-case.wat -o test-case.wasm</code> and ran both Wasmi and Wasmtime with it which both crashed during module instantiation with <code>memory out of bounds</code>.</p>\n<p>I re-converted the <code>test-case.wasm</code> back to <code>.wat</code> and saw the following:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func))\n  (memory (;0;) 1 1 (pagesize 0x1))\n  (export \"hello\" (func 0))\n  (func (;0;) (type 0))\n  (data (;0;) (i32.const 0) \"xyz\")\n)\n</code></pre></div>\n<p>Thus we clearly see that <code>memory</code> has <code>minimum</code> and <code>maximum</code> limits of 1 which is incorrect and should be 3 instead.<br>\nI am not sure where exactly the error is originating but since both Wasmi and Wasmtime are affected it might be in the <code>wast</code> crate.<br>\nIf I manually replace <code>(memory (;0;) 1 1 (pagesize 0x1))</code> with the correct limits of <code>(memory (;0;) 3 3 (pagesize 0x1))</code> both Wasmi and Wasmtime no longer crash.</p>\n<p>Please move this issue if the exact source of the problem is located.<br>\n</p>\n</blockquote>",
        "id": 497657865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738673463
    },
    {
        "content": "<p>Robbepop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10179\">issue #10179</a>:</p>\n<blockquote>\n<p>While implementing the <code>custom-page-sizes</code> proposal in Wasmi I encountered this failing test case in the official Wasm spectest mirror:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory (pagesize 1) (data \"xyz\"))\n  (func (export \"size\") (result i32)\n    memory.size)\n  (func (export \"grow\") (param i32) (result i32)\n    (memory.grow (local.get 0)))\n  (func (export \"load\") (param i32) (result i32)\n    (i32.load8_u (local.get 0)))\n)\n</code></pre></div>\n<p>(Link: <a href=\"https://github.com/WebAssembly/testsuite/blob/main/proposals/custom-page-sizes/custom-page-sizes.wast#L116\">https://github.com/WebAssembly/testsuite/blob/main/proposals/custom-page-sizes/custom-page-sizes.wast#L116</a>)</p>\n<p>Namely, <code>(memory (pagesize 1) (data \"xyz\"))</code> is a <code>memory</code> declaration with an inline <code>data</code> segment. The Wasm spec says the following about this:</p>\n<blockquote>\n<p>A data segment can be given inline with a memory definition, in which case its offset is and the limits of the memory type are inferred from the length of the data, rounded up to page size:</p>\n</blockquote>\n<p>(Source: <a href=\"https://webassembly.github.io/spec/core/text/modules.html#text-mem-abbrev\">https://webassembly.github.io/spec/core/text/modules.html#text-mem-abbrev</a>)</p>\n<p>However, i distilled my own test case:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory (pagesize 1) (data \"xyz\"))\n  (func (export \"hello\"))\n)\n</code></pre></div>\n<p>Ran <code>wasm-tools parse test-case.wat -o test-case.wasm</code> and ran both Wasmi and Wasmtime with it which both crashed during module instantiation with <code>memory out of bounds</code>.</p>\n<p>I re-converted the <code>test-case.wasm</code> back to <code>.wat</code> and saw the following:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func))\n  (memory (;0;) 1 1 (pagesize 0x1))\n  (export \"hello\" (func 0))\n  (func (;0;) (type 0))\n  (data (;0;) (i32.const 0) \"xyz\")\n)\n</code></pre></div>\n<ul>\n<li>\n<p>We clearly see that <code>memory</code> has <code>minimum</code> and <code>maximum</code> limits of 1 which is incorrect and should be 3 instead.<br>\nI am not sure where exactly the error is originating but since both Wasmi and Wasmtime are affected it might be in the <code>wast</code> crate.</p>\n</li>\n<li>\n<p>If I manually replace <code>(memory (;0;) 1 1 (pagesize 0x1))</code> with the correct limits of <code>(memory (;0;) 3 3 (pagesize 0x1))</code> both Wasmi and Wasmtime no longer crash.</p>\n</li>\n</ul>\n<p>Please move this issue if the exact source of the problem is located.<br>\n</p>\n</blockquote>",
        "id": 497657905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738673475
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10179#issuecomment-2634009081\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10179\">issue #10179</a>:</p>\n<blockquote>\n<p>I located the bug here:<br>\n<a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wast/src/core/resolve/deinline_import_export.rs#L57\">https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wast/src/core/resolve/deinline_import_export.rs#L57</a></p>\n<p>Namely, this line of code is using <code>default_page_size</code> instead of the <code>page_size_log2</code> field that has been provided above for the calculation of number of pages.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pages</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">default_page_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">default_page_size</span><span class=\"p\">();</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 497668757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738676626
    },
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10179\">issue #10179</a>:</p>\n<blockquote>\n<p>While implementing the <code>custom-page-sizes</code> proposal in Wasmi I encountered this failing test case in the official Wasm spectest mirror:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory (pagesize 1) (data \"xyz\"))\n  (func (export \"size\") (result i32)\n    memory.size)\n  (func (export \"grow\") (param i32) (result i32)\n    (memory.grow (local.get 0)))\n  (func (export \"load\") (param i32) (result i32)\n    (i32.load8_u (local.get 0)))\n)\n</code></pre></div>\n<p>(Link: <a href=\"https://github.com/WebAssembly/testsuite/blob/main/proposals/custom-page-sizes/custom-page-sizes.wast#L116\">https://github.com/WebAssembly/testsuite/blob/main/proposals/custom-page-sizes/custom-page-sizes.wast#L116</a>)</p>\n<p>Namely, <code>(memory (pagesize 1) (data \"xyz\"))</code> is a <code>memory</code> declaration with an inline <code>data</code> segment. The Wasm spec says the following about this:</p>\n<blockquote>\n<p>A data segment can be given inline with a memory definition, in which case its offset is and the limits of the memory type are inferred from the length of the data, rounded up to page size:</p>\n</blockquote>\n<p>(Source: <a href=\"https://webassembly.github.io/spec/core/text/modules.html#text-mem-abbrev\">https://webassembly.github.io/spec/core/text/modules.html#text-mem-abbrev</a>)</p>\n<p>However, i distilled my own test case:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (memory (pagesize 1) (data \"xyz\"))\n  (func (export \"hello\"))\n)\n</code></pre></div>\n<p>Ran <code>wasm-tools parse test-case.wat -o test-case.wasm</code> and ran both Wasmi and Wasmtime with it which both crashed during module instantiation with <code>memory out of bounds</code>.</p>\n<p>I re-converted the <code>test-case.wasm</code> back to <code>.wat</code> and saw the following:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func))\n  (memory (;0;) 1 1 (pagesize 0x1))\n  (export \"hello\" (func 0))\n  (func (;0;) (type 0))\n  (data (;0;) (i32.const 0) \"xyz\")\n)\n</code></pre></div>\n<ul>\n<li>\n<p>We clearly see that <code>memory</code> has <code>minimum</code> and <code>maximum</code> limits of 1 which is incorrect and should be 3 instead.<br>\nI am not sure where exactly the error is originating but since both Wasmi and Wasmtime are affected it might be in the <code>wast</code> crate.</p>\n</li>\n<li>\n<p>If I manually replace <code>(memory (;0;) 1 1 (pagesize 0x1))</code> with the correct limits of <code>(memory (;0;) 3 3 (pagesize 0x1))</code> both Wasmi and Wasmtime no longer crash.</p>\n</li>\n</ul>\n<p>Please move this issue if the exact source of the problem is located.<br>\n</p>\n</blockquote>",
        "id": 497670660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738677143
    }
]