[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470\">PR #11470</a> from <code>alexcrichton:table-memory-creation-async</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit is a large-ish refactor which is made possible by the many<br>\nprevious refactorings to internals w.r.t. async-in-Wasmtime. The end<br>\ngoal of this change is that table and memory allocation are both <code>async</code><br>\nfunctions. Achieving this, however, required some refactoring to enable<br>\nit to work:</p>\n<ul>\n<li>\n<p>To work with <code>Send</code> neither function can close over <code>dyn VMStore</code>.<br>\n  This required changing their <code>Option&lt;&amp;mut dyn VMStore&gt;</code> arugment to<br>\n<code>Option&lt;&amp;mut StoreResourceLimiter&lt;'_&gt;&gt;</code></p>\n</li>\n<li>\n<p>Somehow a <code>StoreResourceLimiter</code> needed to be acquired from an<br>\n<code>InstanceAllocationRequest</code>. Previously the store was stored here as<br>\n  an unsafe raw pointer, but I've refactored this now so<br>\n<code>InstanceAllocationRequest</code> directly stores <code>&amp;StoreOpaque</code> and<br>\n<code>Option&lt;&amp;mut StoreResourceLimiter&gt;</code> meaning it's trivial to acquire<br>\n  them. This additionally means no more <code>unsafe</code> access of the store<br>\n  during instance allocation (yay!).</p>\n</li>\n<li>\n<p>Now-redundant fields of <code>InstanceAllocationRequest</code> were removed since<br>\n  they can be safely inferred from <code>&amp;StoreOpaque</code>. For example passing<br>\n  around <code>&amp;Tunables</code> is now all gone.</p>\n</li>\n<li>\n<p>Methods upwards from table/memory allocation to the<br>\n<code>InstanceAllocator</code> trait needed to be made <code>async</code>. This includes new<br>\n<code>#[async_trait]</code> methods for example.</p>\n</li>\n<li>\n<p><code>StoreOpaque::ensure_gc_store</code> is now an <code>async</code> function. This<br>\n  internally carries a new <code>unsafe</code> block carried over from before with<br>\n  the raw point passed around in <code>InstanceAllocationRequest</code>. A future<br>\n  PR will delete this <code>unsafe</code> block, it's just temporary.</p>\n</li>\n</ul>\n<p>I attempted a few times to split this PR up into separate commits but<br>\neverything is relatively intertwined here so this is the smallest<br>\n\"atomic\" unit I could manage to land these changes and refactorings.</p>\n</blockquote>",
        "id": 535217286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755647540
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/dicej\">dicej</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470\">PR #11470</a>.</p>",
        "id": 535217289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755647540
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470\">PR #11470</a>.</p>",
        "id": 535217290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755647540
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#issuecomment-3203149335\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470\">PR #11470</a>:</p>\n<blockquote>\n<p>I'll note that I've split this into two commits, the first of which is <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11456\">https://github.com/bytecodealliance/wasmtime/pull/11456</a> resurrected here. That commit cannot be split out to a second PR due to all the various constraints in play unfortunately, so this is a bit larger than I would have otherwise anticipated.</p>\n</blockquote>",
        "id": 535217392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755647616
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#issuecomment-3203166461\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470\">PR #11470</a>:</p>\n<blockquote>\n<p>Oh, I should also note, this is a 5% performance penalty overhead to instance instantiation. Benchmarking makes me think it's primarily related to the <code>Box</code>-cost of <code>#[async_trait]</code>. We can burn down that cost I think if we really need from allocation-per-table-and-memory to once-per-module (aka two for most modules to one), but I don't know how to get away from it entirely. I subjectively concluded a few extra allocations is fine, but others can reasonably differ.</p>\n</blockquote>",
        "id": 535217489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755647725
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470\">PR #11470</a>:</p>\n<blockquote>\n<p>This commit is a large-ish refactor which is made possible by the many<br>\nprevious refactorings to internals w.r.t. async-in-Wasmtime. The end<br>\ngoal of this change is that table and memory allocation are both <code>async</code><br>\nfunctions. Achieving this, however, required some refactoring to enable<br>\nit to work:</p>\n<ul>\n<li>\n<p>To work with <code>Send</code> neither function can close over <code>dyn VMStore</code>.<br>\n  This required changing their <code>Option&lt;&amp;mut dyn VMStore&gt;</code> arugment to<br>\n<code>Option&lt;&amp;mut StoreResourceLimiter&lt;'_&gt;&gt;</code></p>\n</li>\n<li>\n<p>Somehow a <code>StoreResourceLimiter</code> needed to be acquired from an<br>\n<code>InstanceAllocationRequest</code>. Previously the store was stored here as<br>\n  an unsafe raw pointer, but I've refactored this now so<br>\n<code>InstanceAllocationRequest</code> directly stores <code>&amp;StoreOpaque</code> and<br>\n<code>Option&lt;&amp;mut StoreResourceLimiter&gt;</code> meaning it's trivial to acquire<br>\n  them. This additionally means no more <code>unsafe</code> access of the store<br>\n  during instance allocation (yay!).</p>\n</li>\n<li>\n<p>Now-redundant fields of <code>InstanceAllocationRequest</code> were removed since<br>\n  they can be safely inferred from <code>&amp;StoreOpaque</code>. For example passing<br>\n  around <code>&amp;Tunables</code> is now all gone.</p>\n</li>\n<li>\n<p>Methods upwards from table/memory allocation to the<br>\n<code>InstanceAllocator</code> trait needed to be made <code>async</code>. This includes new<br>\n<code>#[async_trait]</code> methods for example.</p>\n</li>\n<li>\n<p><code>StoreOpaque::ensure_gc_store</code> is now an <code>async</code> function. This<br>\n  internally carries a new <code>unsafe</code> block carried over from before with<br>\n  the raw point passed around in <code>InstanceAllocationRequest</code>. A future<br>\n  PR will delete this <code>unsafe</code> block, it's just temporary.</p>\n</li>\n</ul>\n<p>I attempted a few times to split this PR up into separate commits but<br>\neverything is relatively intertwined here so this is the smallest<br>\n\"atomic\" unit I could manage to land these changes and refactorings.</p>\n<p>cc #11430</p>\n</blockquote>",
        "id": 535217548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755647780
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470\">PR #11470</a>.</p>",
        "id": 535217751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755647971
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#issuecomment-3203629587\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470\">PR #11470</a>:</p>\n<blockquote>\n<p>I was a bit afraid of this, but tests here will fail until I rebase this on top of #11468. So ready for review, but won't pass tests until #11468 lands first.</p>\n</blockquote>",
        "id": 535221592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755651189
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470\">PR #11470</a>.</p>",
        "id": 535364228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755712466
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470\">PR #11470</a>.</p>",
        "id": 535364344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755712522
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470\">PR #11470</a>.</p>",
        "id": 535370689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755715163
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#pullrequestreview-3137786599\">PR review</a>.</p>",
        "id": 535371041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755715332
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#discussion_r2288971332\">PR review comment</a>:</p>\n<blockquote>\n<p>And similarly assert that the config is async here?</p>\n</blockquote>",
        "id": 535371043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755715332
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#discussion_r2288970238\">PR review comment</a>:</p>\n<blockquote>\n<p>Should we not assert that this is a non-async config before the <code>.expect(..)</code> to catch mismatches a little earlier?</p>\n</blockquote>",
        "id": 535371044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755715332
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#discussion_r2288975763\">PR review comment</a>:</p>\n<blockquote>\n<p>Add a note for this to our items to discuss with the lang team, if we don't have one already?</p>\n</blockquote>",
        "id": 535371045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755715332
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#discussion_r2288977391\">PR review comment</a>:</p>\n<blockquote>\n<p>This is so nice to clean up</p>\n</blockquote>",
        "id": 535371046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755715332
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#pullrequestreview-3137844459\">PR review</a>.</p>",
        "id": 535372414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755715950
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#discussion_r2289012425\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh this one's technically <a href=\"https://github.com/rust-lang/rust/pull/143545\">already fixed</a> and just waiting on stabilization, and browsing <a href=\"https://github.com/rust-lang/rust/issues/110338\">https://github.com/rust-lang/rust/issues/110338</a> shows this is pretty well-known, so not a major issue.</p>\n</blockquote>",
        "id": 535372415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755715950
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#pullrequestreview-3137847967\">PR review</a>.</p>",
        "id": 535372607,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755716030
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#discussion_r2289015173\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh this is actually replicating the documented behavior where this works with <code>async_support</code> so long as an async resource limiter isn't used. In that sense to avoid breaking the semantics here <code>one_poll</code> is what's required as opposed to an <code>assert!(!async_support)</code> plus <code>vm::assert_ready</code>.</p>\n</blockquote>",
        "id": 535372609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755716031
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#pullrequestreview-3137850584\">PR review</a>.</p>",
        "id": 535372735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755716089
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#discussion_r2289017121\">PR review comment</a>:</p>\n<blockquote>\n<p>As I've been making these changes I've actually been undoing a lot of <code>assert!(async_support)</code>-style assertions. Previously that was required because <code>on_fiber</code> was immediately used which required <code>async_support</code> to be turned on, but now it's just normal Rust async functions so there's no reason to prevent usage when <code>async_support</code> is disabled. In that sense it's intentional that the assert here is lost, but how's that sound to you?</p>\n</blockquote>",
        "id": 535372739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755716090
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470\">PR #11470</a>.</p>",
        "id": 535372850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755716143
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#issuecomment-3208496655\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470\">PR #11470</a>:</p>\n<blockquote>\n<p>I'm going to go ahead and land this, but @fitzgen if you have follow up comments I'm happy to address them.</p>\n</blockquote>",
        "id": 535406690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755734551
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470\">PR #11470</a>.</p>",
        "id": 535408023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755735915
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470#issuecomment-3211390147\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11470\">PR #11470</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm going to go ahead and land this, but @fitzgen if you have follow up comments I'm happy to address them.</p>\n</blockquote>\n<p>Nope, looks good</p>\n</blockquote>",
        "id": 535543188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755795060
    }
]