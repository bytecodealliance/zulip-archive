[
    {
        "content": "<p>xofyarg opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10784\">issue #10784</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Giving the following wasi-http design and implementation:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"o\">-</span><span class=\"n\">outparam</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"n\">set</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">static</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">(</span>\n<span class=\"w\">     </span><span class=\"n\">param</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">response</span><span class=\"o\">-</span><span class=\"n\">outparam</span><span class=\"p\">,</span>\n<span class=\"w\">     </span><span class=\"n\">response</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">outgoing</span><span class=\"o\">-</span><span class=\"n\">response</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">set</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">HostResponseOutparam</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">resp</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">HostOutgoingResponse</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">ErrorCode</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">resp</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">().</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">try_into</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">result</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"o\">&lt;---</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">fail</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">call</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">anyhow</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"failed to initialize response\"</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The common scenario is a host is waiting for a response from the guest under a given timeout. If the timeout is reached without having anything from the guest, the host will drop the receiver side of the channel, which will fail the hostcall and likely crash the wasi program.</p>\n<h4>Benefit</h4>\n<p>The error doesn't seem to be fatal, and the caller should be able to decide what to do next.</p>\n<h4>Implementation</h4>\n<p>Maybe allow the set API to return an error to the caller.<br>\n</p>\n</blockquote>",
        "id": 518448673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747370029
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10784#issuecomment-2888885777\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10784\">issue #10784</a>:</p>\n<blockquote>\n<p>Can you describe your situation in a bit more detail? For example to confirm, you want to set a timeout for the guest to generate a response, but you do not want to set a timeout (or you perhaps want a different timeout?) for the guest's execution itself?</p>\n</blockquote>",
        "id": 518905379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747560846
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasi:api label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10784\">Issue #10784</a>.</p>",
        "id": 518905415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747560887
    },
    {
        "content": "<p>xofyarg <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10784#issuecomment-2889190828\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10784\">issue #10784</a>:</p>\n<blockquote>\n<p>Sure. The host provides an async request stream to the guest, where each item contains <code>incoming-request</code> and <code>response-outparam</code>. After sending the request to the guest, the host then wait for the receiver side of the channel, which put its sender in <code>WasiHttpView::new_response_outparam</code>. The waiting task above is wrapped by a timeout, that's currently the only timeout. The guest execution itself doesn't have any timeout, partly because it's a bit out of our control. As the guest has an async runtime, we bridge a request processing task from the host to one from the guest via channel. The expectation is when the host timeout is reached, the host task will be dropped, and on the guest side, depends on the implementation,  either the timeout is longer than the host side, or no timeout at all, it should fail the guest request processing task itself, but not the whole guest program.</p>\n<p>wit:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">req</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">subscribe</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">pollable</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">next</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">incoming</span><span class=\"o\">-</span><span class=\"n\">request</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"o\">-</span><span class=\"n\">outparam</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>host:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">tx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">oneshot</span><span class=\"p\">::</span><span class=\"n\">channel</span><span class=\"p\">();</span>\n<span class=\"n\">stream</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">((</span><span class=\"n\">hyper_req</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tx</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n<span class=\"n\">tokio</span><span class=\"p\">::</span><span class=\"n\">time</span><span class=\"p\">::</span><span class=\"n\">timeout</span><span class=\"p\">(</span><span class=\"n\">duration</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rx</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>guest:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">process_request</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">incoming_req</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">outparam</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">async_stream</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">ResponseOutparam</span><span class=\"p\">::</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">outparam</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">incoming_req</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 518954656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747599549
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10784#issuecomment-2889215382\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10784\">issue #10784</a>:</p>\n<blockquote>\n<p>That makes sense yeah, thanks for explaining. I was curious as well for the rationale for why it's architected like this (as opposed to timing out the guest, which you probably want to do no matter what), but that's also not necessarily the most important part here.</p>\n<p>To clarify though the change you're asking for here is one for the <a href=\"https://github.com/WebAssembly/wasi-http\">wasi-http</a> repository. Wasmtime won't change the WITs from upstream in one-off cases like this. That means that changing the actual WIT API is not a change that's in-scope for this repository.</p>\n<p>One possibility though, without changing WITs, would be to remove this trap from Wasmtime's implementation. One could argue that even if the response is sent successfully there's no guarantee it was actually picked up by the host. Along that line of logic it seems not unreasonable to me that we could simply drop the error here and intentionally ignore it, avoiding trapping the guest. Forwarding this information to the guest (aka \"this response will never be sent\") can be an issue for the uptime wasi-http repository.</p>\n<p>Would you be interested in seeing if other folks would agree with this change? Perhaps with a PR sketching this out, a test, and maybe an issue upstream as well for changing the interface?</p>\n</blockquote>",
        "id": 518959210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747602913
    },
    {
        "content": "<p>xofyarg <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10784#issuecomment-2907644340\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10784\">issue #10784</a>:</p>\n<blockquote>\n<p>Raised a PR. Upstream wasi-http <a href=\"https://github.com/WebAssembly/wasi-http/blob/main/wit-0.3.0-draft/handler.wit#L14\">interface changed in 0.3.0 draft</a>, giving us opportunity to return an error. </p>\n</blockquote>",
        "id": 520265483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748154976
    },
    {
        "content": "<p>pchickey closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10784\">issue #10784</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Giving the following wasi-http design and implementation:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"o\">-</span><span class=\"n\">outparam</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"n\">set</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">static</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">(</span>\n<span class=\"w\">     </span><span class=\"n\">param</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">response</span><span class=\"o\">-</span><span class=\"n\">outparam</span><span class=\"p\">,</span>\n<span class=\"w\">     </span><span class=\"n\">response</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">outgoing</span><span class=\"o\">-</span><span class=\"n\">response</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">set</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">HostResponseOutparam</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">resp</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">HostOutgoingResponse</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">ErrorCode</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">resp</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">().</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">try_into</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">result</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"o\">&lt;---</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">fail</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">call</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">anyhow</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"failed to initialize response\"</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The common scenario is a host is waiting for a response from the guest under a given timeout. If the timeout is reached without having anything from the guest, the host will drop the receiver side of the channel, which will fail the hostcall and likely crash the wasi program.</p>\n<h4>Benefit</h4>\n<p>The error doesn't seem to be fatal, and the caller should be able to decide what to do next.</p>\n<h4>Implementation</h4>\n<p>Maybe allow the set API to return an error to the caller.<br>\n</p>\n</blockquote>",
        "id": 521857925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748904486
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10784#issuecomment-2932773276\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10784\">issue #10784</a>:</p>\n<blockquote>\n<p>Thanks for raising this issue and fixing it! I believe this has been closed by <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10833\">https://github.com/bytecodealliance/wasmtime/pull/10833</a>, please re-open if I misunderstood.</p>\n</blockquote>",
        "id": 521857926,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748904486
    }
]