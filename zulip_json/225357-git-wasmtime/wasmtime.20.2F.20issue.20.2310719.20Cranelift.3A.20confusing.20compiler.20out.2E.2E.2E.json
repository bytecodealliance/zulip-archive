[
    {
        "content": "<p><a href=\"https://github.com/abrown\">abrown</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10719\">Issue #10719</a>.</p>",
        "id": 515813647,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746227750
    },
    {
        "content": "<p><a href=\"https://github.com/abrown\">abrown</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10719\">Issue #10719</a>.</p>",
        "id": 515813648,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746227750
    },
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10719\">issue #10719</a>:</p>\n<blockquote>\n<p>See the following existing compilation test:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e0431281326eb13b45af0d6dd7829304e18581d4/cranelift/filetests/filetests/isa/x64/simd-lane-access-compile.clif#L134-L137\">https://github.com/bytecodealliance/wasmtime/blob/e0431281326eb13b45af0d6dd7829304e18581d4/cranelift/filetests/filetests/isa/x64/simd-lane-access-compile.clif#L134-L137</a></p>\n<p>A constant from the post-function pool is being loaded into <code>%xmm1</code>, but the instruction that would use it <code>paddusb</code>, then re-loads it as it writes into <code>%xmm1</code>. Now, the <code>movdqu</code> seems correct in one sense: memory addresses to packed instructions must be 128-bit aligned so, when converting an <code>XmmMemAligned</code> to an <code>XmmMem</code>, Cranelift inserts an unaligned load. But the direct use by <code>paddusb</code> might also be correct: we may be aligning the start of the constant pool and so this may be just fine.</p>\n<p>Either way, something is not quite right, though:</p>\n<ul>\n<li>if the constant pool is _not_ aligned or this can't be communicated to the instruction, <code>paddusb</code> should not be using the address directly</li>\n<li>if the constant pool _is_ aligned and communicated properly, then the <code>movdqu</code> is redundant and should be removed</li>\n</ul>\n<p>Which is it? I'm leaning towards the latter because of sequences like the following:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e0431281326eb13b45af0d6dd7829304e18581d4/cranelift/filetests/filetests/isa/x64/simd-pairwise-add.clif#L154-L156\">https://github.com/bytecodealliance/wasmtime/blob/e0431281326eb13b45af0d6dd7829304e18581d4/cranelift/filetests/filetests/isa/x64/simd-pairwise-add.clif#L154-L156</a></p>\n<p>Those instructions have no trouble accessing the pool by aligned address... or are they incorrect?</p>\n</blockquote>",
        "id": 515813649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746227750
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10719#issuecomment-2848269289\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10719\">issue #10719</a>:</p>\n<blockquote>\n<p>The constant pool does align 128-bit constants: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e0431281326eb13b45af0d6dd7829304e18581d4/cranelift/codegen/src/machinst/vcode.rs#L1983\">here</a> and then used <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e0431281326eb13b45af0d6dd7829304e18581d4/cranelift/codegen/src/machinst/buffer.rs#L1325\">here</a>.</p>\n<p>I'm not sure I understand the \"<code>movdqu</code> is redundant\" point though: there are two constants here, and two <code>movdqu</code>s; the first <code>movdqu</code> loads the same constant as the <code>paddusb</code> does, but into <code>xmm0</code>, not <code>xmm1</code>; the second <code>movdqu</code> loads a different constant. It looks like it's true that the <code>paddusb</code> doesn't reuse the value in <code>xmm0</code> -- is that the part you mean?</p>\n</blockquote>",
        "id": 515814601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746228309
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10719#issuecomment-2848278259\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10719\">issue #10719</a>:</p>\n<blockquote>\n<p>I should have narrowed down that code snippet to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">movdqu</span><span class=\"w\"> </span><span class=\"mh\">0x1c</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span>\n<span class=\"n\">paddusb</span><span class=\"w\"> </span><span class=\"mh\">0x24</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span>\n</code></pre></div>\n<p>What I see is both of these instructions loading the same constant, only the offsets are different because the instructions each live at different <code>%rip</code> locations. Does that make more sense?<br>\n</p>\n</blockquote>",
        "id": 515815734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746229034
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10719#issuecomment-2848291448\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10719\">issue #10719</a>:</p>\n<blockquote>\n<p>Ah! OK, so it's a deduplication issue? I don't think we dedup 128-bit constants right now; I don't recall why not, off the top of my head. If we did that, then in theory it should be possible to GVN the two arguments...</p>\n</blockquote>",
        "id": 515817536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746230207
    }
]