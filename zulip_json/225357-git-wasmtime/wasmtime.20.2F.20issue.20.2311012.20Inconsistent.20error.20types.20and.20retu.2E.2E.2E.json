[
    {
        "content": "<p>akldc opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11012\">issue #11012</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">none</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">preserve_frame_pointers</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_multi_ret_implicit_sret</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nc\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"n\">block0</span><span class=\"p\">():</span>\n<span class=\"w\">    </span><span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">srem</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v16</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>Run this test case on four architectures.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">x86</span><span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Floating</span><span class=\"w\"> </span><span class=\"n\">point</span><span class=\"w\"> </span><span class=\"n\">exception</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">8</span>\n\n<span class=\"p\">[</span><span class=\"n\">aarch64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">qemu</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">uncaught</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">signal</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Illegal</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">dumped</span>\n<span class=\"p\">[</span><span class=\"n\">aarch64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Illegal</span><span class=\"w\"> </span><span class=\"n\">instruction</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">4</span>\n\n<span class=\"p\">[</span><span class=\"n\">riscv64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Illegal</span><span class=\"w\"> </span><span class=\"n\">instruction</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">4</span>\n\n<span class=\"p\">[</span><span class=\"n\">s390x</span><span class=\"w\">  </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">qemu</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">uncaught</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">signal</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Floating</span><span class=\"w\"> </span><span class=\"n\">point</span><span class=\"w\"> </span><span class=\"n\">exception</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">dumped</span>\n<span class=\"p\">[</span><span class=\"n\">s390x</span><span class=\"w\">  </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Illegal</span><span class=\"w\"> </span><span class=\"n\">instruction</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">8</span>\n</code></pre></div>\n<p>When running <code>srem</code> with operands 0 and 0, the error types and return values are inconsistent among the four architectures.</p>\n</blockquote>",
        "id": 523552710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749645799
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11012\">Issue #11012</a>.</p>",
        "id": 523552711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749645799
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11012\">Issue #11012</a>.</p>",
        "id": 523552713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749645800
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11012#issuecomment-2962770500\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11012\">issue #11012</a>:</p>\n<blockquote>\n<p>This is expected. On some architectures division by zero emits SIGFPE, on others SIGILL.</p>\n</blockquote>",
        "id": 523564162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749649170
    },
    {
        "content": "<p>akldc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11012#issuecomment-2963007587\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11012\">issue #11012</a>:</p>\n<blockquote>\n<p>@bjorn3 <br>\nOk,thanks</p>\n</blockquote>",
        "id": 523571504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749651210
    },
    {
        "content": "<p>akldc closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11012\">issue #11012</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">none</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">preserve_frame_pointers</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_multi_ret_implicit_sret</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nc\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"n\">block0</span><span class=\"p\">():</span>\n<span class=\"w\">    </span><span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">srem</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v16</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>Run this test case on four architectures.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">x86</span><span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Floating</span><span class=\"w\"> </span><span class=\"n\">point</span><span class=\"w\"> </span><span class=\"n\">exception</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">8</span>\n\n<span class=\"p\">[</span><span class=\"n\">aarch64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">qemu</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">uncaught</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">signal</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Illegal</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">dumped</span>\n<span class=\"p\">[</span><span class=\"n\">aarch64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Illegal</span><span class=\"w\"> </span><span class=\"n\">instruction</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">4</span>\n\n<span class=\"p\">[</span><span class=\"n\">riscv64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Illegal</span><span class=\"w\"> </span><span class=\"n\">instruction</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">4</span>\n\n<span class=\"p\">[</span><span class=\"n\">s390x</span><span class=\"w\">  </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">qemu</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">uncaught</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">signal</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Floating</span><span class=\"w\"> </span><span class=\"n\">point</span><span class=\"w\"> </span><span class=\"n\">exception</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">dumped</span>\n<span class=\"p\">[</span><span class=\"n\">s390x</span><span class=\"w\">  </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Illegal</span><span class=\"w\"> </span><span class=\"n\">instruction</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">8</span>\n</code></pre></div>\n<p>When running <code>srem</code> with operands 0 and 0, the error types and return values are inconsistent among the four architectures.</p>\n</blockquote>",
        "id": 523571505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749651210
    }
]