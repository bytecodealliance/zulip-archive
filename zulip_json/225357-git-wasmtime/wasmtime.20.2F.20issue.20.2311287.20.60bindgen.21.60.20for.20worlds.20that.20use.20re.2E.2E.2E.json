[
    {
        "content": "<p>AmitPr opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287\">issue #11287</a>:</p>\n<blockquote>\n<p>Hey folks, I was wondering whether I'm approaching this wrong, or whether this is an oversight in how <code>wasmtime::component::bindgen!</code> works:</p>\n<p>I'm trying to write a WIT interface that allows me to return <code>wasi:keyvalue</code> buckets. Specifically:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package amitpr:test\ninterface root-store {\n    use store.{bucket, error};\n    /// Open the root KV store\n    open-root: func(identifier: string) -&gt; result&lt;bucket, error&gt;;\n}\n\nworld sudo {\n    import root-store;\n}\n</code></pre></div>\n<p>I then bindgen something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"amitpr:test/sudo\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">trappable_imports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"s\">\"wasi:keyvalue/store/bucket\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">crate</span><span class=\"p\">::</span><span class=\"n\">kv</span><span class=\"p\">::</span><span class=\"n\">bucket</span><span class=\"p\">::</span><span class=\"n\">MyBucket</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">trappable_error_type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"s\">\"wasi:keyvalue/store/error\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"p\">::</span><span class=\"n\">kv</span><span class=\"p\">::</span><span class=\"n\">KVError</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n</code></pre></div>\n<p>The important thing to note, is that I already have <code>wasi:keyvalue</code> implemented elsewhere, which uses <code>wasi:keyvalue/imports</code> and implements the <code>Host</code> trait for those worlds.</p>\n<p>However, when I want to create a <code>Host</code> implementation for this <code>sudo</code> world, my struct is required to be <code>sudo::root_store::Host</code> <strong>_as well as_</strong> <code>wasi::keyvalue::store::Host</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">KvLibrary</span><span class=\"p\">;</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HasData</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">KvLibrary</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Data</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">KvView</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">SudoLibrary</span><span class=\"p\">;</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HasData</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SudoLibrary</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Data</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SudoView</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Later:</span>\n<span class=\"w\">        </span><span class=\"c1\">// This works:</span>\n<span class=\"w\">        </span><span class=\"n\">kv</span><span class=\"p\">::</span><span class=\"n\">store</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">KvLibrary</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kv_getter</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">kv</span><span class=\"p\">::</span><span class=\"n\">atomics</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">KvLibrary</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kv_getter</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">kv</span><span class=\"p\">::</span><span class=\"n\">batch</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">KvLibrary</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kv_getter</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"c1\">// This tells me that SudoLibrary needs to implement keyvalue Host!</span>\n<span class=\"w\">        </span><span class=\"n\">sudo</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SudoLibrary</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sudo_getter</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I'm not 100% sure in what to do in this situation. Of course, I could duplicate the <code>wasi:keyvalue</code> host trait implementation, but that seems super unidiomatic. Am I missing why my <code>SudoLibrary</code> is enforced to implement the <code>wasi:keyvalue</code> worlds? Is there a way for me to invoke the macro without that bound, since <code>wasi:keyvalue</code> will already have bindings in my instantiation of the linker? Or is there a way for me to more idiomatically include the <code>wasi:keyvalue</code> host implementation in the <code>SudoView</code> struct I have?</p>\n<p>Thanks</p>\n</blockquote>",
        "id": 529702297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753032742
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287#issuecomment-3097397484\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287\">issue #11287</a>:</p>\n<blockquote>\n<p>I believe this can be fixed if the sudo world's <code>with</code> clause contains a mapping for the entire wasi:keyvalue/store interface to the generated bindings module for that interface, in addition to providing a mapping for the resource. You may be able to elide the mapping for the resource, but I'm not certain.</p>\n</blockquote>",
        "id": 529923898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753114583
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287#issuecomment-3120066445\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287\">issue #11287</a>:</p>\n<blockquote>\n<p>You might also need to use the per-interface <code>add_to_linker</code> instead of a top-level <code>add_to_linker</code> if you're using different data/projections for each of the <code>*_getter</code> functions.</p>\n</blockquote>",
        "id": 530835011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753471306
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime:api label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287\">Issue #11287</a>.</p>",
        "id": 530835033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753471313
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:component-model label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287\">Issue #11287</a>.</p>",
        "id": 530835034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753471313
    },
    {
        "content": "<p>AmitPr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287#issuecomment-3168946152\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287\">issue #11287</a>:</p>\n<blockquote>\n<p>@pchickey this worked, but specifying the entire interface to another set of bindings seems like a somewhat flimsy way to set things up.</p>\n<p>Not sure if this can be improved, to allow for the situation where there may be bindings in e.g. private modules. Perhaps this is addressed by eliding the mapping? Although I'm not sure how you would accomplish that.</p>\n<p>Leaving this open, but feel free to close if status quo is alright</p>\n</blockquote>",
        "id": 533509060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754677467
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287#issuecomment-3169442851\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287\">issue #11287</a>:</p>\n<blockquote>\n<p>Sorry, I didn't elaborate much. This should only take a single line in <code>with</code> pointing to a public module in another crate.</p>\n<p>The module with reusable bindings has to be public to be used from another crate, I don't think theres any way to get around that).</p>\n<p>From my own project (sorry, no source link available at this time) which uses the wasmtime-wasi-io crate to implement wasi:io, and provides its own impls of the rest of the wasi interfaces (or any other wits which use any aspect of wasi:io):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"my:embedding/bindings\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">exports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">async</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">trappable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// delegate wasi-io implementation to wasmtime-wasi-io:</span>\n<span class=\"w\">        </span><span class=\"s\">\"wasi:io\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime_wasi_io</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"c1\">// Then, the rest of the definitions which are local to this crate:</span>\n<span class=\"w\">        </span><span class=\"s\">\"wasi:http/types/incoming-request\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">http</span><span class=\"p\">::</span><span class=\"n\">IncomingRequestResource</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"c1\">// ...snip</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"c1\">// This flag is required for compatibility with wasmtime-wasi-io:</span>\n<span class=\"w\">    </span><span class=\"n\">require_store_data_send</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n</blockquote>",
        "id": 533535293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754691867
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287#issuecomment-3169442851\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287\">issue #11287</a>:</p>\n<blockquote>\n<p>Sorry, I didn't elaborate much. This should only take a single line in <code>with</code> pointing to a public module in another crate.</p>\n<p>The module with reusable bindings has to be public to be used from another crate, I don't think theres any way to get around that).</p>\n<p>From my own project (sorry, no source link available at this time) which uses the wasmtime-wasi-io crate to implement wasi:io, and provides its own impls of the rest of the wasi interfaces (or any other wits which use any aspect of wasi:io):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"my:embedding/bindings\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">exports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">async</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">trappable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// delegate wasi-io implementation to wasmtime-wasi-io:</span>\n<span class=\"w\">        </span><span class=\"s\">\"wasi:io\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime_wasi_io</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"c1\">// Then, the rest of the definitions which are local to this crate:</span>\n<span class=\"w\">        </span><span class=\"s\">\"wasi:http/types/incoming-request\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">http</span><span class=\"p\">::</span><span class=\"n\">IncomingRequestResource</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"c1\">// ...snip</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"c1\">// This flag is required for compatibility with wasmtime-wasi-io:</span>\n<span class=\"w\">    </span><span class=\"n\">require_store_data_send</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>Does this technique feel less flimsy than what you did?<br>\n</p>\n</blockquote>",
        "id": 533535357,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754691912
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287#issuecomment-3169442851\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287\">issue #11287</a>:</p>\n<blockquote>\n<p>Sorry, I didn't elaborate much. This should only take a single line in <code>with</code> pointing to a public module in another crate.</p>\n<p>The module with reusable bindings has to be public to be used from another crate, I don't think theres any way to get around that.</p>\n<p>From my own project (sorry, no source link available at this time) which uses the wasmtime-wasi-io crate to implement wasi:io, and provides its own impls of the rest of the wasi interfaces (or any other wits which use any aspect of wasi:io):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"my:embedding/bindings\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">exports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">async</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">trappable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// delegate wasi-io implementation to wasmtime-wasi-io:</span>\n<span class=\"w\">        </span><span class=\"s\">\"wasi:io\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime_wasi_io</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"c1\">// Then, the rest of the definitions which are local to this crate:</span>\n<span class=\"w\">        </span><span class=\"s\">\"wasi:http/types/incoming-request\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">http</span><span class=\"p\">::</span><span class=\"n\">IncomingRequestResource</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"c1\">// ...snip</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"c1\">// This flag is required for compatibility with wasmtime-wasi-io:</span>\n<span class=\"w\">    </span><span class=\"n\">require_store_data_send</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>Does this technique feel less flimsy than what you did?<br>\n</p>\n</blockquote>",
        "id": 533535369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754691926
    },
    {
        "content": "<p>AmitPr closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287\">issue #11287</a>:</p>\n<blockquote>\n<p>Hey folks, I was wondering whether I'm approaching this wrong, or whether this is an oversight in how <code>wasmtime::component::bindgen!</code> works:</p>\n<p>I'm trying to write a WIT interface that allows me to return <code>wasi:keyvalue</code> buckets. Specifically:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package amitpr:test\ninterface root-store {\n    use store.{bucket, error};\n    /// Open the root KV store\n    open-root: func(identifier: string) -&gt; result&lt;bucket, error&gt;;\n}\n\nworld sudo {\n    import root-store;\n}\n</code></pre></div>\n<p>I then bindgen something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"amitpr:test/sudo\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">trappable_imports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"s\">\"wasi:keyvalue/store/bucket\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">crate</span><span class=\"p\">::</span><span class=\"n\">kv</span><span class=\"p\">::</span><span class=\"n\">bucket</span><span class=\"p\">::</span><span class=\"n\">MyBucket</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">trappable_error_type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"s\">\"wasi:keyvalue/store/error\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"p\">::</span><span class=\"n\">kv</span><span class=\"p\">::</span><span class=\"n\">KVError</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n</code></pre></div>\n<p>The important thing to note, is that I already have <code>wasi:keyvalue</code> implemented elsewhere, which uses <code>wasi:keyvalue/imports</code> and implements the <code>Host</code> trait for those worlds.</p>\n<p>However, when I want to create a <code>Host</code> implementation for this <code>sudo</code> world, my struct is required to be <code>sudo::root_store::Host</code> <strong>_as well as_</strong> <code>wasi::keyvalue::store::Host</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">KvLibrary</span><span class=\"p\">;</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HasData</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">KvLibrary</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Data</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">KvView</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">SudoLibrary</span><span class=\"p\">;</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HasData</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SudoLibrary</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Data</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SudoView</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Later:</span>\n<span class=\"w\">        </span><span class=\"c1\">// This works:</span>\n<span class=\"w\">        </span><span class=\"n\">kv</span><span class=\"p\">::</span><span class=\"n\">store</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">KvLibrary</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kv_getter</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">kv</span><span class=\"p\">::</span><span class=\"n\">atomics</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">KvLibrary</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kv_getter</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">kv</span><span class=\"p\">::</span><span class=\"n\">batch</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">KvLibrary</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kv_getter</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"c1\">// This tells me that SudoLibrary needs to implement keyvalue Host!</span>\n<span class=\"w\">        </span><span class=\"n\">sudo</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SudoLibrary</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sudo_getter</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I'm not 100% sure in what to do in this situation. Of course, I could duplicate the <code>wasi:keyvalue</code> host trait implementation, but that seems super unidiomatic. Am I missing why my <code>SudoLibrary</code> is enforced to implement the <code>wasi:keyvalue</code> worlds? Is there a way for me to invoke the macro without that bound, since <code>wasi:keyvalue</code> will already have bindings in my instantiation of the linker? Or is there a way for me to more idiomatically include the <code>wasi:keyvalue</code> host implementation in the <code>SudoView</code> struct I have?</p>\n<p>Thanks</p>\n</blockquote>",
        "id": 536630973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756394334
    },
    {
        "content": "<p>AmitPr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287#issuecomment-3233938445\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11287\">issue #11287</a>:</p>\n<blockquote>\n<p>Going to go ahead and close this; I think @pchickey’s technique works well and doesn’t feel much like a hack anymore!</p>\n<p>Thanks folks</p>\n</blockquote>",
        "id": 536630980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756394334
    }
]