[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154\">PR #10154</a>.</p>",
        "id": 496666027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738194925
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154\">PR #10154</a>.</p>",
        "id": 496666031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738194925
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154\">PR #10154</a>.</p>",
        "id": 496666032,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738194925
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154\">PR #10154</a>.</p>",
        "id": 496666033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738194925
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154\">PR #10154</a>.</p>",
        "id": 496666052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738194938
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#issuecomment-2623198339\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154\">PR #10154</a>:</p>\n<blockquote>\n<p>I'll note that one thing I'm having difficulty adding a <code>disas</code> test for is something which generates a \"g32bne\" lowering. I can see the instructions getting emitted in <code>spidermonkey.cwasm</code> but I am having a difficult time reducing things down to something that can be added as an example. Most loads aren't \"sinkable\" which is why it's not used super often at least.</p>\n</blockquote>",
        "id": 496666178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738194988
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#issuecomment-2623358477\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154\">PR #10154</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:meta\", \"isle\", \"pulley\", \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle, pulley</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 496679815,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738202774
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#discussion_r1941589424\">PR review comment</a>:</p>\n<blockquote>\n<p>All the instruction deltas in this file are equal or worse compared to before -- is that expected?</p>\n</blockquote>",
        "id": 497718952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738689769
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#discussion_r1941580376\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we put this in the common prelude, rather than duplicating it in both the opt and lower preludes?</p>\n</blockquote>",
        "id": 497718953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738689769
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#pullrequestreview-2593536076\">PR review</a>:</p>\n<blockquote>\n<p>LGTM but some questions that should be resolved below.</p>\n</blockquote>",
        "id": 497718960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738689772
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#discussion_r1941582414\">PR review comment</a>:</p>\n<blockquote>\n<p>Might as well use the helper if you're gonna define it:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        self.is_pulley()\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 497718962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738689772
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#issuecomment-2634609932\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154\">PR #10154</a>:</p>\n<blockquote>\n<p>And sorry for the delay on this review, I forgot about it for a little bit</p>\n</blockquote>",
        "id": 497719006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738689790
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#pullrequestreview-2598817845\">PR review</a>.</p>",
        "id": 498131333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738851484
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#discussion_r1944806936\">PR review comment</a>:</p>\n<blockquote>\n<p>It was originally, but the problem is that they're slightly different where the helpers for egraphs have a <code>ty</code> variable and the helpers for backends don't. I'm not sure how to otherwise unify those two myself</p>\n</blockquote>",
        "id": 498131337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738851485
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154\">PR #10154</a>.</p>",
        "id": 498131694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738851583
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154\">PR #10154</a>.</p>",
        "id": 498144451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738854799
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#discussion_r1944934350\">PR review comment</a>:</p>\n<blockquote>\n<p>That's a good point, and one where I mostly shrugged this off but shouldn't have! I focused a bit more on this and improved a few cases in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154/commits/63e2c5a92a3a209b466a8e3a7627bcb9cd3ef159\">https://github.com/bytecodealliance/wasmtime/pull/10154/commits/63e2c5a92a3a209b466a8e3a7627bcb9cd3ef159</a></p>\n<p>The remaining ones that got worse are:</p>\n<ul>\n<li><code>offset_just_bad_v2</code> - looking into this it looks like optimizations shuffle constants around enough that the output CLIF is quite different from normal loads/stores, so I think this is something we'll basically just take a hit on for now and improve later if necessary</li>\n<li><code>maybe_inbounds_v2</code> - this doesn't codegen well because egraphs can't optimize away the <code>uadd_overflow_trap</code>-with-<code>iconst</code>-inputs that the frontend generates. Another possible fix is to optimize the frontend to skip <code>uadd_overflow_trap</code> in this case (constant address).</li>\n</ul>\n</blockquote>",
        "id": 498148272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738855786
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#pullrequestreview-2599030165\">PR review</a>.</p>",
        "id": 498148273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738855786
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154\">PR #10154</a>.</p>",
        "id": 498148578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738855857
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#pullrequestreview-2599333485\">PR review</a>.</p>",
        "id": 498167614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738860837
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#discussion_r1945100836\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW, we want to add the type parameters in the lowering prelude's versions of the bindings eventually, for exactly this reason -- the only reason they aren't there is that lowering rules were written first and we didn't realize we would need them on the constructor side. @mmcloughlin apparently has a private branch where this change has been made -- Michael, would you be willing to think about upstreaming this?</p>\n</blockquote>",
        "id": 498167615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738860837
    },
    {
        "content": "<p>mmcloughlin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#pullrequestreview-2599794445\">PR review</a>.</p>",
        "id": 498202205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738872619
    },
    {
        "content": "<p>mmcloughlin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#discussion_r1945359885\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, I think I could upstream it. Our fork has diverged a bit so it's not a clean patch, but thankfully I did keep the Python script I used to do most of the fixups and hopefully that procedure would work again.</p>\n<p>A couple of things to note about the change in our fork:</p>\n<ul>\n<li>The <code>ty</code> parameter is not always present on instruction extractors. In the CDSL code generator, a <code>ty</code> parameter added only when the instruction is statically known to always have at least one result. In that case, <code>ty</code> is the type of the first result value.</li>\n<li>The existing code uses <code>has_type</code> extractor in cases that would now be more naturally be done with the provided <code>ty</code> argument. Replacing <code>has_type</code> uses with the <code>ty</code> argument is hard/impossible to do automatically. This is fine as long as you're okay with migrating away from <code>has_type</code> (where possible) more slowly over time.<br>\n</li>\n</ul>\n</blockquote>",
        "id": 498202208,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738872619
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#pullrequestreview-2599855233\">PR review</a>.</p>",
        "id": 498206416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738874276
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154#discussion_r1945394711\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>The ty parameter is not always present on instruction extractors. In the CDSL code generator, a ty parameter added only when the instruction is statically known to always have at least one result. In that case, ty is the type of the first result value.</p>\n</blockquote>\n<p>I suppose we could use <code>Types::INVALID</code> for no-result instructions on the extractor side. (On the constructor side we currently don't generate ctors for side-effecting insts, which includes all no-result insts; but when we do, we could require <code>Types::INVALID</code> to be passed in, asserting otherwise.)</p>\n<blockquote>\n<p>The existing code uses <code>has_type</code> extractor in cases that would now be more naturally be done with the provided <code>ty</code> argument. Replacing <code>has_type</code> uses with the <code>ty</code> argument is hard/impossible to do automatically. This is fine as long as you're okay with migrating away from <code>has_type</code> (where possible) more slowly over time.</p>\n</blockquote>\n<p>Yeah, a gradual migration seems totally fine here.</p>\n</blockquote>",
        "id": 498206417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738874277
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10154\">PR #10154</a>.</p>",
        "id": 498832486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739212018
    }
]