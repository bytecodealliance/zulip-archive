[
    {
        "content": "<p>dicej opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a> from <code>dicej:stream-future-api-revamp</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This changes the host APIs for dealing with futures and streams from a \"rendezvous\"-style API to a callback-oriented one.</p>\n<p>Previously you would create e.g. a <code>StreamReader</code>/<code>StreamWriter</code> pair and call their <code>read</code> and <code>write</code> methods, respectively, and those methods would return <code>Future</code>s that resolved when the operation was matched with a corresponding <code>write</code> or <code>read</code> operation on the other end.</p>\n<p>With the new API, you instead provide a <code>StreamProducer</code> trait implementation whe creating the stream, whose <code>produce</code> method will be called as soon as a read happens, giving the implementation a chance to respond immediately without making the reader wait for a rendezvous.  Likewise, you can match the read end of a stream to a <code>StreamConsumer</code> to respond immediately to writes.  This model should reduce scheduling overhead and make it easier to e.g. pipe items to/from <code>AsyncWrite</code>/<code>AsyncRead</code> or <code>Sink</code>/<code>Stream</code> implementations without needing to explicitly spawn background tasks.  In addition, the new API provides direct access to guest read and write buffers for <code>stream&lt;u8&gt;</code> operations, enabling zero-copy operations.</p>\n<p>Other changes:</p>\n<ul>\n<li>\n<p>I've removed the <code>HostTaskOutput</code>; we were using it to run extra code with access to the store after a host task completes, but we can do that more elegantly inside the future using <code>tls::get</code>.  This also allowed me to simplify <code>Instance::poll_until</code> a bit.</p>\n</li>\n<li>\n<p>I've removed the <code>watch_{reader,writer}</code> functionality; it's not needed now given that the runtime will automatically dispose of the producer or consumer when the other end of the stream or future is closed -- no need for embedder code to manage that.</p>\n</li>\n<li>\n<p>In order to make <code>UntypedWriteBuffer</code> <code>Send</code>, I had to wrap its raw pointer <code>buf</code> field in a <code>SendSyncPtr</code>.</p>\n</li>\n<li>\n<p>I've removed <code>{Future,Stream}Writer</code> entirely and moved <code>Instance::{future,stream}</code> to <code>{Future,Stream}Reader::new</code>, respectively.</p>\n</li>\n<li>\n<p>I've added a bounds check to the beginnings of <code>Instance::guest_read</code> and <code>Instance::guest_write</code> so that we need not do it later in <code>Guest{Source,Destination}::remaining</code>, meaning those functions can be infallible.</p>\n</li>\n</ul>\n<p>Note that I haven't updated <code>wasmtime-wasi</code> yet to match; that will happen in one or more follow-up commits.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 535764822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755902570
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 535772427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755910687
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 535772513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755910788
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2298414254\">PR review comment</a>:</p>\n<blockquote>\n<p>Technically this should use <a href=\"https://docs.rs/futures/latest/futures/channel/mpsc/struct.Sender.html#method.poll_ready\"><code>poll_ready</code></a>, right?</p>\n</blockquote>",
        "id": 536049529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756135385
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3151967843\">PR review</a>:</p>\n<blockquote>\n<p>Is it worth it to resolve the zero-length read/write TODOs in the code before landing? We don't have many users of that right now so it also seems ok to defer that too.</p>\n<p>Otherwise though this all seems reasonable to me, although I'm mostly relying on tests. The interfaces we've talked about historically and I think are ok to land. I'm also happy to help out with the porting of wasmtime-wasi later this afternoon</p>\n</blockquote>",
        "id": 536049531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756135385
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2298413072\">PR review comment</a>:</p>\n<blockquote>\n<p>Technically this should call <code>.next()</code> and buffer up the result if one comes in, right?</p>\n</blockquote>",
        "id": 536049533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756135385
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3220920794\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is it worth it to resolve the zero-length read/write TODOs in the code before landing? We don't have many users of that right now so it also seems ok to defer that too.</p>\n</blockquote>\n<p>Yup, I'll do that.  Testing it will be mildly tedious, but might as well bite the bullet.</p>\n<blockquote>\n<p>Otherwise though this all seems reasonable to me, although I'm mostly relying on tests. The interfaces we've talked about historically and I think are ok to land. I'm also happy to help out with the porting of wasmtime-wasi later this afternoon</p>\n</blockquote>\n<p>@rvolosatovs is planning to take a crack at updating <code>wasmtime-wasi</code> starting tomorrow, FYI.</p>\n</blockquote>",
        "id": 536061881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756139060
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3152436168\">PR review</a>.</p>",
        "id": 536074805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756143529
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2298711992\">PR review comment</a>:</p>\n<blockquote>\n<p>It appears that we'll need to expose the second type parameter to <code>Accessor</code> in order to be able to use this API from <em>within</em> e.g. <code>wasmtime_wasi</code>.<br>\nBinding implementations get an opaque <code>T</code> passed in, e.g. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3aa392399e785df414ad6ee6ee7f034989b75301/crates/wasi/src/p3/sockets/host/types/tcp.rs#L252-L253\">https://github.com/bytecodealliance/wasmtime/blob/3aa392399e785df414ad6ee6ee7f034989b75301/crates/wasi/src/p3/sockets/host/types/tcp.rs#L252-L253</a></p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>pub trait FutureProducer&lt;T, U, V&gt;: Send + 'static {\n    /// Handle a host- or guest-initiated read by producing a value.\n    fn produce(self, accessor: &amp;Accessor&lt;T, U&gt;) -&gt; impl Future&lt;Output = Result&lt;V&gt;&gt; + Send;\n}\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 536074806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756143529
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3152444875\">PR review</a>.</p>",
        "id": 536075273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756143693
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2298717501\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh for that @dicej and I talked about this a bit ago, I'd prefer to avoid the type parameter explosion but I have an alternative solution that should work. Let me sketch that out and push it up here too</p>\n</blockquote>",
        "id": 536075275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756143694
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 536076572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756144157
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3152464673\">PR review</a>.</p>",
        "id": 536076607,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756144169
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2298732123\">PR review comment</a>:</p>\n<blockquote>\n<p>Awesome, thanks @alexcrichton .<br>\nI actually just ran into a very similar issue earlier today in <code>wasi:http</code>, trying to reuse the same task implementation both from outside and from within the <code>wasi:http</code> crate, which I worked around the following way:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Fut</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">AccessorTask</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">GuestBodyTask</span><span class=\"o\">&lt;</span><span class=\"n\">Fut</span><span class=\"o\">&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiHttpView</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">U</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">HasData</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Fut</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">ErrorCode</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Accessor</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trailers</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">store</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">http</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">trailers</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s\">\"failed to delete trailers\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"sd\">/// This is a duplicate of [GuestBodyTask], which can be used from within this crate</span>\n<span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">GuestBodyTaskInternal</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">GuestBodyTask</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Fut</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">AccessorTask</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">GuestBodyTaskInternal</span><span class=\"o\">&lt;</span><span class=\"n\">Fut</span><span class=\"o\">&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">HasData</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiHttpCtxView</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Fut</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">ErrorCode</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Accessor</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trailers</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">store</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">trailers</span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s\">\"failed to delete trailers\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Perhaps this serves as a good data point for the fix</p>\n</blockquote>",
        "id": 536076610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756144170
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3152466345\">PR review</a>.</p>",
        "id": 536076701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756144208
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2298733346\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok I pushed an extra commit up with what I was thinking, the rough idea is that the WASI implementations will close over the \"getter\", the <code>fn(&amp;mut T) -&gt; D::Data&lt;'_&gt;</code> projection, themselves. If that's onerous though to schlep with WASI we can look to bake it in.</p>\n</blockquote>",
        "id": 536076702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756144208
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2298746170\">PR review comment</a>:</p>\n<blockquote>\n<p>Testing it now, looks like bindgen still needs to be updated for the rename</p>\n</blockquote>",
        "id": 536077709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756144601
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3152483780\">PR review</a>.</p>",
        "id": 536077710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756144601
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2298746170\">PR review comment</a>.</p>",
        "id": 536077831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756144653
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 536078383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756144845
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 536112781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756157626
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3155327496\">PR review</a>.</p>",
        "id": 536220897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756209802
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2300778452\">PR review comment</a>:</p>\n<blockquote>\n<p>Unfortunately, I don't think that the refactor fixes the underlying issue, which is that the host interface implementations do not have access to the getter provided by the the call to <code>add_to_linker</code>. The getter provided by <code>Access&lt;T&gt;::getter</code> will always produce <code>&amp;mut T</code>, because the second type parameter defaults to <code>HasSelf&lt;T&gt;</code>.</p>\n<p>What this means is that for this to work, the getter would have to be passed to the implementation through <code>WasiSocketsCtxView&lt;'a&gt;</code>, for example.</p>\n<ul>\n<li><code>Accessor::new</code> creates a getter, which is an identity function <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515/files#diff-714ba43342be98eb093bc17d4ad955a3f3056f4c424635ac399da76349a3a8d7R422\">https://github.com/bytecodealliance/wasmtime/pull/11515/files#diff-714ba43342be98eb093bc17d4ad955a3f3056f4c424635ac399da76349a3a8d7R422</a>, that's the only getter visible to <code>produce</code> implementations</li>\n<li>The actual getter implementations need though is only visible to the generated bindings <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515/files#diff-b365a0c26d559b75058e519f7e01c9e0b201da9f8a16df2b96cf6693f6b38ce6R1458\">https://github.com/bytecodealliance/wasmtime/pull/11515/files#diff-b365a0c26d559b75058e519f7e01c9e0b201da9f8a16df2b96cf6693f6b38ce6R1458</a> and it's later used via <code>with_getter</code> to map the 2nd type parameter to a different type <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515/files#diff-b365a0c26d559b75058e519f7e01c9e0b201da9f8a16df2b96cf6693f6b38ce6R2493-R2520\">https://github.com/bytecodealliance/wasmtime/pull/11515/files#diff-b365a0c26d559b75058e519f7e01c9e0b201da9f8a16df2b96cf6693f6b38ce6R2493-R2520</a></li>\n</ul>\n<p>I'm happy to jump on a quick call to talk through this today to give more details.</p>\n</blockquote>",
        "id": 536220898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756209802
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2300778452\">PR review comment</a>.</p>",
        "id": 536221967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756210176
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3155596367\">PR review</a>.</p>",
        "id": 536237647,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756215095
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2301010719\">PR review comment</a>:</p>\n<blockquote>\n<p>Once a <code>FutureReader</code> is returned by a host implementation, is it guaranteed that the runtime will call <code>close</code> if the guest does not use it? (or e.g. traps)</p>\n</blockquote>",
        "id": 536237649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756215095
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2300994444\">PR review comment</a>:</p>\n<blockquote>\n<p>Since we're dealing with byte buffers only here, could we reuse <a href=\"https://docs.rs/tokio/latest/tokio/io/struct.ReadBuf.html\">https://docs.rs/tokio/latest/tokio/io/struct.ReadBuf.html</a> directly in some way?</p>\n</blockquote>",
        "id": 536237651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756215095
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2300971395\">PR review comment</a>:</p>\n<blockquote>\n<p>I would have expected this function to not be <code>async</code>, in fact, shouldn't this function to <em>move</em> <code>Destination</code>, such that it could only be called once with at most the number of elements that reader asked for?</p>\n</blockquote>",
        "id": 536237652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756215095
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2300971395\">PR review comment</a>.</p>",
        "id": 536237753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756215124
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3155731160\">PR review</a>.</p>",
        "id": 536241596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756216102
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2301063826\">PR review comment</a>:</p>\n<blockquote>\n<p>nvm, we have figured it out together with @dicej , thanks!</p>\n</blockquote>",
        "id": 536241599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756216102
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3155829255\">PR review</a>.</p>",
        "id": 536246071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756217339
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2301128523\">PR review comment</a>:</p>\n<blockquote>\n<p>Resolved offline. Once returned to the guest the handle will be properly disposed off with a <em>well-behaving</em> guest. We probably want to introduce some limit on the amount of open future/stream handles that the guest can have</p>\n<p>cc @dicej </p>\n</blockquote>",
        "id": 536246073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756217340
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2301130932\">PR review comment</a>:</p>\n<blockquote>\n<p>Resolved offline, we may need to wait for realloc, which is why this needs to be <code>async</code>.<br>\n@dicej will add a <code>remaining</code> function to this struct</p>\n</blockquote>",
        "id": 536246249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756217390
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3155833801\">PR review</a>.</p>",
        "id": 536246250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756217390
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 536257263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756220474
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 536422248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756301768
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3159873411\">PR review</a>.</p>",
        "id": 536424369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756302377
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2303990831\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this is an important detail of the implementation to call out - in the absence of task, the stream handle returned in <code>tuple&lt;stream&lt;T&gt;, future&lt;result&lt;_, E&gt;&gt;&gt;</code> pattern has to be dropped/closed before a value can arrive on the <code>future</code>, I suspect that is because in case of a task, the host could independently track the status of the socket and be notified of the socket shutdown by the OS as part of it's own event loop. Without a task, the guest must effectively \"signal\" the host to \"do work\", in success case triggering the <code>Drop</code> of the producer, I suppose.</p>\n<p>I wonder if that's the expected behavior here and whether that would play well with GC languages.</p>\n</blockquote>",
        "id": 536424371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756302377
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3159933966\">PR review</a>.</p>",
        "id": 536427416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756303207
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2304031848\">PR review comment</a>:</p>\n<blockquote>\n<p>One solution could be giving both stream and future producers access to the underlying socket and check for shutdown in the future producer as well. It seems that such an approach would require the future producer to also perform reads from the socket and communicate those to stream producer.</p>\n</blockquote>",
        "id": 536427417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756303207
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3159978979\">PR review</a>.</p>",
        "id": 536429861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756303895
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2304063415\">PR review comment</a>:</p>\n<blockquote>\n<p>Giving it a bit more thought, the guest is getting <code>StreamResult::Complete</code> on L46, shouldn't the host eagerly drop the producer before returning this to the guest?</p>\n</blockquote>",
        "id": 536429864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756303895
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2304063415\">PR review comment</a>.</p>",
        "id": 536429941,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756303918
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2304063415\">PR review comment</a>.</p>",
        "id": 536429994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756303938
    },
    {
        "content": "<p>rvolosatovs deleted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2304063415\">PR review comment</a>.</p>",
        "id": 536430786,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756304153
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3160006110\">PR review</a>.</p>",
        "id": 536431334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756304309
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2304082156\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Giving it a bit more thought, the guest is getting <code>StreamResult::Complete</code> on L46, shouldn't the host eagerly drop the producer _before_ letting the guest know that the stream is done?</p>\n</blockquote>\n<p>Yes, it should; if it's not, I'd consider that a bug.  I'll take a look.</p>\n</blockquote>",
        "id": 536431340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756304310
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3160055161\">PR review</a>.</p>",
        "id": 536433977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756305027
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2304115834\">PR review comment</a>:</p>\n<blockquote>\n<p>I've originally mistaken <code>Complete</code> for <code>Dropped</code>, but realized that was wrong <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/f61634fd7905595ba7b83bb8cda42a4f3ee3ac29/crates/guest-rust/src/rt/async_support/stream_support.rs#L225-L235\">https://github.com/bytecodealliance/wit-bindgen/blob/f61634fd7905595ba7b83bb8cda42a4f3ee3ac29/crates/guest-rust/src/rt/async_support/stream_support.rs#L225-L235</a> and deleted the comment.</p>\n<p>I think the test was simply incorrect, see <a href=\"#narrow/channel/217126-wasmtime/topic/async.20API.20revamp.20implications\">#wasmtime &gt; async API revamp implications</a></p>\n</blockquote>",
        "id": 536433979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756305027
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3160404991\">PR review</a>.</p>",
        "id": 536447369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756308794
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2304372041\">PR review comment</a>:</p>\n<blockquote>\n<p>I just opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11552\">https://github.com/bytecodealliance/wasmtime/issues/11552</a> to track that.</p>\n</blockquote>",
        "id": 536447372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756308794
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2304386411\">PR review comment</a>:</p>\n<blockquote>\n<p>Wasmtime doesn't currently depend on <code>tokio</code> except for testing; I'm not sure <code>ReadBuf</code> adds enough value to justify pulling it in.</p>\n</blockquote>",
        "id": 536448110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756309009
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3160423175\">PR review</a>.</p>",
        "id": 536448111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756309009
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 536569787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756374251
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3164163172\">PR review</a>.</p>",
        "id": 536572502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756375374
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2306910081\">PR review comment</a>:</p>\n<blockquote>\n<p>It seems that the consumer MUST loop here to ensure that all of the data already read from the guest has been written - otherwise, if the consumer were to buffer, how would the guest know that a partial write occurred?</p>\n<p>It seems that what we really want is to have a way for the consumer to report back the amount of elements actually read, replicating something like <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html#tymethod.read\">https://doc.rust-lang.org/nightly/std/io/trait.Read.html#tymethod.read</a></p>\n<p>Given the existing API, it looks like the consumer should be able to <em>return</em> the buffer, just like the <code>Destination::write</code> would currently do.</p>\n<p>This is, of course, already addressed for byte-buffers originating from the guest, but this seems problematic in general case</p>\n</blockquote>",
        "id": 536572503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756375374
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2306910081\">PR review comment</a>.</p>",
        "id": 536573179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756375612
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 536588325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756381743
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 536593056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756383512
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 536593938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756383828
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 536594653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756384083
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3233313105\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<p>All existing WASI tests pass now for me locally. I'm a bit surprised that it looks like CI does not run on this PR anymore?</p>\n<p>I've removed the reuseaddr test workaround, since this change set should remove the need for it, and close <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11342\">https://github.com/bytecodealliance/wasmtime/issues/11342</a></p>\n</blockquote>",
        "id": 536595276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756384271
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3233313105\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<p>All existing WASI tests pass now for me locally. I'm a bit surprised that it looks like CI does not run on this PR anymore?</p>\n<p>I've removed the reuseaddr test workaround, since this change set should remove the need for it and close <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11342\">https://github.com/bytecodealliance/wasmtime/issues/11342</a></p>\n</blockquote>",
        "id": 536595303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756384277
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3233328058\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<p>The main remaining item left here is the cancellation-safety of <code>produce</code> functions, but we've been having some private conversations with @dicej and hopefully a pretty minor API change should suffice to address it.<br>\n@dicej please let me know when the new API is available and I will happily fix WASI again.</p>\n<p>I will meanwhile work on migrating #11440 to this API</p>\n</blockquote>",
        "id": 536596084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756384517
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3233328058\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<p>The main remaining item left here is the cancellation-safety of <code>produce</code> functions, but we've been having some private conversations with @dicej and hopefully a pretty minor API change should suffice to address it.<br>\n@dicej please let me know when the new API is available and I will happily fix WASI again.<br>\nCould you also rebase this PR on latest <code>main</code>, please?</p>\n<p>I will meanwhile work on migrating #11440 to this API</p>\n</blockquote>",
        "id": 536596193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756384562
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3164692040\">PR review</a>.</p>",
        "id": 536596924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756384790
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2307291916\">PR review comment</a>:</p>\n<blockquote>\n<p>Is \"lying\" like this OK, @dicej, or do we have to drive I/O and buffer the result?</p>\n</blockquote>",
        "id": 536596926,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756384791
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3164695401\">PR review</a>.</p>",
        "id": 536597104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756384851
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2307294536\">PR review comment</a>:</p>\n<blockquote>\n<p>Same as above, do we need to drive I/O?</p>\n</blockquote>",
        "id": 536597105,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756384851
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3164696557\">PR review</a>.</p>",
        "id": 536597173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756384871
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2307295357\">PR review comment</a>:</p>\n<blockquote>\n<p>same here</p>\n</blockquote>",
        "id": 536597174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756384872
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3233352025\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<p>On a second thought, I'm guessing that \"lying\" about the stream being open is probably not the expected behavior, so I'll work on driving I/O in these and buffering first</p>\n</blockquote>",
        "id": 536597470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756384970
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 536610188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756388699
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3233620733\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<blockquote>\n<p>On a second thought, I'm guessing that \"lying\" about the stream being open is probably not the expected behavior, so I'll work on driving I/O in these and buffering first</p>\n</blockquote>\n<p>This is a good reminder that we should add tests that involve zero-length reads and writes from the guest, asserting that the following non-zero-length read or write completes immediately.  So far, this hasn't really been relevant, but once we add p3 support to wasi-libc we'll have real-world code that relies on it.</p>\n</blockquote>",
        "id": 536613139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756389563
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3233723027\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>On a second thought, I'm guessing that \"lying\" about the stream being open is probably not the expected behavior, so I'll work on driving I/O in these and buffering first</p>\n</blockquote>\n<p>This is a good reminder that we should add tests that involve zero-length reads and writes from the guest, asserting that the following non-zero-length read or write completes immediately. So far, this hasn't really been relevant, but once we add p3 support to wasi-libc we'll have real-world code that relies on it.</p>\n</blockquote>\n<p>I was under impression that we wanted to avoid buffering, however buffering seems to be the only way of providing this behavior for writes to e.g. files. It looks like for filesystem we'll need to introduce a construct (similar to p2), where we'll have a thread performing file I/O and <code>wasi:filesystem</code> <em>write</em> just sends the buffer on something like <code>mpsc</code> channel.</p>\n<p>Is that the expectation here?</p>\n<p>I think makes sense to me, but it appears we'd also need to introduce <code>sync</code>/<code>flush</code> or similar to <code>wasi:filesystem</code> to be able to ensure that the host worker thread buffer has actually been passed over to the kernel</p>\n</blockquote>",
        "id": 536619110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756391170
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3233723027\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>On a second thought, I'm guessing that \"lying\" about the stream being open is probably not the expected behavior, so I'll work on driving I/O in these and buffering first</p>\n</blockquote>\n<p>This is a good reminder that we should add tests that involve zero-length reads and writes from the guest, asserting that the following non-zero-length read or write completes immediately. So far, this hasn't really been relevant, but once we add p3 support to wasi-libc we'll have real-world code that relies on it.</p>\n</blockquote>\n<p>I was under impression that we wanted to avoid buffering, however buffering seems to be the only way of providing this behavior for writes to e.g. files. It looks like for filesystem we'll need to introduce a construct (similar to p2), where we'll have a thread performing file I/O and <code>wasi:filesystem</code> <em>write</em> just sends the buffer on something like <code>mpsc</code> channel.</p>\n<p>Is that the expectation here?</p>\n<p>I think that makes sense to me, but it appears we'd also need to introduce <code>sync</code>/<code>flush</code> or similar to <code>wasi:filesystem</code> to be able to ensure that the host worker thread buffer has actually been passed over to the kernel</p>\n</blockquote>",
        "id": 536619192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756391195
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3233723027\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>On a second thought, I'm guessing that \"lying\" about the stream being open is probably not the expected behavior, so I'll work on driving I/O in these and buffering first</p>\n</blockquote>\n<p>This is a good reminder that we should add tests that involve zero-length reads and writes from the guest, asserting that the following non-zero-length read or write completes immediately. So far, this hasn't really been relevant, but once we add p3 support to wasi-libc we'll have real-world code that relies on it.</p>\n</blockquote>\n<p>I was under impression that we wanted to avoid buffering, however buffering seems to be the only way of providing this behavior for writes to e.g. files. It looks like for filesystem we'll need to introduce a construct (similar to p2), where we'll have a thread performing file I/O and <code>wasi:filesystem</code> <em>write</em> just sends the buffer on something like <code>mpsc</code> channel.</p>\n<p>Is that the expectation here?</p>\n<p>I think that makes sense to me, but it appears we'd also need to introduce <code>sync</code>/<code>flush</code> or similar to <code>wasi:filesystem</code> to be able to ensure that the host worker thread buffer has actually been passed over to the kernel since <code>stream.write</code> will no longer guarantee that</p>\n</blockquote>",
        "id": 536619289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756391222
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3233737407\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<p>hmm, <code>sync</code> does exist <a href=\"https://github.com/WebAssembly/wasi-filesystem/blob/d81d6256c271fe1c8937eb8353e2ddc25517c153/wit-0.3.0-draft/types.wit#L434\">https://github.com/WebAssembly/wasi-filesystem/blob/d81d6256c271fe1c8937eb8353e2ddc25517c153/wit-0.3.0-draft/types.wit#L434</a>, so would we make it <code>async</code> then and await the flush before returning?</p>\n</blockquote>",
        "id": 536619921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756391393
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3233737407\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<p>hmm, <code>sync</code> does exist <a href=\"https://github.com/WebAssembly/wasi-filesystem/blob/d81d6256c271fe1c8937eb8353e2ddc25517c153/wit-0.3.0-draft/types.wit#L434\">https://github.com/WebAssembly/wasi-filesystem/blob/d81d6256c271fe1c8937eb8353e2ddc25517c153/wit-0.3.0-draft/types.wit#L434</a>, so would we need to await the flush before returning?</p>\n</blockquote>",
        "id": 536620010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756391415
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3165334472\">PR review</a>.</p>",
        "id": 536629203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756393880
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2307736410\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I can see how that could be awkward -- you read items from the <code>Source</code> and then try to write them to some kind of sink, but that sink might not be immediately ready to accept all the items.  In that case do you just .await until the sink has accepted them all?  If you do, then you're kind of blocking the original writer more than you should -- you'd rather just say you didn't read all the items and let the writer write them again if and when it wants to.  Also, what if the sink closes before you can write them all?</p>\n<p>So yeah, I think we might need to change this API as well as the <code>StreamProducer</code> one.</p>\n</blockquote>",
        "id": 536629205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756393880
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 536636749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756395964
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3234094423\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<p>for reference: <a href=\"#narrow/channel/219900-wasi/topic/0-length.20stream.20writes.20with.20files.20and.20stdio\">#wasi &gt; 0-length stream writes with files and stdio</a></p>\n</blockquote>",
        "id": 536640396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756397074
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3242007925\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<blockquote>\n<p>hmm, <code>sync</code> does exist <a href=\"https://github.com/WebAssembly/wasi-filesystem/blob/d81d6256c271fe1c8937eb8353e2ddc25517c153/wit-0.3.0-draft/types.wit#L434\">https://github.com/WebAssembly/wasi-filesystem/blob/d81d6256c271fe1c8937eb8353e2ddc25517c153/wit-0.3.0-draft/types.wit#L434</a>, so would we need to await the flush before returning?</p>\n</blockquote>\n<p>There are two kinds of synchronizing here: one is that the data will be visible to independent readers, and the other is that the data will be visible to independent readers even after an abrupt power failure. wasil-filesystem's <code>sync</code> is for that second kind, which can be very slow, so we shouldn't use it unless the application has explicitly requested it.<br>\n</p>\n</blockquote>",
        "id": 537089202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756726097
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537370084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756850277
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537371350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756850986
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537518077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756918262
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537561318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756937564
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537567544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756942080
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537633239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756979317
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537641161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756982125
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537641234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756982149
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537642690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756982673
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2321606236\">PR review comment</a>:</p>\n<blockquote>\n<p>this would always return <code>None</code>, wouldn't it? (since that's a guest buffer)</p>\n</blockquote>",
        "id": 537642807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756982721
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3184537918\">PR review</a>.</p>",
        "id": 537642809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756982721
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2321606236\">PR review comment</a>.</p>",
        "id": 537642828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756982729
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3185470238\">PR review</a>.</p>",
        "id": 537679150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756994282
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2322276588\">PR review comment</a>:</p>\n<blockquote>\n<p>Good point; I didn't revisit that code after I added the <code>if/else</code> block around it.</p>\n</blockquote>",
        "id": 537679154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756994282
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537724915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757008732
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537725177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757008843
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537725691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757009024
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3254921533\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<p>I'm signing off for today and have just finished the WASI crate adaptation a few minutes ago. I have not even really proof-read, for example, the <code>read_directory</code> implementation yet.<br>\nThere's quite a bit of room for improvement, mainly refactoring and cutting down on duplication.<br>\nI also noticed that <code>read_directory</code> seems to not be tested at all.</p>\n<p>That all said, all tests pass (at least locally, will have to wait for CI) and IMO this is \"good enough\" to get this PR merged. Feel free to clean-up as desired, otherwise I will do that tomorrow.</p>\n</blockquote>",
        "id": 537726045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757009167
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#issuecomment-3255639694\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>:</p>\n<blockquote>\n<p>I talked with @dicej about this and we concluded that let's go ahead and land this. I've got follow-up feedback and Joel's got some follow-up implementation work but we feel it's best to land this and iterate rather than continuing to block this. The hope is that by landing this @rvolosatovs you're more-or-less unblocke to continue to work on wasi-http while we continue to smith some details here in parallel</p>\n</blockquote>",
        "id": 537753285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757019494
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537753329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757019509
    },
    {
        "content": "<p><strong>alexcrichton</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a> as ready for review.</p>",
        "id": 537753344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757019513
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537753345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757019514
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537753346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757019514
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-wasi-reviewers\">wasmtime-wasi-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537753347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757019514
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3186827078\">PR review</a>.</p>",
        "id": 537753365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757019521
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2323246406\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we skip this fallback and rely on <code>as_direct_destination</code> always succeeding?</p>\n</blockquote>",
        "id": 537753368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757019521
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2323245088\">PR review comment</a>:</p>\n<blockquote>\n<p>I opened <a href=\"https://github.com/WebAssembly/wasi-cli/issues/81\">https://github.com/WebAssembly/wasi-cli/issues/81</a> for this, but for now it might be good to <code>log::warn!</code> the error too</p>\n</blockquote>",
        "id": 537753369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757019521
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2323249935\">PR review comment</a>:</p>\n<blockquote>\n<p>How come this needs a special case vs the below case?</p>\n</blockquote>",
        "id": 537753370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757019521
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537753389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757019527
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3187249676\">PR review</a>.</p>",
        "id": 537758696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757021407
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2323588311\">PR review comment</a>:</p>\n<blockquote>\n<p>For stdio in particular I think we'll additionally want to call <code>poll_flush</code> here before returning <code>Completed</code> because otherwise tokio only puts this off on some other task and it hasn't actually made its way to stdout yet.</p>\n</blockquote>",
        "id": 537758697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757021407
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2323551363\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm going to look into restructuring this function to hopefully not need duplication in this <code>match</code> here and the one far below after the spawn, but that's just refactoring a bit.</p>\n</blockquote>",
        "id": 537758698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757021407
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2323592473\">PR review comment</a>:</p>\n<blockquote>\n<p>Like writes below I think this'll want a special-case of 0-length buffers to do a <code>poll_read_ready</code> here</p>\n</blockquote>",
        "id": 537758700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757021407
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2323591522\">PR review comment</a>:</p>\n<blockquote>\n<p>This prompted discussion between Joel and I and led to <a href=\"https://github.com/WebAssembly/component-model/issues/561\">https://github.com/WebAssembly/component-model/issues/561</a> but we'll need to carefully handle 0-length reads here</p>\n</blockquote>",
        "id": 537758701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757021407
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2323549993\">PR review comment</a>:</p>\n<blockquote>\n<p>Talked with Joel about this and he's going to refactor things so the fallback isn't necessary (e.g. <code>as_direct_destination</code> always returns non-<code>None</code>)</p>\n</blockquote>",
        "id": 537758702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757021408
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2323550633\">PR review comment</a>:</p>\n<blockquote>\n<p>(talked with Joel and I'll handle this in a follow-up)</p>\n</blockquote>",
        "id": 537758703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757021408
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515\">PR #11515</a>.</p>",
        "id": 537759310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757021731
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3187454315\">PR review</a>.</p>",
        "id": 537765436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757025240
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2323685039\">PR review comment</a>:</p>\n<blockquote>\n<p>With a 0-length read this tries a buffered read and if that would block, it polls readiness.<br>\nFrom what I understand that's the expectation of this API - produce at least 1 (buffered) element.</p>\n<p>Is there a reason to poll readiness before optimistically trying to read?</p>\n</blockquote>",
        "id": 537765439,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757025240
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#pullrequestreview-3187501067\">PR review</a>.</p>",
        "id": 537767650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757026795
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11515#discussion_r2323716227\">PR review comment</a>:</p>\n<blockquote>\n<p>True! I should clarify my comment more... I'm assuming that with @dicej's queued up changes the <code>None</code> case for <code>as_direct_destination</code> goes away and so I was assuming that all the non-<code>as_direct_destination</code> code was going to be deleted. In that world the 0-length case is missed here, but otherwise you're right the 0-length case is handled through the buffers otherwise. (although that <a href=\"https://github.com/WebAssembly/component-model/issues/561\">has its own problems</a>)</p>\n</blockquote>",
        "id": 537767652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757026795
    }
]