[
    {
        "content": "<p>rajsite opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11925\">issue #11925</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>I'd like the ability to specify / override headers that are passed through requests when using <code>wasmtime serve</code>. Handy for specifying cookies, api keys, etc expected to be in each request to the wasm component being served.</p>\n<h4>Benefit</h4>\n<p>Make it easier to simulate authenticated sessions / being behind a proxy or gateway that adds expected headers from cli when testing.</p>\n<h4>Implementation</h4>\n<p>Following the <a href=\"https://curl.se/docs/manpage.html#-H\"><code>curl -H</code></a> cli would be nice.</p>\n<p>(just reproducing from the curl docs):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">serve</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"s\">\"X-First-Name: Joe\"</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">serve</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"s\">\"User-Agent: yes-please/2000\"</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">serve</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"s\">\"Host:\"</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">serve</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">headers</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>Been setting up a small proxy in node to simulate that and it's pretty cumbersome.<br>\n</p>\n</blockquote>",
        "id": 546705907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761232134
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11925#issuecomment-3443750209\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11925\">issue #11925</a>:</p>\n<blockquote>\n<p>Thanks for the report! This seems like a reasonable feature request to me. Do you know if there's prior art in other \"serve this thing\" style utilities? I realize <code>curl</code> has good precedent here but that's more of \"I'm sending a thing and starting from nothing\" whereas <code>wasmtime serve</code> is \"I'm receiving a thing that already has headers\" so there's questions like what to do if the header is already there which aren't present in the <code>curl</code> case.</p>\n<p>In the meantime env vars would probably suffice for configuring this, but if there's good precedent I think it'd make sense to add this too.</p>\n</blockquote>",
        "id": 546925951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761320135
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime:serve label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11925\">Issue #11925</a>.</p>",
        "id": 546926126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761320185
    },
    {
        "content": "<p>rajsite <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11925#issuecomment-3444217796\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11925\">issue #11925</a>:</p>\n<blockquote>\n<blockquote>\n<p>wasmtime serve is \"I'm receiving a thing that already has headers\"</p>\n</blockquote>\n<p>I guess from that perspective wasmtime is acting more like a proxy. The things that come to mind in that space to me are apache <a href=\"https://httpd.apache.org/docs/current/mod/mod_headers.html\">mod_headers</a> and nginx <a href=\"https://nginx.org/en/docs/http/ngx_http_headers_module.html#add_header\">add_header</a>. On the application side features like Angular's dev server <a href=\"https://v17.angular.io/guide/build#bypass-the-proxy\">bypass proxy</a>, or webpack's equivalent <a href=\"https://webpack.js.org/configuration/dev-server/#devserverproxy\">devServer.proxy</a>. Ranging from decently complex configuration systems to arbitrarily complex evaluating a script.</p>\n<blockquote>\n<p>there's questions like what to do if the header is already there which aren't present in the curl case.</p>\n</blockquote>\n<p>curl has a concept of clearing internally set headers from the referenced docs and reproduced as follows:</p>\n<blockquote>\n<p>Note that if you should add a custom header that has the same name as one of the internal ones curl would use, your externally set header is used instead of the internal one.</p>\n</blockquote>\n<p>Framing from curl's api if we use the mental model that all the headers are internal then it would be replacements but if all the headers were \"normal\" then the behavior of the CLI is to send combined field values.</p>\n<p>I think the behavior I'd expect is a mix, i.e. assuming an incoming Header of <code>Hello: World</code> something like <code>wasmtime serve -H \"Hello: Earth\"</code> would replace any existing <code>Hello</code> header and  <code>wasmtime serve -H \"Hello: Earth\" -H \"Hello: Mars\"</code> would replace the incoming <code>World</code> with the <a href=\"https://www.rfc-editor.org/rfc/rfc9110.html#name-field-lines-and-combined-fi\">combined fields value</a> of <code>Earth</code> and <code>Mars</code>.</p>\n<blockquote>\n<p>In the meantime env vars would probably suffice for configuring this</p>\n</blockquote>\n<p>Have thoughts on what those env vars would look like? (I'm not familiar with wasmtime's env var conventions)</p>\n</blockquote>",
        "id": 546949346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761327426
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11925#issuecomment-3444652960\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11925\">issue #11925</a>:</p>\n<blockquote>\n<p>That all sounds reasonable to me, thanks for the background!</p>\n<p>For env vars it'd involve passing, for example <code>-Sinherit-env</code> and then using normal env-var-accessing-things in the guest language.</p>\n</blockquote>",
        "id": 546967014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761334616
    },
    {
        "content": "<p>rajsite <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11925#issuecomment-3444903884\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11925\">issue #11925</a>:</p>\n<blockquote>\n<blockquote>\n<p>For env vars it'd involve passing, for example -Sinherit-env and then using normal env-var-accessing-things in the guest language.</p>\n</blockquote>\n<p>Oh I see. I misunderstood and thought you were suggesting ENV vars as an alternative API to cli options for configuring a header to add if we weren't convinced on the CLI api proposed in the PR description yet, i.e. something like <code>WASMTIME_SERVE_REPLACE_HEADERS=\"Hello: World\"</code> (not clear how to specify multiple headers, maybe JSON encode an array instead).</p>\n<p>The intention was to better represent the runtime environment of some wasm components where the component author would expect certain headers to exist on incoming requests. Trying to avoid putting that complexity on each wasm component author that they should handle both env configuration (dev workflow) and header configuration (production workflow) differently for those values.</p>\n<p>The workaround I'm doing now that preserves the production behavior in their dev workflow using <code>wasmtime serve</code>  is setting up a proxy in front of wasmtime serve to add the headers to incoming requests.</p>\n<p>Another potential workaround I could think of would be wac-ing on a component to inject the headers (seems like the class of configuration that could be useful in wasi-virt too).</p>\n</blockquote>",
        "id": 546999378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761339777
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11925#issuecomment-3444924789\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11925\">issue #11925</a>:</p>\n<blockquote>\n<p>Oh sorry yeah the env var idea was just there as a workaround for not having this, agreed that this is well-motivated enough that it's reasonable to add any time!</p>\n</blockquote>",
        "id": 547000284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761340314
    }
]