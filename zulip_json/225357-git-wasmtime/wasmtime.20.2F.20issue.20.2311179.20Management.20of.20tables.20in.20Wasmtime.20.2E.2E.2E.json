[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11179\">issue #11179</a>:</p>\n<blockquote>\n<p>The current management of <code>crate::runtime::vm::Table</code> is excessively unsafe in the context of <code>crate::runtime::vm::Instance</code> in particular at this time. We should clean this up and make this safer.</p>\n<p>Some examples of this pattern are:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1298\"><code>get_table</code> returns <code>*mut Table</code></a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1296-L1311\"><code>get_table</code> and <code>get_defined_table</code></a> don't share code</li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1313-L1330\">Helper methods go through unsafe <code>VMContext</code> -&gt; <code>Pin&lt;&amp;mut Instance&gt;</code> casting</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L688-L699\">Going from <code>&amp;VMTableDefinition</code> to <code>DefinedTableIndex</code> is not safe</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L992\">Table initialization requires unsafely simultaneously borrowing <code>Instance</code> and <code>Table</code> at the same time</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/table.rs#L911-L918\">Copying between tables is done with raw pointers</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/externals/table.rs#L120\">Only handing out raw pointers forces <code>wasmtime::Table</code> to have excessive <code>unsafe</code> blocks</a></li>\n</ul>\n<p>It may not be possible to remove all of this <code>unsafe</code>, but much of this is just trying to juggle ownership and it should in theory be possible to do better. A rough idea of how to handle this would be to use <code>wasmtime::Table</code> more frequently. This is effectively an \"indexed based approach\" rather than a pointer-based approach. That won't be a silver bullet due to various borrowing requirements (e.g. accessing imported tables) but might be able to help quite a lot. Regardless I think we can do much better than what we're currently doing today.</p>\n</blockquote>",
        "id": 527072065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751576396
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime:unsafe-code label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11179\">Issue #11179</a>.</p>",
        "id": 527072067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751576396
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11179\">issue #11179</a>:</p>\n<blockquote>\n<p>The current management of <code>crate::runtime::vm::Table</code> is excessively unsafe in the context of <code>crate::runtime::vm::Instance</code> in particular at this time. We should clean this up and make this safer.</p>\n<p>Some examples of this pattern are:</p>\n<ul>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1298\"><code>get_table</code> returns <code>*mut Table</code></a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1296-L1311\"><code>get_table</code> and <code>get_defined_table</code></a> don't share code</li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1313-L1330\">Helper methods go through unsafe <code>VMContext</code> -&gt; <code>Pin&lt;&amp;mut Instance&gt;</code> casting</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L688-L699\">Going from <code>&amp;VMTableDefinition</code> to <code>DefinedTableIndex</code> is not safe</a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L992\">Table initialization requires unsafely simultaneously borrowing <code>Instance</code> and <code>Table</code> at the same time</a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/table.rs#L911-L918\">Copying between tables is done with raw pointers</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/externals/table.rs#L120\">Only handing out raw pointers forces <code>wasmtime::Table</code> to have excessive <code>unsafe</code> blocks</a></li>\n</ul>\n<p>It may not be possible to remove all of this <code>unsafe</code>, but much of this is just trying to juggle ownership and it should in theory be possible to do better. A rough idea of how to handle this would be to use <code>wasmtime::Table</code> more frequently. This is effectively an \"indexed based approach\" rather than a pointer-based approach. That won't be a silver bullet due to various borrowing requirements (e.g. accessing imported tables) but might be able to help quite a lot. Regardless I think we can do much better than what we're currently doing today.</p>\n</blockquote>",
        "id": 529172829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752703093
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11179\">issue #11179</a>:</p>\n<blockquote>\n<p>The current management of <code>crate::runtime::vm::Table</code> is excessively unsafe in the context of <code>crate::runtime::vm::Instance</code> in particular at this time. We should clean this up and make this safer.</p>\n<p>Some examples of this pattern are:</p>\n<ul>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1298\"><code>get_table</code> returns <code>*mut Table</code></a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1296-L1311\"><code>get_table</code> and <code>get_defined_table</code></a> don't share code</li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1313-L1330\">Helper methods go through unsafe <code>VMContext</code> -&gt; <code>Pin&lt;&amp;mut Instance&gt;</code> casting</a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L688-L699\">Going from <code>&amp;VMTableDefinition</code> to <code>DefinedTableIndex</code> is not safe</a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L992\">Table initialization requires unsafely simultaneously borrowing <code>Instance</code> and <code>Table</code> at the same time</a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/table.rs#L911-L918\">Copying between tables is done with raw pointers</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/externals/table.rs#L120\">Only handing out raw pointers forces <code>wasmtime::Table</code> to have excessive <code>unsafe</code> blocks</a></li>\n</ul>\n<p>It may not be possible to remove all of this <code>unsafe</code>, but much of this is just trying to juggle ownership and it should in theory be possible to do better. A rough idea of how to handle this would be to use <code>wasmtime::Table</code> more frequently. This is effectively an \"indexed based approach\" rather than a pointer-based approach. That won't be a silver bullet due to various borrowing requirements (e.g. accessing imported tables) but might be able to help quite a lot. Regardless I think we can do much better than what we're currently doing today.</p>\n</blockquote>",
        "id": 529172849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752703110
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11179\">issue #11179</a>:</p>\n<blockquote>\n<p>The current management of <code>crate::runtime::vm::Table</code> is excessively unsafe in the context of <code>crate::runtime::vm::Instance</code> in particular at this time. We should clean this up and make this safer.</p>\n<p>Some examples of this pattern are:</p>\n<ul>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1298\"><code>get_table</code> returns <code>*mut Table</code></a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1296-L1311\"><code>get_table</code> and <code>get_defined_table</code></a> don't share code</li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1313-L1330\">Helper methods go through unsafe <code>VMContext</code> -&gt; <code>Pin&lt;&amp;mut Instance&gt;</code> casting</a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L688-L699\">Going from <code>&amp;VMTableDefinition</code> to <code>DefinedTableIndex</code> is not safe</a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L992\">Table initialization requires unsafely simultaneously borrowing <code>Instance</code> and <code>Table</code> at the same time</a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/table.rs#L911-L918\">Copying between tables is done with raw pointers</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/externals/table.rs#L120\">Only handing out raw pointers forces <code>wasmtime::Table</code> to have excessive <code>unsafe</code> blocks</a></li>\n</ul>\n<p>It may not be possible to remove all of this <code>unsafe</code>, but much of this is just trying to juggle ownership and it should in theory be possible to do better. A rough idea of how to handle this would be to use <code>wasmtime::Table</code> more frequently. This is effectively an \"indexed based approach\" rather than a pointer-based approach. That won't be a silver bullet due to various borrowing requirements (e.g. accessing imported tables) but might be able to help quite a lot. Regardless I think we can do much better than what we're currently doing today.</p>\n</blockquote>",
        "id": 529172858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752703116
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11179\">issue #11179</a>:</p>\n<blockquote>\n<p>The current management of <code>crate::runtime::vm::Table</code> is excessively unsafe in the context of <code>crate::runtime::vm::Instance</code> in particular at this time. We should clean this up and make this safer.</p>\n<p>Some examples of this pattern are:</p>\n<ul>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1298\"><code>get_table</code> returns <code>*mut Table</code></a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1296-L1311\"><code>get_table</code> and <code>get_defined_table</code></a> don't share code</li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1313-L1330\">Helper methods go through unsafe <code>VMContext</code> -&gt; <code>Pin&lt;&amp;mut Instance&gt;</code> casting</a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L688-L699\">Going from <code>&amp;VMTableDefinition</code> to <code>DefinedTableIndex</code> is not safe</a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L992\">Table initialization requires unsafely simultaneously borrowing <code>Instance</code> and <code>Table</code> at the same time</a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/table.rs#L911-L918\">Copying between tables is done with raw pointers</a></li>\n<li>[ ] <del><a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/externals/table.rs#L120\">Only handing out raw pointers forces <code>wasmtime::Table</code> to have excessive <code>unsafe</code> blocks</a></del> (moved to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11262\">https://github.com/bytecodealliance/wasmtime/issues/11262</a>)</li>\n</ul>\n<p>It may not be possible to remove all of this <code>unsafe</code>, but much of this is just trying to juggle ownership and it should in theory be possible to do better. A rough idea of how to handle this would be to use <code>wasmtime::Table</code> more frequently. This is effectively an \"indexed based approach\" rather than a pointer-based approach. That won't be a silver bullet due to various borrowing requirements (e.g. accessing imported tables) but might be able to help quite a lot. Regardless I think we can do much better than what we're currently doing today.</p>\n</blockquote>",
        "id": 529174252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752703972
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11179\">issue #11179</a>:</p>\n<blockquote>\n<p>The current management of <code>crate::runtime::vm::Table</code> is excessively unsafe in the context of <code>crate::runtime::vm::Instance</code> in particular at this time. We should clean this up and make this safer.</p>\n<p>Some examples of this pattern are:</p>\n<ul>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1298\"><code>get_table</code> returns <code>*mut Table</code></a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1296-L1311\"><code>get_table</code> and <code>get_defined_table</code></a> don't share code</li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L1313-L1330\">Helper methods go through unsafe <code>VMContext</code> -&gt; <code>Pin&lt;&amp;mut Instance&gt;</code> casting</a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L688-L699\">Going from <code>&amp;VMTableDefinition</code> to <code>DefinedTableIndex</code> is not safe</a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/instance.rs#L992\">Table initialization requires unsafely simultaneously borrowing <code>Instance</code> and <code>Table</code> at the same time</a></li>\n<li>[x] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/vm/table.rs#L911-L918\">Copying between tables is done with raw pointers</a></li>\n<li>[ ] <del><a href=\"https://github.com/bytecodealliance/wasmtime/blob/58e295ee58026086a91382cffe260d152951bb60/crates/wasmtime/src/runtime/externals/table.rs#L120\">Only handing out raw pointers forces <code>wasmtime::Table</code> to have excessive <code>unsafe</code> blocks</a></del> (moved to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11262\">https://github.com/bytecodealliance/wasmtime/issues/11262</a>)</li>\n</ul>\n<p>It may not be possible to remove all of this <code>unsafe</code>, but much of this is just trying to juggle ownership and it should in theory be possible to do better. A rough idea of how to handle this would be to use <code>wasmtime::Table</code> more frequently. This is effectively an \"indexed based approach\" rather than a pointer-based approach. That won't be a silver bullet due to various borrowing requirements (e.g. accessing imported tables) but might be able to help quite a lot. Regardless I think we can do much better than what we're currently doing today.</p>\n</blockquote>",
        "id": 529327754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752774010
    }
]