[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404\">PR #10404</a>.</p>",
        "id": 505859400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742053348
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404\">PR #10404</a>.</p>",
        "id": 505859401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742053348
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404\">PR #10404</a> from <code>alexcrichton:stack-maps-out-of-line</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit moves the storage of stack maps from being embedded within serde-encoded information to instead being stored in a separate ELF section in the final executable. The motivation for this is to make this more easily debuggable with a <code>wasmtime objdump</code> command in the future but this additionally should have the nice side effect of making non-stack-maps modules have smaller encoded information (no need to encode an empty list) and additionally make stack-maps-using-modules faster to decode (no serde decoding, it's already \"decoded\").</p>\n<p>This implements a scheme similar to the address map section where there's a \"builder\" for the section and then a separate half to decode the section. The same basic encoding, a bit map, is used. This is likely going to make accessing stack maps slightly slower, but if that's an issue we can tweak the representation and align things and/or use <code>usize</code> or such.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 505859403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742053349
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404\">PR #10404</a>.</p>",
        "id": 505859404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742053349
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404\">PR #10404</a>.</p>",
        "id": 505859405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742053349
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#issuecomment-2726777569\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404\">PR #10404</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"wasmtime:api\", \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 505864762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742057137
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2691292612\">PR review</a>.</p>",
        "id": 506205978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742229453
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2691238921\">PR review</a>:</p>\n<blockquote>\n<p>Makes sense to me! I just noted some doubts I had while reading this for those who are more familiar with stack maps and their usage.</p>\n</blockquote>",
        "id": 506210716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742230657
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999220006\">PR review comment</a>:</p>\n<blockquote>\n<p>Are we sure we want to re-export <code>U32Bytes</code> in the public API? I suspect the answer is \"yes\" but just wanted to note this.</p>\n</blockquote>",
        "id": 506210717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742230657
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999152731\">PR review comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>/// * Stack map data as 4-byte little endian integers.\n</code></pre></div>\n<p>Without looking below to see what this should be... is this correct?</p>\n</blockquote>",
        "id": 506210718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742230657
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404\">PR #10404</a>.</p>",
        "id": 506234597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742237127
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2691661131\">PR review</a>.</p>",
        "id": 506234616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742237134
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999410806\">PR review comment</a>:</p>\n<blockquote>\n<p>Whoops, yes!</p>\n</blockquote>",
        "id": 506234617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742237134
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2691663223\">PR review</a>.</p>",
        "id": 506234843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742237194
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999412190\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah it's fine here in that <code>wasmtime-environ</code> is a \"private crate\" where we don't consider it part of Wasmtime's public API, just an internal implementation detail. We can probably do more to document that at the crate itself though.</p>\n</blockquote>",
        "id": 506234844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742237195
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2691617353\">PR review</a>:</p>\n<blockquote>\n<p>Overall, I really like this approach. Have opinions on some of the details tho.</p>\n</blockquote>",
        "id": 506243686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742239855
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999385582\">PR review comment</a>:</p>\n<blockquote>\n<p>The idea here is that you want to use something of fixed size, rather than <code>usize</code>, for the bitsets serialized into the stack map section?</p>\n<p>It shouldn't actually matter, since we can only ever run <code>.cwasm</code>s that have the same size <code>usize</code> as the host (whether native or pulley) right? Given that, is it worth the complications that become necessary here to support non-<code>usize</code> scalars inside a compound bit set?</p>\n</blockquote>",
        "id": 506243688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742239855
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999416227\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah so the <code>* Stack map data</code> above is just a bag of bytes of the rest of the section, and when you get an offset into that bag of bytes, it is guaranteed to point at one of these? Could you clarify these binary format docs that the trailing data is a bunch of variably-sized data and that the initial PC and offset fields are essentially an index for searching through it without decoding every single stack map?</p>\n</blockquote>",
        "id": 506243689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742239855
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999394411\">PR review comment</a>:</p>\n<blockquote>\n<p>This is kind of a strange API for this data structure to support. I'm not sure what it really is supposed to \"mean\". It feels like, if you want this API, you should actually just be working with a <code>Vec&lt;ScalarBitSet&lt;T&gt;&gt;</code>, because the underlying scalars used by this data structure really are just an implementation and data-representation detail and don't have any meaning on which values are vs are not in the set itself.</p>\n</blockquote>",
        "id": 506243690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742239855
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999403835\">PR review comment</a>:</p>\n<blockquote>\n<ol>\n<li>Maybe avoid pushing to <code>section</code> if <code>offsets</code> is empty?</li>\n<li>The name <code>offsets</code> was pretty confusing to me, since I was initially thinking of instruction offsets (i.e. the <code>offset</code> (ne <code>code_offset</code>) variable) and not frame offsets when reading this. Can we either keep the name <code>code_offset</code> for <code>offset</code> and/or rename <code>offsets</code> to <code>{frame,stack}_offsets</code>?</li>\n</ol>\n</blockquote>",
        "id": 506243691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742239855
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999383726\">PR review comment</a>:</p>\n<blockquote>\n<p>Rename this <code>BITS_PER_SCALAR</code>?</p>\n</blockquote>",
        "id": 506243692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742239855
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999443711\">PR review comment</a>:</p>\n<blockquote>\n<p>Something to consider for the future: if we frequently have multiple sequential entries for different PCs but which have the same stack slots, eg</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"mh\">0x1dc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">]</span>\n<span class=\"mh\">0x124</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"mh\">0x142</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"mh\">0x15a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"mh\">0x166</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>then it may make sense for each entry in the index to store non-overlapping PC ranges, rather than exact PCs, and we could effectively dedupe the index entries and the stack map data. That is, the previous example would become</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"mh\">0x1dc</span><span class=\"o\">..</span><span class=\"mh\">0x1dd</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">]</span>\n<span class=\"mh\">0x124</span><span class=\"o\">..</span><span class=\"mh\">0x15b</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"p\">)</span>\n<span class=\"mh\">0x166</span><span class=\"o\">..</span><span class=\"mh\">0x167</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>The downsides are that</p>\n<ol>\n<li>We would need to change Cranelift to actually emit empty stack maps for safepoints without any live GC refs, otherwise if we have <code>(pc=0x1234, [8]); (pc=0x1238, []); (pc=0x123b, [8])</code> and we don't see that middle entry in this builder, then we risk using <code>[8]</code> as our stack map at pc <code>0x1238</code>, which is extending a dead gc ref's lifetime at best and is giving the collector uninitialized data at worst.</li>\n<li>Relatedly, we lose our ability to catch bugs where the return address PC we are tracing isn't an exact match for a stack map entry.</li>\n</ol>\n<p>These are actually pretty scary, so maybe we don't want to do this, even if it would let us make these binary search indices much smaller.</p>\n<hr>\n<p>All that said, we can actually already dedupe the stack map _data_ if we want to, and have multiple index entries point to the same stack map data (even if they aren't contiguous!) with the encoding scheme already in use in this PR. We just need to hash cons and cache stack-map-data to encoded offset in this builder. This doesn't have any of the downsides from above. Seems like it would be a pure win.</p>\n</blockquote>",
        "id": 506243693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742239855
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999411881\">PR review comment</a>:</p>\n<blockquote>\n<p>In addition to what Andrew commented, how many integers? <code>N</code> doesn't seem right, it seems like we should logically have <code>N</code> compound bit sets, but each one can be variably sized. So something isn't clear here.</p>\n</blockquote>",
        "id": 506243694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742239855
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999422092\">PR review comment</a>:</p>\n<blockquote>\n<p>Suggest adding \"because our GC ref's stack slots are always 4-byte aligned\" somewhere in this sentence.</p>\n</blockquote>",
        "id": 506243695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742239855
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999470083\">PR review comment</a>:</p>\n<blockquote>\n<p>So back to <code>iter_words</code>: the usage here makes me think we should instead just expose a method like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">CompoundBitSet</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">as_raw</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>method or something, have it always operate on <code>u32</code>, and maybe (I haven't looked at the updated usage yet) add something like the following to allow zero-copy usage: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">CompoundBitSet</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">ref_from_raw</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">T</span>\n<span class=\"w\">    </span><span class=\"k\">where</span>\n<span class=\"w\">        </span><span class=\"n\">F</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">CompoundBitSet</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">T</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// unsafely create a CompoundBitSet wrapping the raw data,</span>\n<span class=\"w\">        </span><span class=\"c1\">// pass a ref to the bitset into the closure,</span>\n<span class=\"w\">        </span><span class=\"c1\">// mem::forget the bitset to avoid Vec dtors</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>rather than making it generic over the internal storage and doing a whole <code>iter_words</code> thing.</p>\n</blockquote>",
        "id": 506243696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742239855
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999388516\">PR review comment</a>:</p>\n<blockquote>\n<p>Or alternatively, should we just fix the compound bit set's internal scalar bit set to <code>u64</code> or <code>u32</code> scalars, instead of <code>usize</code>?</p>\n</blockquote>",
        "id": 506243697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742239855
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999477527\">PR review comment</a>:</p>\n<blockquote>\n<p>The <code>CompoundBitSet::ref_from_raw</code> thing would help tidy up some of this stuff too, so that it doesn't have to have a copy of the bitset logic inline here.</p>\n</blockquote>",
        "id": 506243698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742239855
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999405841\">PR review comment</a>:</p>\n<blockquote>\n<p>Since we have <code>range.end</code> handy, it probably makes sense to debug assert that <code>range.start &lt;= range.start + code_offset &lt; range.end</code></p>\n</blockquote>",
        "id": 506243699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742239855
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2691779924\">PR review</a>.</p>",
        "id": 506244753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742240214
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999487702\">PR review comment</a>:</p>\n<blockquote>\n<p>Could avoid the branded lifetime (so that the thing could be stored in the usage site's iterator) by doing a <code>std::cell::Ref</code>-esque thing instead:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">BorrowedCompoundBitSet</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">bitset</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">core</span><span class=\"p\">::</span><span class=\"n\">mem</span><span class=\"p\">::</span><span class=\"n\">ManuallyDrop</span><span class=\"o\">&lt;</span><span class=\"n\">CompoundBitSet</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">_borrow</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">core</span><span class=\"p\">::</span><span class=\"n\">marker</span><span class=\"p\">::</span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">ops</span><span class=\"p\">::</span><span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BorrowedCompoundBitSet</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CompoundBitSet</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 506244755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742240214
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999487702\">PR review comment</a>.</p>",
        "id": 506244774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742240223
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2692173756\">PR review</a>.</p>",
        "id": 506268176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742248295
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999725672\">PR review comment</a>:</p>\n<blockquote>\n<p>This is an attempt to multiplex the (IMO correct) default behavior of pointer-sized-by-default with the cross-compilation behavior of \"always use fixed-size things as it's easier\". I don't want to use <code>usize</code> in the compiled ELF as that makes cross-compilation and debugging cross-compiled artifacts a bit harder.</p>\n</blockquote>",
        "id": 506268178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742248296
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2692175962\">PR review</a>.</p>",
        "id": 506268413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742248391
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999727160\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not sure I understand your confusion, but I'm happy to rename this and/or document it better. IMO <code>CompoundBitSet</code> is by definition a <code>Vec&lt;ScalarBitSet&lt;T&gt;&gt;</code> and the point of it is to do all the vector indexing for you so you don't have to think about it. In that sense I wouldn't want to work with <code>Vec&lt;ScalarBitSet&lt;T&gt;&gt;</code> raw and it also makes sense to me to expose an iterator or slice accessor as that's the definition of the representation.</p>\n</blockquote>",
        "id": 506268414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742248391
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2692177808\">PR review</a>.</p>",
        "id": 506268612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742248467
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999728576\">PR review comment</a>:</p>\n<blockquote>\n<p>For (1) agreed and that happens within <code>StackMapSection</code> building. For (2) I'll add some assertions, good point!</p>\n</blockquote>",
        "id": 506268613,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742248467
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2692181366\">PR review</a>.</p>",
        "id": 506269054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742248627
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999731077\">PR review comment</a>:</p>\n<blockquote>\n<p>I like your latter idea, having a \"pool of sets\" and when we insert a stack map we shove it in a hash map and dedupe based on that. Agreed it's a pure win with no real degree of complexity overhead. Are you thinking that should be done here? (I'd sort of prefer to defer that to analyze a \"real world module\" with a lot of stack maps)</p>\n</blockquote>",
        "id": 506269055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742248627
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2692183317\">PR review</a>.</p>",
        "id": 506269296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742248709
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999732382\">PR review comment</a>:</p>\n<blockquote>\n<p>I realize I can probably use <code>ScalarBitSet::iter</code> to simplify a lot of this. I'd prefer to avoid too wonky of an abstraction to use <code>CompoundBitSet</code> literally somehow, but do you think that's an acceptable complexity tradeoff?</p>\n</blockquote>",
        "id": 506269298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742248710
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2692184643\">PR review</a>.</p>",
        "id": 506269463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742248771
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999733199\">PR review comment</a>:</p>\n<blockquote>\n<p>Er, sorry.</p>\n<p>To answer your original thoughts on this comment, I'd sort of defer to my response <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999727160\">above</a>. My literal response just now above this one is actually a response to your thought <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999477527\">below</a></p>\n</blockquote>",
        "id": 506269465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742248771
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2692185101\">PR review</a>.</p>",
        "id": 506269530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742248792
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999733500\">PR review comment</a>:</p>\n<blockquote>\n<p>Deduping the stack map data can definitely be a separate PR</p>\n</blockquote>",
        "id": 506269531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742248792
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404\">PR #10404</a>.</p>",
        "id": 506273078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742250074
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2692218301\">PR review</a>.</p>",
        "id": 506273209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742250116
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999754933\">PR review comment</a>:</p>\n<blockquote>\n<p>I've tried to document this better with some more art/boxes, but let me know if I can improve anything</p>\n</blockquote>",
        "id": 506273210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742250116
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2692220355\">PR review</a>.</p>",
        "id": 506273348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742250161
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#discussion_r1999756121\">PR review comment</a>:</p>\n<blockquote>\n<p>How about this:</p>\n<ul>\n<li>we call this method <code>iter_scalars</code></li>\n<li>the iterator yields <code>ScalarBitSet&lt;T&gt;</code> items instead of <code>T</code> directly</li>\n</ul>\n</blockquote>",
        "id": 506273349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742250162
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404\">PR #10404</a>.</p>",
        "id": 506281075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742253131
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#issuecomment-2737765855\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404\">PR #10404</a>:</p>\n<blockquote>\n<p>@fitzgen did you want to review this over again after the recent changes? Or have more thoughts?</p>\n</blockquote>",
        "id": 506809999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742411841
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404#pullrequestreview-2703141739\">PR review</a>:</p>\n<blockquote>\n<p>Thanks</p>\n</blockquote>",
        "id": 507001762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742483621
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404\">PR #10404</a>.</p>",
        "id": 507059253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742499063
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404\">PR #10404</a>.</p>",
        "id": 507059306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742499074
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10404\">PR #10404</a>.</p>",
        "id": 507065542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742501325
    }
]