[
    {
        "content": "<p>MangoPeachGrape edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890\">PR #10890</a>.</p>",
        "id": 523133071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749488033
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890#issuecomment-2956510135\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890\">PR #10890</a>:</p>\n<blockquote>\n<p>CI seems happy, yay! Can you double-check to confirm the binary artifacts of that build are as you expect?</p>\n</blockquote>",
        "id": 523141419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749491470
    },
    {
        "content": "<p>jsturtevant <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890#issuecomment-2956605287\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890\">PR #10890</a>:</p>\n<blockquote>\n<p>I think using clang here might be a change from dynamically linking the CRT, to statically linking it by default.  This could potentially affect other who are expecting it to be dynamically linked.   </p>\n<p>Would creating two published libraries, one statically linked CRT and one with a dynamically linked CRT also resolve the issue?  I guess technically it would be 4, since you need the debug versions of them as well. This appears to be what other tools do as well <a href=\"https://github.com/google/filament/issues/810\">https://github.com/google/filament/issues/810</a></p>\n</blockquote>",
        "id": 523146947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749493846
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890#issuecomment-2956670709\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890\">PR #10890</a>:</p>\n<blockquote>\n<p>Personally I'd fear the amount of infrastructure required to handle the Windows-specific case of producing 4 static libraries when the only real difference between them is how one small C file is compiled amongst them. At that point I'd sort of rather prefer to push on removing the C from Wasmtime entirely to avoid the need to publish 4x more libraries for Windows.</p>\n<p>But then again this is still under the murky assumption that for whatever reason <code>/M{D,T}{,d}</code> doesn't seem to apply to Rust-built code. I only really have guesses as to why that might be the case, and for all I know it's not actually valid to build a rust staticlib and expect that to link in C/C++ projects with any of the above flags...</p>\n</blockquote>",
        "id": 523150783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749495475
    },
    {
        "content": "<p>MangoPeachGrape <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890#issuecomment-2956761115\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890\">PR #10890</a>:</p>\n<blockquote>\n<blockquote>\n<p>Can you double-check to confirm the binary artifacts of that build are as you expect?</p>\n</blockquote>\n<p>Yes, <code>dumpbin /directives wasmtime.lib</code> gives:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"n\">Linker</span><span class=\"w\"> </span><span class=\"n\">Directives</span>\n<span class=\"w\">   </span><span class=\"o\">-----------------</span>\n<span class=\"w\">   </span><span class=\"o\">/</span><span class=\"n\">DEFAULTLIB</span><span class=\"p\">:</span><span class=\"nc\">uuid</span><span class=\"p\">.</span><span class=\"n\">lib</span>\n<span class=\"w\">   </span><span class=\"o\">/</span><span class=\"n\">DEFAULTLIB</span><span class=\"p\">:</span><span class=\"nc\">uuid</span><span class=\"p\">.</span><span class=\"n\">lib</span>\n</code></pre></div>\n<p>and with <strong>_my_</strong> app it works linking against both the static and the dynamic lib in both debug and release (<code>/MDd</code> and <code>/MD</code>).</p>\n<blockquote>\n<p>clang here might be a change from dynamically linking the CRT, to statically linking</p>\n</blockquote>\n<p><code>dumpbin /symbols wasmtime.lib</code> outputs snippets like these:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">041</span><span class=\"w\"> </span><span class=\"mi\">00000000</span><span class=\"w\"> </span><span class=\"n\">UNDEF</span><span class=\"w\">  </span><span class=\"n\">notype</span><span class=\"w\">       </span><span class=\"n\">External</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">__imp_FreeLibrary</span>\n<span class=\"mi\">042</span><span class=\"w\"> </span><span class=\"mi\">00000000</span><span class=\"w\"> </span><span class=\"n\">UNDEF</span><span class=\"w\">  </span><span class=\"n\">notype</span><span class=\"w\">       </span><span class=\"n\">External</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">__imp_GetEnvironmentVariableA</span>\n<span class=\"mi\">043</span><span class=\"w\"> </span><span class=\"mi\">00000000</span><span class=\"w\"> </span><span class=\"n\">UNDEF</span><span class=\"w\">  </span><span class=\"n\">notype</span><span class=\"w\">       </span><span class=\"n\">External</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">malloc</span>\n<span class=\"mi\">044</span><span class=\"w\"> </span><span class=\"mi\">00000000</span><span class=\"w\"> </span><span class=\"n\">UNDEF</span><span class=\"w\">  </span><span class=\"n\">notype</span><span class=\"w\">       </span><span class=\"n\">External</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">__imp_LoadLibraryExA</span>\n<span class=\"mi\">045</span><span class=\"w\"> </span><span class=\"mi\">00000000</span><span class=\"w\"> </span><span class=\"n\">UNDEF</span><span class=\"w\">  </span><span class=\"n\">notype</span><span class=\"w\">       </span><span class=\"n\">External</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">free</span>\n<span class=\"mi\">046</span><span class=\"w\"> </span><span class=\"mi\">00000000</span><span class=\"w\"> </span><span class=\"n\">UNDEF</span><span class=\"w\">  </span><span class=\"n\">notype</span><span class=\"w\">       </span><span class=\"n\">External</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">__imp_GetProcAddress</span>\n</code></pre></div>\n<p>which I would assume points to it still being linked dynamically, but I might be very wrong?</p>\n</blockquote>",
        "id": 523154503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749497231
    },
    {
        "content": "<p>jsturtevant <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890#issuecomment-2960072423\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890\">PR #10890</a>:</p>\n<blockquote>\n<blockquote>\n<p>Personally I'd fear the amount of infrastructure required to handle the Windows-specific case of producing 4 static libraries when the only real difference between them is how one small C file is compiled amongst them. At that point I'd sort of rather prefer to push on removing the C from Wasmtime entirely to avoid the need to publish 4x more libraries for Windows.</p>\n</blockquote>\n<p>makes sense</p>\n<blockquote>\n<p>and with my app it works linking against both the static and the dynamic lib in both debug and release (/MDd and /MD).</p>\n</blockquote>\n<p>interesting, I guess something else is going on then.  I don't know the best way to detect if it is static/dynamic in a lib.  I've only really ran into this executables.</p>\n</blockquote>",
        "id": 523338880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749576389
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890#issuecomment-2960364311\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890\">PR #10890</a>:</p>\n<blockquote>\n<p>Ok given that this is all working for @MangoPeachGrape I'm tempted to go ahead and merge this and consider other possible changes in future follow-ups. I hope to one day also remove the last bits of C from Wasmtime eventually too...</p>\n<p>@MangoPeachGrape mind updating this PR though to leave a comment in the code itself for why clang is specifically selected? Other than that happy to flag to merge.</p>\n</blockquote>",
        "id": 523356745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749583573
    },
    {
        "content": "<p>MangoPeachGrape updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890\">PR #10890</a>.</p>",
        "id": 523365731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749587575
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890#pullrequestreview-2922913014\">PR review</a>.</p>",
        "id": 523849184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749772161
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10890\">PR #10890</a>.</p>",
        "id": 523850806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749773396
    }
]