[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10648\">PR #10648</a> from <code>abrown:asm-xor-clear</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This change uses an \"uninitialized value\" to resolve the register allocation issues that come up when clearing a GPR with <code>xor</code>; this tries out the approach suggested in #10632 and will replace that if merged. The problem is that, in <code>xor &lt;tmp&gt;, &lt;tmp&gt;</code>, we need some way to communicate to the register allocator that the previous values of <code>&lt;tmp&gt;</code> are completely cleared--i.e., not used. While #10632 started down the path of allowing the register allocator to make a different decision about <code>&lt;tmp&gt;</code>--the approach currently taken for <code>AluConstOp</code>--this change instead adopts the \"uninitialized value\" approach. As was done previously with <code>XmmUninitializedValue</code>, we create a new pseudo-instruction called <code>GprUninitializedValue</code> whose registers are defined out of thin air.</p>\n</blockquote>",
        "id": 513736961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745360586
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10648#pullrequestreview-2785542629\">PR review</a>:</p>\n<blockquote>\n<p>LGTM, thanks!</p>\n</blockquote>",
        "id": 513739612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745361906
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10648#discussion_r2054988916\">PR review comment</a>:</p>\n<blockquote>\n<p>I know pre-existing, but can we add a bit more here about how it's used (to ease concerns of the reader that this looks wildly unsafe)? Basically something like: \"This is always immediately followed by an instruction, such as <code>xor reg, reg</code>, that <em>semantically</em> reads this undefined value but <em>arithmetically</em> produces the same result regardless of its value.\"</p>\n</blockquote>",
        "id": 513739613,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745361906
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10648#pullrequestreview-2785652236\">PR review</a>.</p>",
        "id": 513747956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745366783
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10648#discussion_r2055061972\">PR review comment</a>:</p>\n<blockquote>\n<p>I do have some questions about the offset changes here (hence the draft status): here, for example, we've managed to shave a byte off our encodings somehow...</p>\n</blockquote>",
        "id": 513747957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745366784
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10648#discussion_r2055063205\">PR review comment</a>:</p>\n<blockquote>\n<p>And here, we've somehow lost a byte again, but without any other changes to the file?</p>\n</blockquote>",
        "id": 513747958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745366784
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10648#discussion_r2055062901\">PR review comment</a>:</p>\n<blockquote>\n<p>...whereas here we've managed to gain two of them! It's not yet clear to me why this is.</p>\n</blockquote>",
        "id": 513747959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745366784
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10648\">PR #10648</a>.</p>",
        "id": 513748380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745367091
    },
    {
        "content": "<p><strong>abrown</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10648\">PR #10648</a> as ready for review.</p>",
        "id": 513912497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745424618
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10648\">PR #10648</a>.</p>",
        "id": 513912500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745424619
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10648\">PR #10648</a>.</p>",
        "id": 513912501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745424619
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10648\">PR #10648</a>.</p>",
        "id": 513912503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745424619
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10648#issuecomment-2824832504\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10648\">PR #10648</a>:</p>\n<blockquote>\n<p>In the Cranelift meeting today we chalked these offset changes up to different register allocation (potentially adding or removing REX bytes in a few places) &mdash; no one sounded too concerned. We did discuss another approach: instead of continuing to rely on the <code>uninit</code> footgun, we could create a pseudo-instruction, much like the current <code>AluConstOp</code>, to differentiate this <code>xor &lt;tmp&gt;, &lt;tmp&gt;</code> pattern for register allocation. (I have built a branch that already walks out that approach: <a href=\"https://github.com/bytecodealliance/wasmtime/compare/main...abrown:wasmtime:asm-const\">https://github.com/bytecodealliance/wasmtime/compare/main...abrown:wasmtime:asm-const</a>).</p>\n</blockquote>",
        "id": 513913447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745424881
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10648\">PR #10648</a>.</p>",
        "id": 513925863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745428735
    }
]