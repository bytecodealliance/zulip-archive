[
    {
        "content": "<p>adv-sw opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11846\">issue #11846</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Repro: <a href=\"http://advance-software.com/misc/test_breakpoint.zip\">http://advance-software.com/misc/test_breakpoint.zip</a>)</p>\n<h3>Steps to Reproduce - Windows</h3>\n<ol>\n<li>\n<p>Build your wasmtime.exe &amp; put it in repro dist subdirectory. <br>\n(there's a 0 length placeholder there right now)</p>\n</li>\n<li>\n<p>Then [command line] : </p>\n<blockquote>\n<p>lldb -- .\\wasmtime.exe  -D debug-info --invoke app_init .\\breakable.wasm<br>\n(lldb)  b app_init<br>\n(lldb) r<br>\n&amp; that works (for me)</p>\n</blockquote>\n</li>\n<li>\n<p>Build the c-api test in host, using visual studio 2022 -  a couple of hardwired paths in there to change but its mostly portable. resulting .exe should end up in repro \"dist\" subdir, overwriting the 0 length placeholder.</p>\n</li>\n<li>\n<p>Verify it works (from dist) : </p>\n<blockquote>\n<p>.\\test_wasmtime_debug_api.exe .\\breakable.wasm<br>\nShould get result : 42</p>\n</blockquote>\n</li>\n<li>\n<p>Next, run under lldb : </p>\n<blockquote>\n<p>lldb -- .\\test_wasmtime_debug_api.exe .\\breakable.wasm<br>\n(lldb) b app_init<br>\n(lldb) r<br>\nbreakpoint not hit. </p>\n</blockquote>\n</li>\n</ol>\n<p>that's the bug.</p>\n<p>What do you expect to happen?</p>\n<p>breakpoint should be hit when running breakable.wasm from both wasmtime &amp; c API test.</p>\n<p>What actually happens? </p>\n<p>breakpoint  hit when running breakable.wasm from wasmtime, not hit from c API test.</p>\n<h3>Versions and Environment</h3>\n<p>wasmtime trunk</p>\n<p>lldb version 20.1.7</p>\n<p>Wasmtime version or commit: TODO</p>\n<p>Operating system: windows 11 - latest.</p>\n<p>Architecture: x64-84</p>\n<h3>Extra Info</h3>\n<p>Source to breakable.wasm is in wasm subdir - its trivial.</p>\n<p>Tried c-api buiit static &amp; dynamic. static my preference as less sensitive to where .dll's are on Windows which has caused system to be unreliable in the past. Neither works.</p>\n<p>Difference (guess) : wasmtime likely uses wasmtime API, the C API test uses the wasm API.</p>\n</blockquote>",
        "id": 544593816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760374714
    },
    {
        "content": "<p><a href=\"https://github.com/adv-sw\">adv-sw</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11846\">Issue #11846</a>.</p>",
        "id": 544593817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760374715
    },
    {
        "content": "<p>adv-sw edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11846\">issue #11846</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Repro: <a href=\"http://advance-software.com/misc/test_breakpoint.zip\">http://advance-software.com/misc/test_breakpoint.zip</a>)</p>\n<h3>Steps to Reproduce - Windows</h3>\n<ol>\n<li>\n<p>Build your wasmtime.exe &amp; put it in repro dist subdirectory. <br>\n(there's a 0 length placeholder there right now)</p>\n</li>\n<li>\n<p>Then [command line] : </p>\n<blockquote>\n<p>lldb -- .\\wasmtime.exe  -D debug-info --invoke app_init .\\breakable.wasm<br>\n(lldb)  b app_init<br>\n(lldb) r<br>\n&amp; that works (for me)</p>\n</blockquote>\n</li>\n<li>\n<p>Build the c-api test in host, using visual studio 2022 -  a couple of hardwired paths in there to change but its mostly portable. resulting .exe should end up in repro \"dist\" subdir, overwriting the 0 length placeholder.</p>\n</li>\n<li>\n<p>Verify it works (from dist) : </p>\n<blockquote>\n<p>.\\test_wasmtime_debug_api.exe .\\breakable.wasm<br>\nShould get result : 42</p>\n</blockquote>\n</li>\n<li>\n<p>Next, run under lldb : </p>\n<blockquote>\n<p>lldb -- .\\test_wasmtime_debug_api.exe .\\breakable.wasm<br>\n(lldb) b app_init<br>\n(lldb) r<br>\nbreakpoint not hit. </p>\n</blockquote>\n</li>\n</ol>\n<p>that's the bug.</p>\n<p>What do you expect to happen?</p>\n<p>breakpoint should be hit when running breakable.wasm from both wasmtime &amp; c API test.</p>\n<p>What actually happens? </p>\n<p>breakpoint  hit when running breakable.wasm from wasmtime, not hit from c API test.</p>\n<h3>Versions and Environment</h3>\n<p>lldb version 20.1.7</p>\n<p>Wasmtime version or commit: trunk</p>\n<p>Operating system: windows 11 - latest.</p>\n<p>Architecture: x64-84</p>\n<h3>Extra Info</h3>\n<p>Source to breakable.wasm is in wasm subdir - its trivial.</p>\n<p>Tried c-api buiit static &amp; dynamic. static my preference as less sensitive to where .dll's are on Windows which has caused system to be unreliable in the past. Neither works.</p>\n<p>Difference (guess) : wasmtime likely uses wasmtime API, the C API test uses the wasm API.</p>\n</blockquote>",
        "id": 544594114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760374843
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime:debugging label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11846\">Issue #11846</a>.</p>",
        "id": 544595785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760375619
    },
    {
        "content": "<p>adv-sw closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11846\">issue #11846</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Repro: <a href=\"http://advance-software.com/misc/test_breakpoint.zip\">http://advance-software.com/misc/test_breakpoint.zip</a>)</p>\n<h3>Steps to Reproduce - Windows</h3>\n<ol>\n<li>\n<p>Build your wasmtime.exe &amp; put it in repro dist subdirectory. <br>\n(there's a 0 length placeholder there right now)</p>\n</li>\n<li>\n<p>Then [command line] : </p>\n<blockquote>\n<p>lldb -- .\\wasmtime.exe  -D debug-info --invoke app_init .\\breakable.wasm<br>\n(lldb)  b app_init<br>\n(lldb) r<br>\n&amp; that works (for me)</p>\n</blockquote>\n</li>\n<li>\n<p>Build the c-api test in host, using visual studio 2022 -  a couple of hardwired paths in there to change but its mostly portable. resulting .exe should end up in repro \"dist\" subdir, overwriting the 0 length placeholder.</p>\n</li>\n<li>\n<p>Verify it works (from dist) : </p>\n<blockquote>\n<p>.\\test_wasmtime_debug_api.exe .\\breakable.wasm<br>\nShould get result : 42</p>\n</blockquote>\n</li>\n<li>\n<p>Next, run under lldb : </p>\n<blockquote>\n<p>lldb -- .\\test_wasmtime_debug_api.exe .\\breakable.wasm<br>\n(lldb) b app_init<br>\n(lldb) r<br>\nbreakpoint not hit. </p>\n</blockquote>\n</li>\n</ol>\n<p>that's the bug.</p>\n<p>What do you expect to happen?</p>\n<p>breakpoint should be hit when running breakable.wasm from both wasmtime &amp; c API test.</p>\n<p>What actually happens? </p>\n<p>breakpoint  hit when running breakable.wasm from wasmtime, not hit from c API test.</p>\n<h3>Versions and Environment</h3>\n<p>lldb version 20.1.7</p>\n<p>Wasmtime version or commit: trunk</p>\n<p>Operating system: windows 11 - latest.</p>\n<p>Architecture: x64-84</p>\n<h3>Extra Info</h3>\n<p>Source to breakable.wasm is in wasm subdir - its trivial.</p>\n<p>Tried c-api buiit static &amp; dynamic. static my preference as less sensitive to where .dll's are on Windows which has caused system to be unreliable in the past. Neither works.</p>\n<p>Difference (guess) : wasmtime likely uses wasmtime API, the C API test uses the wasm API.</p>\n</blockquote>",
        "id": 544694599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760432371
    },
    {
        "content": "<p>adv-sw <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11846#issuecomment-3400809240\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11846\">issue #11846</a>:</p>\n<blockquote>\n<p>Fixed. Cause was missing conf.h</p>\n<p>Fixed by manually recreating from <a href=\"http://conf.h.in\">conf.h.in</a> with all current options enabled.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/11849\">https://github.com/bytecodealliance/wasmtime/issues/11849</a></p>\n</blockquote>",
        "id": 544694603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760432372
    }
]