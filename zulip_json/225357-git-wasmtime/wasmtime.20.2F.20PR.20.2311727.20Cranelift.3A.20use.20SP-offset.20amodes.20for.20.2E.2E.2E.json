[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\">PR #11727</a> from <code>cfallin:direct-stack-loads-stores</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>We provide <code>stack_load</code>/ <code>stack_store</code> / <code>stack_addr</code> instructions in Cranelift to operate on stack slots, and the first two are legalized to a <code>stack_addr</code> plus an ordinary load or store instruction.</p>\n<p>We currently have lowerings for <code>stack_addr</code> that materialize an SP-relative address into a register: for example, <code>leaq 8(%rsp), %rax</code> on x86-64 or <code>add x0, sp, #8</code> on aarch64.</p>\n<p>Taken together, we see sequences like (aarch64 / x86-64)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">8</span><span class=\"w\">       </span><span class=\"o\">/</span><span class=\"w\">   </span><span class=\"n\">leaq</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">    </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x0</span><span class=\"p\">]</span><span class=\"w\">         </span><span class=\"o\">/</span><span class=\"w\">   </span><span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>when using <code>stack_store</code>s. In particular, we do <em>not</em> use the direct SP-relative form, which would look like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\">     </span><span class=\"o\">/</span><span class=\"w\">   </span><span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>and which we can already generate in other cases, e.g. spillslot moves (spills/reloads) and clobber saves/restores.</p>\n<p>This inefficiency is undesirable whenever the embedder is using stackslots, but in particular when we expect to have high memory traffic to stack slots (e.g., I am seeing this now when implementing debug instrumentation in Wasmtime, and user stack map instrumentation for GC will also benefit).</p>\n<p>This PR adds new lowerings that use the existing synthetic address mode we already use for spillslots to emit loads/stores to stackslots directly when possible. The PR does this for x86-64 and aarch64; others could be updated later.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 540632367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758431548
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\">PR #11727</a>.</p>",
        "id": 540632368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758431549
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\">PR #11727</a>.</p>",
        "id": 540632369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758431549
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\">PR #11727</a>.</p>",
        "id": 540632371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758431550
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\">PR #11727</a>.</p>",
        "id": 540632372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758431550
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727#issuecomment-3315629853\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\">PR #11727</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:area:machinst\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 540639581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758440670
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727#issuecomment-3318907200\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\">PR #11727</a>:</p>\n<blockquote>\n<p>This is a much cleaner implementation than what I did for <a href=\"#narrow/channel/217117-cranelift/topic/stack_addr.20.2B.20load.2Fstore.20merging/with/540466352\">https://bytecodealliance.zulipchat.com/#narrow/channel/217117-cranelift/topic/stack_addr.20.2B.20load.2Fstore.20merging/with/540466352</a>, while still having the exact same performance on x86_64 (aka cg_clif produces faster executables than llvm <code>-O0</code>) and also working on arm64. This passes the full cg_clif test suite on x86_64.</p>\n<p>On arm64 I'm getting a test failure with the jit mode however. There is a call to <code>printf</code> with <code>0x10000e73c18d0</code> as address, but the expected string can be found at <code>0xffffe73c18d0</code> on the stack (the stack is from <code>0xfffffffdf000</code> to <code>0x1000000000000</code>).</p>\n</blockquote>",
        "id": 540798934,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758546453
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727#issuecomment-3318907200\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\">PR #11727</a>:</p>\n<blockquote>\n<p>This is a much cleaner implementation than what I did for <a href=\"#narrow/channel/217117-cranelift/topic/stack_addr.20.2B.20load.2Fstore.20merging/with/540466352\">https://bytecodealliance.zulipchat.com/#narrow/channel/217117-cranelift/topic/stack_addr.20.2B.20load.2Fstore.20merging/with/540466352</a>, while still having the exact same performance on x86_64 (aka cg_clif produces faster executables than llvm <code>-O0</code>) and also working on arm64. This passes the full cg_clif test suite on x86_64.</p>\n<p>On arm64 I'm getting a test failure with the jit mode however. There is a call to <code>printf</code> with <code>0x10000e73c18d0</code> as address, but the expected string can be found at <code>0xffffe73c18d0</code> on the stack (the stack is from <code>0xfffffffdf000</code> to <code>0x1000000000000</code>). You can reproduce this by running <code>./test.sh</code> after patching the Cargo.toml of cg_clif to use the Cranelift from this PR.</p>\n</blockquote>",
        "id": 540799365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758546559
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727#issuecomment-3318907200\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\">PR #11727</a>:</p>\n<blockquote>\n<p>This is a much cleaner implementation than what I did for <a href=\"#narrow/channel/217117-cranelift/topic/stack_addr.20.2B.20load.2Fstore.20merging/with/540466352\">https://bytecodealliance.zulipchat.com/#narrow/channel/217117-cranelift/topic/stack_addr.20.2B.20load.2Fstore.20merging/with/540466352</a>, while still having the exact same performance on x86_64 (aka cg_clif produces faster executables than llvm <code>-O0</code>) and also working on arm64. This passes the full cg_clif test suite on x86_64.</p>\n<p>On arm64 I'm getting a test failure with the jit mode however. There is a call to <code>printf</code> with <code>0x10000e73c18d0</code> as address, but the expected string can be found at <code>0xffffe73c18d0</code> on the stack (the stack is from <code>0xfffffffdf000</code> to <code>0x1000000000000</code>). You can reproduce this by running <code>./test.sh</code> after patching the Cargo.toml of cg_clif to use the Cranelift from this PR.<br>\nEdit: Never mind. The test failure is unrelated to this PR.</p>\n</blockquote>",
        "id": 540837622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758555228
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727#issuecomment-3318907200\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\">PR #11727</a>:</p>\n<blockquote>\n<p>This is a much cleaner implementation than what I did for <a href=\"#narrow/channel/217117-cranelift/topic/stack_addr.20.2B.20load.2Fstore.20merging/with/540466352\">https://bytecodealliance.zulipchat.com/#narrow/channel/217117-cranelift/topic/stack_addr.20.2B.20load.2Fstore.20merging/with/540466352</a>, while still having the exact same performance on x86_64 (aka cg_clif produces faster executables than llvm <code>-O0</code>) and also working on arm64. This passes the full cg_clif test suite on x86_64.</p>\n<p>On arm64 I'm getting a test failure with the jit mode however. There is a call to <code>printf</code> with <code>0x10000e73c18d0</code> as address, but the expected string can be found at <code>0xffffe73c18d0</code> on the stack (the stack is from <code>0xfffffffdf000</code> to <code>0x1000000000000</code>). You can reproduce this by running <code>./test.sh</code> after patching the Cargo.toml of cg_clif to use the Cranelift from this PR.<br>\nEdit: Never mind. The test failure is unrelated to this PR.<br>\nEdit2: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11734\">https://github.com/bytecodealliance/wasmtime/pull/11734</a> has the fix.</p>\n</blockquote>",
        "id": 540957413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758616538
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\">PR #11727</a>:</p>\n<blockquote>\n<p>We provide <code>stack_load</code>/ <code>stack_store</code> / <code>stack_addr</code> instructions in Cranelift to operate on stack slots, and the first two are legalized to a <code>stack_addr</code> plus an ordinary load or store instruction.</p>\n<p>We currently have lowerings for <code>stack_addr</code> that materialize an SP-relative address into a register: for example, <code>leaq 8(%rsp), %rax</code> on x86-64 or <code>add x0, sp, #8</code> on aarch64.</p>\n<p>Taken together, we see sequences like (aarch64 / x86-64)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">8</span><span class=\"w\">       </span><span class=\"o\">/</span><span class=\"w\">   </span><span class=\"n\">leaq</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">    </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x0</span><span class=\"p\">]</span><span class=\"w\">         </span><span class=\"o\">/</span><span class=\"w\">   </span><span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>when using <code>stack_store</code>s. In particular, we do <em>not</em> use the direct SP-relative form, which would look like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\">     </span><span class=\"o\">/</span><span class=\"w\">   </span><span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>and which we can already generate in other cases, e.g. spillslot moves (spills/reloads) and clobber saves/restores.</p>\n<p>This inefficiency is undesirable whenever the embedder is using stackslots, but in particular when we expect to have high memory traffic to stack slots (e.g., I am seeing this now when implementing debug instrumentation in Wasmtime, and user stack map instrumentation for GC will also benefit).</p>\n<p>This PR adds new lowerings that use the existing synthetic address mode we already use for spillslots to emit loads/stores to stackslots directly when possible. The PR does this for x86-64 and aarch64; others could be updated later.</p>\n<p>Fixes #1064.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 541081047,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758653956
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727#issuecomment-3330216421\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\">PR #11727</a>:</p>\n<blockquote>\n<p>(In case others didn't see email updates from edits in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727#issuecomment-3318907200\">bjorn3's comment above</a>: the issue was unrelated from a <code>cg_clif</code> upgrade of Cranelift seeing another regression; this PR is unrelated and remains ready for review)</p>\n</blockquote>",
        "id": 541305356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758739508
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727#pullrequestreview-3269418320\">PR review</a>:</p>\n<blockquote>\n<p>Makes sense!</p>\n</blockquote>",
        "id": 541541991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758833145
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11727\">PR #11727</a>.</p>",
        "id": 541547571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758835943
    }
]