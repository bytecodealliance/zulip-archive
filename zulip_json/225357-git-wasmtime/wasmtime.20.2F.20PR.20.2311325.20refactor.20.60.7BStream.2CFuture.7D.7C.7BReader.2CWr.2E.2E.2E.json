[
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>.</p>",
        "id": 530852492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753479489
    },
    {
        "content": "<p>dicej opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a> from <code>dicej:stream-future-refactor-upstream</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This makes a several changes to how <code>{Stream,Future}|{Reader,Writer}</code> work to make them more efficient and, in some ways, more ergonomic:</p>\n<ul>\n<li>\n<p>The background tasks have been removed, allowing reads and writes to complete without task context switching.  We now only allocate and use oneshot channels lazily when the other end is not yet ready; this improves real world performance benchmarks (e.g. wasi-http request handling) considerably.</p>\n</li>\n<li>\n<p>Instances of <code>{Stream,Future}Reader</code> can now be lifted and lowered directly; no need for <code>Host{Stream,Future}</code> anymore.</p>\n</li>\n<li>\n<p>The type parameter for <code>Stream{Reader,Writer}</code> no longer refers to the buffer type -- just the payload type (i.e. <code>StreamReader&lt;u8&gt;</code> instead of <code>StreamReader&lt;Vec&lt;u8&gt;&gt;</code>), meaning any buffer type may be used for a given read or write operation.  This also means the compiler needs help with type inference less often when calling <code>Instance::stream</code>.</p>\n</li>\n<li>\n<p>Instances of <code>{Stream,Future}|{Reader,Writer}</code> now require access to the store in order to be disposed of properly.  I've added RAII wrapper structs (<code>WithAccessor[AndValue]</code>) to help with this, and also updated <code>Store::drop</code> and <code>Instance::run_concurrent</code> to ensure the store thread-local is set when dropping futures closing over <code>&amp;Accessor</code>s.</p>\n</li>\n<li>\n<p>In order to ensure that resources containing <code>{Stream,Future}|{Reader,Writer}</code> instances are disposed of properly, I've added <code>LinkerInstance::resource_concurrent</code> and have updated <code>wasmtime-wit-bindgen</code> to use it.  This gives resource drop functions access to a <code>StoreContextMut</code> via an <code>Accessor</code>, allowing the stream and future handles to be disposed of.<br>\n    - In order to make this work, I had to change <code>Accessor::instance</code> from a <code>Instance</code> to an <code>Option&lt;Instance&gt;</code>, which is awkward but temporary since we're planning to remove <code>Accessor::instance</code> entirely once we've moved concurrent state from <code>ComponentInstance</code> to <code>Store</code>.</p>\n</li>\n</ul>\n<p>That problem of disposal is definitely the most awkward part of all this.  In simple cases, it's easy enough to ensure that read and write handles are disposed of properly, but both <code>wasmtime-wasi</code> and <code>wasmtime-wasi-http</code> have some pretty complicated functions where handles are passed between tasks and/or stored inside resources, so it can be tricky to ensure proper disposal on all code paths.  I'm open to ideas for improving this, but I suspect we'll need new Rust language features (e.g. linear types) to make it truly ergonomic, robust, and efficient.</p>\n<p>While testing the above, I discovered an issue with <code>Instance::poll_until</code> such that it would prematurely give up and return a \"deadlock\" trap error, believing that there was no further work to do, even though the future passed to it was ready to resolve the next time it was polled.  I've fixed this by polling it one last time and only trapping if it returns pending.</p>\n<p>Note that I've moved a few associated functions from <code>ConcurrentState</code> to <code>Instance</code> (e.g. <code>guest_drop_writable</code> and others) since they now need access to the store; they're unchanged otherwise.  Apologies for the diff noise.</p>\n<p>Finally, I've tweaked how <code>wasmtime serve</code> to poll the guest for content before handing the response to Hyper, which helps performance by ensuring the first content chunk can be sent with the same TCP packet as the beginning of the response.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 530852493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753479490
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-wasi-reviewers\">wasmtime-wasi-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>.</p>",
        "id": 530852494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753479490
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>.</p>",
        "id": 530852496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753479490
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>.</p>",
        "id": 530856517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753481685
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#pullrequestreview-3063977650\">PR review</a>.</p>",
        "id": 531428655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753725878
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#discussion_r2237419298\">PR review comment</a>:</p>\n<blockquote>\n<p>I believe this isn't sound due to the <code>self.value.take()</code> in the destructor, notably that moves the future meaning self-poitners are all invalidated, meaning that the <code>drop</code> could go wrong. </p>\n<p>Destructors and <code>Pin</code> are quite subtle which would make me want to trend more towards a safer version of this rather than having <code>unsafe</code> here. The <code>pin_project_lite!</code> macro <a href=\"https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html#pinned-drop\">has support for Drop</a> but unfortunately I'm not sure it would help in this case because that'd just give you <code>Pin&lt;&amp;mut V&gt;</code> in the destructor which isn't sufficient for actual destruction.</p>\n<p>I know that at least one way to model this is to use <code>ManuallyDrop</code> to wrap the field insted of <code>Option</code>, meaning that the <code>Drop for Dropper</code> would unsafely drop-in-place inside of <code>tls::set</code>. That's still unsafe code, however, either with or without <code>pin_project!</code>. To me though that's probably the best we can do for now, so how about:</p>\n<ul>\n<li>Add <code>pin_project_lite</code> as a dependency of Wasmtime component-model-async and use it here. <ul>\n<li>Unrelated to this PR we should probably use it for <code>vm::{Instance, ComponentInstance}</code> to remove some unsafe code there.</li>\n</ul>\n</li>\n<li>Use <code>ManuallyDrop</code> to store <code>value</code> instead of <code>Option</code></li>\n<li>Use <code>unsafe</code> code to, in the destructor, run drop-in-place on <code>Pin&lt;&amp;mut ManuallyDrop&lt;V&gt;&gt;</code> by unsafely getting access to <code>&amp;mut ManuallyDrop&lt;V&gt;</code>.</li>\n</ul>\n</blockquote>",
        "id": 531428656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753725878
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#discussion_r2237473229\">PR review comment</a>:</p>\n<blockquote>\n<p>WDYT about changing this to <code>&amp;mut self</code>? I feel like that's a bit more idiomatic and maps well to <code>Drop</code>?</p>\n<p>Also I think this trait will want to be clearly documented in its relation to <code>Drop</code>. Specifically this trait implementation does nothing outside of <code>WithAccessor</code> and that's required to do anything here.</p>\n</blockquote>",
        "id": 531428657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753725878
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#discussion_r2237464451\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar to the above, as an async-cancel point this'll need some sort of destructor to run the <code>self.drop(store)</code> below.</p>\n</blockquote>",
        "id": 531428658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753725878
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#discussion_r2237467699\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be surfaced as a <code>pub fn close(...)</code> on <code>StreamWriter</code> itself? (and the reader, possibly futures too)</p>\n<p>Basically I think it'd be good to document this irrespective of the <code>DropWithStore</code> impl</p>\n</blockquote>",
        "id": 531428659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753725878
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#discussion_r2237448653\">PR review comment</a>:</p>\n<blockquote>\n<p>Something here will need to change, but I'm not exactly sure how and what. I think this is sound but it's panick-y because <code>host_write</code> can call <code>accept_reader</code> which can lower a value into wasm which isn't valid to do unless we're on a fiber. That runs the risk of suspending Rust code when there's embedder frames on the stack, which ok that's unsound and not just panick-y.</p>\n<p>One option is to drop this all entirely and have documentation indicating that a future cannot be closed without sending a value. That's not fantastic, however, as cancellation in Rust has no means of propagating into wasm (e.g. sending a <code>None</code> or something like that). </p>\n<p>Another alternative would be to change <code>host_write</code> to not execute the lowering immediately but to instead kick of a wasm task in the background of sorts to perform the lowering. Unsure.</p>\n</blockquote>",
        "id": 531428660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753725878
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#discussion_r2237462207\">PR review comment</a>:</p>\n<blockquote>\n<p>This is a bit tricky because this method takes <code>self</code>-by-value which means there's no <code>With*</code> on the stack that can run the destructor, and as an async cancel point here dropping this future wouldn't actually clean up the future itself.</p>\n<p>This sort of relates to the <code>DropWithStoreAndValue</code> comment I have below. On one hand this is a fundamental mismatch with \"channel semantics\" and \"that's a future\" where things are coming to a clash trying to model WIT futures in Rust in the face of cancellation. On the other hand this is solvable via similar mechanisms to below by retaining the default-value-to-send closure and arranging that to be sent at some point during destruction.</p>\n</blockquote>",
        "id": 531428661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753725878
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#discussion_r2237474227\">PR review comment</a>:</p>\n<blockquote>\n<p>In the abstract I think I personally prefer to keep the closure-to-manufacture-the-value in the constructor of a future rather than having this trait. Would that still work?</p>\n</blockquote>",
        "id": 531428663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753725878
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#discussion_r2237477528\">PR review comment</a>:</p>\n<blockquote>\n<p>Bikeshedding this a bit, this feels like it should be called <code>DropWithAccessor</code> or somehow have \"drop\" related to the name since \"with accessor\" is a super generic name that doesn't quite imply what's happening under the hood here. Not that I like the name <code>DropWithAccessor</code> though, that also feels bad...</p>\n</blockquote>",
        "id": 531428664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753725878
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#issuecomment-3128409405\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>:</p>\n<blockquote>\n<p>This is going to have conflicts with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11328\">https://github.com/bytecodealliance/wasmtime/pull/11328</a>, and I'll help work through those.</p>\n</blockquote>",
        "id": 531429162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753726040
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#pullrequestreview-3064123353\">PR review</a>.</p>",
        "id": 531431411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753726877
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#discussion_r2237509446\">PR review comment</a>:</p>\n<blockquote>\n<p>Good point.  Yeah, I think we might need a background task here; I forgot this is one of the reasons I was doing _everything_ on a background task until this PR.</p>\n</blockquote>",
        "id": 531431412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753726878
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>.</p>",
        "id": 531472048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753741055
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#pullrequestreview-3064739592\">PR review</a>.</p>",
        "id": 531472211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753741151
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#discussion_r2237958919\">PR review comment</a>:</p>\n<blockquote>\n<p>I've switched to <code>ManuallyDrop</code>.  It turned out <code>pin-project-lite</code> didn't buy us much, since we needed to unsafely convert from <code>Pin&lt;&amp;mut ManuallyDrop&lt;F&gt;&gt;</code> to <code>Pin&lt;&amp;mut F&gt;</code> anyway, so I didn't end up using it.</p>\n</blockquote>",
        "id": 531472215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753741152
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>.</p>",
        "id": 531705132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753825846
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#pullrequestreview-3069313353\">PR review</a>.</p>",
        "id": 531705288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753825907
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#discussion_r2241089559\">PR review comment</a>:</p>\n<blockquote>\n<p>I've updated this code to use <code>WithAccessor</code> and eliminate <code>DropWithStoreAndValue</code>.</p>\n</blockquote>",
        "id": 531705290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753825907
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#pullrequestreview-3069315327\">PR review</a>.</p>",
        "id": 531705406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753825962
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#discussion_r2241091281\">PR review comment</a>:</p>\n<blockquote>\n<p>This is no longer part of the public API, so we can change the name if/when we have a better one, or just not worry about it.</p>\n</blockquote>",
        "id": 531705409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753825962
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#issuecomment-3134184651\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>:</p>\n<blockquote>\n<p>I've addressed all the feedback so far except that we're still lowering writes using same stack the host embedder called us on; I'll address that by using a fiber for lowering.</p>\n</blockquote>",
        "id": 531705665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753826097
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>.</p>",
        "id": 531707516,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753826966
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#pullrequestreview-3069482334\">PR review</a>.</p>",
        "id": 531716709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753832032
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#discussion_r2241225861\">PR review comment</a>:</p>\n<blockquote>\n<p>Think about this in the context of rebasing with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11291\">wasi:sockets</a> -- is this necessary? Tasks can only be cancelled for two reasons:</p>\n<ol>\n<li>The store is dropped - in this case there's no need to do further cleanup</li>\n<li>The <code>AbortHandle</code> is triggered, but in this case it's statically known we just forget about that and ignore it.</li>\n</ol>\n<p>Given that does WASI actually need <code>Guarded*</code>?</p>\n</blockquote>",
        "id": 531716710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753832032
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#pullrequestreview-3069496718\">PR review</a>.</p>",
        "id": 531717498,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753832521
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#discussion_r2241234555\">PR review comment</a>:</p>\n<blockquote>\n<p>Perhaps we don't _need_ it, but it saves us from having to remember to close the handle explicitly before returning, which isn't too onerous for this simple task, but could become a maintenance hazard later.</p>\n<p><code>wasmtime-wasi-http</code> has some pretty complicated control flow, where keeping track of what to close when without RAII would be a real pain.</p>\n</blockquote>",
        "id": 531717499,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753832521
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>.</p>",
        "id": 531855487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753885015
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#pullrequestreview-3071821424\">PR review</a>.</p>",
        "id": 531855841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753885109
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#discussion_r2242863311\">PR review comment</a>:</p>\n<blockquote>\n<p>I just pushed an update to ensure that all host writes use a background task to lower when there may be embedder frames on the stack.</p>\n</blockquote>",
        "id": 531855845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753885110
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>.</p>",
        "id": 531869240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753888700
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>.</p>",
        "id": 531874655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753890192
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>.</p>",
        "id": 531875534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753890454
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>.</p>",
        "id": 531875894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753890566
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#issuecomment-3136922945\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>:</p>\n<blockquote>\n<p>@alexcrichton I believe I've addressed all your feedback so far.  Let me know if you have anything else.</p>\n<p>BTW, the optimization for lowering flat payloads during host writes is pretty trivial:</p>\n<p><div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs b/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs</span>\n<span class=\"gh\">index 2809cb6b12..ed56fd7bce 100644</span>\n<span class=\"gd\">--- a/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs</span>\n<span class=\"gi\">+++ b/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs</span>\n<span class=\"gu\">@@ -1777,9 +1777,7 @@ impl Instance {</span>\n<span class=\"w\"> </span>                    anyhow::Ok(result)\n<span class=\"w\"> </span>                };\n\n<span class=\"gd\">-                if</span>\n<span class=\"gd\">-                // TODO: Check if payload is \"flat\"</span>\n<span class=\"gd\">-                false {</span>\n<span class=\"gi\">+                if T::IS_FLAT_TYPE {</span>\n<span class=\"w\"> </span>                    // Optimize flat payloads (i.e. those which do not require\n<span class=\"w\"> </span>                    // calling the guest's realloc function) by lowering\n<span class=\"w\"> </span>                    // directly instead of using a oneshot::channel and\n<span class=\"gh\">diff --git a/crates/wasmtime/src/runtime/component/func/typed.rs b/crates/wasmtime/src/runtime/component/func/typed.rs</span>\n<span class=\"gh\">index ad4328fce4..f27120957a 100644</span>\n<span class=\"gd\">--- a/crates/wasmtime/src/runtime/component/func/typed.rs</span>\n<span class=\"gi\">+++ b/crates/wasmtime/src/runtime/component/func/typed.rs</span>\n<span class=\"gu\">@@ -687,6 +687,9 @@ pub unsafe trait ComponentType: Send + Sync {</span>\n<span class=\"w\"> </span>    #[doc(hidden)]\n<span class=\"w\"> </span>    const IS_RUST_UNIT_TYPE: bool = false;\n\n<span class=\"gi\">+    #[doc(hidden)]</span>\n<span class=\"gi\">+    const IS_FLAT_TYPE: bool = false;</span>\n<span class=\"gi\">+</span>\n<span class=\"w\"> </span>    /// Returns the number of core wasm abi values will be used to represent\n<span class=\"w\"> </span>    /// this type in its lowered form.\n<span class=\"w\"> </span>    ///\n<span class=\"gu\">@@ -1016,6 +1019,8 @@ macro_rules! integers {</span>\n\n<span class=\"w\"> </span>            const ABI: CanonicalAbiInfo = CanonicalAbiInfo::$abi;\n\n<span class=\"gi\">+            const IS_FLAT_TYPE: bool = true;</span>\n<span class=\"gi\">+</span>\n<span class=\"w\"> </span>            fn typecheck(ty: &amp;InterfaceType, _types: &amp;InstanceType&lt;'_&gt;) -&gt; Result&lt;()&gt; {\n<span class=\"w\"> </span>                match ty {\n<span class=\"w\"> </span>                    InterfaceType::$ty =&gt; Ok(()),\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 531876695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753890849
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325#pullrequestreview-3072494060\">PR review</a>.</p>",
        "id": 531885568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753893633
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11325\">PR #11325</a>.</p>",
        "id": 531890398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753895257
    }
]