[
    {
        "content": "<p>anlavandier edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11752\">issue #11752</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Wit file: </p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package example:example;\n\ninterface api {\n    foo: func();\n}\n\nworld bar {\n    import api;\n    export baz: func();\n}\n\nworld api-impl {\n    import api;\n}\n</code></pre></div>\n<p>rust code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"p\">;</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"p\">::</span><span class=\"n\">async_impl</span><span class=\"p\">::</span><span class=\"n\">MyHost</span><span class=\"p\">;</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"bar\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit/example.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"s\">\"example:example/api\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">async_impl</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">async</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">async_impl</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"api-impl\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit/example.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">imports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">async</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyHost</span><span class=\"p\">;</span>\n\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"p\">::</span><span class=\"n\">example</span><span class=\"p\">::</span><span class=\"n\">api</span><span class=\"p\">::{</span><span class=\"n\">Host</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">HostWithStore</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">add_to_linker</span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyHost</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<h3>Expected results</h3>\n<p>The above code should compile </p>\n<h3>Observed results</h3>\n<p>the following compile error: </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error<span class=\"o\">[</span>E0277<span class=\"o\">]</span>:<span class=\"w\"> </span><span class=\"sb\">`</span>T<span class=\"sb\">`</span><span class=\"w\"> </span>cannot<span class=\"w\"> </span>be<span class=\"w\"> </span>sent<span class=\"w\"> </span>between<span class=\"w\"> </span>threads<span class=\"w\"> </span>safely\n<span class=\"w\">  </span>--&gt;<span class=\"w\"> </span>src/main.rs:3:1\n<span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"m\">3</span><span class=\"w\">  </span><span class=\"p\">|</span><span class=\"w\"> </span>/<span class=\"w\"> </span>bindgen!<span class=\"o\">({</span>\n<span class=\"m\">4</span><span class=\"w\">  </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">     </span>world:<span class=\"w\"> </span><span class=\"s2\">\"bar\"</span>,\n<span class=\"m\">5</span><span class=\"w\">  </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">     </span>path:<span class=\"w\"> </span><span class=\"s2\">\"wit/example.wit\"</span>,\n<span class=\"m\">6</span><span class=\"w\">  </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">     </span>with:<span class=\"w\"> </span><span class=\"o\">{</span>\n...<span class=\"w\">  </span><span class=\"p\">|</span>\n<span class=\"m\">12</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"o\">})</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span>__^<span class=\"w\"> </span><span class=\"sb\">`</span>T<span class=\"sb\">`</span><span class=\"w\"> </span>cannot<span class=\"w\"> </span>be<span class=\"w\"> </span>sent<span class=\"w\"> </span>between<span class=\"w\"> </span>threads<span class=\"w\"> </span>safely\n<span class=\"w\">   </span><span class=\"p\">|</span>\nnote:<span class=\"w\"> </span>required<span class=\"w\"> </span>by<span class=\"w\"> </span>a<span class=\"w\"> </span>bound<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"sb\">`</span>add_to_linker<span class=\"sb\">`</span>\n<span class=\"w\">  </span>--&gt;<span class=\"w\"> </span>src/main.rs:16:5\n<span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"m\">16</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>/<span class=\"w\">     </span>bindgen!<span class=\"o\">({</span>\n<span class=\"m\">17</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">         </span>world:<span class=\"w\"> </span><span class=\"s2\">\"api-impl\"</span>,\n<span class=\"m\">18</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">         </span>path:<span class=\"w\"> </span><span class=\"s2\">\"wit/example.wit\"</span>,\n<span class=\"m\">19</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">         </span>imports:<span class=\"w\"> </span><span class=\"o\">{</span>\n...<span class=\"w\">  </span><span class=\"p\">|</span>\n<span class=\"m\">22</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">     </span><span class=\"o\">})</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span>______^<span class=\"w\"> </span>required<span class=\"w\"> </span>by<span class=\"w\"> </span>this<span class=\"w\"> </span>bound<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"sb\">`</span>add_to_linker<span class=\"sb\">`</span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span>note:<span class=\"w\"> </span>this<span class=\"w\"> </span>error<span class=\"w\"> </span>originates<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>macro<span class=\"w\"> </span><span class=\"sb\">`</span>bindgen<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">in</span><span class=\"w\"> </span>Nightly<span class=\"w\"> </span>builds,<span class=\"w\"> </span>run<span class=\"w\"> </span>with<span class=\"w\"> </span>-Z<span class=\"w\"> </span>macro-backtrace<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>more<span class=\"w\"> </span>info<span class=\"o\">)</span>\nhelp:<span class=\"w\"> </span>consider<span class=\"w\"> </span>further<span class=\"w\"> </span>restricting<span class=\"w\"> </span><span class=\"nb\">type</span><span class=\"w\"> </span>parameter<span class=\"w\"> </span><span class=\"sb\">`</span>T<span class=\"sb\">`</span><span class=\"w\"> </span>with<span class=\"w\"> </span>trait<span class=\"w\"> </span><span class=\"sb\">`</span>Send<span class=\"sb\">`</span>\n<span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"m\">12</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"o\">})</span>,<span class=\"w\"> </span>T:<span class=\"w\"> </span>std::marker::Send<span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\">   </span>++++++++++++++++++++++\n</code></pre></div>\n<p>Wasmtime version or commit: <br>\n<code>wasmtime = { version =\"37.0.1\", default-features = false, features = [\"runtime\", \"component-model\", \"async\", \"std\"] }</code></p>\n<p>Operating system: N/A</p>\n<p>Architecture: N/A</p>\n<h3>Extra info</h3>\n<p>Adding <code>import foobar: func();</code> to the <code>bar</code> world and adding a corresponding implementation of <code>BarImports</code> for <code>MyHost</code> fixes this. </p>\n<p><del>I believe that the bug is cause by the fact that <code>wit_bindgen::wasmtime::world_add_to_linker</code> relies on the presence of an <code>async</code> <code>Host</code> trait for the target world (here <code>bar</code>). Because the world doesn't directly import anything and relies on interfaces implemented elsewhere, no <code>Host</code> trait is generated and the <code>FunctionFlags::ASYNC</code> can't be found. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wit-bindgen/src/lib.rs#L2299-L2323\">Here the relevant code</a></del></p>\n<p><strong>Edit: I should have tested my theories before writing them in the issue. I had misread the provenance of the code. I believe that my solution is still right so I'm keeping the section as is</strong></p>\n<h3>Potential fix</h3>\n<p>I imagine that a way to fix this would be to really on <code>imports: {default: async}</code> instead of the <code>Host</code> trait. This would introduce a (in my head) minor inconvenience which is that code that declares <code>imports: {default: async}</code> without actually needing it (because all of the interfaces that they import don't use <code>async</code> and they don't declare any \"local\" imports) will end up with an extraneous <code>Send</code> bounds but that feels like bad coding on the authors part and should not be supported imo.</p>\n</blockquote>",
        "id": 542041950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759152977
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11752\">issue #11752</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Wit file: </p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package example:example;\n\ninterface api {\n    foo: func();\n}\n\nworld bar {\n    import api;\n    export baz: func();\n}\n\nworld api-impl {\n    import api;\n}\n</code></pre></div>\n<p>rust code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"p\">;</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"p\">::</span><span class=\"n\">async_impl</span><span class=\"p\">::</span><span class=\"n\">MyHost</span><span class=\"p\">;</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"bar\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit/example.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"s\">\"example:example/api\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">async_impl</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">async</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">async_impl</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"api-impl\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit/example.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">imports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">async</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyHost</span><span class=\"p\">;</span>\n\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"p\">::</span><span class=\"n\">example</span><span class=\"p\">::</span><span class=\"n\">api</span><span class=\"p\">::{</span><span class=\"n\">Host</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">HostWithStore</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">add_to_linker</span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyHost</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<h3>Expected results</h3>\n<p>The above code should compile </p>\n<h3>Observed results</h3>\n<p>the following compile error: </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error<span class=\"o\">[</span>E0277<span class=\"o\">]</span>:<span class=\"w\"> </span><span class=\"sb\">`</span>T<span class=\"sb\">`</span><span class=\"w\"> </span>cannot<span class=\"w\"> </span>be<span class=\"w\"> </span>sent<span class=\"w\"> </span>between<span class=\"w\"> </span>threads<span class=\"w\"> </span>safely\n<span class=\"w\">  </span>--&gt;<span class=\"w\"> </span>src/main.rs:3:1\n<span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"m\">3</span><span class=\"w\">  </span><span class=\"p\">|</span><span class=\"w\"> </span>/<span class=\"w\"> </span>bindgen!<span class=\"o\">({</span>\n<span class=\"m\">4</span><span class=\"w\">  </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">     </span>world:<span class=\"w\"> </span><span class=\"s2\">\"bar\"</span>,\n<span class=\"m\">5</span><span class=\"w\">  </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">     </span>path:<span class=\"w\"> </span><span class=\"s2\">\"wit/example.wit\"</span>,\n<span class=\"m\">6</span><span class=\"w\">  </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">     </span>with:<span class=\"w\"> </span><span class=\"o\">{</span>\n...<span class=\"w\">  </span><span class=\"p\">|</span>\n<span class=\"m\">12</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"o\">})</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span>__^<span class=\"w\"> </span><span class=\"sb\">`</span>T<span class=\"sb\">`</span><span class=\"w\"> </span>cannot<span class=\"w\"> </span>be<span class=\"w\"> </span>sent<span class=\"w\"> </span>between<span class=\"w\"> </span>threads<span class=\"w\"> </span>safely\n<span class=\"w\">   </span><span class=\"p\">|</span>\nnote:<span class=\"w\"> </span>required<span class=\"w\"> </span>by<span class=\"w\"> </span>a<span class=\"w\"> </span>bound<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"sb\">`</span>add_to_linker<span class=\"sb\">`</span>\n<span class=\"w\">  </span>--&gt;<span class=\"w\"> </span>src/main.rs:16:5\n<span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"m\">16</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>/<span class=\"w\">     </span>bindgen!<span class=\"o\">({</span>\n<span class=\"m\">17</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">         </span>world:<span class=\"w\"> </span><span class=\"s2\">\"api-impl\"</span>,\n<span class=\"m\">18</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">         </span>path:<span class=\"w\"> </span><span class=\"s2\">\"wit/example.wit\"</span>,\n<span class=\"m\">19</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">         </span>imports:<span class=\"w\"> </span><span class=\"o\">{</span>\n...<span class=\"w\">  </span><span class=\"p\">|</span>\n<span class=\"m\">22</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">     </span><span class=\"o\">})</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"p\">|</span>______^<span class=\"w\"> </span>required<span class=\"w\"> </span>by<span class=\"w\"> </span>this<span class=\"w\"> </span>bound<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"sb\">`</span>add_to_linker<span class=\"sb\">`</span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span>note:<span class=\"w\"> </span>this<span class=\"w\"> </span>error<span class=\"w\"> </span>originates<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>macro<span class=\"w\"> </span><span class=\"sb\">`</span>bindgen<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">in</span><span class=\"w\"> </span>Nightly<span class=\"w\"> </span>builds,<span class=\"w\"> </span>run<span class=\"w\"> </span>with<span class=\"w\"> </span>-Z<span class=\"w\"> </span>macro-backtrace<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>more<span class=\"w\"> </span>info<span class=\"o\">)</span>\nhelp:<span class=\"w\"> </span>consider<span class=\"w\"> </span>further<span class=\"w\"> </span>restricting<span class=\"w\"> </span><span class=\"nb\">type</span><span class=\"w\"> </span>parameter<span class=\"w\"> </span><span class=\"sb\">`</span>T<span class=\"sb\">`</span><span class=\"w\"> </span>with<span class=\"w\"> </span>trait<span class=\"w\"> </span><span class=\"sb\">`</span>Send<span class=\"sb\">`</span>\n<span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"m\">12</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"o\">})</span>,<span class=\"w\"> </span>T:<span class=\"w\"> </span>std::marker::Send<span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\">   </span>++++++++++++++++++++++\n</code></pre></div>\n<p>Wasmtime version or commit: <br>\n<code>wasmtime = { version =\"37.0.1\", default-features = false, features = [\"runtime\", \"component-model\", \"async\", \"std\"] }</code></p>\n<p>Operating system: N/A</p>\n<p>Architecture: N/A</p>\n<h3>Extra info</h3>\n<p>Adding <code>import foobar: func();</code> to the <code>bar</code> world and adding a corresponding implementation of <code>BarImports</code> for <code>MyHost</code> fixes this. </p>\n<p><del>I believe that the bug is cause by the fact that <code>wit_bindgen::wasmtime::world_add_to_linker</code> relies on the presence of an <code>async</code> <code>Host</code> trait for the target world (here <code>bar</code>). Because the world doesn't directly import anything and relies on interfaces implemented elsewhere, no <code>Host</code> trait is generated and the <code>FunctionFlags::ASYNC</code> can't be found. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wit-bindgen/src/lib.rs#L2299-L2323\">Here the relevant code</a></del></p>\n<p><strong>Edit: I should have tested my theories before writing them in the issue. I had misread the provenance of the code. I believe that my solution is still right so I'm keeping the section as is</strong></p>\n<h3>Potential fix</h3>\n<p>I imagine that a way to fix this would be to really on <code>imports: {default: async}</code> instead of the <code>Host</code> trait. This would introduce a (in my head) minor inconvenience which is that code that declares <code>imports: {default: async}</code> without actually needing it (because all of the interfaces that they import don't use <code>async</code> and they don't declare any \"local\" imports) will end up with an extraneous <code>Send</code> bounds but that feels like bad coding on the authors part and should not be supported imo.</p>\n</blockquote>",
        "id": 542513483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759329577
    }
]