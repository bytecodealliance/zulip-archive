[
    {
        "content": "<p>dragonulq opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10936\">issue #10936</a>:</p>\n<blockquote>\n<p>Thanks for filing a bug report! Please fill out the TODOs below.</p>\n<p><strong>Note: if you want to report a security issue, please read our <a href=\"https://bytecodealliance.org/security\">security policy</a>!</strong></p>\n<h3>Test Case</h3>\n<p>The full code along with CPython.wasm and all its dependencies is available at this repo: <a href=\"https://github.com/dragonulq/github-rust-issue\">https://github.com/dragonulq/github-rust-issue</a> . I made a repository because CPython.wasm was too large to upload here and it is also easier to reproduce with all the files already there.</p>\n<p>CPython.wasm can be run from the CLI, inside the directory with the ./python.sh script. You need to have the $WASMTIME_HOME variable set. This setup is without errors.</p>\n<p>My Rust app has the usual boilerplate code to compile and instantiate a module. It can run other WASM modules but not CPython, which makes me think it has something to do with how I am setting up the environment for CPython, as it needs to enter other directories in order to run, like Lib. These are the relevant lines that do the setup: </p>\n<p>`wasi_ctx_builder.preopened_dir(host_path, \"/\", DirPerms::all(), FilePerms::all())?;<br>\n    wasi_ctx_builder.env(\"PYTHONPATH\", \"/build/lib.wasi-wasm32-3.15\");<br>\n    wasi_ctx_builder.env(\"PYTHONHOME\", \"/build\");</p>\n<div class=\"codehilite\"><pre><span></span><code>let wasi_ctx = (&amp;mut wasi_ctx_builder)\n    .inherit_stdio()\n    .args(&amp;argv)\n    .build_p1();\n</code></pre></div>\n\n<p>`</p>\n<h3>Steps to Reproduce</h3>\n<p>To reproduce:</p>\n<ol>\n<li>git clone <a href=\"https://github.com/dragonulq/github-rust-issue.git\">https://github.com/dragonulq/github-rust-issue.git</a> .</li>\n<li>cd inside it.</li>\n<li>Run <code>cargo run ./wasm32-wasip1/python.wasm</code>.</li>\n</ol>\n<h3>Expected Results</h3>\n<p>I would expect to see the normal \"&gt;&gt;&gt;\" prompt that python gives. This happens when run with CLI Wasmtime from the <a href=\"http://python.sh\">python.sh</a> script.</p>\n<h3>Actual Results</h3>\n<p>Actual result is `Fatal Python error: Failed to import encodings module<br>\nPython runtime state: core initialized<br>\nException ignored in the internal traceback machinery:<br>\nModuleNotFoundError: No module named 'traceback'<br>\nModuleNotFoundError: No module named 'encodings'</p>\n<p>Current thread 0x012f860c (most recent call first):<br>\n  &lt;no Python frame&gt;<br>\n`</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 32.0.0</p>\n<p>Operating system: macOS Sequoia 15.5 </p>\n<p>Architecture: ARM64</p>\n<h3>Extra Info</h3>\n</blockquote>",
        "id": 522664947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749155390
    },
    {
        "content": "<p><a href=\"https://github.com/dragonulq\">dragonulq</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10936\">Issue #10936</a>.</p>",
        "id": 522664948,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749155390
    },
    {
        "content": "<p>dragonulq edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10936\">issue #10936</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The full code along with CPython.wasm and all its dependencies is available at this repo: <a href=\"https://github.com/dragonulq/github-rust-issue\">https://github.com/dragonulq/github-rust-issue</a> . I made a repository because CPython.wasm was too large to upload here and it is also easier to reproduce with all the files already there.</p>\n<p>CPython.wasm can be run from the CLI, inside the directory with the ./python.sh script. You need to have the $WASMTIME_HOME variable set. This setup is without errors.</p>\n<p>My Rust app has the usual boilerplate code to compile and instantiate a module. It can run other WASM modules but not CPython, which makes me think it has something to do with how I am setting up the environment for CPython, as it needs to enter other directories in order to run, like Lib. These are the relevant lines that do the setup: </p>\n<p>`wasi_ctx_builder.preopened_dir(host_path, \"/\", DirPerms::all(), FilePerms::all())?;<br>\n    wasi_ctx_builder.env(\"PYTHONPATH\", \"/build/lib.wasi-wasm32-3.15\");<br>\n    wasi_ctx_builder.env(\"PYTHONHOME\", \"/build\");</p>\n<div class=\"codehilite\"><pre><span></span><code>let wasi_ctx = (&amp;mut wasi_ctx_builder)\n    .inherit_stdio()\n    .args(&amp;argv)\n    .build_p1();\n</code></pre></div>\n\n<p>`</p>\n<h3>Steps to Reproduce</h3>\n<p>To reproduce:</p>\n<ol>\n<li>git clone <a href=\"https://github.com/dragonulq/github-rust-issue.git\">https://github.com/dragonulq/github-rust-issue.git</a> .</li>\n<li>cd inside it.</li>\n<li>Run <code>cargo run ./wasm32-wasip1/python.wasm</code>.</li>\n</ol>\n<h3>Expected Results</h3>\n<p>I would expect to see the normal \"&gt;&gt;&gt;\" prompt that python gives. This happens when run with CLI Wasmtime from the <a href=\"http://python.sh\">python.sh</a> script.</p>\n<h3>Actual Results</h3>\n<p>Actual result is `Fatal Python error: Failed to import encodings module<br>\nPython runtime state: core initialized<br>\nException ignored in the internal traceback machinery:<br>\nModuleNotFoundError: No module named 'traceback'<br>\nModuleNotFoundError: No module named 'encodings'</p>\n<p>Current thread 0x012f860c (most recent call first):<br>\n  &lt;no Python frame&gt;<br>\n`</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 32.0.0</p>\n<p>Operating system: macOS Sequoia 15.5 </p>\n<p>Architecture: ARM64</p>\n<h3>Extra Info</h3>\n</blockquote>",
        "id": 522665014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749155416
    },
    {
        "content": "<p>dragonulq edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10936\">issue #10936</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The full code along with CPython.wasm and all its dependencies is available at this repo: <a href=\"https://github.com/dragonulq/github-rust-issue\">https://github.com/dragonulq/github-rust-issue</a> . I made a repository because CPython.wasm was too large to upload here and it is also easier to reproduce with all the files already there.</p>\n<p>CPython.wasm can be run from the CLI, inside the directory with the ./python.sh script. You need to have the $WASMTIME_HOME variable set. This setup is without errors.</p>\n<p>My Rust app has the usual boilerplate code to compile and instantiate a module. It can run other WASM modules but not CPython, which makes me think it has something to do with how I am setting up the environment for CPython, as it needs to enter other directories in order to run, like Lib. These are the relevant lines that do the setup: </p>\n<p>`wasi_ctx_builder.preopened_dir(host_path, \"/\", DirPerms::all(), FilePerms::all())?;<br>\n    wasi_ctx_builder.env(\"PYTHONPATH\", \"/build/lib.wasi-wasm32-3.15\");<br>\n    wasi_ctx_builder.env(\"PYTHONHOME\", \"/build\");</p>\n<div class=\"codehilite\"><pre><span></span><code>let wasi_ctx = (&amp;mut wasi_ctx_builder)\n    .inherit_stdio()\n    .args(&amp;argv)\n    .build_p1();`\n</code></pre></div>\n\n<h3>Steps to Reproduce</h3>\n<p>To reproduce:</p>\n<ol>\n<li>git clone <a href=\"https://github.com/dragonulq/github-rust-issue.git\">https://github.com/dragonulq/github-rust-issue.git</a> .</li>\n<li>cd inside it.</li>\n<li>Run <code>cargo run ./wasm32-wasip1/python.wasm</code>.</li>\n</ol>\n<h3>Expected Results</h3>\n<p>I would expect to see the normal \"&gt;&gt;&gt;\" prompt that python gives. This happens when run with CLI Wasmtime from the <a href=\"http://python.sh\">python.sh</a> script.</p>\n<h3>Actual Results</h3>\n<p>Actual result is `Fatal Python error: Failed to import encodings module<br>\nPython runtime state: core initialized<br>\nException ignored in the internal traceback machinery:<br>\nModuleNotFoundError: No module named 'traceback'<br>\nModuleNotFoundError: No module named 'encodings'</p>\n<p>Current thread 0x012f860c (most recent call first):<br>\n  &lt;no Python frame&gt;<br>\n`</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 32.0.0</p>\n<p>Operating system: macOS Sequoia 15.5 </p>\n<p>Architecture: ARM64</p>\n<h3>Extra Info</h3>\n</blockquote>",
        "id": 522665302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749155543
    },
    {
        "content": "<p>dragonulq edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10936\">issue #10936</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The full code along with CPython.wasm and all its dependencies is available at this repo: <a href=\"https://github.com/dragonulq/github-rust-issue\">https://github.com/dragonulq/github-rust-issue</a> . I made a repository because CPython.wasm was too large to upload here and it is also easier to reproduce with all the files already there.</p>\n<p>CPython.wasm can be run from the CLI, inside the directory with the ./python.sh script. You need to have the $WASMTIME_HOME variable set. This setup is without errors.</p>\n<p>My Rust app has the usual boilerplate code to compile and instantiate a module. It can run other WASM modules but not CPython. I am pretty sure the way I am setting the environment ( as it needs to enter other directories in order to run, like Lib) for CPython is correct, so this makes me think the only cause for not being able to run is a problem with Wasmtime. These are the relevant lines that do the setup: </p>\n<p>`wasi_ctx_builder.preopened_dir(host_path, \"/\", DirPerms::all(), FilePerms::all())?;<br>\n    wasi_ctx_builder.env(\"PYTHONPATH\", \"/build/lib.wasi-wasm32-3.15\");<br>\n    wasi_ctx_builder.env(\"PYTHONHOME\", \"/build\");</p>\n<div class=\"codehilite\"><pre><span></span><code>let wasi_ctx = (&amp;mut wasi_ctx_builder)\n    .inherit_stdio()\n    .args(&amp;argv)\n    .build_p1();`\n</code></pre></div>\n\n<h3>Steps to Reproduce</h3>\n<p>To reproduce:</p>\n<ol>\n<li>git clone <a href=\"https://github.com/dragonulq/github-rust-issue.git\">https://github.com/dragonulq/github-rust-issue.git</a> .</li>\n<li>cd inside it.</li>\n<li>Run <code>cargo run ./wasm32-wasip1/python.wasm</code>.</li>\n</ol>\n<h3>Expected Results</h3>\n<p>I would expect to see the normal \"&gt;&gt;&gt;\" prompt that python gives. This happens when run with CLI Wasmtime from the <a href=\"http://python.sh\">python.sh</a> script.</p>\n<h3>Actual Results</h3>\n<p>Actual result is `Fatal Python error: Failed to import encodings module<br>\nPython runtime state: core initialized<br>\nException ignored in the internal traceback machinery:<br>\nModuleNotFoundError: No module named 'traceback'<br>\nModuleNotFoundError: No module named 'encodings'</p>\n<p>Current thread 0x012f860c (most recent call first):<br>\n  &lt;no Python frame&gt;<br>\n`</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 32.0.0</p>\n<p>Operating system: macOS Sequoia 15.5 </p>\n<p>Architecture: ARM64</p>\n<h3>Extra Info</h3>\n</blockquote>",
        "id": 522680165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749164263
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10936#issuecomment-2947019044\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10936\">issue #10936</a>:</p>\n<blockquote>\n<p>I'm not an expert in Python but it looks to me like its internal search for modules is failing, which I expect comes down to some combination of the filesystem and environment variables available to it. I'm quite skeptical the problem is in wasmtime because the wasmtime-cli really does not do anything special, and I've never seen a bug that happened in a custom embedding and not the cli that turned out to be in wasmtime itself.</p>\n<p>Before investigating this as a Wasmtime issue I'd suggest doing more work to verify that the filesystem and preopens in your own wasmtime embedding are precisely what works under wasmtime-cli, for example you could instrument your own build of wasmtime-cli to debug print exactly what gets passed to WasiCtxBuilder::preopened_dir and env, as well as in your own.</p>\n</blockquote>",
        "id": 522684193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749167428
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10936#issuecomment-2949723716\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10936\">issue #10936</a>:</p>\n<blockquote>\n<p>@dragonulq As @pchickey suggests, you env vars aren't quite right.  I tweaked things a bit and this works, though you'll want to probably dig into things further to sort out what bits should be derived from PYTHONHOME, etc.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/wasm_launcher_issue.rs b/wasm_launcher_issue.rs</span>\n<span class=\"gh\">index 4171eff..0f9b64d 100644</span>\n<span class=\"gd\">--- a/wasm_launcher_issue.rs</span>\n<span class=\"gi\">+++ b/wasm_launcher_issue.rs</span>\n<span class=\"gu\">@@ -72,8 +72,8 @@ fn main() -&gt; Result&lt;()&gt; {</span>\n<span class=\"w\"> </span>    let host_path = cwd.join(\"wasm32-wasip1\");\n\n<span class=\"w\"> </span>    wasi_ctx_builder.preopened_dir(host_path, \"/\", DirPerms::all(), FilePerms::all())?;\n<span class=\"gd\">-    wasi_ctx_builder.env(\"PYTHONPATH\", \"/build/lib.wasi-wasm32-3.15\");</span>\n<span class=\"gd\">-    wasi_ctx_builder.env(\"PYTHONHOME\", \"/build\");</span>\n<span class=\"gi\">+    wasi_ctx_builder.env(\"PYTHONPATH\", \"/build/lib.wasi-wasm32-3.15:/Lib\");</span>\n<span class=\"gi\">+    wasi_ctx_builder.env(\"PYTHONHOME\", \"/\");</span>\n\n<span class=\"w\"> </span>    let wasi_ctx = (&amp;mut wasi_ctx_builder)\n<span class=\"w\"> </span>        .inherit_stdio()\n</code></pre></div>\n<p>Which gets me to this point:</p>\n<p><div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.44s</span>\n<span class=\"go\">     Running `target/debug/wasm-launcher ./wasm32-wasip1/python.wasm`</span>\n<span class=\"go\">Python 3.15.0a0 (heads/main-dirty:8865b4f95b3, May 30 2025, 18:37:29) [Clang 20.1.1-wasi-sdk (https://github.com/llvm/llvm-project 424c2d9b7e4de40d080 on wasi</span>\n<span class=\"go\">Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.</span>\n<span class=\"go\">warning: can't use pyrepl: No module named '_ctypes'</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 522805407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749225285
    },
    {
        "content": "<p>pchickey closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10936\">issue #10936</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The full code along with CPython.wasm and all its dependencies is available at this repo: <a href=\"https://github.com/dragonulq/github-rust-issue\">https://github.com/dragonulq/github-rust-issue</a> . I made a repository because CPython.wasm was too large to upload here and it is also easier to reproduce with all the files already there.</p>\n<p>CPython.wasm can be run from the CLI, inside the directory with the ./python.sh script. You need to have the $WASMTIME_HOME variable set. This setup is without errors.</p>\n<p>My Rust app has the usual boilerplate code to compile and instantiate a module. It can run other WASM modules but not CPython. I am pretty sure the way I am setting the environment ( as it needs to enter other directories in order to run, like Lib) for CPython is correct, so this makes me think the only cause for not being able to run is a problem with Wasmtime. These are the relevant lines that do the setup: </p>\n<p>`wasi_ctx_builder.preopened_dir(host_path, \"/\", DirPerms::all(), FilePerms::all())?;<br>\n    wasi_ctx_builder.env(\"PYTHONPATH\", \"/build/lib.wasi-wasm32-3.15\");<br>\n    wasi_ctx_builder.env(\"PYTHONHOME\", \"/build\");</p>\n<div class=\"codehilite\"><pre><span></span><code>let wasi_ctx = (&amp;mut wasi_ctx_builder)\n    .inherit_stdio()\n    .args(&amp;argv)\n    .build_p1();`\n</code></pre></div>\n\n<h3>Steps to Reproduce</h3>\n<p>To reproduce:</p>\n<ol>\n<li>git clone <a href=\"https://github.com/dragonulq/github-rust-issue.git\">https://github.com/dragonulq/github-rust-issue.git</a> .</li>\n<li>cd inside it.</li>\n<li>Run <code>cargo run ./wasm32-wasip1/python.wasm</code>.</li>\n</ol>\n<h3>Expected Results</h3>\n<p>I would expect to see the normal \"&gt;&gt;&gt;\" prompt that python gives. This happens when run with CLI Wasmtime from the <a href=\"http://python.sh\">python.sh</a> script.</p>\n<h3>Actual Results</h3>\n<p>Actual result is `Fatal Python error: Failed to import encodings module<br>\nPython runtime state: core initialized<br>\nException ignored in the internal traceback machinery:<br>\nModuleNotFoundError: No module named 'traceback'<br>\nModuleNotFoundError: No module named 'encodings'</p>\n<p>Current thread 0x012f860c (most recent call first):<br>\n  &lt;no Python frame&gt;<br>\n`</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 32.0.0</p>\n<p>Operating system: macOS Sequoia 15.5 </p>\n<p>Architecture: ARM64</p>\n<h3>Extra Info</h3>\n</blockquote>",
        "id": 522818050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749229873
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10936#issuecomment-2949910941\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10936\">issue #10936</a>:</p>\n<blockquote>\n<p>Thanks Paul!</p>\n</blockquote>",
        "id": 522818052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749229874
    },
    {
        "content": "<p>dragonulq <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10936#issuecomment-2950088425\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10936\">issue #10936</a>:</p>\n<blockquote>\n<p>Thank you! I wouldn't have thought of that.</p>\n</blockquote>",
        "id": 522828088,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749234264
    }
]