[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629\">PR #10629</a> from <code>abrown:asm-fixed</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This change introduces a new <code>Fixed</code> wrapper type that allows us to plumb fixed registers through the assembler. These instructions are not yet used by <code>cranelift-codegen</code>, but will be necessary at some point as described in [#10238]. The end result of this is that up at the <code>cranelift-codegen</code> level, fixed registers should look like run-of-the-mill virtual registers using the appropriate types, but down in <code>cranelift-assembler-x64</code> we panic if the register allocator does not give them the correct register.</p>\n<p>[#10238]: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10238\">https://github.com/bytecodealliance/wasmtime/issues/10238</a></p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 513482255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745276356
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629\">PR #10629</a>.</p>",
        "id": 513482256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745276356
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629\">PR #10629</a>.</p>",
        "id": 513482257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745276356
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629\">PR #10629</a>.</p>",
        "id": 513483905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745277345
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629#pullrequestreview-2782402950\">PR review</a>:</p>\n<blockquote>\n<p>Looks good, thanks! Just some nits below.</p>\n</blockquote>",
        "id": 513484620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745277857
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629#discussion_r2053098683\">PR review comment</a>:</p>\n<blockquote>\n<p>Is there a reason (e.g. generic interface somewhere else) that we need to accept <code>reg</code> here as an argument, rather than just using the generic parameter <code>E</code> -- since there is only one valid value to pass in?</p>\n</blockquote>",
        "id": 513484621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745277857
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629#discussion_r2053100499\">PR review comment</a>:</p>\n<blockquote>\n<p>Nice! This is presumably because a reg that we carried as a (always the same value) <code>u32</code> previously now becomes a type parameter? Good to see reductions in any case.</p>\n</blockquote>",
        "id": 513484622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745277857
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629#discussion_r2053099740\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, I see below, this enables the idiom <code>Fixed(rax)</code> for example, where type inference carries <code>reg</code> through to the generic parameter.</p>\n<p>Maybe there could be two entry points, <code>new()</code> and <code>from_const_reg(reg: u8)</code> or similar? Maybe not a huge deal; just trying to reduce confusing APIs.</p>\n</blockquote>",
        "id": 513484623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745277857
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629#pullrequestreview-2782459867\">PR review</a>.</p>",
        "id": 513489822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745281139
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629#discussion_r2053138623\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think we need a different entry point and, in fact, I've been trying to remove this <code>AsReg::new</code> somehow. It's only during fuzzing that we need the ability to construct an <code>AsReg</code>. I just can't seem to pull the right Jenga blocks out to get rid of this without things falling down.</p>\n</blockquote>",
        "id": 513489823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745281140
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629#pullrequestreview-2782463855\">PR review</a>.</p>",
        "id": 513490282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745281446
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629#discussion_r2053141631\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, I see -- a few thoughts then:</p>\n<ul>\n<li>At the very least, <code>pub(crate) fn new(...)</code> so it's only exposed to where fuzzing needs it (the <code>Arbitrary</code> impl);</li>\n<li>Perhaps removing the field (so it's a zero-sized struct, carrying <code>E</code> only at the type level); you still have <code>E</code> for <code>enc()</code> to work; the only part I'm not as clear on is where <code>AsRef</code> comes in and why you need a reference (vs. constructing an <code>R</code> on-the-fly as needed, as e.g. <code>fn to_reg(&amp;self) -&gt; R { R::new(E) }</code> or something like that)</li>\n</ul>\n</blockquote>",
        "id": 513490284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745281447
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629\">PR #10629</a>.</p>",
        "id": 513492325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745282835
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629#pullrequestreview-2782504981\">PR review</a>.</p>",
        "id": 513494875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745284473
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629#discussion_r2053169823\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>At the very least, <code>pub(crate) fn new(...)</code> so it's only exposed to where fuzzing needs it (the <code>Arbitrary</code> impl);</li>\n</ul>\n</blockquote>\n<p>What I meant is that I want to remove the trait function <code>AsReg::new</code>--we can't make trait functions <code>pub(crate)</code>, right?</p>\n<blockquote>\n<ul>\n<li>Perhaps removing the field (so it's a zero-sized struct, carrying <code>E</code> only at the type level); you still have <code>E</code> for <code>enc()</code> to work; the only part I'm not as clear on is where <code>AsRef</code> comes in and why you need a reference (vs. constructing an <code>R</code> on-the-fly as needed, as e.g. <code>fn to_reg(&amp;self) -&gt; R { R::new(E) }</code> or something like that)</li>\n</ul>\n</blockquote>\n<p>I believe we still need the field because we need a place for the virtual register to live until register allocation happens.</p>\n</blockquote>",
        "id": 513494876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745284474
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629#pullrequestreview-2782636399\">PR review</a>.</p>",
        "id": 513504273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745290477
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10629#discussion_r2053250247\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh, d'oh, I had missed that <code>new</code> was part of the trait definition too, sorry! And you're of course right that we need an actual vreg too.</p>\n</blockquote>",
        "id": 513504274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745290477
    }
]