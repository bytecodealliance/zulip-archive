[
    {
        "content": "<p>bongjunj opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10978\">PR #10978</a> from <code>bongjunj:udiv-select</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;<br>\nThis adds the following optimization:</p>\n<p><code>(udiv (select c A B)) =&gt; (ushr (select c log2(A) log2(B))</code></p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;proof.isle &lt;/summary&gt;</p>\n<p><div class=\"codehilite\" data-code-language=\"isle\"><pre><span></span><code>(rule\n  (simplify_skeleton (udiv y\n                       (select ty\n                         x\n                         (iconst ty (imm64_power_of_two n))\n                         (iconst ty (imm64_power_of_two m)))))\n  (ushr ty y (select ty x (iconst ty (imm64 n)) (iconst ty (imm64 m)))))\n\n(form\n  bv_unary_8_to_64\n  ((args (bv  8)) (ret (bv  8)) (canon (bv  8)))\n  ((args (bv 16)) (ret (bv 16)) (canon (bv 16)))\n  ((args (bv 32)) (ret (bv 32)) (canon (bv 32)))\n  ((args (bv 64)) (ret (bv 64)) (canon (bv 64)))\n)\n\n(form\n  bv_binary_8_to_64\n  ((args (bv  8) (bv  8)) (ret (bv  8)) (canon (bv  8)))\n  ((args (bv 16) (bv 16)) (ret (bv 16)) (canon (bv 16)))\n  ((args (bv 32) (bv 32)) (ret (bv 32)) (canon (bv 32)))\n  ((args (bv 64) (bv 64)) (ret (bv 64)) (canon (bv 64)))\n)\n\n(form\n  bv_ternary_8_to_64\n  ((args (bv  8) (bv  8) (bv  8)) (ret (bv  8)) (canon (bv  8)))\n  ((args (bv 16) (bv 16) (bv 16)) (ret (bv 16)) (canon (bv 16)))\n  ((args (bv 32) (bv 32) (bv 32)) (ret (bv 32)) (canon (bv 32)))\n  ((args (bv 64) (bv 64) (bv 64)) (ret (bv 64)) (canon (bv 64)))\n)\n\n\n(form\n  bv_ty_unary_8_to_64\n  ((args Int (bv  8)) (ret (bv  8)) (canon (bv  8)))\n  ((args Int (bv 16)) (ret (bv 16)) (canon (bv 16)))\n  ((args Int (bv 32)) (ret (bv 32)) (canon (bv 32)))\n  ((args Int (bv 64)) (ret (bv 64)) (canon (bv 64)))\n)\n\n(form\n  bv_ty_binary_8_to_64\n  ((args Int (bv  8) (bv  8)) (ret (bv  8)) (canon (bv  8)))\n  ((args Int (bv 16) (bv 16)) (ret (bv 16)) (canon (bv 16)))\n  ((args Int (bv 32) (bv 32)) (ret (bv 32)) (canon (bv 32)))\n  ((args Int (bv 64) (bv 64)) (ret (bv 64)) (canon (bv 64)))\n)\n\n(form\n  bv_ty_ternary_8_to_64\n  ((args Int (bv  8) (bv  8) (bv  8)) (ret (bv  8)) (canon (bv  8)))\n  ((args Int (bv 16) (bv 16) (bv 16)) (ret (bv 16)) (canon (bv 16)))\n  ((args Int (bv 32) (bv 32) (bv 32)) (ret (bv 32)) (canon (bv 32)))\n  ((args Int (bv 64) (bv 64) (bv 64)) (ret (bv 64)) (canon (bv 64)))\n)\n\n(type Type (primitive Type))\n(type Value (primitive Value))\n(type Imm64 (primitive Imm64))\n(type Inst (primitive Inst))\n(type SkeletonInstSimplification (primitive SkeletonInstSimplification))\n(type IntCC extern\n    (enum\n        Equal\n        NotEqual\n        SignedGreaterThan\n        SignedGreaterThanOrEqual\n        SignedLessThan\n        SignedLessThanOrEqual\n        UnsignedGreaterThan\n        UnsignedGreaterThanOrEqual\n        UnsignedLessThan\n        UnsignedLessThanOrEqual))\n\n(model IntCC (enum\n    (Equal #x00)\n    (NotEqual #x01)\n    (SignedGreaterThan #x02)\n    (SignedGreaterThanOrEqual #x03)\n    (SignedLessThan #x04)\n    (SignedLessThanOrEqual #x05)\n    (UnsignedGreaterThan #x06)\n    (UnsignedGreaterThanOrEqual #x07)\n    (UnsignedLessThan #x08)\n    (UnsignedLessThanOrEqual #x09)))\n\n\n(spec (bor ty x y)\n    (provide (= (bvor x y) result))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl bor (Type Value Value) Value)\n(extern extractor bor bor)\n(extern constructor bor bor)\n(instantiate bor bv_ty_binary_8_to_64)\n\n(spec (band ty x y)\n    (provide (= (bvand x y) result))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl band (Type Value Value) Value)\n(extern extractor band band)\n(extern constructor band band)\n(instantiate band bv_ty_binary_8_to_64)\n\n(spec (bxor ty x y)\n    (provide (= (bvxor x y) result))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl bxor (Type Value Value) Value)\n(extern extractor bxor bxor)\n(extern constructor bxor bxor)\n(instantiate bxor bv_ty_binary_8_to_64)\n\n(spec (sshr ty x y)\n    (provide\n        (= result\n           (bvashr x\n                  (bvand (conv_to (widthof y) (bvsub (int2bv 64 (widthof y))\n                                                     #x0000000000000001))\n                         y))))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl sshr (Type Value Value) Value)\n(extern extractor sshr sshr)\n(extern constructor sshr sshr)\n(instantiate sshr bv_ty_binary_8_to_64)\n\n(spec (ushr ty x y)\n    (provide\n        (= result\n           (bvlshr x\n                  (bvand (conv_to (widthof y) (bvsub (int2bv 64 (widthof y))\n                                                     #x0000000000000001))\n                         y))))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl ushr (Type Value Value) Value)\n(extern extractor ushr ushr)\n(extern constructor ushr ushr)\n(instantiate ushr bv_ty_binary_8_to_64)\n\n(spec (iadd ty x y)\n    (provide (= result (bvadd x y)))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl iadd (Type Value Value) Value)\n(extern extractor iadd iadd)\n(extern constructor iadd iadd)\n(instantiate iadd bv_ty_binary_8_to_64)\n\n(spec (isub ty x y)\n    (provide (= result (bvsub x y)))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl isub (Type Value Value) Value)\n(extern extractor isub isub)\n(extern constructor isub isub)\n(instantiate isub bv_ty_binary_8_to_64)\n\n(spec (imul ty x y)\n    (provide (= result (bvmul x y)))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl imul (Type Value Value) Value)\n(extern extractor imul imul)\n(extern constructor imul imul)\n(instantiate imul bv_ty_binary_8_to_64)\n\n(spec (iabs ty x)\n    (provide (= result\n                (if (bvsge x (conv_to (widthof x) #x0000000000000000))\n                    x\n                    (bvneg x))))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x))))\n(decl iabs (Type Value) Value)\n(extern extractor iabs iabs)\n(extern constructor iabs iabs)\n(instantiate iabs bv_ty_unary_8_to_64)\n\n\n; s &amp;:= y \\pmod B,\n; a &amp;:= x \\cdot 2^s \\pmod{2^B}.\n(spec (ishl ty x y)\n    (provide\n        (= result\n           (bvshl x\n                  (bvand (conv_to (widthof y) (bvsub (int2bv 64 (widthof y))\n                                                     #x0000000000000001))\n                         y))))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl ishl (Type Value Value) Value)\n(extern extractor ishl ishl)\n(extern constructor ishl ishl)\n(instantiate ishl bv_ty_binary_8_to_64)\n\n(spec (select ty c x y)\n    (provide (= result (if (= c #x00) y x)))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl select (Type Value Value Value) Value)\n(extern extractor select select)\n(extern constructor select select)\n(instantiate select bv_ty_ternary_8_to_64)\n\n(spec (icmp ty cc x y)\n    (provide\n        (= result\n            (switch cc\n                ((IntCC.Equal)                        (if (= x y)       #x01 #x00))\n                ((IntCC.NotEqual)                     (if (not (= x y)) #x01 #x00))\n                ((IntCC.SignedGreaterThan)            (if (bvsgt x y)   #x01 #x00))\n                ((IntCC.SignedGreaterThanOrEqual)     (if (bvsge x y)   #x01 #x00))\n                ((IntCC.SignedLessThan)               (if (bvslt x y)   #x01 #x00))\n                ((IntCC.SignedLessThanOrEqual)        (if (bvsle x y)   #x01 #x00))\n                ((IntCC.UnsignedGreaterThan)          (if (bvugt x y)   #x01 #x00))\n                ((IntCC.UnsignedGreaterThanOrEqual)   (if (bvuge x y)   #x01 #x00))\n                ((IntCC.UnsignedLessThan)             (if (bvult x y)   #x01 #x00))\n                ((IntCC.UnsignedLessThanOrEqual)      (if (bvule x y)   #x01 #x00)))))\n    (require\n        (= ty 8)\n        (or (= 8 (widthof x)) (= 16 (widthof x)) (= 32 (widthof x)) (= 64 (widthof x)))\n        (or\n            (= cc (IntCC.Equal))\n            (= cc (IntCC.NotEqual))\n            (= cc (IntCC.UnsignedGreaterThanOrEqual))\n            (= cc (IntCC.UnsignedGreaterThan))\n            (= cc (IntCC.UnsignedLessThanOrEqual))\n            (= cc (IntCC.UnsignedLessThan))\n            (= cc (IntCC.SignedGreaterThanOrEqual))\n            (= cc (IntCC.SignedGreaterThan))\n            (= cc (IntCC.SignedLessThanOrEqual))\n            (= cc (IntCC.SignedLessThan)))))\n\n(decl icmp (Type IntCC Value Value) Value)\n(extern extractor icmp icmp)\n(extern constructor icmp icmp)\n(instantiate icmp\n  ((args Int (bv 8) (bv 8) (bv 8)) (ret (bv 8)) (canon (bv 8)))\n  ((args Int (bv 8) (bv 16) (bv 16)) (ret (bv 8)) (canon (bv 16)))\n  ((args Int (bv 8) (bv 32) (bv 32)) (ret (bv 8)) (canon (bv 32)))\n  ((args Int (bv 8) (bv 64) (bv 64)) (ret (bv 8)) (canon (bv 64)))\n)\n\n(spec (iconst ty arg)\n    (provide (= arg (zero_ext ty result)))\n    (\n[message truncated]\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 522939293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749362605
    },
    {
        "content": "<p><strong>bongjunj</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10978\">PR #10978</a>.</p>",
        "id": 522939294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749362605
    },
    {
        "content": "<p><strong>bongjunj</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10978\">PR #10978</a>.</p>",
        "id": 522939295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749362606
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10978#issuecomment-2953687387\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10978\">PR #10978</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 522950964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749368688
    },
    {
        "content": "<p>bongjunj edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10978\">PR #10978</a>:</p>\n<blockquote>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;<br>\nThis adds the following optimization:</p>\n<p><code>(udiv (select c A B)) =&gt; (ushr (select c log2(A) log2(B))</code></p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;proof.isle &lt;/summary&gt;</p>\n<p><div class=\"codehilite\" data-code-language=\"isle\"><pre><span></span><code>(rule\n  (simplify_skeleton (udiv y\n                       (select ty\n                         x\n                         (iconst ty (imm64_power_of_two n))\n                         (iconst ty (imm64_power_of_two m)))))\n  (ushr ty y (select ty x (iconst ty (imm64 n)) (iconst ty (imm64 m)))))\n\n(form\n  bv_unary_8_to_64\n  ((args (bv  8)) (ret (bv  8)) (canon (bv  8)))\n  ((args (bv 16)) (ret (bv 16)) (canon (bv 16)))\n  ((args (bv 32)) (ret (bv 32)) (canon (bv 32)))\n  ((args (bv 64)) (ret (bv 64)) (canon (bv 64)))\n)\n\n(form\n  bv_binary_8_to_64\n  ((args (bv  8) (bv  8)) (ret (bv  8)) (canon (bv  8)))\n  ((args (bv 16) (bv 16)) (ret (bv 16)) (canon (bv 16)))\n  ((args (bv 32) (bv 32)) (ret (bv 32)) (canon (bv 32)))\n  ((args (bv 64) (bv 64)) (ret (bv 64)) (canon (bv 64)))\n)\n\n(form\n  bv_ternary_8_to_64\n  ((args (bv  8) (bv  8) (bv  8)) (ret (bv  8)) (canon (bv  8)))\n  ((args (bv 16) (bv 16) (bv 16)) (ret (bv 16)) (canon (bv 16)))\n  ((args (bv 32) (bv 32) (bv 32)) (ret (bv 32)) (canon (bv 32)))\n  ((args (bv 64) (bv 64) (bv 64)) (ret (bv 64)) (canon (bv 64)))\n)\n\n\n(form\n  bv_ty_unary_8_to_64\n  ((args Int (bv  8)) (ret (bv  8)) (canon (bv  8)))\n  ((args Int (bv 16)) (ret (bv 16)) (canon (bv 16)))\n  ((args Int (bv 32)) (ret (bv 32)) (canon (bv 32)))\n  ((args Int (bv 64)) (ret (bv 64)) (canon (bv 64)))\n)\n\n(form\n  bv_ty_binary_8_to_64\n  ((args Int (bv  8) (bv  8)) (ret (bv  8)) (canon (bv  8)))\n  ((args Int (bv 16) (bv 16)) (ret (bv 16)) (canon (bv 16)))\n  ((args Int (bv 32) (bv 32)) (ret (bv 32)) (canon (bv 32)))\n  ((args Int (bv 64) (bv 64)) (ret (bv 64)) (canon (bv 64)))\n)\n\n(form\n  bv_ty_ternary_8_to_64\n  ((args Int (bv  8) (bv  8) (bv  8)) (ret (bv  8)) (canon (bv  8)))\n  ((args Int (bv 16) (bv 16) (bv 16)) (ret (bv 16)) (canon (bv 16)))\n  ((args Int (bv 32) (bv 32) (bv 32)) (ret (bv 32)) (canon (bv 32)))\n  ((args Int (bv 64) (bv 64) (bv 64)) (ret (bv 64)) (canon (bv 64)))\n)\n\n(type Type (primitive Type))\n(type Value (primitive Value))\n(type Imm64 (primitive Imm64))\n(type Inst (primitive Inst))\n(type SkeletonInstSimplification (primitive SkeletonInstSimplification))\n(type IntCC extern\n    (enum\n        Equal\n        NotEqual\n        SignedGreaterThan\n        SignedGreaterThanOrEqual\n        SignedLessThan\n        SignedLessThanOrEqual\n        UnsignedGreaterThan\n        UnsignedGreaterThanOrEqual\n        UnsignedLessThan\n        UnsignedLessThanOrEqual))\n\n(model IntCC (enum\n    (Equal #x00)\n    (NotEqual #x01)\n    (SignedGreaterThan #x02)\n    (SignedGreaterThanOrEqual #x03)\n    (SignedLessThan #x04)\n    (SignedLessThanOrEqual #x05)\n    (UnsignedGreaterThan #x06)\n    (UnsignedGreaterThanOrEqual #x07)\n    (UnsignedLessThan #x08)\n    (UnsignedLessThanOrEqual #x09)))\n\n\n(spec (bor ty x y)\n    (provide (= (bvor x y) result))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl bor (Type Value Value) Value)\n(extern extractor bor bor)\n(extern constructor bor bor)\n(instantiate bor bv_ty_binary_8_to_64)\n\n(spec (band ty x y)\n    (provide (= (bvand x y) result))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl band (Type Value Value) Value)\n(extern extractor band band)\n(extern constructor band band)\n(instantiate band bv_ty_binary_8_to_64)\n\n(spec (bxor ty x y)\n    (provide (= (bvxor x y) result))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl bxor (Type Value Value) Value)\n(extern extractor bxor bxor)\n(extern constructor bxor bxor)\n(instantiate bxor bv_ty_binary_8_to_64)\n\n(spec (sshr ty x y)\n    (provide\n        (= result\n           (bvashr x\n                  (bvand (conv_to (widthof y) (bvsub (int2bv 64 (widthof y))\n                                                     #x0000000000000001))\n                         y))))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl sshr (Type Value Value) Value)\n(extern extractor sshr sshr)\n(extern constructor sshr sshr)\n(instantiate sshr bv_ty_binary_8_to_64)\n\n(spec (ushr ty x y)\n    (provide\n        (= result\n           (bvlshr x\n                  (bvand (conv_to (widthof y) (bvsub (int2bv 64 (widthof y))\n                                                     #x0000000000000001))\n                         y))))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl ushr (Type Value Value) Value)\n(extern extractor ushr ushr)\n(extern constructor ushr ushr)\n(instantiate ushr bv_ty_binary_8_to_64)\n\n(spec (iadd ty x y)\n    (provide (= result (bvadd x y)))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl iadd (Type Value Value) Value)\n(extern extractor iadd iadd)\n(extern constructor iadd iadd)\n(instantiate iadd bv_ty_binary_8_to_64)\n\n(spec (isub ty x y)\n    (provide (= result (bvsub x y)))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl isub (Type Value Value) Value)\n(extern extractor isub isub)\n(extern constructor isub isub)\n(instantiate isub bv_ty_binary_8_to_64)\n\n(spec (imul ty x y)\n    (provide (= result (bvmul x y)))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl imul (Type Value Value) Value)\n(extern extractor imul imul)\n(extern constructor imul imul)\n(instantiate imul bv_ty_binary_8_to_64)\n\n(spec (iabs ty x)\n    (provide (= result\n                (if (bvsge x (conv_to (widthof x) #x0000000000000000))\n                    x\n                    (bvneg x))))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x))))\n(decl iabs (Type Value) Value)\n(extern extractor iabs iabs)\n(extern constructor iabs iabs)\n(instantiate iabs bv_ty_unary_8_to_64)\n\n\n; s &amp;:= y \\pmod B,\n; a &amp;:= x \\cdot 2^s \\pmod{2^B}.\n(spec (ishl ty x y)\n    (provide\n        (= result\n           (bvshl x\n                  (bvand (conv_to (widthof y) (bvsub (int2bv 64 (widthof y))\n                                                     #x0000000000000001))\n                         y))))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl ishl (Type Value Value) Value)\n(extern extractor ishl ishl)\n(extern constructor ishl ishl)\n(instantiate ishl bv_ty_binary_8_to_64)\n\n(spec (select ty c x y)\n    (provide (= result (if (= c #x00) y x)))\n    (require\n        (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n        (= ty (widthof x)) (= ty (widthof y))))\n(decl select (Type Value Value Value) Value)\n(extern extractor select select)\n(extern constructor select select)\n(instantiate select bv_ty_ternary_8_to_64)\n\n(spec (icmp ty cc x y)\n    (provide\n        (= result\n            (switch cc\n                ((IntCC.Equal)                        (if (= x y)       #x01 #x00))\n                ((IntCC.NotEqual)                     (if (not (= x y)) #x01 #x00))\n                ((IntCC.SignedGreaterThan)            (if (bvsgt x y)   #x01 #x00))\n                ((IntCC.SignedGreaterThanOrEqual)     (if (bvsge x y)   #x01 #x00))\n                ((IntCC.SignedLessThan)               (if (bvslt x y)   #x01 #x00))\n                ((IntCC.SignedLessThanOrEqual)        (if (bvsle x y)   #x01 #x00))\n                ((IntCC.UnsignedGreaterThan)          (if (bvugt x y)   #x01 #x00))\n                ((IntCC.UnsignedGreaterThanOrEqual)   (if (bvuge x y)   #x01 #x00))\n                ((IntCC.UnsignedLessThan)             (if (bvult x y)   #x01 #x00))\n                ((IntCC.UnsignedLessThanOrEqual)      (if (bvule x y)   #x01 #x00)))))\n    (require\n        (= ty 8)\n        (or (= 8 (widthof x)) (= 16 (widthof x)) (= 32 (widthof x)) (= 64 (widthof x)))\n        (or\n            (= cc (IntCC.Equal))\n            (= cc (IntCC.NotEqual))\n            (= cc (IntCC.UnsignedGreaterThanOrEqual))\n            (= cc (IntCC.UnsignedGreaterThan))\n            (= cc (IntCC.UnsignedLessThanOrEqual))\n            (= cc (IntCC.UnsignedLessThan))\n            (= cc (IntCC.SignedGreaterThanOrEqual))\n            (= cc (IntCC.SignedGreaterThan))\n            (= cc (IntCC.SignedLessThanOrEqual))\n            (= cc (IntCC.SignedLessThan)))))\n\n(decl icmp (Type IntCC Value Value) Value)\n(extern extractor icmp icmp)\n(extern constructor icmp icmp)\n(instantiate icmp\n  ((args Int (bv 8) (bv 8) (bv 8)) (ret (bv 8)) (canon (bv 8)))\n  ((args Int (bv 8) (bv 16) (bv 16)) (ret (bv 8)) (canon (bv 16)))\n  ((args Int (bv 8) (bv 32) (bv 32)) (ret (bv 8)) (canon (bv 32)))\n  ((args Int (bv 8) (bv 64) (bv 64)) (ret (bv 8)) (canon (bv 64)))\n)\n\n(spec (iconst ty arg)\n    (provide (= arg (zero_ext ty result)))\n    (require (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))\n[message truncated]\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 522954304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749370670
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10978#pullrequestreview-2910289531\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! It looks like we don't currently have rules for divide-by-power-of-two-constant which, if you're interested, might be a good rule to add as well as a follow-up.</p>\n</blockquote>",
        "id": 523106312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749479996
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10978\">PR #10978</a>.</p>",
        "id": 523110366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749481277
    }
]