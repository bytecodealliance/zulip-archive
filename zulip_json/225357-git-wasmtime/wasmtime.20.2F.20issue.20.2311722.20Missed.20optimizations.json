[
    {
        "content": "<p>khagankhan opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11722\">issue #11722</a>:</p>\n<blockquote>\n<p>Hello. I am doing some fun project myself and I would like to know whether you are interested in missed otimizations in cranelift. For example:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Not</span><span class=\"w\"> </span><span class=\"n\">optimized</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">constant</span><span class=\"w\"> </span><span class=\"n\">matching</span><span class=\"w\"> </span><span class=\"n\">execution</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"w\"> </span><span class=\"n\">Dumping</span><span class=\"w\"> </span><span class=\"n\">CLIF</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">tmp1PhnFo</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">--</span><span class=\"n\">function</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">--</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"p\">:</span>\n\n<span class=\"o\">===================</span><span class=\"w\"> </span><span class=\"n\">CLIF</span><span class=\"w\"> </span><span class=\"n\">BEGIN</span><span class=\"w\"> </span><span class=\"o\">===================</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Intermediate</span><span class=\"w\"> </span><span class=\"n\">Representation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">wasm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]::</span><span class=\"n\">function</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]::</span><span class=\"n\">main</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nc\">tail</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span><span class=\"o\">+</span><span class=\"mi\">16</span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">):</span>\n<span class=\"o\">@</span><span class=\"mi\">002</span><span class=\"n\">e</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span><span class=\"p\">:</span>\n<span class=\"o\">@</span><span class=\"mi\">0022</span><span class=\"w\">                               </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">355</span>\n<span class=\"o\">@</span><span class=\"mi\">0025</span><span class=\"w\">                               </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">20</span>\n<span class=\"o\">@</span><span class=\"mi\">0027</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rotl</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">355</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">20</span>\n<span class=\"o\">@</span><span class=\"mi\">0028</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">9828254</span>\n<span class=\"o\">@</span><span class=\"mi\">002</span><span class=\"n\">d</span><span class=\"w\">                               </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bor</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">9828254</span>\n<span class=\"o\">@</span><span class=\"mi\">002</span><span class=\"n\">e</span><span class=\"w\">                               </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">====================</span><span class=\"w\"> </span><span class=\"n\">CLIF</span><span class=\"w\"> </span><span class=\"n\">END</span><span class=\"w\"> </span><span class=\"o\">====================</span>\n<span class=\"n\">khan22</span><span class=\"o\">@</span><span class=\"n\">node0</span><span class=\"p\">:</span><span class=\"o\">~/</span><span class=\"n\">wasmoi</span><span class=\"o\">/</span><span class=\"n\">code_generator</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"p\">(</span><span class=\"n\">module</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"main\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">or</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">rotl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">355</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">9828254</span><span class=\"p\">))))</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 540535451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758317224
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11722#issuecomment-3313963451\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11722\">issue #11722</a>:</p>\n<blockquote>\n<p>It appears we don't have a mid-end rule for constant-propagating rotates (e.g. <code>rotl</code>) in our <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/opts/cprop.isle\">constant-propagation rules</a>; PRs welcome if you want to try your hand at these!</p>\n</blockquote>",
        "id": 540537736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758318978
    },
    {
        "content": "<p>khagankhan <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11722#issuecomment-3313967094\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11722\">issue #11722</a>:</p>\n<blockquote>\n<p>That would be fun! I am building an automated tool to find missed opts. So I think I can find them and also make a PR each time :)</p>\n</blockquote>",
        "id": 540537912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758319116
    }
]