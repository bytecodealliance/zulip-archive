[
    {
        "content": "<p>gaaraw opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296\">issue #11296</a>:</p>\n<blockquote>\n<h3>Describe the bug</h3>\n<p>Hello, I caught the following performance anomalies while using <code>wasmtime</code>. The specific performance is as follows:</p>\n<p>&lt;img width=\"414\" height=\"127\" alt=\"Image\" src=\"<a href=\"https://github.com/user-attachments/assets/b2447f47-b354-431e-97b9-02562124977d\">https://github.com/user-attachments/assets/b2447f47-b354-431e-97b9-02562124977d</a>\" /&gt;</p>\n<p>The data is in seconds, and each data is the result of ten executions and averages.</p>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/user-attachments/files/21366488/test_case.zip\">test_case.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">wasm2wat</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">wat2wasm</span>\n<span class=\"n\">wasm2wat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"n\">wat2wasm</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">Execute</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">collect</span><span class=\"w\"> </span><span class=\"n\">data</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">task</span><span class=\"o\">-</span><span class=\"n\">clock</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">wasmer</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">task</span><span class=\"o\">-</span><span class=\"n\">clock</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">task</span><span class=\"o\">-</span><span class=\"n\">clock</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">wasmedge</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">jit</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">task</span><span class=\"o\">-</span><span class=\"n\">clock</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">build_fast_jit</span><span class=\"o\">/</span><span class=\"n\">iwasm</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">task</span><span class=\"o\">-</span><span class=\"n\">clock</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">build_llvm_jit</span><span class=\"o\">/</span><span class=\"n\">iwasm</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<h3>Expected and actual Results</h3>\n<p><code>test_case.wasm</code> causes large execution time differences between several runtimes, with <code>wasmtime</code> and <code>wasmer</code> being particularly pronounced. The execution time of <code>wasmer</code> is about 5x-6x, and the execution time of <code>wasmtime</code> is about 7x-9x.<br>\nI did an analysis of <code>tase_case.wat</code> and found that when I deleted the code like the following for 50-52 lines, the execution time is as shown in <code>modified.wasm</code>. At this point, the results of each runtime are relatively normal. From this I think the following directives may be causing performance anomalies in both runtime tools.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">          </span><span class=\"p\">(</span><span class=\"nb\">drop</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">grow</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)))</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>The runtime tools are all built on release and use JIT mode.<br>\n<code>Wasmer</code> uses the <code>Cranelift</code> backend, and the execution time of the <code>llvm</code> backend for this test case is basically the same as that of <code>Cranelift</code>.</p>\n<ul>\n<li>wasmer：wasmer 6.0.1</li>\n<li>wasmtime：wasmtime 35.0.0 (9c2e6f17c 2025-06-17)</li>\n<li>wasmedge：version 0.14.1</li>\n<li>WAMR：iwasm 2.4.0</li>\n<li>wabt：1.0.27</li>\n<li>llvm：18.1.8</li>\n<li>Host OS：Ubuntu 22.04.5 LTS x64</li>\n<li>CPU：12th Gen Intel® Core™ i7-12700 × 20</li>\n<li>rustc：rustc 1.87.0 (17067e9ac 2025-05-09)<br>\n        binary: rustc<br>\n        commit-hash: 17067e9ac6d7ecb70e50f92c1944e545188d2359<br>\n        commit-date: 2025-05-09<br>\n        host: x86_64-unknown-linux-gnu<br>\n        release: 1.87.0<br>\n        LLVM version: 20.1.1</li>\n</ul>\n<h3>Extra Info</h3>\n<p>I also submitted an issue about the phenomenon to <code>wasmer</code>.<br>\nIf you need any other relevant information, please let me know and I will do my best to provide it. Looking forward to your reply! Thank you!<br>\n</p>\n</blockquote>",
        "id": 530132579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753186425
    },
    {
        "content": "<p><a href=\"https://github.com/gaaraw\">gaaraw</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296\">Issue #11296</a>.</p>",
        "id": 530132581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753186425
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296#issuecomment-3103558594\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296\">issue #11296</a>:</p>\n<blockquote>\n<p>Can you expand more on what this benchmark is doing? It seems like the time taken is primarily spent in <code>memory.grow</code>, but what is this benchmarking about memory growth? Is this just executing <code>memory.grow</code> in a loop?</p>\n<p>Can you test other engines such as V8 via Node.js? Locally that has about the same runtime as Wasmtime's main branch for me.</p>\n<p>Additionally the return value of <code>memory.grow</code> is being ignored, are you sure this is behaving the same across all runtimes? For example Wasmtime allows growing memory to the 4G limit of 32-bit linear memories by default, but other runtimes may not. I would recommend double-checking that all runtimes are actually doing the same thing before comparing runtimes as otherwise this could be an apples-to-oranges comparison.</p>\n</blockquote>",
        "id": 530176872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753199682
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> removed the bug label from <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296\">Issue #11296</a>.</p>",
        "id": 530176875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753199684
    },
    {
        "content": "<p>gaaraw <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296#issuecomment-3108223548\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296\">issue #11296</a>:</p>\n<blockquote>\n<p>Thanks for your reply！</p>\n<blockquote>\n<p>Can you expand more on what this benchmark is doing? </p>\n</blockquote>\n<p>I'm fuzzing the wasm runtime tools for performance pressure-related, so the program is the result of a mutation. If you want to trace the origin of the program, it comes from the LLVM test suite.</p>\n<blockquote>\n<p>Can you test other engines such as V8 via Node.js?</p>\n</blockquote>\n<p>V8 behaves as follows:</p>\n<p>&lt;img width=\"1089\" height=\"213\" alt=\"Image\" src=\"<a href=\"https://github.com/user-attachments/assets/7a9777c5-b313-4c1c-b1ce-ce9da56971e6\">https://github.com/user-attachments/assets/7a9777c5-b313-4c1c-b1ce-ce9da56971e6</a>\" /&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;run_wasi.js&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">fs</span><span class=\"o\">'</span><span class=\"p\">);</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">path</span><span class=\"o\">'</span><span class=\"p\">);</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">node</span><span class=\"p\">:</span><span class=\"nc\">wasi</span><span class=\"o\">'</span><span class=\"p\">);</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">argv</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"p\">({</span>\n<span class=\"w\">  </span><span class=\"n\">version</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">preview1</span><span class=\"o\">'</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">args</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">argv</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">env</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">preopens</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"sc\">'/'</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"p\">.</span><span class=\"o\">/'</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">wasmPath</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">__dirname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">test_case</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">'</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">wasmBuffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"p\">.</span><span class=\"n\">readFileSync</span><span class=\"p\">(</span><span class=\"n\">wasmPath</span><span class=\"p\">);</span>\n\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">wasmBuffer</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasi</span><span class=\"p\">.</span><span class=\"n\">wasiImport</span>\n<span class=\"w\">  </span><span class=\"p\">});</span>\n\n<span class=\"w\">  </span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">);</span>\n<span class=\"p\">})();</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<blockquote>\n<p>Additionally the return value of memory.grow is being ignored, are you sure this is behaving the same across all runtimes?</p>\n</blockquote>\n<p>I analyzed the program further and found that it didn't seem to be related to the memory limits of the individual runtime tools. I set the maximum number of pages in memory of wasmedge to 65536 using the command line parameter <code>--memory-page-limit</code>, and the result did not change.</p>\n<p>Analysis <code>test_case.wat</code> showed that the local variable decreased by 0. When it is equal to 64, it will exit the loop. (The source program did not initialize 0, I set address 1056 to 0 during the analysis, so that the local variable 0 was initialized to 0. Does not affect the results.) So the cycle was done about 2&lt;sup&gt;32&lt;/sup&gt; times. In fact, from the second <code>memory.grow</code> onwards, the grow command will not succeed, because I only increase the maximum value of memory by 1. <code>(memory (; 0; ) 258 259)</code>.</p>\n<p>In summary, the next pressure on the runtime tools are to deal with a large number of failed <code>memory.grow</code> instructions, which is why the time of each runtime tool increases.</p>\n</blockquote>",
        "id": 530340678,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753276203
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296#issuecomment-3108788037\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296\">issue #11296</a>:</p>\n<blockquote>\n<p>@gaaraw thanks for the issue; I wanted to note a meta-point: please do not post information in bugs as screenshots (your initial table and your later terminal screenshot). Text-as-images means the text can't be searched, it isn't visible by default in many email clients (including mine), its appearance cannot be adjusted (e.g. font size or color for anyone with visual difficulties), and it is not readable by most screen-reader or other accessibility software. It is much friendlier to us maintainers and to anyone who wants to find information in the future if you take a few minutes to copy-and-paste the text directly. Thanks!</p>\n</blockquote>",
        "id": 530352953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753279197
    }
]