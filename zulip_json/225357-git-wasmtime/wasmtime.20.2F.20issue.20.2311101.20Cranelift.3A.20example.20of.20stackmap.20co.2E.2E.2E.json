[
    {
        "content": "<p>iradicek opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11101\">issue #11101</a>:</p>\n<blockquote>\n<p>Following <a href=\"https://bytecodealliance.org/articles/new-stack-maps-for-wasmtime\">this article</a>, it seems it should be fairly straightforward to define a user stack map during codegen. However, I couldn’t find an example of this anywhere in the documentation. Additionally, I wasn’t able to find an example of how to use this information at runtime either.</p>\n<p>Is there a simple example available for this? And if not, could I get a pointer to where I might look for relevant code or documentation, so I could try putting together a minimal example myself?</p>\n<p>Also, please let me know if this isn’t the right place to ask this kind of question. Thank you!<br>\n</p>\n</blockquote>",
        "id": 525358451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750692641
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11101#issuecomment-2997029616\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11101\">issue #11101</a>:</p>\n<blockquote>\n<p>The use of this feature by Wasmtime is probably the best existing reference: for example, you can see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/2614e88bb5dee572773ae03d16bb49a10d30fca0/crates/cranelift/src/func_environ/gc/enabled.rs#L71\">here</a> or <a href=\"https://github.com/bytecodealliance/wasmtime/blob/2614e88bb5dee572773ae03d16bb49a10d30fca0/crates/cranelift/src/translate/func_translator.rs#L121\">here</a> where the code that translates Wasm GC primitives to CLIF uses <code>declare_value_needs_stack_map</code> on the function builder (part of the <code>cranelift-frontend</code> crate) to ensure that values are spilled to stackslots at safepoints, and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/2614e88bb5dee572773ae03d16bb49a10d30fca0/crates/cranelift/src/compiler.rs#L1087\">here</a> where the metadata that comes out of the compiler result is translated into a form that Wasmtime's GC can use during stack walks.</p>\n<p>@fitzgen could probably answer any other specific questions you have -- please feel free to ask on our <a href=\"https://bytecodealliance.zulipchat.com/\">Zulip</a>!</p>\n</blockquote>",
        "id": 525363504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750694266
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11101#issuecomment-3000933835\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11101\">issue #11101</a>:</p>\n<blockquote>\n<p>FWIW, here is where we actually read the GC refs off the stack:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/d89228850b649385dc3e661d994c5e21c8fcf8ec/crates/wasmtime/src/runtime/store.rs#L1542-L1589\">https://github.com/bytecodealliance/wasmtime/blob/d89228850b649385dc3e661d994c5e21c8fcf8ec/crates/wasmtime/src/runtime/store.rs#L1542-L1589</a></p>\n<p>But yeah filing issues or asking on zulip is fine.</p>\n</blockquote>",
        "id": 525542491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750778370
    },
    {
        "content": "<p>iradicek <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11101#issuecomment-3004287114\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11101\">issue #11101</a>:</p>\n<blockquote>\n<p>Thanks a lot for your responses. Will check those references out :)</p>\n<p>My goal is to write a minimal example (for a custom language) that uses cranelift to emit stackmaps and reads them at runtime. Should I leave this issue open for any further questions or better to close it and ask any new questions on zulip?</p>\n</blockquote>",
        "id": 525682688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750847826
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11101\">issue #11101</a>:</p>\n<blockquote>\n<p>Following <a href=\"https://bytecodealliance.org/articles/new-stack-maps-for-wasmtime\">this article</a>, it seems it should be fairly straightforward to define a user stack map during codegen. However, I couldn’t find an example of this anywhere in the documentation. Additionally, I wasn’t able to find an example of how to use this information at runtime either.</p>\n<p>Is there a simple example available for this? And if not, could I get a pointer to where I might look for relevant code or documentation, so I could try putting together a minimal example myself?</p>\n<p>Also, please let me know if this isn’t the right place to ask this kind of question. Thank you!<br>\n</p>\n</blockquote>",
        "id": 525734582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750864089
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11101#issuecomment-3005141507\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11101\">issue #11101</a>:</p>\n<blockquote>\n<p>Probably better to close this issue and ask general/higher-level questions on zulip. If you have focused questions or think something might be off with an API or the implementation of some method, then an issue is very welcome.</p>\n<p>Look forward to hearing how your adventures go!</p>\n</blockquote>",
        "id": 525734587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750864090
    }
]