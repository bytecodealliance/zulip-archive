[
    {
        "content": "<p>mschuwalow opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10198\">issue #10198</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Currently the linker only considers only non-rc versions to be backwards compat <a href=\"https://github.com/alexcrichton/wasmtime/blob/main/crates/environ/src/component/names.rs#L194\">https://github.com/alexcrichton/wasmtime/blob/main/crates/environ/src/component/names.rs#L194</a>.</p>\n<p>This is quite annoying when creating an rc for a new minor versions that is intended to be backwards compat.</p>\n<p>Example:<br>\nWe are currently supporting version 1.1.x of our wit in the host. We want to start development of a new, backwards compat 1.2.0 release, optimally publishing the first draft as 1.2.0-rc1. The problem becomes that if we want to support both 1.1.x and 1.2.0-rc we need to implement all the host functions twice, otherwise some of our users would get linking errors.</p>\n<p>The proposal would be to consider rc versions to be backwards compat if they do not increment the major component. It's probably right if rcs are not considered to be semver compatible with each other, as during development of an rc apis often change.<br>\nSo</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// * `foo` =&gt; `None`</span>\n<span class=\"sd\">/// * `foo:bar/baz` =&gt; `None`</span>\n<span class=\"sd\">/// * `foo:bar/baz@1.1.2` =&gt; `Some(foo:bar/baz@1)`</span>\n<span class=\"sd\">/// * `foo:bar/baz@0.1.0` =&gt; `Some(foo:bar/baz@0.1)`</span>\n<span class=\"sd\">/// * `foo:bar/baz@0.0.1` =&gt; `None`</span>\n<span class=\"sd\">/// * `foo:bar/baz@0.1.0-rc.2` =&gt; `None`</span>\n</code></pre></div>\n<p>would become</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// * `foo` =&gt; `None`</span>\n<span class=\"sd\">/// * `foo:bar/baz` =&gt; `None`</span>\n<span class=\"sd\">/// * `foo:bar/baz@1.1.2` =&gt; `Some(foo:bar/baz@1)`</span>\n<span class=\"sd\">/// * `foo:bar/baz@0.1.0` =&gt; `Some(foo:bar/baz@0.1)`</span>\n<span class=\"sd\">/// * `foo:bar/baz@0.0.1` =&gt; `None`</span>\n<span class=\"sd\">/// * `foo:bar/baz@0.1.0-rc.2` =&gt; `None`</span>\n<span class=\"sd\">/// * `foo:bar/baz@0.1.1-rc.2` =&gt; `Some(foo:bar/baz@0.1)`</span>\n<span class=\"sd\">/// * `foo:bar/baz@1.0.0-rc.1` =&gt; `None`</span>\n<span class=\"sd\">/// * `foo:bar/baz@1.1.0-rc.1` =&gt; `Some(foo:bar/baz@1)`</span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>Allow platform maintainers to more easily ship new versions of their api without duplicating a lot of code.</p>\n<h4>Implementation</h4>\n<p>From what I can tell only the alternate_lookup_key function would need to be adjusted to handle the new cases.<br>\n<a href=\"https://github.com/alexcrichton/wasmtime/blob/main/crates/environ/src/component/names.rs#L199\">https://github.com/alexcrichton/wasmtime/blob/main/crates/environ/src/component/names.rs#L199</a></p>\n<h4>Alternatives</h4>\n<p>One option that comes to mind is bumping the minor version on every change, but that makes it very difficult to keep the wit version in sync with the version of the platform.</p>\n<p>Another is not publishing the new version of the wit until it is fully ready, but that makes it difficult to test with users and iterate on the new version.</p>\n<p>A third option is to implement both the rc and the old version, but I would like to avoid that duplication.</p>\n</blockquote>",
        "id": 498132421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738851761
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10198#issuecomment-2640204957\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10198\">issue #10198</a>:</p>\n<blockquote>\n<p>Thanks for the report! This is something where technically the decision of what to do here should be within the scope of the component model itself rather than Wasmtime. That being said I don't actually see docs for this upstream yet (or I'm missing them...) so it's also not necessarily a perfect venue just yet.</p>\n<p>My personal feeling is that it's best to not deviate too too much from semver and my impression is that \"rc\" (or prereleases in general) are generally assumed to have no compatibility within each other for added APIs. In that sense trying to automatically substitute one for the other loses the ability for a more seamless experience. </p>\n<p>Is this perhaps something where the unstable features of WIT would help out? That way you could add APIs as unstable and then as they're iterated on they're gated by default and you can break the unstable APIs as much as you want as well. Then at the end a minor release could be done and the APIs marked stable.</p>\n</blockquote>",
        "id": 498152843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738856932
    },
    {
        "content": "<p>mschuwalow <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10198#issuecomment-2640233926\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10198\">issue #10198</a>:</p>\n<blockquote>\n<p>I would propose not making the rcs compatible with each other, just with the latests backwards compatible version.<br>\nI.e.<br>\n1.1.0-rc.1 would be backwards compat to 1.0.0<br>\n1.1.0-rc.2 would be backwards compat to 1.0.0 but not to 1.1.0-rc.1</p>\n<p>I think this would also be in line with what the semver spec says <a href=\"https://github.com/semver/semver/issues/111\">https://github.com/semver/semver/issues/111</a></p>\n<hr>\n<p>Thanks for pointing out the unstable features, I will check whether these are usable for us!</p>\n</blockquote>",
        "id": 498155383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738857567
    },
    {
        "content": "<p>mschuwalow edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10198#issuecomment-2640233926\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10198\">issue #10198</a>:</p>\n<blockquote>\n<p>I would propose not making the rcs compatible with each other, just with the latest backwards compatible version.<br>\nI.e.<br>\n1.1.0-rc.1 would be backwards compat to 1.0.0<br>\n1.1.0-rc.2 would be backwards compat to 1.0.0 but not to 1.1.0-rc.1</p>\n<p>I think this would also be in line with what the semver spec says <a href=\"https://github.com/semver/semver/issues/111\">https://github.com/semver/semver/issues/111</a></p>\n<hr>\n<p>Thanks for pointing out the unstable features, I will check whether these are usable for us!</p>\n</blockquote>",
        "id": 498156881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738857921
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10198#issuecomment-2641860061\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10198\">issue #10198</a>:</p>\n<blockquote>\n<p>Oh interesting, and that makes sense! Implementing such semantics doesn't seem unreasonable to me, but the nuances of that property would be difficult to implement. For example in the recommended change to the doc comment you mentioned above it would consider two release candidates equivalent to each other. There'd have to be a different and/or more clever implementation to implement that rcs are not equivalent but they are equivalent to historical versions (and maybe future? that also throws a wrench into things given how these versions match...)</p>\n</blockquote>",
        "id": 498253993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738899398
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10198#issuecomment-3001698783\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10198\">issue #10198</a>:</p>\n<blockquote>\n<p>See <a href=\"https://github.com/WebAssembly/component-model/issues/534\">https://github.com/WebAssembly/component-model/issues/534</a>. The comment about stripping prerelease tags is thanks to this issue. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> </p>\n</blockquote>",
        "id": 525586152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750795133
    }
]