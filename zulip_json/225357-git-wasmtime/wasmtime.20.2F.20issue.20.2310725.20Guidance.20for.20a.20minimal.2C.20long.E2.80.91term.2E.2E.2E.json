[
    {
        "content": "<p>Kyoya67 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10725\">issue #10725</a>:</p>\n<blockquote>\n<p>Thanks for filing a feature request! Please fill out the TODOs below.</p>\n<h4>Feature  &lt;!-- what I’m looking for --&gt;</h4>\n<p>I would like official guidance (or a dedicated build profile) that lets me<br>\nrun the <strong>same <code>.wasm</code> binary unchanged 10 + years from now</strong> with Wasmtime.</p>\n<p>Concretely, I’d like to know:</p>\n<ol>\n<li>\n<p>Whether <strong>locking to WASI preview 1</strong> and relying on the<br>\n<code>wasi-preview1-component-adapter</code> will remain a supported path.</p>\n</li>\n<li>\n<p>How to build a <strong>static, no_std, “smallest‑possible” Wasmtime</strong> that links<br>\n   only the required WASI snapshot.</p>\n</li>\n<li>\n<p>The recommended migration path once **WASI preview 2 /<br>\n   Component Model** stabilises.</p>\n</li>\n</ol>\n<h4>Benefit  &lt;!-- why this matters --&gt;</h4>\n<p>Most generative‑art projects today rely on WebGL, Canvas, or other host‑specific<br>\ngraphics APIs that could disappear or break in the future.<br>\nBy rendering purely in software inside a <code>.wasm</code> module<br>\nand embedding a <em>minimal, stable</em> Wasmtime instance, the artwork can stay<br>\nre‑playable long after those APIs are gone.</p>\n<p>Having an upstream‑blessed “long‑term reproducible” profile would</p>\n<ul>\n<li>guarantee that archived <code>.wasm</code> art (and other scientific artefacts) stays runnable,</li>\n<li>help embedders keep binary size and attack surface small,</li>\n<li>provide clear guidance to anyone who needs strong forward‑compatibility.</li>\n</ul>\n<h4>Implementation ideas  &lt;!-- rough sketch --&gt;</h4>\n<ul>\n<li>A Cargo feature such as <code>reproducible-preview1</code> that<ul>\n<li>strips non‑deterministic / experimental functionality,</li>\n<li>links only the chosen WASI snapshot symbols.</li>\n</ul>\n</li>\n<li>\n<p>Later, convert the module to <code>.component.wasm</code> and use<br>\n  WASI preview 2 once that toolchain is considered stable.</p>\n</li>\n<li>\n<p>Always build with <code>no_std</code> and static linking to minimise size.</p>\n</li>\n</ul>\n<p>I’m happy to prototype and contribute patches once the recommended direction is clear.</p>\n<h4>Alternatives</h4>\n<ul>\n<li>\n<p>Fork and freeze an old Wasmtime commit &amp; WASI version  <br>\n  → difficult to track security updates.</p>\n</li>\n<li>\n<p>Switch to another runtime (e.g. Wasmer)  <br>\n  → today Wasmtime still has the richest docs and tooling for this use‑case.</p>\n</li>\n<li>\n<p>Wait until preview 2 is fully settled before starting  <br>\n  → would delay any practical demo for years.</p>\n</li>\n</ul>\n<hr>\n</blockquote>",
        "id": 516026190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746363637
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10725#issuecomment-2851244878\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10725\">issue #10725</a>:</p>\n<blockquote>\n<p>Wasmtime's release process, including an LTS release, is documented <a href=\"https://docs.wasmtime.dev/stability-release.html\">here</a>. Our tiers of support are documented <a href=\"https://docs.wasmtime.dev/stability-tiers.html\">here</a>. The process for making major breaking changes to Wasmtime is documented <a href=\"https://github.com/bytecodealliance/rfcs\">here</a>.</p>\n<p>In effect I think you're going to have to decide whethe Wasmtime is right for you in the end. Wasmtime releases a new major version every month and does not guarantee API-stable major-version compatbility between versions. Put another way -- the same wasm module will still be able to run but you may have to adjust host bindings every so often to keep up-to-date. You can perform this update once-a-year with an LTS release.</p>\n<p>Whether or not that's suitable for your use case is up to you to decide. WebAssembly, much less Wasmtime, has not even existed for 10 years. Asking for something to stay unchanging for a decade is a big ask and is not something we can reasonably satisfy at this time (IMO at least). We can probably guarantee that modules from long ago will still be able to run, but guaranteeing that the exact same host code from a decade ago can still be used is not something we can commit to.</p>\n</blockquote>",
        "id": 516217712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746456299
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10725#issuecomment-2851363767\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10725\">issue #10725</a>:</p>\n<blockquote>\n<p>To add a few more thoughts:</p>\n<ul>\n<li>We just recently instituted the LTS process (maintained/backported-fixes version of Wasmtime for two years, with a new one each year), after much debate, and the major -- quite reasonable -- concern was the additional burden it would place on us, the maintainers. None of us has a bunch of free time -- we all have duties aside from maintaining Wasmtime -- and felt that we were stretching a bit, but could manage an LTS because it's important for many use-cases. That was a tradeoff informed by the importance of the use-case. Asking for a five-times-longer stretch of that for a demoscene is, IMHO, not a reasonable use of resources. At that timescale we're also looking at shifting OS support and even hardware support -- who knows what major ISA(s) will be common in ten years, for example? If a new one appears and we port to it, do we need to backport that entire compiler backend to the old Wasmtime?</li>\n<li>Given that reality of resources, a request like this could plausibly come from an entity with a need and corresponding engineering effort commitment: \"we want to keep Wasmtime v24 alive until 2034 and we have a fulltime engineer to do it\". Anything less than that is asking for large and unknowable work for free from people with many other priorities.</li>\n</ul>\n<p>You're of course welcome to fork Wasmtime (open-source!) but I would agree with Alex that maintaining any restrictions related to this in-tree is far too large a burden for our current state.</p>\n</blockquote>",
        "id": 516230938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746458753
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10725\">issue #10725</a>:</p>\n<blockquote>\n<p>Thanks for filing a feature request! Please fill out the TODOs below.</p>\n<h4>Feature  &lt;!-- what I’m looking for --&gt;</h4>\n<p>I would like official guidance (or a dedicated build profile) that lets me<br>\nrun the <strong>same <code>.wasm</code> binary unchanged 10 + years from now</strong> with Wasmtime.</p>\n<p>Concretely, I’d like to know:</p>\n<ol>\n<li>\n<p>Whether <strong>locking to WASI preview 1</strong> and relying on the<br>\n<code>wasi-preview1-component-adapter</code> will remain a supported path.</p>\n</li>\n<li>\n<p>How to build a <strong>static, no_std, “smallest‑possible” Wasmtime</strong> that links<br>\n   only the required WASI snapshot.</p>\n</li>\n<li>\n<p>The recommended migration path once **WASI preview 2 /<br>\n   Component Model** stabilises.</p>\n</li>\n</ol>\n<h4>Benefit  &lt;!-- why this matters --&gt;</h4>\n<p>Most generative‑art projects today rely on WebGL, Canvas, or other host‑specific<br>\ngraphics APIs that could disappear or break in the future.<br>\nBy rendering purely in software inside a <code>.wasm</code> module<br>\nand embedding a <em>minimal, stable</em> Wasmtime instance, the artwork can stay<br>\nre‑playable long after those APIs are gone.</p>\n<p>Having an upstream‑blessed “long‑term reproducible” profile would</p>\n<ul>\n<li>guarantee that archived <code>.wasm</code> art (and other scientific artefacts) stays runnable,</li>\n<li>help embedders keep binary size and attack surface small,</li>\n<li>provide clear guidance to anyone who needs strong forward‑compatibility.</li>\n</ul>\n<h4>Implementation ideas  &lt;!-- rough sketch --&gt;</h4>\n<ul>\n<li>A Cargo feature such as <code>reproducible-preview1</code> that<ul>\n<li>strips non‑deterministic / experimental functionality,</li>\n<li>links only the chosen WASI snapshot symbols.</li>\n</ul>\n</li>\n<li>\n<p>Later, convert the module to <code>.component.wasm</code> and use<br>\n  WASI preview 2 once that toolchain is considered stable.</p>\n</li>\n<li>\n<p>Always build with <code>no_std</code> and static linking to minimise size.</p>\n</li>\n</ul>\n<p>I’m happy to prototype and contribute patches once the recommended direction is clear.</p>\n<h4>Alternatives</h4>\n<ul>\n<li>\n<p>Fork and freeze an old Wasmtime commit &amp; WASI version  <br>\n  → difficult to track security updates.</p>\n</li>\n<li>\n<p>Switch to another runtime (e.g. Wasmer)  <br>\n  → today Wasmtime still has the richest docs and tooling for this use‑case.</p>\n</li>\n<li>\n<p>Wait until preview 2 is fully settled before starting  <br>\n  → would delay any practical demo for years.</p>\n</li>\n</ul>\n<hr>\n</blockquote>",
        "id": 516232240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746459071
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10725#issuecomment-2851377958\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10725\">issue #10725</a>:</p>\n<blockquote>\n<p>(I'll go ahead and close this because it seems clear to me we aren't going to be able to do anything about it, but please do feel free to file other issues as you have them if you choose to use Wasmtime!)</p>\n</blockquote>",
        "id": 516232244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746459072
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10725\">issue #10725</a>:</p>\n<blockquote>\n<p>Thanks for filing a feature request! Please fill out the TODOs below.</p>\n<h4>Feature  &lt;!-- what I’m looking for --&gt;</h4>\n<p>I would like official guidance (or a dedicated build profile) that lets me<br>\nrun the <strong>same <code>.wasm</code> binary unchanged 10 + years from now</strong> with Wasmtime.</p>\n<p>Concretely, I’d like to know:</p>\n<ol>\n<li>\n<p>Whether <strong>locking to WASI preview 1</strong> and relying on the<br>\n<code>wasi-preview1-component-adapter</code> will remain a supported path.</p>\n</li>\n<li>\n<p>How to build a <strong>static, no_std, “smallest‑possible” Wasmtime</strong> that links<br>\n   only the required WASI snapshot.</p>\n</li>\n<li>\n<p>The recommended migration path once **WASI preview 2 /<br>\n   Component Model** stabilises.</p>\n</li>\n</ol>\n<h4>Benefit  &lt;!-- why this matters --&gt;</h4>\n<p>Most generative‑art projects today rely on WebGL, Canvas, or other host‑specific<br>\ngraphics APIs that could disappear or break in the future.<br>\nBy rendering purely in software inside a <code>.wasm</code> module<br>\nand embedding a <em>minimal, stable</em> Wasmtime instance, the artwork can stay<br>\nre‑playable long after those APIs are gone.</p>\n<p>Having an upstream‑blessed “long‑term reproducible” profile would</p>\n<ul>\n<li>guarantee that archived <code>.wasm</code> art (and other scientific artefacts) stays runnable,</li>\n<li>help embedders keep binary size and attack surface small,</li>\n<li>provide clear guidance to anyone who needs strong forward‑compatibility.</li>\n</ul>\n<h4>Implementation ideas  &lt;!-- rough sketch --&gt;</h4>\n<ul>\n<li>A Cargo feature such as <code>reproducible-preview1</code> that<ul>\n<li>strips non‑deterministic / experimental functionality,</li>\n<li>links only the chosen WASI snapshot symbols.</li>\n</ul>\n</li>\n<li>\n<p>Later, convert the module to <code>.component.wasm</code> and use<br>\n  WASI preview 2 once that toolchain is considered stable.</p>\n</li>\n<li>\n<p>Always build with <code>no_std</code> and static linking to minimise size.</p>\n</li>\n</ul>\n<p>I’m happy to prototype and contribute patches once the recommended direction is clear.</p>\n<h4>Alternatives</h4>\n<ul>\n<li>\n<p>Fork and freeze an old Wasmtime commit &amp; WASI version  <br>\n  → difficult to track security updates.</p>\n</li>\n<li>\n<p>Switch to another runtime (e.g. Wasmer)  <br>\n  → today Wasmtime still has the richest docs and tooling for this use‑case.</p>\n</li>\n<li>\n<p>Wait until preview 2 is fully settled before starting  <br>\n  → would delay any practical demo for years.</p>\n</li>\n</ul>\n<hr>\n</blockquote>",
        "id": 516232513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746459141
    }
]