[
    {
        "content": "<p>imsnif opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Hey,</p>\n<p>In the context of Zellij, ever since a recent (still unreleased) upgrade of wasmtime, I've been getting intermittent and seemingly random segfaults.</p>\n<p>I am afraid I don't have a way to reproduce them, but I have been gathering some information about them and am hoping the maintainers can help pin-point the issue or provide more insight.</p>\n<p>Version info:<br>\nwasmtime version: 29.0.1<br>\n(probably) did not occur in wasmtime version: 21.0.2</p>\n<p>What happens: Zellij crashes, without a panic, and syslog tells me that it got a segfault:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">343995.595910</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"o\">-</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">runti</span><span class=\"p\">[</span><span class=\"mi\">2487041</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">segfault</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mi\">705</span><span class=\"n\">a8ea73970</span><span class=\"w\"> </span><span class=\"n\">ip</span><span class=\"w\"> </span><span class=\"mi\">0000705</span><span class=\"n\">a8ea73970</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"w\"> </span><span class=\"mi\">0000705</span><span class=\"n\">a8ea73948</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"n\">likely</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">socket</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>With some debug logging, I managed to narrow the crash down to this block in our app: <a href=\"https://github.com/zellij-org/zellij/blob/main/zellij-server/src/plugins/wasm_bridge.rs#L1589-L1596\">https://github.com/zellij-org/zellij/blob/main/zellij-server/src/plugins/wasm_bridge.rs#L1589-L1596</a></p>\n<p>I have a core dump, but unfortunately not one with debug symbols so I'm not sure it's a lot of help.</p>\n<p>This happens about once or twice a day for me and so is extremely gnarly to pin-point. I'm not 100% sure this is a wasmtime issue, but the crash location would seem to indicate that it is.</p>\n<p>Any help in troubleshooting or mitigating this somehow would be appreciated. On my part I'm going to try to get a coredump with some debug symbols so we'll hopefully be less blind.</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 501601194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740417061
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679221429\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<blockquote>\n<p><code>segfault at 705a8ea73970 ip 0000705a8ea73970</code></p>\n</blockquote>\n<p>it's suspicious that the segfaulting addressing and the ip are the same, meaning that this looks like it's trying to execute code that's either not mapped or not executable. What OS are you on? That may be some cache-coherency thing and/or bug in Wasmtime perhaps?  (not that anything about that has changed recently, so I don't know what would have changed in the 21-&gt;29 update other than perhaps making it more likely one way or another)</p>\n</blockquote>",
        "id": 501610380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740419327
    },
    {
        "content": "<p>imsnif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679227772\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>I'm on arch linux</p>\n</blockquote>",
        "id": 501610981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740419489
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679242906\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Can you run <code>uname -a</code> and paste that? In addition to Linux I'd be curious what architecture you're using (e.g. x64, aarch64, etc) and possibly what kernel version too</p>\n</blockquote>",
        "id": 501612554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740419873
    },
    {
        "content": "<p>imsnif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679247845\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Sure: Linux green 6.12.1-arch1-1 #1 SMP PREEMPT_DYNAMIC Fri, 22 Nov 2024 16:04:27 +0000 x86_64 GNU/Linux<br>\n</p>\n</blockquote>",
        "id": 501613016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740419999
    },
    {
        "content": "<p>imsnif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679247845\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Sure: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Linux</span><span class=\"w\"> </span><span class=\"n\">green</span><span class=\"w\"> </span><span class=\"mf\">6.12.1</span><span class=\"o\">-</span><span class=\"n\">arch1</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">SMP</span><span class=\"w\"> </span><span class=\"n\">PREEMPT_DYNAMIC</span><span class=\"w\"> </span><span class=\"n\">Fri</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"w\"> </span><span class=\"n\">Nov</span><span class=\"w\"> </span><span class=\"mi\">2024</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">04</span><span class=\"p\">:</span><span class=\"mi\">27</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">0000</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">GNU</span><span class=\"o\">/</span><span class=\"n\">Linux</span>\n</code></pre></div>\n</blockquote>",
        "id": 501613149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740420016
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679264904\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Ah ok, x64 probably doesn't have any cache coherency issues or things like that. Can you open up the coredump and get the exact faulting instruction? E.g. if you open it up and run <code>disas</code> does it print anything? If nothing can you do <code>disas $pc-40,$pc+30</code> to see the window around the faulting instruction? </p>\n</blockquote>",
        "id": 501614427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740420343
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679264904\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Ah ok, x64 probably doesn't have any cache coherency issues or things like that. Can you open up the coredump and get the exact faulting instruction? E.g. if you open it up and run <code>disas</code> does it print anything? If nothing can you do <code>disas $pc-40,$pc+30</code> to see the window around the faulting instruction? </p>\n<p>EDIT: also if possible a stack trace via <code>bt</code> would be helpful too</p>\n</blockquote>",
        "id": 501614496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740420361
    },
    {
        "content": "<p>imsnif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679278268\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Sure, here you go (I hope I did it right).</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">generated</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">aram</span><span class=\"o\">/</span><span class=\"n\">backup</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">-</span><span class=\"n\">zellij</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">server</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">run</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"mi\">1000</span><span class=\"o\">/</span><span class=\"n\">zellij</span><span class=\"o\">/</span><span class=\"mf\">0.42.0</span><span class=\"o\">/</span><span class=\"n\">zellij</span><span class=\"o\">'</span><span class=\"p\">.</span>\n<span class=\"n\">Program</span><span class=\"w\"> </span><span class=\"n\">terminated</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">signal</span><span class=\"w\"> </span><span class=\"n\">SIGSEGV</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Segmentation</span><span class=\"w\"> </span><span class=\"n\">fault</span><span class=\"p\">.</span>\n<span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"mh\">0x00007b103cdb1870</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"n\">Current</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">LWP</span><span class=\"w\"> </span><span class=\"mi\">800590</span><span class=\"p\">)]</span>\n<span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">disas</span>\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">contains</span><span class=\"w\"> </span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">selected</span><span class=\"w\"> </span><span class=\"n\">frame</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">disas</span><span class=\"w\"> </span><span class=\"cp\">$pc</span><span class=\"o\">-</span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"cp\">$pc</span><span class=\"o\">+</span><span class=\"mi\">30</span>\n<span class=\"n\">Dump</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">assembler</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mh\">0x7b103cdb1848</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mh\">0x7b103cdb188e</span><span class=\"p\">:</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1848</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">mov</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0xcedceff9</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">ecx</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb184d</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb184e</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1850</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">jo</span><span class=\"w\">     </span><span class=\"mh\">0x7b103cdb186a</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1852</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">fstpt</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1855</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">jnp</span><span class=\"w\">    </span><span class=\"mh\">0x7b103cdb1857</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1857</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">bl</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">bl</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1859</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">lea</span><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">bad</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">edx</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb185a</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">rcr</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">ah</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb185c</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">bad</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb185d</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb185e</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1860</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">call</span><span class=\"w\">   </span><span class=\"mh\">0x7b104d17f37d</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1865</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">jnp</span><span class=\"w\">    </span><span class=\"mh\">0x7b103cdb1867</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1867</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1869</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb186b</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb186d</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb186f</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1871</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1873</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1875</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1877</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">ch</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1879</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">call</span><span class=\"w\">   </span><span class=\"mh\">0x7b10b7eb0c83</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb187e</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1880</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1882</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1884</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1886</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1888</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">clc</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1889</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbx</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb188a</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">sbb</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">bl</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">dh</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb188c</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">bad</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb188d</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"n\">End</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">assembler</span><span class=\"w\"> </span><span class=\"n\">dump</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">bt</span>\n<span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"mh\">0x00007b103cdb1870</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mh\">0x000059cedceff9b9</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">2</span><span class=\"w\">  </span><span class=\"mh\">0x00007b103cdb1870</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">3</span><span class=\"w\">  </span><span class=\"mh\">0x000059cedcd08ddb</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"mh\">0x00007b103cdb18e8</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">5</span><span class=\"w\">  </span><span class=\"mh\">0x0000000000000000</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I'm also going to start working with an unstripped version so that next time this happens we can hopefully get some more info.</p>\n</blockquote>",
        "id": 501615729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740420702
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679312345\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Looks like the disassembly got mangled due to starting at the wrong offset. <code>disas/r $pc-40,$pc+30</code> shows the raw bytes for each instruction too. Alsy try varying the <code>-40</code> a bit until one instruction has 0x00007b103cdb1870 as start address.</p>\n</blockquote>",
        "id": 501618867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740421627
    },
    {
        "content": "<p>imsnif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679332082\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>It this better?</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">disas</span><span class=\"w\"> </span><span class=\"cp\">$pc</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"cp\">$pc</span><span class=\"o\">+</span><span class=\"mi\">30</span>\n<span class=\"n\">Dump</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">assembler</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mh\">0x7b103cdb1866</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mh\">0x7b103cdb188e</span><span class=\"p\">:</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1866</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1868</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb186a</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb186c</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb186e</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mh\">0x00007b103cdb1870</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1872</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1874</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1876</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1878</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">sub</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">ch</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">al</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb187a</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x7b0ff4</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb187f</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1881</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1883</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1885</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1887</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">bh</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">al</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb1889</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbx</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb188a</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">sbb</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">bl</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">dh</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb188c</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">bad</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"mh\">0x00007b103cdb188d</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"n\">End</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">assembler</span><span class=\"w\"> </span><span class=\"n\">dump</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">bt</span>\n<span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"mh\">0x00007b103cdb1870</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mh\">0x000059cedceff9b9</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">2</span><span class=\"w\">  </span><span class=\"mh\">0x00007b103cdb1870</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">3</span><span class=\"w\">  </span><span class=\"mh\">0x000059cedcd08ddb</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"mh\">0x00007b103cdb18e8</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">5</span><span class=\"w\">  </span><span class=\"mh\">0x0000000000000000</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 501620675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740422175
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679428961\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>It appears execution fell into bad data somehow: <code>add %al, (%rax)</code> is the disassembly of all zero bytes.</p>\n<p>Perhaps try starting further back -- did execution slide into this from legitimate code just prior, somehow?</p>\n<p>Or perhaps a jump landed here. Are you able to capture the crash under <code>rr</code> (the reversible debugger) and backwards-step (<code>rsi</code>, reverse-step-instruction) to see where we came from?</p>\n</blockquote>",
        "id": 501629016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740424744
    },
    {
        "content": "<p>imsnif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679461262\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Would it be helpful if I attach the coredump here?</p>\n</blockquote>",
        "id": 501631611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740425623
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679467247\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Probably not without the binary and other information -- in general it's difficult to jump into the context of another project embedding us and work things out. Capturing the crash in <code>rr</code> if you can is probably the most likely way to make progress: that would allow us to see exactly how things became corrupted (if they did) or went off the rails otherwise.</p>\n</blockquote>",
        "id": 501632147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740425797
    },
    {
        "content": "<p>imsnif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679474590\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>I have unfortunately not managed to find a way to reproduce the crash. It happens about 1-2 times a day of heavy work with the application. I guess it will help some more if I provide a backtrace of the coredump with the debug symbols?</p>\n</blockquote>",
        "id": 501632792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740426016
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679500215\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Landing in the middle of zero data is the sort of thing that requires a bit more info to debug unfortunately -- a backtrace might offer some clues, but the only way to really get enough information to zero in on a fix (if this is a Wasmtime bug) would be, again, an <code>rr</code> trace -- we really need to see register values, see how control flow reached a place, see how struct fields got corrupted if they did, etc.</p>\n</blockquote>",
        "id": 501635161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740426781
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2679541170\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>A few questions that might help triage as well:</p>\n<ul>\n<li>Does your application that embeds Wasmtime include any unsafe Rust code, or have any libraries written in unsafe languages (e.g. C/C++) linked in, other than libc?</li>\n<li>Do the failures correlate with heavy load? Wasm execution? Level of concurrency? Or do they happen randomly?</li>\n<li>A bit of a stretch, but I recently encountered some perplexing kernel crashes on one of my machines and initially assumed the issue must have been some subtle race condition in the filesystem code that was crashing. It turned out that I had bad RAM. So<ul>\n<li>Does this crashing issue occur only on one machine or on multiple?</li>\n<li>If only one machine, has it had any other stability issues? Could you run <code>memtest86</code> (if x86/PC hardware) as a baseline check?</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 501638952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740428015
    },
    {
        "content": "<p>imsnif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2680993902\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>* Does your application that embeds Wasmtime include any unsafe Rust code, or have any libraries written in unsafe languages (e.g. C/C++) linked in, other than libc?\n</code></pre></div>\n\n</blockquote>\n<p>Yes and yes. Zellij has 500+ dependencies. I did debug it down do these lines though <a href=\"https://github.com/zellij-org/zellij/blob/main/zellij-server/src/plugins/wasm_bridge.rs#L1589-L1596\">https://github.com/zellij-org/zellij/blob/main/zellij-server/src/plugins/wasm_bridge.rs#L1589-L1596</a> - it definitely happens here. The only unsafe thing that's happening in this range has to do with wasmtime (unless I'm missing something which is always a possibility). Otherwise it's serialization, acquiring a lock on an <code>Arc&lt;Mutex&gt;</code> and pushing into a <code>VecDeque</code>.</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>* Do the failures correlate with heavy load? Wasm execution? Level of concurrency? Or do they happen randomly?\n</code></pre></div>\n\n</blockquote>\n<p>Anecdotally, it seems to me that this happens when the system itself is under heavy load (eg. compiling rust). This is a 10+ year old laptop, so it struggles often and these tend to be the times in which this happens - but definitely not only.</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>  * Does this crashing issue occur only on one machine or on multiple?\n</code></pre></div>\n\n</blockquote>\n<p>So far only on my machine. I unfortunately do not have access to others. I have no heard this reported, but that's because this only happens (to the best of my knowledge) in unreleased code. I'm currently very wary of releasing said code (supposed to do so in the coming week or two) and finding out because these sort of crashes will definitely cause many users to rage quit the app. I'm hoping we get to the bottom of this one way or the other.</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>  * If only one machine, has it had any other stability issues? Could you run `memtest86` (if x86/PC hardware) as a baseline check?\n</code></pre></div>\n\n</blockquote>\n<p>This was a good idea, but unfortunately all is well. I ran memtest86+ overnight, 10 passes with no errors.<br>\n</p>\n</blockquote>",
        "id": 501732930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740469777
    },
    {
        "content": "<p>imsnif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2681129011\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>And I have a proper backtrace with debug symbols!</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">bt</span>\n<span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"mh\">0x00007f134ab5f880</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mh\">0x000057ceab37a049</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime_setjmp_29_0_1</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">2</span><span class=\"w\">  </span><span class=\"mh\">0x000057ceaad40b6b</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">traphandlers</span><span class=\"p\">::</span><span class=\"n\">catch_traps</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">3</span><span class=\"w\">  </span><span class=\"mh\">0x000057ceaadf72d1</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">func</span><span class=\"p\">::</span><span class=\"n\">typed</span><span class=\"p\">::</span><span class=\"n\">TypedFunc</span><span class=\"o\">&lt;</span><span class=\"n\">Params</span><span class=\"p\">,</span><span class=\"n\">Results</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"mh\">0x000057ceaad679ba</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">zellij_server</span><span class=\"p\">::</span><span class=\"n\">plugins</span><span class=\"p\">::</span><span class=\"n\">wasm_bridge</span><span class=\"p\">::</span><span class=\"n\">apply_event_to_plugin</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">5</span><span class=\"w\">  </span><span class=\"mh\">0x000057ceab032cc6</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">async_task</span><span class=\"p\">::</span><span class=\"n\">raw</span><span class=\"p\">::</span><span class=\"n\">RawTask</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">6</span><span class=\"w\">  </span><span class=\"mh\">0x000057ceaa2f9b71</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">async_global_executor</span><span class=\"p\">::</span><span class=\"n\">threading</span><span class=\"p\">::</span><span class=\"n\">thread_main_loop</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">7</span><span class=\"w\">  </span><span class=\"mh\">0x000057ceaa2ff776</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">sys</span><span class=\"p\">::</span><span class=\"n\">backtrace</span><span class=\"p\">::</span><span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">8</span><span class=\"w\">  </span><span class=\"mh\">0x000057ceaa2f7a21</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">ops</span><span class=\"p\">::</span><span class=\"n\">function</span><span class=\"p\">::</span><span class=\"nb\">FnOnce</span><span class=\"p\">::</span><span class=\"n\">call_once</span><span class=\"p\">{{</span><span class=\"n\">vtable</span><span class=\"p\">.</span><span class=\"n\">shim</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">9</span><span class=\"w\">  </span><span class=\"mh\">0x000057ceaa71a09b</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"p\">::</span><span class=\"n\">boxed</span><span class=\"p\">::{</span><span class=\"k\">impl</span><span class=\"p\">#</span><span class=\"mi\">28</span><span class=\"p\">}::</span><span class=\"n\">call_once</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">ops</span><span class=\"p\">::</span><span class=\"n\">function</span><span class=\"p\">::</span><span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Output</span><span class=\"o\">=</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"p\">::</span><span class=\"n\">alloc</span><span class=\"p\">::</span><span class=\"n\">Global</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">boxed</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">1972</span>\n<span class=\"p\">#</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"p\">::</span><span class=\"n\">boxed</span><span class=\"p\">::{</span><span class=\"k\">impl</span><span class=\"p\">#</span><span class=\"mi\">28</span><span class=\"p\">}::</span><span class=\"n\">call_once</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"p\">::</span><span class=\"n\">boxed</span><span class=\"p\">::</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">ops</span><span class=\"p\">::</span><span class=\"n\">function</span><span class=\"p\">::</span><span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Output</span><span class=\"o\">=</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"p\">::</span><span class=\"n\">alloc</span><span class=\"p\">::</span><span class=\"n\">Global</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"p\">::</span><span class=\"n\">alloc</span><span class=\"p\">::</span><span class=\"n\">Global</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">boxed</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">1972</span>\n<span class=\"p\">#</span><span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">sys</span><span class=\"p\">::</span><span class=\"n\">pal</span><span class=\"p\">::</span><span class=\"n\">unix</span><span class=\"p\">::</span><span class=\"n\">thread</span><span class=\"p\">::{</span><span class=\"k\">impl</span><span class=\"p\">#</span><span class=\"mi\">2</span><span class=\"p\">}::</span><span class=\"n\">new</span><span class=\"p\">::</span><span class=\"n\">thread_start</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">sys</span><span class=\"o\">/</span><span class=\"n\">pal</span><span class=\"o\">/</span><span class=\"n\">unix</span><span class=\"o\">/</span><span class=\"n\">thread</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">105</span>\n<span class=\"p\">#</span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"mh\">0x00007f134c1ad39d</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">libc</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">.</span><span class=\"mi\">6</span>\n<span class=\"p\">#</span><span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"mh\">0x00007f134c23249c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">libc</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">.</span><span class=\"mi\">6</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 501740289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740472479
    },
    {
        "content": "<p>imsnif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2682534230\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>I'm very happy to provide whichever information you need. I'm happy to send you the core dump as well if you think that will help (though it was compiled to my machine, so I'm not sure if you'd be able to work with it?)</p>\n<p>This does not seem related to any specific wasm module, it happens with the built-in plugins in Zellij. I can point to the code if you'd like.</p>\n<p>I'm in a bit of a precarious situation here. This is a very rare crash (as I mentioned, it happens about twice a day for me when working with the app as my daily driver and IDE) - and so as much as I would want to, I don't know how to give you what you're asking for. I simply can't reproduce it.</p>\n<p>On the other hand - I also can't release the software in this case. This would be devastating for the application and its stability (assuming it's not somehow a problem local to my case). My only other recourse is to downgrade back to version 21, which is the currently released one and hope for the best. I don't think this would be a good solution.</p>\n<p>Could you please help me, maybe with educated guesses? Maybe with a way to mitigate this error, now that we now it's happening in the call function? I would be fine with a <code>try_call</code> or some such that lets me totally restart the plugin. Not a great experience, but better than crashing the whole app.</p>\n</blockquote>",
        "id": 501847152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740500007
    },
    {
        "content": "<p>imsnif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2682534230\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>I'm very happy to provide whichever information you need. I'm happy to send you the core dump as well if you think that will help (though it was compiled to my machine, so I'm not sure if you'd be able to work with it?)</p>\n<p>This does not seem related to any specific wasm module, it happens with the built-in plugins in Zellij. I can point to the code if you'd like.</p>\n<p>I'm in a bit of a precarious situation here. This is a very rare crash (as I mentioned, it happens about twice a day for me when working with the app as my daily driver and IDE) - and so as much as I would want to, I don't know how to give you what you're asking for. I simply can't reproduce it.</p>\n<p>On the other hand - I also can't release the software in this case. This would be devastating for the application and its stability (assuming it's not somehow a problem local to my case). My only other recourse is to downgrade back to version 21, which is the currently released one and hope for the best. I don't think this would be a good solution.</p>\n<p>Could you please help me, maybe with educated guesses? Maybe with a way to mitigate this error, now that we know it's happening in the call function? I would be fine with a <code>try_call</code> or some such that lets me totally restart the plugin. Not a great experience, but better than crashing the whole app.</p>\n</blockquote>",
        "id": 501847380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740500071
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2682547818\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>@imsnif Do you have any plugins installed that are written in Go or another GC'ed language by the way? Or is with just the default Zellij plugins?</p>\n</blockquote>",
        "id": 501848300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740500286
    },
    {
        "content": "<p>imsnif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2682556403\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Just the default Zellij ones.</p>\n</blockquote>",
        "id": 501848913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740500435
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2682547818\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>@imsnif Do you have any plugins installed that are written in Go or another GC'ed language by the way? Or is this with just the default Zellij plugins?</p>\n</blockquote>",
        "id": 501854713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740501676
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2682619411\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>That at least eliminates the possibility that this is a bug in the GC support of Wasmtime as all default plugins are written in Rust which doesn't use Wasm GC.</p>\n</blockquote>",
        "id": 501855222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740501763
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2682504553\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>My guess is that back-and-forth debugging over and asynchronous chat mechanism such as issue comments here is unlikely to turn up much of a solution with most of the low-hanging-fruit possibilities already having been weeded out. I think @cfallin is right in that to make any progress on this you'd probably need to be able to upload an artifact of some kind here, e.g. a core dump or an <code>rr</code> trace or similar. That's of course not guaranteed to yield a solution, but otherwise only getting snippets here and there is a bit of a stunted debugging experience from our end.</p>\n<p>Another thing that might be useful: is there one wasm module which is causing issues? Multiple? One particular export? Multiple? Basically getting a more detailed picture of the crash might yield insights with respect to the shape of what Wasmtime is doing. I realize this is probably difficult to gather from your end due to the non-reproducible nature of the crash but if you're able to install some verbose logging and correlate that with a crash  it could perhaps prove valuable. </p>\n</blockquote>",
        "id": 501856184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740501959
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2682695188\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>At least from my perspective I want to be able to help you @imsnif but the context here is very sparse. Others might have more context but the context at least I have is:</p>\n<ul>\n<li>This is non-reproducible and spurious. Any requests for more information are understood that it may take awhile to collect the crash.</li>\n<li>This crash is a segfault where the ip itself seems to be the address of the faulting instruction and the address causing the fault. This was present in the OP's syslog logs, and I'm assuming that's the same for all other crashes shown her because the syslog hasn't been recaptured.</li>\n<li>The stack trace points at compiled wasm code, which knowingly doesn't have a symbol associated with it.</li>\n</ul>\n<p>That's unfortunately not really much to go on. \"Segfault in wasm code\" could range anywhere from critical security bug in the runtime to some other random thread unmapping memory unknowningly. Debugging is in general a pretty interactive experience insofar as we don't have a runbook which says \"run this command and it'll file an issue\" but instead debugging issues like this requires a lot of back-and-forth with what's being debugged. This is all of course under the limitations you're describing which is a spurious crash that is not easily reproducible.</p>\n<p>It's also worth pointing out that at least from my perspective I'm no zellij expert myself, rather I'm not familiar with the codebase at all. Not being familiar with a codebase can severly hinder debugging because there's so much unknown context of what's going on. Now of course you're in this bucket with respect to Wasmtime as well (I'm assuming you're not intimately familiar with Wasmtime's codebase), and that's something I personally very much want to respect. I don't expect you to be able to provide the perfect crash log/trace that narrows down this issue in a few minutes from our perspective, but at. the same time I'd hope you can be sympathetic to our end as well in terms of \"segfault in wasm code\" is not much to go on in terms of debugging.</p>\n<p>I also want to very much respect the pressures you have in play as well with respect to releasing. From my (probably naive) perspective it seems like you probably want to downgrade to Wasmtime 21 while this is debugged in parallel. Either that or have some sort of time box for investigating this and after that downgrade for a release. I'd love to give you an estimate of how long this will take or some mitigation to apply to make it less likely or workaround or something like that. With \"segfault in wasm code\" though that option unfortunately isn't a reality.</p>\n<hr>\n<p>Some other information that could possibly help:</p>\n<ul>\n<li>I see in Zellij there's support for both Winch and Cranelift. Which is being used?</li>\n<li>I see in Zellij there's support for deserializing compiled modules from disk? Is that being used?<ul>\n<li>If so, is it possible that the file is being modified on disk while it's in use? There's some documentation about the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Module.html#method.deserialize_file\"><code>unsafe</code> here</a>. Also if so, perhaps you could test disabling this to see if it improves things?</li>\n</ul>\n</li>\n<li>I've got no idea if I can inspect a core dump from your machine on my machine but I figure it can't hurt. I'm no core dump expert myself.</li>\n<li>What are you currently doing to reproduce? Is there a sequence of things you do which after 15 minutes reproduces? Or do you just work in the background and once a week it crashes? This is somewhat rhetorical but if you do have a method of reproducing, even if it takes awhile, that's where again <code>rr</code> could be invaluable to reproduce the crash.</li>\n</ul>\n</blockquote>",
        "id": 501861463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740503384
    },
    {
        "content": "<p>imsnif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2682909467\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Hey @alexcrichton - first things first - I just want to make sure I do not come across as non-sympathizing or unappreciative of your situation. I very much get where you are coming from and understand the difficulty in debugging this very theoretical issue. You are not by my machine and even if you were - this is not consistently reproducible and very broad. I'm not expecting any magical solutions and am very grateful for the support I'm getting from all of you. Thank you for continuing to work with me on this!</p>\n<blockquote>\n<p>I see in Zellij there's support for deserializing compiled modules from disk? Is that being used?<br>\nIf so, is it possible that the file is being modified on disk while it's in use? There's some documentation about the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Module.html#method.deserialize_file\">unsafe here</a>. Also if so, perhaps you could test disabling this to see if it improves things?</p>\n</blockquote>\n<p>I want to concentrate on this, because I think this is a very good guess and could very well be the issue. </p>\n<p>The way we load plugins (modules) is to first compile them and then keep the compiled assets in our cache folder. The cache folder is indexed by a sha256 hash of the wasm-file.</p>\n<p>When developing, I use the winch compiler while in production we use the cranelift compiler. As far as I understand it, these two would have different compiled assets but the same hash index. Could it be that while developing I override the cache index with an asset compiled by a different compiler and thus cause an already instantiated module to crash? Am I understanding the docs correctly that even already instantiated modules page from their loaded HD path?</p>\n</blockquote>",
        "id": 501881108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740507449
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2682922817\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Yes, we <code>mmap()</code> the <code>.cwasm</code> file directly, so if the data at offsets in the file corresponding to the running code are changed, then the running code in memory will be changed underneath the instruction pointer, wherever it is. This could very well explain the RIP-in-the-middle-of-zeroes seen above.</p>\n<p>Question: when you write out the files into the cache directory, do you open as writable and truncate, then write, or do you write a new file then rename it over the old file? I suspect the latter (\"atomically replacing the file\", as described <a href=\"https://unix.stackexchange.com/questions/24395/rewrite-existing-file-so-that-it-gets-replaced-by-new-version-atomically-only-o\">here</a>, often the method used by text editors on save) is what one wants. The effect of this is that the old file will be unlinked from the directory when replaced, but Wasmtime will still hold the file open (via the mmap) and so the old inode with old data will continue to exist and be used.</p>\n<p>Separately, it might be reasonable to add the compiler config to your cache key, so both variants can remain cached, but if the replacement is done properly as above then keying them separately should be \"just an optimization\" rather than load-bearing for correctness.</p>\n</blockquote>",
        "id": 501882103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740507826
    },
    {
        "content": "<p>imsnif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2682935780\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>We don't take any special care of files in our cache. Until now I've honestly been treating it as completely disposable, and routinely used \"delete the cache\" as a way to solve issues for both myself and users.</p>\n<p>Alright - looks like we've got a lead. I'm going to first try and run a version that uses a totally separate cache than my dev one to see if I still experience crashes. I'll make sure to report back here.</p>\n</blockquote>",
        "id": 501883238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740508218
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2682947807\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Nice! Definitely seems like a promising lead.</p>\n<p>One other bit of context I can add is that nothing about this has changed in the 21-&gt;29 release history, so that would raise a few questions for me:</p>\n<ul>\n<li>Did you try downgrading to 21 to see if it fixed anything? If you did and it appeared to fix things that's worrisome, but if you hadn't done that yet just wanted to confirm.</li>\n<li>Did you implement support for Winch + Cranelift in the development of Zellij between when Wasmtime was added at 21 and now? That might help explain why it wasn't there originally but is cropping up now.</li>\n</ul>\n<p>Or well I suppose that this sort of assumes changing files is the cause. Although if the answers are \"no 21 hasn't been tested yet\" and \"yes winch+cranelift support was added in this window\" that's further fuel to the fire of \"thanks mmap unix semantics\"</p>\n</blockquote>",
        "id": 501884179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740508557
    },
    {
        "content": "<p>imsnif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2682959407\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>I have not yet tested version 21 (was planning to try tomorrow). Version 21 though was the first wasmtime version we went to production with after switching from wasmer. So until now I have never had a situation where I was working locally with a production and dev version that shared the same cache for a significant amount of time. It could very well be that this was all a red herring.</p>\n</blockquote>",
        "id": 501885141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740508908
    },
    {
        "content": "<p>imsnif closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Hey,</p>\n<p>In the context of Zellij, ever since a recent (still unreleased) upgrade of wasmtime, I've been getting intermittent and seemingly random segfaults.</p>\n<p>I am afraid I don't have a way to reproduce them, but I have been gathering some information about them and am hoping the maintainers can help pin-point the issue or provide more insight.</p>\n<p>Version info:<br>\nwasmtime version: 29.0.1<br>\n(probably) did not occur in wasmtime version: 21.0.2</p>\n<p>What happens: Zellij crashes, without a panic, and syslog tells me that it got a segfault:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">343995.595910</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"o\">-</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">runti</span><span class=\"p\">[</span><span class=\"mi\">2487041</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">segfault</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mi\">705</span><span class=\"n\">a8ea73970</span><span class=\"w\"> </span><span class=\"n\">ip</span><span class=\"w\"> </span><span class=\"mi\">0000705</span><span class=\"n\">a8ea73970</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"w\"> </span><span class=\"mi\">0000705</span><span class=\"n\">a8ea73948</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"n\">likely</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">socket</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>With some debug logging, I managed to narrow the crash down to this block in our app: <a href=\"https://github.com/zellij-org/zellij/blob/main/zellij-server/src/plugins/wasm_bridge.rs#L1589-L1596\">https://github.com/zellij-org/zellij/blob/main/zellij-server/src/plugins/wasm_bridge.rs#L1589-L1596</a></p>\n<p>I have a core dump, but unfortunately not one with debug symbols so I'm not sure it's a lot of help.</p>\n<p>This happens about once or twice a day for me and so is extremely gnarly to pin-point. I'm not 100% sure this is a wasmtime issue, but the crash location would seem to indicate that it is.</p>\n<p>Any help in troubleshooting or mitigating this somehow would be appreciated. On my part I'm going to try to get a coredump with some debug symbols so we'll hopefully be less blind.</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 502727335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740820058
    },
    {
        "content": "<p>imsnif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283#issuecomment-2692084111\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10283\">issue #10283</a>:</p>\n<blockquote>\n<p>Hi all - I'm coming back to report that I've been working with a separate cache folder on my dev instance for 3 days and experienced no crashes. I think we nailed it on the head. Very cool and much appreciated.</p>\n<p><strong>TL;DR for those who don't want to read the whole thread:</strong> This was an issue very likely stemming from this <code>unsafe</code>: <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Module.html#method.deserialize_file\">https://docs.rs/wasmtime/latest/wasmtime/struct.Module.html#method.deserialize_file</a>. The <code>deserialize_file</code> method requires that \"the file referenced must remain unchanged and a valid precompiled module for the entire lifetime of the Module\". The Zellij cache was being shared between instances that had a different compiler using the same cache indices for modules.</p>\n<p>I was not aware of this unsafe, and now that I am I'm going to get around it in one way or another on the Zellij side (likely keep the modules in memory if resource utilization / performance permits).</p>\n<p>Thanks everyone for the excellent support!</p>\n</blockquote>",
        "id": 502727338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740820059
    }
]