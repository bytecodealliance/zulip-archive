[
    {
        "content": "<p>erxiaozhou opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11419\">issue #11419</a>:</p>\n<blockquote>\n<h2>Summary</h2>\n<p>Wasmtime exhibits non-deterministic behavior where identical WebAssembly files produce different execution results based solely on their file paths. </p>\n<h2>Steps to Reproduce</h2>\n<ol>\n<li>Create two identical WASM files with different names:<br>\ncase: </li>\n</ol>\n<p><a href=\"https://github.com/user-attachments/files/21729973/rt3.zip\">rt3.zip</a></p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># Files are byte-for-byte identical</span>\nmd5sum<span class=\"w\"> </span>tt/rt3.wasm<span class=\"w\"> </span>tt/combine_out.wasm\n<span class=\"c1\"># b19d889a5d6828ace636f2669d68c919  tt/rt3.wasm</span>\n<span class=\"c1\"># b19d889a5d6828ace636f2669d68c919  tt/combine_out.wasm</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Run both files with identical Wasmtime options:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>wasmtime<span class=\"w\"> </span>run<span class=\"w\">   </span>tt/rt3.wasm\nwasmtime<span class=\"w\"> </span>run<span class=\"w\">  </span>tt/combine_out.wasm\n</code></pre></div>\n<h2>Expected Results</h2>\n<p>Both executions should produce identical results since the files are byte-for-byte identical.</p>\n<h2>Actual Results</h2>\n<ul>\n<li><code>tt/rt3.wasm</code>: Executes successfully (returncode 0)</li>\n<li><code>tt/combine_out.wasm</code>: Fails with <code>indirect call type mismatch</code> error</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">tt</span><span class=\"o\">/</span><span class=\"n\">combine_out</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">indirect</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">mismatch</span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">           </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">38</span><span class=\"o\">&gt;</span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">39</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<h2>Additional Evidence</h2>\n<h2>Environment</h2>\n<ul>\n<li><strong>Wasmtime version</strong>: v35.0.0 </li>\n<li><strong>Operating system</strong>: Ubuntu</li>\n<li><strong>Architecture</strong>: x86_64</li>\n<li><strong>Compilation</strong>: The WASM file appears to be compiled with optimization and contains indirect calls</li>\n</ul>\n<p>The following workarounds were tested but <strong>did not resolve</strong> the issue:</p>\n<ul>\n<li><code>--disable-cache</code></li>\n<li><code>--disable-address-map</code> </li>\n<li><code>--disable-memory-init-cow</code></li>\n<li><code>--opt-level 0</code></li>\n<li>Clearing <code>~/.cache/wasmtime/</code></li>\n<li>Using absolute paths vs relative paths</li>\n</ul>\n<p>I'm not sure whether the behavior can be reproduced, because it seems to be associated with the host.<br>\n</p>\n</blockquote>",
        "id": 533929901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1754986759
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11419#issuecomment-3179706436\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11419\">issue #11419</a>:</p>\n<blockquote>\n<p>This program imports <code>\"wasi_snapshot_preview1\" \"args_get\"</code> which is a source of non-determinisim for when the program is run under two paths. I've seen bugs in programs in the past related to the length of a filename causing different malloc behavior. Do you have reason to believe this is a bug in Wasmtime and not a bug in the guest? For example if the guest traps if the filename is larger than 10 characters that'll look like different behavior when in fact it's a bug in the guest. Do you, for example, have the source code this guest was generated from?</p>\n<p>I might recommend reading over <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html#external-fuzzing-campaigns\">https://docs.wasmtime.dev/contributing-fuzzing.html#external-fuzzing-campaigns</a> as well if you're doing fuzzing.</p>\n</blockquote>",
        "id": 533999237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755010530
    },
    {
        "content": "<p>erxiaozhou closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11419\">issue #11419</a>:</p>\n<blockquote>\n<h2>Summary</h2>\n<p>Wasmtime exhibits non-deterministic behavior where identical WebAssembly files produce different execution results based solely on their file paths. </p>\n<h2>Steps to Reproduce</h2>\n<ol>\n<li>Create two identical WASM files with different names:<br>\ncase: </li>\n</ol>\n<p><a href=\"https://github.com/user-attachments/files/21729973/rt3.zip\">rt3.zip</a></p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># Files are byte-for-byte identical</span>\nmd5sum<span class=\"w\"> </span>tt/rt3.wasm<span class=\"w\"> </span>tt/combine_out.wasm\n<span class=\"c1\"># b19d889a5d6828ace636f2669d68c919  tt/rt3.wasm</span>\n<span class=\"c1\"># b19d889a5d6828ace636f2669d68c919  tt/combine_out.wasm</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Run both files with identical Wasmtime options:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>wasmtime<span class=\"w\"> </span>run<span class=\"w\">   </span>tt/rt3.wasm\nwasmtime<span class=\"w\"> </span>run<span class=\"w\">  </span>tt/combine_out.wasm\n</code></pre></div>\n<h2>Expected Results</h2>\n<p>Both executions should produce identical results since the files are byte-for-byte identical.</p>\n<h2>Actual Results</h2>\n<ul>\n<li><code>tt/rt3.wasm</code>: Executes successfully (returncode 0)</li>\n<li><code>tt/combine_out.wasm</code>: Fails with <code>indirect call type mismatch</code> error</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">tt</span><span class=\"o\">/</span><span class=\"n\">combine_out</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">indirect</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">mismatch</span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">           </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">38</span><span class=\"o\">&gt;</span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">39</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<h2>Additional Evidence</h2>\n<h2>Environment</h2>\n<ul>\n<li><strong>Wasmtime version</strong>: v35.0.0 </li>\n<li><strong>Operating system</strong>: Ubuntu</li>\n<li><strong>Architecture</strong>: x86_64</li>\n<li><strong>Compilation</strong>: The WASM file appears to be compiled with optimization and contains indirect calls</li>\n</ul>\n<p>The following workarounds were tested but <strong>did not resolve</strong> the issue:</p>\n<ul>\n<li><code>--disable-cache</code></li>\n<li><code>--disable-address-map</code> </li>\n<li><code>--disable-memory-init-cow</code></li>\n<li><code>--opt-level 0</code></li>\n<li>Clearing <code>~/.cache/wasmtime/</code></li>\n<li>Using absolute paths vs relative paths</li>\n</ul>\n<p>I'm not sure whether the behavior can be reproduced, because it seems to be associated with the host.<br>\n</p>\n</blockquote>",
        "id": 534341617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755147267
    }
]