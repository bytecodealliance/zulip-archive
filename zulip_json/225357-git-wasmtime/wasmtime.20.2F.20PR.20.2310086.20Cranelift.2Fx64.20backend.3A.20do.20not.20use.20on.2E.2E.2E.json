[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086\">PR #10086</a>.</p>",
        "id": 495396300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737590843
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086\">PR #10086</a>.</p>",
        "id": 495396301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737590843
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086\">PR #10086</a> from <code>cfallin:lets-keep-our-basic-blocks-basic</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>In #9980, we saw that code copmiled with the single-pass register allocator has incorrect behavior. We eventually narrowed this down to the fact that the single-pass allocator is inserting code meant to be at the end of a block, just before its terminator, <em>between</em> two branches that form the terminator sequence. The allocator is correct; the bug is with Cranelift's x64 backend.</p>\n<p>When we produce instructions into a VCode container, we maintain basic blocks, and we have the invariant (usual for basic block-based IR) that only the last -- terminator -- instruction is a branch that can leave the block. Even the conditional branches maintain this invariant: though VCode is meant to be \"almost machine code\", we emit <em>two-target conditionals</em> that are semantically like \"jcond; jmp\". We then are able to optimize this inline during binary emission in the <code>MachBuffer</code>: the buffer knows about unconditional and conditional branches and will \"chomp\" branches off the tail of the buffer whenever they target the fallthrough block. (We designed the system this way because it is simpler to think about BBs that are order-invariant, i.e., not bake the \"fallthrough\" concept into the IR.) Thus we have a simpler abstraction but produce optimal terminator sequences.</p>\n<p>Unfortunately, when adding a branch-on-floating-point-compare lowering, we had the need to branch to a target if either of <em>two</em> conditions were true, and rather than add a new kind of terminator instruction, we added a \"one-armed branch\": conditionally branch to label or fall through. We emitted this in sequence right before the actual terminator, so semantically it was almost equivalent.</p>\n<p>I write \"almost\" because the register allocator <em>is</em> allowed to insert spills/reloads/moves between any two instructions. Here the distinct pieces of the terminator sequence matter: the allocator might insert something just before the last instruction, assuming the basic-block \"single in, single out\" invariant means this will always run with the block. With one-armed branches this is no longer true.</p>\n<p>The backtracking allocator (our original RA2 algorithm, and still the default today) will never insert code at the end of a block when it has multiple terminators, because it associates such block-start/end insertions with <em>edges</em>; so in such conditions it inserts instructions into the tops of successor blocks instead. But the single-pass allocator needs to perform work at the end of every block, so it will trigger this bug.</p>\n<p>This PR removes <code>JmpIf</code> and converts the br-of-fcmp lowering to use <code>JmpCondOr</code> instead, which is a pseudoinstruction that does <code>jcc1; jcc2; jmp</code>. This maintains the BB invariant and fixes the bug.</p>\n<p>Note that Winch still uses <code>JmpIf</code>, so we cannot remove it entirely: this PR renames it to <code>WinchJmpIf</code> instead, and adds a mechanism to assert failure if it is ever added to <code>VCode</code> (rather than emitted directly, as Winch's macro-assembler does). We could instead write Winch's <code>jmp_if</code> assembler function in terms of <code>JmpCond</code> with a fallthrough label that is immediately bound, and let the MachBuffer always chomp the jmp; I opted not to regress Winch compiler performance by doing this. If one day we abstract out the assembler further, we can remove <code>WinchJmpIf</code>.</p>\n<p>This is one of two instances of a \"one-armed branch\"; the other is s390x's <code>OneWayCondBr</code>, used in <code>br_table</code> lowerings, which we will address separately. Once we do, that will address #9980 entirely.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 495396302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737590844
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086\">PR #10086</a>.</p>",
        "id": 495396632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737591043
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086#issuecomment-2608540027\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086\">PR #10086</a>:</p>\n<blockquote>\n<p>(Thanks to @alexcrichton and others for bottoming this out into the root cause; discussed earlier today in the Cranelift meeting.)</p>\n</blockquote>",
        "id": 495396699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737591103
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086\">PR #10086</a>:</p>\n<blockquote>\n<p>In #9980, we saw that code compiled with the single-pass register allocator has incorrect behavior. We eventually narrowed this down to the fact that the single-pass allocator is inserting code meant to be at the end of a block, just before its terminator, <em>between</em> two branches that form the terminator sequence. The allocator is correct; the bug is with Cranelift's x64 backend.</p>\n<p>When we produce instructions into a VCode container, we maintain basic blocks, and we have the invariant (usual for basic block-based IR) that only the last -- terminator -- instruction is a branch that can leave the block. Even the conditional branches maintain this invariant: though VCode is meant to be \"almost machine code\", we emit <em>two-target conditionals</em> that are semantically like \"jcond; jmp\". We then are able to optimize this inline during binary emission in the <code>MachBuffer</code>: the buffer knows about unconditional and conditional branches and will \"chomp\" branches off the tail of the buffer whenever they target the fallthrough block. (We designed the system this way because it is simpler to think about BBs that are order-invariant, i.e., not bake the \"fallthrough\" concept into the IR.) Thus we have a simpler abstraction but produce optimal terminator sequences.</p>\n<p>Unfortunately, when adding a branch-on-floating-point-compare lowering, we had the need to branch to a target if either of <em>two</em> conditions were true, and rather than add a new kind of terminator instruction, we added a \"one-armed branch\": conditionally branch to label or fall through. We emitted this in sequence right before the actual terminator, so semantically it was almost equivalent.</p>\n<p>I write \"almost\" because the register allocator <em>is</em> allowed to insert spills/reloads/moves between any two instructions. Here the distinct pieces of the terminator sequence matter: the allocator might insert something just before the last instruction, assuming the basic-block \"single in, single out\" invariant means this will always run with the block. With one-armed branches this is no longer true.</p>\n<p>The backtracking allocator (our original RA2 algorithm, and still the default today) will never insert code at the end of a block when it has multiple terminators, because it associates such block-start/end insertions with <em>edges</em>; so in such conditions it inserts instructions into the tops of successor blocks instead. But the single-pass allocator needs to perform work at the end of every block, so it will trigger this bug.</p>\n<p>This PR removes <code>JmpIf</code> and converts the br-of-fcmp lowering to use <code>JmpCondOr</code> instead, which is a pseudoinstruction that does <code>jcc1; jcc2; jmp</code>. This maintains the BB invariant and fixes the bug.</p>\n<p>Note that Winch still uses <code>JmpIf</code>, so we cannot remove it entirely: this PR renames it to <code>WinchJmpIf</code> instead, and adds a mechanism to assert failure if it is ever added to <code>VCode</code> (rather than emitted directly, as Winch's macro-assembler does). We could instead write Winch's <code>jmp_if</code> assembler function in terms of <code>JmpCond</code> with a fallthrough label that is immediately bound, and let the MachBuffer always chomp the jmp; I opted not to regress Winch compiler performance by doing this. If one day we abstract out the assembler further, we can remove <code>WinchJmpIf</code>.</p>\n<p>This is one of two instances of a \"one-armed branch\"; the other is s390x's <code>OneWayCondBr</code>, used in <code>br_table</code> lowerings, which we will address separately. Once we do, that will address #9980 entirely.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 495396720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737591119
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086#pullrequestreview-2568584751\">PR review</a>:</p>\n<blockquote>\n<p>Very nice! Thanks for trying to be defensive with the low-level branching instruction bits as well. Kind of annoying that we are dealing with that. Hopefully a separate assembler library will help here...</p>\n</blockquote>",
        "id": 495398130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737592006
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086#discussion_r1926170456\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind writing a test for this case where all three branches can get chomped and replaced with a fallthrough?</p>\n</blockquote>",
        "id": 495398131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737592007
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086#issuecomment-2608695373\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086\">PR #10086</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:machinst\", \"cranelift:area:x64\", \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 495408783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737598007
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086\">PR #10086</a>.</p>",
        "id": 495408794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737598013
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086\">PR #10086</a>.</p>",
        "id": 495409126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737598214
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086#pullrequestreview-2568714658\">PR review</a>.</p>",
        "id": 495409193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737598265
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086#discussion_r1926261360\">PR review comment</a>:</p>\n<blockquote>\n<p>Done! It ends up chomping five branches in a row due to critical-edge splitting actually (two edges from one block to another; the edge blocks end up empty) which is neat to see.</p>\n</blockquote>",
        "id": 495409194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737598266
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086\">PR #10086</a>.</p>",
        "id": 495409387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737598375
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086\">PR #10086</a>.</p>",
        "id": 495409548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737598467
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10086\">PR #10086</a>.</p>",
        "id": 495413210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737600626
    }
]