[
    {
        "content": "<p><a href=\"https://github.com/kvcache\">kvcache</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10663\">Issue #10663</a>.</p>",
        "id": 513996317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745461460
    },
    {
        "content": "<p>kvcache opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10663\">issue #10663</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Any rust at all compiled with <code>--target wasm32-wasip2</code></p>\n<h3>Steps to Reproduce</h3>\n<p>Set up the host linker:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">link</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">my_own_interface</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">only_wasi_time</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now a guest compiled for <code>wasm32-wasip2</code> will not link, because it is missing wasi::cli/environment and several other interfaces.</p>\n<p>So update the host linker:</p>\n<hr>\n<p>After, to catch the imports that would be missing?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">link</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Component</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">my_own_interface</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">only_wasi_time</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">define_unknown_imports_as_traps</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This fails, due to defining duplicate imports for <code>my_own_interface</code> - which seems like not the behavior I want. After all, <code>my_own_interface</code> is implemented and does things!</p>\n<hr>\n<p>Before? But if I do that, I'll need to also enable shadowing <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">link</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Component</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">define_unknown_imports_as_traps</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">allow_shadowing</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">my_own_interface</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">only_wasi_time</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This worked very briefly, but then I submitted the code to CI which used a newer rust version with 0.2.3 instead of 0.2.0 wasi. <code>define_unknown_imports_as_traps</code> had apparently defined the 0.2.3 import as a trap, and allowed the shadowed 0.2.0 import to coexist silently.</p>\n<p>I updated to 0.2.5, and it's the same error. <code>unknown import: wasi:clocks/monotonic-clock@0.2.3#now has not been defined)</code></p>\n<h3>Expected Results</h3>\n<p>When I configure a Linker, only the unknown imports need are defined as traps when I use <code>define_unknown_imports_as_traps</code>.</p>\n<p>I can call <code>define_unknown_imports_as_traps</code> after setting up my linker to force any Component to still link, just with traps for other imports.</p>\n<p>I do not need to allow shadowing to <code>define_unknown_imports_as_traps</code>.</p>\n<h3>Actual Results</h3>\n<p><code>define_unknown_imports_as_traps</code> defines all imports, and defines them as traps even when they are linkable to the Component. This imposes a strict equality constraint on semantic versions of WIT, which only works if you are exactly version aligned.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 0.32.0</p>\n<p>Operating system: osx, AL2023</p>\n<p>Architecture: aarch64</p>\n<h3>Extra Info</h3>\n<p>I'm building a functions as a service product, where users upload wasms. I can't support all of WASI, but I can support some things like time.</p>\n<p>I worked around this by:</p>\n<ol>\n<li>removing <code>define_unknown_imports_as_traps</code></li>\n<li>removing <code>allow_shadowing</code></li>\n<li>manually implementing unsupported interfaces with <code>Err(wasmtime::Error::msg(\"unsupported wasi interface. Contact support@momentohq.com for more information\"))</code></li>\n</ol>\n<p>This is going to be a better approach for my current project, but <code>define_unknown_imports_as_traps</code> was a similar functionality (can you support a custom message string?) without needing to write a massive amount of unimplemented boilerplate.</p>\n<p>for posterity, the interfaces to implement or stub for <code>wasm32-wasip2</code> are</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">time</span>\n<span class=\"n\">environment</span>\n<span class=\"n\">error</span>\n<span class=\"n\">exit</span>\n<span class=\"n\">filesystem_preopens</span>\n<span class=\"n\">filesystem_types</span>\n<span class=\"n\">stderr</span>\n<span class=\"n\">stdin</span>\n<span class=\"n\">stdout</span>\n<span class=\"n\">streams</span>\n</code></pre></div>\n<p>Thanks for this awesome project!</p>\n</blockquote>",
        "id": 513996318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745461462
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10663#issuecomment-2828866576\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10663\">issue #10663</a>:</p>\n<blockquote>\n<p>Thanks for filing this report, and thanks for all the detail! I've been looking into this and I'm unfortunately not sure how best to resolve this. I'm going to write up my learnings here and see what other folks think about this as well.</p>\n<p>Your first attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">link</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Component</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">my_own_interface</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">only_wasi_time</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">define_unknown_imports_as_traps</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>pretty much exactly follows the <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8645\">original issue</a> motivating the <code>define_unknown_imports_as_traps</code> function, and thus the intention was that this would work. You say though that this fails due to duplicate imports for <code>my_own_interface</code>, which is basically a bug in the implementation. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/99507c2cb71793e33ad7fe96ccf01fe00079834c/crates/wasmtime/src/runtime/component/linker.rs#L328\">Here</a> is where despite <code>my_own_interface</code> being defined we continue down below because we're dealing with an instance import. A few lines down though <a href=\"https://github.com/bytecodealliance/wasmtime/blob/99507c2cb71793e33ad7fe96ccf01fe00079834c/crates/wasmtime/src/runtime/component/linker.rs#L344\">this fails</a> because creating a new <code>instance</code> requires that the name is unique and not seen before, but in this case it was already define.</p>\n<p>This bug is, I believe, basically a showstopper. If you define _any_ instance in a linker and then also call <code>define_unknown_imports_as_traps</code> then this won't work. This is just a mistake though and definitely not the originally intended behavior.</p>\n<p>Your second attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">link</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Component</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">define_unknown_imports_as_traps</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">allow_shadowing</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">my_own_interface</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">only_wasi_time</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// 0.2.0 or 0.2.5</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>fails regardless of whether you define WASI 0.2.0 or 0.2.5 in the linker when the guest module requests 0.2.3. This is an unfortunate interaction with how the <code>Linker</code> handles multiple definitions of the same interface at different versions. What's happening is that the first call to <code>define_unknown_imports_as_traps</code> is defining trapping functions for 0.2.3. The second call to <code>only_wasi_time::add_to_linker</code> then defines either 0.2.0 or 0.2.5, depending on your host. In both cases though the component in question uses the trapping versions, not the host versions. This is due to the fact that <code>Linker</code> will provide an exact semver match if one is available, and otherwise fall back to a compatible version. Here an exact match is available due to <code>define_unknown_imports_as_traps</code> happening first (it defines 0.2.3) and the 0.2.0 and 0.2.5 versions never get used due to the component importing 0.2.3.</p>\n<hr>\n<p>So ok I think that explains all the behavior you're seeing. The first one is definitely a bug and the second is an unfortunate and/or confusing interaction with semver requirements. Ideally though it shouldn't matter as we should just get the first iteration working.</p>\n<p>Ok so how to get that working? That's what I don't know how to do. Right now <code>define_unknown_imports_as_traps</code> is defined in terms of mostly other public methods of <code>Linker</code> which is pretty nice from a maintainability point of view. The problem with this though is how to recurse into instances? We have a few cases:</p>\n<ol>\n<li>If a new name <code>foo:bar/baz@1.2.3</code> has never been defined, at any version, it's obvious to just make a definition and define all internal pieces as traps.</li>\n<li>A name <code>foo:bar/baz@1.2.3</code> might have already been defined, but some components of the instance may be missing (e.g. you implement half of the <code>wasi:clocks/monotonic-clock</code> interface)</li>\n<li>A name <code>foo:bar/baz@1.2.3</code> was defined at a different version. Ideally we want to use functions/resources from that since they're \"compatible\" and we only want to define new functions/resources as stubs.</li>\n</ol>\n<p>Above (1) is easy to do, but (2) and (3) raise unfortunate questions. Right now there's no concept of \"reopening\" an instance to add more definitions. Once you call <code>Linker::instance(...)</code> for example you've locked that name forever and can't retroactively add more items into it. Such a behavior change would be required to implement (2) or (3). For (3) though we could be adding functions meant for one version of an interface to another version of an interface, which also feels a bit weird!</p>\n<hr>\n<p>So finally, what I'm left with. My thoughts on how to approach this are:</p>\n<ol>\n<li>Redefine this function as <code>define_unknown_interfaces_as_traps</code>. That's much clearer to me and we basically don't have to deal with cases (2) or (3) above. Instead the function is documented as wholly unknown interfaces get trapping functions. Partially implemented interfaces, though, are still a link-time error. This I don't think is a great experience because let's say your host provides <code>wasi:clocks/monotonic-clock@0.2.0</code>, but in 0.2.10 a new function is added. In theory you want that to be a trapping stub until the host implements it if you want the high-level goal of \"just implement missing functions as traps\".</li>\n<li>Implement \"reopening the instance\" behavior. This means that redefining an instance is no longer an error for any <code>Linker</code> methods. Instead it means you'd add more items to existing instances. That would neatly solve (2) above, and otherwise this function would document in the case of (3) that new functions might be added to interfaces of different versions if one is matching. A bit odd from a purely theoretical point of view, but otherwise fits-the-bill from a practical point of view.</li>\n<li>Completely reimplement <code>define_unknown_imports_as_traps</code>. Instead of defining items individually instead just set a boolean in <code>Linker</code> or something like that. This would affect the type-checking and pre-instantiation phase where they would both have to consult this boolean when dealing with non-present imports. Not great from a maintainability point of view (this feature leaks into the rest of <code>Linker</code>) but perhaps the cleanest from a theoretical/conceptual point of view.</li>\n</ol>\n<p>Personally I'm sort of leaning towards (2). Does anyone else have particular thoughts on directions to take this though?</p>\n</blockquote>",
        "id": 514229496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745528991
    },
    {
        "content": "<p>kvcache <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10663#issuecomment-2830963979\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10663\">issue #10663</a>:</p>\n<blockquote>\n<p>For my own part, I just needed a nudge to go ahead and hammer out the entire wasm32-wasip2 import set. I do not want to have unknown imports trap at runtime - I want them to fail linking, so my users know as soon as possible that their application is not runnable. That's not practical behavior to create for <code>std</code>, unfortunately, because as far as I know making some <code>wasm32-momento</code> target would be a massive, fragmenting undertaking.</p>\n<p>I think there's a [4] which might be \"remove define_unknown_interfaces_as_traps\" <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>. I'm sure there are some useful cases but it seems like a massive footgun. It was painful to stub out all the wasip2 imports, but it's much more maintainable and clear this way.</p>\n<p>Maybe there's a [5] too, which would be sort of a combination of [2] and [4].<br>\n<code>add_to_linker_and_trap_unknown_imports()</code> would be great - in this way you could deal with problem_case2, without globally permitting every unknown import on every interface the linker touches.<br>\nI think you'd also want something like an <code>UnknownModule::new(\"foo:bar/baz@1.2.4\").add_to_linker_trap_unknown_imports()</code> to let people opt in to other interfaces having a behavior like this.</p>\n<p>I do not dislike solution [1] or [2], but I'd love [5]!</p>\n</blockquote>",
        "id": 514425367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745600778
    }
]