[
    {
        "content": "<p>rvolosatovs opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a> from <code>rvolosatovs:feat/p2-module</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Introduce a <code>p2</code> module in WASI crates as suggested in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10061#pullrequestreview-2565638530\">https://github.com/bytecodealliance/wasmtime/pull/10061#pullrequestreview-2565638530</a></p>\n<p>This will allow us to iterate on wasip3 without breaking changes</p>\n<p>I tried to minimize the diff and only moved the WIT files, generated bindings and host implementations to <code>p2</code> modules.<br>\nAbstractions (like <code>WasiCtx</code>) are left in place, since it's likely that <code>p3</code> modules will reuse the same abstractions.</p>\n</blockquote>",
        "id": 495252054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737543028
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 495254116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737543627
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>:</p>\n<blockquote>\n<p>Introduce a <code>p2</code> module in WASI crates as suggested in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10061#pullrequestreview-2565638530\">https://github.com/bytecodealliance/wasmtime/pull/10061#pullrequestreview-2565638530</a></p>\n<p>This will allow us to iterate on wasip3 without breaking changes</p>\n<p>I tried to minimize the diff and only moved the WIT files, generated bindings and host implementations to <code>p2</code> modules.<br>\nAbstractions (like <code>WasiCtx</code>) are left in place, since it's likely that <code>p3</code> modules will (mostly) reuse the same abstractions.</p>\n</blockquote>",
        "id": 495254520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737543739
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 495254828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737543821
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 495255190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737543931
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 495255522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737544026
    },
    {
        "content": "<p><strong>rvolosatovs</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a> as ready for review.</p>",
        "id": 495255777,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737544102
    },
    {
        "content": "<p><strong>rvolosatovs</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 495255779,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737544103
    },
    {
        "content": "<p><strong>rvolosatovs</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 495255781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737544104
    },
    {
        "content": "<p><strong>rvolosatovs</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 495255783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737544104
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>:</p>\n<blockquote>\n<p>Introduce a <code>p2</code> module in WASI crates as suggested in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10061#pullrequestreview-2565638530\">https://github.com/bytecodealliance/wasmtime/pull/10061#pullrequestreview-2565638530</a></p>\n<p>This will allow us to iterate on wasip3 without breaking changes</p>\n<p>I tried to minimize the diff and only moved the WIT files, generated bindings and host implementations to <code>p2</code> modules.<br>\nAbstractions (like <code>WasiCtx</code>) are left in place, since it's likely that <code>p3</code> modules will (mostly) reuse the same abstractions.</p>\n<p>cc @pchickey </p>\n</blockquote>",
        "id": 495255851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737544125
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>:</p>\n<blockquote>\n<p>Introduce a <code>p2</code> module in WASI crates as suggested in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10061#pullrequestreview-2565638530\">https://github.com/bytecodealliance/wasmtime/pull/10061#pullrequestreview-2565638530</a></p>\n<p>This will allow us to iterate on wasip3 without breaking changes</p>\n<p>I tried to minimize the diff and only moved the WIT files, generated bindings and host implementations to <code>p2</code> modules.<br>\nAbstractions (like <code>WasiCtx</code>) are left in place, since it's likely that <code>p3</code> modules will (mostly) reuse the same abstractions.</p>\n<p>Since <code>wasi-nn</code> seemed a bit different from other crates, I left it as-is. I'm also not aware of any plans of introducing a new version of it for wasip3.<br>\ncc @pchickey </p>\n</blockquote>",
        "id": 495256694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737544377
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 495262755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737546259
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 495263234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737546406
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>:</p>\n<blockquote>\n<p>Introduce a <code>p2</code> module in WASI crates as suggested in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10061#pullrequestreview-2565638530\">https://github.com/bytecodealliance/wasmtime/pull/10061#pullrequestreview-2565638530</a></p>\n<p>This will allow us to iterate on wasip3 without breaking changes</p>\n<p>I tried to minimize the diff and only moved the WIT files, generated bindings and host implementations to <code>p2</code> modules.<br>\nAbstractions (like <code>WasiCtx</code>) are left in place, since it's likely that <code>p3</code> modules will (mostly) reuse the same abstractions.</p>\n<p>Since <code>wasi-nn</code> seemed a bit different from other crates, I left it as-is. I'm also not aware of any plans of introducing a new version of it for wasip3.</p>\n<p>I also opted not to rename existing <code>preview1</code> and <code>preview0</code> modules/features to avoid breaking changes.<br>\ncc @pchickey </p>\n</blockquote>",
        "id": 495263645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737546536
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 495336794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737567296
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073#issuecomment-2607872021\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>:</p>\n<blockquote>\n<p>Thanks for this! I'm going to continue the discussion from <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10061\">https://github.com/bytecodealliance/wasmtime/pull/10061</a> over here since this looks like it's going to be first. I'll note that whatever we end up doing here for p3 is a relatively big change to consider depending on how it ends up which sort of borders along the lines of \"maybe this should have an RFC\". For example upon reading reading <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10061#pullrequestreview-2565638530\">Pat's comment</a> I initially reacted thinking that we should instead do something else. After thinking more though this seems like a more reasonable approach.</p>\n<p>That being said though I'd at least personally still have thoughts on this, for example:</p>\n<ul>\n<li>I'm not sure if we want to keep a <code>pub use p2::*</code> reexport myself.</li>\n<li>This probably wants to (eventually, not necessarily here), come with a rename of the <code>preview0</code> and <code>preview1</code> modules to <code>p0</code> and <code>p1</code>.</li>\n<li>We might want to hold off on changing other <code>wasmtime-wasi-*</code> crates for now until APIs are ready for those. Basically pave a path with the core <code>wasmtime-wasi</code> crate but otherwise defer the actual changes to future crates to when we've shaken out all the issues here.</li>\n</ul>\n<p>I'll also note though that I'm not necessarily saying this requires an RFC. I find though that it's not always the greatest medium to have a design discussion when there's a PR because it's easy to get into the mindset of \"well the PR does it this way so I guess we'll just go with that\". RFCs have their own downsides of course though.</p>\n<p>In the abstract though I think we should ideally design for where we want to end up a year or two from now. At that point WASIp3 is stable and will be the \"primary\" APIs that folks use. Given our destination end point first then I think we can work backwards and consider things like breaking changes, refactorings, migration paths, etc. I've historically found that only designing in incremental steps from where we are today, for example trying to minimize breaking changes, doesn't always result in the best design.</p>\n</blockquote>",
        "id": 495337897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737567677
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073#issuecomment-2608348665\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>:</p>\n<blockquote>\n<p>I agree with all of Alex's broad strokes here.</p>\n<p>I also want to point out that landing PRs to support wasip3 in wasmtime <code>main</code> doesn't feel urgent to me. In the corresponding point in the p2 development process, we forked off a prototyping repo where we could thrash things around a bunch and not worry about compatibility as we iterated on the specs and implementations towards working code. So, aside from benefiting from more discussion of our desired end state and working backwards to figure out the changes and migrations to get there, I personally would benefit from seeing a more fleshed out implementation of p3 looks like. Currently it is spread among several different authors, repos, and PRs. Additionally, right now my employer is asking me to solve a totally different set of problems, so I don't have the bandwidth to engage with the p3 implementation process deep enough to collect all that context.</p>\n<blockquote>\n<p>I'm not sure if we want to keep a pub use p2::* reexport myself.<br>\nAgree, I don't like <code>use *</code>. Please list all of the identifiers re-exported. (Is that the aspect @alexcrichton objects to?)</p>\n</blockquote>\n<blockquote>\n<p>This probably wants to (eventually, not necessarily here), come with a rename of the preview0 and preview1 modules to p0 and p1.<br>\nEventually to never would also be my prioritization. Consistency is nice in the abstract, but in this case I don't think its very important, since the interfaces being exposed by preview0 and 1 are for witx, and the rest are for components anyway. And its definitely not urgent to change this, since it would break existing users.</p>\n</blockquote>\n<blockquote>\n<p>We might want to hold off on changing other wasmtime-wasi-* crates for now until APIs are ready for those. Basically pave a path with the core wasmtime-wasi crate but otherwise defer the actual changes to future crates to when we've shaken out all the issues here.</p>\n</blockquote>\n<p>Agree - lets come up with a repeatable pattern that can be applied to other crates as needed, but lets start by only applying it to wasmtime-wasi now and apply it to others immediately before landing a 0.3-draft impl in those. That way, if we discover in the buildout of wasmtime-wasi that the pattern isnt quite right, we can course-correct with a minimum of thrash.</p>\n</blockquote>",
        "id": 495380491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737582825
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073#issuecomment-2608348665\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>:</p>\n<blockquote>\n<p>I agree with all of Alex's broad strokes here.</p>\n<p>I also want to point out that landing PRs to support wasip3 in wasmtime <code>main</code> doesn't feel urgent to me. In the corresponding point in the p2 development process, we forked off a prototyping repo where we could thrash things around a bunch and not worry about compatibility as we iterated on the specs and implementations towards working code. So, aside from benefiting from more discussion of our desired end state and working backwards to figure out the changes and migrations to get there, I personally would benefit from seeing a more fleshed out implementation of p3 looks like. Currently it is spread among several different authors, repos, and PRs. Additionally, right now my employer is asking me to solve a totally different set of problems, so I don't have the bandwidth to engage with the p3 implementation process deep enough to collect all that context.</p>\n<blockquote>\n<p>I'm not sure if we want to keep a pub use p2::* reexport myself.</p>\n</blockquote>\n<p>Agree, I don't like <code>use *</code>. Please list all of the identifiers re-exported. (Is that the aspect @alexcrichton objects to?)</p>\n<blockquote>\n<p>This probably wants to (eventually, not necessarily here), come with a rename of the preview0 and preview1 modules to p0 and p1.</p>\n</blockquote>\n<p>Eventually to never would also be my prioritization. Consistency is nice in the abstract, but in this case I don't think its very important, since the interfaces being exposed by preview0 and 1 are for witx, and the rest are for components anyway. And its definitely not urgent to change this, since it would break existing users.</p>\n<blockquote>\n<p>We might want to hold off on changing other wasmtime-wasi-* crates for now until APIs are ready for those. Basically pave a path with the core wasmtime-wasi crate but otherwise defer the actual changes to future crates to when we've shaken out all the issues here.</p>\n</blockquote>\n<p>Agree - lets come up with a repeatable pattern that can be applied to other crates as needed, but lets start by only applying it to wasmtime-wasi now and apply it to others immediately before landing a 0.3-draft impl in those. That way, if we discover in the buildout of wasmtime-wasi that the pattern isnt quite right, we can course-correct with a minimum of thrash.</p>\n</blockquote>",
        "id": 495380507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737582834
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073#issuecomment-2611132020\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>:</p>\n<blockquote>\n<p>Oh to clarify for the pub use personally I prefer names to only be in one location as opposed to multiple, so I would advocate for moving most of the preexisting crate to <code>pub mod p2</code> and leaving out the top level re-export. </p>\n<p>Roman would you be up for making that change and reverting other crates to their original state? That I think should create enough space to start experimenting with p3 in the main crate would be my hope.</p>\n</blockquote>",
        "id": 495595384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737670726
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073#issuecomment-2615559720\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oh to clarify for the pub use personally I prefer names to only be in one location as opposed to multiple, so I would advocate for moving most of the preexisting crate to <code>pub mod p2</code> and leaving out the top level re-export.</p>\n<p>Roman would you be up for making that change and reverting other crates to their original state? That I think should create enough space to start experimenting with p3 in the main crate would be my hope.</p>\n</blockquote>\n<p>For my third attempt starting from <code>main</code>, I've went with a slightly different approach, which <em>may</em> eventually converge with the approach we're discussing here. In particular, I've split out each WASI package implementation into a separate crate:</p>\n<ul>\n<li><code>wasmtime-wasi-clocks</code></li>\n<li><code>wasmtime-wasi-random</code></li>\n<li><code>wasmtime-wasi-filesystem</code></li>\n<li><code>wasmtime-wasi-sockets</code></li>\n<li><code>wasmtime-wasi-cli</code></li>\n</ul>\n<p>Each of the crates contains <code>p3</code> module with generated bindings and implementation. Eventually, <code>p2</code> modules could be introduced to these crates as well.</p>\n<p>From the embedder's perspective:</p>\n<ul>\n<li><code>wasmtime_wasi_cli::p2::add_to_linker</code> would function analogous to existing <code>wasmtime_wasi::add_to_linker</code>, linking in all <code>wasi:cli/imports@0.2.x</code> (<code>clocks</code>,  <code>random</code> etc.), it's gated behind <code>p2</code> feature flag</li>\n<li><code>wasmtime_wasi_cli::p3::add_to_linker</code> would link in all <code>wasi:cli/imports@0.3.x</code> (behind <code>p3</code> feature flag)</li>\n<li><code>wasmtime_wasi_cli::add_to_linker</code> would link in <em>both</em> <code>wasi:cli/imports@0.2.x</code> and <code>wasi:cli/imports@0.3.x</code> (behavior can be configured with crate feature flags)</li>\n</ul>\n<p>The exact same strategy is taken for other proposals, like clocks, random etc.</p>\n<p>The benefit is that embedders can select which WASI interface implementations to link in as opposed to all-or-nothing approach (or, all/nothing/wasi:io now that <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">https://github.com/bytecodealliance/wasmtime/pull/10036</a> is merged).</p>\n<p>This approach also insulates the p3 work from changes in <code>wasmtime_wasi</code> (like #10036) and, in fact, avoids any breaking changes for users.</p>\n<p>With the above in mind, I feel like it may be premature to break all downstream <code>wasmtime_wasi</code> users at this point by <em>moving</em> (as opposed to duplicating) current bindings into a <code>p2</code> namespace.<br>\nI feel like <code>wasmtime-wasi-cli</code> crate could instead serve as a <em>replacement</em> for <code>wasmtime_wasi</code> crate in it's current shape. In that scenario <code>wasmtime_wasi</code> crate may still serve a purpose of a minimal \"utility\" crate (however I'd rather find a way to deprecate it altogether) and <em>most</em> downstream users would still only need to import a <em>single</em> crate (like <code>wasmtime_wasi_cli</code>)</p>\n<p>I'll add an agenda item to next Wasmtime bi-weekly meeting to discuss this proposal in more detail.</p>\n<p>For now I'll continue with crate-per-package approach.</p>\n</blockquote>",
        "id": 496104177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737978931
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073#issuecomment-2616859748\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>:</p>\n<blockquote>\n<p>I'm not sure I'm sold on the idea of multiple crates here, but if you'd prefer to discuss in a meeting I think that's reasonable too. The <code>wasmtime-wasi-io</code> split was some work @pchickey did for <code>no_std</code> compat which I think is still ongoing. In that sense I wouldn't necessarily consider it \"final\" in the sense of all other crates should look like that. In retrospect one other alternative design would be for a <code>std</code> feature that gates most of the crate except the <code>wasmtime-wasi-io</code> bits. In general I'm not sure if there's much use case for slicing and dicing WASI impls so much given how tightly coupled everything is right now (e.g. if you have <code>cap-std</code> you have the entirety of all these crates)</p>\n<p>I'm also not personally sold on an <code>add_to_linker</code> which adds 0.2 and 0.3 functionality just yet. In the future I could see 0.2 becoming legacy and not desired by default, so it'd need a way to opt-out anyway.</p>\n</blockquote>",
        "id": 496209299,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738010892
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 511220917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744216984
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 511227853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744219217
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 511231399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744220403
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 511233496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744221144
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 511418075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744293337
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 511419998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744293783
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 511425931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744295159
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 511428770,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744295758
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 511431148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744296361
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>.</p>",
        "id": 511431262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744296385
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10073\">PR #10073</a>:</p>\n<blockquote>\n<p>Introduce a <code>p2</code> module in WASI crates as suggested in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10061#pullrequestreview-2565638530\">https://github.com/bytecodealliance/wasmtime/pull/10061#pullrequestreview-2565638530</a></p>\n<p>I've moved to <code>wasmtime_wasi::p2</code> submodule:</p>\n<ul>\n<li>wasip2 WIT files</li>\n<li>generated wasip2 bindings</li>\n<li>wasip2 host implementations</li>\n<li>wasip2 context, view and impl structs</li>\n</ul>\n<p>I've left a few non-p2 specific things in <code>wasmtime_wasi</code> top-level, which I was able to reuse for p3 impl in <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/115\">https://github.com/bytecodealliance/wasip3-prototyping/pull/115</a></p>\n<p>I've added 3 more commits on top of the move, which seemed to make sense for consistency:</p>\n<ul>\n<li>rename <code>WasiCtx</code> -&gt; <code>WasiP2Ctx</code></li>\n<li>rename <code>WasiView</code> -&gt; <code>WasiP2View</code></li>\n<li>rename <code>WasiImpl</code> -&gt; <code>WasiP2Impl</code></li>\n</ul>\n<p>I opted not to rename existing <code>preview1</code> and <code>preview0</code> modules/features to avoid breaking changes.<br>\ncc @pchickey </p>\n</blockquote>",
        "id": 511433000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744296781
    }
]