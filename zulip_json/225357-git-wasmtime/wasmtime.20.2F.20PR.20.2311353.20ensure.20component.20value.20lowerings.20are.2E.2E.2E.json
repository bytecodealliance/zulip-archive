[
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353\">PR #11353</a>.</p>",
        "id": 531918519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753905240
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353\">PR #11353</a>.</p>",
        "id": 531918522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753905240
    },
    {
        "content": "<p>dicej opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353\">PR #11353</a> from <code>dicej:lower-on-worker-fiber</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This is necessary because lowering a component value may require calling realloc, which may involve epoch interruption, which may require suspending the current fiber.  Which obviously doesn't work if we're not running in a fiber. Also, we need to make sure there are no host frames on the stack.</p>\n<p>Note the use of <code>Mutex</code> for <code>WorkItem::WorkerFunction</code> and <code>WorkerItem::Function</code>.  We never lock the mutex -- it's only used to plumb through the inner, non-<code>Sync</code> value while satisfying the compiler that <code>Store</code> is <code>Sync</code>.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 531918523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753905240
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353#issuecomment-3137645041\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353\">PR #11353</a>:</p>\n<blockquote>\n<p>This should fix <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11348\">https://github.com/bytecodealliance/wasmtime/issues/11348</a></p>\n</blockquote>",
        "id": 531919216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753905514
    },
    {
        "content": "<p>dicej edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353#issuecomment-3137645041\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353\">PR #11353</a>:</p>\n<blockquote>\n<p>This should fix <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11348\">https://github.com/bytecodealliance/wasmtime/issues/11348</a> (and I've verified tests pass with Alex's assertion).</p>\n</blockquote>",
        "id": 531919308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753905546
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353#pullrequestreview-3073143507\">PR review</a>:</p>\n<blockquote>\n<p>Nice! That was easier to fix than expected. Happy to see this merged whenever, but a few thoughts too:</p>\n<ul>\n<li>For <code>Mutex</code> I've been wondering if we should have a wrapper of some kind that sort of looks like a <code>Mutex</code> but is just a newtype wrapper. Basically it would disallow access to the underlying data with <code>&amp;self</code> and would exclusively provide access via <code>&amp;mut self</code>. That would support <code>unsafe impl&lt;T: Send&gt; Sync for TheWrapper&lt;T&gt;</code>. There's another example of this in the codebase <a href=\"https://github.com/bytecodealliance/wasmtime/blob/69fecf4e7d914156ff2a2bf3e105fed5640c2a82/crates/wasmtime/src/runtime/store/func_refs.rs#L91-L94\">here</a> too. The only benefit of this would be avoiding the cost of creating the mutex, which I don't think is too costly nowadays, so no need to get to this any time soon (but would be good to keep in our back pocket I think).</li>\n<li>Could the assertion be added in this PR too? I'm imagining something like where do leave it in <code>LowerContext::new</code> and then for the \"fast path\" case we provide an alternate constructor which is something like <code>LowerContext::new_assert_no_realloc</code> which would panic if <code>realloc</code> is called (and avoid the debug assertion). Or something like that, basically still have the debug assertion as much as we can but provide a hatch for the fast-path we're thinking of adding.</li>\n</ul>\n</blockquote>",
        "id": 531920358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753905885
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353\">PR #11353</a>.</p>",
        "id": 531922383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753906567
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353#issuecomment-3137695699\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353\">PR #11353</a>:</p>\n<blockquote>\n<p>I just added the assertion.  I had to gate it on the <code>component-model-async</code> feature because <code>StoreOpaque::with_blocking</code> is gated on that.  Alternatively, we could ungate them both.</p>\n</blockquote>",
        "id": 531922608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753906645
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353#issuecomment-3137702016\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353\">PR #11353</a>:</p>\n<blockquote>\n<p>Agreed about using something simpler than a <code>Mutex</code> to make stuff like this <code>Sync</code> -- performance aside, it's confusing to readers to have <code>Mutex</code>s all over the place that are never locked.</p>\n</blockquote>",
        "id": 531922857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753906749
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353#issuecomment-3137705363\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353\">PR #11353</a>:</p>\n<blockquote>\n<p>It's ok to leave it gated for now, eventually I think we're going to want to lift more out of the feature gate but it's ok to defer that to later.</p>\n</blockquote>",
        "id": 531923005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753906807
    },
    {
        "content": "<p>dicej merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11353\">PR #11353</a>.</p>",
        "id": 531932296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753910259
    }
]