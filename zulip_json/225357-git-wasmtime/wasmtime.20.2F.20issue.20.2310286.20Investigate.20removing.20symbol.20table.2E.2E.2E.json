[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10286\">issue #10286</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10285\">https://github.com/bytecodealliance/wasmtime/pull/10285</a> it was shown that sections such as <code>.symtab</code>, <code>.strtab</code>, and <code>.shstrtab</code> account for a non-trivial portion of the size of an object file:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">objdump</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">section</span><span class=\"o\">-</span><span class=\"n\">headers</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip1</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">hello</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"o\">-</span><span class=\"mh\">0x00</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n\n<span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip1</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">hello</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"o\">-</span><span class=\"mh\">0x00</span><span class=\"p\">.</span><span class=\"n\">cwasm</span><span class=\"p\">:</span><span class=\"w\">       </span><span class=\"nc\">file</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">elf64</span><span class=\"o\">-</span><span class=\"n\">littleriscv</span>\n\n<span class=\"n\">Sections</span><span class=\"p\">:</span>\n<span class=\"nc\">Idx</span><span class=\"w\"> </span><span class=\"n\">Name</span><span class=\"w\">              </span><span class=\"n\">Size</span><span class=\"w\">     </span><span class=\"n\">VMA</span><span class=\"w\">              </span><span class=\"n\">Type</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"w\">             </span><span class=\"mi\">00011</span><span class=\"n\">bdc</span><span class=\"w\"> </span><span class=\"mi\">0000000000000000</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">symtab</span><span class=\"w\">           </span><span class=\"mi\">00001788</span><span class=\"w\"> </span><span class=\"mi\">0000000000000000</span>\n<span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">strtab</span><span class=\"w\">           </span><span class=\"mi\">000040</span><span class=\"n\">f0</span><span class=\"w\"> </span><span class=\"mi\">0000000000000000</span>\n<span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">shstrtab</span><span class=\"w\">         </span><span class=\"mi\">00000089</span><span class=\"w\"> </span><span class=\"mi\">0000000000000000</span>\n</code></pre></div>\n<p>They're almost 25% of the size of the <code>.text</code> section itself, wow!</p>\n<p>These sections are occasionally useful to have in a <code>*.cwasm</code> when profiling. Native profilers/debuggers can often use these sections and think that a dynamic library is loaded here when the profiler doesn't otherwise have native jit integration (e.g. via perfmap, jitdump, etc). In that sense I think it's useful to still emit these by default, but we should have a <code>Config::*</code> option for removing them.</p>\n<p>In theory it should be possible to just directly remove them entirely and nothing should break in Wasmtime itself. Famous last words though. I'm not 100% sure how we'd do this but I suspect we'd use the <code>object</code> crate a bit differently and maybe assign the same empty string to all symbol names or somehow not assign symbols at all (I'm not sure if that's possible?). </p>\n<p>If something in Wasmtime does break from the removal of these symbols we should fix that to not rely on symbol names and instead use something in the compiled metadata here and there instead. For example function indices, offsets, etc. Exactly what the solution might look like depends on what's using a symbol (if any) and in what context it's using it.</p>\n</blockquote>",
        "id": 501654315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740433483
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10286#issuecomment-2679722029\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10286\">issue #10286</a>:</p>\n<blockquote>\n<p>cc @posborne </p>\n</blockquote>",
        "id": 501654351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740433500
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime:code-size label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10286\">Issue #10286</a>.</p>",
        "id": 502345390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740679089
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10286#issuecomment-2722459312\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10286\">issue #10286</a>:</p>\n<blockquote>\n<p>I did some quick experiments to prove out that for a basic wasm32-wasip1 rust hello world app, things still work fine with a few extra sections stripped.  This is against the current main which has the previous round optimizations from #10285 in tree.</p>\n<p>Compile for pulley 64 (with opt-level=s):</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>cargo<span class=\"w\"> </span>run<span class=\"w\"> </span>--release<span class=\"w\"> </span>--<span class=\"w\"> </span>compile<span class=\"w\"> </span>--target<span class=\"w\"> </span>pulley64<span class=\"w\"> </span>-O<span class=\"w\"> </span>opt-level<span class=\"o\">=</span>s<span class=\"w\"> </span>-O<span class=\"w\"> </span>memory-init-cow<span class=\"o\">=</span>n<span class=\"w\"> </span>-o<span class=\"w\"> </span>hello-wasm-world.cwasm<span class=\"w\"> </span>hello-wasm-world.wasm\n<span class=\"go\">    Finished `release` profile [optimized] target(s) in 0.43s</span>\n<span class=\"go\">     Running `target/release/wasmtime compile --target pulley64 -O opt-level=s -O memory-init-cow=n -o hello-wasm-world.cwasm hello-wasm-world.wasm`</span>\n</code></pre></div>\n<p>Strip using <code>llvm-strip</code>; the GNU toolchain strip does not appear to like our ELF files, though I didn't dig into it:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>llvm-strip<span class=\"w\"> </span>hello-wasm-world.cwasm<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--no-strip-all<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>-R<span class=\"w\"> </span>.symtab<span class=\"w\"> </span>-R<span class=\"w\"> </span>.strtab<span class=\"w\"> </span>-R<span class=\"w\"> </span>.wasmtime.addrmap<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>-o<span class=\"w\"> </span>hello-wasm-world-stripped.cwasm\n</code></pre></div>\n<p>Comparison of sections in base <code>cwasm</code> with stripped:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>llvm-readelf<span class=\"w\"> </span>-S<span class=\"w\"> </span>hello-wasm-world.cwasm\n<span class=\"go\">There are 12 section headers, starting at offset 0x2e6f8:</span>\n\n<span class=\"go\">Section Headers:</span>\n<span class=\"go\">  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al</span>\n<span class=\"go\">  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0</span>\n<span class=\"go\">  [ 1] .wasmtime.engine  PROGBITS        0000000000000000 000040 00035c 00   A  0   0  1</span>\n<span class=\"go\">  [ 2] .wasmtime.bti     PROGBITS        0000000000000000 00039c 000001 00   A  0   0  1</span>\n<span class=\"go\">  [ 3] .text             PROGBITS        0000000000000000 00039d 01108e 00   W  0   0  1</span>\n<span class=\"go\">  [ 4] .wasmtime.addrmap PROGBITS        0000000000000000 01142b 011c5c 00   A  0   0  1</span>\n<span class=\"go\">  [ 5] .wasmtime.traps   PROGBITS        0000000000000000 023087 000ae0 00   A  0   0  1</span>\n<span class=\"go\">  [ 6] .rodata.wasm      PROGBITS        0000000000000000 023b67 0019e8 00   A  0   0  1</span>\n<span class=\"go\">  [ 7] .name.wasm        PROGBITS        0000000000000000 02554f 0027a6 00   A  0   0  1</span>\n<span class=\"go\">  [ 8] .wasmtime.info    PROGBITS        0000000000000000 027cf5 0010f5 00   A  0   0  1</span>\n<span class=\"go\">  [ 9] .symtab           SYMTAB          0000000000000000 028df0 001788 18     10 251  8</span>\n<span class=\"go\">  [10] .strtab           STRTAB          0000000000000000 02a578 0040f0 00      0   0  1</span>\n<span class=\"go\">  [11] .shstrtab         STRTAB          0000000000000000 02e668 000089 00      0   0  1</span>\n<span class=\"go\">Key to Flags:</span>\n<span class=\"go\">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span>\n<span class=\"go\">  L (link order), O (extra OS processing required), G (group), T (TLS),</span>\n<span class=\"go\">  C (compressed), x (unknown), o (OS specific), E (exclude),</span>\n<span class=\"go\">  R (retain), p (processor specific)</span>\n\n<span class=\"gp\">$ </span>llvm-readelf<span class=\"w\"> </span>-S<span class=\"w\"> </span>hello-wasm-world-stripped.cwasm\n<span class=\"go\">There are 9 section headers, starting at offset 0x171f8:</span>\n\n<span class=\"go\">Section Headers:</span>\n<span class=\"go\">  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al</span>\n<span class=\"go\">  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0</span>\n<span class=\"go\">  [ 1] .wasmtime.engine  PROGBITS        0000000000000000 000040 00035c 00   A  0   0  1</span>\n<span class=\"go\">  [ 2] .wasmtime.bti     PROGBITS        0000000000000000 00039c 000001 00   A  0   0  1</span>\n<span class=\"go\">  [ 3] .text             PROGBITS        0000000000000000 00039d 01108e 00   W  0   0  1</span>\n<span class=\"go\">  [ 4] .wasmtime.traps   PROGBITS        0000000000000000 01142b 000ae0 00   A  0   0  1</span>\n<span class=\"go\">  [ 5] .rodata.wasm      PROGBITS        0000000000000000 011f0b 0019e8 00   A  0   0  1</span>\n<span class=\"go\">  [ 6] .name.wasm        PROGBITS        0000000000000000 0138f3 0027a6 00   A  0   0  1</span>\n<span class=\"go\">  [ 7] .wasmtime.info    PROGBITS        0000000000000000 016099 0010f5 00   A  0   0  1</span>\n<span class=\"go\">  [ 8] .shstrtab         STRTAB          0000000000000000 01718e 000067 00      0   0  1</span>\n<span class=\"go\">Key to Flags:</span>\n<span class=\"go\">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span>\n<span class=\"go\">  L (link order), O (extra OS processing required), G (group), T (TLS),</span>\n<span class=\"go\">  C (compressed), x (unknown), o (OS specific), E (exclude),</span>\n<span class=\"go\">  R (retain), p (processor specific)</span>\n</code></pre></div>\n<p>The compiled wasm module still functions (for this trivial example).  Debugging would not be possible in the same ways, of course.  It should be possible to use an approach like is done for generating split debuginfo using objcopy to retain the stripped information.</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>cargo<span class=\"w\"> </span>run<span class=\"w\"> </span>--<span class=\"w\"> </span>--target<span class=\"w\"> </span>pulley64<span class=\"w\"> </span>--allow-precompiled<span class=\"w\"> </span>-O<span class=\"w\"> </span>memory-init-cow<span class=\"o\">=</span>n<span class=\"w\"> </span>hello-wasm-world-stripped.cwasm\n<span class=\"go\">    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.27s</span>\n<span class=\"go\">     Running `target/debug/wasmtime --target pulley64 --allow-precompiled -O memory-init-cow=n hello-wasm-world-stripped.cwasm`</span>\n<span class=\"go\">Hello, world!</span>\n</code></pre></div>\n<p>And comparison of base wasm module size, compiled, and then stripped sizes.</p>\n<p><div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>ls<span class=\"w\"> </span>-alh<span class=\"w\"> </span>hello-wasm-world*\n<span class=\"go\">-rw-r--r--@ 1 paul.osborne  staff    93K Mar 13 14:12 hello-wasm-world-stripped.cwasm</span>\n<span class=\"go\">-rw-r--r--@ 1 paul.osborne  staff   186K Mar 13 14:12 hello-wasm-world.cwasm</span>\n<span class=\"go\">-rwxr-xr-x@ 1 paul.osborne  staff    62K Mar 13 12:17 hello-wasm-world.wasm</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 505507670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741893637
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10286#issuecomment-2722472442\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10286\">issue #10286</a>:</p>\n<blockquote>\n<p><code>.wasmtime.addrmap</code> should already be dropped without the strip if using <a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Config.html#method.generate_address_map\"><code>Config::generate_address_map</code></a> to <code>false</code> but it isn't made configurable by the CLI at present in my quick look.  That could be one useful change here.</p>\n<p>For stripping the other bits, I do lean toward having this be something that is done by tooling outside of wasmtime itself; without changes to <code>object</code> I think we can't easily completely remove the sections.  For delivering compiled modules to constrained environments, I think most projects will already have some tooling for doing post-processing in place.</p>\n</blockquote>",
        "id": 505508499,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741893925
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10286#issuecomment-2722506747\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10286\">issue #10286</a>:</p>\n<blockquote>\n<p>Nice thanks for testing! This could all perhaps be a <code>-C</code> option for the CLI and a <code>Config::*</code> flag to remove the sections? We could then even hook that up into fuzzing to ensure that all various bits and knobs of functionality work when the sections are stripped. </p>\n<p>For <code>generate_address_map</code> I think that's hooked up as <code>-Daddress-map=n</code>, and we should probably do a better job of making CLI options discoverable...</p>\n<p>Personally I'd prefer to go the option-to-compilation route rather than post-processing. I wouldn't want to rely on <code>llvm-strip</code> for example since that would constrain us to always producing an ELF (or at least one that <code>llvm-strip</code> understands). While we're unlikely to change from ELF I also like being able to document how to do it with <code>wasmtime</code> itself vs needing external tools.</p>\n<p>In the interim though documenting this and maybe filing a feature request with <code>object</code> upstream could make sense? In that we could document <code>llvm-strip</code> should work, ideally test this in CI, and then also document that we'll probably bake in functionality in the future.</p>\n</blockquote>",
        "id": 505511354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741894851
    }
]