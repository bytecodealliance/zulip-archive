[
    {
        "content": "<p>wingo opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11770\">issue #11770</a>:</p>\n<blockquote>\n<p>Consider the spec for <a href=\"https://github.com/WebAssembly/wasi-http/blob/main/wit-0.3.0-draft/types.wit#L210\">wasi:http/fields#copy-all</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// Retrieve the full set of names and values in the Fields. Like the</span>\n<span class=\"w\">    </span><span class=\"sd\">/// constructor, the list represents each name-value pair.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// The outer list represents each name-value pair in the Fields. Names</span>\n<span class=\"w\">    </span><span class=\"sd\">/// which have multiple values are represented by multiple entries in this</span>\n<span class=\"w\">    </span><span class=\"sd\">/// list with the same name.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// The names and values are always returned in the original casing and in</span>\n<span class=\"w\">    </span><span class=\"sd\">/// the order in which they will be serialized for transport.</span>\n<span class=\"w\">    </span><span class=\"n\">copy</span><span class=\"o\">-</span><span class=\"n\">all</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">field</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">field</span><span class=\"o\">-</span><span class=\"n\">value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>However, Wasmtime does not preserve case.  If I add a field named \"Foo\", and then I <code>copy_all</code>, the field name that I get is <code>\"foo\"</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">wit_bindgen</span><span class=\"p\">;</span>\n\n<span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">inline</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">r</span><span class=\"s\">\"</span>\n<span class=\"s\">  package test:test;</span>\n\n<span class=\"s\">  world test {</span>\n<span class=\"s\">      include wasi:http/imports@0.3.0-rc-2025-09-16;</span>\n<span class=\"s\">  }</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">additional_derives</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nb\">PartialEq</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Eq</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Hash</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"n\">features</span><span class=\"p\">:[</span><span class=\"s\">\"clocks-timezone\"</span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"n\">generate_all</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">http</span><span class=\"p\">::</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">Fields</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">test_valid_field_name</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Fields</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">fields</span><span class=\"p\">.</span><span class=\"n\">has</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">fields</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"s\">b\"val\"</span><span class=\"p\">.</span><span class=\"n\">to_vec</span><span class=\"p\">()]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"p\">.</span><span class=\"n\">copy_all</span><span class=\"p\">(),</span>\n<span class=\"w\">               </span><span class=\"p\">[(</span><span class=\"n\">field</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">b\"val\"</span><span class=\"p\">.</span><span class=\"n\">to_vec</span><span class=\"p\">())]);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">test_valid_field_names</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">test_valid_field_name</span><span class=\"p\">(</span><span class=\"s\">\"Foo\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">test_valid_field_names</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">field</span><span class=\"o\">-</span><span class=\"n\">capitalization</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">22</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">:</span>\n<span class=\"nc\">assertion</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n<span class=\"w\">  </span><span class=\"n\">left</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">118</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">97</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">108</span><span class=\"p\">])]</span>\n<span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"s\">\"Foo\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">118</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">97</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">108</span><span class=\"p\">])]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 542445469,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759310077
    },
    {
        "content": "<p><a href=\"https://github.com/wingo\">wingo</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11770\">Issue #11770</a>.</p>",
        "id": 542445471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759310077
    },
    {
        "content": "<p>wingo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11770#issuecomment-3355448315\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11770\">issue #11770</a>:</p>\n<blockquote>\n<p>Related to <a href=\"https://github.com/WebAssembly/wasi-http/issues/182\">https://github.com/WebAssembly/wasi-http/issues/182</a>.</p>\n</blockquote>",
        "id": 542445897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759310197
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11770#issuecomment-3355480320\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11770\">issue #11770</a>:</p>\n<blockquote>\n<p>Wasmtime uses the <code>HeaderMap</code> type from the http crate to store headers. This stores all header names as lower case: <a href=\"https://docs.rs/http/latest/http/header/struct.HeaderName.html#representation\">https://docs.rs/http/latest/http/header/struct.HeaderName.html#representation</a></p>\n<blockquote>\n<p>HeaderName represents standard header names using an enum, as such they will not require an allocation for storage. All custom header names are lower cased upon conversion to a HeaderName value. This avoids the overhead of dynamically doing lower case conversion during the hash code computation and the comparison operation.</p>\n</blockquote>\n<p>FWIW HTTP/2 and HTTP/3 always make all headers lower case.</p>\n</blockquote>",
        "id": 542447789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759310773
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasi:impl label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11770\">Issue #11770</a>.</p>",
        "id": 542507210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759328059
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11770#issuecomment-3357292734\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11770\">issue #11770</a>:</p>\n<blockquote>\n<p>Various other wasi-http implementations do not / cannot preserve the casing of name fields as well - whatwg fetch normalizes all names to lowercase. In my opinion we need to make a spec change here.</p>\n</blockquote>",
        "id": 542543611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759337988
    }
]