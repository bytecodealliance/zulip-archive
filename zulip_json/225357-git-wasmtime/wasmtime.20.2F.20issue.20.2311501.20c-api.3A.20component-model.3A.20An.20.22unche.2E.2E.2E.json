[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11501\">issue #11501</a>:</p>\n<blockquote>\n<p>Currently funciton invocations, both on the host and that of guests, go through <code>wasmtime_component_val_t</code> which is a bit of a heavyweight representation of arguments/results in the component model. Ideally the C API sould support something like <code>wasmtime_func_call_unchecked</code> which places more burden on the caller but is implemented in a much more efficient fashion. Supporting this with the full matrix of types in the component model is unclear how it will be done so this is, to me at least, an open design/research question currently without a solution.</p>\n</blockquote>",
        "id": 535590578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755817411
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime:c-api label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11501\">Issue #11501</a>.</p>",
        "id": 535590579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755817412
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:component-model label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11501\">Issue #11501</a>.</p>",
        "id": 535590580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755817412
    },
    {
        "content": "<p>Digifox03 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11501#issuecomment-3214104913\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11501\">issue #11501</a>:</p>\n<blockquote>\n<p>As far as calling function whose signature is only known at run time, I don't think there is a better approach that the current one. What I'm interested is improving performance in the case of functions whose signature is known at compile time.</p>\n<p>Rather than providing a function like <code>wasmtime_func_call_unchecked</code>, the api can provide a way to get a function pointer. The signature of the function pointer depends on the signature of the component function.</p>\n<p>For example, a function like <code>func(a: u32, b: u64) -&gt; s8</code> can be mapped to a function pointer with type <code>int8_t (*)(uint32_t a, uint64_t b)</code> or with type <code>int8_t (*)(wasmtime_context_t *context, uint32_t a, uint64_t b)</code>.</p>\n<p>This is also compatible with languages that use systems like libffi to call arbitrary c functions.</p>\n</blockquote>",
        "id": 535667342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755863640
    },
    {
        "content": "<p>UserMist <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11501#issuecomment-3271666374\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11501\">issue #11501</a>:</p>\n<blockquote>\n<p>Maybe there could be two api methods, one for setting binary layout for some sort of adapter function generated at a run-time, and the other method for passing raw data matching this layout.<br>\nProbably suggesting nonsense though, since I'm new to this project.</p>\n</blockquote>",
        "id": 538492990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757439089
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11501#issuecomment-3437509569\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11501\">issue #11501</a>:</p>\n<blockquote>\n<p>Rough idea: the <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11501#issuecomment-3214104913\">idea above</a> I think would make sense but I'd prefer to avoid dealing with things like libffi to dynamically invoke functions of different type signatures. Instead I'd perfer to invoke functions of a single type signature. The question then is what signature is faster than today but still works for all functions? </p>\n<p>The rough idea is that the signature is <code>wasmtime_error_t *(*)(void*, wasmtime_context_t*, void *args_and_results, size_t args_and_results_len)</code> where args/results are \"serialized\" into an area. This serialization would be somewhat lightweight, for example integers would just push themselves, records would push fields, etc. More-or-less this would be the canonical ABI in-memory format anyway (unsure what to do about alignment). The tricky parts are:</p>\n<ul>\n<li>Resources - these wouldn't look like the canonical ABI. Probably would look like <code>wasmtime_component_resource_any_t*</code> or something like that.</li>\n<li>Strings - I'm imagining that coming from the guest it'd be a raw pointer into linear memory (pre-validated) or host memory (if not utf-8). The thinking is that a <code>post-return</code> operation would be required to be deferred until after arguments were read. Going into the guest I'm thinking these would be raw pointers into host memory. Cleanup... TBD.</li>\n<li>Lists - This is the roughest idea part. Instead of raw pointers lists would be a sort of \"tombstone\" where you'd go back to some sort of Wasmtime context and say \"hey give me the contents of the list\". This would prevent Wasmtime from allocating anything and the embedder would be the one providing any sort of memory buffers.</li>\n</ul>\n<p>Not enough to implement things, but wanted to at least write down what I thought were the trickiest bits (resources/strings/lists)</p>\n</blockquote>",
        "id": 546704453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761231784
    }
]