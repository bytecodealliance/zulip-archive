[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a> from <code>fitzgen:new-compile-time-builtins</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit adds the extremely unsafe<br>\n<code>wasmtime::CodeBuilder::expose_unsafe_intrinsics</code> method. When enabled, the Wasm being compiled is given access to special imports that correspond to direct, unchecked and unsandboxed, native load and store operations. These intrinsics are intended to be used for implementing fast, inline-able versions of WASI interfaces that are special-cased to a particular host embedding, for example.</p>\n<p>Compile-time builtins, as originally described in <a href=\"https://github.com/bytecodealliance/rfcs/pull/43\">the RFC</a>, are basically made up of three parts:</p>\n<ol>\n<li>A function inliner</li>\n<li>Unsafe intrinsics</li>\n<li>Component composition to encapsulate the usage of unsafe intrinsics in a safe interface</li>\n</ol>\n<p>Part (1) has been implemented in Wasmtime and Cranelift for a little while now (see <code>wasmtime::Config::compiler_inlining</code>). This commit is part (2). After this commit lands, part (3) can be done with <code>wac</code> and <code>wasm-compose</code>, although follow up work is required to make the developer experience nicer and more integrated into Wasmtime so that the APIs can look like those proposed in the RFC.</p>\n<hr>\n<p>I still have a little bit of doc comments and examples to fill out, but I thought it would be worth opening this PR up so that folks can start taking a look now, especially as I am taking Friday off and have a super-packed day tomorrow and probably won't have time to cross all the Ts and dot all the Is before next week.</p>\n<p>One thing that no one brought up during the RFC but which started bugging me during this implementation is whether we can expose tools for compile-time builtin authors to do spectre mitigations. Basically expose an intrinsic that lowers to <code>spectre_select_guard</code> or something? Seems possible but I haven't explored the design space too much yet. Also seems like it is _probably_ something we can do in an additive fashion, without needing to figure everything out before landing any intrinsics. Interested in folks' thoughts!</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 543848381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759966385
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 543848382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759966385
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 543848383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759966385
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 543848384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759966386
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 543848387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759966386
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#issuecomment-3383697133\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\", \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 543854720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759971914
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2415817937\">PR review comment</a>:</p>\n<blockquote>\n<p>What do you think about including <code>uN-native-{add,sub}(u64, uN) -&gt; uN</code>, which would return the previous value and wrap around on overflows? (potentially in a follow-up)</p>\n</blockquote>",
        "id": 543887331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759994688
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3317559526\">PR review</a>.</p>",
        "id": 543887333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759994688
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2417115301\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you clarify what the intended semantics are and why additional intrinsics are necessary and regular Wasm arithmetic is insufficient? Is this for doing the underlying architecture's pointer-sized arithmetic?</p>\n</blockquote>",
        "id": 543989837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760023495
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3319463496\">PR review</a>.</p>",
        "id": 543989975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760023529
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3319678331\">PR review</a>.</p>",
        "id": 544000913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760026268
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2417278964\">PR review comment</a>:</p>\n<blockquote>\n<p>I would imagine that e.g. a single <code>u64-add</code> would be more efficient, than <code>load</code>, followed by an <code>add</code>, followed by a <code>store</code>. Am I wrong assuming that's the case?<br>\nIt would also be easier to use for embedders a little bit</p>\n</blockquote>",
        "id": 544000914,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760026268
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2417278964\">PR review comment</a>.</p>",
        "id": 544001061,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760026307
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3319942466\">PR review</a>.</p>",
        "id": 544014868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760030723
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2417457525\">PR review comment</a>:</p>\n<blockquote>\n<p>Cranelift can optimize load+add+store to fuse the operations into a single instruction on architectures like x86-64 where such an instruction is available:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/bacc2dc3e8fd88d99fb3df31cc19b8a6d0b600b8/cranelift/codegen/src/isa/x64/lower.isle#L3243-L3369\">https://github.com/bytecodealliance/wasmtime/blob/bacc2dc3e8fd88d99fb3df31cc19b8a6d0b600b8/cranelift/codegen/src/isa/x64/lower.isle#L3243-L3369</a></p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/bacc2dc3e8fd88d99fb3df31cc19b8a6d0b600b8/cranelift/filetests/filetests/isa/x64/load-op-store.clif#L4-L19\">https://github.com/bytecodealliance/wasmtime/blob/bacc2dc3e8fd88d99fb3df31cc19b8a6d0b600b8/cranelift/filetests/filetests/isa/x64/load-op-store.clif#L4-L19</a></p>\n</blockquote>",
        "id": 544014869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760030723
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 544016096,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760031149
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 544016755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760031402
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3320132175\">PR review</a>.</p>",
        "id": 544022575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760033780
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2417598196\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh, nice, then that solves that, yeah!</p>\n</blockquote>",
        "id": 544022576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760033780
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 544026915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760035501
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 544034860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760038656
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3320583200\">PR review</a>.</p>",
        "id": 544051244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760045961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2417917951\">PR review comment</a>:</p>\n<blockquote>\n<p>One thing that I feel has worked out well elsewhere is using macros to define the signature. That guarantees everything stays in sync. Would it be possible to avoid manually creating the function type here through parameters and procedurally derive the type from a signle source of truth?</p>\n</blockquote>",
        "id": 544051246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760045961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2417915562\">PR review comment</a>:</p>\n<blockquote>\n<p>This is a duplicate of <code>TrampolineCompiler::abi_store_results</code>, so I was wondering if it would be possible to make a <code>TrampolineCompiler</code> here in this function and use that method? Similarly for <code>abi_load_params</code> for replacing <code>init</code> above </p>\n</blockquote>",
        "id": 544051247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760045961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2417920164\">PR review comment</a>:</p>\n<blockquote>\n<p>I believe this'll need to truncate <code>pointer</code> on 32-bit platforms </p>\n</blockquote>",
        "id": 544051248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760045961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2417922165\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar to loads, this'll want to truncate the pointer for 32-bit targets</p>\n</blockquote>",
        "id": 544051249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760045961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2417941343\">PR review comment</a>:</p>\n<blockquote>\n<p>If it's expected that the list of intrinsics is going to grow over time, should this perhaps be <code>PrimaryMap&lt;SomethingIndex, (ModuleInternedTypeIndex, UnsafeIntrinsic)&gt;</code>? Basically ignoring unused intrinsics.</p>\n</blockquote>",
        "id": 544051250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760045961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2417944682\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind updating the comment at the top of this file too?</p>\n</blockquote>",
        "id": 544051251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760045961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2417967022\">PR review comment</a>:</p>\n<blockquote>\n<p>I believe this should be implementable by plumbing to the underlying Cranelift compiler?</p>\n</blockquote>",
        "id": 544051252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760045961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2418014901\">PR review comment</a>:</p>\n<blockquote>\n<p>Just flagging the various TODO here to get resolved before merging</p>\n</blockquote>",
        "id": 544051253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760045961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2417946722\">PR review comment</a>:</p>\n<blockquote>\n<p>This feels to me like it should be \"iterate over what the component needs and compile those\" rather than iterating over all intrinsics?</p>\n</blockquote>",
        "id": 544051254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760045961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2418017366\">PR review comment</a>:</p>\n<blockquote>\n<p>Technically I don't believe this is correct, and also technically the tests in this PR violate this by having a different host function return the u64 \"pointer\" which gets read/mutated. I think this'll want to be reworded, or perhaps even dropped entirely? Whether or not a modification/read of memory is safe is more-or-less up to Miri in a sense so we could somewhat defer to that.</p>\n</blockquote>",
        "id": 544051255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760045961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2417964545\">PR review comment</a>:</p>\n<blockquote>\n<p>Do you see a viable path to eventually omitting this? For example if we were to implement a DCE pass for functions if no intrinsics are actually imported anywhere and were inlined everywhere then all of these should get emptied out. \"Just DCE\" wouldn't be sufficient because of loops like this, however, and we'd have to, post function optimization, prune the list of intrinsics in theory.</p>\n</blockquote>",
        "id": 544051256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760045961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2418013728\">PR review comment</a>:</p>\n<blockquote>\n<p>From a Rust soundness perspective this is not sound. One reason is that, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// e.g. through wasm...</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// e.g. through a host call...</span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// e.g. through wasm again ...</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Running this through Miri shows that the third modification here (adding 12) is unsound. The reason here is that the original pointer is \"invalidated\" once the original data is used through a different location.</p>\n<p>This is also technically not sound because it's mutating through a <code>*const T</code> pointer which was originally derived from <code>&amp;T</code> which does not allow mutation. Basically the <code>*mut ()</code> is going to need to be originally derived from <code>*mut T</code>.</p>\n<p>One fix to this is that <code>store.data()</code> and <code>data_mut</code> go through this pointer rather than <code>self.inner.data</code>. Another possible fix is we do some pre/post logic around wasm entry/exit (some permutation, I don't know exactly what) where we do some provenance juggling along the lines of <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c4688098204ccb3f64338ef1bbc74e72f2b6dab3/crates/wasmtime/src/runtime/vm/instance.rs#L1682-L1707\">this</a> which compiles to a noop but to the compiler has meaning.</p>\n</blockquote>",
        "id": 544051257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760045961
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3320726354\">PR review</a>.</p>",
        "id": 544051451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760046074
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2418020107\">PR review comment</a>:</p>\n<blockquote>\n<p>Or, better yet, another possible fix is the \"provenance juggling\" approach modifying <code>data</code> and <code>data_mut</code> methods but in such a way that it compiles down to the same thing that happens today perhaps.</p>\n</blockquote>",
        "id": 544051452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760046074
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#issuecomment-3387576134\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>:</p>\n<blockquote>\n<p>Oh, also, I'd recommend using <code>prtest:full</code> on this PR as this seems at high-risk of passing on x64 and failing elsewhere</p>\n</blockquote>",
        "id": 544051505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760046106
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3324141184\">PR review</a>.</p>",
        "id": 544191090,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760108584
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2420713757\">PR review comment</a>:</p>\n<blockquote>\n<p>For example, this is Miri-safe and additionally <a href=\"https://godbolt.org/z/MMr4r1adW\">has the expected generated assembly</a></p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">raw_a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[unsafe(no_mangle)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">mutate_raw</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">raw_a</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[unsafe(no_mangle)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">mutate_safe</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">get_a</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[unsafe(no_mangle)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get_a</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">raw_a</span><span class=\"p\">.</span><span class=\"n\">with_addr</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">addr</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">raw_a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">std</span><span class=\"p\">::</span><span class=\"n\">ptr</span><span class=\"p\">::</span><span class=\"n\">null_mut</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">raw_a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"first: raw\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">mutate_raw</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"second: safe\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">mutate_safe</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"third: raw\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">mutate_raw</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 544191092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760108584
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3337295503\">PR review</a>.</p>",
        "id": 544829639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760472845
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2430330005\">PR review comment</a>:</p>\n<blockquote>\n<p>Creating a whole <code>TrampolineCompiler</code> proved difficult due to it being fairly tied to component trampolines, but I did factor out the <code>abi_{store_results,load_params}</code> functions so that they are reusable from this code.</p>\n</blockquote>",
        "id": 544829640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760472846
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2430384989\">PR review comment</a>:</p>\n<blockquote>\n<p>There is no comment showing the pseudocode definition of <code>VMStoreContext</code>, just <code>VMContext</code></p>\n</blockquote>",
        "id": 544832132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760474020
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3337376797\">PR review</a>.</p>",
        "id": 544832134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760474020
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3337381763\">PR review</a>.</p>",
        "id": 544832285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760474075
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2430388260\">PR review comment</a>:</p>\n<blockquote>\n<p>Probably because we can define <code>VMStoreContext</code> as a regular Rust struct, because it doesn't have dynamically-sized array fields.</p>\n</blockquote>",
        "id": 544832286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760474076
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3337399336\">PR review</a>.</p>",
        "id": 544832877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760474342
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2430399382\">PR review comment</a>:</p>\n<blockquote>\n<p>My thinking has been that we can cross that bridge if we get to it.</p>\n<p>Right now, there are very few intrinsics, and I'm not concerned about the size of little arrays like this. However, it definitely is intended that a component that doesn't use these intrinsics doesn't have them compiled into its text section and doesn't have any additional space reserved for their <code>VMFuncRef</code>s and whatnot in its <code>vmctx</code> layout.</p>\n</blockquote>",
        "id": 544832878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760474342
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3337427151\">PR review</a>.</p>",
        "id": 544833885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760474809
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2430420144\">PR review comment</a>:</p>\n<blockquote>\n<p>That would require a phase separation between regular function compilation and unsafe intrinsic compilation (so that we can determine which intrinsics are actually used via looking at CLIF external function imports after Wasm-to-CLIF translation but before inlining). This requires additional special-casing that we've been trying to remove from our compilation orchestration, so I'd rather not. I think, given how few intrinsics there currently are, that it is fine to get all of them <em>if</em> you expose them to a component.</p>\n<p>In the future, I'd like to start doing gc-sections/DCE in our linking step, and rely on that to remove dead functions instead of introduce phases.</p>\n</blockquote>",
        "id": 544833886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760474809
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3337458775\">PR review</a>.</p>",
        "id": 544835094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760475377
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2430442231\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Do you see a viable path to eventually omitting this?</p>\n</blockquote>\n<p>When you say \"this\" what exactly are you referring to?</p>\n<p>Already it should be the case that when unsafe intrinsics are not exposed to a component, this loop performs zero iterations and there should[^0] be zero space reserved for intrinsics' <code>VMFuncRef</code>s in the vmctx.</p>\n<p>[^0]: I think there may be a bug where the space is reserved unconditionally right now, looking at CI. But that is definitely unintentional.</p>\n<blockquote>\n<p>For example if we were to implement a DCE pass for functions if no intrinsics are actually imported anywhere and were inlined everywhere then all of these should get emptied out. \"Just DCE\" wouldn't be sufficient because of loops like this, however, and we'd have to, post function optimization, prune the list of intrinsics in theory.</p>\n</blockquote>\n<p>Yes, we would need to update the <code>env_component.unsafe_intrinsics</code> field after doing gc-sections/DCE during linking, same as we would need to do the moral equivalent for the <code>VMFuncRef</code>s of defined Wasm functions that are imported/exported within a component but are ultimately never called and are dead code.</p>\n</blockquote>",
        "id": 544835095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760475377
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 544836363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760475819
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 544847379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760481138
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 544852172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760484646
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3337873725\">PR review</a>.</p>",
        "id": 544852506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760484815
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2430746322\">PR review comment</a>:</p>\n<blockquote>\n<p>Done in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825/commits/8b893fea2cc920bb39659392f76d831e42995b3e\">8b893fe</a> and then also added <code>VmPtr</code> in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825/commits/e39c49395acc5039806d220f57559a597b882067\">e39c493</a></p>\n</blockquote>",
        "id": 544852507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760484815
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2430746322\">PR review comment</a>.</p>",
        "id": 544852557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760484864
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 545145355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760573038
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 545147915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760574984
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 545147961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760575015
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#issuecomment-3408736991\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>:</p>\n<blockquote>\n<p>@alexcrichton I think this should be ready for another review pass</p>\n</blockquote>",
        "id": 545147984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760575030
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2436379287\">PR review comment</a>:</p>\n<blockquote>\n<p>For the CI failures I believe it's due to the fact that there's lingering <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca4a236eb0b9b3da533d06be9800f132f3b7ba96/crates/wasmtime/src/runtime/store.rs#L2577\">access of the store data</a> that doesn't go through these helpers. Could the <code>data</code> field be renamed to perhaps <code>data_without_provenance</code> or something like that with a comment to use these accessors?</p>\n<p>Also, these <code>unsafe</code> blocks I think will definitely warrant a comment explaining what's going on as it's otherwise pretty nontrivial why they're setup the way they are</p>\n</blockquote>",
        "id": 545378378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760629636
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#pullrequestreview-3345397674\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for slogging through all the CI bits and handling the miri bits, it's looking good!</p>\n<p>To expand a bit on some of the unresolved comments from the previous review -- It feels a bit weird that there's different ways of managing the list of intrinsics for a component. The <code>VMComponentContext</code> either has 0 or all of them, compilation either compiles 0 or all of them,   <code>info::Component</code> tracks a full list of intrinsics but has <code>None</code> for unneeded intrinsics, <code>VMComponentContext</code> initialization \"nulls out\" all intrinsics, and instantiation only fills in used intrinsics. To me this feels like a random mish-mash of different strategies to manage everything. I get your point about crossing the bridge when we get there, but I also feel like this PR is moving us to a state where it's pretty inconsistent how the intrinsics are handled. Some contexts are \"all or nothing\" and some contexts are \"only used intrinsics\". </p>\n<p>Ideally I'd prefer a system where intrinsics were compacted/compiled on-demand as opposed to ever doing an \"all or nothing\" approach. My read of this is that this is basically a function of the initial analysis phase of a component and how clever it is. I would naively expect that fitting into the <code>GlobalInitializer</code> infrastructure would make the implementation \"just fall out\" by adding a new <code>FooIndex</code> type of some kind. Basically al lthe hash maps and helpers and such are all there, so I would naively expect the impementation to not be all that much work.</p>\n<p>I'm perpetually worried about the quantity of work we defer given that the rate of burning down this deferred work is often much smaller than the rate of deferring, but this is a topic reasonable folks can disagree on. In that sense I'll lay out my concerns here, but I'll also leave it up to you whether to merge or not before addressing. If this merges as-is, though, mind opening an issue about these future improvements?</p>\n</blockquote>",
        "id": 545378379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760629636
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2436520203\">PR review comment</a>:</p>\n<blockquote>\n<p>For \"this\" I mean this entire loop in the context when unsafe intrinsics are used. This loop exists for the vanishingly rare case that intrinsics are used but also turned into <code>funcref</code> values one way or another, but in practice they'll basically never get used.</p>\n<p>In some sense I'm not saying much here, it's pretty clear that DCE won't make this loop go away, but an wasmtime-aware DCE pass which updated the <code>unsafe_intrinsics</code> list, would, however. So all I'm really saying here is that I think we should strive to make this loop go away in most situations when unsafe intrinsics are used, but that'll require fancy DCE.</p>\n</blockquote>",
        "id": 545378383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760629637
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#discussion_r2436353537\">PR review comment</a>:</p>\n<blockquote>\n<p>To avoid the <code>Option</code> here, could this use <code>NonNull::dangling()</code> as an initial constructor? That'll still segfault if erroneously accessed but otherwise avoids the pesky <code>unwrap</code>s</p>\n</blockquote>",
        "id": 545378384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760629637
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#issuecomment-3411844802\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm perpetually worried about the quantity of work we defer given that the rate of burning down this deferred work is often much smaller than the rate of deferring, but this is a topic reasonable folks can disagree on.</p>\n</blockquote>\n<p>I hear you. I think it is important that we balance incrementalism and doing things the Right Way. Personally, I think that the lever we use to strike that balance is not by accepting that things will be in a fairly suboptimal state \"temporarily\" (which, as you note, is often not temporary) in service of shipping something a little sooner, but to instead drop functionality and features that we don't have time to implement well. This way, we might not have everything we ideally want, but what we do have is rock solid. So when we look at some work being left for \"follow up PRs\", we should ask whether what is landing now is rock solid, and the follow ups are \"just\" optimizations/features/functionality.[^0]</p>\n<p>[^0]: This is all assuming we are talking about the implementation of new features. Obviously improving existing suboptimal code, even if there are still more follow ups to be done before it is fully optimal, is worth landing right away.</p>\n<p>But of course all these generalizations are very high-level and vague. We can still come to reasonable disagreements on what is considered \"rock solid\" or which bits of functionality even <em>can</em> be left out while preserving what remains.</p>\n<p>To make things in this PR a little more concrete when viewed through the above lens, I have been accepting the compromise that we will compile, link, and instantiate <code>VMFuncRef</code>s for all intrinsics when the flag to expose unsafe intrinsics is enabled. I think the Right Way to fix that, so that only the intrinsics that are actually used are compiled+linked+instantiated, is to do gc-sections/DCE during linking, but also that doing all that is something that can be delayed (perhaps for a very long time!) and things will be Fine in the meantime because what <em>is</em> implemented <em>should</em> be rock solid (albeit lacking the DCE optimizations we would have in an ideal world).</p>\n<p>Ignoring for a second the implementation details in this PR around how intrinsics are tracked through translation and the like, do you agree that the above compromise is an acceptable cut to make?</p>\n<p>Because I do agree somewhat with the following:</p>\n<blockquote>\n<p>It feels a bit weird that there's different ways of managing the list of intrinsics for a component. The <code>VMComponentContext</code> either has 0 or all of them, compilation either compiles 0 or all of them, <code>info::Component</code> tracks a full list of intrinsics but has <code>None</code> for unneeded intrinsics, <code>VMComponentContext</code> initialization \"nulls out\" all intrinsics, and instantiation only fills in used intrinsics. To me this feels like a random mish-mash of different strategies to manage everything.</p>\n</blockquote>\n<p>How the intrinsics are tracked through compilation and in the <code>wasmtime-environ</code> metadata structures <em>is</em> a little messy, and I'd like to improve it. But I <em>don't</em> want to expand the scope of those improvements to only compiling+linking+instantiating the intrinsics that are actually used. Doing <em>that</em> correctly (IMHO via DCE/gc-sections in linking) is too much for me to bite off immediately, and (unless I am missing something) the other ways of doing it require adding new special-cased code paths (which we have generally been trying to remove) and so would only bring us to local maxima, which doesn't seem worth spending the effort on.</p>\n<hr>\n<p>And thanks as always for the thorough review! Will dig in some more momentarily.</p>\n</blockquote>",
        "id": 545406266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760634658
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 545419132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760638454
    },
    {
        "content": "<p>alexcrichton closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 545430530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760642641
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#issuecomment-3412528537\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>:</p>\n<blockquote>\n<p>High-level definitely agree with everything you say, and I also want to strive for a balance of perfection and pragmatism. I'm happy to defer things to a follow-up PR to make progress effectively whenever, and the moment I pause is when the conclusion is to open an issue. Filing an issue means that it'll likely be years, if ever, before something changes. So in that sense \"let's file an issue\" is equated to me as \"let's just ignore this\" which is partly where I come from. I basically feel that there's no balance to filing an issue as it effectively means that someone else, who's likely to be less suited to the task, will have to take care of it.</p>\n<p>For this PR specifically I agree the DCE/VMFuncRef bits should not happen here. There's definitely no need to entangle all that and it's a huge project for not a whole lot of benefit right now. What I was mostly referring to was the compilation of the unsafe intrinsics where it's a mish-mash of everything vs the subset used. That to me feels like the perfect candidate for if an issue is filed it'll just be forgotten and never addressed. It feels frequent that small improvements like this are rarely justified to spend time on which means they just never get time spent on them.</p>\n<p>I agree with your rock-solid quality though, and to that end I have no concerns about this PR. I see no bugs in this PR and it's just a bit sub-optimal in a few areas. Given that I'm fine to see this merged. My personal preference would be to have a follow-up adjusting the compilation side of things to change the list-of-all-intrinsics to list-of-only-the-used-intrinsics, but I'm ok settling for an issue too.</p>\n</blockquote>",
        "id": 545430532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760642642
    },
    {
        "content": "<p>alexcrichton reopened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 545430551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760642650
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#issuecomment-3412528933\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>:</p>\n<blockquote>\n<p>That was not the button I wanted...</p>\n</blockquote>",
        "id": 545430553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760642652
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 545454719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760654717
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#issuecomment-3413148541\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>:</p>\n<blockquote>\n<p>@alexcrichton the latest commit (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825/commits/9ca326b440040ef716b11495c3af9b48c3a532fd\">9ca326b</a>) cleans this up a little bit, and also happens to give us demand-based compilation of intrinsics, since it turns out we know which ones were <code>canon lower</code>ed by the time we are compiling functions. Mind taking another look? Does this help allieviate some of your concerns?</p>\n</blockquote>",
        "id": 545454915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760654849
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 545458387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760657207
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825#issuecomment-3413282346\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>:</p>\n<blockquote>\n<p>Agreed! I think everything at least now only works on O(intrinsics_used), and data-representation-wise I'd still prefer <code>PrimaryMap&lt;SomethingIndex, ...&gt;</code> but that's fine to defer to a future refactoring if necessary.</p>\n</blockquote>",
        "id": 545461038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760659243
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11825\">PR #11825</a>.</p>",
        "id": 545463158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760660743
    }
]