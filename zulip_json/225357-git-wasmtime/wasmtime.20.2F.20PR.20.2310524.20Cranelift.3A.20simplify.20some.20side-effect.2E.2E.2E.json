[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524\">PR #10524</a> from <code>fitzgen:simplify-skeleton</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit adds a new top-level ISLE entrypoint specifically for instructions in the side-effectful skeleton: <code>simplify_skeleton</code>. While these rewrites are processed during the egraph pass, values from skeleton instructions still do not get inserted into the egraph. Indeed, <code>simplify_skeleton</code> operates on <em>instructions</em> rather than <em>values</em> because we do not represent side effects as values; values do not have side effects in CLIF, instructions do. Therefore, rather than doing a whole dynamic-programming style extraction of the best candidate simplification like we do with the egraph, we take an eager and greedy approach.</p>\n<p>Furthermore, <code>simplify_skeleton</code> is limited only to skeleton instructions that do not involve control-flow or terminators right now. This is because changing the control-flow graph can change whether a use is dominated by a def or not, and we do not currently have the machinery to track and fix up invalidated uses. Addressing this is left for future commits.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 510307424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743809466
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524\">PR #10524</a>.</p>",
        "id": 510307425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743809466
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524\">PR #10524</a>.</p>",
        "id": 510307427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743809467
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524\">PR #10524</a>.</p>",
        "id": 510307429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743809467
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524\">PR #10524</a>.</p>",
        "id": 510307431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743809468
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524#issuecomment-2779912660\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524\">PR #10524</a>:</p>\n<blockquote>\n<p>FWIW, I just did a sightglass run, and this had no statistically significant effect on any of our default benchmarks. If you look at the disas test expectation updates however, youâ€™ll see that it is a big boon for gc codegen.</p>\n</blockquote>",
        "id": 510309086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743810637
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524\">PR #10524</a>.</p>",
        "id": 510309352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743810847
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524#issuecomment-2780141295\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524\">PR #10524</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:machinst\", \"cranelift:meta\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 510320536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743819195
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524#pullrequestreview-2748347642\">PR review</a>:</p>\n<blockquote>\n<p>Looks great -- very cool to see the GC tests clean up with the new opts in particular!</p>\n<p>I think I mentioned it last week but just to write it down: I suspect a good way to lift some of the CFG-mutation limitations around traps would be to make <code>trap</code> a non-terminator, and to add <code>unreachable</code> as a terminator. This would allow us to turn insts that we can prove always trap into <code>trap</code> (e.g. the <code>sdiv</code> case mentioned below, as well as trapnz-of-1 and trapz-of-0). The branch-folding cases are a bit harder; ideally we do actually skip traversing the newly-unreachable blocks, perhaps by tombstoning them with a flag set by the branch simplification. Would you mind creating a followup issue for this?</p>\n</blockquote>",
        "id": 510788437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744070794
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524#discussion_r2032164529\">PR review comment</a>:</p>\n<blockquote>\n<p>Idle thought: we have the \"temporarily take a reused thing then clear it\" pattern in several places -- would it be possible to factor this out into a macro, with pluggable bits for the vec type and parent type and field name?</p>\n</blockquote>",
        "id": 510788439,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744070794
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524#discussion_r2032169911\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we add a test for <code>INT_MIN / -1</code> and show that it remains un-cprop'd?</p>\n<p>(It would be even neater if it could change into an unconditional trap but I know that's a limitation at the moment)</p>\n</blockquote>",
        "id": 510788440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744070795
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524#pullrequestreview-2750563822\">PR review</a>.</p>",
        "id": 510972681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744128225
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524#discussion_r2033537436\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, I can do this in a follow up</p>\n</blockquote>",
        "id": 510972682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744128225
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524#issuecomment-2787005798\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524\">PR #10524</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think I mentioned it last week but just to write it down: I suspect a good way to lift some of the CFG-mutation limitations around traps would be to make <code>trap</code> a non-terminator, and to add <code>unreachable</code> as a terminator.</p>\n</blockquote>\n<p>Yes, we could even avoid a new <code>unreachable</code> instruction if we wanted by adding a <code>terminator: bool</code> to <code>trap</code>, if we wanted, since we should have the bytes available in the <code>InstructionData</code>.</p>\n<p>Or if we do want two different instructions, it is probably easier to make the new instruction the non-terminator, so that existing uses of <code>trap</code> don't need updating.</p>\n<p>I had also floated the idea of <code>trap</code> returning a variable number of values, that we could use as dummy values in now-unreachable uses, just as a convenience and to make the branch-folding a little simpler to deal with (rather than requiring tracking reachability perfectly). This could be an intermediate step since it would allow us to avoid perfectly tracking and fixing up unreachable blocks, but keeping dominating defs for any now-unreachable blocks' uses.</p>\n<blockquote>\n<p>The branch-folding cases are a bit harder; ideally we do actually skip traversing the newly-unreachable blocks, perhaps by tombstoning them with a flag set by the branch simplification. Would you mind creating a followup issue for this?</p>\n</blockquote>\n<p>We also would need to differentiate between blocks that do vs don't become unreachable, which is a further little wrinkle.</p>\n<p>But yeah, happy to write up an issue.</p>\n</blockquote>",
        "id": 510977034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744129413
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524\">PR #10524</a>.</p>",
        "id": 510990173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744133463
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524\">PR #10524</a>.</p>",
        "id": 510991585,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744133923
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524\">PR #10524</a>.</p>",
        "id": 510991609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744133933
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10524\">PR #10524</a>.</p>",
        "id": 510998800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744136293
    }
]