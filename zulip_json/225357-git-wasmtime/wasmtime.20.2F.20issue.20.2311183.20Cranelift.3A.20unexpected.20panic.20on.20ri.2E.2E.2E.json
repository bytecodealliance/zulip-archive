[
    {
        "content": "<p>akldc opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183\">issue #11183</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">none</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">preserve_frame_pointers</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_multi_ret_implicit_sret</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">sse42</span><span class=\"w\"> </span><span class=\"n\">has_avx</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64gc</span><span class=\"w\">  </span><span class=\"n\">has_zcd</span><span class=\"w\"> </span><span class=\"n\">has_zbkb</span><span class=\"w\"> </span><span class=\"n\">has_zbc</span><span class=\"w\"> </span><span class=\"n\">has_zbs</span><span class=\"w\"> </span><span class=\"n\">has_zicond</span><span class=\"w\"> </span><span class=\"n\">has_zvl32b</span><span class=\"w\"> </span><span class=\"n\">has_zvl64b</span><span class=\"w\"> </span><span class=\"n\">has_zvl128b</span><span class=\"w\"> </span><span class=\"n\">has_zvl1024b</span><span class=\"w\"> </span><span class=\"n\">has_zvl2048b</span><span class=\"w\"> </span><span class=\"n\">has_zvl4096b</span><span class=\"w\"> </span><span class=\"n\">has_zvl8192b</span><span class=\"w\"> </span><span class=\"n\">has_zvl16384b</span><span class=\"w\"> </span><span class=\"n\">has_zvl32768b</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u1</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"w\">  </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u1</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\">  </span><span class=\"kt\">f32</span><span class=\"w\">  </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u1</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">sig0</span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v17</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v23</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">5270</span><span class=\"n\">eep</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v24</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select_spectre_guard</span><span class=\"p\">.</span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v23</span>\n<span class=\"w\">    </span><span class=\"n\">v26</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v27</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v23</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v24</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\">  </span><span class=\"n\">v23</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"w\">  </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\">  </span><span class=\"kt\">f32</span>\n<span class=\"w\">    </span><span class=\"nc\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u1</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"n\">sig0</span>\n\n<span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">23</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">5270</span><span class=\"n\">eep</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"n\">v4</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n<h3>Result</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">x86</span><span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">5270</span><span class=\"n\">eep</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"p\">[</span><span class=\"n\">riscv64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"o\">/</span><span class=\"n\">isle</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">169</span><span class=\"p\">:</span><span class=\"mi\">22</span><span class=\"p\">:</span>\n<span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Option</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">None</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">101</span>\n</code></pre></div>\n<p>I tried removing the instruction <code>v26, v27 = call fn0(v23, v24)</code>, and that made the case run successfully.<br>\nI'm not sure whether this issue is related to #10951 </p>\n</blockquote>",
        "id": 527182639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751636104
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183\">Issue #11183</a>.</p>",
        "id": 527182641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751636104
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183\">Issue #11183</a>.</p>",
        "id": 527182643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751636104
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183#issuecomment-3036431432\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183\">issue #11183</a>:</p>\n<blockquote>\n<p>Can you run again with <code>RUST_BACKTRACE=1</code> and post the backtrace?</p>\n</blockquote>",
        "id": 527188800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751638273
    },
    {
        "content": "<p>primoly <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183#issuecomment-3037062044\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183\">issue #11183</a>:</p>\n<blockquote>\n<p>This is caused by the RISC-V lowering of <code>select_spectre_guard</code> calling <code>rv_and</code> and <code>rv_andn</code> with <code>FReg</code> (<code>x</code> and <code>y</code>),[^1] but they each expect two <code>XReg</code>.[^2][^3]</p>\n<p>[^1]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b63c25ae22c53b66904b6988071cfa72c051cfbf/cranelift/codegen/src/isa/riscv64/lower.isle#L2616\">https://github.com/bytecodealliance/wasmtime/blob/b63c25ae22c53b66904b6988071cfa72c051cfbf/cranelift/codegen/src/isa/riscv64/lower.isle#L2616</a><br>\n[^2]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b63c25ae22c53b66904b6988071cfa72c051cfbf/cranelift/codegen/src/isa/riscv64/inst.isle#L1156\">https://github.com/bytecodealliance/wasmtime/blob/b63c25ae22c53b66904b6988071cfa72c051cfbf/cranelift/codegen/src/isa/riscv64/inst.isle#L1156</a><br>\n[^3]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b63c25ae22c53b66904b6988071cfa72c051cfbf/cranelift/codegen/src/isa/riscv64/inst.isle#L1608\">https://github.com/bytecodealliance/wasmtime/blob/b63c25ae22c53b66904b6988071cfa72c051cfbf/cranelift/codegen/src/isa/riscv64/inst.isle#L1608</a></p>\n</blockquote>",
        "id": 527223493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751655201
    },
    {
        "content": "<p>shashi1687 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183#issuecomment-3044369584\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183\">issue #11183</a>:</p>\n<blockquote>\n<p>Hey everyone, I’d love to own this one—I’ve already dug into the RISC-V lowering and I’m confident I understand what’s happening: under implicit-sret, the ISLE lower_call path only reserves a slot for the first return value, so when it tries to unwrap() a missing register for the second value it panics. My plan is to adjust gen_call_info so stack_ret_space covers all return slots, then emit a post-call gen_load_stack for each extra value, and add a CLIF regression test in clif/tests/isa/riscv64/multi_ret_implicit_sret.clif to prove the fix on both x86_64 and riscv64. I’ve prototyped the change locally, run cargo test -p cranelift-codegen and tools/clif-util test …, and it all checks out. Could you please assign #11183 to me? I’m ready to polish up the PR and get this merged.</p>\n</blockquote>",
        "id": 527447901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751884113
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183#issuecomment-3044392367\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183\">issue #11183</a>:</p>\n<blockquote>\n<p>I would personally prefer if we just got rid of the implicit-sret behavior entirely: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9510\">https://github.com/bytecodealliance/wasmtime/issues/9510</a> This is currently blocked on getting rid of the dependency on it from Wasmtime and cg_clif.</p>\n</blockquote>",
        "id": 527448698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751884456
    },
    {
        "content": "<p>shashi1687 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183#issuecomment-3044474399\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183\">issue #11183</a>:</p>\n<blockquote>\n<p>Hello @bjorn3 , thanks for pointing me to the plan in #9510 to remove implicit-sret entirely—I’ve read through that comment and it makes a lot of sense. I’m brand new to the project and this is my first time looking for an issue to work on, so I’m still finding my footing in the codebase. Since #11183 may end up being resolved as part of those larger changes, could you please suggest another issue or area that would be a good fit for a first-time contributor? I’m eager to learn, happy to carve out the time, and would really appreciate any guidance on where to start. Thanks so much for your help!</p>\n</blockquote>",
        "id": 527451737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751885526
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the cranelift:area:riscv64 label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183\">Issue #11183</a>.</p>",
        "id": 527490425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751897885
    },
    {
        "content": "<p>shashi1687 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183#issuecomment-3044474399\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183\">issue #11183</a>:</p>\n<blockquote>\n<p>Hello @bjorn3/everyone , thanks for pointing me to the plan in #9510 to remove implicit-sret entirely—I’ve read through that comment and it makes a lot of sense. I’m brand new to the project and this is my first time looking for an issue to work on, so I’m still finding my footing in the codebase. Since #11183 may end up being resolved as part of those larger changes, could you please suggest another issue or area that would be a good fit for a first-time contributor? I’m eager to learn, happy to carve out the time, and would really appreciate any guidance on where to start. Thanks so much for your help!</p>\n</blockquote>",
        "id": 527497948,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751900016
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183#issuecomment-3045681993\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11183\">issue #11183</a>:</p>\n<blockquote>\n<p>For Wasmtime I don't know what would be decent first issues (I don't work on Wasmtime myself). For Cranelift I think <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8600\">https://github.com/bytecodealliance/wasmtime/issues/8600</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8694\">https://github.com/bytecodealliance/wasmtime/issues/8694</a> would be good first issues that benefit <a href=\"https://github.com/rust-lang/rustc_codegen_cranelift/\">https://github.com/rust-lang/rustc_codegen_cranelift/</a> which I wrote. Or for a bit more advanced, <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7916\">https://github.com/bytecodealliance/wasmtime/issues/7916</a> would be an option.</p>\n</blockquote>",
        "id": 527508326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751903201
    }
]