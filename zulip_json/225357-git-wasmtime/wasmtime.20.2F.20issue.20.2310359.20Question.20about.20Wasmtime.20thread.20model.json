[
    {
        "content": "<p>xdlin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359\">issue #10359</a>:</p>\n<blockquote>\n<h2>Quetion</h2>\n<p>Does wasmtime always run Wasm guest code in main thread?</p>\n<h2>Background</h2>\n<p>I plan to use Wasm as a plugin system for rust service, and call multiple host functions within the guest code, I found that the Wasm itself became the bottleneck, after doing some investigation, I found that whateven method I used, despite of the multiple threads Wasmtime Engine/Module/Instance I have in host code, the same wasm file will always runs in the same thread (thread ID 1, the main thread)</p>\n<p>There is the log I print in console, hopefully it's self explainable</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">main</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">res</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">guest</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n<span class=\"n\">res</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">guest</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n<span class=\"n\">res</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">guest</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n<span class=\"n\">res</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">guest</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n</code></pre></div>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/8923a9f0-63dc-4480-a7a5-b3da012eed3c\">https://github.com/user-attachments/assets/8923a9f0-63dc-4480-a7a5-b3da012eed3c</a>)</p>\n<h2>the issue</h2>\n<p>I'd like to improve the throughput of this service, but if the guest function alwasys runs in the same single thread, the overall throughput will depen on the time spending in guest code, let's say if it takes 10ms, the overall QPS will be limited to 100,  even if I add more threads to support more wasmtime instances.</p>\n<p>Is this by design, or I did I miss some critical configuration?</p>\n<h2>the requirement</h2>\n<p>I'd like to eliminate the bottleneck in single guest thread mode and improve service performance, which part should I change?</p>\n</blockquote>",
        "id": 504303944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741458513
    },
    {
        "content": "<p>xdlin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359\">issue #10359</a>:</p>\n<blockquote>\n<h2>Quetion</h2>\n<p>Does wasmtime always run Wasm guest code in main thread?</p>\n<h2>Background</h2>\n<p>I plan to use Wasm as a plugin system for rust service, and call multiple host functions within the guest code, I found that the Wasm itself became the bottleneck, after doing some investigation, I found that whatever method I used, despite of the multiple threads Wasmtime Engine/Module/Instance I have in host code, __the same wasm file__ will always runs in the same thread (thread ID 1, the main thread)</p>\n<p>There is the log I print in console, hopefully it's self explainable</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">main</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">res</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">guest</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n<span class=\"n\">res</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">guest</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n<span class=\"n\">res</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">guest</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n<span class=\"n\">res</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">guest</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n</code></pre></div>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/8923a9f0-63dc-4480-a7a5-b3da012eed3c\">https://github.com/user-attachments/assets/8923a9f0-63dc-4480-a7a5-b3da012eed3c</a>)</p>\n<h2>the issue</h2>\n<p>I'd like to improve the throughput of this service, but if the guest function alwasys runs in the same single thread, the overall throughput will depen on the time spending in guest code, let's say if it takes 10ms, the overall QPS will be limited to 100,  even if I add more threads to support more wasmtime instances.</p>\n<p>Is this by design, or I did I miss some critical configuration?</p>\n<h2>the requirement</h2>\n<p>I'd like to eliminate the bottleneck in single guest thread mode and improve service performance, which part should I change?</p>\n</blockquote>",
        "id": 504304020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741458600
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359#issuecomment-2708494016\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359\">issue #10359</a>:</p>\n<blockquote>\n<blockquote>\n<p>Does wasmtime always run Wasm guest code in main thread?</p>\n</blockquote>\n<p>Short answer: no; it will run on the thread where you call it.</p>\n<p>Longer answer: Wasmtime has two invocation models, sync and async.</p>\n<ul>\n<li>The sync model is very simple: calling a Wasm function will execute that function on the stack it was called on; Wasmtime has no knowledge of threads; it will just run the code like a normal function call.</li>\n<li>The async model fits into the async approach in Rust. \"Calling\" a Wasm function will return a future and will not actually execute the code. It is then up to the async runtime to poll that future. You cause that to happen by doing <code>.await</code> in Rust code. The threading model is up to the async runtime, which is a separate piece of software that is not part of Wasmtime. Tokio in its usual configuration will use a thread-pool, so code will run on multiple threads.</li>\n</ul>\n<p>You haven't described how you produced the log above; how does the \"guest\" know what thread it is on? In any case, there is nothing in Wasmtime that would cause execution to migrate to only one thread, so I suspect the issue is elsewhere in your application architecture.</p>\n</blockquote>",
        "id": 504319441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741469326
    },
    {
        "content": "<p>xdlin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359#issuecomment-2708502189\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359\">issue #10359</a>:</p>\n<blockquote>\n<p>Actually I tried both:</p>\n<ul>\n<li>sync mode</li>\n<li>async mode</li>\n</ul>\n<p>I thought it's a foundmantal question related with invocation mode, so I didn't paste the code, let's me post the minimal reproducible example here</p>\n<h3>the WIT file（<code>wit/server.wit</code>)</h3>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package my:service;\n\ninterface native {\n    predict: func(input: string) -&gt; u64;\n}\n\ninterface guest {\n    factor-get: func(id: string) -&gt; string;\n}\n\nworld factor-server {\n    import native;\n    export guest;\n}\n</code></pre></div>\n<h3>host code (<code>host/src/main.rs</code>)</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cargo_metadata</span><span class=\"p\">::</span><span class=\"n\">MetadataCommand</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">path</span><span class=\"p\">::</span><span class=\"n\">PathBuf</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span>\n<span class=\"w\">        </span><span class=\"n\">component</span><span class=\"p\">::{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::{</span><span class=\"n\">IoView</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">},</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">handler</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"../wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"factor-server\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">concurrent_imports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">concurrent_exports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">trappable_imports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">WasmStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasmStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">inherit_stdio</span><span class=\"p\">().</span><span class=\"n\">inherit_args</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IoView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WasmStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WasmStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasi</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">handler</span><span class=\"p\">::</span><span class=\"n\">my</span><span class=\"p\">::</span><span class=\"n\">service</span><span class=\"p\">::</span><span class=\"n\">native</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WasmStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_input</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"host: called from guest at: {:?}\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">thread</span><span class=\"p\">::</span><span class=\"n\">current</span><span class=\"p\">().</span><span class=\"n\">id</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"mi\">42</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get_workspace_root</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">PathBuf</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">metadata</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MetadataCommand</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">exec</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">metadata</span><span class=\"p\">.</span><span class=\"n\">workspace_root</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[tokio::main(flavor = </span><span class=\"s\">\"multi_thread\"</span><span class=\"cp\">)]</span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_workspace_root</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">\"wasm_modules/guest.wasm\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">debug_info</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">cranelift_debug_verifier</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_threads</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"main: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">thread</span><span class=\"p\">::</span><span class=\"n\">current</span><span class=\"p\">().</span><span class=\"n\">id</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">handles</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm_path</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">thread</span><span class=\"p\">::</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">WasmStates</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"n\">handler</span><span class=\"p\">::</span><span class=\"n\">FactorServer</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">WasmStates</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_path</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_states</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasmStates</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_states</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">handler</span><span class=\"p\">::</span><span class=\"n\">FactorServer</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"host call guest.fun at: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">thread</span><span class=\"p\">::</span><span class=\"n\">current</span><span class=\"p\">().</span><span class=\"n\">id</span><span class=\"p\">());</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">my_service_guest</span><span class=\"p\">()</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">call_factor_get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"n\">res</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"n\">handles</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">handles</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"res: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>the guest code (<code>guest/src/lib.rs</code>)</h3>\n<p><a href=\"https://github.com/user-attachments/files/19146060/wit_demo.tgz\">wit_demo.tgz</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"../wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"factor-server\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">Component</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::{</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">my</span><span class=\"p\">::</span><span class=\"n\">service</span><span class=\"p\">::</span><span class=\"n\">guest</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"p\">::</span><span class=\"n\">service</span><span class=\"p\">::</span><span class=\"n\">native</span><span class=\"p\">};</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Component</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">factor_get</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"guest: call host.fun at: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_thread</span><span class=\"p\">::</span><span class=\"n\">current</span><span class=\"p\">().</span><span class=\"n\">id</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">::</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">id</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"guest: return from host.fun at: {:?}\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">wasm_thread</span><span class=\"p\">::</span><span class=\"n\">current</span><span class=\"p\">().</span><span class=\"n\">id</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"guest result: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Cargo.toml</h3>\n<p>workspace Cargo.toml</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[workspace]</span>\n<span class=\"n\">resolver</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2\"</span>\n<span class=\"n\">members</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"s2\">\"host\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s2\">\"guest\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</code></pre></div>\n<p><code>host/Cargo.toml</code>:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"host\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">anyhow</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"1.0.81\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"backtrace\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">tokio</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"1.36.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"fs\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"macros\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"rt-multi-thread\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"time\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"component-model\"</span><span class=\"p\">]}</span>\n<span class=\"n\">wasmtime-wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"*\"</span><span class=\"p\">}</span>\n<span class=\"n\">cargo_metadata</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.18\"</span>\n<span class=\"n\">axum</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.8.1\"</span>\n<span class=\"n\">rand</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.9.0\"</span>\n</code></pre></div>\n<p><code>guest/Cargo.toml</code></p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"guest\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">futures</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.3.30\"</span>\n<span class=\"n\">once_cell</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"1.19.0\"</span>\n<span class=\"n\">wasm_thread</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.3.3\"</span>\n<span class=\"n\">wit-bindgen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.40\"</span>\n<span class=\"n\">wit-bindgen-rt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.40\"</span>\n\n<span class=\"k\">[lib]</span>\n<span class=\"n\">crate-type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"cdylib\"</span><span class=\"p\">]</span>\n</code></pre></div>\n<h3>Makefile</h3>\n<p>In order to use component mode, here is the additional steps in Makefile</p>\n<div class=\"codehilite\" data-code-language=\"Makefile\"><pre><span></span><code><span class=\"nv\">SHELL</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span>/bin/bash\n<span class=\"nf\">release</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"nb\">pushd</span><span class=\"w\"> </span>guest<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>cargo<span class=\"w\"> </span>build<span class=\"w\"> </span>--release<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">popd</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">\"done\"</span>\n<span class=\"w\">    </span>mkdir<span class=\"w\"> </span>-p<span class=\"w\"> </span>wasm_modules<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>wasm-tools<span class=\"w\"> </span>component<span class=\"w\"> </span>new<span class=\"w\"> </span>--skip-validation<span class=\"w\">   </span>./target/wasm32-wasip1/release/guest.wasm<span class=\"w\">  </span>--adapt<span class=\"w\"> </span>./wasi_snapshot_preview1.reactor.wasm<span class=\"w\"> </span>-o<span class=\"w\"> </span>wasm_modules/guest.wasm\n<span class=\"w\">    </span><span class=\"nb\">pushd</span><span class=\"w\"> </span>host<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>cargo<span class=\"w\"> </span>run<span class=\"w\"> </span>--release\n\n<span class=\"nf\">debug</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"nb\">pushd</span><span class=\"w\"> </span>guest<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>cargo<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">popd</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">\"done\"</span>\n<span class=\"w\">    </span>mkdir<span class=\"w\"> </span>-p<span class=\"w\"> </span>wasm_modules<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>wasm-tools<span class=\"w\"> </span>component<span class=\"w\"> </span>new<span class=\"w\"> </span>--skip-validation<span class=\"w\">   </span>./target/wasm32-wasip1/debug/guest.wasm<span class=\"w\">  </span>--adapt<span class=\"w\"> </span>./wasi_snapshot_preview1.reactor.wasm<span class=\"w\"> </span>-o<span class=\"w\"> </span>wasm_modules/guest.wasm\n<span class=\"w\">    </span><span class=\"nb\">pushd</span><span class=\"w\"> </span>host<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>cargo<span class=\"w\"> </span>run\n</code></pre></div>\n<h3>the additional <code>wasi_snapshot_preview1.reactor.wasm</code></h3>\n<p>I got it from wasmtime download page, and I put a tgz file including the whole project in case it's needed.</p>\n<p>This is the sync version, I tried the async version before, it had the same <code>Thread 1</code> from guest code, so I simplified the code and make it sync as shown above. If necessary, I could provide the async version as well</p>\n</blockquote>",
        "id": 504321781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741471133
    },
    {
        "content": "<p>xdlin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359#issuecomment-2708502189\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359\">issue #10359</a>:</p>\n<blockquote>\n<p>Actually I tried both:</p>\n<ul>\n<li>sync mode</li>\n<li>async mode</li>\n</ul>\n<p>I thought it's a foundmantal question related with invocation mode, so I didn't paste the code, let's me post the minimal reproducible example here</p>\n<h3>the WIT file（<code>wit/server.wit</code>)</h3>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package my:service;\n\ninterface native {\n    predict: func(input: string) -&gt; u64;\n}\n\ninterface guest {\n    factor-get: func(id: string) -&gt; string;\n}\n\nworld factor-server {\n    import native;\n    export guest;\n}\n</code></pre></div>\n<h3>host code (<code>host/src/main.rs</code>)</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cargo_metadata</span><span class=\"p\">::</span><span class=\"n\">MetadataCommand</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">path</span><span class=\"p\">::</span><span class=\"n\">PathBuf</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span>\n<span class=\"w\">        </span><span class=\"n\">component</span><span class=\"p\">::{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::{</span><span class=\"n\">IoView</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">},</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">handler</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"../wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"factor-server\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">concurrent_imports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">concurrent_exports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">trappable_imports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">WasmStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasmStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">inherit_stdio</span><span class=\"p\">().</span><span class=\"n\">inherit_args</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IoView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WasmStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WasmStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasi</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">handler</span><span class=\"p\">::</span><span class=\"n\">my</span><span class=\"p\">::</span><span class=\"n\">service</span><span class=\"p\">::</span><span class=\"n\">native</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WasmStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_input</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"host: called from guest at: {:?}\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">thread</span><span class=\"p\">::</span><span class=\"n\">current</span><span class=\"p\">().</span><span class=\"n\">id</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"mi\">42</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get_workspace_root</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">PathBuf</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">metadata</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MetadataCommand</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">exec</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">metadata</span><span class=\"p\">.</span><span class=\"n\">workspace_root</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[tokio::main(flavor = </span><span class=\"s\">\"multi_thread\"</span><span class=\"cp\">)]</span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_workspace_root</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">\"wasm_modules/guest.wasm\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">debug_info</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">cranelift_debug_verifier</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_threads</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"main: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">thread</span><span class=\"p\">::</span><span class=\"n\">current</span><span class=\"p\">().</span><span class=\"n\">id</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">handles</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm_path</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">thread</span><span class=\"p\">::</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">WasmStates</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"n\">handler</span><span class=\"p\">::</span><span class=\"n\">FactorServer</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">WasmStates</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_path</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_states</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasmStates</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_states</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">handler</span><span class=\"p\">::</span><span class=\"n\">FactorServer</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"host call guest.fun at: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">thread</span><span class=\"p\">::</span><span class=\"n\">current</span><span class=\"p\">().</span><span class=\"n\">id</span><span class=\"p\">());</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">my_service_guest</span><span class=\"p\">()</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">call_factor_get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"n\">res</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"n\">handles</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">handles</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"res: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>the guest code (<code>guest/src/lib.rs</code>)</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"../wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"factor-server\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">Component</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::{</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">my</span><span class=\"p\">::</span><span class=\"n\">service</span><span class=\"p\">::</span><span class=\"n\">guest</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"p\">::</span><span class=\"n\">service</span><span class=\"p\">::</span><span class=\"n\">native</span><span class=\"p\">};</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Component</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">factor_get</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"guest: call host.fun at: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_thread</span><span class=\"p\">::</span><span class=\"n\">current</span><span class=\"p\">().</span><span class=\"n\">id</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">::</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">id</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"guest: return from host.fun at: {:?}\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">wasm_thread</span><span class=\"p\">::</span><span class=\"n\">current</span><span class=\"p\">().</span><span class=\"n\">id</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"guest result: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Cargo.toml</h3>\n<p>workspace Cargo.toml</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[workspace]</span>\n<span class=\"n\">resolver</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2\"</span>\n<span class=\"n\">members</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"s2\">\"host\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s2\">\"guest\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</code></pre></div>\n<p><code>host/Cargo.toml</code>:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"host\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">anyhow</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"1.0.81\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"backtrace\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">tokio</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"1.36.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"fs\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"macros\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"rt-multi-thread\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"time\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"component-model\"</span><span class=\"p\">]}</span>\n<span class=\"n\">wasmtime-wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"*\"</span><span class=\"p\">}</span>\n<span class=\"n\">cargo_metadata</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.18\"</span>\n<span class=\"n\">axum</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.8.1\"</span>\n<span class=\"n\">rand</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.9.0\"</span>\n</code></pre></div>\n<p><code>guest/Cargo.toml</code></p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"guest\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">futures</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.3.30\"</span>\n<span class=\"n\">once_cell</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"1.19.0\"</span>\n<span class=\"n\">wasm_thread</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.3.3\"</span>\n<span class=\"n\">wit-bindgen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.40\"</span>\n<span class=\"n\">wit-bindgen-rt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.40\"</span>\n\n<span class=\"k\">[lib]</span>\n<span class=\"n\">crate-type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"cdylib\"</span><span class=\"p\">]</span>\n</code></pre></div>\n<h3>Makefile</h3>\n<p>In order to use component mode, here is the additional steps in Makefile</p>\n<div class=\"codehilite\" data-code-language=\"Makefile\"><pre><span></span><code><span class=\"nv\">SHELL</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span>/bin/bash\n<span class=\"nf\">release</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"nb\">pushd</span><span class=\"w\"> </span>guest<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>cargo<span class=\"w\"> </span>build<span class=\"w\"> </span>--release<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">popd</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">\"done\"</span>\n<span class=\"w\">    </span>mkdir<span class=\"w\"> </span>-p<span class=\"w\"> </span>wasm_modules<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>wasm-tools<span class=\"w\"> </span>component<span class=\"w\"> </span>new<span class=\"w\"> </span>--skip-validation<span class=\"w\">   </span>./target/wasm32-wasip1/release/guest.wasm<span class=\"w\">  </span>--adapt<span class=\"w\"> </span>./wasi_snapshot_preview1.reactor.wasm<span class=\"w\"> </span>-o<span class=\"w\"> </span>wasm_modules/guest.wasm\n<span class=\"w\">    </span><span class=\"nb\">pushd</span><span class=\"w\"> </span>host<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>cargo<span class=\"w\"> </span>run<span class=\"w\"> </span>--release\n\n<span class=\"nf\">debug</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"nb\">pushd</span><span class=\"w\"> </span>guest<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>cargo<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">popd</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">\"done\"</span>\n<span class=\"w\">    </span>mkdir<span class=\"w\"> </span>-p<span class=\"w\"> </span>wasm_modules<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>wasm-tools<span class=\"w\"> </span>component<span class=\"w\"> </span>new<span class=\"w\"> </span>--skip-validation<span class=\"w\">   </span>./target/wasm32-wasip1/debug/guest.wasm<span class=\"w\">  </span>--adapt<span class=\"w\"> </span>./wasi_snapshot_preview1.reactor.wasm<span class=\"w\"> </span>-o<span class=\"w\"> </span>wasm_modules/guest.wasm\n<span class=\"w\">    </span><span class=\"nb\">pushd</span><span class=\"w\"> </span>host<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>cargo<span class=\"w\"> </span>run\n</code></pre></div>\n<h3>the additional <code>wasi_snapshot_preview1.reactor.wasm</code></h3>\n<p>I got it from wasmtime download page, and I put a tgz file (<a href=\"https://github.com/user-attachments/files/19146060/wit_demo.tgz\">wit_demo.tgz</a>) including the whole project in case it's needed.</p>\n<p>This is the sync version, I tried the async version before, it had the same <code>Thread 1</code> from guest code, so I simplified the code and make it sync as shown above. If necessary, I could provide the async version as well</p>\n</blockquote>",
        "id": 504321825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741471181
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359#issuecomment-2708513991\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359\">issue #10359</a>:</p>\n<blockquote>\n<blockquote>\n<p><code>\n       println!(\"guest: call host.fun at: {:?}\", wasm_thread::current().id());\n</code></p>\n</blockquote>\n<p>This is printing the <em>guest's</em> view of the current thread. You can think of each separate Wasm store, with Wasm instances, as a small virtual machine: the first thread will be \"thread 1\". That doesn't mean it's running on the <em>host's</em> thread 1.</p>\n</blockquote>",
        "id": 504324199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741473103
    },
    {
        "content": "<p>xdlin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359#issuecomment-2708518741\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359\">issue #10359</a>:</p>\n<blockquote>\n<p>Wow, nice catch, thanks for pointing it out, this do resolved my question.<br>\nThen I will try to focus on my own code optimization.</p>\n<p>Thank you and have a sweet weekend~</p>\n<p>Chris Fallin <strong><em>@</em></strong>.***&gt;于2025年3月8日 周六14:32写道：</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>   println!(&quot;guest: call host.fun at: {:?}&quot;, wasm_thread::current().id());\n</code></pre></div>\n\n<p>This is printing the <em>guest's</em> view of the current thread. You can think<br>\nof each separate Wasm store, with Wasm instances, as a small virtual<br>\nmachine: the first thread will be \"thread 1\". That doesn't mean it's<br>\nrunning on the <em>host's</em> thread 1.</p>\n<p>—<br>\nReply to this email directly, view it on GitHub<br>\n&lt;<a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359#issuecomment-2708513991\">https://github.com/bytecodealliance/wasmtime/issues/10359#issuecomment-2708513991</a>&gt;,<br>\nor unsubscribe<br>\n&lt;<a href=\"https://github.com/notifications/unsubscribe-auth/AAGXHFEKUXXJJYA2VPNVCV32TNVWHAVCNFSM6AAAAABYTJK3RGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDOMBYGUYTGOJZGE\">https://github.com/notifications/unsubscribe-auth/AAGXHFEKUXXJJYA2VPNVCV32TNVWHAVCNFSM6AAAAABYTJK3RGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDOMBYGUYTGOJZGE</a>&gt;<br>\n.<br>\nYou are receiving this because you authored the thread.Message ID:<br>\n<strong><em>@</em></strong>.***&gt;<br>\n[image: cfallin]<em>cfallin</em> left a comment (<a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359\">bytecodealliance/wasmtime#10359</a>)<br>\n&lt;<a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359#issuecomment-2708513991\">https://github.com/bytecodealliance/wasmtime/issues/10359#issuecomment-2708513991</a>&gt;</p>\n<div class=\"codehilite\"><pre><span></span><code>   println!(&quot;guest: call host.fun at: {:?}&quot;, wasm_thread::current().id());\n</code></pre></div>\n\n<p>This is printing the <em>guest's</em> view of the current thread. You can think<br>\nof each separate Wasm store, with Wasm instances, as a small virtual<br>\nmachine: the first thread will be \"thread 1\". That doesn't mean it's<br>\nrunning on the <em>host's</em> thread 1.</p>\n<p>—<br>\nReply to this email directly, view it on GitHub<br>\n&lt;<a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359#issuecomment-2708513991\">https://github.com/bytecodealliance/wasmtime/issues/10359#issuecomment-2708513991</a>&gt;,<br>\nor unsubscribe<br>\n&lt;<a href=\"https://github.com/notifications/unsubscribe-auth/AAGXHFEKUXXJJYA2VPNVCV32TNVWHAVCNFSM6AAAAABYTJK3RGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDOMBYGUYTGOJZGE\">https://github.com/notifications/unsubscribe-auth/AAGXHFEKUXXJJYA2VPNVCV32TNVWHAVCNFSM6AAAAABYTJK3RGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDOMBYGUYTGOJZGE</a>&gt;<br>\n.<br>\nYou are receiving this because you authored the thread.Message ID:<br>\n<strong><em>@</em></strong>.***&gt;</p>\n</blockquote>\n</blockquote>",
        "id": 504325077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741473876
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10359\">issue #10359</a>:</p>\n<blockquote>\n<h2>Quetion</h2>\n<p>Does wasmtime always run Wasm guest code in main thread?</p>\n<h2>Background</h2>\n<p>I plan to use Wasm as a plugin system for rust service, and call multiple host functions within the guest code, I found that the Wasm itself became the bottleneck, after doing some investigation, I found that whatever method I used, despite of the multiple threads Wasmtime Engine/Module/Instance I have in host code, __the same wasm file__ will always runs in the same thread (thread ID 1, the main thread)</p>\n<p>There is the log I print in console, hopefully it's self explainable</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">main</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ThreadId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">res</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">guest</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n<span class=\"n\">res</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">guest</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n<span class=\"n\">res</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">guest</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n<span class=\"n\">res</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">guest</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n</code></pre></div>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/8923a9f0-63dc-4480-a7a5-b3da012eed3c\">https://github.com/user-attachments/assets/8923a9f0-63dc-4480-a7a5-b3da012eed3c</a>)</p>\n<h2>the issue</h2>\n<p>I'd like to improve the throughput of this service, but if the guest function alwasys runs in the same single thread, the overall throughput will depen on the time spending in guest code, let's say if it takes 10ms, the overall QPS will be limited to 100,  even if I add more threads to support more wasmtime instances.</p>\n<p>Is this by design, or I did I miss some critical configuration?</p>\n<h2>the requirement</h2>\n<p>I'd like to eliminate the bottleneck in single guest thread mode and improve service performance, which part should I change?</p>\n</blockquote>",
        "id": 504325423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741474180
    }
]