[
    {
        "content": "<p>posborne opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10671\">PR #10671</a> from <code>posborne:custom-async-yield</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>As described in<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/issues/10667\">https://github.com/bytecodealliance/wasmtime/issues/10667</a>, the yield future provided in-tree when a epoch callback cannot always trigger the specific behavior desired in async schedulers like tokio.</p>\n<p>This change introduces a new variant to the UpdateDeadline callback with the future implementing the desired task suspension behavior desired for yielding control within the async runtime.</p>\n<p>Note that this change does not allow for controlling this behavior for fuel yielding at this time.</p>\n<p>CC @aturon @fitzgen -- at first I looked at adding a separate async callback but this felt a little cleaner but happy to change things up.  There's definitely some overhead here in needing to frequently do the future boxing so would be happy to look at other paths to optimize if we have concerns (though my gut says it shouldn't be _too_ bad).</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 514222649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745526334
    },
    {
        "content": "<p><strong>posborne</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10671\">PR #10671</a>.</p>",
        "id": 514222651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745526334
    },
    {
        "content": "<p><strong>posborne</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10671\">PR #10671</a>.</p>",
        "id": 514222652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745526334
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10671#discussion_r2059264701\">PR review comment</a>:</p>\n<blockquote>\n<p>Drive-by-comment on this unrelated to this change, mind throwing <code>#[non_exhaustive]</code> on this enum definition? That'll help consumers work with this a bit more nicely with the <code>#[cfg]</code>'d variants</p>\n</blockquote>",
        "id": 514232288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745530350
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10671#discussion_r2059265544\">PR review comment</a>:</p>\n<blockquote>\n<p>I realize this was probably copied from <code>async_yield_impl</code> but nowadays I think we can do <code>let mut future = core::pin::pin!(future);</code> to safely creat <code>Pin&lt;Thing&gt;</code> and then with some <code>future.as_mut()</code> or such invocations I think it can safely create <code>Pin&lt;&amp;mut T&gt;</code> to pass here</p>\n</blockquote>",
        "id": 514232289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745530350
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10671#pullrequestreview-2792564803\">PR review</a>:</p>\n<blockquote>\n<p>Seems like a reasonable API to me! I think it's fine to add similar configuration options for fuel in the future if necessary as a Fuel-specific configuration option</p>\n</blockquote>",
        "id": 514232290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745530350
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10671#pullrequestreview-2800472104\">PR review</a>.</p>",
        "id": 514888659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745868349
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10671#discussion_r2064376797\">PR review comment</a>:</p>\n<blockquote>\n<p>In this particular case, I think we can just change the type signature of the future to be a <code>Pin&lt;Box&lt;dyn Future ...&gt;&gt;&gt;</code> to avoid having to do anything extra to mark the memory as pinned.</p>\n</blockquote>",
        "id": 514888660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745868350
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10671\">PR #10671</a>.</p>",
        "id": 514898102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745872110
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10671#issuecomment-2836558248\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10671\">PR #10671</a>:</p>\n<blockquote>\n<p>I considered adding a new API such as <code>epoch_deadline_async_yield_and_update_custom</code> or modifying the existing API to take a duration or duration + future-yielding callback but that felt pretty heavy.  As-is, there's an option for embedders that have a need to customize the yield behavior but figured I would at least call things out.</p>\n<p>The tokio behavior is subtle enough to probably not rightly be able to be considered a bug and most use cases will probably not run into issues with the stock yield behavior.</p>\n</blockquote>",
        "id": 514901305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745873354
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10671#pullrequestreview-2801078631\">PR review</a>.</p>",
        "id": 514910068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745877116
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10671\">PR #10671</a>.</p>",
        "id": 514912636,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745878410
    }
]