[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p>This is an implementation TODO that still needs to be resolved for full component-model async support:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs#L2895-L2897\">future/stream reads currently require <code>async</code></a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs#L2652-L2654\">future/stream writes currently require <code>async</code></a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs#L3290\">cancelling future/stream writes ignores <code>async</code></a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs#L3316\">cancelling future/stream reads ignores <code>async</code></a></li>\n</ul>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/crates/wasmtime/src/runtime/component/concurrent.rs#L2921-L2934\">Subtask cancellation</a>, however, does handle it.</p>\n<p>@lukewagner would you be up for writing some <code>*.wast</code> spec tests for these behaviors in parallel? I'm also not sure if there's tests for <code>async</code> in lift/lower options yet as well (e.g. mixing/matching async lifts/lowers) which would also be good to test.</p>\n</blockquote>",
        "id": 537768970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757027667
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:component-model-async label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">Issue #11611</a>.</p>",
        "id": 537768971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757027667
    },
    {
        "content": "<p>alexcrichton assigned dicej to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>.</p>",
        "id": 537768980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757027673
    },
    {
        "content": "<p>lukewagner <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3258716210\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p>Yep, will do</p>\n</blockquote>",
        "id": 537892620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757085162
    },
    {
        "content": "<p>lukewagner <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3258956407\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p>Oh, also, to this part:</p>\n<blockquote>\n<p>I'm also not sure if there's tests for async in lift/lower options yet as well (e.g. mixing/matching async lifts/lowers) which would also be good to test.</p>\n</blockquote>\n<p><a href=\"https://github.com/WebAssembly/component-model/blob/main/test/async/async-calls-sync.wast\"><code>async-calls-sync.wast</code></a> has an (async, sync, async) hamburger that tests a number of the interesting/hard cases and a number of the other tests have sync calling async in other combinations.</p>\n</blockquote>",
        "id": 537906480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757089643
    },
    {
        "content": "<p>lukewagner <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3259083930\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p>Based on <a href=\"https://github.com/WebAssembly/component-model/blob/tests/test/async/reject-gated-features.wast\">this test</a>, it looks like validation does currently reject <code>async</code> on <code>{stream,future}.cancel-{read,write}</code> and <code>subtask.cancel</code> and <code>async</code> is also rejected on <code>resource.drop</code> as a parsing error.</p>\n</blockquote>",
        "id": 537910146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757091060
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3259126699\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<blockquote>\n<p>Based on <a href=\"https://github.com/WebAssembly/component-model/blob/tests/test/async/reject-gated-features.wast\">this test</a>, it looks like validation does currently reject <code>async</code> on <code>{stream,future}.cancel-{read,write}</code> and <code>subtask.cancel</code> and <code>async</code> is also rejected on <code>resource.drop</code> as a parsing error.</p>\n</blockquote>\n<p>Yeah, that does ring a bell now; I think we punted on a few variations.  So it sounds like we only need to support synchronous <code>{stream,future}.cancel-{read,write}</code>.  Do we need to support synchronous <code>{stream,future}.{read,write}</code>, or did we punt on that for now, also?</p>\n</blockquote>",
        "id": 537911030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757091380
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3259143068\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p>For the intrinsics in Wasmtime you'll need <code>-Wcomponent-model-async-builtins</code> since it's separately gated from <code>-Wcomponent-model-async</code>, and that should get the intrinsics passing validation. One of the main blind spots we have right now in the implementation is that for non-<code>async</code> intrinsics they read/write cancellation ones aren't correctly handling the case that blocking should happen. So one major thing that I think is worthwhile to test is cancelling a read/write in a way that needs to block the calling task and ensuring that <code>BLOCKED</code> doesn't get returned.</p>\n<p>For <code>resource.drop</code> async bits Wasmtime doesn't currently have any support for that IIRC, so that can be split out to a separate file for now that we'll need to implement later.</p>\n<blockquote>\n<p>Yeah, that does ring a bell now; I think we punted on a few variations</p>\n</blockquote>\n<p>To be clear, we punted on the <code>async</code> versions, not the versions that should handle <code>BLOCKED</code>. The <code>BLOCKED</code> code should never be returned AFAIK (which it currently does).</p>\n<p>Also, IMO we should either rip out everything from Wasmtime that doesn't match the spec or we should match the spec. I don't want to be in a situation where we half-implement a historical snapshot of the spec. Basically if we try to support <code>async</code> then we should, even if it's a separate feature gate, or we should remove the support that we have. (I know this is a point you and I differ on @dicej historically so we can talk more about this too)</p>\n</blockquote>",
        "id": 537911776,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757091672
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3259147568\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<blockquote>\n<p>To be clear, we punted on the <code>async</code> versions, not the versions that should handle <code>BLOCKED</code>. The <code>BLOCKED</code> code should never be returned AFAIK (which it currently does).</p>\n</blockquote>\n<p>Right, that's what I mean, and I'm working on fixing that now.</p>\n</blockquote>",
        "id": 537911974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757091757
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3259151421\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p>Ok yeah my reading comprehension is lacking today as it does many days...</p>\n<blockquote>\n<p>Do we need to support synchronous {stream,future}.{read,write}, or did we punt on that for now, also?</p>\n</blockquote>\n<p>Yes, we need to support this. We didn't punt on this.</p>\n</blockquote>",
        "id": 537912178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757091838
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3259161400\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p>For posterity <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11623\">https://github.com/bytecodealliance/wasmtime/pull/11623</a> is an example test that is failing due to this issue</p>\n</blockquote>",
        "id": 537912848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757092088
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3259256858\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p>Making progress: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11625\">https://github.com/bytecodealliance/wasmtime/pull/11625</a></p>\n</blockquote>",
        "id": 537919686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757094340
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3259272248\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p>It just remembered (after Alex pointed it out to me yesterday) that a pure WAST test for <code>{stream,future}.cancel-{read,write}</code> won't exercise my fix here anyway, since it only applies when the other end is owned by the host.  I'll work on adding some tests to <code>component-async-tests</code>.</p>\n</blockquote>",
        "id": 537920683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757094751
    },
    {
        "content": "<p>lukewagner <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3263128986\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p>Alright, <a href=\"https://github.com/WebAssembly/component-model/blob/main/test/async/sync-streams.wast\">here's</a> a test for sync <code>stream.{read,write}</code> that blocks, switches, switches back and then completes (but currently fails with \"synchronous stream and future writes not yet supported\").</p>\n</blockquote>",
        "id": 538026109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757187299
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3267725409\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p>#11625 Addresses the <code>cancel-{read,write}</code> part of this issue.  I'll work on the <code>{read,write}</code> part next.</p>\n</blockquote>",
        "id": 538304434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757361157
    },
    {
        "content": "<p>lukewagner <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3268219396\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p>Just as a interesting side note, thinking about what it would take to be able to write a pure <code>.wast</code> test that exercised the <code>BLOCKED</code> case of sync <code>cancel-{read,write}</code>, it'd just be this <code>stream.read-{data,complete}</code> feature we already discussed adding at some point in the future in the <a href=\"https://github.com/WebAssembly/wasi-cli/issues/65#issuecomment-3180774959\">stdio issue</a>.</p>\n</blockquote>",
        "id": 538323248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757370153
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3270942792\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/11645\">https://github.com/bytecodealliance/wasmtime/pull/11645</a> adds support for synchronous <code>{stream,future}.{read,write}</code> calls, but I'm hitting a new issue when running Luke's <code>sync-streams.wast</code> test, so I'm going to debug that before I close this issue.</p>\n</blockquote>",
        "id": 538448699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757427292
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3271371403\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/11655\">https://github.com/bytecodealliance/wasmtime/pull/11655</a> should finish this up, finally (and extends my streak of only posting PRs ending in 5 for this issue).</p>\n</blockquote>",
        "id": 538474412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757433964
    },
    {
        "content": "<p>dicej edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611#issuecomment-3271371403\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/11655\">https://github.com/bytecodealliance/wasmtime/pull/11655</a> should finish this up, finally (and extends my streak of only posting PRs ending in 5 for this issue: #11625, #11645, and #11655).</p>\n</blockquote>",
        "id": 538474657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757434040
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11611\">issue #11611</a>:</p>\n<blockquote>\n<p>This is an implementation TODO that still needs to be resolved for full component-model async support:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs#L2895-L2897\">future/stream reads currently require <code>async</code></a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs#L2652-L2654\">future/stream writes currently require <code>async</code></a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs#L3290\">cancelling future/stream writes ignores <code>async</code></a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs#L3316\">cancelling future/stream reads ignores <code>async</code></a></li>\n</ul>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/crates/wasmtime/src/runtime/component/concurrent.rs#L2921-L2934\">Subtask cancellation</a>, however, does handle it.</p>\n<p>@lukewagner would you be up for writing some <code>*.wast</code> spec tests for these behaviors in parallel? I'm also not sure if there's tests for <code>async</code> in lift/lower options yet as well (e.g. mixing/matching async lifts/lowers) which would also be good to test.</p>\n</blockquote>",
        "id": 538494379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757439475
    }
]