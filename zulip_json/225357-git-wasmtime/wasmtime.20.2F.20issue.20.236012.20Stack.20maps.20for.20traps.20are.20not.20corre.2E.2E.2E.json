[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6012\">issue #6012</a>:</p>\n<blockquote>\n<p>Currently Cranelift will emit a stack map for a trap instruction. This is frequently done with <code>.take_stack_map()</code>, however, and some \"compound opcodes\", such as float-to-int conversion on x64, have many traps throughout their body. Only one trap will get the stack map when they theoretically all need the stack map.</p>\n<p>Additionally, though, Wasmtime doesn't actually need stack maps at trap opcodes since after a trap an instance will be terminated and all stack-based roots will become unrooted and candidates for GC. </p>\n<p>Given this I think it would be best to remove all stack maps from traps since they're otherwise just taking up space in the compiled artifact and aren't getting used for anything.</p>\n</blockquote>",
        "id": 341590170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678748460
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6012#issuecomment-1467096290\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6012\">issue #6012</a>:</p>\n<blockquote>\n<p>This seems correct to me (i.e., safe to remove); and furthermore, might result in decent codegen improvements in code using reftypes. This is because in addition to the stackmap metadata itself, the safepoint-at-every-trap implies spilling all ref values to the stack. So code that (i) has refs and (ii) has other ops that trap, like divides or non-truncating float/int conversions, might see speedups.</p>\n</blockquote>",
        "id": 341590645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678748674
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6012#issuecomment-3338003604\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6012\">issue #6012</a>:</p>\n<blockquote>\n<p>I assume this has been fixed by the user stack maps?</p>\n</blockquote>",
        "id": 541634809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758882590
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6012\">issue #6012</a>:</p>\n<blockquote>\n<p>Currently Cranelift will emit a stack map for a trap instruction. This is frequently done with <code>.take_stack_map()</code>, however, and some \"compound opcodes\", such as float-to-int conversion on x64, have many traps throughout their body. Only one trap will get the stack map when they theoretically all need the stack map.</p>\n<p>Additionally, though, Wasmtime doesn't actually need stack maps at trap opcodes since after a trap an instance will be terminated and all stack-based roots will become unrooted and candidates for GC. </p>\n<p>Given this I think it would be best to remove all stack maps from traps since they're otherwise just taking up space in the compiled artifact and aren't getting used for anything.</p>\n</blockquote>",
        "id": 541726628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758912167
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6012#issuecomment-3340011038\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6012\">issue #6012</a>:</p>\n<blockquote>\n<p>Indeed!</p>\n</blockquote>",
        "id": 541726630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758912168
    }
]