[
    {
        "content": "<p>mihaly-sisak opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133\">issue #10133</a>:</p>\n<blockquote>\n<p>Hello all!<br>\nThis is the first Rust project I am touching, so maybe I am completely misunderstanding something. I'm trying to build wasmtime-c-api to use for plugins in my simulation/game.</p>\n<p>Following this tutorial: <a href=\"https://docs.wasmtime.dev/examples-minimal.html\">https://docs.wasmtime.dev/examples-minimal.html</a></p>\n<p>The command I build with:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_OPT_LEVEL</span><span class=\"o\">=</span>s\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_PANIC</span><span class=\"o\">=</span>abort\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_LTO</span><span class=\"o\">=</span><span class=\"nb\">true</span>\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_CODEGEN_UNITS</span><span class=\"o\">=</span><span class=\"m\">1</span>\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_STRIP</span><span class=\"o\">=</span>debuginfo\n\ncargo<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--package<span class=\"w\"> </span>wasmtime-c-api<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--release<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--no-default-features<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--features<span class=\"w\"> </span><span class=\"s2\">\"disable-logging cranelift cache parallel-compilation wasi\"</span>\n</code></pre></div>\n<p>I plan for my users writing .wasm extensions, and loading them directly. If I understood things correctly I need <code>cranelift</code> to be able to do that. I also enabled <code>parallel-compilation</code> and <code>cache</code> to speed thing up and <code>wasi</code> to have a standard text i/o interface.</p>\n<p>I have 2 question:<br>\n1) Compiling with this command yields the following <code>conf.h</code></p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// WASMTIME_FEATURE_LIST</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_PROFILING */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_WAT */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_CACHE */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_PARALLEL_COMPILATION */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_WASI */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_LOGGING */</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_DISABLE_LOGGING</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_COREDUMP */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_ADDR2LINE */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_DEMANGLE */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_THREADS */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_GC */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_GC_DRC */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_GC_NULL */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_ASYNC */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_CRANELIFT */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_WINCH */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_DEBUG_BUILTINS */</span>\n<span class=\"c1\">// ... if you add a line above this be sure to change the other locations</span>\n<span class=\"c1\">// marked WASMTIME_FEATURE_LIST</span>\n</code></pre></div>\n<p>It seem like in spite of me enabling <code>cache</code>, <code>parallel-compilation</code> and <code>cranelift</code> it is still not enabled somehow. What am I missing?</p>\n<p>2) Can I cherry-pick wasi-proposals I enable? I want my extensions to have text i/o and access to only a specific folder (I found the preopen directory part) but that's it. I do not want them to be able to access the web/open ports. If I enable feature <code>wasi</code> does that enables <code>wasmtime/wasi-http</code>? Can I enable <code>wasi</code> without any network access?<br>\nI am confused about the Rust build process. Are there docs on the features? For example what does <code>wmemcheck</code> do? I want my users safe from potentially malicious extensions, do I need it? Same question with <code>memory-protection-keys</code>.</p>\n</blockquote>",
        "id": 496333149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738070357
    },
    {
        "content": "<p>mihaly-sisak <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133#issuecomment-2619108038\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133\">issue #10133</a>:</p>\n<blockquote>\n<p>If I use cmake:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cmake<span class=\"w\"> </span>-B<span class=\"w\"> </span>_build<span class=\"w\"> </span>-S<span class=\"w\"> </span>.<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>-DWASMTIME_DISABLE_ALL_FEATURES<span class=\"o\">=</span>ON<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>-DWASMTIME_FEATURE_DISABLE_LOGGING<span class=\"o\">=</span>ON<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>-DWASMTIME_FEATURE_CRANELIFT<span class=\"o\">=</span>ON<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>-DWASMTIME_FEATURE_CACHE<span class=\"o\">=</span>ON<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>-DWASMTIME_FEATURE_PARALLEL_COMPILATION<span class=\"o\">=</span>ON<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>-DWASMTIME_FEATURE_WASI<span class=\"o\">=</span>ON<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>-DCMAKE_BUILD_TYPE<span class=\"o\">=</span>Release\n\ncmake<span class=\"w\"> </span>--build<span class=\"w\"> </span>_build<span class=\"w\"> </span>--config<span class=\"w\"> </span>Release\n</code></pre></div>\n<p>Then the <code>conf.h</code> in the <code>_build</code> folder is correct.<br>\nBut if I install it with <code>cmake --install _build --prefix _install</code>, then the file gets updated:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// WASMTIME_FEATURE_LIST</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_PROFILING</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_WAT</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_CACHE</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_PARALLEL_COMPILATION</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_WASI</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_LOGGING</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_DISABLE_LOGGING */</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_COREDUMP</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_ADDR2LINE</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_DEMANGLE</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_THREADS</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_GC</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_GC_DRC</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_GC_NULL</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_ASYNC</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_CRANELIFT</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_WINCH</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_DEBUG_BUILTINS</span>\n<span class=\"c1\">// ... if you add a line above this be sure to change the other locations</span>\n<span class=\"c1\">// marked WASMTIME_FEATURE_LIST</span>\n</code></pre></div>\n<p><a href=\"https://github.com/user-attachments/files/18574618/wasmtime_compile_log.txt\">wasmtime_compile_log.txt</a><br>\nIn the beginning only features I choose are enabled, but after <code>Built target wasmtime-crate</code> it lists all features as enabled. </p>\n<p>I'm not familiar with cargo so maybe I am overlooking something really obvious here.</p>\n</blockquote>",
        "id": 496343255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738073281
    },
    {
        "content": "<p>mihaly-sisak edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133\">issue #10133</a>:</p>\n<blockquote>\n<p>Hello all!<br>\nThis is the first Rust project I am touching, so maybe I am completely misunderstanding something. I'm trying to build wasmtime-c-api to use for plugins in my simulation/game.</p>\n<p>Following this tutorial: <a href=\"https://docs.wasmtime.dev/examples-minimal.html\">https://docs.wasmtime.dev/examples-minimal.html</a></p>\n<p>The command I build with:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_OPT_LEVEL</span><span class=\"o\">=</span>s\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_PANIC</span><span class=\"o\">=</span>abort\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_LTO</span><span class=\"o\">=</span><span class=\"nb\">true</span>\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_CODEGEN_UNITS</span><span class=\"o\">=</span><span class=\"m\">1</span>\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_STRIP</span><span class=\"o\">=</span>debuginfo\n\ncargo<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--package<span class=\"w\"> </span>wasmtime-c-api<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--release<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--no-default-features<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--features<span class=\"w\"> </span><span class=\"s2\">\"disable-logging cranelift cache parallel-compilation wasi\"</span>\n</code></pre></div>\n<p>I plan for my users writing .wasm extensions, and loading them directly. If I understood things correctly I need <code>cranelift</code> to be able to do that. I also enabled <code>parallel-compilation</code> and <code>cache</code> to speed thing up and <code>wasi</code> to have a standard text i/o interface.</p>\n<p>I have 2 question:<br>\n1) Compiling with this command yields the following <code>conf.h</code></p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// WASMTIME_FEATURE_LIST</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_PROFILING */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_WAT */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_CACHE */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_PARALLEL_COMPILATION */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_WASI */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_LOGGING */</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_DISABLE_LOGGING</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_COREDUMP */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_ADDR2LINE */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_DEMANGLE */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_THREADS */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_GC */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_GC_DRC */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_GC_NULL */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_ASYNC */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_CRANELIFT */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_WINCH */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_DEBUG_BUILTINS */</span>\n<span class=\"c1\">// ... if you add a line above this be sure to change the other locations</span>\n<span class=\"c1\">// marked WASMTIME_FEATURE_LIST</span>\n</code></pre></div>\n<p>It seems like in spite of me enabling <code>cache</code>, <code>parallel-compilation</code> and <code>cranelift</code> it is still not enabled somehow. What am I missing?</p>\n<p>2) Can I cherry-pick wasi-proposals I enable? I want my extensions to have text i/o and access to only a specific folder (I found the preopen directory part) but that's it. I do not want them to be able to access the web/open ports. If I enable feature <code>wasi</code> does that enables <code>wasmtime/wasi-http</code>? Can I enable <code>wasi</code> without any network access?<br>\nI am confused about the Rust build process. Are there docs on the features? For example what does <code>wmemcheck</code> do? I want my users safe from potentially malicious extensions, do I need it? Same question with <code>memory-protection-keys</code>.</p>\n</blockquote>",
        "id": 496354549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738076041
    },
    {
        "content": "<p>mihaly-sisak edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133\">issue #10133</a>:</p>\n<blockquote>\n<p>Hello all!<br>\nThis is the first Rust project I am touching, so maybe I am completely misunderstanding something. I'm trying to build wasmtime-c-api to use for plugins in my simulation/game.</p>\n<p>Following this tutorial: <a href=\"https://docs.wasmtime.dev/examples-minimal.html\">https://docs.wasmtime.dev/examples-minimal.html</a></p>\n<p>The command I build with:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_OPT_LEVEL</span><span class=\"o\">=</span>s\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_PANIC</span><span class=\"o\">=</span>abort\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_LTO</span><span class=\"o\">=</span><span class=\"nb\">true</span>\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_CODEGEN_UNITS</span><span class=\"o\">=</span><span class=\"m\">1</span>\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_STRIP</span><span class=\"o\">=</span>debuginfo\n\ncargo<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--package<span class=\"w\"> </span>wasmtime-c-api<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--release<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--no-default-features<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--features<span class=\"w\"> </span><span class=\"s2\">\"disable-logging cranelift cache parallel-compilation wasi\"</span>\n</code></pre></div>\n<p>I plan for my users writing .wasm extensions, and loading them directly. If I understood things correctly I need <code>cranelift</code> to be able to do that. I also enabled <code>parallel-compilation</code> and <code>cache</code> to speed thing up and <code>wasi</code> to have a standard text i/o interface.</p>\n<p>I have 2 question:<br>\n1) Compiling with this command yields the following <code>conf.h</code></p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// WASMTIME_FEATURE_LIST</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_PROFILING */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_WAT */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_CACHE */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_PARALLEL_COMPILATION */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_WASI */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_LOGGING */</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_DISABLE_LOGGING</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_COREDUMP */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_ADDR2LINE */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_DEMANGLE */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_THREADS */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_GC */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_GC_DRC */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_GC_NULL */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_ASYNC */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_CRANELIFT */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_WINCH */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_DEBUG_BUILTINS */</span>\n<span class=\"c1\">// ... if you add a line above this be sure to change the other locations</span>\n<span class=\"c1\">// marked WASMTIME_FEATURE_LIST</span>\n</code></pre></div>\n<p>It seems like in spite of me enabling <code>cache</code>, <code>parallel-compilation</code>, <code>wasi</code> and <code>cranelift</code> it is still not enabled somehow. What am I missing?</p>\n<p>2) Can I cherry-pick wasi-proposals I enable? I want my extensions to have text i/o and access to only a specific folder (I found the preopen directory part) but that's it. I do not want them to be able to access the web/open ports. If I enable feature <code>wasi</code> does that enables <code>wasmtime/wasi-http</code>? Can I enable <code>wasi</code> without any network access?<br>\nI am confused about the Rust build process. Are there docs on the features? For example what does <code>wmemcheck</code> do? I want my users safe from potentially malicious extensions, do I need it? Same question with <code>memory-protection-keys</code>.</p>\n</blockquote>",
        "id": 496354682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738076069
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133#issuecomment-2620009981\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133\">issue #10133</a>:</p>\n<blockquote>\n<p>If possible I'd recommend using the cmake-based build for the C API since that's what we test on CI. Otherwise though are you sure you're using the right <code>conf.h</code>? Using the Cargo-based build the <code>conf.h</code> file is squirreled away in the <code>target/*</code> directory so if you've got multiple builds there might be multiple copies. Locally your build command produces the right <code>#define</code>s in <code>conf.h</code> for me.</p>\n<blockquote>\n<p>Can I cherry-pick wasi-proposals I enable? I want my extensions to have text i/o and access to only a specific folder (I found the preopen directory part) but that's it. I do not want them to be able to access the web/open ports. If I enable feature wasi does that enables wasmtime/wasi-http? Can I enable wasi without any network access?</p>\n</blockquote>\n<p>Right now you can't pick-and-choose via the C API. That being said all access to everything is denied by default, so if you don't explicitly allow something then guests won't have access. Furthermore wasi-http and sockets and such are features of WASIp2, or components, which the C API also does not have support for. In that sense your needs should already be met by the C API which only supports WASIp1 and doesn't support networking at all.</p>\n<blockquote>\n<p>I am confused about the Rust build process. Are there docs on the features? </p>\n</blockquote>\n<p>If you're curious about Rust \"cargo features\" in general you can find documentation <a href=\"https://doc.rust-lang.org/cargo/reference/features.html\">here</a>. For wasmtime-specific features you can find documentation either <a href=\"https://docs.rs/wasmtime/latest/wasmtime/#crate-features\">in the online API docs</a> for the Rust <code>wasmtime</code> crate and we also try to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b9b0ba4922b8a1054a1748c1f6ae581d57a090f5/crates/wasmtime/Cargo.toml#L119-L389\">document things in <code>Cargo.toml</code></a> where features are designed as well.</p>\n<blockquote>\n<p>For example what does wmemcheck do? </p>\n</blockquote>\n<p>wmemcheck is a sort of valgrind-for-wasm. There's some very minimal documentation <a href=\"https://docs.wasmtime.dev/wmemcheck.html\">here</a> but the general tl;dr; is you likely don't need it. It's not required for safe execution of code. In general the feature isn't fully complete so it's not recommended for general audiences yet.</p>\n<blockquote>\n<p>I want my users safe from potentially malicious extensions, do I need it? </p>\n</blockquote>\n<p>Wasmtime by default is safe to execute any wasm. You don't need to go out of your way to enable anything to enable safe execution. Access to the host OS is strictly controlled by you, the embedder, and guests have access to nothing you don't give them access to.</p>\n<p>The only major things you might need to worry about are resource exhaustion such as consuming too much memory or CPU, Wasmtime doesn't protect against those by default.</p>\n<blockquote>\n<p>Same question with memory-protection-keys.</p>\n</blockquote>\n<p>This is a feature related to Intel's MPK CPU feature. This is only used with the pooling allocator and it's purely a performance optimization. Not needed for safety at all.</p>\n</blockquote>",
        "id": 496420125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738096740
    },
    {
        "content": "<p>mihaly-sisak <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133#issuecomment-2620101099\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133\">issue #10133</a>:</p>\n<blockquote>\n<p>@alexcrichton you are a godsent both here and my previous issue.</p>\n<ul>\n<li>I looked at the root directory toml, but thats for <code>wasmtime-cli</code>, I needed the <code>wasmtime</code> crate in <code>crates/wasmtime</code>. It has great documentation. I was really thrown off by packages having difference between their rust names and directory names. Thank you.</li>\n<li>Things get included because <code>default-features = false</code> is missing in a few places (c-api, wasi-io, wasi)</li>\n<li>The current config is <code>wasmtime-cranelift = { workspace = true, optional = true, features = ['pulley'] }</code> I set it to <code>wasmtime-cranelift = { workspace = true, optional = true, features = ['host-arch'] }</code> as ~100% of my users are AMD64 windows users.</li>\n</ul>\n<p>The current feature set I ended up with is <code>cache parallel-compilation cranelift gc gc-drc disable-logging</code>. Does this sound sane to you? I read the article how contexts are supposed to be ephemeral , one context per server request. In my use case they would be more permanent with internal state, running from simulation start to end. Does this sound feasible?</p>\n<p>I read the articles about the fuel based/epoch based approaches to limit CPU usage, really cool stuff.</p>\n</blockquote>",
        "id": 496428027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738100026
    },
    {
        "content": "<p>mihaly-sisak edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133#issuecomment-2620101099\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133\">issue #10133</a>:</p>\n<blockquote>\n<p>@alexcrichton you are a godsent both here and my previous issue.</p>\n<ul>\n<li>I looked at the root directory toml, but thats for <code>wasmtime-cli</code>, I needed the <code>wasmtime</code> crate in <code>crates/wasmtime</code>. It has great documentation. I was really thrown off by packages having difference between their rust names and directory names. Thank you.</li>\n<li>Things get included because <code>default-features = false</code> is missing in a few places (c-api, wasi-io, wasi)</li>\n<li>The current config is <code>wasmtime-cranelift = { workspace = true, optional = true, features = ['pulley'] }</code> I set it to <code>wasmtime-cranelift = { workspace = true, optional = true, features = ['host-arch'] }</code> as ~100% of my users are AMD64 windows users. Edit: I just realized <code>host-arch</code> is part of the default set.</li>\n</ul>\n<p>The current feature set I ended up with is <code>cache parallel-compilation cranelift gc gc-drc disable-logging</code>. Does this sound sane to you? I read the article how contexts are supposed to be ephemeral , one context per server request. In my use case they would be more permanent with internal state, running from simulation start to end. Does this sound feasible?</p>\n<p>I read the articles about the fuel based/epoch based approaches to limit CPU usage, really cool stuff.</p>\n</blockquote>",
        "id": 496431027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738101352
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133#issuecomment-2620146709\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133\">issue #10133</a>:</p>\n<blockquote>\n<p>Ah ok makes sense! For <code>default-features = false</code> I think there might be some hidden rust nuggets perhaps. Most of our dependencies are <code>workspace = true</code> which means they inherit configuration from the root <code>Cargo.toml</code> in the <code>[workspace.dependencies]</code> table. In that table most dependencies should be listed as <code>default-features = false</code> so in theory you shouldn't need to specify it again.</p>\n<p>Additionally for the dependency on <code>wasmtime-cranelift</code> you should already support the native host architecture and there's no need to remove the <code>pulley</code> build. That'll shrink the size of Cranelift slightly, however, and if that's important to you mind filing a separate issue for that?</p>\n<p>In theory you should be able to use Wasmtime with zero source-level modifications. You're of course welcome to do so, but in terms of normal usage we strive to make it unnecessary so that way you don't have to carry your own patches or anything like that.</p>\n<blockquote>\n<p>The current feature set I ended up with is cache parallel-compilation cranelift gc gc-drc disable-logging. Does this sound sane to you? I read the article how contexts are supposed to be ephemeral , one context per server request. In my use case they would be more permanent with internal state, running from simulation start to end. Does this sound feasible?</p>\n</blockquote>\n<p>Yep that sounds reasonable, and yes a long-running <code>Store&lt;T&gt;</code> should work just fine too.</p>\n</blockquote>",
        "id": 496431850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738101742
    },
    {
        "content": "<p>mihaly-sisak closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133\">issue #10133</a>:</p>\n<blockquote>\n<p>Hello all!<br>\nThis is the first Rust project I am touching, so maybe I am completely misunderstanding something. I'm trying to build wasmtime-c-api to use for plugins in my simulation/game.</p>\n<p>Following this tutorial: <a href=\"https://docs.wasmtime.dev/examples-minimal.html\">https://docs.wasmtime.dev/examples-minimal.html</a></p>\n<p>The command I build with:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_OPT_LEVEL</span><span class=\"o\">=</span>s\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_PANIC</span><span class=\"o\">=</span>abort\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_LTO</span><span class=\"o\">=</span><span class=\"nb\">true</span>\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_CODEGEN_UNITS</span><span class=\"o\">=</span><span class=\"m\">1</span>\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_RELEASE_STRIP</span><span class=\"o\">=</span>debuginfo\n\ncargo<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--package<span class=\"w\"> </span>wasmtime-c-api<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--release<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--no-default-features<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>--features<span class=\"w\"> </span><span class=\"s2\">\"disable-logging cranelift cache parallel-compilation wasi\"</span>\n</code></pre></div>\n<p>I plan for my users writing .wasm extensions, and loading them directly. If I understood things correctly I need <code>cranelift</code> to be able to do that. I also enabled <code>parallel-compilation</code> and <code>cache</code> to speed thing up and <code>wasi</code> to have a standard text i/o interface.</p>\n<p>I have 2 question:<br>\n1) Compiling with this command yields the following <code>conf.h</code></p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// WASMTIME_FEATURE_LIST</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_PROFILING */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_WAT */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_CACHE */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_PARALLEL_COMPILATION */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_WASI */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_LOGGING */</span>\n<span class=\"cp\">#define WASMTIME_FEATURE_DISABLE_LOGGING</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_COREDUMP */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_ADDR2LINE */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_DEMANGLE */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_THREADS */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_GC */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_GC_DRC */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_GC_NULL */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_ASYNC */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_CRANELIFT */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_WINCH */</span>\n<span class=\"cm\">/* #undef WASMTIME_FEATURE_DEBUG_BUILTINS */</span>\n<span class=\"c1\">// ... if you add a line above this be sure to change the other locations</span>\n<span class=\"c1\">// marked WASMTIME_FEATURE_LIST</span>\n</code></pre></div>\n<p>It seems like in spite of me enabling <code>cache</code>, <code>parallel-compilation</code>, <code>wasi</code> and <code>cranelift</code> it is still not enabled somehow. What am I missing?</p>\n<p>2) Can I cherry-pick wasi-proposals I enable? I want my extensions to have text i/o and access to only a specific folder (I found the preopen directory part) but that's it. I do not want them to be able to access the web/open ports. If I enable feature <code>wasi</code> does that enables <code>wasmtime/wasi-http</code>? Can I enable <code>wasi</code> without any network access?<br>\nI am confused about the Rust build process. Are there docs on the features? For example what does <code>wmemcheck</code> do? I want my users safe from potentially malicious extensions, do I need it? Same question with <code>memory-protection-keys</code>.</p>\n</blockquote>",
        "id": 496434191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738102879
    },
    {
        "content": "<p>mihaly-sisak <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133#issuecomment-2620174775\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133\">issue #10133</a>:</p>\n<blockquote>\n<p>Thank you for the quick answers. Removing <code>pulley</code> shrank the binary size only by 0.9M so I think it is not really important. Me adding the <code>default-features = false</code> was I think me running cargo from a ton of places, not understanding you are supposed to be in the root dir. <br>\nI just re-ran everything and it just works. I think what threw me off is me not being in the root dir.<br>\nThank you for the answers!</p>\n</blockquote>",
        "id": 496434193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738102880
    },
    {
        "content": "<p>mihaly-sisak edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133#issuecomment-2620174775\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10133\">issue #10133</a>:</p>\n<blockquote>\n<p>Thank you for the quick answers. Removing <code>pulley</code> shrank the binary size only by 0.9M so I think it is not really important. Me adding the <code>default-features = false</code> was I think me running cargo from a ton of places, not understanding you are supposed to be in the root dir. <br>\nI just re-ran everything without modifications and it just works. I think what threw me off is me not being in the root dir.<br>\nThank you for the answers!</p>\n</blockquote>",
        "id": 496434304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738102926
    }
]