[
    {
        "content": "<p>pnodet opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599\">PR #11599</a> from <code>pnodet:pnodet-9</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This PR introduces granular call instruction classification in Cranelift's machine instruction layer, enabling more precise function type analysis and potential optimization opportunities.</p>\n<h4>Changes</h4>\n<p>- Added <code>CallType</code> enum to distinguish between regular calls, tail calls, and non-calls<br>\n  - Introduced <code>FunctionType</code> enum for enhanced function classification (<code>Leaf</code>, <code>TailCallOnly</code>, <code>NonLeaf</code>)<br>\n  - Replaced boolean <code>is_call()</code> with more descriptive <code>call_type()</code> method in MachInst trait<br>\n   - Updated all ISA backends (AArch64, x64, RISC-V 64, s390x, Pulley) to implement <code>call_type()</code> methodAdds core infrastructure for distinguishing between regular calls and tail calls at the instruction level.</p>\n</blockquote>",
        "id": 537532508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756923859
    },
    {
        "content": "<p><strong>pnodet</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599\">PR #11599</a>.</p>",
        "id": 537532509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756923859
    },
    {
        "content": "<p><strong>pnodet</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599\">PR #11599</a>.</p>",
        "id": 537532513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756923860
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#pullrequestreview-3181952139\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! Some comments below.</p>\n</blockquote>",
        "id": 537534744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756924813
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319852151\">PR review comment</a>:</p>\n<blockquote>\n<p>rustdoc formatting nit: blank line between summary and details (here and below)</p>\n</blockquote>",
        "id": 537534745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756924813
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319854908\">PR review comment</a>:</p>\n<blockquote>\n<p>A few naming thoughts:</p>\n<ul>\n<li><code>FunctionType</code> evokes something more like a function signature to me; maybe <code>FunctionCalls</code> for this enum?</li>\n<li>Once we call it that, the arms might be a little clearer as <code>FunctionCalls::None</code>, <code>FunctionCalls::TailOnly</code>, and <code>FunctionCalls::Regular</code>.</li>\n</ul>\n</blockquote>",
        "id": 537534746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756924813
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319856645\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we make these enums <code>pub(crate)</code>? There's no reason to export them to the world (we don't support external backends).</p>\n</blockquote>",
        "id": 537534747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756924813
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319857976\">PR review comment</a>:</p>\n<blockquote>\n<p>This is, properly speaking, a property of the ABI -- some may require frame setup for every function, some may not, some may support frame-less tail calls, etc. Can we move the logic to <code>machinst/abi.rs</code> instead?</p>\n</blockquote>",
        "id": 537534750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756924813
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319863427\">PR review comment</a>:</p>\n<blockquote>\n<p>No need for little tests like this on helper methods that are just <code>match</code>es on an enum -- they don't add any value but rather they are just repeating the definition.</p>\n</blockquote>",
        "id": 537534751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756924813
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319859499\">PR review comment</a>:</p>\n<blockquote>\n<p>This appears to be used only in tests and in passing to <code>compute_frame_layout</code>, and the latter can just take the enum type directly; could we remove this method?</p>\n</blockquote>",
        "id": 537534752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756924813
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319866156\">PR review comment</a>:</p>\n<blockquote>\n<p>Rather than ad-hoc merge logic like this, it would be better to add a method <code>update</code> on the <code>FunctionType</code> (or <code>FunctionCalls</code>) that takes a <code>CallType</code>. Then you can have <code>let mut function_calls = FunctionCalls::None;</code> above the loop, and <code>function_calls.update(self.insts[i].call_type());</code> in the loop, and all the logic is placed close to where the enum domains are defined.</p>\n</blockquote>",
        "id": 537534753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756924813
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319862189\">PR review comment</a>:</p>\n<blockquote>\n<p>This doesn't seem to be used anywhere -- can we remove it? Best not to have methods that try to summarize/coarsen the enum domain unless we have a precise definition of what we actually want and a place that needs it; let the modeled information domain stand on its own otherwise.</p>\n</blockquote>",
        "id": 537534754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756924813
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319867242\">PR review comment</a>:</p>\n<blockquote>\n<p>Rather than pass the bool, let's pass the enum directly. Then the ABI can decide what it wants to do about tails vs regular calls, etc.</p>\n</blockquote>",
        "id": 537534755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756924813
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#pullrequestreview-3182026880\">PR review</a>.</p>",
        "id": 537536822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756925844
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319904805\">PR review comment</a>:</p>\n<blockquote>\n<p>Do we actually need to make a distinction between <code>Leaf</code> and <code>TailCallOnly</code>?</p>\n</blockquote>",
        "id": 537536823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756925844
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599\">PR #11599</a>.</p>",
        "id": 537537570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756926166
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#pullrequestreview-3182058840\">PR review</a>.</p>",
        "id": 537537813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756926278
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319927770\">PR review comment</a>:</p>\n<blockquote>\n<p>We don't right now. I was interpreting this PR as a refactor along the way to eventually doing so, and the additional enum arm is minor enough that I don't mind the \"YAGNI violation\"; but @pnodet can you say more about your plans here?</p>\n</blockquote>",
        "id": 537537816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756926278
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319927770\">PR review comment</a>.</p>",
        "id": 537537906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756926313
    },
    {
        "content": "<p>pnodet submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#pullrequestreview-3182070200\">PR review</a>.</p>",
        "id": 537538374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756926509
    },
    {
        "content": "<p>pnodet created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319935039\">PR review comment</a>:</p>\n<blockquote>\n<p>I agree for <code>FunctionType</code> / <code>FunctionCalls</code> enum.</p>\n<p>But for <code>CallType</code>, since I added to the <code>pub trait MachInst</code> a <code>call_type()</code> method returning <code>CallType</code> I need to either keep it public or add <code>#[allow(private_interface)]</code> to the method</p>\n</blockquote>",
        "id": 537538375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756926509
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599\">PR #11599</a>.</p>",
        "id": 537538847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756926676
    },
    {
        "content": "<p>pnodet created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319941543\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't mind FunctionCalls</p>\n</blockquote>",
        "id": 537538857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756926682
    },
    {
        "content": "<p>pnodet submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#pullrequestreview-3182080649\">PR review</a>.</p>",
        "id": 537538858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756926682
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319944591\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, that's fair -- we aren't consistent currently with our usage of <code>pub</code>; someone should do a broader pass on that (probably not a good task for a newcomer since it has more to do with our published interface and policy questions) but for now <code>pub</code> is fine there.</p>\n</blockquote>",
        "id": 537539028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756926750
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#pullrequestreview-3182085893\">PR review</a>.</p>",
        "id": 537539029,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756926750
    },
    {
        "content": "<p>pnodet submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#pullrequestreview-3182115178\">PR review</a>.</p>",
        "id": 537540641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756927361
    },
    {
        "content": "<p>pnodet created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319964570\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, this changes are not trying to fix anything per se but after working on the is_leaf detection PR  I thought it could help for improvements and optimizations in the future. I don't think it introduces much and open to discussion as I didn't really go through an issue -&gt; pr process</p>\n</blockquote>",
        "id": 537540643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756927361
    },
    {
        "content": "<p>pnodet submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#pullrequestreview-3182125974\">PR review</a>.</p>",
        "id": 537541216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756927591
    },
    {
        "content": "<p>pnodet created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2319972131\">PR review comment</a>:</p>\n<blockquote>\n<p>They are no optimizations made here so this PR could be regarded as a in between step / preparation phase</p>\n</blockquote>",
        "id": 537541217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756927591
    },
    {
        "content": "<p>pnodet updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599\">PR #11599</a>.</p>",
        "id": 537562396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756938352
    },
    {
        "content": "<p>pnodet submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#pullrequestreview-3182717308\">PR review</a>.</p>",
        "id": 537562480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756938406
    },
    {
        "content": "<p>pnodet created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2320362406\">PR review comment</a>:</p>\n<blockquote>\n<p>I gave this a bit of thought and made a pass in this commit <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599/commits/bbbbf0ec0a9761eaff1d5d00440c155e17001afc\">https://github.com/bytecodealliance/wasmtime/pull/11599/commits/bbbbf0ec0a9761eaff1d5d00440c155e17001afc</a> </p>\n</blockquote>",
        "id": 537562481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756938406
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2320380533\">PR review comment</a>:</p>\n<blockquote>\n<p>Once the optimization is done, we can change back to an is_leaf bool where true could be either no calls or only tail calls, right? Doing the is_call change and optimization in one step would avoid most of the changes in this PR, right?</p>\n</blockquote>",
        "id": 537563310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756938993
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#pullrequestreview-3182748381\">PR review</a>.</p>",
        "id": 537563311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756938993
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#discussion_r2320400588\">PR review comment</a>:</p>\n<blockquote>\n<p>@bjorn3 that's not totally clear to me at least -- for example, if the tail-calls result in an outgoing argument area of nonzero size, that precludes skipping the frame, whereas a tail call with args in registers only can still avoid the frame (if no other clobber-saves or stackslots). So the ABI logic may need to handle it specially.</p>\n</blockquote>",
        "id": 537563951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756939474
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#pullrequestreview-3182787017\">PR review</a>.</p>",
        "id": 537563952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756939474
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599#pullrequestreview-3182799422\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 537564169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756939658
    },
    {
        "content": "<p><strong>cfallin</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599\">PR #11599</a> as ready for review.</p>",
        "id": 537564178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756939666
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11599\">PR #11599</a>.</p>",
        "id": 537565735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756940916
    }
]