[
    {
        "content": "<p>timstr opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10766\">issue #10766</a>:</p>\n<blockquote>\n<p>Hello,</p>\n<p>I tried using Cranelift for a new project JIT-compiling scripts for realtime audio processing. I've done similar work using <a href=\"https://github.com/TheDan64/inkwell/\">Inkwell</a> which wraps LLVM. I remain very interested in having a modern and competitive Rust-first JIT compiler, and I really want to see the Cranelift project succeed. While I was able to get get started quickly with Cranelift, there have been multiple separate and persistent issues which taken together have made me reconsider using Cranelift over Inkwell. I want to share my experiences and specific feedback because I think such first-time impressions are vital to the health of open source software and again, I love this project and want it to keep growing.</p>\n<p>Apologies for putting so many things into a single issue. If it suits you, feel free to chop this up and quote verbatim or paraphrase into separate issues. For now, I'm moving on from Cranelift and returning to Inkwell and LLVM for my own productivity.</p>\n<h3>Multiple distracting TODO's in the JIT demo</h3>\n<p>My early rapid success interacting with Cranelift was from following and adapting the <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo/blob/e829a2a00b76627f0b46240ae4045b3a0f350eea/src/jit.rs\">jit demo</a>. Reading through example code though, there are several distracting <code>TODO</code> comments questioning Cranelift's own design and pointing out known pain points. As a first-time user, this gives me the impression that the API hasn't matured and is probably unstable, which makes me hesitant to want to commit to it. What I would love to see here instead is just a self-contained demo where each part of the library plays an obvious role. Possibly some of this commentary is out of date and the demo can be refined already. </p>\n<h3>Scattered documentation due to crate separation</h3>\n<p>I rely heavily on documentation hosted on <a href=\"http://docs.rs\">docs.rs</a> where it is easily navigable and rapidly searchable. Oftentimes I search for individual types, names, and keywords to quickly and serendipitously discover related functionality. The separation of Cranelift into multiple crates however means that oftentimes, the thing I'm looking for isn't found because it's in a separate crate. For example, <code>FunctionBuilder</code> is defined in <code>cranelift-frontend</code>, but all of the instruction-inserting methods I use it with are defined in the <code>InstBuilder</code> trait in the <code>cranelift-codegen</code> crate, where I would have to know to look first. This may be more of a problem for Rust's own documentation system than with Cranelift per se.</p>\n<h3>Difficulties with the first block of a function</h3>\n<p>I was trying to JIT-compile a function consisting of an entry block, multiple user-defined sequences which can't be known ahead of time, and an exit block. The first thing I tried was to create the 'entry' block first, then populate user-defined blocks, and finally switch to the 'entry' block and populate it with a jump instruction to the first user-defined block. This turned out to be very frustrating, and Cranelift would invariably error with \"invalid reference to entry block\". It turns out that Cranelift considers the entry block not to be the first created block (as I had assumed), but rather the first block that I pass to <code>FunctionBuilder::switch_to_block</code>, as explained in the docs for <code>FunctionBuilder</code>. This was confusing for me, since I wasn't ready to put anything in my entry block yet and so wouldn't have thought to switch to it first. Additionally, I'm not really convinced the documentation is correct here, and Cranelift actively prevents me from partially filling and later switching back to partly-filled blocks.</p>\n<p>An explicit method such as <code>FunctionBuilder::set_entry_block</code> or having the first _created_ block become the function entry point would make this process a lot more straightforward. After all, the blocks themselves are merely nodes in a control flow graph, and everywhere else with jump and return instructions, their dependencies are explicitly stated, so it would make sense to explicitly state which is the entry block, rather than implying it through non-obvious workflows.</p>\n<p>A few minimal motivating examples. This works fine and as I expect:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entry_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">exit_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">jump</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span>\n\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">);</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span>\n</code></pre></div>\n<p>Filling the exit block first errors:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entry_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">exit_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">);</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span>\n\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">jump</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span>\n</code></pre></div>\n<p>The error being:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Compilation</span><span class=\"p\">(</span><span class=\"n\">Verifier</span><span class=\"p\">(</span><span class=\"n\">VerifierErrors</span><span class=\"p\">([</span><span class=\"n\">VerifierError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">inst1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"invalid reference to entry block block1\"</span><span class=\"w\"> </span><span class=\"p\">}])))</span>\n</code></pre></div>\n<p>Contrary to the documentation, adding a call to <code>switch_to_block</code> with the first block does not fix this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entry_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">exit_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">);</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span>\n\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">jump</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span>\n</code></pre></div>\n<p>This again errors with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Compilation</span><span class=\"p\">(</span><span class=\"n\">Verifier</span><span class=\"p\">(</span><span class=\"n\">VerifierErrors</span><span class=\"p\">([</span><span class=\"n\">VerifierError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">inst1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"invalid reference to entry block block1\"</span><span class=\"w\"> </span><span class=\"p\">}])))</span>\n</code></pre></div>\n<p>If hypothesize that perhaps the first block that I switch to _and insert an instruction into_ becomes the first block, attempting to insert a <code>nop</code> to return to later just outright panics:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entry_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">exit_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">nop</span><span class=\"p\">();</span>\n\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">);</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span>\n\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">jump</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span>\n</code></pre></div>\n<p>This panics with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">frontend</span><span class=\"o\">-</span><span class=\"mf\">0.117.2</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">frontend</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">361</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">:</span>\n<span class=\"nc\">you</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">fill</span><span class=\"w\"> </span><span class=\"n\">your</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"w\"> </span><span class=\"n\">switching</span>\n</code></pre></div>\n<h3>Inflexible model of program synthesis</h3>\n<p>The above troubles point to a broader issue I have with Cranelift. In Inkwell and LLVM, generating JIT instructions and manipulating basic blocks feels very much like writing real source code: you can insert some instructions here, move the cursor and finish one idea, then append or prepend instructions where it makes sense for user-defined workloads as they're needed, and verify everything when one is ready. This enables writing JIT instructions just like how one would, for example, type out the loop variable and open and close brackets for a for-loop in one's editor before thinking about how to fill in the body. In Cranelift, the simple panic message <code>you have to fill your block before switching</code> tells me that this fine-grained but intuitive level of incremental edits is currently not possible.</p>\n<p>I view this as a major shortcoming for JIT API, since if I already had a fully-ordered instruction-by-instruction understanding of what my user-defined program will do, I would be necessarily be repeating a huge amount of work that other JIT libraries like Inkwell and LLVM help me with. The restriction to fill a basic block all in one go may be appropriate for straightforward AST traversals with simple semantics, but it hugely complicates other workflows where single parts of user-defined code map to multiple instructions in multiple blocks. These troubles are compounded by the confusion around how to specify and populate the entry block as explained above.</p>\n<p>I encourage removing these restrictions and supporting more dynamic workflows where blocks and instructions are created and revised on the fly, with the ability to insert, prepend and append instructions within blocks similarly to how a human would write them in an incremental, out-of-order manner. The mental model of JIT compilation that has served me well using Inkwell is one where JIT instructions and basic blocks are a fluid work-in-progress authoring format, and validation and rule enforcement come during finalization but no sooner.</p>\n<h3>Lack of familiar names in debug output</h3>\n<p>A key part of my JIT development workflow is printing out the IR when anything goes wrong and inspecting it. Inkwell's JIT API can do this quite nicely since everything ultimately models LLVM IR and most things need a name up front in the API. Here's what some sample LLVM IR might look like printed out as part of my development process:</p>\n<div class=\"codehilite\" data-code-language=\"plaintext\"><pre><span></span><code>define void @my_function(ptr %ptr_ptr_dst, i64 %dst_len, ...) {\nentry:\n  %arg_ptr_retv = call ptr @argument_pointer_wrapper(ptr %context_ptr, i64 527665334732589126)\n  %ptr1 = getelementptr i64, ptr %arg_ptr_retv, i64 1\n  --- snip ---\n  %len_is_zero = icmp eq i64 %dst_len, 0\n\ncheck_startover:                                  ; No predecessors!\n  %init_flag = load i8, ptr %ptr_init_flag, align 1\n  %was_init = icmp eq i8 %init_flag, 1\n  br i1 %was_init, label %resume, label %startover\n\nstartover:                                        ; preds = %check_startover\n  store i8 1, ptr %ptr_init_flag, align 1\n  br label %pre_loop\n\nresume:                                           ; preds = %check_startover\n  br label %pre_loop\n\npre_loop:                                         ; preds = %resume, %startover\n  br label %loop_begin\n\nloop_begin:                                       ; preds = %loop_end, %pre_loop\n  %loop_counter = phi i64 [ 0, %pre_loop ], [ %loop_counter_inc, %loop_end ]\n  %loop_counter_inc = add i64 %loop_counter, 1\n  %ptr_local_val = alloca float, align 4\n  --- snip ---\n</code></pre></div>\n<p>In this snippet, I've forgotten a jump instruction from the <code>entry</code> block to <code>check_startover</code> and the IR printout even points this out with a helpful <code>No predecessors!</code> comment. The immediate usefulness of this stems largely from having given blocks and instructions human-readab<br>\n[message truncated]</p>\n</blockquote>",
        "id": 517371344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746977692
    }
]