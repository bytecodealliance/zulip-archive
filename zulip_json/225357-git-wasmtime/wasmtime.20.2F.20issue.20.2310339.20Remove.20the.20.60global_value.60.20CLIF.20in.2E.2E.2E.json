[
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10339\">Issue #10339</a>.</p>",
        "id": 503650274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741214768
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the cranelift:area:clif label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10339\">Issue #10339</a>.</p>",
        "id": 503650275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741214768
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10339\">issue #10339</a>:</p>\n<blockquote>\n<p>This would force us to translate all unnecessary uses of <code>ir::Global</code> into regular CLIF instructions.</p>\n<p>Note: We have to keep <code>cranelift_codegen::ir::Global</code>s around for special things like the stack limit check, which are not (and can't ever really be) represented in regular CLIF instructions, since they happen inside of function prologues or what not.</p>\n<p>However, we end up using <code>ir::Global</code>s in lots of other places where we could just use regular CLIF instructions instead. For example, we use them to represent Wasm globals in our Wasm to CLIF translation layer. This is annoying because now we have to fit Wasm globals into different kinds of <code>ir::Global</code>s, and it would just be easier to emit the CLIF instructions to get/set the Wasm global directly. These unnecessary <code>ir::Global</code> uses just introduce extra abstraction layers that don't buy us anything, add instructions that require legalization processing in the mid-end, make it harder to follow code through the compiler pipeline because there are extra and unnecessary rewrites, etc...</p>\n<p>I propose that we remove the <code>global_value</code> CLIF instruction (the instruction that turns an <code>ir::Global</code> into an <code>ir::Value</code>). Every use of <code>global_value</code> could instead just be the constant or (chained) load that it would otherwise be legalized into, and emitting that already-legalized code will be easier to follow and also mildly more efficient since it doesn't need that legalization anymore. It also means we can remove the associated legalization code.</p>\n</blockquote>",
        "id": 503650277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741214769
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10339#issuecomment-2702269469\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10339\">issue #10339</a>:</p>\n<blockquote>\n<p>Strong support for this one! I've mentioned previously my understanding of the rationale for global values: to express values that need to be used in parts of the IR outside of instructions: e.g., the example you give of stack limit checks; also the size argument for dynamically-sized vector types. There used to be more such cases -- e.g. when heaps were a core-Cranelift concept. But there's no reason to restrict ourselves to the static sublanguage for values that are <em>only</em> used in normal program flow.</p>\n<p>If we make this cleanup, it's tempting to wonder about the remaining uses of GVs themselves: dynamically-sized vectors have stalled, and it's unclear if we want to keep them long-term (or perhaps we could have a more scoped mechanism for them); stack-limit checks are always going to need support as long as Wasmtime supports no-virtual-memory environments but again maybe there's a way that we can scope the feature down to describe exactly what Wasmtime needs. (This could include changing Wasmtime's strategy too, e.g. pass the limit in a register and force interruption use-cases to use epochs rather than stack-limit changes, but that's a larger discussion.)</p>\n</blockquote>",
        "id": 503652134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741215521
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10339#issuecomment-3072884560\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10339\">issue #10339</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rustc_codegen_cranelift/commit/46fa9ad1f0d0bcc173d44a9a6d721158e2af5ed1\">https://github.com/rust-lang/rustc_codegen_cranelift/commit/46fa9ad1f0d0bcc173d44a9a6d721158e2af5ed1</a> has removed all uses of <code>global_value</code> from cg_clif in favor of <code>symbol_value</code> and <code>tls_value</code>. So once Wasmtime no longer needs <code>global_value</code>, it can be removed from Cranelift.</p>\n</blockquote>",
        "id": 528816889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752571821
    }
]