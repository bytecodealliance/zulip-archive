[
    {
        "content": "<p>HoKim98 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170\">issue #11170</a>:</p>\n<blockquote>\n<p>Thanks for filing a feature request! Please fill out the TODOs below.</p>\n<h4>Feature</h4>\n<p>I want to use <code>wasmtime</code> in <code>actix-web</code>, which uses <code>!Send</code> runtime and resources such as <code>HTTPRequest</code> and <code>web::Payload</code>.</p>\n<p>But the current runtime requires functions and states to be <code>Send</code>able.</p>\n<p>I thought it's not mandatory to enforce <code>Send</code> trait.<br>\nSo I have tested on my local without <code>Send</code> and found no problem.</p>\n<h4>Benefit</h4>\n<p>We can use <code>wasmtime</code> in the thread-bounded (single-threaded) async runtimes.</p>\n<p>It's essential to use <code>wasmtime</code> within <code>actix</code> ecosystem, which provides the input parameters as <code>!Send</code>.</p>\n<h4>Implementation</h4>\n<p>My current(initial) idea is to create a buddy methods like below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Original method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">on_fiber</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n\n<span class=\"sd\">/// (New) buddy method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async_single_rt</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">on_fiber_single_rt</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl_single_rt</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>My another idea is to use cargo features like <code>async-send</code>.<br>\nBut I think it may break the ecosystem (side-effect).<br>\n</p>\n</blockquote>",
        "id": 526604547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751375361
    },
    {
        "content": "<p>HoKim98 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170\">issue #11170</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>I want to use <code>wasmtime</code> in <code>actix-web</code>, which uses <code>!Send</code> runtime and resources such as <code>HTTPRequest</code> and <code>web::Payload</code>.</p>\n<p>But the current runtime requires functions and states to be <code>Send</code>able.</p>\n<p>I thought it's not mandatory to enforce <code>Send</code> trait.<br>\nSo I have tested on my local without <code>Send</code> and found no problem.</p>\n<h4>Benefit</h4>\n<p>We can use <code>wasmtime</code> in the thread-bounded (single-threaded) async runtimes.</p>\n<p>It's essential to use <code>wasmtime</code> within <code>actix</code> ecosystem, which provides the input parameters as <code>!Send</code>.</p>\n<h4>Implementation</h4>\n<p>My current(initial) idea is to create a buddy methods like below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Original method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">on_fiber</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n\n<span class=\"sd\">/// (New) buddy method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async_single_rt</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">on_fiber_single_rt</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl_single_rt</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>My another idea is to use cargo features like <code>async-send</code>.<br>\nBut I think it may break the ecosystem (side-effect).<br>\n</p>\n</blockquote>",
        "id": 526604602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751375377
    },
    {
        "content": "<p>HoKim98 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170\">issue #11170</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>I want to use <code>wasmtime</code> in <code>actix-web</code>, which uses <code>!Send</code> runtime and resources such as <code>HTTPRequest</code> and <code>web::Payload</code>.</p>\n<p>But the current runtime requires functions and states to be <code>Send</code>able.</p>\n<p>I thought it's not mandatory to enforce <code>Send</code> trait.<br>\nSo I have tested on my local without <code>Send</code> and found no problem.</p>\n<h4>Benefit</h4>\n<p>We can use <code>wasmtime</code> in the thread-bounded (single-threaded) async runtimes.</p>\n<p>It's essential to use <code>wasmtime</code> within <code>actix</code> ecosystem, which provides the input parameters as <code>!Send</code>.</p>\n<h4>Implementation</h4>\n<p>My current(initial) idea is to create a buddy methods like below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Original method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">on_fiber</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n\n<span class=\"sd\">/// (New) buddy method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async_single_rt</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">on_fiber_single_rt</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl_single_rt</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The estimated number of lines: 100~300</p>\n<h4>Alternatives</h4>\n<p>My another idea is to use cargo features like <code>async-send</code>.<br>\nBut I think it may break the ecosystem (side-effect).<br>\n</p>\n</blockquote>",
        "id": 526605172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751375537
    },
    {
        "content": "<p>HoKim98 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170\">issue #11170</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>I want to use <code>wasmtime</code> in <code>actix-web</code>, which uses <code>!Send</code> runtime and resources such as <code>HTTPRequest</code> and <code>web::Payload</code>.</p>\n<p>But the current runtime requires functions and states to be <code>Send</code>able.</p>\n<p>I thought it's not mandatory to enforce <code>Send</code> trait.<br>\nSo I have tested on my local without <code>Send</code> and found no problem.</p>\n<h4>Benefit</h4>\n<p>We can use <code>wasmtime</code> in the thread-bounded (single-threaded) async runtimes.</p>\n<p>It's essential to use <code>wasmtime</code> within <code>actix</code> ecosystem, which provides the input parameters as <code>!Send</code>.</p>\n<h4>Implementation</h4>\n<p>My current(initial) idea is to create a buddy methods like below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Original method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">on_fiber</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n\n<span class=\"sd\">/// (New) buddy method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async_single_rt</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">on_fiber_single_rt</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl_single_rt</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The estimated number of new lines: 100~300</p>\n<h4>Alternatives</h4>\n<p>My another idea is to use cargo features like <code>async-send</code>.<br>\nBut I think it may break the ecosystem (side-effect).<br>\n</p>\n</blockquote>",
        "id": 526605207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751375546
    },
    {
        "content": "<p>HoKim98 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170\">issue #11170</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>I want to use <code>wasmtime</code> in <code>actix-web</code>, which uses <code>!Send</code> runtime and resources such as <code>HTTPRequest</code> and <code>web::Payload</code>.</p>\n<p>But the current runtime requires functions and states to be <code>Send</code>able.</p>\n<p>I thought it's not mandatory to enforce <code>Send</code> trait.<br>\nSo I have tested on my local without <code>Send</code> and found no problem.</p>\n<h4>Benefit</h4>\n<p>We can use <code>wasmtime</code> in the thread-bounded (single-threaded) async runtimes.</p>\n<p>It's essential to use <code>wasmtime</code> within <code>actix</code> ecosystem, which provides the input parameters as <code>!Send</code>.</p>\n<h4>Implementation</h4>\n<p>My current(initial) idea is to create a buddy methods like below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Original method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">on_fiber</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n\n<span class=\"sd\">/// (New) buddy method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async_single_rt</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">on_fiber_single_rt</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl_single_rt</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The estimated number of new lines: 100~500</p>\n<h4>Alternatives</h4>\n<p>My another idea is to use cargo features like <code>async-send</code>.<br>\nBut I think it may break the ecosystem (side-effect).<br>\n</p>\n</blockquote>",
        "id": 526605243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751375560
    },
    {
        "content": "<p>HoKim98 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170\">issue #11170</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>I want to use <code>wasmtime</code> in <code>actix-web</code>, which uses <code>!Send</code> runtime and resources such as <code>HTTPRequest</code> and <code>web::Payload</code>.</p>\n<p>But the current runtime requires functions and states to be <code>Send</code>able.</p>\n<p>I thought it's not mandatory to enforce <code>Send</code> trait.<br>\nSo I have tested on my local without <code>Send</code> and found no problem.</p>\n<h4>Benefit</h4>\n<p>We can use <code>wasmtime</code> in the thread-bounded (single-threaded) async runtimes.</p>\n<p>It's essential to use <code>wasmtime</code> within <code>actix</code> ecosystem, which provides the input parameters as <code>!Send</code>.</p>\n<h4>Implementation</h4>\n<p>My current(initial) idea is to create a buddy methods like below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Original method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">on_fiber</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n\n<span class=\"sd\">/// (New) buddy method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async_single_rt</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">on_fiber_single_rt</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl_single_rt</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>The estimated number of new lines: 100~500</li>\n<li>Side-effect: no</li>\n</ul>\n<h4>Alternatives</h4>\n<p>My another idea is to use cargo features like <code>async-send</code>.<br>\nBut I think it may break the ecosystem (side-effect).<br>\n</p>\n</blockquote>",
        "id": 526605326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751375583
    },
    {
        "content": "<p>HoKim98 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170\">issue #11170</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>I want to use <code>wasmtime</code> in <code>actix-web</code>, which uses <code>!Send</code> runtime and resources such as <code>HTTPRequest</code> and <code>web::Payload</code>.</p>\n<p>But the current runtime requires functions and states to be <code>Send</code>able.</p>\n<p>I thought it's not mandatory to enforce <code>Send</code> trait.<br>\nSo I have tested on my local without <code>Send</code> and found no problem.</p>\n<h4>Benefit</h4>\n<p>We can use <code>wasmtime</code> in the thread-bounded (single-threaded) async runtimes.</p>\n<p>It's essential to use <code>wasmtime</code> within <code>actix</code> ecosystem, which provides the input parameters as <code>!Send</code>.</p>\n<h4>Implementation</h4>\n<p>My current(initial) idea is to create buddy methods like below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Original method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">on_fiber</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n\n<span class=\"sd\">/// (New) buddy method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async_single_rt</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">on_fiber_single_rt</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl_single_rt</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>The estimated number of new lines: 100~500</li>\n<li>Side-effect: no</li>\n</ul>\n<h4>Alternatives</h4>\n<p>My another idea is to use cargo features like <code>async-send</code>.<br>\nBut I think it may break the ecosystem (side-effect).<br>\n</p>\n</blockquote>",
        "id": 526605547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751375641
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170#issuecomment-3024803731\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170\">issue #11170</a>:</p>\n<blockquote>\n<p>Sorry - we have had this discussion in the past, and concluded that, with the current features available in the Rust type system, wasmtime's Send bounds are unfortunately infectious and will be used throughout the public API.</p>\n<p>After maintaining wasmtime in tokio embeddings for many years, I'm now maintaining a single-threaded web server embedding for wasmtime where Send is a burden. Unfortunately I have solved this by adding a lot of blatantly false <code>unsafe impl Send for &lt;my types&gt; {}</code> throughout my codebase. But, we've balanced that against all of the known approaches to manage Send's infectiousness in wasmtime, and decided that its the best of the difficult options.</p>\n<p>I won't rule out changing the design of wasmtime completely, but its a big project that requires a lot of time and attention from a skilled contributor, and will require a working prototype and <a href=\"https://github.com/bytecodealliance/rfcs\">RFC</a> in order to land. If you are up for that project, lets talk about it more, but if not, we'll have to suffer together with the way it is now.</p>\n</blockquote>",
        "id": 526648873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751388689
    },
    {
        "content": "<p>HoKim98 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170#issuecomment-3034427851\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170\">issue #11170</a>:</p>\n<blockquote>\n<p>In my case, specifically when using the <code>wasm32-wasip2</code> target (i.e., the version that doesn't explicitly depend on the <code>tokio</code> runtime), I haven't actually run into the issue you described.</p>\n<p>In particular, I found that the core <code>on_fiber</code> method has evolved over the past year to the point where it has no real dependency on <code>Send</code>. That said, in environments like the <code>tokio</code> runtime where async tasks may be executed across threads, the \"infectious\" nature of Send often forces us to inject an otherwise void dependency.</p>\n<p>To address this, <a href=\"https://github.com/ulagbulag/wasmtime/commit/cfcd2c2b0510e9d5204a76c72511d8e7bb94437b#diff-630bd5721d6bf4bf6207421fdc136ec68af4fe9182940ec5268dbe4379209d2eR913\">I implemented buddy methods like the one</a> that work correctly even in <code>!Send</code> environments. It's less of a new invention and more of a clone of the existing code adapted for <code>!Send</code>.</p>\n<ul>\n<li><a href=\"https://github.com/ulagbulag/wasmtime/commit/cfcd2c2b0510e9d5204a76c72511d8e7bb94437b\">https://github.com/ulagbulag/wasmtime/commit/cfcd2c2b0510e9d5204a76c72511d8e7bb94437b</a></li>\n</ul>\n<p>Finally, for types like <code>trait Stream</code>, the <code>Send</code> constraint isn't tied to the struct itself but to its implementation, which makes workarounds like <code>unsafe impl Send for &lt;my types&gt;</code> fundamentally impossible. While this is arguably a positive side effect of <code>Send</code>’s strictness, it also means we can’t bypass it even when we're sure the code will never leave the current thread.</p>\n<p>Just to share a personal thought: I believe the implementation is fairly straightforward and easy to follow. A prototype is available at the link above, and buddy versions of the multi-stage test code are also planned. I’d love your take on whether you think this should go through an RFC, or if it’s fine to submit as a plain PR.</p>\n</blockquote>",
        "id": 527104559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751603130
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170#issuecomment-3045880805\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170\">issue #11170</a>:</p>\n<blockquote>\n<p>Personally I feel that duplicating Wasmtime's API surface area needs to be very well motivated and ideally is something we can avoid. To that end I'd agree with @pchickey that, while not great, <code>unsafe impl Send</code> is hopefully the way to go. To that ened @HoKim98 I'd like to dig in to why this workaround does not work. Can you share example code?</p>\n<p>I agree that your patch is relatively small and looks easy to apply. Where I would disagree I think is how that would be maintained over time:</p>\n<ul>\n<li>Wasmtime already has a 2x API surface area with sync and async, and this would become 3x with sync, async, and async-send.</li>\n<li>Your patch does not include any tests, and extensively testing both sync and async is not trivial (e.g. adding async + async-send tests would not be trivial).</li>\n<li>The correctness of your change relies on the two async methods being basically the same over time, and there is no guarantee that this is the case. There's a likely possibility that they diverge over time and there are little protections against this.</li>\n</ul>\n<p>These are not necessarily showstoppers but to me this is a high bar to clear, possibly higher than you're anticipating. Maintenance over time is an important factor to deciding on API surface area and that's one of my chief concerns here.</p>\n<blockquote>\n<p>I found that the core on_fiber method has evolved over the past year to the point where it has no real dependency on Send</p>\n</blockquote>\n<p>There is a long comment <a href=\"https://github.com/bytecodealliance/wasmtime/blob/5bb5d0080c97d291a7127436884cc50cce084716/crates/wasmtime/src/runtime/fiber.rs#L489-L542\">here</a> about this. Yes <code>Send</code> can be removed, no it is not sound to remove it.</p>\n</blockquote>",
        "id": 527518435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906541
    },
    {
        "content": "<p>HoKim98 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170#issuecomment-3071771109\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170\">issue #11170</a>:</p>\n<blockquote>\n<p>Hello @alexcrichton , thanks for sharing a great inspection.</p>\n<p>I have actively reviewed your suggestion. I completely agree that each of the three milestones you suggested is a big deal and difficult to maintain.</p>\n<blockquote>\n<p>Can you share example code?</p>\n</blockquote>\n<p>I create a sample project that I suffer from: <a href=\"https://github.com/HoKim98/my-actix-wasm-project\">https://github.com/HoKim98/my-actix-wasm-project</a></p>\n<ul>\n<li>Especially: <a href=\"https://github.com/HoKim98/my-actix-wasm-project/blob/3916e63ff067bb6c46f700c5179f93ca91e68ed0/src/main.rs#L67\">https://github.com/HoKim98/my-actix-wasm-project/blob/3916e63ff067bb6c46f700c5179f93ca91e68ed0/src/main.rs#L67</a></li>\n</ul>\n<p>If this problem could be solved simply, at least for me, I would no longer need this issue.</p>\n</blockquote>",
        "id": 528773338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752550313
    },
    {
        "content": "<p>HoKim98 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170#issuecomment-3071771109\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170\">issue #11170</a>:</p>\n<blockquote>\n<p>Hello @alexcrichton , thanks for sharing a great inspection.</p>\n<p>I have actively reviewed your suggestion. I completely agree that each of the three milestones you suggested is a big deal and difficult to maintain.</p>\n<blockquote>\n<p>Can you share example code?</p>\n</blockquote>\n<p>I created a sample project that I suffer from: <a href=\"https://github.com/HoKim98/my-actix-wasm-project\">https://github.com/HoKim98/my-actix-wasm-project</a></p>\n<ul>\n<li>Especially: <a href=\"https://github.com/HoKim98/my-actix-wasm-project/blob/3916e63ff067bb6c46f700c5179f93ca91e68ed0/src/main.rs#L67\">https://github.com/HoKim98/my-actix-wasm-project/blob/3916e63ff067bb6c46f700c5179f93ca91e68ed0/src/main.rs#L67</a></li>\n</ul>\n<p>If this problem could be solved simply, at least for me, I would no longer need this issue.</p>\n</blockquote>",
        "id": 528773344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752550317
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170#issuecomment-3073987908\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170\">issue #11170</a>:</p>\n<blockquote>\n<p>For any variables live over that <code>.await</code> point, you'll need to use something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">UnsafeSend</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">UnsafeSend</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>and wrap live variables in <code>UnsafeSend</code> followed by accessing them through the <code>UnsafeSend</code> afterwards. In theory that should resolve the issue.</p>\n</blockquote>",
        "id": 528882420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752591743
    },
    {
        "content": "<p>HoKim98 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170\">issue #11170</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>I want to use <code>wasmtime</code> in <code>actix-web</code>, which uses <code>!Send</code> runtime and resources such as <code>HTTPRequest</code> and <code>web::Payload</code>.</p>\n<p>But the current runtime requires functions and states to be <code>Send</code>able.</p>\n<p>I thought it's not mandatory to enforce <code>Send</code> trait.<br>\nSo I have tested on my local without <code>Send</code> and found no problem.</p>\n<h4>Benefit</h4>\n<p>We can use <code>wasmtime</code> in the thread-bounded (single-threaded) async runtimes.</p>\n<p>It's essential to use <code>wasmtime</code> within <code>actix</code> ecosystem, which provides the input parameters as <code>!Send</code>.</p>\n<h4>Implementation</h4>\n<p>My current(initial) idea is to create buddy methods like below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Original method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">on_fiber</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n\n<span class=\"sd\">/// (New) buddy method</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">instantiate_async_single_rt</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">async_support</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"s\">\"must use sync instantiation when async support is disabled\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">on_fiber_single_rt</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_impl_single_rt</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"o\">?</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>The estimated number of new lines: 100~500</li>\n<li>Side-effect: no</li>\n</ul>\n<h4>Alternatives</h4>\n<p>My another idea is to use cargo features like <code>async-send</code>.<br>\nBut I think it may break the ecosystem (side-effect).<br>\n</p>\n</blockquote>",
        "id": 529859341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753095633
    },
    {
        "content": "<p>HoKim98 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170#issuecomment-3096213247\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11170\">issue #11170</a>:</p>\n<blockquote>\n<p>Thank you @alexcrichton it helped me a lot!</p>\n</blockquote>",
        "id": 529859351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753095635
    }
]