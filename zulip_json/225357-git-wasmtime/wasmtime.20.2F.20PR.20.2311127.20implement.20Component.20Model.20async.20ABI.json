[
    {
        "content": "<p>dicej opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a> from <code>dicej:cm-async-implementation</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit replaces the stub functions and types in <code>wasmtime::runtime::component::concurrent</code> and its submodules with the working implementation developed in the <code>wasip3-prototyping</code> repo.  For ease of review, it does not include any new tests; I'll add those in a follow-up commit.</p>\n<p>Note that this builds on #11114 and #11123; only the third commit is new.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 525563431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750785542
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 525563433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750785543
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-wasi-reviewers\">wasmtime-wasi-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 525563434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750785543
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 525563435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750785543
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 525563436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750785543
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 525563437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750785543
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 525564017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750785790
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 525574753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750790204
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 525575049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750790275
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 525990213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750978698
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 526111580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751039316
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#issuecomment-3014069854\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\", \"wasmtime:api\", \"wasmtime:c-api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 526137640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751050170
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 526423898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751295825
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 526427326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751296852
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 526437611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751300050
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#issuecomment-3020521042\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>:</p>\n<blockquote>\n<p>@dicej on this one thing I want to write down before I forget (I've forgotten this many times so far...)</p>\n<p>Index allocation for futures/streams/error-context I believe are going to need to be updated here. I believe the current state of this PR is such that there's one indexing namespace for all resources within a component, and then there's another index namespace for futures/streams/error-context. Spec-wise I believe it's required we unify these index namespaces. I realize that this is an artifact of the history of the implementation here, but it's something that I want to be sure to write down and not forget.</p>\n<p>Effectively my naive expectation would be that <a href=\"https://github.com/bytecodealliance/wasmtime/blob/57ba95e92eff1d02f6b05ab86b9e81b35bd69d28/crates/wasmtime/src/runtime/vm/component/resources.rs#L92-L120\">this type</a> grows to include <code>Stream</code>/<code>Future</code>/<code>ErrorContext</code> variants and a table or similar in <code>ConcurrentState</code> will end up being removed.</p>\n</blockquote>",
        "id": 526478416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751313639
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 526689065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751407266
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 526822000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751468311
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 526832522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751471161
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#issuecomment-3028379823\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>:</p>\n<blockquote>\n<p>Another thought I've now had which I don't want to forget: this is introducing a significant <code>#[cfg]</code> in the path of calling a component function with the async style. That means that the non-cm-async implementation will be entirely untested in CI which is not an ideal state to be in. I don't know how best to handle this but I wanted to note it before I forget.</p>\n</blockquote>",
        "id": 526833348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751471431
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 526868009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751484797
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 526880155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751490854
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 526880369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751490961
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527085385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751584555
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>:</p>\n<blockquote>\n<p>This commit replaces the stub functions and types in <code>wasmtime::runtime::component::concurrent</code> and its submodules with the working implementation developed in the <code>wasip3-prototyping</code> repo.  For ease of review, it does not include any new tests; I'll add those in a follow-up commit.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 527101918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751600725
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527494561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751899043
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527499768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751900520
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527510632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751903936
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527516971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751905970
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2994199390\">PR review</a>:</p>\n<blockquote>\n<p>Ok I've gone through all of <code>concurrent.rs</code> and here's comments here and there. I haven't looked at <code>futures_and_streams</code> yet and I'll want to closely review the <code>unsafe</code> traits there though, so more to come.</p>\n<p>I've also pushed up a few commits here for miscellaneous things, so feel free to squash them all in if you're ok with them or append further commits here.</p>\n</blockquote>",
        "id": 527517090,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906017
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190313099\">PR review comment</a>:</p>\n<blockquote>\n<p>IIRC this file is a duplicate of <code>vm/component/resources.rs</code> right? (or at least a historic one). IIRC we talked about deferring resolving this duplication to later, but mind filing an issue and registering a FIXME here?</p>\n</blockquote>",
        "id": 527517091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906017
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190315958\">PR review comment</a>:</p>\n<blockquote>\n<p>I manually changed the previous PR, but mind updating the import style in the new files to match the preexisting style in Wasmtime?</p>\n</blockquote>",
        "id": 527517092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906017
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190315069\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind either (a) resolving this TODO in this PR or (b) filing an issue for this TODO to point to and pointing to that?</p>\n</blockquote>",
        "id": 527517093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906017
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190513332\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind filing an issue for this?</p>\n</blockquote>",
        "id": 527517095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906017
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190361563\">PR review comment</a>:</p>\n<blockquote>\n<p>Like above, can this be <code>pub(crate)</code></p>\n</blockquote>",
        "id": 527517096,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906017
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190330180\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you file an issue about removing <code>to_vec</code> here? I'm remembering now that while I synchronized the async/concurrent signature in <code>Linker</code> for dynamic things I think that's something we're going to want to do here as well for <code>call_concurrent</code>. The signature will change slightly but I think it will still be doable (and like the linker ones it'd use <code>Vec</code> internally for now)</p>\n</blockquote>",
        "id": 527517097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906017
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190320054\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be done by removing the task on <code>Drop</code> instead of allocating an extra <code>Arc</code>?</p>\n</blockquote>",
        "id": 527517098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906017
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190358936\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be made <code>pub(crate)</code>?</p>\n</blockquote>",
        "id": 527517099,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906017
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190488636\">PR review comment</a>:</p>\n<blockquote>\n<p>Are these perhaps relics of a historical implementation? (similar with methods above). I'd otherwise imagine that the method-based accessors could all get removed in favor of accessing the fields directly</p>\n</blockquote>",
        "id": 527517100,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906017
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190323869\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm wary of this in that we don't want to change the public API contract required depending on crate features being enabled or disabled. This implementation looks like it goes from requriing <code>post_return</code> to not requiring it, which would be a regression for the public API. Could this be integrated differently to still require post return when <code>call_async</code> is used? (it's fine to me that <code>call_concurrent</code> is documented as not requiring post-return)</p>\n</blockquote>",
        "id": 527517101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906017
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190548947\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind removing this and replacing it with <code>Waker::noop()</code>?</p>\n</blockquote>",
        "id": 527517102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906017
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190547394\">PR review comment</a>:</p>\n<blockquote>\n<p>We'll want to do something about this (e.g. document, remove, etc).</p>\n<p>In toying around locally though I see that the reason for this is <code>Vec&lt;HostTaskFuture&gt;</code> which is only <code>Send</code>, not also <code>Sync</code>. I think we'll want to keep that in the sense that we don't want to require futures to all be both <code>Sync</code> and <code>Send</code>, only <code>Send</code>, if possible.</p>\n<p>Also in toying with this though I can remove the <code>spawned_tasks</code> field entirely and tests all pass. Given that do you know of a reason to keep this field, and if not can it be removed? (once removed it's possible to remove these <code>unsafe impl</code> blocks)</p>\n</blockquote>",
        "id": 527517103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906017
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190320893\">PR review comment</a>:</p>\n<blockquote>\n<p>Also, mind running some of the basic, typed, no-call-hook, etc, benchmarks for host-to-wasm to see the impact of this new code path?</p>\n</blockquote>",
        "id": 527517105,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906017
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2994682223\">PR review</a>.</p>",
        "id": 527519525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906968
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190624239\">PR review comment</a>:</p>\n<blockquote>\n<p>This is intentionally public to allow host function implementations to call <code>Instance::{future,stream}</code>, for which they need an <code>Instance</code> object.</p>\n<p>Given that <code>Instance</code> is <code>Copy</code>, I suppose we could require the host function closure to close over an <code>Instance</code> from the top-level code (i.e. the code that actually creates the instance).  The ergonomics wouldn't be as nice, though, plus it creates the hazard that the host embedder code mixes up its <code>Instance</code>s and closes over the wrong one.</p>\n</blockquote>",
        "id": 527519526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906968
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2994683215\">PR review</a>.</p>",
        "id": 527519603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906994
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190624891\">PR review comment</a>:</p>\n<blockquote>\n<p>See my reply above.</p>\n</blockquote>",
        "id": 527519604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751906994
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2994688606\">PR review</a>.</p>",
        "id": 527519881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751907113
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190628287\">PR review comment</a>:</p>\n<blockquote>\n<p>I think I just got carried away with writing accessor methods; I can get rid of them.</p>\n</blockquote>",
        "id": 527519883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751907113
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2994697392\">PR review</a>.</p>",
        "id": 527520319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751907289
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190634136\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Also in toying with this though I can remove the spawned_tasks field entirely and tests all pass</p>\n</blockquote>\n<p>Sounds like we're missing test coverage, then -- probably because we were leaning on the <code>wasmtime-wasi[-http]</code> integration tests to exercise this and never wrote any non-wasi tests for it.  I'm sure some of the wasi tests will fail if you remove that field.</p>\n</blockquote>",
        "id": 527520321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751907289
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2994706835\">PR review</a>.</p>",
        "id": 527520932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751907518
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190640531\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Could this be done by removing the task on <code>Drop</code> instead of allocating an extra <code>Arc</code>?</p>\n</blockquote>\n<p>I had originally planned to do that, but couldn't see how to avoid shared mutable aliasing of the store.  Revisiting it now, I can see we just need a custom <code>Future</code> implementation which has a <code>StoreContextMut</code> field, similar to what we did for <code>FiberFuture</code>.  I'll do that.</p>\n</blockquote>",
        "id": 527520933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751907518
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190642953\">PR review comment</a>:</p>\n<blockquote>\n<p>BTW, I'm fine with changing the field to a <code>Mutex&lt;Vec&lt;HostTaskFuture&gt;&gt;</code> if that's what we need to remove the <code>unsafe impl</code>s.</p>\n</blockquote>",
        "id": 527521187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751907608
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2994710532\">PR review</a>.</p>",
        "id": 527521188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751907608
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190690344\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you elaborate on how you'd like to see this code changed?  Naively, I could imagine changing this to look more like <code>TypedFunc::call_async</code>, but that would require the same <code>unsafe</code> use of a raw pointer, which I was trying to avoid here. </p>\n</blockquote>",
        "id": 527525641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751909405
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2994781927\">PR review</a>.</p>",
        "id": 527525642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751909405
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2994821514\">PR review</a>.</p>",
        "id": 527527859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751910411
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190717181\">PR review comment</a>:</p>\n<blockquote>\n<p>Ideally we'd have <code>fn call_concurrent&lt;'a&gt;(self, store: ..., params: &amp;'a [Val], results: &amp;'a mut [Val]) -&gt; Pin&lt;Box&lt;... + 'a&gt;&gt;</code> where the returned future would close over <code>params</code> and <code>results</code>. Internally that'd do something like <code>Linker::func_new_concurrent</code> where <code>Vec</code> is still used internally to satisfy the <code>'static</code> needed to put the future into the store but otherwise the public signature wouldn't change.</p>\n</blockquote>",
        "id": 527527860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751910411
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2994830634\">PR review</a>.</p>",
        "id": 527528433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751910632
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190722941\">PR review comment</a>:</p>\n<blockquote>\n<p>This sort of API makes it very similar to <code>Caller</code> that we have for core wasm which is something I've long wanted to delete from the public API, but it's pretty load-bearing so we probably can't remove that. I've historically wanted to resist any similar temptation to add such a similar call to components as well (e.g. there's no <code>Caller</code> on any <code>component::Linker</code> methods, it's all just <code>StoreContextMut</code>).</p>\n<p>I'll try to revisit this when reading over futures and streams code and see if I can't formulate more thoughts about this.</p>\n</blockquote>",
        "id": 527528434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751910632
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2994833854\">PR review</a>.</p>",
        "id": 527528641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751910717
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190725238\">PR review comment</a>:</p>\n<blockquote>\n<p>Currently in this PR there are no reads of the <code>spawned_tasks</code> field which is why tests in the <code>cm-async-tests</code> PR (which I realize doesn't include <code>wasmtime-wasi{,-http}</code>) pass. Does this mean that some changes from upstream wasip3-prototyping accidentally weren't merged back here?</p>\n</blockquote>",
        "id": 527528643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751910717
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2994852457\">PR review</a>.</p>",
        "id": 527530220,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751911205
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190737947\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Currently in this PR there are no reads of the <code>spawned_tasks</code> field</p>\n</blockquote>\n<p>Maybe I'm misunderstanding, but isn't <a href=\"https://github.com/dicej/wasmtime/blob/c135259dff3ed16d87668c24d7f5698727f85a35/crates/wasmtime/src/runtime/component/concurrent.rs#L3160-L3171\">this</a> a read of that field?</p>\n</blockquote>",
        "id": 527530222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751911205
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527530573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751911303
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527531405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751911511
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2994921147\">PR review</a>.</p>",
        "id": 527535867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751912950
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190784562\">PR review comment</a>:</p>\n<blockquote>\n<p>Er yes, bad words on my part. Basically nothing ever pushes on that vector so it's always empty</p>\n</blockquote>",
        "id": 527535868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751912950
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2995094388\">PR review</a>.</p>",
        "id": 527550693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751917548
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2190898154\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok, then yes, this looks like dead code.  We used to push spawned tasks to a vector in <code>Access[or]::spawn</code> but now we call <code>Instance::spawn_with_accessor</code> instead, so you're right that the field can be removed.  I'll do that.</p>\n</blockquote>",
        "id": 527550694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751917549
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527552150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751918265
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527583806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751932758
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2995613915\">PR review</a>.</p>",
        "id": 527585209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751933765
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2191232497\">PR review comment</a>:</p>\n<blockquote>\n<p>I've pushed an update to require <code>post_return_async</code> for <code>call_async</code> and added docs to <code>call_concurrent</code> indicating that the <code>post-return</code> function is called automatically in that case.</p>\n</blockquote>",
        "id": 527585210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751933765
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192586822\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Also, mind running some of the basic, typed, no-call-hook, etc, benchmarks for host-to-wasm to see the impact of this new code path?</p>\n</blockquote>\n<p>Would you mind providing instructions for doing that?  I ran <code>cargo bench</code>, but that ran a bunch of other, irrelevant stuff as well.  How did you get your \"before vs. after\" numbers on the last PR, and how did you specify which ones to run?</p>\n</blockquote>",
        "id": 527694746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751982457
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2997747978\">PR review</a>.</p>",
        "id": 527694747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751982457
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2997934845\">PR review</a>.</p>",
        "id": 527705804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751985162
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192697301\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh sure yeah, I do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">bench</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">bench</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">list</span>\n</code></pre></div>\n<p>first, and then this accepts a regex argument to pare down what's being run so I build up a regex to just the benchmarks that are relevant. For example</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">bench</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">bench</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">'^</span><span class=\"n\">sync</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"n\">component</span><span class=\"o\">'</span>\n</code></pre></div>\n<p>focuses just on sync calls (the fastest ones) and component-related ones. Here we only want host-to-wasm </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">bench</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">bench</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">'^</span><span class=\"n\">sync</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"n\">host</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"o\">'</span>\n</code></pre></div>\n<p>and eventually what you probably want to run is:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">bench</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">bench</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">'^</span><span class=\"n\">sync</span><span class=\"o\">/</span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">hook</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"n\">host</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">typed</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">*'</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 527705806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751985162
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2997939197\">PR review</a>.</p>",
        "id": 527706086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751985232
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192700260\">PR review comment</a>:</p>\n<blockquote>\n<p>What I'd also recommend is using </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$previous_command</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">baseline</span><span class=\"w\"> </span><span class=\"n\">main</span>\n</code></pre></div>\n<p>on the <code>main</code> branch or without the component-model-async feature. Then with this PR you'd run:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$previous_command</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">baseline</span><span class=\"w\"> </span><span class=\"n\">main</span>\n</code></pre></div>\n<p>which will automate criterion reporting differences to the previously captured baseline</p>\n</blockquote>",
        "id": 527706088,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751985232
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527706502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751985325
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527708088,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751985697
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527714741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751987268
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527745305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996588
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527746140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996945
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-2998084571\">PR review</a>.</p>",
        "id": 527746171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996960
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192799809\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this wants to further type-check that the payload type matches <code>T</code>, e.g. <code>T::typecheck(...)</code></p>\n</blockquote>",
        "id": 527746175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192823216\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be possible to change all these <code>watch_*</code> methods to <code>async fn watch(&amp;mut self) { ... }</code>? That I think is a simple signature to model the various interactions here:</p>\n<ul>\n<li>By taking <code>&amp;mut self</code> it's effectively \"taking ownership\", aka preventing anything else happening.</li>\n<li><code>Watch::into_inner</code> is now dropping the returned future.</li>\n</ul>\n</blockquote>",
        "id": 527746176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192806179\">PR review comment</a>:</p>\n<blockquote>\n<p>Here \"write end dropped without writing\" is a documentation-of-eld, right?</p>\n</blockquote>",
        "id": 527746177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192815489\">PR review comment</a>:</p>\n<blockquote>\n<p>Along the lines of a comment about <code>async fn</code> above, I think this would be much clearer as a loop over the buffer calling <code>self.write</code> rather than via recursion.</p>\n</blockquote>",
        "id": 527746178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192812847\">PR review comment</a>:</p>\n<blockquote>\n<p>Wherever possible I personally find it much easier to reason about/read <code>async fn</code> signatures rather than those returning <code>impl Future</code>. Would it be possible to change this, and a number of other functions in this file that just return <code>impl Future</code> to <code>async fn</code>? I believe the <code>Send</code>-ness of the future here will be correctly inferred.</p>\n</blockquote>",
        "id": 527746179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192827351\">PR review comment</a>:</p>\n<blockquote>\n<p>Like writers above, could this be an <code>async fn</code> with <code>&amp;mut self</code> as a receiver?</p>\n</blockquote>",
        "id": 527746180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192826382\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar to above the payload here needs to be type-checked against <code>T</code></p>\n</blockquote>",
        "id": 527746181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192825848\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar to futures above I think this <code>rep</code> needs to be type-checked against <code>T</code></p>\n</blockquote>",
        "id": 527746182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192848643\">PR review comment</a>:</p>\n<blockquote>\n<p>This trait, and <code>ReadBuffer</code> below, show up in public trait bounds so these need to be public documented traits. Ideally with links to what methods use them and such.</p>\n</blockquote>",
        "id": 527746183,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192819114\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be possible to have this be <code>&amp;mut self</code>? I realize that would mean changing how \"things are dropped\" is modeled but personally I find that style of ownership much easier to work with than the move-in-and-move-out style this is currently using.</p>\n</blockquote>",
        "id": 527746184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192907130\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW I find the terminology here pretty confusing. I understand you pass a <code>ReadBuffer</code> to a read operation, but the only thing you can do with a <code>ReadBuffer</code> is write to it. I have not spent much time trying to find better names, but I wanted to write this down nonetheless.</p>\n</blockquote>",
        "id": 527746185,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192850468\">PR review comment</a>:</p>\n<blockquote>\n<p>My understanding is that this is not intrinsic to the feature, is that right? This is only here for the <code>{Take,Read,Write}Buffer</code> implementations?</p>\n<p>If so can this be made an optional feature to avoid requiring it?</p>\n</blockquote>",
        "id": 527746186,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996961
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2192789544\">PR review comment</a>:</p>\n<blockquote>\n<p>There's no protections here that <code>T</code> is correct?</p>\n</blockquote>",
        "id": 527746189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751996962
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527954253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752090177
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3003050926\">PR review</a>.</p>",
        "id": 527964087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752094356
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2195950479\">PR review comment</a>:</p>\n<blockquote>\n<p>I've replaced the <code>Arc</code> with code that removes the task when the future is resolved or dropped.  I've also opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11209\">https://github.com/bytecodealliance/wasmtime/issues/11209</a> to track future optimization work.</p>\n</blockquote>",
        "id": 527964088,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752094356
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 527970968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752097438
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2200908901\">PR review comment</a>:</p>\n<blockquote>\n<p>Issue filed: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11218\">https://github.com/bytecodealliance/wasmtime/issues/11218</a></p>\n</blockquote>",
        "id": 528354148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752244912
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3010584896\">PR review</a>.</p>",
        "id": 528354149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752244912
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3010588017\">PR review</a>.</p>",
        "id": 528354330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752244976
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2200911050\">PR review comment</a>:</p>\n<blockquote>\n<p>Issue filed: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11219\">https://github.com/bytecodealliance/wasmtime/issues/11219</a></p>\n</blockquote>",
        "id": 528354331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752244976
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3010588674\">PR review</a>.</p>",
        "id": 528354374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752244989
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2200911523\">PR review comment</a>:</p>\n<blockquote>\n<p>Issue filed: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11219\">https://github.com/bytecodealliance/wasmtime/issues/11219</a></p>\n</blockquote>",
        "id": 528354376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752244990
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3010589166\">PR review</a>.</p>",
        "id": 528354408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752245000
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2200911868\">PR review comment</a>:</p>\n<blockquote>\n<p>Issue filed: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11219\">https://github.com/bytecodealliance/wasmtime/issues/11219</a></p>\n</blockquote>",
        "id": 528354410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752245000
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3010590004\">PR review</a>.</p>",
        "id": 528354466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752245017
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2200912478\">PR review comment</a>:</p>\n<blockquote>\n<p>Issue filed: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11219\">https://github.com/bytecodealliance/wasmtime/issues/11219</a></p>\n</blockquote>",
        "id": 528354467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752245017
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3010596105\">PR review</a>.</p>",
        "id": 528354866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752245136
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2200916508\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I struggled with the names of <code>WriteBuffer</code> and <code>ReadBuffer</code>, too.  What about <code>SourceBuffer</code> and <code>DestinationBuffer</code> instead?</p>\n</blockquote>",
        "id": 528354870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752245136
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2201449330\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm going to defer this to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11223\">https://github.com/bytecodealliance/wasmtime/issues/11223</a></p>\n</blockquote>",
        "id": 528384770,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752256603
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3011392872\">PR review</a>.</p>",
        "id": 528384771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752256603
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3011403387\">PR review</a>.</p>",
        "id": 528385409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752256870
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2201456537\">PR review comment</a>:</p>\n<blockquote>\n<p>I've opened an issue for this: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11222\">https://github.com/bytecodealliance/wasmtime/issues/11222</a></p>\n</blockquote>",
        "id": 528385410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752256870
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3011403696\">PR review</a>.</p>",
        "id": 528385431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752256880
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2201456743\">PR review comment</a>:</p>\n<blockquote>\n<p>I've opened an issue for this: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11222\">https://github.com/bytecodealliance/wasmtime/issues/11222</a></p>\n</blockquote>",
        "id": 528385432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752256880
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3011403877\">PR review</a>.</p>",
        "id": 528385441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752256885
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2201456851\">PR review comment</a>:</p>\n<blockquote>\n<p>I've opened an issue for this: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11222\">https://github.com/bytecodealliance/wasmtime/issues/11222</a></p>\n</blockquote>",
        "id": 528385443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752256885
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3011907516\">PR review</a>.</p>",
        "id": 528402968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752266092
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2201797728\">PR review comment</a>:</p>\n<blockquote>\n<p>Issue filed: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11219\">https://github.com/bytecodealliance/wasmtime/issues/11219</a></p>\n</blockquote>",
        "id": 528402969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752266092
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3011909605\">PR review</a>.</p>",
        "id": 528403048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752266133
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2201799026\">PR review comment</a>:</p>\n<blockquote>\n<p>I've opened an issue for this: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11222\">https://github.com/bytecodealliance/wasmtime/issues/11222</a></p>\n</blockquote>",
        "id": 528403049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752266134
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3011972443\">PR review</a>.</p>",
        "id": 528405739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752267654
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2201842056\">PR review comment</a>:</p>\n<blockquote>\n<p>Issue filed: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11226\">https://github.com/bytecodealliance/wasmtime/issues/11226</a></p>\n</blockquote>",
        "id": 528405740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752267654
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#discussion_r2201842793\">PR review comment</a>:</p>\n<blockquote>\n<p>Issue filed: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11226\">https://github.com/bytecodealliance/wasmtime/issues/11226</a></p>\n</blockquote>",
        "id": 528405781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752267672
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3011973812\">PR review</a>.</p>",
        "id": 528405783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752267672
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127#pullrequestreview-3011989618\">PR review</a>:</p>\n<blockquote>\n<p>Ok I believe we've filed issues for follow-up tasks but otherwise this is an off-by-default feature and in a pretty good spot otherwise, so I'm going to flag for merge. Thanks again @dicej!</p>\n</blockquote>",
        "id": 528406256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752267955
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11127\">PR #11127</a>.</p>",
        "id": 528408704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752269394
    }
]