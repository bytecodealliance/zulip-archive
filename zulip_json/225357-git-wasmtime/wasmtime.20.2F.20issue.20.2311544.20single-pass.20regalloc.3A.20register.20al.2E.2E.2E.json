[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11544\">issue #11544</a>:</p>\n<blockquote>\n<p>This input:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (start 0)\n  (func\n    loop\n      ref.null i31\n      br_on_null 0\n      drop\n    end\n  )\n)\n</code></pre></div>\n<p>fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Oregalloc</span><span class=\"o\">-</span><span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"n\">single</span><span class=\"o\">-</span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wexceptions</span><span class=\"o\">=</span><span class=\"n\">y</span>\n<span class=\"mi\">2025</span><span class=\"o\">-</span><span class=\"mi\">08</span><span class=\"o\">-</span><span class=\"mi\">26</span><span class=\"n\">T18</span><span class=\"p\">:</span><span class=\"mi\">47</span><span class=\"p\">:</span><span class=\"mf\">40.840113</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">compile</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Register</span><span class=\"w\"> </span><span class=\"n\">allocation</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">vcode</span>\n<span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">([]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">([]))</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">args</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v192</span><span class=\"o\">=%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">([]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block2</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">([</span><span class=\"n\">VReg</span><span class=\"p\">(</span><span class=\"n\">vreg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">197</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">class</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"p\">)]))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">([]))</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"mh\">0x30</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v192</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v200</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"mh\">0x40</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v192</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v199</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\">    </span><span class=\"o\">*%</span><span class=\"n\">v200</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">MachLabel</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"n\">v192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">MachLabel</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">([]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block5</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">([]))</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label3</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">([]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block3</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">([]))</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label5</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">([</span><span class=\"n\">VReg</span><span class=\"p\">(</span><span class=\"n\">vreg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">194</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">class</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"p\">)]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block4</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">([]))</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label5</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">([]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block1</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">rets</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">TooManyLiveRegs</span>\n<span class=\"n\">CLIF</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span>\n<span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span><span class=\"o\">+</span><span class=\"mi\">16</span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">tail</span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">):</span>\n<span class=\"o\">@</span><span class=\"mi\">001</span><span class=\"n\">e</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">):</span>\n<span class=\"o\">@</span><span class=\"mi\">001</span><span class=\"n\">e</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"o\">@</span><span class=\"mi\">0023</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">can_move</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">48</span>\n<span class=\"o\">@</span><span class=\"mi\">0023</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">can_move</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">64</span>\n<span class=\"o\">@</span><span class=\"mi\">0023</span><span class=\"w\">                               </span><span class=\"n\">try_call_indirect</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">(</span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block4</span><span class=\"p\">(</span><span class=\"n\">exn0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">]</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block5</span><span class=\"p\">:</span>\n<span class=\"o\">@</span><span class=\"mi\">0025</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block3</span><span class=\"p\">:</span>\n<span class=\"o\">@</span><span class=\"mi\">0026</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span><span class=\"p\">:</span>\n<span class=\"o\">@</span><span class=\"mi\">0026</span><span class=\"w\">                               </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">compile</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">79</span><span class=\"p\">:</span><span class=\"mi\">14</span><span class=\"p\">:</span>\n<span class=\"nc\">register</span><span class=\"w\"> </span><span class=\"n\">allocation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">TooManyLiveRegs</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>The original fuzz test case is:</p>\n<p>&lt;details&gt;</p>\n<p><div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func (result i64 f32 f64 v128 i32 i64 f32 v128 i32)))\n  (type (;1;) (func (param f32 f64 v128 i32 i64 f32 f64 f32 i32 i64 f32 f64 v128) (result i32 i64 f32 f64 i64 i32 i64 i32)))\n  (import \"\\u{f3}\\u{f4}\" \"\" (table (;0;) 1995 179847 funcref))\n  (import \"\" \"\" (func (;0;) (type 1)))\n  (import \"\\u{e5}\\u{e6}\\u{e7}E\" \"\" (func (;1;) (type 0)))\n  (import \"\" \"\" (global (;0;) (mut i64)))\n  (memory (;0;) 2316 49871)\n  (global (;1;) (mut i32) i32.const 1000)\n  (export \"\" (global 0))\n  (export \"1\" (func 8))\n  (elem (;0;) (table 0) (i32.const 109) func)\n  (func (;2;) (type 1) (param f32 f64 v128 i32 i64 f32 f64 f32 i32 i64 f32 f64 v128) (result i32 i64 f32 f64 i64 i32 i64 i32)\n    (local f32 f64 v128 i32 f64 f32 f64 v128 i32 i64 f32 f64 f32 f64 v128 f64)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    block (result i32) ;; label = @1\n      elem.drop 0\n      loop ;; label = @2\n        global.get 1\n        i32.eqz\n        if ;; label = @3\n          unreachable\n        end\n        global.get 1\n        i32.const 1\n        i32.sub\n        global.set 1\n        data.drop 1\n        data.drop 1\n        data.drop 1\n        i64.const 127125275142234563\n        f32.convert_i64_u\n        i32.trunc_f32_s\n        block ;; label = @3\n          block (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32) ;; label = @4\n            call 5\n            f32.const 0x1.p-142 (;=0.00000000000000000000000000000000000000000018;)\n            i32.trunc_sat_f32_s\n            i32.sub\n            v128.load32x2_s offset=3067064003\n            i16x8.extmul_high_i8x16_u\n            f64x2.trunc\n            i32x4.extend_high_i16x8_s\n            f64x2.convert_low_i32x4_u\n            i32x4.all_true\n            v128.load32x2_s offset=96519093\n            f32x4.floor\n            i64x2.extract_lane 1\n            loop ;; label = @5\n              global.get 1\n              i32.eqz\n              if ;; label = @6\n                unreachable\n              end\n              global.get 1\n              i32.const 1\n              i32.sub\n              global.set 1\n              data.drop 1\n              data.drop 0\n              f32.const -0x1.873386p-74 (;=-0.000000000000000000000080898525;)\n              i64.const -4349457152578708029\n              loop ;; label = @6\n                global.get 1\n                i32.eqz\n                if ;; label = @7\n                  unreachable\n                end\n                global.get 1\n                i32.const 1\n                i32.sub\n                global.set 1\n                data.drop 1\n                data.drop 1\n                data.drop 0\n                loop ;; label = @7\n                  global.get 1\n                  i32.eqz\n                  if ;; label = @8\n                    unreachable\n                  end\n                  global.get 1\n                  i32.const 1\n                  i32.sub\n                  global.set 1\n                  try_table (catch_all 4 (;@3;)) (catch_all 0 (;@7;)) (catch_all 0 (;@7;)) (catch_all 0 (;@7;)) (catch_all 0 (;@7;)) (catch_all 0 (;@7;)) (catch_all 1 (;@6;)) (catch_all 0 (;@7;)) ;; label = @8\n                    loop ;; label = @9\n                      global.get 1\n                      i32.eqz\n                      if ;; label = @10\n                        unreachable\n                      end\n                      global.get 1\n                      i32.const 1\n                      i32.sub\n                      global.set 1\n                      data.drop 1\n                      loop (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32) ;; label = @10\n                        global.get 1\n                        i32.eqz\n                        if ;; label = @11\n                          unreachable\n                        end\n                        global.get 1\n                        i32.const 1\n                        i32.sub\n                        global.set 1\n                        call 1\n                        block ;; label = @11\n                          data.drop 1\n                          data.drop 1\n                          data.drop 1\n                          data.drop 1\n                          data.drop 1\n                          data.drop 0\n                          elem.drop 0\n                          br 6 (;@5;)\n                          call 7\n                          try_table (catch_all 6 (;@5;)) (catch_all 2 (;@9;)) ;; label = @12\n                            call 5\n                            block (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32) ;; label = @13\n                              try_table (result i32) (catch_all 8 (;@5;)) (catch_all 11 (;@2;)) ;; label = @14\n                                br 2 (;@12;)\n                                call 5\n                                i64x2.shr_s\n                                i64x2.extend_low_i32x4_s\n                                i16x8.extract_lane_u 3\n                                v128.load8_splat offset=3184506367\n                                v128.const i32x4 0xc3b7c3b6 0xc3b9c3b8 0xbbc3ba2a 0xc3b6bcc3\n                                i8x16.max_s\n                                elem.drop 0\n                                elem.drop 0\n                                try_table ;; label = @15\n                                end\n                                unreachable\n                              end\n                              unreachable\n                            end\n                            unreachable\n                          end\n                          unreachable\n                        end\n                      end\n                      unreachable\n                    end\n                  end\n                end\n              end\n              unreachable\n            end\n            unreachable\n          end\n          unreachable\n        end\n        unreachable\n      end\n      unreachable\n    end\n    unreachable\n  )\n  (func (;3;) (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    unreachable\n  )\n  (func (;4;) (type 1) (param f32 f64 v128 i32 i64 f32 f64 f32 i32 i64 f32 f64 v128) (result i32 i64 f32 f64 i64 i32 i64 i32)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    unreachable\n  )\n  (func (;5;) (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    unreachable\n  )\n  (func (;6;) (type 1) (param f32 f64 v128 i32 i64 f32 f64 f32 i32 i64 f32 f64 v128) (result i32 i64 f32 f64 i64 i32 i64 i32)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    unreachable\n  )\n  (func (;7;) (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    unreachable\n  )\n  (func (;8;) (type 1) (param f32 f64 v128 i32 i64 f32 f64 f32 i32 i64 f32 f64 v128) (result i32 i64 f32 f64 i64 i32 i6\n[message truncated]\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 536294759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756234112
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the fuzz-bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11544\">Issue #11544</a>.</p>",
        "id": 536294760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756234112
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the cranelift:area:regalloc label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11544\">Issue #11544</a>.</p>",
        "id": 536294761,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756234112
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11544#issuecomment-3225333768\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11544\">issue #11544</a>:</p>\n<blockquote>\n<p>cc <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11533\">https://github.com/bytecodealliance/wasmtime/pull/11533</a> and @d-sonuga </p>\n</blockquote>",
        "id": 536294807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756234135
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11544\">issue #11544</a>:</p>\n<blockquote>\n<p>This input:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (import \"\" \"\" (func))\n  (func\n    try_table (catch_all 0)\n      call 0\n    end\n  )\n)\n</code></pre></div>\n<p>fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Oregalloc</span><span class=\"o\">-</span><span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"n\">single</span><span class=\"o\">-</span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wexceptions</span><span class=\"o\">=</span><span class=\"n\">y</span>\n<span class=\"mi\">2025</span><span class=\"o\">-</span><span class=\"mi\">08</span><span class=\"o\">-</span><span class=\"mi\">26</span><span class=\"n\">T18</span><span class=\"p\">:</span><span class=\"mi\">47</span><span class=\"p\">:</span><span class=\"mf\">40.840113</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">compile</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Register</span><span class=\"w\"> </span><span class=\"n\">allocation</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">vcode</span>\n<span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">([]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">([]))</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">args</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v192</span><span class=\"o\">=%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">([]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block2</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">([</span><span class=\"n\">VReg</span><span class=\"p\">(</span><span class=\"n\">vreg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">197</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">class</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"p\">)]))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">([]))</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"mh\">0x30</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v192</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v200</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"mh\">0x40</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v192</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v199</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\">    </span><span class=\"o\">*%</span><span class=\"n\">v200</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">MachLabel</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"n\">v192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">MachLabel</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">([]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block5</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">([]))</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label3</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">([]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block3</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">([]))</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label5</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">([</span><span class=\"n\">VReg</span><span class=\"p\">(</span><span class=\"n\">vreg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">194</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">class</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"p\">)]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block4</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">([]))</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label5</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">([]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block1</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">rets</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">TooManyLiveRegs</span>\n<span class=\"n\">CLIF</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span>\n<span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span><span class=\"o\">+</span><span class=\"mi\">16</span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">tail</span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">):</span>\n<span class=\"o\">@</span><span class=\"mi\">001</span><span class=\"n\">e</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">):</span>\n<span class=\"o\">@</span><span class=\"mi\">001</span><span class=\"n\">e</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"o\">@</span><span class=\"mi\">0023</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">can_move</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">48</span>\n<span class=\"o\">@</span><span class=\"mi\">0023</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">can_move</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">64</span>\n<span class=\"o\">@</span><span class=\"mi\">0023</span><span class=\"w\">                               </span><span class=\"n\">try_call_indirect</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">(</span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block4</span><span class=\"p\">(</span><span class=\"n\">exn0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">]</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block5</span><span class=\"p\">:</span>\n<span class=\"o\">@</span><span class=\"mi\">0025</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block3</span><span class=\"p\">:</span>\n<span class=\"o\">@</span><span class=\"mi\">0026</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span><span class=\"p\">:</span>\n<span class=\"o\">@</span><span class=\"mi\">0026</span><span class=\"w\">                               </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">compile</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">79</span><span class=\"p\">:</span><span class=\"mi\">14</span><span class=\"p\">:</span>\n<span class=\"nc\">register</span><span class=\"w\"> </span><span class=\"n\">allocation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">TooManyLiveRegs</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>The original fuzz test case is:</p>\n<p>&lt;details&gt;</p>\n<p><div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func (result i64 f32 f64 v128 i32 i64 f32 v128 i32)))\n  (type (;1;) (func (param f32 f64 v128 i32 i64 f32 f64 f32 i32 i64 f32 f64 v128) (result i32 i64 f32 f64 i64 i32 i64 i32)))\n  (import \"\\u{f3}\\u{f4}\" \"\" (table (;0;) 1995 179847 funcref))\n  (import \"\" \"\" (func (;0;) (type 1)))\n  (import \"\\u{e5}\\u{e6}\\u{e7}E\" \"\" (func (;1;) (type 0)))\n  (import \"\" \"\" (global (;0;) (mut i64)))\n  (memory (;0;) 2316 49871)\n  (global (;1;) (mut i32) i32.const 1000)\n  (export \"\" (global 0))\n  (export \"1\" (func 8))\n  (elem (;0;) (table 0) (i32.const 109) func)\n  (func (;2;) (type 1) (param f32 f64 v128 i32 i64 f32 f64 f32 i32 i64 f32 f64 v128) (result i32 i64 f32 f64 i64 i32 i64 i32)\n    (local f32 f64 v128 i32 f64 f32 f64 v128 i32 i64 f32 f64 f32 f64 v128 f64)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    block (result i32) ;; label = @1\n      elem.drop 0\n      loop ;; label = @2\n        global.get 1\n        i32.eqz\n        if ;; label = @3\n          unreachable\n        end\n        global.get 1\n        i32.const 1\n        i32.sub\n        global.set 1\n        data.drop 1\n        data.drop 1\n        data.drop 1\n        i64.const 127125275142234563\n        f32.convert_i64_u\n        i32.trunc_f32_s\n        block ;; label = @3\n          block (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32) ;; label = @4\n            call 5\n            f32.const 0x1.p-142 (;=0.00000000000000000000000000000000000000000018;)\n            i32.trunc_sat_f32_s\n            i32.sub\n            v128.load32x2_s offset=3067064003\n            i16x8.extmul_high_i8x16_u\n            f64x2.trunc\n            i32x4.extend_high_i16x8_s\n            f64x2.convert_low_i32x4_u\n            i32x4.all_true\n            v128.load32x2_s offset=96519093\n            f32x4.floor\n            i64x2.extract_lane 1\n            loop ;; label = @5\n              global.get 1\n              i32.eqz\n              if ;; label = @6\n                unreachable\n              end\n              global.get 1\n              i32.const 1\n              i32.sub\n              global.set 1\n              data.drop 1\n              data.drop 0\n              f32.const -0x1.873386p-74 (;=-0.000000000000000000000080898525;)\n              i64.const -4349457152578708029\n              loop ;; label = @6\n                global.get 1\n                i32.eqz\n                if ;; label = @7\n                  unreachable\n                end\n                global.get 1\n                i32.const 1\n                i32.sub\n                global.set 1\n                data.drop 1\n                data.drop 1\n                data.drop 0\n                loop ;; label = @7\n                  global.get 1\n                  i32.eqz\n                  if ;; label = @8\n                    unreachable\n                  end\n                  global.get 1\n                  i32.const 1\n                  i32.sub\n                  global.set 1\n                  try_table (catch_all 4 (;@3;)) (catch_all 0 (;@7;)) (catch_all 0 (;@7;)) (catch_all 0 (;@7;)) (catch_all 0 (;@7;)) (catch_all 0 (;@7;)) (catch_all 1 (;@6;)) (catch_all 0 (;@7;)) ;; label = @8\n                    loop ;; label = @9\n                      global.get 1\n                      i32.eqz\n                      if ;; label = @10\n                        unreachable\n                      end\n                      global.get 1\n                      i32.const 1\n                      i32.sub\n                      global.set 1\n                      data.drop 1\n                      loop (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32) ;; label = @10\n                        global.get 1\n                        i32.eqz\n                        if ;; label = @11\n                          unreachable\n                        end\n                        global.get 1\n                        i32.const 1\n                        i32.sub\n                        global.set 1\n                        call 1\n                        block ;; label = @11\n                          data.drop 1\n                          data.drop 1\n                          data.drop 1\n                          data.drop 1\n                          data.drop 1\n                          data.drop 0\n                          elem.drop 0\n                          br 6 (;@5;)\n                          call 7\n                          try_table (catch_all 6 (;@5;)) (catch_all 2 (;@9;)) ;; label = @12\n                            call 5\n                            block (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32) ;; label = @13\n                              try_table (result i32) (catch_all 8 (;@5;)) (catch_all 11 (;@2;)) ;; label = @14\n                                br 2 (;@12;)\n                                call 5\n                                i64x2.shr_s\n                                i64x2.extend_low_i32x4_s\n                                i16x8.extract_lane_u 3\n                                v128.load8_splat offset=3184506367\n                                v128.const i32x4 0xc3b7c3b6 0xc3b9c3b8 0xbbc3ba2a 0xc3b6bcc3\n                                i8x16.max_s\n                                elem.drop 0\n                                elem.drop 0\n                                try_table ;; label = @15\n                                end\n                                unreachable\n                              end\n                              unreachable\n                            end\n                            unreachable\n                          end\n                          unreachable\n                        end\n                      end\n                      unreachable\n                    end\n                  end\n                end\n              end\n              unreachable\n            end\n            unreachable\n          end\n          unreachable\n        end\n        unreachable\n      end\n      unreachable\n    end\n    unreachable\n  )\n  (func (;3;) (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    unreachable\n  )\n  (func (;4;) (type 1) (param f32 f64 v128 i32 i64 f32 f64 f32 i32 i64 f32 f64 v128) (result i32 i64 f32 f64 i64 i32 i64 i32)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    unreachable\n  )\n  (func (;5;) (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    unreachable\n  )\n  (func (;6;) (type 1) (param f32 f64 v128 i32 i64 f32 f64 f32 i32 i64 f32 f64 v128) (result i32 i64 f32 f64 i64 i32 i64 i32)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    unreachable\n  )\n  (func (;7;) (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    unreachable\n  )\n  (func (;8;) (type 1) (param f32 f64 v128 i32 i64 f32 f64 f32 i32 i64 f32 f64 v128) (result i32 i64 f32 f64 i64 i32 i64 i32\n[message truncated]\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 536294946,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756234201
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11544\">issue #11544</a>:</p>\n<blockquote>\n<p>This input:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (import \"\" \"\" (func))\n  (func\n    try_table (catch_all 0)\n      call 0\n    end\n  )\n)\n</code></pre></div>\n<p>fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Oregalloc</span><span class=\"o\">-</span><span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"n\">single</span><span class=\"o\">-</span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wexceptions</span><span class=\"o\">=</span><span class=\"n\">y</span>\n<span class=\"mi\">2025</span><span class=\"o\">-</span><span class=\"mi\">08</span><span class=\"o\">-</span><span class=\"mi\">26</span><span class=\"n\">T18</span><span class=\"p\">:</span><span class=\"mi\">47</span><span class=\"p\">:</span><span class=\"mf\">40.840113</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span><span class=\"p\">::</span><span class=\"n\">machinst</span><span class=\"p\">::</span><span class=\"n\">compile</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Register</span><span class=\"w\"> </span><span class=\"n\">allocation</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">vcode</span>\n<span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">([]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">([]))</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">args</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v192</span><span class=\"o\">=%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">([]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block2</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">([</span><span class=\"n\">VReg</span><span class=\"p\">(</span><span class=\"n\">vreg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">197</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">class</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"p\">)]))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">([]))</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"mh\">0x30</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v192</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v200</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"mh\">0x40</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v192</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v199</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\">    </span><span class=\"o\">*%</span><span class=\"n\">v200</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">MachLabel</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"n\">v192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">MachLabel</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">([]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block5</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">([]))</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label3</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">([]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block3</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">([]))</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label5</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">([</span><span class=\"n\">VReg</span><span class=\"p\">(</span><span class=\"n\">vreg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">194</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">class</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"p\">)]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block4</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">successor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">([]))</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label5</span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">([]):</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block1</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">rets</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">TooManyLiveRegs</span>\n<span class=\"n\">CLIF</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span>\n<span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv1</span><span class=\"o\">+</span><span class=\"mi\">16</span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">tail</span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">):</span>\n<span class=\"o\">@</span><span class=\"mi\">001</span><span class=\"n\">e</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block2</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">):</span>\n<span class=\"o\">@</span><span class=\"mi\">001</span><span class=\"n\">e</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"o\">@</span><span class=\"mi\">0023</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">can_move</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">48</span>\n<span class=\"o\">@</span><span class=\"mi\">0023</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">can_move</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">64</span>\n<span class=\"o\">@</span><span class=\"mi\">0023</span><span class=\"w\">                               </span><span class=\"n\">try_call_indirect</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">(</span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">block4</span><span class=\"p\">(</span><span class=\"n\">exn0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">]</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block5</span><span class=\"p\">:</span>\n<span class=\"o\">@</span><span class=\"mi\">0025</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block3</span><span class=\"p\">:</span>\n<span class=\"o\">@</span><span class=\"mi\">0026</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span><span class=\"p\">:</span>\n<span class=\"o\">@</span><span class=\"mi\">0026</span><span class=\"w\">                               </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">compile</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">79</span><span class=\"p\">:</span><span class=\"mi\">14</span><span class=\"p\">:</span>\n<span class=\"nc\">register</span><span class=\"w\"> </span><span class=\"n\">allocation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">TooManyLiveRegs</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>The original fuzz test case is:</p>\n<p>&lt;details&gt;</p>\n<p><div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func (result i64 f32 f64 v128 i32 i64 f32 v128 i32)))\n  (type (;1;) (func (param f32 f64 v128 i32 i64 f32 f64 f32 i32 i64 f32 f64 v128) (result i32 i64 f32 f64 i64 i32 i64 i32)))\n  (import \"\\u{f3}\\u{f4}\" \"\" (table (;0;) 1995 179847 funcref))\n  (import \"\" \"\" (func (;0;) (type 1)))\n  (import \"\\u{e5}\\u{e6}\\u{e7}E\" \"\" (func (;1;) (type 0)))\n  (import \"\" \"\" (global (;0;) (mut i64)))\n  (memory (;0;) 2316 49871)\n  (global (;1;) (mut i32) i32.const 1000)\n  (export \"\" (global 0))\n  (export \"1\" (func 8))\n  (elem (;0;) (table 0) (i32.const 109) func)\n  (func (;2;) (type 1) (param f32 f64 v128 i32 i64 f32 f64 f32 i32 i64 f32 f64 v128) (result i32 i64 f32 f64 i64 i32 i64 i32)\n    (local f32 f64 v128 i32 f64 f32 f64 v128 i32 i64 f32 f64 f32 f64 v128 f64)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    block (result i32) ;; label = @1\n      elem.drop 0\n      loop ;; label = @2\n        global.get 1\n        i32.eqz\n        if ;; label = @3\n          unreachable\n        end\n        global.get 1\n        i32.const 1\n        i32.sub\n        global.set 1\n        data.drop 1\n        data.drop 1\n        data.drop 1\n        i64.const 127125275142234563\n        f32.convert_i64_u\n        i32.trunc_f32_s\n        block ;; label = @3\n          block (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32) ;; label = @4\n            call 5\n            f32.const 0x1.p-142 (;=0.00000000000000000000000000000000000000000018;)\n            i32.trunc_sat_f32_s\n            i32.sub\n            v128.load32x2_s offset=3067064003\n            i16x8.extmul_high_i8x16_u\n            f64x2.trunc\n            i32x4.extend_high_i16x8_s\n            f64x2.convert_low_i32x4_u\n            i32x4.all_true\n            v128.load32x2_s offset=96519093\n            f32x4.floor\n            i64x2.extract_lane 1\n            loop ;; label = @5\n              global.get 1\n              i32.eqz\n              if ;; label = @6\n                unreachable\n              end\n              global.get 1\n              i32.const 1\n              i32.sub\n              global.set 1\n              data.drop 1\n              data.drop 0\n              f32.const -0x1.873386p-74 (;=-0.000000000000000000000080898525;)\n              i64.const -4349457152578708029\n              loop ;; label = @6\n                global.get 1\n                i32.eqz\n                if ;; label = @7\n                  unreachable\n                end\n                global.get 1\n                i32.const 1\n                i32.sub\n                global.set 1\n                data.drop 1\n                data.drop 1\n                data.drop 0\n                loop ;; label = @7\n                  global.get 1\n                  i32.eqz\n                  if ;; label = @8\n                    unreachable\n                  end\n                  global.get 1\n                  i32.const 1\n                  i32.sub\n                  global.set 1\n                  try_table (catch_all 4 (;@3;)) (catch_all 0 (;@7;)) (catch_all 0 (;@7;)) (catch_all 0 (;@7;)) (catch_all 0 (;@7;)) (catch_all 0 (;@7;)) (catch_all 1 (;@6;)) (catch_all 0 (;@7;)) ;; label = @8\n                    loop ;; label = @9\n                      global.get 1\n                      i32.eqz\n                      if ;; label = @10\n                        unreachable\n                      end\n                      global.get 1\n                      i32.const 1\n                      i32.sub\n                      global.set 1\n                      data.drop 1\n                      loop (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32) ;; label = @10\n                        global.get 1\n                        i32.eqz\n                        if ;; label = @11\n                          unreachable\n                        end\n                        global.get 1\n                        i32.const 1\n                        i32.sub\n                        global.set 1\n                        call 1\n                        block ;; label = @11\n                          data.drop 1\n                          data.drop 1\n                          data.drop 1\n                          data.drop 1\n                          data.drop 1\n                          data.drop 0\n                          elem.drop 0\n                          br 6 (;@5;)\n                          call 7\n                          try_table (catch_all 6 (;@5;)) (catch_all 2 (;@9;)) ;; label = @12\n                            call 5\n                            block (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32) ;; label = @13\n                              try_table (result i32) (catch_all 8 (;@5;)) (catch_all 11 (;@2;)) ;; label = @14\n                                br 2 (;@12;)\n                                call 5\n                                i64x2.shr_s\n                                i64x2.extend_low_i32x4_s\n                                i16x8.extract_lane_u 3\n                                v128.load8_splat offset=3184506367\n                                v128.const i32x4 0xc3b7c3b6 0xc3b9c3b8 0xbbc3ba2a 0xc3b6bcc3\n                                i8x16.max_s\n                                elem.drop 0\n                                elem.drop 0\n                                try_table ;; label = @15\n                                end\n                                unreachable\n                              end\n                              unreachable\n                            end\n                            unreachable\n                          end\n                          unreachable\n                        end\n                      end\n                      unreachable\n                    end\n                  end\n                end\n              end\n              unreachable\n            end\n            unreachable\n          end\n          unreachable\n        end\n        unreachable\n      end\n      unreachable\n    end\n    unreachable\n  )\n  (func (;3;) (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    unreachable\n  )\n  (func (;4;) (type 1) (param f32 f64 v128 i32 i64 f32 f64 f32 i32 i64 f32 f64 v128) (result i32 i64 f32 f64 i64 i32 i64 i32)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    unreachable\n  )\n  (func (;5;) (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    unreachable\n  )\n  (func (;6;) (type 1) (param f32 f64 v128 i32 i64 f32 f64 f32 i32 i64 f32 f64 v128) (result i32 i64 f32 f64 i64 i32 i64 i32)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    unreachable\n  )\n  (func (;7;) (type 0) (result i64 f32 f64 v128 i32 i64 f32 v128 i32)\n    global.get 1\n    i32.eqz\n    if ;; label = @1\n      unreachable\n    end\n    global.get 1\n    i32.const 1\n    i32.sub\n    global.set 1\n    unreachable\n  )\n  (func (;8;) (type 1) (param f32 f64 v128 i32 i64 f32 f64 f32 i32 i64 f32 f64 v128) (result i32 i64 f32 f64 i64 i32 i64 i32)\n\n[message truncated]\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 540349227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758238967
    }
]