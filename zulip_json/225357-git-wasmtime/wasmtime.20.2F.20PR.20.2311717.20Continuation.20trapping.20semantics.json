[
    {
        "content": "<p><strong>dhil</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11717\">PR #11717</a>.</p>",
        "id": 540481670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758295453
    },
    {
        "content": "<p>dhil opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11717\">PR #11717</a> from <code>dhil:continuation-trapping</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This patch fixes a problem with traps on continuations, which would otherwise allow a Wasm program to continue running after invoking a trapping instruction. Currently, a fresh trap handler is installed per continuation stack, meaning that the effects of a trap is delimited by the stack segment on which the trap occurred -- whereas it really ought to be delimited by the top-level of the program (i.e. the part just before host/engine frames).</p>\n</blockquote>",
        "id": 540481671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758295453
    },
    {
        "content": "<p><strong>dhil</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11717\">PR #11717</a>.</p>",
        "id": 540481675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758295453
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11717#pullrequestreview-3246357798\">PR review</a>.</p>",
        "id": 540512139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758305981
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11717#discussion_r2364014161\">PR review comment</a>:</p>\n<blockquote>\n<p>Should be able to be simplified slightly to just <code>matches!(*stack_chain, VMStackChain::Continuation(_))</code></p>\n</blockquote>",
        "id": 540512140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758305981
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11717\">PR #11717</a>.</p>",
        "id": 540627780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758424539
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11717#issuecomment-3315465336\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11717\">PR #11717</a>:</p>\n<blockquote>\n<p>I'm not familiar enough with the stack-switching code currently to review this myself. For example I don't know if this is accidentally skipping over native frames at the base of other continuations. Given that I'm going to defer to @fitzgen and @posborne as they're more familiar with the details</p>\n</blockquote>",
        "id": 540627807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758424587
    },
    {
        "content": "<p>dhil <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11717#issuecomment-3319689117\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11717\">PR #11717</a>:</p>\n<blockquote>\n<blockquote>\n<p>For example I don't know if this is accidentally skipping over native frames at the base of other continuations. </p>\n</blockquote>\n<p>Excellent point. I think it may skip over intermediate <code>invoke_wasm_and_catch_traps</code> frames, suggesting that a \"bubbling\" semantics of trapping up through continuation stacks may be the right thing to do.</p>\n</blockquote>",
        "id": 540833008,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758554353
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11717#pullrequestreview-3259035880\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for fixing this bug!</p>\n<p>Can we add a test that spawns an N deep stack chain with M frames where every other frame is a host frame, and the last frame (whether host or Wasm) triggers a trap? Then we can run that test exhaustively for small N and M.</p>\n<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"c1\">;; The imported host function.</span>\n  <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"host\"</span> <span class=\"s2\">\"func\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$host_func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n\n  <span class=\"c1\">;; A global that is incremented after calling the host</span>\n  <span class=\"c1\">;; function, which should trap, and therefore the</span>\n  <span class=\"c1\">;; increment should never happen.</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"nv\">$g</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"g\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"run\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"nv\">$frames-per-stack</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"nv\">$fuel</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"c1\">;; Trap on out-of-fuel for frames.</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">i32.eqz</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$fuel</span><span class=\"p\">))</span>\n      <span class=\"nb\">unreachable</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"c1\">;; Decrement frame fuel.</span>\n    <span class=\"p\">(</span><span class=\"nb\">local.set</span> <span class=\"nv\">$fuel</span> <span class=\"p\">(</span><span class=\"nb\">i32.sub</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$fuel</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">i32.eqz</span> <span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"err\">.rem</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$fuel</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$frames-per-stack</span><span class=\"p\">))))</span>\n      <span class=\"c1\">;; TODO: Spawn a new stack, starting either with `run`</span>\n      <span class=\"c1\">;; or our host function (based on another param or a</span>\n      <span class=\"c1\">;; global or something), and switch to it...</span>\n    <span class=\"k\">else</span>\n      <span class=\"c1\">;; Call the host function to continue our mutual recursion.</span>\n      <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$host_func</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$frames-per-stack</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$frame-fuel</span><span class=\"p\">))</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"c1\">;; Increment the global. Should never execute, dynamically.</span>\n    <span class=\"p\">(</span><span class=\"nb\">global.set</span> <span class=\"nv\">$g</span> <span class=\"p\">(</span><span class=\"nb\">i32.add</span> <span class=\"p\">(</span><span class=\"nb\">global.get</span> <span class=\"nv\">$g</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">host_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span><span class=\"p\">::</span><span class=\"n\">wrap</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">frames_per_stack</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fuel</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Trap</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">-</span><span class=\"n\">of</span><span class=\"o\">-</span><span class=\"n\">fuel</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">frames</span><span class=\"p\">.</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">fuel</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">bail</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"out of frame fuel\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Mutual</span><span class=\"w\"> </span><span class=\"n\">recursion</span><span class=\"w\"> </span><span class=\"n\">back</span><span class=\"w\"> </span><span class=\"n\">into</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">Wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"p\">.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">run</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">frames_per_stack</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fuel</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Increment</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">global</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">Should</span><span class=\"w\"> </span><span class=\"n\">never</span><span class=\"w\"> </span><span class=\"n\">execute</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dynamically</span><span class=\"p\">.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_global</span><span class=\"p\">(</span><span class=\"s\">\"g\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">g_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">).</span><span class=\"n\">unwrap_i32</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"n\">g_val</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">);</span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">frames_per_stack</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fuel</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">frames_per_stack</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">run</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">frames_per_stack</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fuel</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_global</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"g\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">unwrap_i32</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This would give me a lot more confidence that we are properly handling traps across stacks, regardless of the stack chain, host functions, and what kind of frame is youngest or oldest.</p>\n<p>(And when we add embedder API support for spawning stacks, we should also extend the host function in this new test to use that support)</p>\n</blockquote>",
        "id": 541069206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758649470
    }
]