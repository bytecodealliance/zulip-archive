[
    {
        "content": "<p>bongjunj opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979\">PR #10979</a> from <code>bongjunj:add-or-to-and</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n<p>This add <code>or(x, C) + (-C)  --&gt;  and(x, ~C)</code></p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;proof.isle&lt;/summary&gt;</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">ty</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"n\">bor</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iconst_s</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"n\">iconst_s</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"o\">-</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i64_neg</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm64_masked</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i64_as_u64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i64_not</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">))))))</span>\n\n<span class=\"p\">(</span><span class=\"n\">form</span>\n<span class=\"w\">  </span><span class=\"n\">bv_unary_8_to_64</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)))</span>\n<span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">form</span>\n<span class=\"w\">  </span><span class=\"n\">bv_binary_8_to_64</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)))</span>\n<span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">form</span>\n<span class=\"w\">  </span><span class=\"n\">bv_ternary_8_to_64</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)))</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"p\">(</span><span class=\"n\">form</span>\n<span class=\"w\">  </span><span class=\"n\">bv_ty_unary_8_to_64</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)))</span>\n<span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">form</span>\n<span class=\"w\">  </span><span class=\"n\">bv_ty_binary_8_to_64</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)))</span>\n<span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">form</span>\n<span class=\"w\">  </span><span class=\"n\">bv_ty_ternary_8_to_64</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)))</span>\n<span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Imm64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"w\"> </span><span class=\"n\">Imm64</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Inst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"w\"> </span><span class=\"n\">Inst</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">SkeletonInstSimplification</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"w\"> </span><span class=\"n\">SkeletonInstSimplification</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">IntCC</span><span class=\"w\"> </span><span class=\"k\">extern</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\">enum</span>\n<span class=\"w\">        </span><span class=\"nc\">Equal</span>\n<span class=\"w\">        </span><span class=\"n\">NotEqual</span>\n<span class=\"w\">        </span><span class=\"n\">SignedGreaterThan</span>\n<span class=\"w\">        </span><span class=\"n\">SignedGreaterThanOrEqual</span>\n<span class=\"w\">        </span><span class=\"n\">SignedLessThan</span>\n<span class=\"w\">        </span><span class=\"n\">SignedLessThanOrEqual</span>\n<span class=\"w\">        </span><span class=\"n\">UnsignedGreaterThan</span>\n<span class=\"w\">        </span><span class=\"n\">UnsignedGreaterThanOrEqual</span>\n<span class=\"w\">        </span><span class=\"n\">UnsignedLessThan</span>\n<span class=\"w\">        </span><span class=\"n\">UnsignedLessThanOrEqual</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"n\">IntCC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">enum</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">Equal</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x00</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">NotEqual</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x01</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">SignedGreaterThan</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x02</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">SignedGreaterThanOrEqual</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x03</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">SignedLessThan</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x04</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">SignedLessThanOrEqual</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x05</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">UnsignedGreaterThan</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x06</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">UnsignedGreaterThanOrEqual</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x07</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">UnsignedLessThan</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x08</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">UnsignedLessThanOrEqual</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x09</span><span class=\"p\">)))</span>\n\n\n<span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bor</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">provide</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvor</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">require</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">bor</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">bor</span><span class=\"w\"> </span><span class=\"n\">bor</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">bor</span><span class=\"w\"> </span><span class=\"n\">bor</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"n\">bor</span><span class=\"w\"> </span><span class=\"n\">bv_ty_binary_8_to_64</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">provide</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvand</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">require</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"n\">band</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"n\">band</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"n\">bv_ty_binary_8_to_64</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bxor</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">provide</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvxor</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">require</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">bxor</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">bxor</span><span class=\"w\"> </span><span class=\"n\">bxor</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">bxor</span><span class=\"w\"> </span><span class=\"n\">bxor</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"n\">bxor</span><span class=\"w\"> </span><span class=\"n\">bv_ty_binary_8_to_64</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sshr</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">provide</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">result</span>\n<span class=\"w\">           </span><span class=\"p\">(</span><span class=\"n\">bvashr</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">                  </span><span class=\"p\">(</span><span class=\"n\">bvand</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">conv_to</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvsub</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int2bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"w\">                                                     </span><span class=\"p\">#</span><span class=\"n\">x0000000000000001</span><span class=\"p\">))</span>\n<span class=\"w\">                         </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">require</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">sshr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">sshr</span><span class=\"w\"> </span><span class=\"n\">sshr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">sshr</span><span class=\"w\"> </span><span class=\"n\">sshr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"n\">sshr</span><span class=\"w\"> </span><span class=\"n\">bv_ty_binary_8_to_64</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ushr</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">provide</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">result</span>\n<span class=\"w\">           </span><span class=\"p\">(</span><span class=\"n\">bvlshr</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">                  </span><span class=\"p\">(</span><span class=\"n\">bvand</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">conv_to</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvsub</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int2bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"w\">                                                     </span><span class=\"p\">#</span><span class=\"n\">x0000000000000001</span><span class=\"p\">))</span>\n<span class=\"w\">                         </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">require</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">ushr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">ushr</span><span class=\"w\"> </span><span class=\"n\">ushr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">ushr</span><span class=\"w\"> </span><span class=\"n\">ushr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"n\">ushr</span><span class=\"w\"> </span><span class=\"n\">bv_ty_binary_8_to_64</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">provide</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvadd</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">require</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">bv_ty_binary_8_to_64</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">isub</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">provide</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvsub</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">require</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">isub</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">isub</span><span class=\"w\"> </span><span class=\"n\">isub</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">isub</span><span class=\"w\"> </span><span class=\"n\">isub</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"n\">isub</span><span class=\"w\"> </span><span class=\"n\">bv_ty_binary_8_to_64</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">provide</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvmul</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">require</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">bv_ty_binary_8_to_64</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iabs</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">provide</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">result</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvsge</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">conv_to</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x0000000000000000</span><span class=\"p\">))</span>\n<span class=\"w\">                    </span><span class=\"n\">x</span>\n<span class=\"w\">                    </span><span class=\"p\">(</span><span class=\"n\">bvneg</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">require</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">iabs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">iabs</span><span class=\"w\"> </span><span class=\"n\">iabs</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">iabs</span><span class=\"w\"> </span><span class=\"n\">iabs</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"n\">iabs</span><span class=\"w\"> </span><span class=\"n\">bv_ty_unary_8_to_64</span><span class=\"p\">)</span>\n\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">:</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">pmod</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">:</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">cdot</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">pmod</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"n\">B</span><span class=\"p\">}.</span>\n<span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ishl</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">provide</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">result</span>\n<span class=\"w\">           </span><span class=\"p\">(</span><span class=\"n\">bvshl</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">                  </span><span class=\"p\">(</span><span class=\"n\">bvand</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">conv_to</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvsub</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int2bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"w\">                                                     </span><span class=\"p\">#</span><span class=\"n\">x0000000000000001</span><span class=\"p\">))</span>\n<span class=\"w\">                         </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">require</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"w\"> </span><span class=\"n\">bv_ty_binary_8_to_64</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">provide</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x00</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">require</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">bv_ty_ternary_8_to_64</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">provide</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">result</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"n\">cc</span>\n<span class=\"w\">                </span><span class=\"p\">((</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">Equal</span><span class=\"p\">)</span><span class=\"w\">                        </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\">       </span><span class=\"p\">#</span><span class=\"n\">x01</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x00</span><span class=\"p\">))</span>\n<span class=\"w\">                </span><span class=\"p\">((</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">NotEqual</span><span class=\"p\">)</span><span class=\"w\">                     </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x01</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x00</span><span class=\"p\">))</span>\n<span class=\"w\">                </span><span class=\"p\">((</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">SignedGreaterThan</span><span class=\"p\">)</span><span class=\"w\">            </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvsgt</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\">   </span><span class=\"p\">#</span><span class=\"n\">x01</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x00</span><span class=\"p\">))</span>\n<span class=\"w\">                </span><span class=\"p\">((</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">SignedGreaterThanOrEqual</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvsge</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\">   </span><span class=\"p\">#</span><span class=\"n\">x01</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x00</span><span class=\"p\">))</span>\n<span class=\"w\">                </span><span class=\"p\">((</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">SignedLessThan</span><span class=\"p\">)</span><span class=\"w\">               </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvslt</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\">   </span><span class=\"p\">#</span><span class=\"n\">x01</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x00</span><span class=\"p\">))</span>\n<span class=\"w\">                </span><span class=\"p\">((</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">SignedLessThanOrEqual</span><span class=\"p\">)</span><span class=\"w\">        </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvsle</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\">   </span><span class=\"p\">#</span><span class=\"n\">x01</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x00</span><span class=\"p\">))</span>\n<span class=\"w\">                </span><span class=\"p\">((</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">UnsignedGreaterThan</span><span class=\"p\">)</span><span class=\"w\">          </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvugt</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\">   </span><span class=\"p\">#</span><span class=\"n\">x01</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x00</span><span class=\"p\">))</span>\n<span class=\"w\">                </span><span class=\"p\">((</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">UnsignedGreaterThanOrEqual</span><span class=\"p\">)</span><span class=\"w\">   </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvuge</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\">   </span><span class=\"p\">#</span><span class=\"n\">x01</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x00</span><span class=\"p\">))</span>\n<span class=\"w\">                </span><span class=\"p\">((</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">UnsignedLessThan</span><span class=\"p\">)</span><span class=\"w\">             </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvult</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\">   </span><span class=\"p\">#</span><span class=\"n\">x01</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x00</span><span class=\"p\">))</span>\n<span class=\"w\">                </span><span class=\"p\">((</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">UnsignedLessThanOrEqual</span><span class=\"p\">)</span><span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvule</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\">   </span><span class=\"p\">#</span><span class=\"n\">x01</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">x00</span><span class=\"p\">)))))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">require</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">or</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">Equal</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">NotEqual</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">UnsignedGreaterThanOrEqual</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">UnsignedGreaterThan</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">UnsignedLessThanOrEqual</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">UnsignedLessThan</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">SignedGreaterThanOrEqual</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">SignedGreaterThan</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">SignedLessThanOrEqual</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">SignedLessThan</span><span class=\"p\">)))))</span>\n\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">IntCC</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"n\">icmp</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">((</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)))</span>\n<span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">provide</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">zero_ext</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">require</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Imm64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"n\">ic</span>\n<span class=\"p\">[</span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"n\">truncated</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 522954279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749370649
    },
    {
        "content": "<p><strong>bongjunj</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979\">PR #10979</a>.</p>",
        "id": 522954280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749370649
    },
    {
        "content": "<p><strong>bongjunj</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979\">PR #10979</a>.</p>",
        "id": 522954281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749370650
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979#issuecomment-2953829215\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979\">PR #10979</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 522966841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749375938
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979#pullrequestreview-2910794542\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! Just a couple minor nitpicks below.</p>\n<p>Out of curiosity, did you find this code pattern in the wild? Synthesize it? Something else?</p>\n</blockquote>",
        "id": 523139499,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749490540
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979#discussion_r2136166856\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you add this summary comment to the ISLE rule? Thanks!</p>\n</blockquote>",
        "id": 523139500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749490540
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979#discussion_r2136162318\">PR review comment</a>:</p>\n<blockquote>\n<p>With this change, the rhs is slightly simpler and we don't need to introduce the new <code>i64_not</code> constructor</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>  (band ty x (iconst ty (imm64_masked ty (u64_not n)))))\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 523139501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749490540
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979#issuecomment-2956475966\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979\">PR #10979</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/15516516108/job/43684140159?pr=10979#step:19:865\">https://github.com/bytecodealliance/wasmtime/actions/runs/15516516108/job/43684140159?pr=10979#step:19:865</a></p>\n<p>Looks like this optimization applied to one of our existing test cases in CI, changing its golden output.</p>\n<p>You can update the output via</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">CRANELIFT_TEST_BLESS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">filetests</span><span class=\"o\">/</span><span class=\"n\">filetests</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">x64</span><span class=\"o\">/</span><span class=\"n\">stack_switch</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<p>And then commit that test expectation update and include it in this PR.</p>\n</blockquote>",
        "id": 523139793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749490684
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979#discussion_r2136162318\">PR review comment</a>.</p>",
        "id": 523140070,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749490824
    },
    {
        "content": "<p>bongjunj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979\">PR #10979</a>.</p>",
        "id": 523193426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749519824
    },
    {
        "content": "<p>bongjunj <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979#issuecomment-2957456765\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979\">PR #10979</a>:</p>\n<blockquote>\n<p>Hi, thanks for the comment.</p>\n<ol>\n<li>I added the summary to the ISLE rule,</li>\n<li>and updated the expected output as you mentioned.</li>\n</ol>\n<p>Actually I'm collecting these code patterns from LLVM using some kind of synthesizer.</p>\n</blockquote>",
        "id": 523193657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749520014
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979#pullrequestreview-2914496764\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 523340084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749576792
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979#issuecomment-2960145641\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979\">PR #10979</a>:</p>\n<blockquote>\n<blockquote>\n<p>Actually I'm collecting these code patterns from LLVM using some kind of synthesizer.</p>\n</blockquote>\n<p>Nice! I'd love to hear a little more about this. Are you harvesting LHSes via LLVM and then synthesizing RHSes directly for ISLE? Or synthesizing RHSes for LLVM and porting them to ISLE? Are you using Souper or a different synthesizer?</p>\n<hr>\n<p>FWIW, we have some Souper-synthesized rules that we haven't completed landing (mostly because I don't have time) over in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5783\">https://github.com/bytecodealliance/wasmtime/issues/5783</a></p>\n<p>And we also have some infrastructure for harvesting Souper LHSes from CLIF input. The following command will harvest LHSes from the <code>path/to/input.clif</code> file and write each of them into the <code>path/to/left-hand-sides</code> directory:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>cargo<span class=\"w\"> </span>run<span class=\"w\"> </span>-p<span class=\"w\"> </span>cranelift-tools<span class=\"w\"> </span>--<span class=\"w\"> </span>souper-harvest<span class=\"w\"> </span>path/to/input.clif<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>-o<span class=\"w\"> </span>path/to/left-hand-sides\n</code></pre></div>\n<p>And then we also have a helper script to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/run-souper.sh\">run Souper</a>. This will take those harvested LHSes from the previous step and run Souper on each of them. For each RHS that it finds, it will write a <code>$LHS.result</code> file next to the <code>$LHS</code> file:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>./cranelift/run-souper.sh<span class=\"w\"> </span>path/to/souper-check<span class=\"w\"> </span>path/to/left-hand-sides\n</code></pre></div>\n<p>As far as getting the initial CLIF input goes for the above commands, Wasmtime has a <code>--emit-clif</code> option you can use. The following will write a <code>.clif</code> file into <code>path/to/output/dir</code> for each function inside the Wasm module:</p>\n<p><div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>wasmtime<span class=\"w\"> </span>compile<span class=\"w\"> </span>path/to/module.wasm<span class=\"w\"> </span>--emit-clif<span class=\"w\"> </span>path/to/output/dir\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 523342773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749577873
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979\">PR #10979</a>.</p>",
        "id": 523343100,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749578019
    },
    {
        "content": "<p>bongjunj <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979#issuecomment-2969801677\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979\">PR #10979</a>:</p>\n<blockquote>\n<p>My synthesizer construct the LHS and RHS from the input and the output programs of LLVM optimizers. Most of the job is done by deterministic mapping from LLVM opcode to Cranelift ones. But the remaining part of synthesizing relationships among constants is the problem Im solving.</p>\n<p>Thanks for the idea using souper. I will take a look into that.</p>\n</blockquote>",
        "id": 523911811,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749808640
    }
]