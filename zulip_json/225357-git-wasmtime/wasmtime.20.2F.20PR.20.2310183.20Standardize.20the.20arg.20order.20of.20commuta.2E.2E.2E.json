[
    {
        "content": "<p>erikrose opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10183\">PR #10183</a> from <code>erikrose:canonical-gvn</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This stands on the shoulders of #6135 but reorders only while computing GVN map lookup keys. It doesn't affect the codegenned instructions themselves, which will hopefully dodge the performance regression that led to that PR's reversion.</p>\n</blockquote>",
        "id": 497725961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738692049
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10183#issuecomment-2634708140\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10183\">PR #10183</a>:</p>\n<blockquote>\n<p>@erikrose interesting, thanks for this PR. I'm curious if you've observed a benefit (e.g. on our Sightglass suite) in runtime, and also what the impact on compile time is?</p>\n<p>My general thought is I'm a little leery of adding extra magic to the egraph optimizer -- it's already a carefully-tuned combo stage of all of the core optimizations, and I'd rather make it simpler than more complex, all other things being equal -- but we can certainly think about ways to clean this up if it shows a benefit.</p>\n</blockquote>",
        "id": 497727298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738692458
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10183#issuecomment-2634787138\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10183\">PR #10183</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 497733576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738694774
    },
    {
        "content": "<p>erikrose <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10183#issuecomment-2635066179\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10183\">PR #10183</a>:</p>\n<blockquote>\n<p>Yes, this is definitely a drafty draft at the moment (hence the Draft classification!). :-) Dan thought it would be a good acclimatization task for me, and indeed, it was a great tour of many parts of Cranelift. It seems like it can also grant me a good little tour of Sightglass, and then we'll see if it's worth pursuing further. Thanks for having a look!</p>\n</blockquote>",
        "id": 497755569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738702853
    },
    {
        "content": "<p>erikrose updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10183\">PR #10183</a>.</p>",
        "id": 497978795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738787936
    },
    {
        "content": "<p>erikrose closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10183\">PR #10183</a>.</p>",
        "id": 498224315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738881751
    },
    {
        "content": "<p>erikrose <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10183#issuecomment-2641288304\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10183\">PR #10183</a>:</p>\n<blockquote>\n<p>I benched this patch last night (and it took all night, because I ran the whole \"all\" suite). It didn't have a huge impact on execution speed either way: 7 benchmarks were faster, 9 slower, and 94 no-difference. Caveats: I ran this on macOS, so it's ARM-only and cycle-count-onlyâ€”no perf counters. Here are the trimmed-down results, to get a sense of impact:</p>\n<p>Ones where the PR was faster than <code>main</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.03</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n<span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n<span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n<span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n<span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n<span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n<span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>Ones where the PR was slower:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.05</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n<span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.04</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n<span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n<span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.04</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n<span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n<span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n<span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n<span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n<span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime_main</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>I expect most of the suite, embodied in .wasm files, already made a trip through LLVM's optimization pipeline and thus had all the GVN opportunities used up already. It may be worth waking this up again if ever we encounter a use case where that's not true. In the meantime, I'll close this. Here are the full benchmark results for posterity: <a href=\"https://github.com/user-attachments/files/18698493/Full.Sightglass.Results.txt\">Full Sightglass Results.txt</a>.</p>\n<p>If we ever pick it up again, I wouldâ€¦</p>\n<ul>\n<li>[ ] Push GVN key generation to someplace where we don't have to look at it in the main egraph loop: perhaps in the GVN hash itself.</li>\n<li>[ ] Remove the <code>IntCompare</code> and <code>FloatCompare</code> <code>==</code> arms of the <code>match</code>, since they'd be more at home as ISLE rules (and are probably already implemented as such).<br>\n</li>\n</ul>\n</blockquote>",
        "id": 498224317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738881751
    }
]