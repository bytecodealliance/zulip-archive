[
    {
        "content": "<p>adv-sw edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11849\">issue #11849</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Could build the host project in here, but it's not necessary - issue is build system missing an entry.<br>\n<a href=\"http://advance-software.com/misc/test_breakpoint.zip\">http://advance-software.com/misc/test_breakpoint.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Pull clear tree or delete target directory from your current one.<br>\ncargo build -p wasmtime-c-api --release</p>\n<h3>Expected Results</h3>\n<p>wasm C API apps build</p>\n<h3>Actual Results</h3>\n<p>wasmtime\\crates\\c-api\\include\\wasi.h(12,10): error C1083: Cannot open include file: 'wasmtime/conf.h': No such file or directory</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: trunk</p>\n<p>Operating system: Windows</p>\n<p>Architecture: x86-64</p>\n<h3>Extra Info</h3>\n<p>Anything else you'd like to add?</p>\n<p>Expect this is generated correctly when cmake is used as <a href=\"http://conf.h.in\">conf.h.in</a> file is present.</p>\n</blockquote>",
        "id": 544693856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760432143
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11849\">issue #11849</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Could build the host project in here, but it's not necessary - issue is build system missing an entry.<br>\n<a href=\"http://advance-software.com/misc/test_breakpoint.zip\">http://advance-software.com/misc/test_breakpoint.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Pull clear tree or delete target directory from your current one.<br>\ncargo build -p wasmtime-c-api --release</p>\n<h3>Expected Results</h3>\n<p>wasm C API apps build</p>\n<h3>Actual Results</h3>\n<p>wasmtime\\crates\\c-api\\include\\wasi.h(12,10): error C1083: Cannot open include file: 'wasmtime/conf.h': No such file or directory</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: trunk</p>\n<p>Operating system: Windows</p>\n<p>Architecture: x86-64</p>\n<h3>Extra Info</h3>\n<p>Anything else you'd like to add?</p>\n<p>Expect this is generated correctly when cmake is used as <a href=\"http://conf.h.in\">conf.h.in</a> file is present.</p>\n</blockquote>",
        "id": 544795473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760459806
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11849#issuecomment-3402745266\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11849\">issue #11849</a>:</p>\n<blockquote>\n<p>Please see the documentation <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/c-api/README.md#building-wasmtimes-cc-api-from-source\">here</a> in the README for c-api, which is also linked from our <a href=\"https://docs.wasmtime.dev/contributing-building.html\">documentation on building Wasmtime</a>:</p>\n<blockquote>\n<p>To use Wasmtime from a C or C++ project, you must have <a href=\"https://cmake.org/\">CMake</a> and <a href=\"https://www.rust-lang.org/tools/install\">a Rust toolchain</a> installed.</p>\n<p>From the root of the Wasmtime repository, run the following commands:<br>\n<code>\n$ cmake -S crates/c-api -B target/c-api --install-prefix \"$(pwd)/artifacts\"\n$ cmake --build target/c-api\n$ cmake --install target/c-api\n</code></p>\n</blockquote>\n<p>In other words, using the C API requires building with CMake. Thus, this is working as intended, and I will close the issue.<br>\n</p>\n</blockquote>",
        "id": 544795475,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760459807
    },
    {
        "content": "<p>adv-sw <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11849#issuecomment-3403222053\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11849\">issue #11849</a>:</p>\n<blockquote>\n<p>Seems unnecessarily complex. cmake to convert a whole 1 header file which could just be shipped as is with sensible defaults.</p>\n</blockquote>",
        "id": 544819387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760468885
    },
    {
        "content": "<p>adv-sw edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11849#issuecomment-3403222053\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11849\">issue #11849</a>:</p>\n<blockquote>\n<p>Seems unnecessarily complex. cmake to convert a whole 1 header file which could just be shipped as is with sensible defaults.</p>\n<p>from the root : cargo build -p wasmtime-c-api</p>\n<p>works fine with the exception of that one header file.</p>\n</blockquote>",
        "id": 544819955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760469140
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11849#issuecomment-3403238867\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11849\">issue #11849</a>:</p>\n<blockquote>\n<p>Cmake isn't just used for the header file, but also to build a proper C dynamic library with rpath on ELF, correct install name on macOS, and in case of building it a static library it helps with telling the linker to link all necessary system libraries. </p>\n</blockquote>",
        "id": 544820250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760469245
    },
    {
        "content": "<p>adv-sw <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11849#issuecomment-3403274232\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11849\">issue #11849</a>:</p>\n<blockquote>\n<p>thanks bjorn3, so how to build static lib the official way, please. we digress, but essentially this is the how to build c-api properly issue.</p>\n<p>Docs state : </p>\n<p>These commands will produce the following files:<br>\n    artifacts/lib/libwasmtime.{a,lib}: Static Wasmtime library. Exact extension depends on your operating system.<br>\n    artifacts/lib/libwasmtime.{so,dylib,dll}: Dynamic Wasmtime library. Exact extension depends on your operating system.<br>\n    artifacts/include/**.{h,hh}: Header files for working with Wasmtime.</p>\n<p>On Windows, we get wasmtime.lib (static) or wasmtime.dll &amp; wasmtime.dll.lib (dynamic)<br>\ndepending on whether building statically or dynamically.</p>\n<p>I figured out to build static by setting these env vars before building but unsure that's the official way or even if complete.<br>\nset WASMTIME_STATIC_LIB=1<br>\nset WASMTIME_STATIC=1</p>\n</blockquote>",
        "id": 544821549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760469763
    }
]