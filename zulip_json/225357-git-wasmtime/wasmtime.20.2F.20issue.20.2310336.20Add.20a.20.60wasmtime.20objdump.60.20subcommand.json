[
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10336\">Issue #10336</a>.</p>",
        "id": 503580161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741194781
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10336\">issue #10336</a>:</p>\n<blockquote>\n<p>We talked about this in today's Cranelift meeting but I wanted to write down an issue for this idea. The basic idea is that we have <code>*.cwasm</code> files which have binary tables/metadata in various sections, and we only have <code>objdump -S</code> today to look at the <code>.text</code> section. Otherwise most of our other sections are not easily debuggable. Most sections, however, have something to do with the <code>.text</code> section, so it'd be great to be able to debug all these at the same time.</p>\n<p>The general idea is to do something roughly along these lines:</p>\n<ul>\n<li>Add a new subcommand, <code>wasmtime objdump</code>, that takes a <code>*.cwasm</code> file as input.</li>\n<li>This primarily either use Capstone to disassemble the <code>.text</code> section or invokes <code>llvm-objdump</code> or <code>objdump</code> or similar. My preference would be to use Capstone to have deterministic output regardless of what's installed on the system.</li>\n<li>Disasembly would then be printed in a manner similar to <code>objdump -S</code>, one line per instructions. The main difference is that we would weave debug views of other tables at the same time.</li>\n<li>For example<code>.wasmtime.traps</code> would be interleaved as <code>;; trap = CODE</code> after each instruction</li>\n<li>Another example is <code>.wasmtime.addrmap</code> would ineterleave <code>;; @0x0FF537</code> to show where the instruction maps back to the original binary location.</li>\n<li>The reach goal would be to integrate both stack maps and exception tables from the exception-handling proposal into this view as well. That'd ideally make it much easier to view and debug issues with stack maps and exception tables.</li>\n</ul>\n<p>Ideally this view would then be used for all <code>disas</code> tests instead of today's \"just use capstone\". We could then add various <code>--flags</code> to this subcommand to customize exactly what's disassembled (everything? just stack maps? nothing?) along with other options like \"print the instruction bytes\" etc</p>\n</blockquote>",
        "id": 503580162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741194781
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10336#issuecomment-2701594386\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10336\">issue #10336</a>:</p>\n<blockquote>\n<p>One more thought: once we do this, then one of the main reasons for our continued use of actual ELF as an on-disk container format -- convenient use of other tools like <code>objdump</code> -- goes away. We've had various user questions and confusion over the years that result from our use of ELF -- superficially it looks like Wasmtime AOT compilation produces \"just an object/executable\" that can be linked in to another program, or run on its own. In order to avoid that confusion, maybe it makes sense to switch to something not-quite-ELF. My favorite idea so far is to switch the magic from <code>\\x7FELF</code> to <code>WELF</code> (\"Wasm ELF\"). (To evaluate: does this impact gdb or perf's implicit understanding of the image mapped in? If so, probably not worth it.)</p>\n</blockquote>",
        "id": 503582565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741195303
    },
    {
        "content": "<p>SingleAccretion <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10336#issuecomment-2701622397\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10336\">issue #10336</a>:</p>\n<blockquote>\n<blockquote>\n<p>To evaluate: does this impact gdb or perf's implicit understanding of the image mapped in? If so, probably not worth it</p>\n</blockquote>\n<p>It would definitely impact LLDB's ability to understand the registered \"JIT images\", unless we give up on the opportunity to use mapped memory as-is (it is currently being copied, so it's not a problem to mutate the header in the copy, but this copy should ideally be unnecessary).</p>\n<p>Besides <code>objdump</code>, there is also <code>[llvm-]dwarfdump</code>.</p>\n</blockquote>",
        "id": 503585793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741196002
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10336#issuecomment-2701709895\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10336\">issue #10336</a>:</p>\n<blockquote>\n<p>While a niche use case I do think this would affect <code>perf</code>, specifically in the case where <code>deserialize_file</code> is used to map <code>*.cwasm</code> from disk into the address space that works as-is with <code>perf</code> surprisingly well (I think because it looks like a dlopen'd library). I suspect if we changed the header <code>perf</code> would stop using it by deafult and such frames would turn into <code>[unknown]</code>. The other \"niche\" part of this use case is that perf-based integration in Wasmtime requires that <code>perf</code> is recording before the module is compiled,  so if you attach <code>perf</code> to a process after-the-fact the <code>perf</code> integration of Wasmtime doesn't work. </p>\n<p>Basically tl;dr; I do think that changing away from ELF entirely would break <code>perf</code>-attach-to-preexisting process.</p>\n</blockquote>",
        "id": 503595166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741198312
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10336#issuecomment-2704554821\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10336\">issue #10336</a>:</p>\n<blockquote>\n<p>We could have a Wasm module that has one custom section whose contents are the existing ELF <code>.cwasm</code>s, and then when we map it, we map only the custom section. I think that gives us both our existing mappability and hides that we are internally using ELF from unsuspecting users.</p>\n<p>Whether that is worth the trouble, however...</p>\n</blockquote>",
        "id": 503855202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741283539
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10336#issuecomment-2704680266\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10336\">issue #10336</a>:</p>\n<blockquote>\n<p>Oh that's a good point that the container-on-disk doesn't have to be what we map-in-process, it's always possible to map a subset of the container. I'll note though that the offset has to be page-aligned which means on aarch64 the container has to be at least 64k large to accomodate all page sizes which is relatively hefty to add to all files...</p>\n<p>Personally I like having a native object for debugging purposes still in the sense that even if we have <code>wasmtime objdump</code> sometimes it's just more convenient to use native tooling (e.g. <code>llvm-objdump</code> might support more RISC-V instructions than Capstone)</p>\n</blockquote>",
        "id": 503866944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741287064
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10336#issuecomment-2704683396\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10336\">issue #10336</a>:</p>\n<blockquote>\n<p>Yeah, it doesn't seem worth it given all that; trying to solve a social/docs/support problem with a technical solution. Nevermind the diversion, back to the primary topic of building this tool!</p>\n</blockquote>",
        "id": 503867232,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741287159
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10336\">issue #10336</a>:</p>\n<blockquote>\n<p>We talked about this in today's Cranelift meeting but I wanted to write down an issue for this idea. The basic idea is that we have <code>*.cwasm</code> files which have binary tables/metadata in various sections, and we only have <code>objdump -S</code> today to look at the <code>.text</code> section. Otherwise most of our other sections are not easily debuggable. Most sections, however, have something to do with the <code>.text</code> section, so it'd be great to be able to debug all these at the same time.</p>\n<p>The general idea is to do something roughly along these lines:</p>\n<ul>\n<li>Add a new subcommand, <code>wasmtime objdump</code>, that takes a <code>*.cwasm</code> file as input.</li>\n<li>This primarily either use Capstone to disassemble the <code>.text</code> section or invokes <code>llvm-objdump</code> or <code>objdump</code> or similar. My preference would be to use Capstone to have deterministic output regardless of what's installed on the system.</li>\n<li>Disasembly would then be printed in a manner similar to <code>objdump -S</code>, one line per instructions. The main difference is that we would weave debug views of other tables at the same time.</li>\n<li>For example<code>.wasmtime.traps</code> would be interleaved as <code>;; trap = CODE</code> after each instruction</li>\n<li>Another example is <code>.wasmtime.addrmap</code> would ineterleave <code>;; @0x0FF537</code> to show where the instruction maps back to the original binary location.</li>\n<li>The reach goal would be to integrate both stack maps and exception tables from the exception-handling proposal into this view as well. That'd ideally make it much easier to view and debug issues with stack maps and exception tables.</li>\n</ul>\n<p>Ideally this view would then be used for all <code>disas</code> tests instead of today's \"just use capstone\". We could then add various <code>--flags</code> to this subcommand to customize exactly what's disassembled (everything? just stack maps? nothing?) along with other options like \"print the instruction bytes\" etc</p>\n</blockquote>",
        "id": 507061603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1742499909
    }
]