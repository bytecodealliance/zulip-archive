[
    {
        "content": "<p>pnodet opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11608\">PR #11608</a> from <code>pnodet:pnodet-11</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Reduce frame size from 16 to 8 bytes for functions that only make tail calls (FunctionCalls::TailOnly). This optimization:</p>\n</blockquote>",
        "id": 537762828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757023696
    },
    {
        "content": "<p>pnodet <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11608#issuecomment-3255964925\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11608\">PR #11608</a>:</p>\n<blockquote>\n<p>@cfallin What do you think of something like this? I only looked into aarch64 for the moment since other ISAs such as x64 s390x looks quite different and more complex to implement.</p>\n</blockquote>",
        "id": 537763142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757023869
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11608#issuecomment-3255965404\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11608\">PR #11608</a>:</p>\n<blockquote>\n<p>Unfortunately I don't think this is going to work: the stack pointer has to be 16-aligned, and aarch64 will actually trap if memory accesses occur with a misaligned SP.</p>\n<p>Furthermore the savings I would expect is not \"only push FP, not LR\", but \"don't push anything at all if the frame is zero-size\". This should be the case for tail-calling functions with. no stack storage (spillslots, stackslots or clobbers) and no outgoing argument space.</p>\n</blockquote>",
        "id": 537763152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757023876
    },
    {
        "content": "<p>pnodet <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11608#issuecomment-3256028604\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11608\">PR #11608</a>:</p>\n<blockquote>\n<p>Don't debuggers rely on frame pointers for stack traces? Could setting the frame size to 0 hurt debugging/unwinding?</p>\n</blockquote>",
        "id": 537764632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757024779
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11608#issuecomment-3256052244\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11608\">PR #11608</a>:</p>\n<blockquote>\n<p>Debuggers and profilers should handle missing stack frames for leaf functions already. And besides debuggers actually generally use .eh_frame for stack unwinding, only falling back to frame pointers when .eh_frame is not available.</p>\n</blockquote>",
        "id": 537765285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757025134
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11608#issuecomment-3256073559\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11608\">PR #11608</a>:</p>\n<blockquote>\n<p>Right -- we already omit frame pointers for functions that are truly leaf functions (no calls at all, with no frame storage); this is a common optimization.</p>\n<p>In Wasmtime, where we use our own stack-walking logic and unwinder and want simplicity/robustness, we configure Cranelift never to omit frame pointers; so this optimization largely applies to other uses of Cranelift, like bjorn3's <code>cg_clif</code>.</p>\n</blockquote>",
        "id": 537765754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757025438
    },
    {
        "content": "<p>pnodet <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11608#issuecomment-3256105882\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11608\">PR #11608</a>:</p>\n<blockquote>\n<p>Then could it be safe to have something like this?</p>\n<p><div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span>       // Compute linkage frame size.\n<span class=\"w\"> </span>       let setup_area_size = if flags.preserve_frame_pointers()\n<span class=\"w\"> </span>           // The function arguments that are passed on the stack are addressed\n<span class=\"w\"> </span>           // relative to the Frame Pointer.\n<span class=\"w\"> </span>           || flags.unwind_info()\n<span class=\"w\"> </span>           || incoming_args_size &gt; 0\n<span class=\"w\"> </span>           || clobber_size &gt; 0\n<span class=\"w\"> </span>           || fixed_frame_storage_size &gt; 0\n<span class=\"w\"> </span>       {\n<span class=\"w\"> </span>           16 // FP, LR\n<span class=\"w\"> </span>       } else {\n<span class=\"w\"> </span>           match function_calls {\n<span class=\"w\"> </span>               FunctionCalls::Regular =&gt; 16,\n<span class=\"w\"> </span>               FunctionCalls::None =&gt; 0,\n<span class=\"gd\">-               FunctionCalls::TailOnly =&gt; 8,</span>\n<span class=\"gi\">+               FunctionCalls::TailOnly =&gt; 0,</span>\n<span class=\"w\"> </span>           }\n<span class=\"w\"> </span>       };\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 537766418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757025917
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11608#issuecomment-3256157619\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11608\">PR #11608</a>:</p>\n<blockquote>\n<p>I think you'll want to check the tail args and outgoing args size as well (the other parameters to <code>compute_frame_layout</code>) -- basically, if any part of the frame needs to exist, then we need to do the FP setup even if we only have tail calls.</p>\n</blockquote>",
        "id": 537767626,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757026773
    }
]