[
    {
        "content": "<p><a href=\"https://github.com/justingaffney\">justingaffney</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219\">Issue #10219</a>.</p>",
        "id": 498978765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739270685
    },
    {
        "content": "<p>justingaffney opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219\">issue #10219</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Clone example repo here: <a href=\"https://github.com/justingaffney/wasmtime-run-twice-error\">https://github.com/justingaffney/wasmtime-run-twice-error</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Build component<ul>\n<li><code>cd guest</code></li>\n<li><code>cargo component build --release</code></li>\n</ul>\n</li>\n<li>Run host<ul>\n<li><code>cd ../host</code></li>\n<li><code>cargo run</code></li>\n</ul>\n</li>\n</ul>\n<h3>Expected Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Calling</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">time</span>\n<span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span>\n<span class=\"n\">Calling</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">second</span><span class=\"w\"> </span><span class=\"n\">time</span>\n<span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span>\n</code></pre></div>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Calling</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">time</span>\n<span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span>\n<span class=\"n\">Calling</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">second</span><span class=\"w\"> </span><span class=\"n\">time</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">41</span><span class=\"p\">:</span><span class=\"mi\">35</span><span class=\"p\">:</span>\n<span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"mh\">0xab2</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0xbca0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">adapter</span><span class=\"p\">:</span><span class=\"nc\">wasi_snapshot_preview1</span><span class=\"o\">!</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">run</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">#</span><span class=\"n\">run</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">unreachable</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">executed</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 29.0.1</p>\n<p>Operating system: Windows 11</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>Not sure if calling the <code>wasi:cli/run@0.2.0#run</code> function multiple times on the same component instance is supposed to work or not, but it is not clear from the error whether this behaviour is expected or not</p>\n</blockquote>",
        "id": 498978767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739270686
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219#issuecomment-2650444523\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219\">issue #10219</a>:</p>\n<blockquote>\n<p>The wasp1-&gt;wasip2 adapter directly calls the <code>_start</code> method of the inner wasip1 module from it's <code>run</code> function: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/73d6d6b513121cc75bc140dfb081bf4c90d654e2/crates/wasi-preview1-component-adapter/src/lib.rs#L117-L126\">https://github.com/bytecodealliance/wasmtime/blob/73d6d6b513121cc75bc140dfb081bf4c90d654e2/crates/wasi-preview1-component-adapter/src/lib.rs#L117-L126</a></p>\n<p>Wasip1 documents that <code>_start</code> may only be called once: <a href=\"https://github.com/WebAssembly/WASI/blob/main/legacy/application-abi.md#current-unstable-abi\">https://github.com/WebAssembly/WASI/blob/main/legacy/application-abi.md#current-unstable-abi</a></p>\n<blockquote>\n<p>Command instances may assume that they will be called from the environment at most once. Command instances may assume that none of their exports are accessed outside the duration of that call.</p>\n</blockquote>\n<p>Wasi-libc has an explicit check for this which uses <code>__builtin_trap()</code> to abort (lowering to the <code>unreachable</code> wasm instruction): <a href=\"https://github.com/WebAssembly/wasi-libc/blob/e9524a0980b9bb6bb92e87a41ed1055bdda5bb86/libc-bottom-half/crt/crt1-command.c#L12-L31\">https://github.com/WebAssembly/wasi-libc/blob/e9524a0980b9bb6bb92e87a41ed1055bdda5bb86/libc-bottom-half/crt/crt1-command.c#L12-L31</a></p>\n</blockquote>",
        "id": 498979896,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739271070
    },
    {
        "content": "<p>justingaffney <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219#issuecomment-2650536250\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219\">issue #10219</a>:</p>\n<blockquote>\n<p>Thanks for the fast response! Ok makes sense, I'm not clear though on whether going forward that is also the case for wasip2 components that aren't adapting inner wasip1 modules?</p>\n</blockquote>",
        "id": 498986989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739273390
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219#issuecomment-2651258970\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219\">issue #10219</a>:</p>\n<blockquote>\n<p>AFAIK there  aren't clear semantics defined for WASIp2 at this time. The <code>run</code> export is just like any other export and hosts can certainly call it twice (as you're doing here) but whether or not it works is a question beyond the component model which concerns tooling and conventions. My guess though is that conventionally it'll be the same as WASIp1 where if you want to call something twice you probably shouldn't use the <code>main</code> function and should instead use a custom export. </p>\n</blockquote>",
        "id": 499042864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739289638
    },
    {
        "content": "<p>justingaffney <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219#issuecomment-2652662031\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219\">issue #10219</a>:</p>\n<blockquote>\n<p>Ah ok got it, I updated my example repo to add a library package that implements the <code>run</code> export directly, and I can call <code>run</code> on that component multiple times.</p>\n<p>If I am understanding this correctly that is because the inner wasip1 module is now a \"reactor\" module not a \"command\" module, so the component adapter isn't calling <code>_start</code> anymore which would trap if called again? Although it looks like a similar check is made by wasi-libc for <code>_initialize</code> to ensure it is not called more than once, does the wasip1-&gt;wasip2 adapter not need to call <code>_initialize</code>?</p>\n<p>Also I tried creating a component using the <code>main</code> function by building using Rust's <code>wasm32-wasip2</code> target directly, instead of using cargo-component, and I got the same error with <code>wit-component:adapter:wasi_snapshot_preview1!wasi:cli/run@0.2.0#run</code> in the wasm backtrace. I assumed the new <code>wasm32-wasip2</code> target would build a more \"native\" wasip2 component, is it also building a wasip1 inner module and using the wasip1-&gt;wasip2 component adapter like cargo-component does?</p>\n</blockquote>",
        "id": 499148578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739335984
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219#issuecomment-2654686388\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219\">issue #10219</a>:</p>\n<blockquote>\n<p>Long story short: this behavior is down to the toolchain that created the component, not wasmtime, and the toolchain may not change the way this works even if internals were updated to purely use p2 and not p1. This is an area that is not fully fleshed out yet.</p>\n<p>In wasip1 terms, the inner wasip1 module is still a \"command\" - its internal structure assumes, and enforces by trapping in this manner, that it is instantiated and then the exported function is run at most once. Internally, there is a module exporting <code>_start</code>, and then wit-component wrapped that into a component exporting <code>wasi:cli/run@0.2.0#run</code>.</p>\n<p>The <a href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/run.wit#L3\">wasip2 spec</a> doesn't describe that this export may be called at most once. We never carried over the command/reactor distinction into the wit era. De-facto, almost all cli run exports are implemented such that they will trap on a second call to that export on an instance. Any guest using wasi-libc - used by wasi-libc for C/C++ and rustc for Rust, and perhaps by others as well - ends up with that same check that bjorn3 linked to.</p>\n<p>As far as the distinction for \"native\" wasip2 vs p1 is concerned, the runtime doesn't care what the internal modules of a component are as long as the imports and exports conform to the wasip2 interfaces. It hasn't been anyone's priority to finish up the work in wasi-libc, wasi-sdk and rustc to get rid of the wasip1 use and the use of the p1-&gt;p2 adapter to create components. It would be nice for that to happen at some point - it would make binaries smaller, and likely allow for omitting unused import functions and other optimizations - but it hasn't been blocking progress elsewhere and everyone is quite busy, so its been on the backburner for a while.</p>\n<p>As far as the toolchains changing its behavior for the cli command world run functions: I don't know what all of the considerations are there off the top of my head, but I expect one of the biggest is that there is no precedent in POSIX for the <code>main</code> function being entered more than once in the same process, and it would likely cause a lot of existing C/C++ programs to crash or otherwise misbehave. When you're targeting a \"clean slate\" WASI world like wasi:http/proxy, its a lot more reasonable to expect that an export be called multiple times on the same instance, but <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9542\">even that is not straightforward</a>. There is still work to do to flesh out this design space in both the specs, and in implementations.</p>\n</blockquote>",
        "id": 499315018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739389378
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219#issuecomment-2654686388\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219\">issue #10219</a>:</p>\n<blockquote>\n<p>Long story short: this behavior is down to the toolchain that created the component, not wasmtime, and the toolchain may not change the way this works even if internals were updated to purely use p2 and not p1. This is an area that is not fully fleshed out yet.</p>\n<p>In wasip1 terms, the inner wasip1 module is still a \"command\" - its internal structure assumes, and enforces by trapping in this manner, that it is instantiated and then the exported function is run at most once. Internally, there is a module exporting <code>_start</code>, and then wit-component wrapped that into a component exporting <code>wasi:cli/run@0.2.0#run</code>.</p>\n<p>The <a href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/run.wit#L3\">wasip2 spec</a> doesn't describe that this export may be called at most once. We never carried over the command/reactor distinction into the wit era. De-facto, almost all cli run exports are implemented such that they will trap on a second call to that export on an instance. Any guest using wasi-libc - used by wasi-libc for C/C++ and rustc for Rust, I believe Tinygo, and perhaps by others as well - ends up with that same check that bjorn3 linked to.</p>\n<p>As far as the distinction for \"native\" wasip2 vs p1 is concerned, the runtime doesn't care what the internal modules of a component are as long as the imports and exports conform to the wasip2 interfaces. It hasn't been anyone's priority to finish up the work in wasi-libc, wasi-sdk and rustc to get rid of the wasip1 use and the use of the p1-&gt;p2 adapter to create components. It would be nice for that to happen at some point - it would make binaries smaller, and likely allow for omitting unused import functions and other optimizations - but it hasn't been blocking progress elsewhere and everyone is quite busy, so its been on the backburner for a while.</p>\n<p>As far as the toolchains changing its behavior for the cli command world run functions: I don't know what all of the considerations are there off the top of my head, but I expect one of the biggest is that there is no precedent in POSIX for the <code>main</code> function being entered more than once in the same process, and it would likely cause a lot of existing C/C++ programs to crash or otherwise misbehave. When you're targeting a \"clean slate\" WASI world like wasi:http/proxy, its a lot more reasonable to expect that an export be called multiple times on the same instance, but <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9542\">even that is not straightforward</a>. There is still work to do to flesh out this design space in both the specs, and in implementations.</p>\n</blockquote>",
        "id": 499315150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739389428
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219#issuecomment-2654686388\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219\">issue #10219</a>:</p>\n<blockquote>\n<p>Long story short: this behavior is down to the toolchain that created the component, not wasmtime, and the toolchain may not change the way this works even if internals were updated to purely use p2 and not p1. This is an area that is not fully fleshed out yet.</p>\n<p>In wasip1 terms, the inner wasip1 module is still a \"command\" - its internal structure assumes, and enforces by trapping in this manner, that it is instantiated and then the exported function is run at most once. Internally, there is a module exporting <code>_start</code>, and then wit-component wrapped that into a component exporting <code>wasi:cli/run@0.2.0#run</code>.</p>\n<p>The <a href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/run.wit#L3\">wasip2 spec</a> doesn't describe that this export may be called at most once. We never carried over the command/reactor distinction into the wit era. De-facto, almost all cli run exports are implemented such that they will trap on a second call to that export on an instance. Any guest using wasi-libc - used by wasi-libc for C/C++, rustc for Rust, I believe Tinygo, and perhaps by others as well - ends up with that same check that bjorn3 linked to.</p>\n<p>As far as the distinction for \"native\" wasip2 vs p1 is concerned, the runtime doesn't care what the internal modules of a component are as long as the imports and exports conform to the wasip2 interfaces. It hasn't been anyone's priority to finish up the work in wasi-libc, wasi-sdk and rustc to get rid of the wasip1 use and the use of the p1-&gt;p2 adapter to create components. It would be nice for that to happen at some point - it would make binaries smaller, and likely allow for omitting unused import functions and other optimizations - but it hasn't been blocking progress elsewhere and everyone is quite busy, so its been on the backburner for a while.</p>\n<p>As far as the toolchains changing its behavior for the cli command world run functions: I don't know what all of the considerations are there off the top of my head, but I expect one of the biggest is that there is no precedent in POSIX for the <code>main</code> function being entered more than once in the same process, and it would likely cause a lot of existing C/C++ programs to crash or otherwise misbehave. When you're targeting a \"clean slate\" WASI world like wasi:http/proxy, its a lot more reasonable to expect that an export be called multiple times on the same instance, but <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9542\">even that is not straightforward</a>. There is still work to do to flesh out this design space in both the specs, and in implementations.</p>\n</blockquote>",
        "id": 499315243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739389449
    },
    {
        "content": "<p>justingaffney closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219\">issue #10219</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Clone example repo here: <a href=\"https://github.com/justingaffney/wasmtime-run-twice-error\">https://github.com/justingaffney/wasmtime-run-twice-error</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Build component<ul>\n<li><code>cd guest</code></li>\n<li><code>cargo component build --release</code></li>\n</ul>\n</li>\n<li>Run host<ul>\n<li><code>cd ../host</code></li>\n<li><code>cargo run</code></li>\n</ul>\n</li>\n</ul>\n<h3>Expected Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Calling</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">time</span>\n<span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span>\n<span class=\"n\">Calling</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">second</span><span class=\"w\"> </span><span class=\"n\">time</span>\n<span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span>\n</code></pre></div>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Calling</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">time</span>\n<span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span>\n<span class=\"n\">Calling</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">second</span><span class=\"w\"> </span><span class=\"n\">time</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">41</span><span class=\"p\">:</span><span class=\"mi\">35</span><span class=\"p\">:</span>\n<span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"mh\">0xab2</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0xbca0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">adapter</span><span class=\"p\">:</span><span class=\"nc\">wasi_snapshot_preview1</span><span class=\"o\">!</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">run</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">#</span><span class=\"n\">run</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">unreachable</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">executed</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 29.0.1</p>\n<p>Operating system: Windows 11</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>Not sure if calling the <code>wasi:cli/run@0.2.0#run</code> function multiple times on the same component instance is supposed to work or not, but it is not clear from the error whether this behaviour is expected or not</p>\n</blockquote>",
        "id": 499377828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739421344
    },
    {
        "content": "<p>justingaffney <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219#issuecomment-2655457083\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10219\">issue #10219</a>:</p>\n<blockquote>\n<p>Thanks for explaining the relationship between wasip1 modules and wasip2 components, I was a bit confused about how the command/reactor concept fit into the component model since I couldn't find much about it in wasip2 or component model documentation. I don't have any issue with not being able to call the <code>run</code> function more than once but I wasn't sure if that behaviour was expected or not, as you've all explained it really depends on the component itself and the toolchain that built it.</p>\n<p>That issue you linked is very helpful, I am trying to understand component instance reusability and the kinds of assumptions a host can make about reusing an instance, hence why I created this issue. Something like the reuse hint that was mentioned sounds like a good way for a host to generically know whether a component could have its instance reused or not.</p>\n<p>Thanks for all the information!</p>\n</blockquote>",
        "id": 499377829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739421345
    }
]