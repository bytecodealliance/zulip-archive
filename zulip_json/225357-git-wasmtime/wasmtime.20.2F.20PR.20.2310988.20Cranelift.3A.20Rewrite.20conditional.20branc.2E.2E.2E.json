[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10988\">PR #10988</a> from <code>fitzgen:conditional-branch-to-unconditional-trap</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Given this instruction:</p>\n<div class=\"codehilite\" data-code-language=\"clif\"><pre><span></span><code>brif v0, block1, block2\n</code></pre></div>\n<p>If we know that <code>block1</code> does nothing but immediately trap then we can rewrite<br>\nthat <code>brif</code> into the following:</p>\n<div class=\"codehilite\" data-code-language=\"clif\"><pre><span></span><code>trapz v0, &lt;trapcode&gt;\njump block2\n</code></pre></div>\n<p>(And we can do the equivalent with <code>trapz</code> if <code>block2</code> immediately traps).</p>\n<p>This transformation allows for the conditional trap instructions to be GVN'd and<br>\nfor our egraphs mid-end to generally better optimize the program. We<br>\nadditionally have better codegen in our backends for <code>trapz</code> than branches to<br>\nunconditional traps.</p>\n<p>Fixes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10941\">https://github.com/bytecodealliance/wasmtime/issues/10941</a></p>\n</blockquote>",
        "id": 523138463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749490167
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10988\">PR #10988</a>.</p>",
        "id": 523138465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749490167
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10988\">PR #10988</a>.</p>",
        "id": 523138466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749490167
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10988\">PR #10988</a>.</p>",
        "id": 523138467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749490168
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10988\">PR #10988</a>.</p>",
        "id": 523138468,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749490168
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10988#issuecomment-2956496370\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10988\">PR #10988</a>:</p>\n<blockquote>\n<p>Could you detail more why this is part of legalization and not a separate function/pass? It seems a bit odd to me to have this be intertwined with legalization as it's basically not realized to legalization at all and is more of an optimization pass. Was it a compile-speed-related concern?</p>\n<p>Also, do you know why so many tests are changing? Is it also due to the nature of the first commit where it's switching to a backwards walk from a forwards walk which renumbers legalization-produced things which GVN might pick differently between now?</p>\n<blockquote>\n<p>We additionally have better codegen in our backends for trapz than branches to unconditional traps.</p>\n</blockquote>\n<p>FWIW with <code>cold</code> blocks I don't think this is true, I believe if the trapping block is <code>cold</code> the codegen should basically be the same. That being said the GVN point carries this PR alone IMO in terms of motivation.</p>\n</blockquote>",
        "id": 523140844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749491217
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10988#issuecomment-2956521866\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10988\">PR #10988</a>:</p>\n<blockquote>\n<blockquote>\n<p>Could you detail more why this is part of legalization and not a separate function/pass? It seems a bit odd to me to have this be intertwined with legalization as it's basically not realized to legalization at all and is more of an optimization pass. Was it a compile-speed-related concern?</p>\n</blockquote>\n<p>Yes, I did not want to introduce another IR traversal, and would consider that a non-starter for solving this issue. We have in general been trying to remove passes (eg we've talked a lot about how to fuse phi-removal into the egraph pass) rather than add them.</p>\n<p>You can think of legalization as a type of canonicalization, and this PR is canonicalizing conditional-branch-to-unconditional-trap into conditional-trap, if that helps.</p>\n<blockquote>\n<p>Also, do you know why so many tests are changing? Is it also due to the nature of the first commit where it's switching to a backwards walk from a forwards walk which renumbers legalization-produced things which GVN might pick differently between now?</p>\n</blockquote>\n<p>Yes, GVN is a forwards pass will choose the first value it sees as the canonical version. This used to be the legalized value with the lowest number because legalization was also a forwards pass so values at the start of the function would be legalized before those at the end. After the change to legalize in reverse, the legalized values at the end of the function are lower and at the start of the function are higher. So even if the IR is the \"same\" except for value numbers, the value numbers do change in the golden output.</p>\n<blockquote>\n<p>FWIW with <code>cold</code> blocks I don't think this is true, I believe if the trapping block is <code>cold</code> the codegen should basically be the same.</p>\n</blockquote>\n<p>We don't mark any Wasm blocks <code>cold</code> during translation today, so we won't actually get to that scenario. But maybe we should start making translation smarter and marking blocks cold based on heuristics at some point.</p>\n</blockquote>",
        "id": 523142080,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749491758
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10988#pullrequestreview-2910990858\">PR review</a>:</p>\n<blockquote>\n<p>Sounds reasonable to me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 523149891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749495098
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10988\">PR #10988</a>.</p>",
        "id": 523163947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749501447
    }
]