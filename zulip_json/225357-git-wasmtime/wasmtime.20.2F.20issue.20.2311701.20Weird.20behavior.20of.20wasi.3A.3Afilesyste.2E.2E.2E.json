[
    {
        "content": "<p>vigoo opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701\">issue #11701</a>:</p>\n<blockquote>\n<p>I would like to report a very weird issue that I ran into while debugging this through Golem (which uses wasmtime under the hood). Through the investigation I realized that the issue can be reproduced purely with wasmtime, even with the latest published version.</p>\n<p>However, the reproducer is a bit fragile:</p>\n<ul>\n<li>the original issue I was debugging is that for a particular directory structure created within a Rust guest, calling <code>std::fs::remove_dir_all</code> on it ended up in an infinite loop where the Rust standard library seems to continuously creating a read dir iterator, and calling <code>unlike_at</code> and <code>stat_at</code> on the same files.</li>\n<li>slightly modifying the code though (even when I just copy-pasted it into another example component and removed some unused functions!) it turns into failing with (the <code>remove_dir_all</code> call) <code>Directory not empty (os error 55)</code> which is also unexpected, but different</li>\n</ul>\n<p>Even compiling to debug vs release seems to affect which of the above two outcome happens.</p>\n<h3>Test Case</h3>\n<p>I'm attaching a cargo-component crate that is reproducing me both of the above cases with rustc 1.89 and cargo-component 0.21.1.</p>\n<h3>Steps to Reproduce</h3>\n<p>Reproducing the \"error 55\" case with debug build:</p>\n<ul>\n<li>compile to debug: <code>cargo component build</code></li>\n<li>create a temp directory on the host: <code>mkdir tmp</code></li>\n<li>run with <code>wasmtime --invoke 'reproducer()' --dir 'tmp::/' target/wasm32-wasip1/debug/file_service.wasm</code></li>\n</ul>\n<p>Output:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Trying</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">create</span><span class=\"w\"> </span><span class=\"n\">directory</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">py</span><span class=\"o\">/</span><span class=\"n\">modules</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"n\">mytest</span><span class=\"o\">/</span><span class=\"n\">__pycache__</span>\n<span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">creating</span><span class=\"w\"> </span><span class=\"n\">directory</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">py</span><span class=\"o\">/</span><span class=\"n\">modules</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"n\">mytest</span><span class=\"o\">/</span><span class=\"n\">__pycache__</span>\n<span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">files</span>\n<span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"n\">Removing</span><span class=\"w\"> </span><span class=\"n\">all</span>\n<span class=\"n\">print_tree</span><span class=\"w\"> </span><span class=\"s\">\"/tmp/py/modules/0\"</span>\n<span class=\"err\">📁</span><span class=\"w\"> </span><span class=\"n\">mytest</span>\n<span class=\"n\">print_tree</span><span class=\"w\"> </span><span class=\"s\">\"/tmp/py/modules/0/mytest\"</span>\n<span class=\"w\">  </span><span class=\"err\">📄</span><span class=\"w\"> </span><span class=\"n\">__init__</span><span class=\"p\">.</span><span class=\"n\">py</span>\n<span class=\"w\">  </span><span class=\"err\">📁</span><span class=\"w\"> </span><span class=\"n\">__pycache__</span>\n<span class=\"n\">print_tree</span><span class=\"w\"> </span><span class=\"s\">\"/tmp/py/modules/0/mytest/__pycache__\"</span>\n<span class=\"w\">    </span><span class=\"err\">📄</span><span class=\"w\"> </span><span class=\"n\">mymodule</span><span class=\"p\">.</span><span class=\"n\">rustpython</span><span class=\"o\">-</span><span class=\"mf\">01.</span><span class=\"n\">pyc</span>\n<span class=\"w\">    </span><span class=\"err\">📄</span><span class=\"w\"> </span><span class=\"n\">__init__</span><span class=\"p\">.</span><span class=\"n\">rustpython</span><span class=\"o\">-</span><span class=\"mf\">01.</span><span class=\"n\">pyc</span>\n<span class=\"w\">  </span><span class=\"err\">📄</span><span class=\"w\"> </span><span class=\"n\">mymodule</span><span class=\"p\">.</span><span class=\"n\">py</span>\n<span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"s\">\"Directory not empty (os error 55)\"</span><span class=\"p\">)</span>\n<span class=\"p\">()</span>\n</code></pre></div>\n<p>Reproducing the infinite loop with a release build:</p>\n<ul>\n<li>compile to debug: <code>cargo component build --release</code></li>\n<li>create a temp directory on the host: <code>mkdir tmp</code></li>\n<li>run with <code>wasmtime --invoke 'reproducer()' --dir 'tmp::/' target/wasm32-wasip1/release/file_service.wasm</code></li>\n</ul>\n<p>Output:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Trying</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">create</span><span class=\"w\"> </span><span class=\"n\">directory</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">py</span><span class=\"o\">/</span><span class=\"n\">modules</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"n\">mytest</span><span class=\"o\">/</span><span class=\"n\">__pycache__</span>\n<span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">creating</span><span class=\"w\"> </span><span class=\"n\">directory</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">py</span><span class=\"o\">/</span><span class=\"n\">modules</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"n\">mytest</span><span class=\"o\">/</span><span class=\"n\">__pycache__</span>\n<span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">files</span>\n<span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"n\">Removing</span><span class=\"w\"> </span><span class=\"n\">all</span>\n<span class=\"n\">print_tree</span><span class=\"w\"> </span><span class=\"s\">\"/tmp/py/modules/0\"</span>\n<span class=\"err\">📁</span><span class=\"w\"> </span><span class=\"n\">mytest</span>\n<span class=\"n\">print_tree</span><span class=\"w\"> </span><span class=\"s\">\"/tmp/py/modules/0/mytest\"</span>\n<span class=\"w\">  </span><span class=\"err\">📄</span><span class=\"w\"> </span><span class=\"n\">__init__</span><span class=\"p\">.</span><span class=\"n\">py</span>\n<span class=\"w\">  </span><span class=\"err\">📁</span><span class=\"w\"> </span><span class=\"n\">__pycache__</span>\n<span class=\"n\">print_tree</span><span class=\"w\"> </span><span class=\"s\">\"/tmp/py/modules/0/mytest/__pycache__\"</span>\n<span class=\"w\">    </span><span class=\"err\">📄</span><span class=\"w\"> </span><span class=\"n\">mymodule</span><span class=\"p\">.</span><span class=\"n\">rustpython</span><span class=\"o\">-</span><span class=\"mf\">01.</span><span class=\"n\">pyc</span>\n<span class=\"w\">    </span><span class=\"err\">📄</span><span class=\"w\"> </span><span class=\"n\">__init__</span><span class=\"p\">.</span><span class=\"n\">rustpython</span><span class=\"o\">-</span><span class=\"mf\">01.</span><span class=\"n\">pyc</span>\n<span class=\"w\">  </span><span class=\"err\">📄</span><span class=\"w\"> </span><span class=\"n\">mymodule</span><span class=\"p\">.</span><span class=\"n\">py</span>\n</code></pre></div>\n<p>and hanging here.</p>\n<p>Note that even removing things like prints from the code can make it rather fail than hang, so I'm not sure how stable this reproducer is on other machines. <a href=\"http://url\">http://url</a><br>\nAlso the attached code contains many other functions which are used in different tests originally - I left them because removing them made the \"hanging case\" irreproducible for me.</p>\n<p>I can attach the actual two WASMs if it helps.</p>\n<h3>Expected Results</h3>\n<p>The directory structure deleted and the guest returns without error.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version: tried with 33.0.0 (what we use internally) and the latest published (36.0.2)</p>\n<p>Operating system: Darwin Kernel Version 24.6.0<br>\nArchitecture: arm64</p>\n<p><a href=\"https://github.com/user-attachments/files/22362946/reproducer.zip\">reproducer.zip</a></p>\n</blockquote>",
        "id": 539759825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758026940
    },
    {
        "content": "<p><a href=\"https://github.com/vigoo\">vigoo</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701\">Issue #11701</a>.</p>",
        "id": 539759827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758026941
    },
    {
        "content": "<p>vigoo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701#issuecomment-3298639891\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701\">issue #11701</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/user-attachments/files/22363072/file-server-debug.wasm.zip\">file-server-debug.wasm.zip</a><br>\n<a href=\"https://github.com/user-attachments/files/22363071/file-server-release.wasm.zip\">file-server-release.wasm.zip</a></p>\n<p>The WASMs for the above two cases, for me reproducing the two different bad behaviors.</p>\n</blockquote>",
        "id": 539761291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758027309
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701#issuecomment-3299957213\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701\">issue #11701</a>:</p>\n<blockquote>\n<p>Ok this is kind of a wild bug. My understanding at this point is that the true bug lies <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1806c26562ec2eabbf3eaefbe038b75e90f61b59/crates/wasi/src/p1.rs#L1931\">here</a> for the wasip1 target and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1806c26562ec2eabbf3eaefbe038b75e90f61b59/crates/wasi-preview1-component-adapter/src/lib.rs#L1399\">here</a> for the wasip2 target. I cannot yet explain the difference in <code>--debug</code> and <code>--release</code>, nor can I explain why this appears to be platform-specific. Some various learnings otherwise:</p>\n<ul>\n<li>Using your source, or prebuilt modules, I cannot reproduce this on Linux. I can, however, reproduce both with the source and with the modules on macOS (debug errors, release loops).</li>\n<li>Using <a href=\"https://gist.github.com/alexcrichton/c02fe2194d889115f1cce1de95de1511\">this program</a> it passes on native but fails on the wasip1/wasip2 targets.<ul>\n<li>This, however, I can explain. The lines linked above in Wasmtime are to \"blame\" of sorts for this. Effectively what's happening is that every time <code>fd_readdir</code> is called it actually tries to read the whole directory, e.g. we don't keep the stream open or something like that. When this is coupled with <code>d_next</code> or the \"cookie\" it means that what happens is (a) a directory is read and the last entry doesn't fit in the input buffer, (b) the guest deletes some files, (c) the guest requests more files from the directory with the previous <code>d_next</code>, and (d) wasmtime re-reads the directory, this time with fewer files, and skips everything because that's what the \"cookie\" says. Effectively the \"cookie\" is only valid for a single snapshot of directory in time and does not take filesystem modification into account.</li>\n</ul>\n</li>\n<li>Somehow the original components are affected by this <code>fd_readdir</code> behavior. I've patched the Rust standard library to insert a <code>collect::&lt;Vec&lt;_&gt;&gt;()</code> on <a href=\"https://github.com/rust-lang/rust/blob/eec6bd9d69832f57341c6de6a93fa7b9f47e2111/library/std/src/sys/fs/wasi.rs#L851\">this line</a> and with that compiler when I compile from the sources shared here I can't reproduce the bug on macOS. (I could reproduce with a pre-patched libstd, however)</li>\n<li>I feel like I can explain the \"debug mode returns an error\" in the original example now, it's because wasmtime re-reads the whole directory and skips an entry, meaning that the directory truly isn't empty when it's removed.</li>\n<li>For the infinite loop behavior my guess is that there's a bug in the WASIp1-to-WASIp2 adapter. Unfortunately that's notoriously hard to debug so I'm still staring at code.</li>\n</ul>\n<p>In the meantime though, what to do about this? Unfortunately I think we're in a bit of a problematic situation. I'm not sure how to do some sort of host-side change to fix this with the WASIp1 <code>fd_readdir</code> API. That's unfortunately what's required to get fixed here since the Rust standard library is going through WASIp1 for reading directories, which is implemented through the WASIp1-to-WASIp2 adapter. This means we've got the two lines to fix in Wasmtime at the start of this (one in native on in content). The difficulty is that <code>fd_readdir</code>, as specified, would effectively require buffering the entire directory's contents within the WASIp1-to-WASIp2 adapter which we basically can't do since dynamic allocations aren't possible. Without this buffering behavior I don't believe we can implement what's necessary for <code>fd_readdir</code> here which is to read the directory at most once from a continuous stream of entries.</p>\n<p>Well, that's at least as far as I've gotten so far on this.</p>\n</blockquote>",
        "id": 539837324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758048732
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701#issuecomment-3299991847\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701\">issue #11701</a>:</p>\n<blockquote>\n<p>Ok well further staring found <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11702\">https://github.com/bytecodealliance/wasmtime/pull/11702</a> which is the cause of the release-mode-vs-debug-mode difference. With that I'm confident now that the only issue is the broken implementations of <code>fd_readdir</code> in this repo.</p>\n</blockquote>",
        "id": 539839405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758049453
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701#issuecomment-3300088012\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701\">issue #11701</a>:</p>\n<blockquote>\n<p>cc @vados-cosmonic and @sunfishcode I'm curious as co-champions of wasi-filesystem to get your take on this. My question is about WASIp1, which if y'all would rather not care about feel free to ignore this. Specifically the <a href=\"https://docs.rs/wasip1/latest/wasip1/fn.fd_readdir.html\"><code>fd_readdir</code> function</a> -- how should an implementation deal with the fact that between invocations of <code>fd_readdir</code> mutations to the directory might be made? I can personally think of two somewhat-viable paths forward:</p>\n<ul>\n<li>Declare the funtion broken in some \"official\" location and go update callers which might mutate to read the whole directory before mutating. For example motivate a change to the Rust standard library to read the entire directory before mutating it by deleting files in <code>remove_dir_all</code>.</li>\n<li>Implementations would always read at least two entries from the underlying host directory. The <code>d_next</code> of the previous one points to the <code>d_ino</code> of the next entry. That way if an entry is deleted we can in theory still at least resume at the last file read in the directory. Well ok now as I type this out this doesn't handle the case where both files are deleted.</li>\n</ul>\n<p>Hm ok different question: as co-champions of wasi-filesystem how do y'all feel about declaring this API as dead-and-broken? I realize WASIp1 is sort of already in that state but it would be useful to have this on-record somewhere if only in an issue or something like that.</p>\n</blockquote>",
        "id": 539880431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758051299
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasi:impl label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701\">Issue #11701</a>.</p>",
        "id": 539882189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758051933
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701#issuecomment-3300129647\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701\">issue #11701</a>:</p>\n<blockquote>\n<p>@vigoo in the meantime if you're interested in getting this fixed in the near-term I think the quickest fix will be \"don't use <code>std::fs::remove_dir_all</code>\" if that's possible. If that's in the bowels of some other crate you're using, however, the next-quickest fix would be to propose a change to Rust's libstd, but that's a pretty big step down in terms of \"quickest\"</p>\n</blockquote>",
        "id": 539882337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758052012
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701#issuecomment-3300143812\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701\">issue #11701</a>:</p>\n<blockquote>\n<p><code>fd_readdir</code> can be implemented directly in terms of <code>getdents</code> when not using the wasip1 to wasip2 shim, right? The <code>d_off</code> field for <code>getdents</code> is directly equivalent to <code>d_next</code> for <code>fd_readdir</code>. Maybe wasip2 could add a <code>cookie</code> field populated by the <code>d_off</code> field of <code>getdents</code> to <code>directory-entry</code> and then the wasip1 to wasip2 shim can use this <code>cookie</code> field to seek to the right entry in <code>directory-entry-stream</code> rather than using an integer index within the directory as <code>d_next</code>?</p>\n</blockquote>",
        "id": 539883046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758052327
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701#issuecomment-3300143812\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701\">issue #11701</a>:</p>\n<blockquote>\n<p><code>fd_readdir</code> can be implemented directly in terms of <code>getdents</code> when not using the wasip1 to wasip2 shim, right? The <code>d_off</code> field for <code>getdents</code> is directly equivalent to <code>d_next</code> for <code>fd_readdir</code>. Maybe wasip2 could add a <code>cookie</code> field populated by the <code>d_off</code> field of <code>getdents</code> to <code>directory-entry</code> and then the wasip1 to wasip2 shim can use this <code>cookie</code> field to seek to the right entry in <code>directory-entry-stream</code> rather than using an integer index within the directory as <code>d_next</code>? Or maybe the entry name could be hashed and used as cookie as temporary workaround. Would probably cause issue for hash collisions though.</p>\n</blockquote>",
        "id": 539883178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758052392
    },
    {
        "content": "<p>vigoo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701#issuecomment-3300245238\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701\">issue #11701</a>:</p>\n<blockquote>\n<blockquote>\n<p>@vigoo in the meantime if you're interested in getting this fixed in the near-term I think the quickest fix will be \"don't use <code>std::fs::remove_dir_all</code>\" if that's possible. If that's in the bowels of some other crate you're using, however, the next-quickest fix would be to propose a change to Rust's libstd, but that's a pretty big step down in terms of \"quickest\"</p>\n</blockquote>\n<p>Thanks for looking into it so quickly! I did that as a workaround already (not using <code>std::fs::remove_dir_all</code> in that piece of code that triggered my investigation ) although of course I cannot guarantee our users will never use it. </p>\n<p>Most importantly I just wanted to let you know about the issue.</p>\n</blockquote>",
        "id": 539888294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758054401
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701#issuecomment-3300799682\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701\">issue #11701</a>:</p>\n<blockquote>\n<p>@bjorn3 it looks like <code>getdents</code> is Linux-specific which is already one major blocker, but another is that once you've read <code>d_off</code> there's no guarantee the file there isn't deleted. If it's deleted, for example, then the iterator would be truncated without visiting anything else since the next seek wouldn't find anything.</p>\n<p>Effectively the WASIp1 <code>fd_readdir</code> differs from <code>getdents</code> in that it's not stateful where you pass in a <code>cookie</code> and at least my read of it is that you can arbitrarily seek around when reading a directory. With the lack of state, however, it means that we can't maintain a single object on the host that we're following a stream of. I don't know how we can take an arbitrary <code>cookie</code> and seek the actual stream in the face of modifications between calls to <code>fd_readdir</code>. WASIp{2,3} are much easier here since they return a stream/iterator and nothing else -- no seeking allowed.</p>\n</blockquote>",
        "id": 539912313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758069997
    },
    {
        "content": "<p>vados-cosmonic <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701#issuecomment-3303804645\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11701\">issue #11701</a>:</p>\n<blockquote>\n<p>A bit late but with regards to this note:</p>\n<blockquote>\n<p>Hm ok different question: as co-champions of wasi-filesystem how do y'all feel about declaring this API as dead-and-broken? I realize WASIp1 is sort of already in that state but it would be useful to have this on-record somewhere if only in an issue or something like that.</p>\n</blockquote>\n<p>This certainly seems like the right first step -- at the very least this is a big enough footgun that it should be documented <em>somewhere</em>. </p>\n<p>Looking at the P1 interface I can't see a way to solve this that others haven't mentioned already here. One thing that I was thinking about, would it be possible to use some bits of the cookie to store some state?</p>\n</blockquote>",
        "id": 540060637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758127462
    }
]