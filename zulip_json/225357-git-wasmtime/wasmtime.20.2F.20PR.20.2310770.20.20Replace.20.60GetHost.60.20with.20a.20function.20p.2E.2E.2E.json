[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10770\">PR #10770</a> from <code>alexcrichton:has-data</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit is a refactoring to the fundamentals of the <code>bindgen!</code> macro<br>\nand the functions that it generates. Prior to this change the<br>\nfundamental entrypoint generated by <code>bindgen!</code> was a function<br>\n<code>add_to_linker_get_host</code> which takes a value of type <code>G: GetHost</code>. This<br>\n<code>GetHost</code> implementation is effectively an alias for a closure whose<br>\nreturn value is able to close over the parameter given lfietime-wise.</p>\n<p>The <code>GetHost</code> abstraction was added to Wasmtime originally to enable<br>\nusing any type that implements <code>Host</code> traits, not just <code>&amp;mut U</code> as was<br>\noriginally supported. The definition of <code>GetHost</code> was _just_ right to<br>\nenable a type such as <code>MyThing&lt;&amp;mut T&gt;</code> to implement <code>Host</code> and a<br>\nclosure could be provided that could return it. At the time that<br>\n<code>GetHost</code> was added it was known to be problematic from an<br>\nunderstandability point of view, namely:</p>\n<ul>\n<li>It has a non-obvious definition.</li>\n<li>\n<p>It's pretty advanced Rust voodoo to understand what it's actually<br>\n  doing</p>\n</li>\n<li>\n<p>Using <code>GetHost</code> required lots of <code>for&lt;'a&gt; ...</code> in places which is<br>\n  unfamiliar syntax for many.</p>\n</li>\n<li>\n<p><code>GetHost</code> values couldn't be type-erased (e.g. put in a trait object)<br>\n  as we couldn't figure out the lifetime syntax to do so.</p>\n</li>\n</ul>\n<p>Despite these issues it was the only known solution at hand so we landed<br>\nit and kept the previous <code>add_to_linker</code> style (<code>&amp;mut T -&gt; &amp;mut U</code>) as a<br>\nconvenience. While this has worked reasonable well (most folks just try<br>\nto not look at <code>GetHost</code>) it has reached a breaking point in the WASIp3<br>\nwork.</p>\n<p>In the WASIp3 work it's effectively now going to be required that the<br>\n<code>G: GetHost</code> value is packaged up and actually stored inside of<br>\naccessors provided to host functions. This means that <code>GetHost</code> values<br>\nnow need to not only be taken in <code>add_to_linker</code> but additionally<br>\nprovided to the rest of the system through an \"accessor\". This was made<br>\npossible in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10746\">https://github.com/bytecodealliance/wasmtime/pull/10746</a> by moving the <code>GetHost</code> type into Wasmtime itself (as<br>\nopposed to generated code where it lived prior).</p>\n<p>While this worked with WASIp3 and it was possible to plumb <code>G: GetHost</code><br>\nsafely around, this ended up surfacing more issues. Namely all<br>\n\"concurrent\" host functions started getting significantly more<br>\ncomplicated <code>where</code> clauses and type signatures. At the end of the day I<br>\nfelt that we had reached the end of the road to <code>GetHost</code> and wanted to<br>\nsearch for alternatives, hence this change.</p>\n<p>The fundamental purpose of <code>GetHost</code> was to be able to express, in a<br>\ngeneric fashion:</p>\n<ul>\n<li>Give me a closure that takes <code>&amp;mut T</code> and returns <code>D</code>.</li>\n<li>The <code>D</code> type can close over the lifetime in <code>&amp;mut T</code>.</li>\n<li>The <code>D</code> type must implement <code>bindgen!</code>-generated traits.</li>\n</ul>\n<p>A realization I had was that we could model this with a generic<br>\nassociated type in Rust. Rust support for generic associated types is<br>\nrelatively new and not something I've used much before, but it ended up<br>\nbeing a perfect model for this. The definition of the new <code>HasData</code><br>\ntrait is deceptively simple:</p>\n<div class=\"codehilite\"><pre><span></span><code>trait HasData {\n    type Data&lt;&#39;a&gt;;\n}\n</code></pre></div>\n\n<p>What this enables us to do though is to generate <code>add_to_linker</code><br>\nfunctions that look like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn add_to_linker&lt;T, D&gt;(\n    linker: &amp;mut Linker&lt;T&gt;,\n    getter: fn(&amp;mut T) -&gt; D::Data&lt;&#39;_&gt;,\n) -&gt; Result&lt;()&gt;\n  where\n    D: HasData,\n    for&lt;&#39;a&gt; D::Data&lt;&#39;a&gt;: Host;\n</code></pre></div>\n\n<p>This definition here models <code>G: GetHost</code> as a literal function pointer,<br>\nand the ability to close over the <code>&amp;mut T</code> lifetime with type (not just<br>\n<code>&amp;mut U</code>) is expressed through the type constructor <code>type Data&lt;'a&gt;</code>).<br>\nIdeally we could take a generic generic associated type (I'm not even<br>\nsure what to call that), but that's not something Rust has today.</p>\n<p>Overall this felt like a much simpler way of modeling <code>GetHost</code> and its<br>\nrequirements. This plumbed well throughout the WASIp3 work and the<br>\nsignatures for concurrent functions felt much more appropriate in terms<br>\nof complexity after this change. Taking this change to the limit means<br>\nthat <code>GetHost</code> in its entirety could be purged since all usages of it<br>\ncould be replaced with <code>fn(&amp;mut T) -&gt; D::Data&lt;'a&gt;</code>, a hopefully much<br>\nmore understandable type.</p>\n<p>This change is not all rainbows however, there are some gotchas that<br>\nremain:</p>\n<ul>\n<li>\n<p>One is that all <code>add_to_linker</code> generated functions have a <code>D:\n  HasData</code> type parameter. This type parameter cannot be inferred and<br>\n  must always be explicitly specified, and it's not easy to know what to<br>\n  supply here without reading documentation. Actually supplying the type<br>\n  parameter is quite easy once you know what to do (and what to fill<br>\n  in), but it may involve defining a small struct with a custom<br>\n<code>HasData</code> implementation which can be non-obvious.</p>\n</li>\n<li>\n<p>Another is that the <code>G: GetHost</code> value was previously a full Rust<br>\n  closure, but now it's transitioning to a function pointer. This is<br>\n  done in preparation for WASIp3 work where the function needs to be<br>\n  passed around, and doing that behind a generic parameter is more<br>\n  effort than it's worth. This means that embedders relying on the true<br>\n  closure-like nature here will have to update to using a function<br>\n  pointer instead.</p>\n</li>\n<li>\n<p>The function pointer is stored in locations that require <code>'static</code>,<br>\n  and while <code>fn(T)</code> might be expected to be <code>'static</code> regardless of <code>T</code><br>\n  is is, in fact, not. This means that practically <code>add_to_linker</code><br>\n  requires <code>T: 'static</code>. Relative to just before this change this is a<br>\n  possible regression in functionality, but there orthogonal reasons<br>\n  beyond just this that we want to start requiring <code>T: 'static</code> anyway.<br>\n  That means that this isn't actually a regression relative to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10760\">https://github.com/bytecodealliance/wasmtime/pull/10760</a>, a<br>\n  related change.</p>\n</li>\n</ul>\n<p>The first point is partially ameliorated with WASIp3 work insofar that<br>\nthe <code>D</code> type parameter will start serving as a location to specify where<br>\nconcurrent implementations are found. These concurrent methods don't<br>\ntake <code>&amp;mut self</code> but instead are implemented for <code>T: HasData</code> types. In<br>\nthat sense it's more justified to have this weird type parameter, but in<br>\nthe meantime without this support it'll feel a bit odd to have this<br>\nlittle type parameter hanging off the side.</p>\n<p>This change has been integrated into the WASIp3 prototyping repository<br>\nwith success. This has additionally been integrated into the Spin<br>\nembedding which has one of the more complicated reliances on<br>\n<code>*_get_host</code> functions known. Given that it's expected that while this<br>\nis not necessarily a trivial change to rebase over it should at least be<br>\npossible.</p>\n<p>Finally the <code>HasData</code> trait here has been included with what I'm hoping<br>\nis a sufficient amount of documentation to at least give folks a spring<br>\nboard to understand it. If folks have confusion about this <code>D</code> type<br>\nparameter my hope is they'll make their way to <code>HasData</code> which showcases<br>\nvarious patterns for \"librarifying\" host implementations of WIT<br>\ninterfaces. These patterns are all used throughout Wasmtime and WASI<br>\ncurrently in crates and tests and such.</p>\n</blockquote>",
        "id": 517450221,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747034585
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10770\">PR #10770</a>.</p>",
        "id": 517450222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747034585
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10770\">PR #10770</a>.</p>",
        "id": 517450223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747034585
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10770\">PR #10770</a>.</p>",
        "id": 517450224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747034585
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10770#issuecomment-2871204570\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10770\">PR #10770</a>:</p>\n<blockquote>\n<p>cc @lann on this as well as it relates to Spin factors and such</p>\n</blockquote>",
        "id": 517450427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747034645
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10770\">PR #10770</a>.</p>",
        "id": 517466012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747038532
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10770#pullrequestreview-2834783645\">PR review</a>:</p>\n<blockquote>\n<p>Thanks. I greatly prefer this to GetHost. Every time I had to use GetHost I had to look at other use sites and think hard about how to get it right, whereas this is immediately obvious. Also, changing from a closure to a function pointer should hopefully make it more clear that the purpose is projection, rather than causing a side effect, as it has been misused at least once in the past.</p>\n</blockquote>",
        "id": 517682735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747089912
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10770\">PR #10770</a>.</p>",
        "id": 517740395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747114437
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10770\">PR #10770</a>.</p>",
        "id": 517740495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747114471
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10770\">PR #10770</a>.</p>",
        "id": 517744231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747116511
    }
]