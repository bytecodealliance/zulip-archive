[
    {
        "content": "<p>xdlin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262\">issue #10262</a>:</p>\n<blockquote>\n<p>Hi, I got a trouble when calling another async function within WIT async host function because my function depends on a <code>task_local</code> storage which is not <code>Sync</code>, and I found that wit-bindgen generate host function with following signature:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">marker</span><span class=\"p\">::</span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Data</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">host_func</span><span class=\"p\">(</span>\n<span class=\"w\">          </span><span class=\"n\">accessor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Accessor</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"p\">::</span><span class=\"n\">Data</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">          </span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">future</span><span class=\"p\">::</span><span class=\"n\">Future</span><span class=\"o\">&lt;</span>\n<span class=\"w\">          </span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span>\n<span class=\"w\">              </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">          </span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">marker</span><span class=\"p\">::</span><span class=\"nb\">Send</span>\n<span class=\"w\">      </span><span class=\"k\">where</span>\n<span class=\"w\">          </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Is is possible to loose this restriction?</p>\n</blockquote>",
        "id": 500953832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740079395
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262#issuecomment-2672653308\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262\">issue #10262</a>:</p>\n<blockquote>\n<p>Thanks, this is a great question that I've been wrestling with as well so hopefully this explanation helps you and others who run into this.</p>\n<p>The quick answer is: this restriction is not always ideal but its essentially required for Wasmtime to interoperate with the Rust async ecosystem, and lifting it would create considerable difficulty throughout the Wasmtime ecosystem. Its an unfortunate problem I've run into a bunch, especially as I'm currently working on no_std based single-threaded embeddings for wasmtime, but I don't have a satisfactory way to resolve it. If you are using Wasmtime in a single-threaded context, we currently don't have a better answer than to lie to the type system and write <code>unsafe impl Send for MyCtxType {} unsafe impl Sync for MyCtxType {}</code>  for the types you impl <code>Host</code> on, in order to work around this.</p>\n<p>Here's lots more details, possibly more details than you need:</p>\n<p>Wasmtime's <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.async_support\">async support</a> exists so that Wasmtime can be embedded in async Rust applications. While. not all async Rust applications use an executor that requires Futures which are Send, in practice, many of our production users are using the Tokio ecosystem and have a hard requirement on Tokio's multi-threaded scheduling in order to maximize the capacity of their systems.</p>\n<p>Wherever possible, we have kept Wasmtime's interfaces agnostic on requiring Send types. For example, the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html#impl-Store%3CT%3E-1\"><code>Store&lt;T&gt;</code> type is careful to not put any Send constraints on <code>T</code></a> where possible. This lets Rust's type checker determine whether your Store is Send based on whether your T is Send, which is the way things Should Work.</p>\n<p>However, if you use <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html#method.limiter_async\"><code>Store::limiter_async</code></a> you end up with a Send constraint on the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/trait.ResourceLimiterAsync.html\">ResourceLimiterAsync</a> impl - like the Host trait you showed, its an <code>#[async_trait]</code> that sprinkles Send on all of the Futures returned by those methods, which will end up implying Send on everything they capture, which will include Self. This all comes down to what ResourceLimiterAsync is designed to do: it exists to provide a programming hook so that a Wasmtime Store's desire for more memory will await on resources, effectively to give the async runtime the ability to pause a store's execution and resume it, possibly on another thread, when resources are available. Due to the Rust type system we basically had to pick whether to put a Send on ResourceLimiterAsync in order for it to work on multi-threaded Tokio (henceforth I'll refer to this as just Tokio), or else if we left Send off it wouldn't work on Tokio.</p>\n<p>Now, you might point out that, like we sometimes see in the various Rust async ecosystems, there could be a limiter_async_local variant of that method which doesn't have the Send constraint so that users could pick whether they are Send or not. This might be possible, but each case we do this for would increase the complexity of Wasmtime's implementation, and there end up being many such cases all throughout Wasmtime - the ResourceLimiterAsync is just one example. You might also notice things like, hey, over in the plain old synchronous<a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html#method.limiter\"> <code>Store::limiter</code> </a> there's no Send requirements on the <code>ResourceLimiter</code> itself, but there are Send requirements on the <code>impl FnMut(&amp;mut T) -&gt; &amp;mut dyn ResourceLimiter</code> accessor function - if we were to drop that Send constraint there, we would break Rust's ability to make any &lt;T: Send&gt; Store&lt;T&gt; also be Send, so it would require yet more gymnastics, perhaps culminating in breaking it into distinct <code>Store</code> and <code>StoreLocal</code> that differ only in Send constraints. In my opinion, that would be a total mess - it would be much harder for users to understand Wasmtime, and much harder for maintainers to maintain it.</p>\n<p>So, now that I've laid out how Send is infectious in not just the async Wasmtime apis but also in other places, we can generalize that to the futures returned by those Host methods - thats just table stakes for running on an async runtime. When it comes to the constraint put on the type T that impls Host itself (rather than the Futures that methods on T return), that comes down to the the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.ResourceTable.html\">ResourceTable</a> abstraction: any value that the resource table is given ownership of (via <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.ResourceTable.html#method.push\"><code>push</code></a> or the push_child variant) must be Send. ResourceTable is a heterogeneous collection, and in order for ResourceTable to be Send, all of the values it owns are <code>Box&lt;dyn Any + Send&gt;</code>. In practice many of the methods in various Host traits are implemented in such a way that the Future captures an item owned by the ResourceTable.</p>\n<p>I want to conclude that I sympathize with this Send infection making Wasmtime difficult to program with in situations where you cannot, or don't want to, impl Send on the structures interacting with Wasmtime. I'm working directly in those situations, and I don't like that I end up sprinkling <code>/* SAFETY: this is only executed in a single threaded environment */ unsafe impl Send</code> all over my codebase for the <code>T</code> in <code>Store&lt;T&gt;</code> or for anything I put in the <code>ResourceTable</code>. All I can do is apologize that, when I encountered this problem, I went back and worked through the way that dropping that constraint would require all of Wasmtime to contort to permit it, and decided that it simply wasn't worth it.</p>\n<p>At the end of the day, the best answer I have is, this isnt the sort of property that Rust's type system lets us make parametric or truly \"zero cost\" to the programmer, without costs to the wasmtime project that we as maintainers couldn't stomach. So we had to pick one side and live with the fallout. We picked interoperability with Tokio because some important production uses (including me, years ago) demanded it, and that means other users (including me, now) have to unfortunately live with it.</p>\n</blockquote>",
        "id": 500967055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740084725
    },
    {
        "content": "<p>xdlin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262#issuecomment-2672804310\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262\">issue #10262</a>:</p>\n<blockquote>\n<p>Hi @pchickey thanks a lot for your explanation in great details, now I totally understand it, that's the trade-off we have to pay to keep a maintable system, which is fair enough.</p>\n<p>Then I'll try to find some workaround in my own code to make type checker happy </p>\n</blockquote>",
        "id": 500978765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740089445
    },
    {
        "content": "<p>pchickey closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262\">issue #10262</a>:</p>\n<blockquote>\n<p>Hi, I got a trouble when calling another async function within WIT async host function because my function depends on a <code>task_local</code> storage which is not <code>Sync</code>, and I found that wit-bindgen generate host function with following signature:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">marker</span><span class=\"p\">::</span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Data</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">host_func</span><span class=\"p\">(</span>\n<span class=\"w\">          </span><span class=\"n\">accessor</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Accessor</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"p\">::</span><span class=\"n\">Data</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">          </span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">future</span><span class=\"p\">::</span><span class=\"n\">Future</span><span class=\"o\">&lt;</span>\n<span class=\"w\">          </span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span>\n<span class=\"w\">              </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">          </span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">marker</span><span class=\"p\">::</span><span class=\"nb\">Send</span>\n<span class=\"w\">      </span><span class=\"k\">where</span>\n<span class=\"w\">          </span><span class=\"bp\">Self</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Is is possible to loose this restriction?</p>\n</blockquote>",
        "id": 500982857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740091098
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262#issuecomment-2672851496\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262\">issue #10262</a>:</p>\n<blockquote>\n<p>I'll close this but if you or anyone has further questions feel free to continue discussion here.</p>\n</blockquote>",
        "id": 500982858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740091098
    },
    {
        "content": "<p>PureWhiteWu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262#issuecomment-2673346883\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262\">issue #10262</a>:</p>\n<blockquote>\n<p>Hi @pchickey thanks very much for your detailed explanation! I know why <code>Send</code> is required, because tokio multi thread runtime requires <code>Send</code>, but why is <code>Sync</code> also required in the return future of <code>host_func</code>? This will cause things like <code>task_local</code> unable to compile.</p>\n</blockquote>",
        "id": 501016119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740110320
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262#issuecomment-2675110046\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262\">issue #10262</a>:</p>\n<blockquote>\n<p>Sync ends up being a constraint for essentially all of the same reasons that Send does, but I'm not sure that I understand the question. What is task_local and how are you using it that is unable to compile?</p>\n</blockquote>",
        "id": 501150189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740157956
    },
    {
        "content": "<p>PureWhiteWu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262#issuecomment-2675186743\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262\">issue #10262</a>:</p>\n<blockquote>\n<p>For multi-thread runtimes, only <code>Send</code> is required for <code>Future</code> types, so I wonder why is <code>Sync</code> required here for the returned Future of <code>host_func</code>.</p>\n<p>As far as I know, the <code>Future</code> will not be accessed by multi threads at the same time, so it doesn't need <code>Sync</code> here.</p>\n</blockquote>",
        "id": 501156442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740160098
    },
    {
        "content": "<p>PureWhiteWu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262#issuecomment-2675203243\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262\">issue #10262</a>:</p>\n<blockquote>\n<p>And for <code>task_local</code>, this is a mechanism provided by tokio to bind some context to an asynchronous task, similar to synchronous <code>thread_local</code>. Here's the documentation: <a href=\"https://docs.rs/tokio/latest/tokio/macro.task_local.html\">https://docs.rs/tokio/latest/tokio/macro.task_local.html</a>.</p>\n<p><code>task_local</code>'s usage is like <code>thread_local</code>, which needs a <code>RefCell</code> to make it interior mutable. Common examples are like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">task_local</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">CTX</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">CTX</span><span class=\"p\">.</span><span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">RefCell</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Context</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"> </span><span class=\"p\">}).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Because there's a <code>RefCell</code> here, which is not <code>Sync</code>, which will cause the entire <code>Future</code> <code>!Sync</code>. </p>\n</blockquote>",
        "id": 501157950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740160663
    },
    {
        "content": "<p>PureWhiteWu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262#issuecomment-2675186743\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262\">issue #10262</a>:</p>\n<blockquote>\n<p>For multi-thread runtimes, only <code>Send</code> is required for <code>Future</code> types, so I wonder why is <code>Sync</code> required here for the returned Future of <code>host_func</code>.</p>\n<p>As far as I know, the <code>Future</code> will not be accessed by multi threads at the same time, so it doesn't need <code>Sync</code> here. What <code>Future</code>s need is only <code>Send</code>, because it may be send across threads, but will only be executed(polled) on one thread at a moment, since the <code>Future::poll</code> func requires <code>&amp;mut self</code>.</p>\n</blockquote>",
        "id": 501158235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740160780
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262#issuecomment-2679620421\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262\">issue #10262</a>:</p>\n<blockquote>\n<p>The <code>Sync</code> constraint on the future for concurrent functions is a mistake and will get dropped as it's developed. I'll note that the support for concurrent imports is part of the component-model-async work which is not yet complete nor suitable for general-purpose use.</p>\n</blockquote>",
        "id": 501645887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740430373
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262#issuecomment-2679625151\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262\">issue #10262</a>:</p>\n<blockquote>\n<p>I've opened <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/30\">https://github.com/bytecodealliance/wasip3-prototyping/issues/30</a> in the prototyping repo to track this.</p>\n</blockquote>",
        "id": 501646318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740430515
    },
    {
        "content": "<p>xdlin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262#issuecomment-2679959226\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262\">issue #10262</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'll note that the support for concurrent imports is part of the component-model-async work which is not yet complete nor suitable for general-purpose use</p>\n</blockquote>\n<p>@alexcrichton Totally understand, since I'd like to bring the async component model to our own project ASAP which is in early stage too, so I'd like to be deeply invoved in this project and maybe provide some contribution if possible (at least fill some issues) </p>\n<p>And thanks so much for you and all other team members' patience and great support~</p>\n</blockquote>",
        "id": 501676373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740440851
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262#issuecomment-2680324732\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10262\">issue #10262</a>:</p>\n<blockquote>\n<p>Great! For now it's probably best to file issues in the wasip3-prototyping repo and expect anything ranging from segfaults to crashes to misbehaviors to bugs. If you're ok with that though kire-ticking is appreciated!</p>\n</blockquote>",
        "id": 501703714,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740453661
    }
]