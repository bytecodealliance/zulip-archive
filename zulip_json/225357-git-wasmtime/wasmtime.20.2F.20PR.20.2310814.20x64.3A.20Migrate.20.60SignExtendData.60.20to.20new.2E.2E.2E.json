[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10814\">PR #10814</a>.</p>",
        "id": 519382553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747747073
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10814\">PR #10814</a>.</p>",
        "id": 519382555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747747074
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10814\">PR #10814</a> from <code>alexcrichton:migrate-another-instruction</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>I woke up early today and figure how better to start the day than to frob some assembler instructions. I'd never seen the <code>SignExtendData</code> before and it was trickier and more subtle than I thought. The end result of this PR is to remove this pseudo-instruction and replace it with the per-instruction equivalents that it can generate.</p>\n<p>The first thing surprising about this instruction is that the Capstone and Intel names disagree. For example what Intel calls <code>CBW</code> Capstone calls <code>cbtw</code>. This is true for all the various instructions here so the names are all changing subtly.</p>\n<p>The second surprising thing was that the behavior of the instruction depended on the operand size. This instruction was tasked with sign-extending data just before a <code>div</code> instruction which requires the operand to be in <code>AX</code> (sign-extended) for 8-bit division, but otherwise requires <code>DX:AX</code> or wider for wider division. That meant that the 8-bit version of <code>SignExtendData</code> would read <code>AL</code> and write <code>AX</code>, but the wider variants would read <code>AX</code> and write <code>DX</code> for example.</p>\n<p>This involved writing a specialized helper in ISLE for handling the 16-bits-or-higher width and otherwise customizing each of the various cases for 8-bit or wider already in ISLE. Winch received appropriate minor updates as well, and in the end we've now got a few more instructions bound which Cranelift doesn't currently used but should be easier to do so in the future.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 519382557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747747075
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10814#issuecomment-2894710410\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10814\">PR #10814</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:x64\", \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 519405283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747752473
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10814#pullrequestreview-2854762775\">PR review</a>:</p>\n<blockquote>\n<p>This is great! A note on coordination: @rahulchaphalkar is working on comparisons and I have a branch converting all the moves.</p>\n</blockquote>",
        "id": 519421895,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747756506
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10814#discussion_r2098330456\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        // Note that the Intel manual calls has different names for these\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 519421897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747756506
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10814#discussion_r2098328837\">PR review comment</a>:</p>\n<blockquote>\n<p>You found a case where some extra spaces made this not match?</p>\n</blockquote>",
        "id": 519421898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747756507
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10814\">PR #10814</a>.</p>",
        "id": 519424743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747757246
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10814#pullrequestreview-2854823841\">PR review</a>.</p>",
        "id": 519425559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747757473
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10814#discussion_r2098369677\">PR review comment</a>:</p>\n<blockquote>\n<p>The failure I ran into was:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">cwtl</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">implicit</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"w\">  </span><span class=\"n\">debug</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">cwtl_zo</span><span class=\"p\">(</span><span class=\"n\">cwtl_zo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">eax</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Fixed</span><span class=\"p\">(</span><span class=\"n\">FuzzReg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">  </span><span class=\"n\">assembled</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">98</span>\n<span class=\"w\">  </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">capstone</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"nc\">cwtl</span>\n<span class=\"w\">  </span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">to_string</span><span class=\"p\">):</span><span class=\"w\">  </span><span class=\"nc\">cwtl</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">implicit</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span>\n\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">assembler</span><span class=\"o\">-</span><span class=\"n\">x64</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">fuzz</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">:</span>\n<span class=\"nc\">assertion</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n<span class=\"w\">  </span><span class=\"n\">left</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"cwtl \"</span>\n<span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"cwtl  ;; implicit: %eax\"</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>so I think what's happening here may be a bug in Capstone and/or just an artifact of Capstone instructions having no operands?</p>\n</blockquote>",
        "id": 519425560,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747757474
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10814\">PR #10814</a>.</p>",
        "id": 519427672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747758077
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10814\">PR #10814</a>.</p>",
        "id": 519431725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747759313
    }
]