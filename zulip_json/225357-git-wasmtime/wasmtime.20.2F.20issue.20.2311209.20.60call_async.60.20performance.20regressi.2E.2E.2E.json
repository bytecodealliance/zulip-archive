[
    {
        "content": "<p><a href=\"https://github.com/dicej\">dicej</a> added the wasm-proposal:component-model-async label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11209\">Issue #11209</a>.</p>",
        "id": 527963020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752093915
    },
    {
        "content": "<p>dicej opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11209\">issue #11209</a>:</p>\n<blockquote>\n<p>#11127 changes the implementation of <code>[Typed]Func::call_async</code> when the <code>component-model-async</code> feature is enabled, conservatively setting up the state required to handle the Component Model async ABI in case the guest function uses it.  This extra work shows up in microbenchmarks such as <code>async-pool/no-hook/component - host-to-wasm - typed - nop-params-and-results</code>, where we see a 120%-150% regression vs. the original code path.</p>\n<p>Alex and I spent some time looking at the profile, and there was no obvious low-hanging fruit.  The main hotspots appear to be moving large objects in memory, possibly related to <code>wasmtime::runtime::component::concurrent::GuestTask</code> and <code>Future</code>s containing it.</p>\n<p>We should try to improve the existing <code>async-pool/no-hook/component - host-to-wasm - typed - .*</code> benchmarks and also add new ones which actually exercise the async ABI features (e.g. an async-with-callback-lifted export which yields N times before completing).</p>\n</blockquote>",
        "id": 527963021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752093915
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the performance label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11209\">Issue #11209</a>.</p>",
        "id": 527991616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752114658
    }
]