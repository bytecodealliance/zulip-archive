[
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2252\">issue #2252</a>:</p>\n<blockquote>\n<p>As mentioned by @cfallin in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#discussion_r497853577\">https://github.com/bytecodealliance/wasmtime/pull/2248#discussion_r497853577</a>, there is a potential abstraction leak re: <code>Inst</code>. The way I see it, <code>Inst</code> was originally designed to have variants that abstracted common classes of instructions (e.g. <code>div</code>) but eventually grew variants that more closely matched x64 encoding formats (e.g. <code>unary_rm_r</code>). Now <code>Inst</code> contains both kinds--abstract instructions and encoding formats--and this causes confusion (e.g. which format am I supposed to use here? Or is there an instruction that covers this?) and potential bugs (e.g. handing an opcode to a format that should never encode that opcode as @bnjbvr has pointed out). This problem will only be exacerbated by adding other types of encoding formats like VEX and EVEX.</p>\n<p>I see several possible directions:</p>\n<ul>\n<li>refactor <code>Inst</code> to only contain abstract instructions</li>\n<li>refactor <code>Inst</code> to only contain x64 encoding formats and figure out some way to limit opcodes to certain formats (this is tricky because the same opcode can be used in multiple formats)</li>\n<li>refactor <code>Inst</code> to contain only x64 instructions, perhaps parameterized; I have mentioned before that I feel that the level of abstraction for lowering is at the machine code instruction (like in v8)</li>\n</ul>\n<p>Thoughts?</p>\n</blockquote>",
        "id": 536641231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756397325
    }
]