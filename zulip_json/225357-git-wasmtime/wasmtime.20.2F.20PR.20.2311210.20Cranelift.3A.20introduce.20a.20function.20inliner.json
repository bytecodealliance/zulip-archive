[
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210\">PR #11210</a>.</p>",
        "id": 527969119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752096508
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210\">PR #11210</a>.</p>",
        "id": 527969120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752096508
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210\">PR #11210</a> from <code>fitzgen:cranelift-inliner</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This comit adds \"inlining as a library\" to Cranelift; it does _not_ provide a complete, off-the-shelf inlining solution. Cranelift's compilation context is per-function and does not encompass the full call graph. It does not know which functions are hot and which are cold, which have been marked the equivalent of <code>#[inline(always)]</code> versus <code>#[inline(never)]</code>, etc... Only the Cranelift user can understand these aspects of the full compilation pipeline, and these things can be very different between (say) Wasmtime and <code>cg_clif</code>. Therefore, this infrastructure does not attempt to define hueristics for when inlining a particular call is likely beneficial. This module only provides hooks for the Cranelift user to tell Cranelift whether a given call should be inlined or not, and the mechanics to inline a callee into a particular call site when the user directs Cranelift to do so.</p>\n<p>This commit also creates a new kind of filetest that will always inline calls to functions that have already been defined in the file. This lets us exercise the inliner in filetests.</p>\n<p>Fixes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4127\">https://github.com/bytecodealliance/wasmtime/issues/4127</a></p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 527969121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752096508
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210\">PR #11210</a>.</p>",
        "id": 527969214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752096556
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#discussion_r2196037969\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it make sense to provide a <code>Cow&lt;'a, ir::Function&gt;</code> here? I can imagine use-cases that might want to synthesize a body to inline (for example: intrinsics, perhaps even dynamically generated based on parameters) rather than holding ownership of an existing function elsewhere.</p>\n</blockquote>",
        "id": 527973570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752099018
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#discussion_r2196077868\">PR review comment</a>:</p>\n<blockquote>\n<p>This feels like a somewhat error-prone API -- it imposes an ordering requirement (or rather, the first <code>push_catch</code> is not really a catch but the normal return). Perhaps we could have a separate setter for the normal return entry starting from an empty exception table, and then assert here that the normal return is present?</p>\n</blockquote>",
        "id": 527973571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752099018
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#discussion_r2196064128\">PR review comment</a>:</p>\n<blockquote>\n<p>This seems like a reasonable case to optimize here (will be a very frequent case) but it might be worth noting that it could go away, simplifying logic here, if we add a jump-threading optimization pass later...</p>\n</blockquote>",
        "id": 527973572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752099018
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#pullrequestreview-3003186266\">PR review</a>:</p>\n<blockquote>\n<p>This looks great overall -- thanks a bunch for building this and the care taken in handling all the combinations of kinds of calls!</p>\n<p>A few minor thoughts below. <code>vmctx</code> handling in particular is interesting and I'm wondering if we should punt some complexity by leaning on legalization instead; could be convinced either way though.</p>\n</blockquote>",
        "id": 527973573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752099018
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#discussion_r2196053214\">PR review comment</a>:</p>\n<blockquote>\n<p>A thought -- not sure how I feel about it, but worth noting to see what you think:</p>\n<p>The vmctx handling here feels a little awkward, and certainly costs something; what do you think about requiring the inlined function to have been legalized first, and erroring out if we see a <code>global_value</code> operator during inlining?</p>\n<p>On the one hand, it's a little less user-friendly (not just any function body can be inlined -- one must ensure it's in a particular state), but on the other hand, it feels much more orthogonal and well-factored from a compiler-pass point of view -- the point of legalization is to lower the implicit function-scoped GVs to ordinary (compositional, fully explicit) operators, so we might as well use that logic.</p>\n</blockquote>",
        "id": 527973575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752099018
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#discussion_r2197303595\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think we can inline <code>try_call</code> at all without frontend specific knowledge. For example for <code>cg_clif</code>, a regular call to <code>_Unwind_Resume</code> is used to resume unwinding to the caller of the current function. The inliner would need to know to replace <code>_Unwind_Resume</code> calls with a jump to the right exception table entry.</p>\n</blockquote>",
        "id": 528048799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752143266
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#pullrequestreview-3005012811\">PR review</a>.</p>",
        "id": 528048800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752143266
    },
    {
        "content": "<p>bjorn3 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#discussion_r2197303595\">PR review comment</a>.</p>",
        "id": 528048947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752143308
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#pullrequestreview-3006387399\">PR review</a>.</p>",
        "id": 528115832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752163431
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#discussion_r2198148237\">PR review comment</a>:</p>\n<blockquote>\n<p>Good idea, will do <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 528115834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752163431
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#pullrequestreview-3006401387\">PR review</a>.</p>",
        "id": 528116738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752163686
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#discussion_r2198156827\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah I wavered back and forth on this myself, but ultimately it didn't seem too hard to support global values, even with the different-<code>vmctx</code> case, so I went ahead and did it. I guess unless you feel strongly that we should require legalization before inlining, I would rather not put effort into changing what is already there, given that I don't think there is a clear winner between the two choices. But I am willing to make this change if you really think it is the better approach.</p>\n</blockquote>",
        "id": 528116739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752163686
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#pullrequestreview-3006402018\">PR review</a>.</p>",
        "id": 528116780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752163698
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#discussion_r2198157248\">PR review comment</a>:</p>\n<blockquote>\n<p>True, will add a comment</p>\n</blockquote>",
        "id": 528116782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752163699
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#discussion_r2198161692\">PR review comment</a>:</p>\n<blockquote>\n<p>Will add the assert. I don't have any use case for actually building a new exception table from scratch after it has been cleared, and no other place in the code base does either, so I'll avoid the push-normal-return method for now.</p>\n<p>I think ideally this type would internally have the equivalent of <code>enum { Cleared, Full(...) }</code> so that <em>if</em> we have the vecs then we know we aren't cleared and can always rely on their length relationship invariant, but that is a bit outside the scope of this PR, IMO.</p>\n</blockquote>",
        "id": 528117158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752163832
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#pullrequestreview-3006408845\">PR review</a>.</p>",
        "id": 528117159,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752163832
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#pullrequestreview-3006418581\">PR review</a>.</p>",
        "id": 528117753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752164031
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#discussion_r2198168252\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>without frontend specific knowledge</p>\n</blockquote>\n<p>I think that should be fine because the frontend is in control of deciding whether to inline any given call, and has the information about which function is being called and with which call opcode is being used (<code>try_call</code> vs regular <code>call</code> vs <code>return_call</code>), so the frontend can simply tell Cranelift not to inline any call that would be problematic in the ways you describe, or in any other ways. This inliner just needs to be able to do the actual inlining, given the precondition that it is valid to do said inlining (which is what the frontend is promising by saying \"yes inline this, here is a body\").</p>\n</blockquote>",
        "id": 528117754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752164031
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#pullrequestreview-3006517913\">PR review</a>.</p>",
        "id": 528122768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752165748
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#discussion_r2198221778\">PR review comment</a>:</p>\n<blockquote>\n<p>(Furthermore, because there is no \"throw\" instruction in CLIF, the only way of throwing an exception is via a call into some runtime function (libunwind, the Wasmtime runtime, C++'s <code>_Unwind*</code> runtime, etc...), and therefore it is invalid to inline that particular call because then the throw could not happen, which breaks the equivalent-semantics promise that the frontend is making by saying \"please inline this call with this callee body.\" On the other hand, it is fine to inline a <code>try_call</code> of a function that does not throw and does not make any calls that could throw; in this case we won't end up using the original <code>try_call</code>'s exception edges at all, which is the correct thing to do as those exception edges are unreachable from the inlined call's body -- although the exception edges' target blocks may be reachable from other edges -- as we can statically see that there is no call that could throw and unwind along those exceptional edges.)</p>\n</blockquote>",
        "id": 528122769,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752165748
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210\">PR #11210</a>.</p>",
        "id": 528125197,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752166647
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210\">PR #11210</a>.</p>",
        "id": 528125592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752166802
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#pullrequestreview-3006580448\">PR review</a>.</p>",
        "id": 528126381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752167095
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#discussion_r2198261065\">PR review comment</a>:</p>\n<blockquote>\n<p>On a little further thought: I do think it would actually be better to remove the vmctx-specific logic here, for a few maintenance- and risk-related reasons:</p>\n<ul>\n<li>We're spreading lowering knowledge around -- we're embodying the mapping between particular kinds of GVs and, say, loads or adds here as well as in the legalization phase. If we add any other sorts of GVs later (I know we want to go in the opposite direction, but...) this adds some more inlining-specific work that needs careful thought.</li>\n<li>The <code>vmctx</code>-related GVs in particular are pretty critical for sandboxing logic in Wasmtime, and I'd rather keep that as contained as possible -- i.e., our very well curated <code>bounds_check.rs</code> plus the one bit of legalization logic. The risk (however remote) that we mess up something here, now or later, and cross wires with the wrong vmctx exists; and if/when we try to push something like PCC further, it seems much more difficult if we're doing ad-hoc translation here as well as in the legalization phase.</li>\n<li>If we try to move legalization to ISLE later then we'd also have the question whether to reuse that ISLE context here, or do something else; as above, IMHO it would be better to encapsulate all the knowledge in one place.</li>\n</ul>\n<p>Finally I suspect that this requirement wouldn't place too much burden on \"typical\" use-cases: either one is doing a bottom-up-on-SCC-callgraph general inlining pass, and one will have done optimizations (which start with legalization) already on bodies that are considered for inlining; or one is building a specific compile-time builtin / intrinsification mechanism and has full mutable access to the special function bodies one is inlining as they are prepared. In other words I don't <em>think</em> it will be common to be stuck with a <code>&amp;ir::Function</code> that's not legalized and have to clone it or whatnot.</p>\n<p>All that said: still happy to discuss more if there are things I've missed!</p>\n</blockquote>",
        "id": 528126386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752167096
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#discussion_r2198261065\">PR review comment</a>.</p>",
        "id": 528126525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752167132
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210#issuecomment-3058280121\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210\">PR #11210</a>:</p>\n<blockquote>\n<p>(I think your add-to-queue crossed paths with my comment above -- see discussion on vmctx)</p>\n</blockquote>",
        "id": 528127567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752167574
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210\">PR #11210</a>.</p>",
        "id": 528137286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752171559
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210\">PR #11210</a>.</p>",
        "id": 528137308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752171571
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11210\">PR #11210</a>.</p>",
        "id": 528142390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752173693
    }
]