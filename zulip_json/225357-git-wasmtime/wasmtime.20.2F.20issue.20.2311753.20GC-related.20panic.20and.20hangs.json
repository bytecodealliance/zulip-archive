[
    {
        "content": "<p>id-ilych opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11753\">issue #11753</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The form does not allow WASM attachments, so here is the link<br>\n<a href=\"https://github.com/id-ilych/wasmtime-bugreport/raw/3eddc3cab6fa/host/guest.wasm\">https://github.com/id-ilych/wasmtime-bugreport/raw/3eddc3cab6fa/host/guest.wasm</a></p>\n<p>The host code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">error</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">parse</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">parse</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">parse</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">parse</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">parse</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">gc_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">wasm_gc</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">wasm_exceptions</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">wasm_reference_types</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">wasm_function_references</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">allocation_strategy</span><span class=\"p\">(</span><span class=\"n\">PoolingAllocationConfig</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">max_memory_size</span><span class=\"p\">(</span><span class=\"mi\">1_000_000</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"guest.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"random_get\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Errno::Io</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TypedFunc</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">initialize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"_initialize\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">initialize</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"memtest\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">((</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store_b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">arg_a</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_a</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">arg_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg_x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg_y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg_z</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">arg_b</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_b</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store_b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">arg_b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg_x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg_y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg_z</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>You can find the whole project (including original Kotlin code for the guest) here:<br>\n<a href=\"https://github.com/id-ilych/wasmtime-bugreport/tree/3eddc3cab6fa\">https://github.com/id-ilych/wasmtime-bugreport/tree/3eddc3cab6fa</a></p>\n<h3>Steps to Reproduce</h3>\n<p><span aria-label=\"warning\" class=\"emoji emoji-26a0\" role=\"img\" title=\"warning\">:warning:</span> Each command listed here fails (or hangs), particular panics for each case are listed in Actual Results section</p>\n<ol>\n<li><code>RUST_BACKTRACE=1 cargo run --release 10000 7500 1 1 1</code></li>\n<li><code>RUST_BACKTRACE=1 cargo run --release 10000 11000 1 1 1</code></li>\n<li><code>RUST_BACKTRACE=1 cargo run 10000 7500 1 1 1</code></li>\n<li><code>RUST_BACKTRACE=1 cargo run 10000 11000 1 1 1</code></li>\n<li><code>RUST_BACKTRACE=1 cargo run --release 10000 7500 3 2 1</code></li>\n<li><code>RUST_BACKTRACE=1 cargo run --release 22000 0 1 2 3</code></li>\n<li><code>RUST_BACKTRACE=1 cargo run --release 12025 17812 5 5 5</code></li>\n<li><code>RUST_BACKTRACE=1 cargo run --release 15202 17813 2 1 1</code></li>\n</ol>\n<h3>Expected Results</h3>\n<p>Program finishes successfully (prints numbers from 0 to 99 (incl))</p>\n<h3>Actual Results</h3>\n<p>Command 1 produces \"<code>Option::unwrap()</code> on a <code>None</code> value\" panic in <code>wasmtime-37.0.1/src/runtime/vm/gc/gc_runtime.rs:463:44 </code></p>\n<p>Command 2 produces \"range start index 6553700 out of range for slice of length 524288\" panic in <code>wasmtime-37.0.1/src/runtime/vm/gc/gc_runtime.rs:466:47</code></p>\n<p>Commands 3 and 4 each cause <code>self.is_in_over_approximated_stack_roots()</code> assertion failure in <code>wasmtime-37.0.1/src/runtime/vm/gc/enabled/drc.rs:596:9</code></p>\n<p>Command 5 hands after printing \"5\" (meaning that first 5 iterations completed successfully, but on <code>i=5</code> it hanged)</p>\n<p>Command 6 gives <code>zsh: bus error  RUST_BACKTRACE=1 cargo run --release 22000 0 1 2 3</code> (might be un-aligned memory access)</p>\n<p>Command 7 produces \"<code>Option::unwrap()</code> on a <code>None</code> value\" panic in <code>wasmtime-environ-37.0.1/src/types.rs:1160:25</code></p>\n<p>Command 8 produces \"\"should have inserted trace info for every GC type allocated in this heap\" panic in <code>wasmtime-37.0.1/src/runtime/vm/gc/enabled/drc.rs:317:14</code></p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 37.0.1</p>\n<p>Operating system: macOS 15.6.1 (build 24G90)</p>\n<p>Architecture: arm64e (Apple M2 Max)</p>\n<h3>Extra Info</h3>\n<p>Anything else you'd like to add?<br>\n</p>\n</blockquote>",
        "id": 542016320,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759146682
    },
    {
        "content": "<p><a href=\"https://github.com/id-ilych\">id-ilych</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11753\">Issue #11753</a>.</p>",
        "id": 542016322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759146683
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11753#issuecomment-3346665217\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11753\">issue #11753</a>:</p>\n<blockquote>\n<p>@fitzgen relevant to your interests :)</p>\n</blockquote>",
        "id": 542024953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759148923
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11753#issuecomment-3348405515\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11753\">issue #11753</a>:</p>\n<blockquote>\n<p>Thanks for filing an issue!</p>\n<blockquote>\n<p>The form does not allow WASM attachments, so here is the link <a href=\"https://github.com/id-ilych/wasmtime-bugreport/raw/3eddc3cab6fa/host/guest.wasm\">https://github.com/id-ilych/wasmtime-bugreport/raw/3eddc3cab6fa/host/guest.wasm</a></p>\n</blockquote>\n<p>This link 404s for me. FYI, github will allow you to attach gzip'd files, so you can attach <code>testcase.wasm.gz</code> here.</p>\n<p>In general, I recommend filing separate issues with separate test cases for each bug you are hitting. Lumping multiple things together only makes it harder for maintainers to figure out what is or is not relevant to a particular bug, which slows down the whole process of diagnosing and fixing the bug.</p>\n<p>See also <a href=\"https://docs.wasmtime.dev/contributing-reducing-test-cases.html\">our documentation on shrinking test cases</a></p>\n</blockquote>",
        "id": 542110425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759170152
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:gc label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11753\">Issue #11753</a>.</p>",
        "id": 542116167,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759171991
    },
    {
        "content": "<p>id-ilych <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11753#issuecomment-3348697020\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11753\">issue #11753</a>:</p>\n<blockquote>\n<p>Hello @fitzgen <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> My bad, forgot to make the repo public. Please try again now.</p>\n<blockquote>\n<p>In general, I recommend filing separate issues with separate test cases for each bug you are hitting</p>\n</blockquote>\n<p>In general I would agree, but in that case the code for all the cases is exactly the same, it's only the size of allocations it does that differ (passed as argument), so I thought they might be manifestations of the same root cause. For example, 3 and 4 is just a debug build of 1 and 2, and even though 1 and 2 cause different panics, in debug mode they both trigger the same assertion failure. Also, if the developer would dive into GC code and change something there, the other cases are unlikely to be triggered by exactly the same values as now, so I would have to do fuzzy testing again and thus it looks counterproductive for both parties.</p>\n<p>Anyway, if you still think it would be helpful to file each case separately - I could do that.</p>\n<blockquote>\n<p>See also <a href=\"https://docs.wasmtime.dev/contributing-reducing-test-cases.html\">our documentation on shrinking test cases</a></p>\n</blockquote>\n<p>I will check that out tomorrow, thanks.</p>\n</blockquote>",
        "id": 542122018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759173684
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11753#issuecomment-3353027088\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11753\">issue #11753</a>:</p>\n<blockquote>\n<blockquote>\n<p>In general I would agree, but in that case the code for all the cases is exactly the same, it's only the size of allocations it does that differ (passed as argument), so I thought they might be manifestations of the same root cause.</p>\n</blockquote>\n<p>If the test case is literally identical, yeah that makes sense. Thanks.</p>\n</blockquote>",
        "id": 542324208,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759250950
    },
    {
        "content": "<p>id-ilych edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11753\">issue #11753</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The form does not allow WASM attachments, so here is the link<br>\n<a href=\"https://github.com/id-ilych/wasmtime-bugreport/raw/3eddc3cab6fa/host/guest.wasm\">https://github.com/id-ilych/wasmtime-bugreport/raw/3eddc3cab6fa/host/guest.wasm</a></p>\n<p><strong>UPD</strong><br>\nReduced WASM (see <a href=\"https://github.com/WebAssembly/binaryen?tab=readme-ov-file#tools\">binaryen's wasm-reduce</a>)<br>\n<a href=\"https://github.com/id-ilych/wasmtime-bugreport/raw/c93f146/host/guest.reduced.wasm\">https://github.com/id-ilych/wasmtime-bugreport/raw/c93f146/host/guest.reduced.wasm</a></p>\n<p>The host code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">error</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">parse</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">parse</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">parse</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">parse</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">parse</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">gc_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">wasm_gc</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">wasm_exceptions</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">wasm_reference_types</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">wasm_function_references</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">allocation_strategy</span><span class=\"p\">(</span><span class=\"n\">PoolingAllocationConfig</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">max_memory_size</span><span class=\"p\">(</span><span class=\"mi\">1_000_000</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"guest.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"random_get\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Errno::Io</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TypedFunc</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">initialize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"_initialize\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">initialize</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"memtest\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">((</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store_b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">arg_a</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_a</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">arg_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg_x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg_y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg_z</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">arg_b</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_b</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store_b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">arg_b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg_x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg_y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg_z</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>You can find the whole project (including original Kotlin code for the guest) here:<br>\n<a href=\"https://github.com/id-ilych/wasmtime-bugreport/tree/3eddc3cab6fa\">https://github.com/id-ilych/wasmtime-bugreport/tree/3eddc3cab6fa</a></p>\n<h3>Steps to Reproduce</h3>\n<p><span aria-label=\"warning\" class=\"emoji emoji-26a0\" role=\"img\" title=\"warning\">:warning:</span> Each command listed here fails (or hangs), particular panics for each case are listed in Actual Results section</p>\n<ol>\n<li><code>RUST_BACKTRACE=1 cargo run --release 10000 7500 1 1 1</code></li>\n<li><code>RUST_BACKTRACE=1 cargo run --release 10000 11000 1 1 1</code></li>\n<li><code>RUST_BACKTRACE=1 cargo run 10000 7500 1 1 1</code></li>\n<li><code>RUST_BACKTRACE=1 cargo run 10000 11000 1 1 1</code></li>\n<li><code>RUST_BACKTRACE=1 cargo run --release 10000 7500 3 2 1</code></li>\n<li><code>RUST_BACKTRACE=1 cargo run --release 22000 0 1 2 3</code></li>\n<li><code>RUST_BACKTRACE=1 cargo run --release 12025 17812 5 5 5</code></li>\n<li><code>RUST_BACKTRACE=1 cargo run --release 15202 17813 2 1 1</code></li>\n</ol>\n<h3>Expected Results</h3>\n<p>Program finishes successfully (prints numbers from 0 to 99 (incl))</p>\n<h3>Actual Results</h3>\n<p>Command 1 produces \"<code>Option::unwrap()</code> on a <code>None</code> value\" panic in <code>wasmtime-37.0.1/src/runtime/vm/gc/gc_runtime.rs:463:44 </code></p>\n<p>Command 2 produces \"range start index 6553700 out of range for slice of length 524288\" panic in <code>wasmtime-37.0.1/src/runtime/vm/gc/gc_runtime.rs:466:47</code></p>\n<p>Commands 3 and 4 each cause <code>self.is_in_over_approximated_stack_roots()</code> assertion failure in <code>wasmtime-37.0.1/src/runtime/vm/gc/enabled/drc.rs:596:9</code></p>\n<p>Command 5 hands after printing \"5\" (meaning that first 5 iterations completed successfully, but on <code>i=5</code> it hanged)</p>\n<p>Command 6 gives <code>zsh: bus error  RUST_BACKTRACE=1 cargo run --release 22000 0 1 2 3</code> (might be un-aligned memory access)</p>\n<p>Command 7 produces \"<code>Option::unwrap()</code> on a <code>None</code> value\" panic in <code>wasmtime-environ-37.0.1/src/types.rs:1160:25</code></p>\n<p>Command 8 produces \"\"should have inserted trace info for every GC type allocated in this heap\" panic in <code>wasmtime-37.0.1/src/runtime/vm/gc/enabled/drc.rs:317:14</code></p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 37.0.1</p>\n<p>Operating system: macOS 15.6.1 (build 24G90)</p>\n<p>Architecture: arm64e (Apple M2 Max)</p>\n<h3>Extra Info</h3>\n<p>Anything else you'd like to add?<br>\n</p>\n</blockquote>",
        "id": 542466610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759316862
    },
    {
        "content": "<p>id-ilych <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11753#issuecomment-3355836150\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11753\">issue #11753</a>:</p>\n<blockquote>\n<p>Hello @fitzgen <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>\n<blockquote>\n<p>See also <a href=\"https://docs.wasmtime.dev/contributing-reducing-test-cases.html\">our documentation on shrinking test cases</a></p>\n</blockquote>\n<p>I had no luck with <code>wasm-shrink</code>, so I used binaryen's <code>wasm-reduce</code> instead.</p>\n<p><code>12802</code> -&gt; <code>2275</code></p>\n<p>Reduced WASM is available here <a href=\"https://github.com/id-ilych/wasmtime-bugreport/raw/c93f146/host/guest.reduced.wasm\">https://github.com/id-ilych/wasmtime-bugreport/raw/c93f146/host/guest.reduced.wasm</a><br>\n(Description is updated too)</p>\n</blockquote>",
        "id": 542467133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759317063
    }
]