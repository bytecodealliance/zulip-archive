[
    {
        "content": "<p><a href=\"https://github.com/teyahb8\">teyahb8</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169\">Issue #10169</a>.</p>",
        "id": 497342125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738565025
    },
    {
        "content": "<p>teyahb8 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169\">issue #10169</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The wat code and the corresponding wasm module are compressed here: <a href=\"https://github.com/user-attachments/files/18638109/files.zip\">files.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Extract the files from the compressed file</li>\n<li>Run <code>wat2wasm 366.wat</code></li>\n<li>Run <code>wasmtime --invoke main 366.wasm</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>Based on the differential behavior of <code>wasmer</code>, <code>wamr (aot mode)</code>, and <code>wasmedge</code> runtimes, the expected behavior is an <code>out of bounds</code> error.</p>\n<h3>Actual Results</h3>\n<p>The actual result from the <code>wasmtime</code> runtime is a <code>stack overflow</code>.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime 28.0.0 (3e0b7e501 2024-11-19)</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n<p>Can you please confirm if this behavior is expected from <code>wasmtime</code> or is this a bug? Thanks in advance.<br>\n</p>\n</blockquote>",
        "id": 497342130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738565026
    },
    {
        "content": "<p>teyahb8 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169\">issue #10169</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The wat code and the corresponding wasm module are compressed here: <a href=\"https://github.com/user-attachments/files/18638109/files.zip\">files.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Extract the files from the compressed file</li>\n<li>Run <code>wat2wasm 366.wat</code></li>\n<li>Run <code>wasmtime --invoke main 366.wasm</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>Based on the differential behavior of <code>wasmer</code>, <code>wamr (aot mode)</code>, and <code>wasmedge</code> runtimes, the expected behavior is an <code>out of bounds</code> error.</p>\n<h3>Actual Results</h3>\n<p>The actual result from the <code>wasmtime</code> runtime is a <code>stack overflow</code>.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime 30.0.0 (a0338af84 2025-01-31)</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n<p>Can you please confirm if this behavior is expected from <code>wasmtime</code> or is this a bug? Thanks in advance.<br>\n</p>\n</blockquote>",
        "id": 497343128,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738565479
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169#issuecomment-2630159726\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169\">issue #10169</a>:</p>\n<blockquote>\n<p>@teyahb8 in the future, would you mind posting the example directly? Posting a link to a .zip file that must be downloaded and extracted to view, especially when that <code>.zip</code> file is 506 bytes and the resulting WAT is 13 lines, is fairly wasteful of maintainers' time. Thanks!</p>\n<p>The test-case is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"main\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">    </span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">grow</span>\n<span class=\"w\">    </span><span class=\"n\">v128</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"o\">=</span><span class=\"mi\">2</span>\n<span class=\"w\">    </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">label</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">1</span>\n<span class=\"w\">      </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">end</span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>This program recurses, and on each recursion grows the memory by 2 Wasm pages (128 KiB). The memory does not have a limit (the <code>25</code> is its initial size in Wasm pages), so it will grow up to 4GiB, or about 32K recursions (4Gi / 128 Ki, minus initial 25 pages).</p>\n<p>It seems unsurprising to me that a program that recurses 32K times runs out of stack. Perhaps the other Wasm engines have different default stack sizes, or allocate a different (smaller) frame per function. Stack exhaustion is one of several sources of engine-specific nondeterminism in Wasm, so if you're running tests of engines against each other, you will need to account for that.</p>\n<p>Given all that, I think this is not a bug, just nondeterminism allowed by the spec. Do you agree? Or is there something I'm missing?</p>\n</blockquote>",
        "id": 497347880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738567438
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169#issuecomment-2630164607\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169\">issue #10169</a>:</p>\n<blockquote>\n<p>(And lest the <code>v128.load</code> raise suspicions, it is performing a load from an address based on the returned new memory size in <em>pages</em>, but treating that as a <em>byte-addressed</em> location; so it is always in-bounds.)</p>\n</blockquote>",
        "id": 497348487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738567632
    },
    {
        "content": "<p>primoly <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169#issuecomment-2630658326\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169\">issue #10169</a>:</p>\n<blockquote>\n<p>If the <code>memory.grow</code> fails due to the host not having enough memory, it returns -1 (=2&lt;sup&gt;32&lt;/sup&gt;-1) leading to an out of bounds memory access.</p>\n<p>I tested it in Firefox and it seems to run out of stack as well. I canâ€™t test the other runtimes right now, but could it be that they do some sort of tail-call optimisation? I think that would go against the WebAssembly spec.</p>\n</blockquote>",
        "id": 497403724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738581475
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169\">issue #10169</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The wat code and the corresponding wasm module are compressed here: <a href=\"https://github.com/user-attachments/files/18638109/files.zip\">files.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Extract the files from the compressed file</li>\n<li>Run <code>wat2wasm 366.wat</code></li>\n<li>Run <code>wasmtime --invoke main 366.wasm</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>Based on the differential behavior of <code>wasmer</code>, <code>wamr (aot mode)</code>, and <code>wasmedge</code> runtimes, the expected behavior is an <code>out of bounds</code> error.</p>\n<h3>Actual Results</h3>\n<p>The actual result from the <code>wasmtime</code> runtime is a <code>stack overflow</code>.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime 30.0.0 (a0338af84 2025-01-31)</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n<p>Can you please confirm if this behavior is expected from <code>wasmtime</code> or is this a bug? Thanks in advance.<br>\n</p>\n</blockquote>",
        "id": 497411916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738583536
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169#issuecomment-2630731896\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169\">issue #10169</a>:</p>\n<blockquote>\n<p>I agree with @cfallin and @primoly in that there doesn't look to be a bug here. At best other runtimes have different defaults for when stack overflow occurs and at worst other runtimes are going against the spec as @primoly mentions. In either case resource exhaustion is not specified to be the exact same across all runtimes so I don't think there's anything for Wasmtime to do here, so closing.</p>\n<p>I would also echo what @cfallin said, avoiding the indirection of a zip is much appreciated.</p>\n</blockquote>",
        "id": 497411918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738583537
    },
    {
        "content": "<p>primoly edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169#issuecomment-2630658326\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169\">issue #10169</a>:</p>\n<blockquote>\n<p>If the <code>memory.grow</code> fails due to the host not having enough memory, it returns -1 (=2&lt;sup&gt;32&lt;/sup&gt;-1) leading to an out of bounds memory access.</p>\n<p>I tested it in Edge and it seems to run out of stack as well. I canâ€™t test the other runtimes right now, but could it be that they do some sort of tail-call optimisation? I think that would go against the WebAssembly spec.</p>\n</blockquote>",
        "id": 497427410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738587451
    },
    {
        "content": "<p>teyahb8 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169#issuecomment-2631085061\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10169\">issue #10169</a>:</p>\n<blockquote>\n<p>Thanks for the clarification. I agree that the default stack exhaustion behavior can vary. Also, I appreciate the advice on the test case file format. I will make sure to keep this in mind for future issues.</p>\n</blockquote>",
        "id": 497442728,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738591199
    }
]