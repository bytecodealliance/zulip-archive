[
    {
        "content": "<p><a href=\"https://github.com/jadamcrain\">jadamcrain</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239\">Issue #10239</a>.</p>",
        "id": 500298054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739840713
    },
    {
        "content": "<p>jadamcrain opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239\">issue #10239</a>:</p>\n<blockquote>\n<p>We're embedding <code>wasmtime</code> to execute plugins within our application. These plugins are defined in WIT. The application instantiates multiple instances of the plugin, and drives each instance on its own Tokio task. We started seeing slow memory growth in production. This was surprising because our application is carefully designed to have very flat memory usage. It has a fixed number of Tokio tasks that only communicate with each-other using bounded queues.</p>\n<p>When only 1 plugin executes, no memory is leaked, and the application has a flat steady-state memory usage:</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/8e77919d-e7ca-4b5e-baa0-05a76d7dfdc1\">https://github.com/user-attachments/assets/8e77919d-e7ca-4b5e-baa0-05a76d7dfdc1</a>)</p>\n<p>When more than 1 plugin executes, the application will leak memory in WASM =&gt; HOST callbacks, e.g. 2 instances on 2 tasks was actually pretty steady for a period of time and then started leaking:</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/7e55cf71-aef3-4a8d-8277-7a50ceb68ea1\">https://github.com/user-attachments/assets/7e55cf71-aef3-4a8d-8277-7a50ceb68ea1</a>)</p>\n<p>Zoomed in view of last chart:</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/746616c7-e2f8-4272-b588-5b6465e4c724\">https://github.com/user-attachments/assets/746616c7-e2f8-4272-b588-5b6465e4c724</a>)</p>\n<p>It will sometimes start leaking right away, and other times take a while to start. Once it starts leaking, it always continues to leak. At 4 instances (4 plugins on 4 parallel tasks) the leaks blow up immediately:</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/37f6e98a-95a4-4767-b6be-5257dbfe1d6b\">https://github.com/user-attachments/assets/37f6e98a-95a4-4767-b6be-5257dbfe1d6b</a>)</p>\n<p>The higher the level of parallelism, the faster the leak... It feels like there's something shared between instances here that isn't thread-safe.</p>\n<p>The leaked allocations are <code>realloc</code> that occurs when \"lifting\" a list type from WASM =&gt; host in a host callback.</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/4f224ad2-097e-4bdf-8611-2b8fdacaee50\">https://github.com/user-attachments/assets/4f224ad2-097e-4bdf-8611-2b8fdacaee50</a>)</p>\n<h3>Test Case</h3>\n<p>Not easy to replicate outside of our application ATM.</p>\n<h3>Steps to Reproduce</h3>\n<p>I'd like to upload the ZST traces for heaptrack, but github is blocking even a zip of them? They're large, 40-60 MB.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 29.0.1</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 500298055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739840713
    },
    {
        "content": "<p>jadamcrain edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239\">issue #10239</a>:</p>\n<blockquote>\n<p>We're embedding <code>wasmtime</code> to execute plugins within our application. These plugins are defined in WIT. The application instantiates multiple instances of the plugin, and drives each instance on its own Tokio task. We started seeing slow memory growth in production. This was surprising because our application is carefully designed to have very flat memory usage. It has a fixed number of Tokio tasks that only communicate with each-other using bounded queues.</p>\n<p>When only 1 plugin executes, no memory is leaked, and the application has a flat steady-state memory usage:</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/8e77919d-e7ca-4b5e-baa0-05a76d7dfdc1\">https://github.com/user-attachments/assets/8e77919d-e7ca-4b5e-baa0-05a76d7dfdc1</a>)</p>\n<p>When more than 1 plugin executes, the application will leak memory in WASM =&gt; HOST callbacks, e.g. 2 instances on 2 tasks was actually pretty steady for a period of time and then started leaking:</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/7e55cf71-aef3-4a8d-8277-7a50ceb68ea1\">https://github.com/user-attachments/assets/7e55cf71-aef3-4a8d-8277-7a50ceb68ea1</a>)</p>\n<p>Zoomed in view of last chart:</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/746616c7-e2f8-4272-b588-5b6465e4c724\">https://github.com/user-attachments/assets/746616c7-e2f8-4272-b588-5b6465e4c724</a>)</p>\n<p>It will sometimes start leaking right away, and other times take a while to start like the trace above. Once it starts leaking, it always continue to leak. At 4 instances (4 plugins on 4 parallel tasks) the leaks blow up immediately:</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/37f6e98a-95a4-4767-b6be-5257dbfe1d6b\">https://github.com/user-attachments/assets/37f6e98a-95a4-4767-b6be-5257dbfe1d6b</a>)</p>\n<p>The higher the level of parallelism, the faster the leak... It feels like there's something shared between instances here that isn't thread-safe.</p>\n<p>The leaked allocations are <code>realloc</code> that occurs when \"lifting\" a list type from WASM =&gt; host in a host callback.</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/4f224ad2-097e-4bdf-8611-2b8fdacaee50\">https://github.com/user-attachments/assets/4f224ad2-097e-4bdf-8611-2b8fdacaee50</a>)</p>\n<h3>Test Case</h3>\n<p>Not easy to replicate outside of our application ATM.</p>\n<h3>Steps to Reproduce</h3>\n<p>I'd like to upload the ZST traces for heaptrack, but github is blocking even a zip of them? They're large, 40-60 MB.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 29.0.1</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 500298360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739840915
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239#issuecomment-2666424415\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239\">issue #10239</a>:</p>\n<blockquote>\n<p>Thanks for the report! I'm going to ask some questions about the shape of your embedding to help get some more information and hopefully assist in debugging as well. It's understandable if you can't share the whole application, but it may take some more back-and-forth in the absence of a reproduction.</p>\n<ul>\n<li>Are you using the pooling allocator? Or the default <code>OnDemand</code> allocation strategy?</li>\n<li>Or, more generally, are you able to share a snippet/gist of your creation of <code>wasmtime::Config</code>? Understanding the configuration settings may be helpful in determining what possible leak scenarios there are.</li>\n<li>Is there a legend/key for the colors of the stripes in the graphs above?</li>\n<li>Would you be able to share the signature of the WIT function that looks like it's leaking? Or are you able to pin down which host function is triggering the leak?</li>\n<li>Can you talk more about the lifecycle of a plugin? Is it instantiated for a long time? Or only a short period of time before it's thrown away?</li>\n<li>Can you speak more as to what/how statistics are being gathered here? Is it instrumentation of malloc/free with <code>LD_PRELOAD</code>? Or something lower level perhaps?</li>\n</ul>\n</blockquote>",
        "id": 500475813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739900476
    },
    {
        "content": "<p>jadamcrain <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239#issuecomment-2666477473\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239\">issue #10239</a>:</p>\n<blockquote>\n<p>Hi @alexcrichton. Before I make anyone guess in the dark here on our proprietary application, I'm try to make this leak occur in a minimal application that mimics our embedding that I can just shove in a public repo. Fingers crossed.</p>\n<p>Some initial responses below while I work on a full host/guest I can hand you in the background:</p>\n<p><code>Are you using the pooling allocator? Or the default OnDemand allocation strategy?</code></p>\n<p>We've not explicitly selected any allocator, so I assume it's the default.</p>\n<p><code>Or, more generally, are you able to share a snippet/gist of your creation of wasmtime::Config? Understanding the configuration settings may be helpful in determining what possible leak scenarios there are.</code></p>\n<p>We're using all of the default settings.</p>\n<p><code>Is there a legend/key for the colors of the stripes in the graphs above?</code></p>\n<p>Yes, there is. I'll get you this in a bit if I fail to give you a reproducible example.</p>\n<p><code>Would you be able to share the signature of the WIT function that looks like it's leaking? Or are you able to pin down which host function is triggering the leak?</code></p>\n<p>It's a pretty simple host function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// publish a set of samples</span>\n<span class=\"n\">publish</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">sample</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>A <code>sample</code> is nothing special... it doesn't contain any dynamically allocated types and should all just be laid out on the stack.</p>\n<p><code>Can you talk more about the lifecycle of a plugin? Is it instantiated for a long time? Or only a short period of time before it's thrown away?</code></p>\n<p>I lives forever... as long as the application. We actually use the plugin to create a single <code>Resource</code> type during initialization. We then periodically call a single method on the guest resource, which can call back to host functions like \"publish\" above.</p>\n<p><code>Can you speak more as to what/how statistics are being gathered here? Is it instrumentation of malloc/free with LD_PRELOAD? Or something lower level perhaps?</code></p>\n<p>My understanding is that Heaptrack uses LD_PRELOAD to insert it's own .SO between the application and the allocator. We're not using jemalloc here, just the default Rust global allocator.</p>\n</blockquote>",
        "id": 500478953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739901430
    },
    {
        "content": "<p>jadamcrain edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239#issuecomment-2666477473\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239\">issue #10239</a>:</p>\n<blockquote>\n<p>Hi @alexcrichton. Before I make anyone guess in the dark here on our proprietary application, I'm try to make this leak occur in a minimal application that mimics our embedding that I can just shove in a public repo. Fingers crossed.</p>\n<p>Some initial responses below while I work on a full host/guest I can hand you in the background:</p>\n<p><code>Are you using the pooling allocator? Or the default OnDemand allocation strategy?</code></p>\n<p>We've not explicitly selected any allocator, so I assume it's the default.</p>\n<p><code>Or, more generally, are you able to share a snippet/gist of your creation of wasmtime::Config? Understanding the configuration settings may be helpful in determining what possible leak scenarios there are.</code></p>\n<p>We're using all of the default settings.</p>\n<p><code>Is there a legend/key for the colors of the stripes in the graphs above?</code></p>\n<p>Yes, there is. I'll get you this in a bit if I fail to give you a reproducible example.</p>\n<p><code>Would you be able to share the signature of the WIT function that looks like it's leaking? Or are you able to pin down which host function is triggering the leak?</code></p>\n<p>It's a pretty simple host function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// publish a set of samples</span>\n<span class=\"n\">publish</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">sample</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>A <code>sample</code> is nothing special... it doesn't contain any dynamically allocated types and should all just be laid out on the stack.</p>\n<p><code>Can you talk more about the lifecycle of a plugin? Is it instantiated for a long time? Or only a short period of time before it's thrown away?</code></p>\n<p>It lives forever... as long as the application. We actually use the plugin to create a single <code>Resource</code> type during initialization. We then periodically call a single method on the guest resource, which can call back to host functions like \"publish\" above.</p>\n<p><code>Can you speak more as to what/how statistics are being gathered here? Is it instrumentation of malloc/free with LD_PRELOAD? Or something lower level perhaps?</code></p>\n<p>My understanding is that Heaptrack uses LD_PRELOAD to insert it's own .SO between the application and the allocator. We're not using jemalloc here, just the default Rust global allocator.</p>\n</blockquote>",
        "id": 500479087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739901476
    },
    {
        "content": "<p>jadamcrain edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239#issuecomment-2666477473\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239\">issue #10239</a>:</p>\n<blockquote>\n<p>Hi @alexcrichton. Before I make anyone guess in the dark here on our proprietary application, I'm trying to make this leak occur in a minimal application that mimics our embedding that I can just shove in a public repo. Fingers crossed.</p>\n<p>Some initial responses below while I work on a full host/guest I can hand you in the background:</p>\n<p><code>Are you using the pooling allocator? Or the default OnDemand allocation strategy?</code></p>\n<p>We've not explicitly selected any allocator, so I assume it's the default.</p>\n<p><code>Or, more generally, are you able to share a snippet/gist of your creation of wasmtime::Config? Understanding the configuration settings may be helpful in determining what possible leak scenarios there are.</code></p>\n<p>We're using all of the default settings.</p>\n<p><code>Is there a legend/key for the colors of the stripes in the graphs above?</code></p>\n<p>Yes, there is. I'll get you this in a bit if I fail to give you a reproducible example.</p>\n<p><code>Would you be able to share the signature of the WIT function that looks like it's leaking? Or are you able to pin down which host function is triggering the leak?</code></p>\n<p>It's a pretty simple host function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// publish a set of samples</span>\n<span class=\"n\">publish</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">sample</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>A <code>sample</code> is nothing special... it doesn't contain any dynamically allocated types and should all just be laid out on the stack.</p>\n<p><code>Can you talk more about the lifecycle of a plugin? Is it instantiated for a long time? Or only a short period of time before it's thrown away?</code></p>\n<p>It lives forever... as long as the application. We actually use the plugin to create a single <code>Resource</code> type during initialization. We then periodically call a single method on the guest resource, which can call back to host functions like \"publish\" above.</p>\n<p><code>Can you speak more as to what/how statistics are being gathered here? Is it instrumentation of malloc/free with LD_PRELOAD? Or something lower level perhaps?</code></p>\n<p>My understanding is that Heaptrack uses LD_PRELOAD to insert it's own .SO between the application and the allocator. We're not using jemalloc here, just the default Rust global allocator.</p>\n</blockquote>",
        "id": 500479890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739901711
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239#issuecomment-2667207798\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239\">issue #10239</a>:</p>\n<blockquote>\n<p>Ok thanks for the info! </p>\n<p>Everything seems pretty reasonable to me and from what I can tell from the screenshots it looks like the <code>Vec&lt;Sample&gt;</code> that's allocated on the host is what's leaking. I've double-checked the various bits and pieces I could in Wasmtime and I can't find anything awry though. In the final screenshot though you've expanded a chain of 18.1MB leaked bytes, but just above that (highlighted in the screenshot) is a leak of 35.7MB. Does the trace there look similar?</p>\n<p>I also assume you're using <code>wasmtime::component::bindgen!</code>-generated bindings for this API? If so you should get the <code>Vec&lt;Sample&gt;</code> and that should naturally get deallocated when it falls out of scope in Rust. Basically I'm as stumped as you are :) (I'll keep digging once you've got more info though)</p>\n</blockquote>",
        "id": 500535360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739924038
    },
    {
        "content": "<p>jadamcrain <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239#issuecomment-2668955844\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239\">issue #10239</a>:</p>\n<blockquote>\n<p>Yes, I'm using <code>wasmtime::component::bindgen!</code>. I agree that this doesn't make any sense. I just tried this using valgrind's massif and I'm getting a flat trace there even with high parallelism... this kinda makes me think that this might be a bug in <code>heaptrace</code> rather than a leak application.</p>\n<p>I'm going to try a couple more heap profiling tools to be certain that's the case like <code>jemalloc</code>.</p>\n<p>Heaptrack did allow me to find a leak in our code (me being stupid and growing and endless HashMap), but then I kept going with, but it might just be wrong here.</p>\n</blockquote>",
        "id": 500674978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739978204
    },
    {
        "content": "<p>jadamcrain edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239#issuecomment-2668955844\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239\">issue #10239</a>:</p>\n<blockquote>\n<p>Yes, I'm using <code>wasmtime::component::bindgen!</code>. I agree that this doesn't make any sense. I just tried this using valgrind's massif and I'm getting a flat trace there even with high parallelism... this kinda makes me think that this might be a bug in <code>heaptrack</code> rather than a leak application.</p>\n<p>Massif is really slow though compared to heaptrack, so to rule out some kind of heisenbug, I'm going to try a couple more heap profiling tools to be certain that's the case like <code>jemalloc</code>.</p>\n<p>Heaptrack did allow me to find a leak in our code (me being stupid and growing and endless HashMap), but then I kept going with, but it might just be wrong here.</p>\n</blockquote>",
        "id": 500675224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739978276
    },
    {
        "content": "<p>jadamcrain edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239#issuecomment-2668955844\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239\">issue #10239</a>:</p>\n<blockquote>\n<p>Yes, I'm using <code>wasmtime::component::bindgen!</code>. I agree that this doesn't make any sense. I just tried this using valgrind's massif and I'm getting a flat trace there even with high parallelism... this kinda makes me think that this might be a bug in <code>heaptrack</code> rather than a leak in the application.</p>\n<p>Massif is really slow though compared to heaptrack, so to rule out some kind of heisenbug, I'm going to try a couple more heap profiling tools to be certain that's the case like <code>jemalloc</code>.</p>\n<p>Heaptrack did allow me to find a leak in our code (me being stupid and growing and endless HashMap), but then I kept going with, but it might just be wrong here.</p>\n</blockquote>",
        "id": 500685040,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739980682
    },
    {
        "content": "<p>jadamcrain edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239#issuecomment-2668955844\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239\">issue #10239</a>:</p>\n<blockquote>\n<p>Yes, I'm using <code>wasmtime::component::bindgen!</code>. I agree that this doesn't make any sense. I just tried this using valgrind's massif and I'm getting a flat trace there even with high parallelism... this kinda makes me think that this might be a bug in <code>heaptrack</code> rather than a leak in the application.</p>\n<p>Massif is really slow though compared to heaptrack, so to rule out some kind of heisenbug, I'm going to try a couple more heap profiling tools to be certain that's the case like <code>jemalloc</code>.</p>\n<p>Heaptrack did allow me to find a leak in our code (me being stupid and growing and endless HashMap), but then I kept going with it assuming it was reporting correct results, but it might just be wrong here.</p>\n</blockquote>",
        "id": 500685154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739980702
    },
    {
        "content": "<p>jadamcrain closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239\">issue #10239</a>:</p>\n<blockquote>\n<p>We're embedding <code>wasmtime</code> to execute plugins within our application. These plugins are defined in WIT. The application instantiates multiple instances of the plugin, and drives each instance on its own Tokio task. We started seeing slow memory growth in production. This was surprising because our application is carefully designed to have very flat memory usage. It has a fixed number of Tokio tasks that only communicate with each-other using bounded queues.</p>\n<p>When only 1 plugin executes, no memory is leaked, and the application has a flat steady-state memory usage:</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/8e77919d-e7ca-4b5e-baa0-05a76d7dfdc1\">https://github.com/user-attachments/assets/8e77919d-e7ca-4b5e-baa0-05a76d7dfdc1</a>)</p>\n<p>When more than 1 plugin executes, the application will leak memory in WASM =&gt; HOST callbacks, e.g. 2 instances on 2 tasks was actually pretty steady for a period of time and then started leaking:</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/7e55cf71-aef3-4a8d-8277-7a50ceb68ea1\">https://github.com/user-attachments/assets/7e55cf71-aef3-4a8d-8277-7a50ceb68ea1</a>)</p>\n<p>Zoomed in view of last chart:</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/746616c7-e2f8-4272-b588-5b6465e4c724\">https://github.com/user-attachments/assets/746616c7-e2f8-4272-b588-5b6465e4c724</a>)</p>\n<p>It will sometimes start leaking right away, and other times take a while to start like the trace above. Once it starts leaking, it always continue to leak. At 4 instances (4 plugins on 4 parallel tasks) the leaks blow up immediately:</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/37f6e98a-95a4-4767-b6be-5257dbfe1d6b\">https://github.com/user-attachments/assets/37f6e98a-95a4-4767-b6be-5257dbfe1d6b</a>)</p>\n<p>The higher the level of parallelism, the faster the leak... It feels like there's something shared between instances here that isn't thread-safe.</p>\n<p>The leaked allocations are <code>realloc</code> that occurs when \"lifting\" a list type from WASM =&gt; host in a host callback.</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/4f224ad2-097e-4bdf-8611-2b8fdacaee50\">https://github.com/user-attachments/assets/4f224ad2-097e-4bdf-8611-2b8fdacaee50</a>)</p>\n<h3>Test Case</h3>\n<p>Not easy to replicate outside of our application ATM.</p>\n<h3>Steps to Reproduce</h3>\n<p>I'd like to upload the ZST traces for heaptrack, but github is blocking even a zip of them? They're large, 40-60 MB.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 29.0.1</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 501163194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740162580
    },
    {
        "content": "<p>jadamcrain <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239#issuecomment-2675267330\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239\">issue #10239</a>:</p>\n<blockquote>\n<p>I've used Valgrind's <code>massif</code> and <code>jemalloc</code>. There are no heap leaks. Heaptrack appears to just have a bug under some unknown set of conditions that leads to those nonsensical profiles and leaked stack traces. It was a red herring that adding wasmtime to the mix triggered the bug. Who knows why... depth of the stack traces, anonymous stack frames, I have no idea why but the other heap profiling tools had no issue.</p>\n<p>The reason I first thought there was a leak in production was the we were running the application as a systemd service and the memory \"usage\" reported by <code>systemctl status</code> apparently includes cached file data by Linux!  In the same redeployment, I added both the WASM plugin stuff + some historical logging directly to files... the growing memory usage was just Linux caching this written file data and accounting for it when reporting the memory usage. If you look at the RSS memory usage using <code>ps/top/etc</code> you actually see that that part of the usage is stable.</p>\n<p>So, a bug in heaptrack combined w/ me being a systemd noob resulted in a wild goose chase =).</p>\n<p>![Image](<a href=\"https://github.com/user-attachments/assets/7ee37c49-4118-4751-99d4-e54be81a021f\">https://github.com/user-attachments/assets/7ee37c49-4118-4751-99d4-e54be81a021f</a>)</p>\n</blockquote>",
        "id": 501163199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740162582
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239#issuecomment-2675309220\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10239\">issue #10239</a>:</p>\n<blockquote>\n<p>Oh wow, that's wild! Regardless thanks for investigating and tracking that down!</p>\n</blockquote>",
        "id": 501167358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740164025
    }
]