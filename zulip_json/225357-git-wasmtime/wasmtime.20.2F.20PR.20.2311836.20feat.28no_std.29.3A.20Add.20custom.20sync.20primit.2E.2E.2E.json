[
    {
        "content": "<p>salmans opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a> from <code>salmans:custom-sync</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This PR introduces support for custom synchronization primitives in wasmtime's custom platform backend, enabling embedders to provide their own mutex and rwlock implementations through C FFI.</p>\n<h3>Motivation</h3>\n<p>The existing implementation in <code>sync_nostd.rs</code> uses uncontended locks that panic on contention, making it unsuitable for multithreaded environments. However, many no_std environments (such as OS kernels, embedded RTOS, or bare-metal systems with threading support) do have access to threading primitives and need proper synchronization.</p>\n<p>This implementation follows the approach suggested in the comments <code>sync_nostd.rs</code> implementation, which recommended that hosts provide their own synchronization primitives via the C API for truly multithreaded no_std environments.</p>\n<h3>Changes</h3>\n<p>- New <code>custom-sync-primitives</code> feature: Allows wasmtime to use host-provided synchronization primitives instead of uncontended locks in <code>sync_nostd.rs</code><br>\n  - C API declarations (in <code>capi.rs</code>): Defines the FFI interface for sync lock operations:<br>\n    - <code>wasmtime_sync_lock_new/free</code> - Mutex lifecycle management<br>\n    - <code>wasmtime_sync_lock_acquire/release</code> - Exclusive locking<br>\n    - <code>wasmtime_sync_rwlock_read/write</code> - Reader-writer lock operations<br>\n    - <code>wasmtime_sync_rwlock_read_release/write_release</code> - Lock release<br>\n  - Implementation (in <code>custom/sync.rs</code>): Rust wrappers that call the C API functions, implementing wasmtime's internal <code>OnceLock</code> and <code>RwLock</code> types using the custom primitives</p>\n</blockquote>",
        "id": 544270006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760143453
    },
    {
        "content": "<p>salmans updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 544271231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760144329
    },
    {
        "content": "<p><strong>salmans</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a> as ready for review.</p>",
        "id": 544272329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760145081
    },
    {
        "content": "<p><strong>salmans</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 544272331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760145082
    },
    {
        "content": "<p><strong>salmans</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 544272333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760145083
    },
    {
        "content": "<p>salmans edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>:</p>\n<blockquote>\n<p>This PR introduces support for custom synchronization primitives in wasmtime's custom platform backend, enabling embedders to provide their own mutex and rwlock implementations through C FFI.</p>\n<h3>Motivation</h3>\n<p>The existing implementation in <code>sync_nostd.rs</code> uses uncontended locks that panic on contention, making it unsuitable for multithreaded environments. However, many no_std environments (such as OS kernels, embedded RTOS, or bare-metal systems with threading support) do have access to threading primitives and need proper synchronization.</p>\n<p>This implementation follows the approach suggested in the comments in <code>sync_nostd.rs</code> implementation, which recommended that hosts provide their own synchronization primitives via the C API for truly multithreaded no_std environments.</p>\n<h3>Changes</h3>\n<p>- New <code>custom-sync-primitives</code> feature: Allows wasmtime to use host-provided synchronization primitives instead of uncontended locks in <code>sync_nostd.rs</code><br>\n  - C API declarations (in <code>capi.rs</code>): Defines the FFI interface for sync lock operations:<br>\n    - <code>wasmtime_sync_lock_new/free</code> - Mutex lifecycle management<br>\n    - <code>wasmtime_sync_lock_acquire/release</code> - Exclusive locking<br>\n    - <code>wasmtime_sync_rwlock_read/write</code> - Reader-writer lock operations<br>\n    - <code>wasmtime_sync_rwlock_read_release/write_release</code> - Lock release<br>\n  - Implementation (in <code>custom/sync.rs</code>): Rust wrappers that call the C API functions, implementing wasmtime's internal <code>OnceLock</code> and <code>RwLock</code> types using the custom primitives</p>\n</blockquote>",
        "id": 544410119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760284029
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#pullrequestreview-3331922678\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for this! I've got some various ideas/suggestions below I'm curiuos to get your take on. The high-level goal would be to simplify this module by putting a little bit more complexity into the implementation-side of the symbols and to additionally reduce duplication with the <code>sync_nostd</code> module since this is pretty tricky code to get right.</p>\n<p>This is all primarily motivated by the lack of tests in this PR and the overall difficulty of testing an implementation. Ideally, if you're up for it, the <code>examples/min-platform</code> example would be updated with a new feature to implement synchronization primitives in terms of <code>pthread_*</code> functions. Would you be up for adding such a test?</p>\n</blockquote>",
        "id": 544573500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760367428
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2426571697\">PR review comment</a>:</p>\n<blockquote>\n<p>One drawback of this current approach is that this module has a lot of nontrivial implementation logic which isn't tested at all in our CI. Adding testing would be somewhat difficult unfortunately, as well. Given that I might recommend a few changes to the C API to make loops like this simpler:</p>\n<ul>\n<li><code>wasmtime_sync_lock_new</code> would take a <code>*mut usize</code> parameter rather than returning a <code>usize</code> (similar to all other functions).</li>\n<li>It would be an API contract of <code>wasmtime_sync_lock_new</code> that the initial value of the pointer passed in is 0. That way if the implementation uses 0 to mean \"initialized but inert\" the function would be a noop. Otherwise it's up to the implementation to initialize-from-zero.</li>\n<li>Lazy initialization would be deferred to the implementor rather than implemented here. That would remove the <code>spin_loop()</code> which is generally not appropriate and is best to leave to the actual synchronization library which can probably do something more productive than spinning (e.g. by yielding)</li>\n</ul>\n<p>Overall that would remove the need for this function entirely and should greatly simplify this interface.</p>\n</blockquote>",
        "id": 544573504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760367428
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2426560436\">PR review comment</a>:</p>\n<blockquote>\n<p>For this the main purpose of these custom cfgs are for when there's custom logic behind the definition, such as a cascade of other cfg's or checking other conditions. For this one it's an alias of <code>feature = \"custom-sync-primitives\"</code> so I think it's fine to omit.</p>\n<p>Now that being said in the code this cfg is always coupled with <code>not(feature = \"std\")</code> as well. Given that I think it would be reasonable to keep <code>has_custom_sync</code> as a custom cfg, but factor in the <code>not(feature = \"std\")</code> calculating to enabling it as well. Basically when <code>feature = \"std\"</code> is enabled this <code>has_custom_sync</code> would never be enabled.</p>\n</blockquote>",
        "id": 544573505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760367428
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2426586126\">PR review comment</a>:</p>\n<blockquote>\n<p>In the interest of simplifying this module as much as possible due to the difficulty to test this, I think it would be good to share this implementation with the preexisting code in <code>sync_nostd.rs</code> which I suspect this is copied from. Could the <code>sync_nostd</code> module have a single <code>RwLock</code>, but internally there'd be something like a \"raw\" rwlock which has no data and is just the <code>lock: HostLock</code> primitive here? That way without <code>custom-sync-primitives</code> it'd use the panic-on-contention implementation from today but with the feature it'd use a lock defined in terms of the C API.</p>\n</blockquote>",
        "id": 544573506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760367428
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2426561603\">PR review comment</a>:</p>\n<blockquote>\n<p>Could the panic-on-contention error messages of this module be updated to mention the <code>custom-sync-primitives</code> Cargo feature?</p>\n</blockquote>",
        "id": 544573507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760367428
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2426588074\">PR review comment</a>:</p>\n<blockquote>\n<p>What do you think about using a custom constructor/destructor for an <code>RwLock</code> rather than sharing the same ones for the mutex? That way it leaves implementations the ability to have distinct implementations of the two, and if they're the same it wouldn't be too hard to route them to the same implementation.</p>\n</blockquote>",
        "id": 544573508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760367428
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2426573751\">PR review comment</a>:</p>\n<blockquote>\n<p>This'll want to be tagged as an <code>unsafe</code> function because it's generally not safe to call. Although this could also perhaps be exclusively part of the <code>Drop</code> implementation?</p>\n</blockquote>",
        "id": 544573509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760367428
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2426590172\">PR review comment</a>:</p>\n<blockquote>\n<p>This makes me realize that this is actually missing from the <code>sync_nostd</code> implementation today. This is another point in favor for me to reduce the duplication between the two modules.</p>\n</blockquote>",
        "id": 544573510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760367428
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 544573540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760367439
    },
    {
        "content": "<p>salmans updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 544629517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760394433
    },
    {
        "content": "<p>salmans created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2427434620\">PR review comment</a>:</p>\n<blockquote>\n<p>I agree. Changes are reflected.</p>\n</blockquote>",
        "id": 544629625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760394530
    },
    {
        "content": "<p>salmans submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#pullrequestreview-3333190050\">PR review</a>.</p>",
        "id": 544629627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760394530
    },
    {
        "content": "<p>salmans created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2427438141\">PR review comment</a>:</p>\n<blockquote>\n<p>That's a great idea. I made those changes.</p>\n</blockquote>",
        "id": 544629728,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760394611
    },
    {
        "content": "<p>salmans submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#pullrequestreview-3333196317\">PR review</a>.</p>",
        "id": 544629730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760394611
    },
    {
        "content": "<p>salmans submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#pullrequestreview-3333204024\">PR review</a>.</p>",
        "id": 544629844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760394696
    },
    {
        "content": "<p>salmans created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2427442154\">PR review comment</a>:</p>\n<blockquote>\n<p>I unified the two implementations but wondering if that properly reflects your ideas. Please let me know if something doesn't seem right or missing.</p>\n</blockquote>",
        "id": 544629845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760394696
    },
    {
        "content": "<p>salmans submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#pullrequestreview-3333204866\">PR review</a>.</p>",
        "id": 544629867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760394709
    },
    {
        "content": "<p>salmans created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2427442813\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 544629868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760394709
    },
    {
        "content": "<p>salmans submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#pullrequestreview-3333206030\">PR review</a>.</p>",
        "id": 544629881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760394720
    },
    {
        "content": "<p>salmans created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2427443330\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 544629882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760394720
    },
    {
        "content": "<p>salmans submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#pullrequestreview-3333212822\">PR review</a>.</p>",
        "id": 544629967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760394787
    },
    {
        "content": "<p>salmans created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2427446703\">PR review comment</a>:</p>\n<blockquote>\n<p>Wondering if this is a good idea.</p>\n</blockquote>",
        "id": 544629968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760394788
    },
    {
        "content": "<p>salmans updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 544630905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760395621
    },
    {
        "content": "<p>salmans <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#issuecomment-3399313319\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>:</p>\n<blockquote>\n<p>@alexcrichton Thanks for the quick review. I agree. with all points you made and tried to address them. And absolutely, I'll extend the <code>min_platform</code> example accordingly (it's a very useful example that has helped me a lot in the past!).</p>\n</blockquote>",
        "id": 544631116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760395807
    },
    {
        "content": "<p>salmans edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#issuecomment-3399313319\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>:</p>\n<blockquote>\n<p>@alexcrichton Thanks for the quick review. I agree with all points you made and tried to address them. And absolutely, I'll extend the <code>min_platform</code> example accordingly (it's a very useful example that has helped me a lot in the past!).</p>\n</blockquote>",
        "id": 544631125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760395824
    },
    {
        "content": "<p>salmans updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 544631450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760396162
    },
    {
        "content": "<p>salmans updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 544639060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760402854
    },
    {
        "content": "<p>salmans <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#issuecomment-3399562698\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>:</p>\n<blockquote>\n<p>I pushed two more commits to reflect the custom sync changes in min-platform example. The first one implements the sync primitives but to have a truly multithreaded system, I needed to change the existing TLS implementation that assumes a single threaded execution. Feel free to drop the second commit if not needed or let me know if needs adjustment.</p>\n</blockquote>",
        "id": 544639353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760403077
    },
    {
        "content": "<p>salmans updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 544639740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760403346
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#pullrequestreview-3336061275\">PR review</a>.</p>",
        "id": 544769932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760453253
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2429464764\">PR review comment</a>:</p>\n<blockquote>\n<p>For this I'd say it's reasonable to unconditionally call <code>wasmtime_sync_lock_free</code> and leave it up to the implementation to be a noop if the lock was never actually used.</p>\n</blockquote>",
        "id": 544769939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760453253
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2429472392\">PR review comment</a>:</p>\n<blockquote>\n<p>If possible let's keep this removed because that means that <code>cargo test</code> will still test this module's internals and run the <code>#[cfg(test)]</code> module, otherwise the tests won't run at all.</p>\n</blockquote>",
        "id": 544769940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760453253
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2429457515\">PR review comment</a>:</p>\n<blockquote>\n<p>I might recommend dropping this field in the guards and accessing it directly from <code>self.lock</code> to shrink the size of the guard</p>\n</blockquote>",
        "id": 544769941,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760453253
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2429456089\">PR review comment</a>:</p>\n<blockquote>\n<p>Hm ok on second though I don't think I fully thought this through. Fully thinking this through now, I think let's actually delete the <code>*_new</code> functions entirely. Any lazy initialization, if necessary, can be done by <code>wasmtime_sync_rwlock_write</code> here for example. The C API would then have two documented guarantees:</p>\n<ul>\n<li>Freshly initialized locks will always have a zero pattern for initialization.</li>\n<li><code>*_free</code> may be called on a lock that was initialized but never used (e.g. is a zero pattern)</li>\n</ul>\n<p>That still allows for lazy init and means that wasmtime never explicitly calls <code>*_new</code> and defers initialization, if any, to the implementation. </p>\n<p>Basically otherwise it feels a bit odd calling <code>*_new</code> on each operation. Apologies for the confusion!</p>\n</blockquote>",
        "id": 544769942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760453253
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2429475893\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think that this is a valid implementation of the API because if locks are acquired in order then this could cause a deadlock by having multiple locks get mapped to the same lock. I think for the sample implementation here heap allocation will be needed.</p>\n</blockquote>",
        "id": 544769944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760453253
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2429463051\">PR review comment</a>:</p>\n<blockquote>\n<p>Dropping the lock here will want to happen as part of a <code>Drop</code>-based destructor instead of manually here to handle panicking, for example, in the constructor</p>\n</blockquote>",
        "id": 544769945,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760453253
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2429470401\">PR review comment</a>:</p>\n<blockquote>\n<p>Also I think it'd help cut down on some duplication by placing this <code>Drop</code> implementation on <code>HostLock</code> above to avoid having it both here and for <code>Mutex&lt;T&gt;</code></p>\n</blockquote>",
        "id": 544769948,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760453253
    },
    {
        "content": "<p>salmans updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 544848255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760481627
    },
    {
        "content": "<p>salmans updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 544849244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760482420
    },
    {
        "content": "<p>salmans submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#pullrequestreview-3337835621\">PR review</a>.</p>",
        "id": 544850732,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760483493
    },
    {
        "content": "<p>salmans created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#discussion_r2430718630\">PR review comment</a>:</p>\n<blockquote>\n<p>Good catch, thank you!<br>\nI pushed a couple of new commits, addressing your previous comments as well as this one. The example is now using heap allocation but I guess it's fine to use <code>stdlib</code> here. Also when running tests locally, I discovered a race condition (when running ~500 threads concurrently), so added CAS logic, which fix the issue.</p>\n</blockquote>",
        "id": 544850735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760483493
    },
    {
        "content": "<p>salmans updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 544883697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760508673
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#pullrequestreview-3340856920\">PR review</a>:</p>\n<blockquote>\n<p>Thanks again for your work on this!</p>\n</blockquote>",
        "id": 544990690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760539996
    },
    {
        "content": "<p>salmans <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#issuecomment-3406937265\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>:</p>\n<blockquote>\n<p>Thanks so much for your feedback and the quick turnaround!</p>\n</blockquote>",
        "id": 544994632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760540954
    },
    {
        "content": "<p>salmans <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#issuecomment-3411184300\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>:</p>\n<blockquote>\n<p>@alexcrichton this apparently got kicked out of the merge queue. Do you mind trying one more time? Thanks again!</p>\n</blockquote>",
        "id": 545345580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760624849
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#issuecomment-3411201402\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>:</p>\n<blockquote>\n<p>Oh that's because of the <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/18533087678/job/52820896339\">test failure</a> that happened. I think there's a different version of bindgen installed in CI than you were running locally, and it's fine to either update CI or downgrade your version locally, whichever's easiest for you</p>\n</blockquote>",
        "id": 545347007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760625072
    },
    {
        "content": "<p><strong>salmans</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 545390964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760631633
    },
    {
        "content": "<p><strong>salmans</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 545390966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760631633
    },
    {
        "content": "<p>salmans updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 545390968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760631633
    },
    {
        "content": "<p>salmans <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#issuecomment-3411747291\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>:</p>\n<blockquote>\n<p>Ah thank you! I updated the CI version. It should be good now.</p>\n</blockquote>",
        "id": 545399817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760633074
    },
    {
        "content": "<p>salmans <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#issuecomment-3411947686\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>:</p>\n<blockquote>\n<p>This got bounced again but I'm not able to see any logs.</p>\n</blockquote>",
        "id": 545409378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760635561
    },
    {
        "content": "<p>salmans deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#issuecomment-3411947686\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>:</p>\n<blockquote>\n<p>This got bounced again but I'm not able to see any logs.</p>\n</blockquote>",
        "id": 545409645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760635641
    },
    {
        "content": "<p>salmans updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 545410615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760635927
    },
    {
        "content": "<p>salmans <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836#issuecomment-3412007660\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>:</p>\n<blockquote>\n<p>I had accidentally edited the comments in the header file generated by cbindgen, which caused the PR get rejected again (sorry about that!). It should be fine now.</p>\n</blockquote>",
        "id": 545411293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760636092
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11836\">PR #11836</a>.</p>",
        "id": 545430669,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760642699
    }
]