[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>The <code>bindgen!</code> macro was redesigned in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11328\">https://github.com/bytecodealliance/wasmtime/pull/11328</a> to have a more flexible configuration of imports/exports/flags. One of the motivations for doing this was to expose the concept of <code>store</code> as a flag on imported functions. Component-model-async imports, for example, get access to the store plus get to be async through the <code>Accessor</code> type. This is a pretty powerful feature compared to what we had prior where you only get <code>&amp;self</code> or <code>&amp;mut self</code>. While using <code>self</code> is more ergonomic it loses expressive power because the store can't be used during the import.</p>\n<p>With #11328 it's now possible to say this through a flag where <code>imports: { default: store }</code> in theory means \"all imports have access to the <code>Store</code>\". Currently, however, this is unimplemented and just panics. The purpose of this issue is to track the implementation of this feature and serve as a discussion point for it.</p>\n<p>In my head what I was thinking is something along the lines of:</p>\n<ul>\n<li>Currently <code>\"foo\": async</code> and <code>\"foo\": async | store</code> works. </li>\n<li>Currently <em>nothing</em> works and <code>\"foo\": store</code> does not work. This issue is about fixing that.</li>\n<li>When using <code>async | store</code> a <code>HostWithStore</code> trait is created. Functions are defined as <code>async fn</code> in Rust and the store is provided as an <code>&amp;Accessor&lt;...&gt;</code></li>\n<li>With using just <code>store</code> my thinking is that it should also put the function in the <code>HostWithStore</code> trait. The function signature would be just a plain <code>fn</code> and it would take an <code>Access&lt;...&gt;</code> (not an <code>Accessor&lt;...&gt;</code>)</li>\n<li>\n<p>This will require one of two routes. I've no preference to which:</p>\n<ol>\n<li><code>\"foo\": store</code> will require the <code>component-model-async</code> feature</li>\n<li>The <code>Access</code> and <code>Accessor</code> types need to not be gated by <code>component-model-async</code></li>\n</ol>\n</li>\n</ul>\n<p>After all this the idea then is that <code>\"foo\": store</code> is a valid and supported configuration. Hosts then implement <code>HostWithStore</code> and the <code>Access</code> provides access to <code>&amp;mut self</code> just as it does today but it additionally provides access to the <code>StoreContextMut&lt;T&gt;</code> through the <code>AsContextMut</code> implementation.</p>\n</blockquote>",
        "id": 537338845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756835931
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime:api label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">Issue #11590</a>.</p>",
        "id": 537338848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756835931
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:component-model label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">Issue #11590</a>.</p>",
        "id": 537338850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756835932
    },
    {
        "content": "<p>fuzing <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590#issuecomment-3246715544\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>Hi Alex -</p>\n<p>I have a rust embedded wasmtime that's utilizing components and has a wit file as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">:</span><span class=\"nc\">runtime</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"n\">expensivefunction</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n\n<span class=\"w\">   </span><span class=\"c1\">// other function definitions here</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"o\">-</span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I would like to implement the <code>expensivefunction</code> function such that it has access to the store (potentially through my custom state):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"with-imports\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">expensivefunction</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// need access to my store here........ see below for details</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// other function implementations go here</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I've spent a good while attempting to add (a clone of) my store to my state, such that <code>expensivefunction</code> has access to the store - e.g. something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">// adding the store to state</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">CustomState</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"with-imports\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">expensivefunction</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// we want this function to 'burn fuel' because it's expensive to run, so we'd like access to our store</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// can safely unwrap option because we know it's set up prior to anyone calling</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">current_fuel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">get_fuel</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"cannot get fuel\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// set_fuel doesn't tolerate underflow, so make sure we don't do that!</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">actual_charge</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">cmp</span><span class=\"p\">::</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">current_fuel</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100_000</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"n\">current_fuel</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">actual_charge</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"error setting fuel\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">        </span><span class=\"c1\">// do expensive things after accounting for it by burning 100_000 worth of fuel</span>\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// other function implementations go here</span>\n\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"o\">..</span>\n<span class=\"w\">   </span><span class=\"o\">..</span>\n<span class=\"w\">   </span><span class=\"c1\">//</span>\n<span class=\"w\">   </span><span class=\"c1\">// prior to this line is boilerplate to set up the wasmtime engine with the appropriate options</span>\n<span class=\"w\">   </span><span class=\"c1\">//</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"c1\">// we don't have a store yet, so set to None for now</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">program_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"target/wasm32-unknown-unknown/release/wasm_component.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_binary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">program_bytes</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Component Linker</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ComponentLinker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">CustomState</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"n\">FUEL_LIMIT</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// this doesn't work - can't be cloned - how to access?</span>\n<span class=\"w\">    </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// add the with imports component to the linker</span>\n<span class=\"w\">    </span><span class=\"n\">WithImports</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">HasSelf</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">state</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n\n<span class=\"w\">     </span><span class=\"c1\">// below here is boilerplate to call a `run` function in our `wasm_component.wasm` component</span>\n<span class=\"w\">     </span><span class=\"c1\">//  if/when this component's `run` function calls our hosted `expensivefunction` we'd like it to</span>\n<span class=\"w\">     </span><span class=\"c1\">//  access the store and burn some extra fuel as demonstrated above</span>\n<span class=\"w\">    </span><span class=\"o\">..</span>\n<span class=\"w\">    </span><span class=\"o\">..</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Can you tell me whether the planned implementation outlined in this issue might help me with this - or whether there's another way to achieve my objective (i.e. getting access to the store from the <code>expensivefunction</code> implementation?</p>\n<p>Many thanks for a great project!</p>\n</blockquote>",
        "id": 537360318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756845389
    },
    {
        "content": "<p>fuzing edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590#issuecomment-3246715544\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>Hi Alex -</p>\n<p>I have a rust embedded wasmtime that's utilizing components and has a wit file as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">:</span><span class=\"nc\">runtime</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"n\">expensivefunction</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n\n<span class=\"w\">   </span><span class=\"c1\">// other function definitions here</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"o\">-</span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I would like to implement the <code>expensivefunction</code> function such that it has access to the store (potentially through my custom state):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"with-imports\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">expensivefunction</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// need access to my store here........ see below for details</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// other function implementations go here</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I've spent a good while attempting to add (a clone of) my store to my state, such that <code>expensivefunction</code> has access to the store - e.g. something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">// adding the store to state</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">CustomState</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"with-imports\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">expensivefunction</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// we want this function to 'burn fuel' because it's expensive to run, so we'd like access to our store</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// can safely unwrap option because we know it's set up prior to anyone calling</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">current_fuel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">get_fuel</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"cannot get fuel\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// set_fuel doesn't tolerate underflow, so make sure we don't do that!</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">actual_charge</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">cmp</span><span class=\"p\">::</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">current_fuel</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100_000</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"n\">current_fuel</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">actual_charge</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"error setting fuel\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">        </span><span class=\"c1\">// do expensive things after accounting for it by burning 100_000 worth of fuel</span>\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// other function implementations go here</span>\n\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"o\">..</span>\n<span class=\"w\">   </span><span class=\"o\">..</span>\n<span class=\"w\">   </span><span class=\"c1\">//</span>\n<span class=\"w\">   </span><span class=\"c1\">// prior to this line is boilerplate to set up the wasmtime engine with the appropriate options</span>\n<span class=\"w\">   </span><span class=\"c1\">//</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"c1\">// we don't have a store yet, so set to None for now</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">program_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"target/wasm32-unknown-unknown/release/wasm_component.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_binary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">program_bytes</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Component Linker</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ComponentLinker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">CustomState</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"n\">FUEL_LIMIT</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// this doesn't work - can't be cloned - how to access?</span>\n<span class=\"w\">    </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// add the with imports component to the linker</span>\n<span class=\"w\">    </span><span class=\"n\">WithImports</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">HasSelf</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">state</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n\n<span class=\"w\">     </span><span class=\"c1\">// below here is boilerplate to call a `run` function in our `wasm_component.wasm` component</span>\n<span class=\"w\">     </span><span class=\"c1\">//  if/when this component's `run` function calls our hosted `expensivefunction` we'd like it to</span>\n<span class=\"w\">     </span><span class=\"c1\">//  access the store and burn some extra fuel as demonstrated above</span>\n<span class=\"w\">    </span><span class=\"o\">..</span>\n<span class=\"w\">    </span><span class=\"o\">..</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Unfortunately, I can't see a way to add the store to my state because it appears to be non-clonable.</p>\n<p>Can you tell me whether the planned implementation outlined in this issue might help me with this - or whether there's another way to achieve my objective (i.e. getting access to the store from the <code>expensivefunction</code> implementation?</p>\n<p>Many thanks for a great project!</p>\n</blockquote>",
        "id": 537360605,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756845521
    },
    {
        "content": "<p>fuzing edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590#issuecomment-3246715544\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>Hi Alex -</p>\n<p>I have a rust embedded wasmtime that's utilizing components and has a wit file as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">:</span><span class=\"nc\">runtime</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"n\">expensivefunction</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n\n<span class=\"w\">   </span><span class=\"c1\">// other function definitions here</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"o\">-</span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I would like to implement the <code>expensivefunction</code> function such that it has access to the store (potentially through my custom state):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"with-imports\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">expensivefunction</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// need access to my store here........ see below for details</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// other function implementations go here</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I've spent a good while attempting to add (a clone of) my store to my state, such that <code>expensivefunction</code> has access to the store - e.g. something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">// adding the store to state</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">CustomState</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"with-imports\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">expensivefunction</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// we want this function to 'burn fuel' because it's expensive to run, so we'd like access to our store</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// can safely unwrap option because we know it's set up prior to anyone calling</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">current_fuel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">get_fuel</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"cannot get fuel\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// set_fuel doesn't tolerate underflow, so make sure we don't do that!</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">actual_charge</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">cmp</span><span class=\"p\">::</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">current_fuel</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100_000</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"n\">current_fuel</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">actual_charge</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"error setting fuel\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">        </span><span class=\"c1\">// do expensive things after accounting for it by burning 100_000 worth of fuel</span>\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// other function implementations go here</span>\n\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"o\">..</span>\n<span class=\"w\">   </span><span class=\"o\">..</span>\n<span class=\"w\">   </span><span class=\"c1\">//</span>\n<span class=\"w\">   </span><span class=\"c1\">// prior to this line is boilerplate to set up the wasmtime engine with the appropriate options</span>\n<span class=\"w\">   </span><span class=\"c1\">//</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"c1\">// we don't have a store yet, so set to None for now</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">program_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"target/wasm32-unknown-unknown/release/wasm_component.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_binary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">program_bytes</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Component Linker</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ComponentLinker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">CustomState</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"n\">FUEL_LIMIT</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// this doesn't work - can't be cloned - how to access?</span>\n<span class=\"w\">    </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// add the with imports component to the linker</span>\n<span class=\"w\">    </span><span class=\"n\">WithImports</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">HasSelf</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">state</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n\n<span class=\"w\">     </span><span class=\"c1\">// below here is boilerplate to call a `run` function in our `wasm_component.wasm` component</span>\n<span class=\"w\">     </span><span class=\"c1\">//  if/when this component's `run` function calls our hosted `expensivefunction` we'd like it to</span>\n<span class=\"w\">     </span><span class=\"c1\">//  access the store and burn some extra fuel as demonstrated above</span>\n<span class=\"w\">    </span><span class=\"o\">..</span>\n<span class=\"w\">    </span><span class=\"o\">..</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>We're currently using <code>wasmer</code> and are hoping to move to wasmtime - the mechanism I'm attempting above is used to inject the store into one's state for <code>wasmer</code>'s embedding, but wasmer's store is behind an Arc&lt;Mutex&gt; so the Arc can be cloned and the mutex unlocked when contention free access is desired.</p>\n<p>Unfortunately with wasmtime, I can't see a way to add the store to my state because it appears to be non-clonable.</p>\n<p>Can you tell me whether the planned implementation outlined in this issue might help me with this - or whether there's another way to achieve my objective (i.e. getting access to the store from the <code>expensivefunction</code> implementation?</p>\n<p>Many thanks for a great project!</p>\n</blockquote>",
        "id": 537361384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756845895
    },
    {
        "content": "<p>fuzing edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590#issuecomment-3246715544\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>Hi Alex -</p>\n<p>I have a rust embedded wasmtime that's utilizing components and has a wit file as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">:</span><span class=\"nc\">runtime</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"n\">expensivefunction</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n\n<span class=\"w\">   </span><span class=\"c1\">// other function definitions here</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"o\">-</span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I would like to implement the <code>expensivefunction</code> function such that it has access to the store (potentially through my custom state):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"with-imports\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">expensivefunction</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// need access to my store here........ see below for details</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// other function implementations go here</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I've spent a good while attempting to add (a clone of) my store to my state, such that <code>expensivefunction</code> has access to the store - e.g. something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">// adding the store to state</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">CustomState</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"with-imports\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">expensivefunction</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// we want this function to 'burn fuel' because it's expensive to run, so we'd like access to our store</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// can safely unwrap option because we know it's set up prior to anyone calling</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">current_fuel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">get_fuel</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"cannot get fuel\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// set_fuel doesn't tolerate underflow, so make sure we don't do that!</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">actual_charge</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">cmp</span><span class=\"p\">::</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">current_fuel</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100_000</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"n\">current_fuel</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">actual_charge</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"error setting fuel\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">        </span><span class=\"c1\">// do expensive things after accounting for it by burning 100_000 worth of fuel</span>\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// other function implementations go here</span>\n\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"o\">..</span>\n<span class=\"w\">   </span><span class=\"o\">..</span>\n<span class=\"w\">   </span><span class=\"c1\">//</span>\n<span class=\"w\">   </span><span class=\"c1\">// prior to this line is boilerplate to set up the wasmtime engine with the appropriate options</span>\n<span class=\"w\">   </span><span class=\"c1\">//</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"c1\">// we don't have a store yet, so set to None for now</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">program_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"target/wasm32-unknown-unknown/release/wasm_component.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_binary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">program_bytes</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Component Linker</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ComponentLinker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">CustomState</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"n\">FUEL_LIMIT</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// this doesn't work - can't be cloned - how to access?</span>\n<span class=\"w\">    </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// add the with imports component to the linker</span>\n<span class=\"w\">    </span><span class=\"n\">WithImports</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">HasSelf</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">state</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n\n<span class=\"w\">     </span><span class=\"c1\">// below here is boilerplate to call a `run` function in our `wasm_component.wasm` component</span>\n<span class=\"w\">     </span><span class=\"c1\">//  if/when this component's `run` function calls our hosted `expensivefunction` we'd like it to</span>\n<span class=\"w\">     </span><span class=\"c1\">//  access the store and burn some extra fuel as demonstrated above</span>\n<span class=\"w\">    </span><span class=\"o\">..</span>\n<span class=\"w\">    </span><span class=\"o\">..</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>We're currently using <code>wasmer</code> and are hoping to move to wasmtime - the mechanism I'm attempting above is used to inject the store into one's state for <code>wasmer</code>'s embedding, but wasmer's store is behind an Arc-Mutex so a clone().unlock() can be used for contention free access.</p>\n<p>Unfortunately with wasmtime, I can't see a way to add the store to my state because it appears to be non-clonable.</p>\n<p>Can you tell me whether the planned implementation outlined in this issue might help me with this - or whether there's another way to achieve my objective (i.e. getting access to the store from the <code>expensivefunction</code> implementation?</p>\n<p>Many thanks for a great project!</p>\n</blockquote>",
        "id": 537361690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756846030
    },
    {
        "content": "<p>fuzing edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590#issuecomment-3246715544\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>Hi Alex (@alexcrichton ) -</p>\n<p>I have a rust embedded wasmtime that's utilizing components and has a wit file as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">:</span><span class=\"nc\">runtime</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"n\">expensivefunction</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n\n<span class=\"w\">   </span><span class=\"c1\">// other function definitions here</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"o\">-</span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I would like to implement the <code>expensivefunction</code> function such that it has access to the store (potentially through my custom state):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"with-imports\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">expensivefunction</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// need access to my store here........ see below for details</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// other function implementations go here</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I've spent a good while attempting to add (a clone of) my store to my state, such that <code>expensivefunction</code> has access to the store - e.g. something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">// adding the store to state</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">CustomState</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"with-imports\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">expensivefunction</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// we want this function to 'burn fuel' because it's expensive to run, so we'd like access to our store</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// can safely unwrap option because we know it's set up prior to anyone calling</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">current_fuel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">get_fuel</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"cannot get fuel\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// set_fuel doesn't tolerate underflow, so make sure we don't do that!</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">actual_charge</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">cmp</span><span class=\"p\">::</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">current_fuel</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100_000</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"n\">current_fuel</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">actual_charge</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"error setting fuel\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">        </span><span class=\"c1\">// do expensive things after accounting for it by burning 100_000 worth of fuel</span>\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// other function implementations go here</span>\n\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"o\">..</span>\n<span class=\"w\">   </span><span class=\"o\">..</span>\n<span class=\"w\">   </span><span class=\"c1\">//</span>\n<span class=\"w\">   </span><span class=\"c1\">// prior to this line is boilerplate to set up the wasmtime engine with the appropriate options</span>\n<span class=\"w\">   </span><span class=\"c1\">//</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"c1\">// we don't have a store yet, so set to None for now</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">program_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"target/wasm32-unknown-unknown/release/wasm_component.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_binary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">program_bytes</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Component Linker</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ComponentLinker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">CustomState</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"n\">FUEL_LIMIT</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// this doesn't work - can't be cloned - how to access?</span>\n<span class=\"w\">    </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// add the with imports component to the linker</span>\n<span class=\"w\">    </span><span class=\"n\">WithImports</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">HasSelf</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">state</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n\n<span class=\"w\">     </span><span class=\"c1\">// below here is boilerplate to call a `run` function in our `wasm_component.wasm` component</span>\n<span class=\"w\">     </span><span class=\"c1\">//  if/when this component's `run` function calls our hosted `expensivefunction` we'd like it to</span>\n<span class=\"w\">     </span><span class=\"c1\">//  access the store and burn some extra fuel as demonstrated above</span>\n<span class=\"w\">    </span><span class=\"o\">..</span>\n<span class=\"w\">    </span><span class=\"o\">..</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>We're currently using <code>wasmer</code> and are hoping to move to wasmtime - the mechanism I'm attempting above is used to inject the store into one's state for <code>wasmer</code>'s embedding, but wasmer's store is behind an Arc-Mutex so a clone().unlock() can be used for contention free access.</p>\n<p>Unfortunately with wasmtime, I can't see a way to add the store to my state because it appears to be non-clonable.</p>\n<p>Can you tell me whether the planned implementation outlined in this issue might help me with this - or whether there's another way to achieve my objective (i.e. getting access to the store from the <code>expensivefunction</code> implementation?</p>\n<p>Many thanks for a great project!</p>\n</blockquote>",
        "id": 537372392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756851593
    },
    {
        "content": "<p>fuzing edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590#issuecomment-3246715544\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>Hi Alex (@alexcrichton ) -</p>\n<p>Our wasmtime embedding is required to be strictly deterministic, and hence all component functions are synchronous.  I'm hoping this issue may address our need to avail our host implemented component functions with a mutable reference to the store.</p>\n<p>I have a rust embedded wasmtime that's utilizing components and has a wit file as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">:</span><span class=\"nc\">runtime</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"n\">expensivefunction</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n\n<span class=\"w\">   </span><span class=\"c1\">// other function definitions here</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"o\">-</span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I would like to implement the <code>expensivefunction</code> function such that it has access to the store (potentially through my custom state):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"with-imports\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">expensivefunction</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// need access to my store here........ see below for details</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// other function implementations go here</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I've spent a good while attempting to add (a clone of) my store to my state, such that <code>expensivefunction</code> has access to the store - e.g. something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">// adding the store to state</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">CustomState</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"with-imports\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">expensivefunction</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// we want this function to 'burn fuel' because it's expensive to run, so we'd like access to our store</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// can safely unwrap option because we know it's set up prior to anyone calling</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">current_fuel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">get_fuel</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"cannot get fuel\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// set_fuel doesn't tolerate underflow, so make sure we don't do that!</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">actual_charge</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">cmp</span><span class=\"p\">::</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">current_fuel</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100_000</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"n\">current_fuel</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">actual_charge</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"error setting fuel\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">        </span><span class=\"c1\">// do expensive things after accounting for it by burning 100_000 worth of fuel</span>\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// other function implementations go here</span>\n\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"o\">..</span>\n<span class=\"w\">   </span><span class=\"o\">..</span>\n<span class=\"w\">   </span><span class=\"c1\">//</span>\n<span class=\"w\">   </span><span class=\"c1\">// prior to this line is boilerplate to set up the wasmtime engine with the appropriate options</span>\n<span class=\"w\">   </span><span class=\"c1\">//</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CustomState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"c1\">// we don't have a store yet, so set to None for now</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">program_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"target/wasm32-unknown-unknown/release/wasm_component.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_binary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">program_bytes</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Component Linker</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ComponentLinker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">CustomState</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"n\">FUEL_LIMIT</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// this doesn't work - can't be cloned - how to access?</span>\n<span class=\"w\">    </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span>\n\n\n<span class=\"w\">    </span><span class=\"c1\">// add the with imports component to the linker</span>\n<span class=\"w\">    </span><span class=\"n\">WithImports</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">HasSelf</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">state</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n\n<span class=\"w\">     </span><span class=\"c1\">// below here is boilerplate to call a `run` function in our `wasm_component.wasm` component</span>\n<span class=\"w\">     </span><span class=\"c1\">//  if/when this component's `run` function calls our hosted `expensivefunction` we'd like it to</span>\n<span class=\"w\">     </span><span class=\"c1\">//  access the store and burn some extra fuel as demonstrated above</span>\n<span class=\"w\">    </span><span class=\"o\">..</span>\n<span class=\"w\">    </span><span class=\"o\">..</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>We're currently using <code>wasmer</code> and are hoping to move to wasmtime - the mechanism I'm attempting above is used to inject the store into one's state for <code>wasmer</code>'s embedding, but wasmer's store is behind an Arc-Mutex so a clone().unlock() can be used for contention free access.</p>\n<p>Unfortunately with wasmtime, I can't see a way to add the store to my state because it appears to be non-clonable.</p>\n<p>Can you tell me whether the planned implementation outlined in this issue might help me with this - or whether there's another way to achieve my objective (i.e. getting access to the store from the <code>expensivefunction</code> implementation?</p>\n<p>Many thanks for a great project!</p>\n</blockquote>",
        "id": 537381311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756858520
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590#issuecomment-3250433921\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>Makes sense, thanks for explaining. And yes, the feature described here should solve your use case. You'll be able to manipulate the store directly since your host function will be given <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Access.html\">one of these</a> through which you can get <code>StoreContextMut</code> through which you can manipulate fuel.</p>\n</blockquote>",
        "id": 537538100,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756926397
    },
    {
        "content": "<p>fuzing <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590#issuecomment-3250661024\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>Fantastic - thanks for the feedback.  I'll be sure to put this through its paces once implemented.  Cheers!</p>\n</blockquote>",
        "id": 537549035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756931027
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>The <code>bindgen!</code> macro was redesigned in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11328\">https://github.com/bytecodealliance/wasmtime/pull/11328</a> to have a more flexible configuration of imports/exports/flags. One of the motivations for doing this was to expose the concept of <code>store</code> as a flag on imported functions. Component-model-async imports, for example, get access to the store plus get to be async through the <code>Accessor</code> type. This is a pretty powerful feature compared to what we had prior where you only get <code>&amp;self</code> or <code>&amp;mut self</code>. While using <code>self</code> is more ergonomic it loses expressive power because the store can't be used during the import.</p>\n<p>With #11328 it's now possible to say this through a flag where <code>imports: { default: store }</code> in theory means \"all imports have access to the <code>Store</code>\". Currently, however, this is unimplemented and just panics. The purpose of this issue is to track the implementation of this feature and serve as a discussion point for it.</p>\n<p>In my head what I was thinking is something along the lines of:</p>\n<ul>\n<li>Currently <code>\"foo\": async</code> and <code>\"foo\": async | store</code> works. </li>\n<li>Currently <em>nothing</em> works and <code>\"foo\": store</code> does not work. This issue is about fixing that.</li>\n<li>When using <code>async | store</code> a <code>HostWithStore</code> trait is created. Functions are defined as <code>async fn</code> in Rust and the store is provided as an <code>&amp;Accessor&lt;...&gt;</code></li>\n<li>With using just <code>store</code> my thinking is that it should also put the function in the <code>HostWithStore</code> trait. The function signature would be just a plain <code>fn</code> and it would take an <code>Access&lt;...&gt;</code> (not an <code>Accessor&lt;...&gt;</code>)</li>\n<li>\n<p>This will require one of two routes. I've no preference to which:</p>\n<ol>\n<li><code>\"foo\": store</code> will require the <code>component-model-async</code> feature</li>\n<li>The <code>Access</code> and <code>Accessor</code> types need to not be gated by <code>component-model-async</code></li>\n</ol>\n</li>\n</ul>\n<p>After all this the idea then is that <code>\"foo\": store</code> is a valid and supported configuration. Hosts then implement <code>HostWithStore</code> and the <code>Access</code> provides access to <code>&amp;mut self</code> just as it does today but it additionally provides access to the <code>StoreContextMut&lt;T&gt;</code> through the <code>AsContextMut</code> implementation.</p>\n</blockquote>",
        "id": 537954504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757110834
    },
    {
        "content": "<p>fuzing <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590#issuecomment-3260053433\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>Just tested this new functionality and it works like a charm.</p>\n<p>One thing that might be of interest. <code>Access</code> is gated behind the <code>component-model-async</code> feature, which might not make sense any more.</p>\n<p>Thank you so much for your effort here - it's much appreciated <span aria-label=\"folded hands\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"folded hands\">:folded_hands:</span> </p>\n</blockquote>",
        "id": 537959924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757115463
    },
    {
        "content": "<p>alexcrichton reopened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>The <code>bindgen!</code> macro was redesigned in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11328\">https://github.com/bytecodealliance/wasmtime/pull/11328</a> to have a more flexible configuration of imports/exports/flags. One of the motivations for doing this was to expose the concept of <code>store</code> as a flag on imported functions. Component-model-async imports, for example, get access to the store plus get to be async through the <code>Accessor</code> type. This is a pretty powerful feature compared to what we had prior where you only get <code>&amp;self</code> or <code>&amp;mut self</code>. While using <code>self</code> is more ergonomic it loses expressive power because the store can't be used during the import.</p>\n<p>With #11328 it's now possible to say this through a flag where <code>imports: { default: store }</code> in theory means \"all imports have access to the <code>Store</code>\". Currently, however, this is unimplemented and just panics. The purpose of this issue is to track the implementation of this feature and serve as a discussion point for it.</p>\n<p>In my head what I was thinking is something along the lines of:</p>\n<ul>\n<li>Currently <code>\"foo\": async</code> and <code>\"foo\": async | store</code> works. </li>\n<li>Currently <em>nothing</em> works and <code>\"foo\": store</code> does not work. This issue is about fixing that.</li>\n<li>When using <code>async | store</code> a <code>HostWithStore</code> trait is created. Functions are defined as <code>async fn</code> in Rust and the store is provided as an <code>&amp;Accessor&lt;...&gt;</code></li>\n<li>With using just <code>store</code> my thinking is that it should also put the function in the <code>HostWithStore</code> trait. The function signature would be just a plain <code>fn</code> and it would take an <code>Access&lt;...&gt;</code> (not an <code>Accessor&lt;...&gt;</code>)</li>\n<li>\n<p>This will require one of two routes. I've no preference to which:</p>\n<ol>\n<li><code>\"foo\": store</code> will require the <code>component-model-async</code> feature</li>\n<li>The <code>Access</code> and <code>Accessor</code> types need to not be gated by <code>component-model-async</code></li>\n</ol>\n</li>\n</ul>\n<p>After all this the idea then is that <code>\"foo\": store</code> is a valid and supported configuration. Hosts then implement <code>HostWithStore</code> and the <code>Access</code> provides access to <code>&amp;mut self</code> just as it does today but it additionally provides access to the <code>StoreContextMut&lt;T&gt;</code> through the <code>AsContextMut</code> implementation.</p>\n</blockquote>",
        "id": 538108931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757283571
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590#issuecomment-3264108365\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>Yeah that's one where it's possible to ungate it outside of component-model-async but the feature is likely to be on-by-default in the near future so I figured it's fine to leave it there for now</p>\n</blockquote>",
        "id": 538108932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757283571
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>The <code>bindgen!</code> macro was redesigned in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11328\">https://github.com/bytecodealliance/wasmtime/pull/11328</a> to have a more flexible configuration of imports/exports/flags. One of the motivations for doing this was to expose the concept of <code>store</code> as a flag on imported functions. Component-model-async imports, for example, get access to the store plus get to be async through the <code>Accessor</code> type. This is a pretty powerful feature compared to what we had prior where you only get <code>&amp;self</code> or <code>&amp;mut self</code>. While using <code>self</code> is more ergonomic it loses expressive power because the store can't be used during the import.</p>\n<p>With #11328 it's now possible to say this through a flag where <code>imports: { default: store }</code> in theory means \"all imports have access to the <code>Store</code>\". Currently, however, this is unimplemented and just panics. The purpose of this issue is to track the implementation of this feature and serve as a discussion point for it.</p>\n<p>In my head what I was thinking is something along the lines of:</p>\n<ul>\n<li>Currently <code>\"foo\": async</code> and <code>\"foo\": async | store</code> works. </li>\n<li>Currently <em>nothing</em> works and <code>\"foo\": store</code> does not work. This issue is about fixing that.</li>\n<li>When using <code>async | store</code> a <code>HostWithStore</code> trait is created. Functions are defined as <code>async fn</code> in Rust and the store is provided as an <code>&amp;Accessor&lt;...&gt;</code></li>\n<li>With using just <code>store</code> my thinking is that it should also put the function in the <code>HostWithStore</code> trait. The function signature would be just a plain <code>fn</code> and it would take an <code>Access&lt;...&gt;</code> (not an <code>Accessor&lt;...&gt;</code>)</li>\n<li>\n<p>This will require one of two routes. I've no preference to which:</p>\n<ol>\n<li><code>\"foo\": store</code> will require the <code>component-model-async</code> feature</li>\n<li>The <code>Access</code> and <code>Accessor</code> types need to not be gated by <code>component-model-async</code></li>\n</ol>\n</li>\n</ul>\n<p>After all this the idea then is that <code>\"foo\": store</code> is a valid and supported configuration. Hosts then implement <code>HostWithStore</code> and the <code>Access</code> provides access to <code>&amp;mut self</code> just as it does today but it additionally provides access to the <code>StoreContextMut&lt;T&gt;</code> through the <code>AsContextMut</code> implementation.</p>\n</blockquote>",
        "id": 538108936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757283576
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590#issuecomment-3264108405\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>er, wrong button</p>\n</blockquote>",
        "id": 538108937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757283576
    },
    {
        "content": "<p>anlavandier <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590#issuecomment-3298847605\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<blockquote>\n<p>Yeah that's one where it's possible to ungate it outside of component-model-async but the feature is likely to be on-by-default in the near future so I figured it's fine to leave it there for now</p>\n</blockquote>\n<p>Hi, I would like to point out that the <code>component-model-async</code> is incompatible with <code>no_std</code> use cases so if it's possible to ungate <code>Acess</code> to use this with <code>no_std</code> it would be much appreciated.</p>\n</blockquote>",
        "id": 539773166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758030267
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590#issuecomment-3300131222\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<p>Mind opening an issue for that?</p>\n</blockquote>",
        "id": 539882401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758052045
    },
    {
        "content": "<p>anlavandier <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590#issuecomment-3301996525\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11590\">issue #11590</a>:</p>\n<blockquote>\n<blockquote>\n<p>Mind opening an issue for that?</p>\n</blockquote>\n<p>@alexcrichton did so, here's the issue #11705</p>\n</blockquote>",
        "id": 539961037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758099123
    }
]