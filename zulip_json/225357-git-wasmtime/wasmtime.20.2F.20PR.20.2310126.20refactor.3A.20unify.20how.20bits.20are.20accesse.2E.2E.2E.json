[
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126\">PR #10126</a>.</p>",
        "id": 496193530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738004643
    },
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126\">PR #10126</a> from <code>abrown:unify-entity-access</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>While using <code>MachLabel</code>, a <code>cranelift-entity</code>-created type, I noticed that there were three ways to access the contained bits: <code>.get()</code>, <code>.as_u32()</code>, and <code>.as_bits()</code>. All performed essentially the same function and it was unclear which to use.</p>\n<p>This change removes <code>MachLabel::get()</code>, replacing it with <code>as_u32()</code>. It also replaces all uses of <code>from_bits()</code> and <code>as_bits()</code> with <code>from_u32()</code> and <code>as_u32()</code>. Why? I would have preferred the \"bits\" naming since it seems more clear (\"just unwrap this thing\") and it could avoid a large rename if the type were changed in the future, I realized that there are vastly more uses of the \"u32\" naming that already exist--it's just easier.</p>\n<p>While this refactoring _should_ result in no functional change, you may notice a couple of failing tests related to a pre-existing check on <code>from_u32</code> that did not exist on <code>from_bits</code>. For some reason, <code>from_u32</code> asserted that we would never pick <code>u32::MAX</code> for an entity value; unfortunately, some parsing code, <code>decode_narrow_field</code>, does just this. Why did we have such an assertion in the first place? Is it still needed? Should <code>decode_narrow_field</code> do something else?</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 496193534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738004644
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126\">PR #10126</a>.</p>",
        "id": 496193536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738004644
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126\">PR #10126</a>.</p>",
        "id": 496193537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738004644
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126\">PR #10126</a>.</p>",
        "id": 496193538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738004644
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126#issuecomment-2616676360\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126\">PR #10126</a>:</p>\n<blockquote>\n<blockquote>\n<p>While this refactoring should result in no functional change, you may notice a couple of failing tests related to a pre-existing check on from_u32 that did not exist on from_bits. For some reason, from_u32 asserted that we would never pick u32::MAX for an entity value; unfortunately, some parsing code, decode_narrow_field, does just this. Why did we have such an assertion in the first place? Is it still needed? Should decode_narrow_field do something else?</p>\n</blockquote>\n<p>So I think you've run into the reason for the two separate pairs of methods (and we should document this better!): the <code>as_u32</code>/<code>from_u32</code> methods are meant to convert to and from the contained index, while the <code>as_bits</code>/<code>from_bits</code> are meant to convert to and from the underlying encoding.</p>\n<p>It so happens that these two representations coincide for all but one of the possible values. The divergence comes from what the entity index is encoding: it is conceptually an <code>Option&lt;Index&gt;</code>, with an in-band sentinel value that's used for none/invalid/<code>PackedOption</code> encoding/<code>Default</code>/etc. This is why the assert is present in the <code>u32</code> variants: it's meant to encode and decode only the \"present\" subset of the value space. Arguably we should have an assert in <code>as_u32</code> that prevents the sentinel value from leaking <em>out</em> as well; I'm not sure why one wasn't present.</p>\n<p>This is why the <code>ValueDataPacked</code> code is operating using the \"bits\" API: it is re-encoding the underlying bits into a larger packed struct, rather than operating on the surface/semantic level.</p>\n<p>I think <code>MachLabel::get()</code> is an artifact of an earlier representation and I'm happy to see it go away in favor of <code>as_u32</code>.</p>\n</blockquote>",
        "id": 496194602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738005098
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126#issuecomment-2616692406\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126\">PR #10126</a>:</p>\n<blockquote>\n<p>Yeah, as I look at it a bit more that makes sense. Something needs to change for <code>as_bits</code> and <code>from_bits</code> though because they seem to have been used elsewhere where we may have indeed wanted to avoid the sentinel...</p>\n</blockquote>",
        "id": 496195711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738005538
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126#issuecomment-2616711897\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126\">PR #10126</a>:</p>\n<blockquote>\n<p>One way to test that: perhaps temporarily change the encoding they return and accept by, say, flipping some bits -- <code>fn as_bits(&amp;self) -&gt; u32 { self.0 ^ 42 }</code> and likewise in <code>from_bits</code>. This should be a totally legal encoding change if we've kept to the right methods for low-level bit porting vs. access to the index. If we see test failures with that we should switch as needed to <code>.as_u32()</code>.</p>\n</blockquote>",
        "id": 496197256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738006154
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126\">PR #10126</a>.</p>",
        "id": 496198379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738006589
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126#pullrequestreview-2576430514\">PR review</a>.</p>",
        "id": 496202033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738007951
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126#discussion_r1931115506\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we write something about this being an opaque encoding instead? (Currently it sounds like the underlying representation being mostly equal is a documented feature)</p>\n<p>Something like: \"The raw bit encoding is opaque and has no guaranteed correspondence to the entity's index. It encodes the entire state of this index value: either a valid index or an invalid-index sentinel. The value returned by this method should only be passed to <code>from_bits</code>.\"</p>\n<p>and likewise below \"should only be given bits from <code>as_bits</code>\"</p>\n</blockquote>",
        "id": 496202034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738007951
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126\">PR #10126</a>.</p>",
        "id": 496213298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738012677
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126#issuecomment-2616914786\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126\">PR #10126</a>:</p>\n<blockquote>\n<p>(transferring my review to @cfallin who I think has this covered)</p>\n</blockquote>",
        "id": 496213365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738012689
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126\">PR #10126</a>.</p>",
        "id": 496218517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738015093
    },
    {
        "content": "<p>abrown has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126\">PR #10126</a>.</p>",
        "id": 496218549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738015108
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10126\">PR #10126</a>.</p>",
        "id": 496223439,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738017389
    }
]