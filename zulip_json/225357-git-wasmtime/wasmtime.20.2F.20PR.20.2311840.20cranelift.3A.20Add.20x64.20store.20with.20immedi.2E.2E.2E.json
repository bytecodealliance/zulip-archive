[
    {
        "content": "<p>jiang1997 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11840\">PR #11840</a> from <code>jiang1997:x64-store-imm-zero-optimization</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Add support for generating efficient <code>mov [mem], imm</code> instructions for immediate values, eliminating the need for temporary registers when storing constants.</p>\n<p>Changes:</p>\n<ul>\n<li>Add <code>Inst::store_imm()</code> function supporting immediate values for I8/I16/I32/I64 types with proper range checking</li>\n<li>Update stack probing to use direct immediate store</li>\n<li>Add comprehensive test coverage for all integer types and edge cases:<ul>\n<li>I8: full range (-128 to 127)</li>\n<li>I16: full range (-32768 to 32767)</li>\n<li>I32: full range (i32::MIN to i32::MAX)</li>\n<li>I64: sign-extended i32 range (hardware limitation)</li>\n</ul>\n</li>\n</ul>\n<p>The I64 type is limited to sign-extended i32 values (-2^31 to 2^31-1) due to x86-64 MOV instruction encoding constraints. Values outside this range will panic with a clear error message.</p>\n<p>Before: mov r10, 0x42; mov [rsp], r10  (2 instructions, needs register)<br>\nAfter:  mov dword ptr [rsp], 0x42      (1 instruction, no register)</p>\n<p>This addresses the TODO comment in <a href=\"http://abi.rs\">abi.rs</a> about wanting to store immediate values directly to memory without temporary registers.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 544383465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760259281
    },
    {
        "content": "<p><strong>jiang1997</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11840\">PR #11840</a>.</p>",
        "id": 544383467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760259282
    },
    {
        "content": "<p><strong>jiang1997</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11840\">PR #11840</a>.</p>",
        "id": 544383468,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760259282
    },
    {
        "content": "<p>jiang1997 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11840\">PR #11840</a>.</p>",
        "id": 544384401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760260163
    },
    {
        "content": "<p>jiang1997 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11840\">PR #11840</a>.</p>",
        "id": 544384960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760260794
    },
    {
        "content": "<p>jiang1997 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11840\">PR #11840</a>.</p>",
        "id": 544386603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760262610
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11840#pullrequestreview-3331865081\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for the PR!  What I might recommend instead though is that we've generally been moving away from <code>Inst</code>-style helpers to construct instructions with the advent of the x64 assembler crate. The one use case for <code>Inst::store_imm</code>, for example, can unconditionally use the <code>movl_mi</code> variant and there's no need for encoding tests or making API design decisions about whether out-of-bounds integers panic or such. </p>\n<p>What would you think about replacing the store on the stack here with <code>movl_mi</code> directly, and dropping the new <code>store_imm</code> helper?</p>\n</blockquote>",
        "id": 544567431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760365669
    },
    {
        "content": "<p>jiang1997 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11840\">PR #11840</a>.</p>",
        "id": 544607902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760381884
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11840#pullrequestreview-3332706205\">PR review</a>.</p>",
        "id": 544608152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760382015
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11840\">PR #11840</a>.</p>",
        "id": 544608173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760382021
    },
    {
        "content": "<p>jiang1997 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11840\">PR #11840</a>:</p>\n<blockquote>\n<ul>\n<li>Switch the probestack store to mov [rsp], 0 via movl_mi, still touching the page without writing %rsp back to memory.</li>\n<li>Updated the corresponding inline probestack filetests.</li>\n</ul>\n</blockquote>",
        "id": 544608254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760382072
    },
    {
        "content": "<p>jiang1997 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11840#issuecomment-3398766891\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11840\">PR #11840</a>:</p>\n<blockquote>\n<p>@alexcrichton<br>\nHey, just noticed that changing from <code>mov [rsp], esp</code> to <code>mov [rsp], 0</code> increases the instruction size from 3 bytes to 7 bytes.<br>\nIs this code size increase acceptable? Alternatively, we could keep <code>mov [rsp], rsp</code> and just document it in a comment (resolves the TODO while avoiding the size increase).</p>\n</blockquote>",
        "id": 544610203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760383266
    }
]