[
    {
        "content": "<p>akldc opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11133\">issue #11133</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_multi_ret_implicit_sret</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u1</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i8x16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"n\">const0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xfeffffffff0200008d0000000a000402</span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i8x16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">tail</span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"n\">u1</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">sig0</span>\n<span class=\"w\">    </span><span class=\"n\">const1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x60d64ffe6aed3a12b00dbe7bffb2bf3d</span>\n\n<span class=\"n\">block0</span><span class=\"p\">():</span>\n<span class=\"w\">    </span><span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">123</span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">234</span>\n<span class=\"w\">    </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">const1</span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v11</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">qemu</span><span class=\"o\">-</span><span class=\"n\">riscv64</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">riscv64gc</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">test1</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<h3>Result</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Segmentation</span><span class=\"w\"> </span><span class=\"n\">fault</span>\n</code></pre></div>\n<p>Return code: -11</p>\n<p>Clearly, the expected result should be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0x60d64ffe6aed3a12b00dbe7bffb2bf3d</span>\n</code></pre></div>\n</blockquote>",
        "id": 525713420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750858182
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11133\">Issue #11133</a>.</p>",
        "id": 525713421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750858182
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11133\">Issue #11133</a>.</p>",
        "id": 525713422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750858183
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11133#issuecomment-3004797687\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11133\">issue #11133</a>:</p>\n<blockquote>\n<p>On the caller side <code>u1:0</code> is defined with the tail calling convention, but the definition of this function uses the default calling convention (system_v). This is UB.</p>\n</blockquote>",
        "id": 525714048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750858365
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11133\">issue #11133</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_multi_ret_implicit_sret</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u1</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i8x16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"n\">const0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xfeffffffff0200008d0000000a000402</span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">i8x16</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i8x16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">tail</span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"n\">u1</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">sig0</span>\n<span class=\"w\">    </span><span class=\"n\">const1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x60d64ffe6aed3a12b00dbe7bffb2bf3d</span>\n\n<span class=\"n\">block0</span><span class=\"p\">():</span>\n<span class=\"w\">    </span><span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">123</span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">234</span>\n<span class=\"w\">    </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">const1</span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v11</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">qemu</span><span class=\"o\">-</span><span class=\"n\">riscv64</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">riscv64gc</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">test1</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<h3>Result</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Segmentation</span><span class=\"w\"> </span><span class=\"n\">fault</span>\n</code></pre></div>\n<p>Return code: -11</p>\n<p>Clearly, the expected result should be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0x60d64ffe6aed3a12b00dbe7bffb2bf3d</span>\n</code></pre></div>\n</blockquote>",
        "id": 525719652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750859943
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11133#issuecomment-3004887485\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11133\">issue #11133</a>:</p>\n<blockquote>\n<p>Agreed yes, the calling conventions need to match up</p>\n</blockquote>",
        "id": 525719656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750859943
    },
    {
        "content": "<p>akldc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11133#issuecomment-3012843046\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11133\">issue #11133</a>:</p>\n<blockquote>\n<p>@alexcrichton @bjorn3 <br>\nThe case runs correctly on other architectures.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">x86</span><span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Success</span>\n<span class=\"p\">[</span><span class=\"n\">x86</span><span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0x60d64ffe6aed3a12b00dbe7bffb2bf3d</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"p\">[</span><span class=\"n\">aarch64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Success</span>\n<span class=\"p\">[</span><span class=\"n\">aarch64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0x60d64ffe6aed3a12b00dbe7bffb2bf3d</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"p\">[</span><span class=\"n\">riscv64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Error</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">11</span>\n\n<span class=\"p\">[</span><span class=\"n\">s390x</span><span class=\"w\">  </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Success</span>\n<span class=\"p\">[</span><span class=\"n\">s390x</span><span class=\"w\">  </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0x60d64ffe6aed3a12b00dbe7bffb2bf3d</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 526072264,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751026860
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11133#issuecomment-3012897743\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11133\">issue #11133</a>:</p>\n<blockquote>\n<p>It likely just works by accident on those architectures.</p>\n</blockquote>",
        "id": 526073853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751027437
    }
]