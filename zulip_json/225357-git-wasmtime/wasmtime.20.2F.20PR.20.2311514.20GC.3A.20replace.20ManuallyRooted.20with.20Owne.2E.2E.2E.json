[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 535763276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755901462
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a> from <code>cfallin:owned-rooted-gc</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This implements the ideas from #11445: it replaces <code>ManuallyRooted</code>, which requires an explicit unroot action with a mut borrow of the store (making it impossible to implement in a standard <code>Drop</code> impl), with <code>OwnedRooted</code>, which holds an <code>Arc</code> only to a small auxiliary memory allocation (an <code>Arc&lt;()&gt;</code>) and uses this externalized \"liveness flag\" to allow for a <code>Store</code>-less drop. These liveness flags are scanned during a \"trim\" pass, which happens both when new owned roots are created, and just before a GC.</p>\n<p>This should greatly increase safety for host-side users of GC: it provides a way to have a handle whose ownership works like any other Rust value, alive until dropped. It is still not quite as efficient as LIFO-scoped handles (by analogy, for the same reason that individually-freed RAII types are not as efficient as arena allocation), so those remain for efficiency-minded users that have a clear picture of reference lifetimes.</p>\n<p>At some later time we may wish to use <code>OwnedRooted</code> exclusively rather than <code>Rooted</code>, and we may wish to rename <code>Rooted</code> to <code>ScopedRooted</code>, but I haven't done either of those things yet.</p>\n<p>I opted to <em>replace</em> <code>ManuallyRooted</code> rather than add a third kind of root, after discussion with fitzgen. One implication of this is that the C API's <code>anyref</code> and <code>externref</code> types are now 24 or 20 bytes rather than 16 (because of the <code>Arc</code> pointer), and correspondingly the Val union grew to that size. I <em>believe</em> this is an acceptable tradeoff, but I'm happy to put <code>ManuallyRooted</code> back if not.</p>\n<p>Fixes #11445.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 535763278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755901463
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 535763281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755901463
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 535763441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755901564
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>:</p>\n<blockquote>\n<p>This implements the ideas from #11445: it replaces <code>ManuallyRooted</code>, which requires an explicit unroot action with a mut borrow of the store (making it impossible to implement in a standard <code>Drop</code> impl), with <code>OwnedRooted</code>, which holds an <code>Arc</code> only to a small auxiliary memory allocation (an <code>Arc&lt;()&gt;</code>) and uses this externalized \"liveness flag\" to allow for a <code>Store</code>-less drop. These liveness flags are scanned during a \"trim\" pass, which happens both when new owned roots are created, and just before a GC.</p>\n<p>This should greatly increase safety for host-side users of GC: it provides a way to have a handle whose ownership works like any other Rust value, alive until dropped. It is still not quite as efficient as LIFO-scoped handles (by analogy, for the same reason that individually-freed RAII types are not as efficient as arena allocation), so those remain for efficiency-minded users that have a clear picture of reference lifetimes.</p>\n<p>At some later time we may wish to use <code>OwnedRooted</code> exclusively in our public APIs rather than <code>Rooted</code>, and we may wish to rename <code>Rooted</code> to <code>ScopedRooted</code>, but I haven't done either of those things yet.</p>\n<p>I opted to <em>replace</em> <code>ManuallyRooted</code> rather than add a third kind of root, after discussion with fitzgen. One implication of this is that the C API's <code>anyref</code> and <code>externref</code> types are now 24 or 20 bytes rather than 16 (because of the <code>Arc</code> pointer), and correspondingly the Val union grew to that size. I <em>believe</em> this is an acceptable tradeoff, but I'm happy to put <code>ManuallyRooted</code> back if not.</p>\n<p>Fixes #11445.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 535763467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755901572
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 535764569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755902363
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 535764592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755902389
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 535769375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755907177
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 535769854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755907576
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 535770067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755907820
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 535770432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755908302
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#issuecomment-3216179696\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\", \"wasmtime:c-api\", \"wasmtime:ref-types\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: wasmtime:ref-types</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 535777742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755918221
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#issuecomment-3216201375\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>:</p>\n<blockquote>\n<p>I've come up with a way to avoid the size growth on the C-API <code>ValUnion</code>, I think -- will update on Monday.</p>\n</blockquote>",
        "id": 535778802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755920026
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#issuecomment-3216201375\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>:</p>\n<blockquote>\n<p><del>I've come up with a way to avoid the size growth on the C-API <code>ValUnion</code>, I think -- will update on Monday.</del> (actually perhaps not: the idea was to put the <code>Weak</code> directly in the slab of owned GC ref roots, but then the trim pass requires iteration over the whole index space rather than only live roots. The original C API struct tweak is probably better than pessimizing the otherwise fairly good asymptotic behavior here for the common case)</p>\n</blockquote>",
        "id": 535782716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755925880
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#issuecomment-3220745397\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>:</p>\n<blockquote>\n<p>Updating C API bits I think is fine, but natively I'm surprised that this is still using a generational index. I thought that was only necessary due to the manual nature of <code>ManuallyRooted</code> and for something with a dtor like this we wouldn't need generational indices? I haven't fully thought this through but that feels redundant now.</p>\n<p>Considering the C API some more too, this'll want to go over documentation with a fine-tooth comb as well because we've probably documented \"you should call unroot, but nothing bad happens if you don't so long as you free the store\". Now that needs to be changed to \"you must call unroot or host memory will leak\". That's a pretty big departure in behavior from before, which while not bad we need to be sure is clearly communicated.</p>\n</blockquote>",
        "id": 536050931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756135808
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#issuecomment-3220745397\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>:</p>\n<blockquote>\n<p>Updating C API bits I think is fine, but naively I'm surprised that this is still using a generational index. I thought that was only necessary due to the manual nature of <code>ManuallyRooted</code> and for something with a dtor like this we wouldn't need generational indices? I haven't fully thought this through but that feels redundant now.</p>\n<p>Considering the C API some more too, this'll want to go over documentation with a fine-tooth comb as well because we've probably documented \"you should call unroot, but nothing bad happens if you don't so long as you free the store\". Now that needs to be changed to \"you must call unroot or host memory will leak\". That's a pretty big departure in behavior from before, which while not bad we need to be sure is clearly communicated.</p>\n</blockquote>",
        "id": 536051368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756135935
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#discussion_r2298741394\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick: it looks like this one line wasn't wrapped.</p>\n</blockquote>",
        "id": 536080051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756145422
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#discussion_r2298730405\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick/aside: SM avoids contention/synchronization by essentially having <code>JSContext</code> not be <code>Send</code>. Our <code>Store</code> is <code>Send</code>, however -- and _must_ be for Wasmtime to work smoothly within Rust's async ecosystem -- so we would have to deal with that contention/synchronization. In practice, I doubt there would ever really be _contention_, but even the uncontended synchronization costs would be annoyingly high for us, almost definitely too high for serious consideration.</p>\n</blockquote>",
        "id": 536080052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756145422
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#discussion_r2298773329\">PR review comment</a>:</p>\n<blockquote>\n<p>That is, I think this can be derived now, instead of manually written out.</p>\n</blockquote>",
        "id": 536080053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756145422
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#discussion_r2298738853\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// independently from the actual heap. Thus, we could trim before\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 536080054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756145422
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#pullrequestreview-3152462373\">PR review</a>:</p>\n<blockquote>\n<p>Fantastic! Thanks for whipping this up!</p>\n</blockquote>",
        "id": 536080055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756145422
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#discussion_r2298751113\">PR review comment</a>:</p>\n<blockquote>\n<p>A little surprised to see <code>4</code> here instead of <code>2</code>. I guess in general I'd prefer to err on the side of smaller growth factors before the next trim to help cut down on floating bloat. But now I am wondering if there is a specific reason you have this higher?</p>\n</blockquote>",
        "id": 536080056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756145422
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#discussion_r2298767964\">PR review comment</a>:</p>\n<blockquote>\n<p>I think we can <code>#[derive(Clone)]</code> for <code>OwnedRooted</code>, right?</p>\n</blockquote>",
        "id": 536080057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756145422
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#pullrequestreview-3152975996\">PR review</a>.</p>",
        "id": 536105286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756154604
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#discussion_r2299096715\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, this one is tricky! <code>#[derive(Clone)]</code> creates a <code>T: Clone</code> constraint implicitly, I think because Rust does not support <a href=\"https://smallcultfollowing.com/babysteps//blog/2022/04/12/implied-bounds-and-perfect-derive/\">perfect derives</a> (due to some combination of action-at-a-distance hazard at the language design level, and trait-solver complication at the implementation level?). I found this out the hard way then had to add the manual derive below.</p>\n</blockquote>",
        "id": 536105287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756154604
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#pullrequestreview-3152976550\">PR review</a>.</p>",
        "id": 536105323,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756154617
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#discussion_r2299097167\">PR review comment</a>:</p>\n<blockquote>\n<p>(Addressed above -- the derived <code>Clone</code> doesn't work because of language restrictions)</p>\n</blockquote>",
        "id": 536105324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756154617
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 536105522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756154704
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#discussion_r2299099947\">PR review comment</a>:</p>\n<blockquote>\n<p>Updated description; thanks!</p>\n</blockquote>",
        "id": 536105530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756154707
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#pullrequestreview-3152980045\">PR review</a>.</p>",
        "id": 536105531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756154707
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#pullrequestreview-3152980189\">PR review</a>.</p>",
        "id": 536105536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756154710
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#discussion_r2299100045\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n</blockquote>",
        "id": 536105540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756154711
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#pullrequestreview-3152980349\">PR review</a>.</p>",
        "id": 536105547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756154714
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#discussion_r2299100159\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n</blockquote>",
        "id": 536105548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756154714
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#pullrequestreview-3152981349\">PR review</a>.</p>",
        "id": 536105612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756154740
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#discussion_r2299100918\">PR review comment</a>:</p>\n<blockquote>\n<p>No real reason, other than wanting to avoid excessive trims at very small root-set sizes; but you're right, better to trust the exponential growth and stick with a standard factor.</p>\n</blockquote>",
        "id": 536105613,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756154740
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#issuecomment-3221709582\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>:</p>\n<blockquote>\n<blockquote>\n<p>Updating C API bits I think is fine, but naively I'm surprised that this is still using a generational index. I thought that was only necessary due to the manual nature of <code>ManuallyRooted</code> and for something with a dtor like this we wouldn't need generational indices? I haven't fully thought this through but that feels redundant now.</p>\n</blockquote>\n<p>This is a plumbing issue, mostly, I think -- the <code>GcRootIndex</code> carries the generation (this is true because of the LIFO case still, at least, and the type is shared between LIFO and owned), and we need to reconstruct the <code>GcRootIndex</code> when the raw bits from C are passed back in. We could in theory read them out from the slab, but we would need access to the store to do that (ah, a familiar theme in my recent work!), so it seemed simpler not to touch the way it works other than to add the liveness flag. Happy to hear other thoughts if you or Nick have any (or see this refactored further on followup).</p>\n<blockquote>\n<p>Considering the C API some more too, this'll want to go over documentation with a fine-tooth comb as well because we've probably documented \"you should call unroot, but nothing bad happens if you don't so long as you free the store\". Now that needs to be changed to \"you must call unroot or host memory will leak\". That's a pretty big departure in behavior from before, which while not bad we need to be sure is clearly communicated.</p>\n</blockquote>\n<p>At least in <code>wasmtime/val.h</code>, we do have</p>\n<blockquote>\n<p><code>\n  * Anyref values are required to be explicitly unrooted via\n  * #wasmtime_anyref_unroot to enable them to be garbage-collected.\n</code></p>\n</blockquote>\n<p>I suppose that we don't warn more explicitly than that, but it seems reasonably documented that the usual \"free what you allocate\" C API rules apply? Happy to iterate here as well in followup!</p>\n</blockquote>",
        "id": 536106712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756155156
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 536106791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756155175
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#issuecomment-3221831169\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>:</p>\n<blockquote>\n<p>As a minor request, could this use <code>void*</code> instead of <code>usize</code> (in C and Rust) to carry the \"this is a pointer\" bit along?</p>\n<blockquote>\n<p>it seems reasonably documented that the usual \"free what you allocate\" C API rules apply?</p>\n</blockquote>\n<p>My main worry about this is that it's the only allocated \"value\" in the C API (as a discriminant of <code>wasmtime_valunion_t</code>). All other values are scalars and were previously scalars too. I'm not sure how many users this would affect though in that I'm not sure anyone's using GC right now.</p>\n<p>I  know I've had historical issues binding owned values to other languages like Python and Go in the past, but I don't recall the specifics.</p>\n</blockquote>",
        "id": 536113806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756158083
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 536125673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756164842
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 536125874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756164954
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#issuecomment-3222052912\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>:</p>\n<blockquote>\n<p>@alexcrichton sure thing!</p>\n<ul>\n<li>See 20a929ba938a95ef4cee11ce9c6dc69932407969 for the pointer-rather-than-<code>usize</code> change; needs unsafe impls of Send/Sync on the wrapper struct in the C layer but this should be straightforwardly OK because it's an Arc (I think).</li>\n<li>See 8b3bf8fb1d540cd3838632925ac1ba8901c22d2a for some additional warnings in the header docs about the need to unroot explicitly.</li>\n<li>See the other commit loosening the size assert slightly because riscv32imac gotta be different wrt padding (sad).</li>\n</ul>\n<p>Let me know what you think...</p>\n</blockquote>",
        "id": 536126104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756165076
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#issuecomment-3224368642\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>:</p>\n<blockquote>\n<p>Oh, sorry, I'm just bemoaning the state of managed values. I don't really want to get this working with the C API in other languages but I'm not sure anyone else wants to either. I don't have a great alternative, however, so all I can point out is that it's objectively more dangerous to switch to a \"real pointer\" from an index because mistakes are segfaults rather than  panics. That doesn't mean we shouldn't do this, so that's sort of me just bemoaning that there's not really any motivation to fully flesh this out on the C side right now</p>\n</blockquote>",
        "id": 536247687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756217833
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 536270687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756224485
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 536282743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756228913
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#issuecomment-3225076059\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>:</p>\n<blockquote>\n<p>@fitzgen a review of one more bit if you don't mind -- I just pushed a07c3b0ef819db3956c3a0c2030dcda6a507bf5a that switches to a different amortized algorithm for root trimming.</p>\n<p>It doesn't grow the high-water mark exponentially; instead it sets it adaptively based on the last post-trim live-root set size. I realized that the former will still result in unbounded liveness-flag-array growth between GCs if one creates and drops many GC roots without mutating the GC graph itself. The new algorithm is \"self-equilibriating\" -- it provides a strong guarantee that the size is at most double the max true live-set size, and still has amortized constant-time root creation. I wrote a proof in the doc-comment to convince myself :-)</p>\n<p>Let me know what you think!</p>\n</blockquote>",
        "id": 536283310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756229189
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 536284161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756229577
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#pullrequestreview-3156646847\">PR review</a>:</p>\n<blockquote>\n<p>Ah yes of course. This is actually what I was assuming we were going to do in the original issue discussion and then it fled my mind when I actually reviewed the code. Looks great! And with a proof as well!</p>\n</blockquote>",
        "id": 536284176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756229583
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 536284617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756229781
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 536287283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756230973
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514#issuecomment-3225169734\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>:</p>\n<blockquote>\n<p>(Added one more detail after staring at this again: should not have gated the high-water mark <em>update</em> on eager (GC) vs root-creation mode; only the early-out is gated on that.)</p>\n</blockquote>",
        "id": 536287428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756231035
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 536287436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756231039
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 536292677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756233252
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 536292808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756233309
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11514\">PR #11514</a>.</p>",
        "id": 536300351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756236867
    }
]