[
    {
        "content": "<p>olanod opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10075\">issue #10075</a>:</p>\n<blockquote>\n<p>From the <a href=\"https://docs.wasmtime.dev/examples-minimal.html#building-wasmtime-for-a-custom-platform\">docs</a></p>\n<blockquote>\n<p>Not all features for Wasmtime can be built for custom targets. For example WASI support does not work on custom targets.</p>\n</blockquote>\n<p>This is basically what I need, so I'd like to know(and possibly contribute) what would it take to add WASI support to the no_std version of Wasmtime. <br>\nI'm creating a simple \"virtual OS\" for embedded risc-v and a <a href=\"https://github.com/paritytech/polkavm/blob/master/crates/polkavm-linker/riscv32emac-unknown-none-polkavm.json\">custom risc-v based VM</a> and would like to run WASI programs on it. An initial MVP would be running a simple WASI component with <a href=\"https://crates.io/crates/wstd\"><code>wstd</code></a> that reads form stdin and write to stdout and another one that creates a service listening on a socket. The OS abstracts the concept of the filesystem or networking.</p>\n</blockquote>",
        "id": 495264925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737546905
    },
    {
        "content": "<p>olanod edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10075\">issue #10075</a>:</p>\n<blockquote>\n<p>From the <a href=\"https://docs.wasmtime.dev/examples-minimal.html#building-wasmtime-for-a-custom-platform\">docs</a></p>\n<blockquote>\n<p>Not all features for Wasmtime can be built for custom targets. For example WASI support does not work on custom targets.</p>\n</blockquote>\n<p>This is basically what I need, so I'd like to know(and possibly contribute) what would it take to add WASI support to the no_std version of Wasmtime. <br>\nI'm creating a simple \"virtual OS\" for embedded risc-v and a <a href=\"https://github.com/paritytech/polkavm/blob/master/crates/polkavm-linker/riscv32emac-unknown-none-polkavm.json\">custom risc-v based VM</a> and would like to run WASI programs on it, the fact that programs need to be pre-compiled ahead of time is actually a plus as it allows distributing the binaries in the VM's format instead of WASM. <br>\nAn initial MVP would be running a simple WASI component with <a href=\"https://crates.io/crates/wstd\"><code>wstd</code></a> that reads form stdin and write to stdout and another one that creates a service listening on a socket. The OS abstracts the concept of the filesystem or networking.</p>\n</blockquote>",
        "id": 495265506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737547069
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10075#issuecomment-2607816368\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10075\">issue #10075</a>:</p>\n<blockquote>\n<p>The documentation here more-or-less outlines why the <code>wasmtime-wasi</code> crate (and <code>wasmtime-wasi-http</code>) don't compile on no_std platforms. They both currently have a hard requirement on the <code>tokio</code> runtime which AFAIK has no \"custom platform\" support along similar lines as to Wasmtime.</p>\n<p>Unfortunately though there's not necessarily a super-small C API we can offer and say \"implement this and you get all of WASI\". What I might recommend instead is to avoid using the <code>wasmtime-wasi</code> crate entirely and build-your-own. The <code>wasmtime-wasi</code> crate, for example, is built exclusively on the public API of the <code>wasmtime</code> crate which does build for no_std with custom platform support. This would mean that when building your own WASI implementation to run on your own custom OS you'd be using <code>Linker</code> yourself to add all your own functions and such.</p>\n<p>I'll note that this is also not the greatest state of things as reimplementing the <code>wasmtime-wasi</code> crate is a relatively significant undertaking. If you only want a few functions it might not be so bad but WASI has a relatively large surface area. That being said this large surface area is also why it's not feasible to provide a small/turnkey solution to a custom platform because there would be so many insertion points.</p>\n<p>If it works for your use case I might recommend providing only a few WASI interfaces and grow that set over time. For example you probably want <code>wasi:io</code> primitives and maybe others like <code>wasi:clocks</code> and <code>wasi:random</code>, and those shouldn't be too too hard to port to a custom platform implementation.</p>\n<p>Finally I'll also note that @pchickey is <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">doing work</a> to get <code>wasi:io</code> working on no_std so you might be interested in that as well.</p>\n</blockquote>",
        "id": 495333060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737566122
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10075#issuecomment-2608513328\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10075\">issue #10075</a>:</p>\n<blockquote>\n<p>Agree with Alex - its very hard to come up with a pluggable implementation of WASI that meets the needs of different platforms while still having enough in common across platforms to be worthwhile.</p>\n<p>The wasmtime-wasi-io crate, which <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">just landed in main</a>, is a no_std implementation of the WASI poll function, and a set of traits for input-stream, output-stream, and pollable. Its just barely enough common ground for implementations to be worth having at all.</p>\n<p>Once you have that, you still have to build up a lot of other functionality to be able to embed apps that use stdin/out, sockets, etc, and how you do so is heavily dependent on your underlying platform. My suggestion is to invoke <code>wasmtime::component::bindgen!</code> yourself with <code>with: { \"wasi:io\": wasmtime_wasi_io::bindings::wasi::io }</code> and then just start writing your own impl Hosts. There's a small amount of common boilerplate in most impl Hosts for handling ResourceTable manipulation, but abstracting that away ends up requiring manually writing a trait that basically looks like a HostSomeResource minus one argument, which is more of a burden to maintain as common infra than I think its worth. (But maybe its something you could add an option to bindgen to write for you, if you're motivated?)</p>\n</blockquote>",
        "id": 495394940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737590165
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10075#issuecomment-2608513328\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10075\">issue #10075</a>:</p>\n<blockquote>\n<p>Agree with Alex - its very hard to come up with a pluggable implementation of WASI that meets the needs of different platforms while still having enough in common across platforms to be worthwhile.</p>\n<p>The wasmtime-wasi-io crate, which <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10036\">just landed in main</a>, is a no_std implementation of the WASI poll function, and a set of traits for input-stream, output-stream, and pollable. Its just barely enough common ground for implementations to be worth having at all.</p>\n<p>Once you have that, you still have to build up a lot of other functionality to be able to embed apps that use stdin/out, sockets, etc, and how you do so is heavily dependent on your underlying platform. My suggestion is to invoke <code>wasmtime::component::bindgen!</code> yourself with <code>with: { \"wasi:io\": wasmtime_wasi_io::bindings::wasi::io }</code> and then just start writing your own impl Hosts. There's a small amount of common boilerplate in most impl Hosts for handling ResourceTable manipulation, but abstracting that away ends up requiring manually writing a trait that basically looks like a HostSomeResource minus one argument, which is more of a burden to maintain as common infra than I think its worth. (But maybe its something you could add an option to bindgen to write for you, if you're motivated?)</p>\n<p>At some point in the future I will add an example app that uses wasmtime-wasi-io to make a sample embedding, but right now I'm burning down other things on my critical path so that remains tech debt for today.</p>\n</blockquote>",
        "id": 495395039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737590236
    }
]