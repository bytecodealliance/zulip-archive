[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646\">PR #11646</a> from <code>alexcrichton:p3-serve</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit adds support for WASIp3 to <code>wasmtime serve</code> by detecting whether the input component is using a WASIp3 exported interface instead of a WASIp2 exported interface (similar to how <code>wasmtime run</code> detects which is supported).</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 538322931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757369909
    },
    {
        "content": "<p>alexcrichton assigned alexcrichton to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646\">PR #11646</a>.</p>",
        "id": 538322950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757369926
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#pullrequestreview-3198357156\">PR review</a>.</p>",
        "id": 538323149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757370068
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#discussion_r2331499323\">PR review comment</a>:</p>\n<blockquote>\n<p>I've opened this as a draft PR because of this, and here I have one question and one statement:</p>\n<ul>\n<li>@rvolosatovs the origin of this code looks <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/68389f75e28468576fb5aa88d6ec173cb21fc603/src/commands/serve.rs#L865-L889\">like this</a> and notably has the \"I/O driver\" task associated with it to await on. Here, however, it's not present. That's a problem, right? Would you take this to mean that <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11600\">https://github.com/bytecodealliance/wasmtime/issues/11600</a> is required to implement this correctly? Or should I insert something else here?</li>\n<li>@dicej we'll eventually want to re-benchmark this given all the big changes that have happened around the intenrals of streams and the internals of wasi-http. Notably <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/68389f75e28468576fb5aa88d6ec173cb21fc603/src/commands/serve.rs#L873-L881\">this optimization</a> is no longer easily possible.</li>\n</ul>\n</blockquote>",
        "id": 538323150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757370068
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#pullrequestreview-3198386232\">PR review</a>.</p>",
        "id": 538323713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757370489
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#discussion_r2331516251\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would you take this to mean that <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11600\">https://github.com/bytecodealliance/wasmtime/issues/11600</a> is required to implement this correctly? Or should I insert something else here?</p>\n</blockquote>\n<p>We don't necessarily need #11600 for this.  I was envisioning something like:</p>\n</blockquote>",
        "id": 538323715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757370489
    },
    {
        "content": "<p>dicej deleted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#discussion_r2331516251\">PR review comment</a>.</p>",
        "id": 538323720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757370494
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#pullrequestreview-3198401857\">PR review</a>.</p>",
        "id": 538324390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757371001
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#discussion_r2331528495\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would you take this to mean that <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11600\">https://github.com/bytecodealliance/wasmtime/issues/11600</a> is required to implement this correctly? Or should I insert something else here?</p>\n</blockquote>\n<p>Yes, 11600 is probably the best choice here; I can pick that up tomorrow.</p>\n<p>A couple of alternatives that would also work, but are not necessarily as elegant:</p>\n<ul>\n<li>Update Response::into_http to add an impl Future&lt;Output = Result&lt;(), ErrorCode&gt;&gt; as a third part of the tuple it currently returns, which will resolve when the BoxBody has finished producing items (or hits an error).  Then spawn a task which takes ownership of the Store and calls Instance::run_concurrent with that future.</li>\n<li>Spawn a task which calls <code>Instance::run_concurrent</code> with <code>std::future::pending()</code> and wait for it to return <code>Err(Trap::Deadlock)</code>, meaning there's nothing left to do (i.e. all tasks have completed).  The problem there is you get the same error whether the tasks all completed or they got stuck before they completed.<br>\n</li>\n</ul>\n</blockquote>",
        "id": 538324391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757371001
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#pullrequestreview-3198406450\">PR review</a>.</p>",
        "id": 538324649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757371195
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#discussion_r2331532143\">PR review comment</a>:</p>\n<blockquote>\n<p>This is exactly the problem I was referring to earlier today, which I hoped we could fix by <code>handle</code> returning the \"I/O driver\" future. My understanding of this so far was that as long as the returned <code>http_body::Body</code> is used within a <code>run_concurrent</code> (which I was, perhaps imprecisely, referring to as \"part of host's event loop\") everything should \"just work\". It <em>looks</em> like the existing functionality is sufficient for <code>wasi:http</code> use case, but I think there definitely should be a way for the embedder to \"join all\" spawned tasks.</p>\n<p>Basically, my current understanding is that HTTP implementation works as long as guest is done doing all the work when the host is done reading the response body. If, for example, a guest were to spawn a task <em>after</em> streaming the response body (e.g. doing an async HTTP request after the fact), I am not sure I see a way for the host to drive completion of such tasks. Maybe @dicej could provide some guidance here?</p>\n</blockquote>",
        "id": 538324650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757371195
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#pullrequestreview-3198410112\">PR review</a>.</p>",
        "id": 538324897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757371355
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#discussion_r2331535079\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>Notably <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/68389f75e28468576fb5aa88d6ec173cb21fc603/src/commands/serve.rs#L873-L881\">this optimization</a> is no longer easily possible.</li>\n</ul>\n</blockquote>\n<p>This is where having an <code>Store::yield_</code> async function could be useful -- i.e. the host equivalent of the <code>yield</code> intrinsic, meaning \"let any guest tasks make progress before resolving the returned <code>Future</code>\".  Then we'd do a <code>store.yield_().await;</code> before the <code>tx.send(res);</code>, which should have the same effect as the previous optimization.</p>\n</blockquote>",
        "id": 538324898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757371355
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#pullrequestreview-3198418903\">PR review</a>.</p>",
        "id": 538325634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757371737
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#discussion_r2331541823\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>I am not sure I see a way for the host to drive completion of such tasks. Maybe @dicej could provide some guidance here?</p>\n</blockquote>\n<p>Either #11600 or passing <code>std::future::pending()</code> to <code>Instance::run_concurrent</code> would address that, I believe -- either one would allow the host to wait until the guest task exits completely.  Regarding 11600: we could make the returned future mean \"this will resolve when the task has exited _and_ any of its subtasks have also exited\".</p>\n</blockquote>",
        "id": 538325636,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757371737
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#discussion_r2331571813\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>It looks like the existing functionality is sufficient for wasi:http use case, but I think there definitely should be a way for the embedder to \"join all\" spawned tasks.</p>\n</blockquote>\n<p>I'm not actually sure how this tests works because AFAIK it shouldn't, but we don't have sufficient information today because once the guest returns a <code>Response</code> the host has no reason to stay inside of <code>run_concurrent</code> but it needs to stay there so long as the original component model subtask hasn't returned. Avoiding returning is modeled by spawning in Rust currently.</p>\n<p>@dicej let's brainstorm tomorrow about what shape #11600 might take? My best idea right now is <code>call_concurrent</code> returning a pair of futures but I feel like we can probably think of something better</p>\n</blockquote>",
        "id": 538327923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757373467
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#pullrequestreview-3198459048\">PR review</a>.</p>",
        "id": 538327925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757373467
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#discussion_r2333828872\">PR review comment</a>:</p>\n<blockquote>\n<p>One other nuance to point out here: in the general case of a guest function that returns streams and/or futures, waiting for the task to exit isn't enough -- it could store the write end of each stream or future in memory and hand of responsibility for them to another task (i.e. one that's running concurrently or expected to run later).  In other words, the streams and futures could outlive the task that created them.  Probably not a concern for <code>wasmtime serve</code>, but I thought I'd mention it for completeness.</p>\n</blockquote>",
        "id": 538450842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757427882
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#pullrequestreview-3201896452\">PR review</a>.</p>",
        "id": 538450853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757427884
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#pullrequestreview-3201915337\">PR review</a>.</p>",
        "id": 538451966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757428154
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#discussion_r2333842342\">PR review comment</a>:</p>\n<blockquote>\n<p>Expanding on the above: what the caller really wants to wait for is three things joined together:</p>\n<ul>\n<li>the end of the body stream</li>\n<li>the resolution of the trailers future</li>\n<li>the completion of the <code>handle</code> task<br>\nUntil all three are finished, we can't consider the request fully handled.</li>\n</ul>\n</blockquote>",
        "id": 538451968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757428154
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#discussion_r2333842342\">PR review comment</a>.</p>",
        "id": 538452703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757428321
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#pullrequestreview-3201936828\">PR review</a>.</p>",
        "id": 538453306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757428470
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#discussion_r2333857265\">PR review comment</a>:</p>\n<blockquote>\n<p>Err, five things?</p>\n<ul>\n<li>the request body fully consumed</li>\n<li>the request trailers consumed</li>\n<li>the response body fully produced</li>\n<li>the response trailers delivered</li>\n<li>the completion of the <code>handle</code> task</li>\n</ul>\n<p><span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span> </p>\n</blockquote>",
        "id": 538453310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757428471
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#discussion_r2333857265\">PR review comment</a>.</p>",
        "id": 538453388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757428488
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646\">PR #11646</a> (assigned to alexcrichton).</p>",
        "id": 538736923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757537605
    },
    {
        "content": "<p><strong>alexcrichton</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646\">PR #11646</a> as ready for review.</p>",
        "id": 538736942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757537616
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-wasi-reviewers\">wasmtime-wasi-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646\">PR #11646</a>.</p>",
        "id": 538736949,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757537617
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/dicej\">dicej</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646\">PR #11646</a>.</p>",
        "id": 538736950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757537618
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646\">PR #11646</a>.</p>",
        "id": 538736951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757537618
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646\">PR #11646</a>.</p>",
        "id": 538736952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757537618
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#pullrequestreview-3207797774\">PR review</a>.</p>",
        "id": 538737018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757537651
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#discussion_r2337891277\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11665\">https://github.com/bytecodealliance/wasmtime/pull/11665</a> this should now be ready as this hooks into the task run.</p>\n</blockquote>",
        "id": 538737019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757537652
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646\">PR #11646</a> (assigned to alexcrichton).</p>",
        "id": 538739640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757538893
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#pullrequestreview-3207905403\">PR review</a>.</p>",
        "id": 538741422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757539889
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646#discussion_r2337964537\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm thinking we should check for an error here and log it before returning it to the caller.  That's what we're doing in the p2 case.</p>\n</blockquote>",
        "id": 538741423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757539890
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646\">PR #11646</a> (assigned to alexcrichton).</p>",
        "id": 538742941,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757540924
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646\">PR #11646</a>.</p>",
        "id": 538742981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757540945
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11646\">PR #11646</a>.</p>",
        "id": 538747743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757544234
    }
]