[
    {
        "content": "<p><strong>posborne</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507\">PR #10507</a>.</p>",
        "id": 509564229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743549256
    },
    {
        "content": "<p><strong>posborne</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507\">PR #10507</a>.</p>",
        "id": 509564230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743549257
    },
    {
        "content": "<p>posborne opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507\">PR #10507</a> from <code>posborne:guest-profiling-component-model</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This change adds support for using guest profiling with the component model.  In addition to the core change to support attributing stack frames to constituent modules within a component, the cli <code>run</code> and <code>serve</code> commands are also updated to support using the <code>--profile=guest</code> cli option with components.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/8773\">https://github.com/bytecodealliance/wasmtime/issues/8773</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/issues/7669\">https://github.com/bytecodealliance/wasmtime/issues/7669</a></p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 509564231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743549257
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507#issuecomment-2770894215\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507\">PR #10507</a>:</p>\n<blockquote>\n<p>Here's a couple samples from some simple components for the CLI and wasi-http.  There's a couple frames missing from the CLI example so I think I am missing something from the component that isn't part of <code>static_modules()</code> individual functions which I'll try to find.</p>\n<p>I'm also not at all confident on the API which would be best for all use cases for <code>GuestProfiler</code> in terms of how users are likely to want to register various components and modules.  Here we support 1 component + multiple additional modules which was biased by the potential registrations in the <code>run</code> and <code>serve</code> commands with prelinking but definitely welcome ideas.  I considered having a <code>ProfileTarget</code> enum or similar to abstract over things -- some approaches are a bit more challenging due to conditional compilation concerns.</p>\n<p><a href=\"https://github.com/user-attachments/files/19558979/wasmtime-run-profile-data.json\">wasmtime-run-profile-data.json</a><br>\n<a href=\"https://github.com/user-attachments/files/19558980/wasmtime-serve-profile-data.json\">wasmtime-serve-profile-data.json</a></p>\n<p>![image](<a href=\"https://github.com/user-attachments/assets/0adda5dd-939a-4778-97ee-1c2bda12a93a\">https://github.com/user-attachments/assets/0adda5dd-939a-4778-97ee-1c2bda12a93a</a>)</p>\n</blockquote>",
        "id": 509565155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743549774
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507#pullrequestreview-2734299206\">PR review</a>:</p>\n<blockquote>\n<p>LGTM modulo a couple nitpicks <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 509574450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743554664
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507#discussion_r2023846267\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick for here and elsewhere: we generally try to capitalize sentences and such in comments.</p>\n</blockquote>",
        "id": 509574451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743554664
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507#discussion_r2023846635\">PR review comment</a>:</p>\n<blockquote>\n<p>\"linarly\"</p>\n</blockquote>",
        "id": 509574452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743554664
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507#discussion_r2023847822\">PR review comment</a>:</p>\n<blockquote>\n<p>It probably makes sense to use a builder-style API in the limit here, to allow users to specify all the various components and modules they are profiling, but this is totally fine for the moment.</p>\n</blockquote>",
        "id": 509574453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743554664
    },
    {
        "content": "<p>FrankReh submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507#pullrequestreview-2735832157\">PR review</a>.</p>",
        "id": 509660455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743590656
    },
    {
        "content": "<p>FrankReh created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507#discussion_r2024572061\">PR review comment</a>:</p>\n<blockquote>\n<p>Super nits: Is \"past this point, ... from this point forward\" redundant? Maybe I should understand the context better. Also, while here, I'll point out the title has \"suport\" in it, probably a typo.</p>\n</blockquote>",
        "id": 509660456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743590656
    },
    {
        "content": "<p>FrankReh <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507#issuecomment-2772325785\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507\">PR #10507</a>:</p>\n<blockquote>\n<p>Drive-by comment:</p>\n<p>I cloned the branch and was successful in creating a wasmtime-guest-profile.json with it that <a href=\"http://profiler.firefox.com\">profiler.firefox.com</a> accepted. The flame graph aspect of that UI didn't seem to work but presumably that has nothing to do with what this PR is accomplishing.</p>\n<p>Thanks for making this feature possible!</p>\n</blockquote>",
        "id": 509675236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743594891
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507#issuecomment-2773079454\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507\">PR #10507</a>:</p>\n<blockquote>\n<p>@FrankReh thanks for doing a check.  In my testing, I was getting the flamegraph to work fine for both <code>run</code> and <code>serve</code>; what was your test setup?  Usually when I didn't get flame graphs in the UI it was due to some part of the sampling not working correctly (but I can't discount something else going sideways unrelated to the profile itself).</p>\n<p>Does the call tree view work?</p>\n</blockquote>",
        "id": 509739191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743610214
    },
    {
        "content": "<p>FrankReh <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507#issuecomment-2773126430\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507\">PR #10507</a>:</p>\n<blockquote>\n<p>My bad. Even the flamegraph aspect is working. Embarrassing but I didn't recognize the pane as a valid flamegraph simply because of the grey color and my test case having very little happening besides two function calls writing to stdout repeatedly. In my defense, first time running profiling for a wasm module and first time using <a href=\"http://profiler.firefox.com\">profiler.firefox.com</a> web app.</p>\n<p>Thanks again for working to get this functionality added.</p>\n</blockquote>",
        "id": 509743396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743611420
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507#pullrequestreview-2737167036\">PR review</a>.</p>",
        "id": 509763789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743617594
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507#discussion_r2025352838\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I noticed that as well when I was making updates.  Should be addressed with the fixup.</p>\n</blockquote>",
        "id": 509763791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743617594
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507\">PR #10507</a>.</p>",
        "id": 509768912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743619276
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507#issuecomment-2773412250\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507\">PR #10507</a>:</p>\n<blockquote>\n<p>My fixups got autosquashed when I rebased to resolve a trivial conflict in <code>run.rs</code> but updates were all very minor:</p>\n<ul>\n<li>Couple small updates to hopefully make CI happy with dead_code conditional comp and type annotations from c-api code.</li>\n<li>Updates to comments as suggested (plus a few in other parts of the patch to match the convention.</li>\n</ul>\n<p>For now, keeping the API as-is to keep the collateral for this change smaller and (mostly) not require updates for users of the API (may require very minor updates to type hint).</p>\n</blockquote>",
        "id": 509769571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743619477
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507\">PR #10507</a>.</p>",
        "id": 509770296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743619723
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507#pullrequestreview-2737363035\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 509778669,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743622434
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10507\">PR #10507</a>.</p>",
        "id": 509782344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743623776
    }
]