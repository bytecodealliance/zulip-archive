[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897\">PR #10897</a>.</p>",
        "id": 521816959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748889242
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897\">PR #10897</a> from <code>alexcrichton:refactor-func-representation</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit rewrites the internals of <code>wasmtime::Func</code>. The <code>Stored</code> type is no longer used meaning that it's now free to create a <code>wasmtime::Func</code> at any time. It is effectively a store-tagged <code>NonNull&lt;VMFuncRef&gt;</code>. This required a few internal changes to how functions are passed around:</p>\n<ul>\n<li>\n<p>Previously the insertion of a <code>wasm_call</code>-less <code>VMFuncRef</code> was deferred until the raw pointer was loaded. Now the insertion happens immediately as soon as the function is placed within a store. This is done to ensure that a <code>Func</code> corresponds to one exact <code>VMFuncRef</code> and that's it, and lazily filled in versions within the store are still lazily filled in but they're more eagerly allocated. This isn't expected to have much of an impact perf-wise since all these lazily allocated functions were already almost guaranteed to get lazily allocated anyway.</p>\n</li>\n<li>\n<p>Filling in \"holes\" in <code>VMFuncRef</code>, notably the <code>wasm_call</code> field, no longer happens lazily when the <code>VMFuncRef</code> is demanded. Instead during instantiation a pass is made to fill in holes with the new module being instantiated (after registration). Additionally when a lazily-allocated <code>VMFuncRef</code> is created the module registry is checked immediately. This means that all store-local <code>VMFuncRef</code> values are either filled in immediately or filled in during instantiation. This notably means that the previous logic in <code>Func::vmimport</code> is now \"just\" an <code>.unwrap()</code> with a lot of comments saying why the unwrap shouldn't panic.</p>\n</li>\n<li>\n<p>To implement this commit a previous optimization for the <code>Func</code> API was removed as well, namely <code>Func::call</code> will become slower after this commit. The <code>Func::call</code> API is a dynamically-typed API which requires run-time type-checking of arguments. Previously a <code>FuncType</code> was loaded into a cache once-per-<code>Func</code> which helped amortize the cost of using <code>Func::call</code> repeatedly. Now, though, there's no natural place to put such a cache since <code>Func</code> no longer has dedicated storage within a <code>Store</code>. Historically this optimization was added for the C API before the <code>*_call_unchecked</code> APIs existed, but nowadays the <code>*_call_unchecked</code> APIs should suffice for performance-critical applications where needed. In the future it might also be possible to have a hash map in the <code>Store</code> of a <code>VMSharedTypeIndex</code> to <code>FuncType</code> which is lazily populated based on calls to <code>Func::call</code>, but that feels a bit overkill nowadays for a possibly rarely-used map.</p>\n</li>\n<li>\n<p>The no-longer-necessary <code>RootedHostFunc</code> type is now gone as its unsafety and various contracts are subsumed by other preexisting <code>unsafe</code> blocks.</p>\n</li>\n<li>\n<p>The specific drop order between <code>StoreOpaque::store_data</code> and <code>StoreOpaque::rooted_host_funcs</code> is removed. The <code>rooted_host_funcs</code> field now lives in the <code>func_refs</code> field and the <code>FuncKind</code> type, where the destructors came from before, is no more.</p>\n</li>\n<li>\n<p>The <code>func_refs</code> field has grown storage locations for a variety of \"keep this thing alive as long as the store\" related to functions and such.</p>\n</li>\n</ul>\n<p>Closes #10868</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 521816975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748889242
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897\">PR #10897</a>.</p>",
        "id": 521816979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748889243
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897#issuecomment-2931976684\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897\">PR #10897</a>:</p>\n<blockquote>\n<p>I'll also note that this is split out of <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10870/commits/b228b9718ab0c7e405ff98f62207d63f0e8484a7\">https://github.com/bytecodealliance/wasmtime/pull/10870/commits/b228b9718ab0c7e405ff98f62207d63f0e8484a7</a></p>\n</blockquote>",
        "id": 521817017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748889255
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897#issuecomment-2931976684\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897\">PR #10897</a>:</p>\n<blockquote>\n<p>I'll also note that this is split out of <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10870\">https://github.com/bytecodealliance/wasmtime/pull/10870</a></p>\n</blockquote>",
        "id": 521817470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748889417
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897\">PR #10897</a>.</p>",
        "id": 521817866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748889562
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897#discussion_r2122170281\">PR review comment</a>:</p>\n<blockquote>\n<p>Kind of an aside but should all of these assertions actually live in the <code>wasmtime-c-api</code> crate so that we don't need to have a dummy struct which itself needs to be kept in sync with the struct that we actually care about? We've removed one syncing problem but added another, so we haven't really changed anything. I guess the only assertion that would remain in the <code>wasmtime</code> crate would be the one for the offset of the <code>store</code> field.</p>\n</blockquote>",
        "id": 521846076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748899173
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897#discussion_r2122161442\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>/// Attempts to fill the `wasm_call` field of `func_ref` given `modules`\n/// registered and returns `true` if the field was filled, `false` otherwise.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 521846077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748899173
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897#discussion_r2122171072\">PR review comment</a>:</p>\n<blockquote>\n<p>Sooooooo nice to get rid of <code>FuncKind</code></p>\n</blockquote>",
        "id": 521846078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748899173
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897#pullrequestreview-2889945496\">PR review</a>:</p>\n<blockquote>\n<p>Very nice!!</p>\n</blockquote>",
        "id": 521846079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748899173
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897#discussion_r2122175266\">PR review comment</a>:</p>\n<blockquote>\n<p>Just to clarify, since there isn't any <code>assert!</code> here:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                // Note that this is a load-bearing `unwrap` here, but is\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 521846080,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748899173
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897\">PR #10897</a>.</p>",
        "id": 521859658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748905395
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897\">PR #10897</a>.</p>",
        "id": 521859665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748905401
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897#pullrequestreview-2890160718\">PR review</a>.</p>",
        "id": 521859841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748905485
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897#discussion_r2122307373\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh I think you might be assuming there's a <code>struct wasmtime_func_t { ... }</code> in Rust in <code>crates/c-api</code> but that doesn't exist. In that sense this <code>struct C</code> is the only C-version-written-in-Rust anywhere in the codebase, and I figured here was a good as place as any to test things out.</p>\n</blockquote>",
        "id": 521859842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748905486
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897\">PR #10897</a>.</p>",
        "id": 521859850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748905489
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897#pullrequestreview-2890184472\">PR review</a>.</p>",
        "id": 521861914,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748906603
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897#discussion_r2122324643\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, I was indeed</p>\n</blockquote>",
        "id": 521861915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748906603
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10897\">PR #10897</a>.</p>",
        "id": 521868389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748909881
    }
]