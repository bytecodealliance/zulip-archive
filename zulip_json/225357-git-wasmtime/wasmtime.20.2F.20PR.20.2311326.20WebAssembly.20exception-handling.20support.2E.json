[
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535211771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755642682
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#issuecomment-3202473912\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>:</p>\n<blockquote>\n<p>I've now rebased (twice -- #11461 created more conflicts -- hopefully this lands soon!) and marked as ready. This PR is stacked on top of #11467. All spec-tests should be passing (will watch CI to make sure it goes green here). Thanks for the feedback so far!</p>\n</blockquote>",
        "id": 535211949,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755642830
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>:</p>\n<blockquote>\n<p>This PR introduces support for the [Wasm exception-handling proposal], which introduces a conventional try/catch mechanism to WebAssembly. The PR supports modules that use <code>try_table</code> to register handlers for a lexical scope; and provides <code>throw</code> and <code>throw_ref</code> that allocate (in the first case) and throw exception objects.</p>\n<p>This PR builds on top of the work in #10510 for Cranelift-level exception support, #10919 for an unwinder, and #11230 for exception objects built on top of GC, in addition a bunch of smaller fix and enabling PRs around those.</p>\n<p>[Wasm exception-handling proposal]: <a href=\"https://github.com/WebAssembly/exception-handling/\">https://github.com/WebAssembly/exception-handling/</a></p>\n</blockquote>",
        "id": 535213715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755644375
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2286664059\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar to above, could this use <code>if cfg!(debug_assertions) { ... }</code> to avoid needing a conditional import on <code>ExceptionTable</code>? (this'll show up in CI for release builds I think which aren't enabled by default on PRs)</p>\n</blockquote>",
        "id": 535221296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755650923
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2286671165\">PR review comment</a>:</p>\n<blockquote>\n<p>You can use <code>?</code> after <code>self.take_pending_exception()</code> to avoid indentation if you'd like</p>\n</blockquote>",
        "id": 535221297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755650923
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2286664785\">PR review comment</a>:</p>\n<blockquote>\n<p>Personally I'd be in favor of \"thrown wasm exception\" or something like that as opposed to the generic <code>ThrownException</code> this'll otherwise print</p>\n</blockquote>",
        "id": 535221298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755650923
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2286661845\">PR review comment</a>:</p>\n<blockquote>\n<p>This should test <code>features</code>-the-local-variable since that represents the calculation of wasm features after enabled/disabled/defaults/etc.</p>\n<p>Also mind folding the <code>#[cfg]</code> into the boolean expression with <code>!cfg!(feature = \"gc\")</code>? I personally prefer to favor <code>cfg!</code> where possible since it avoids dead code warnings and such (not that such motivations are applicable here)</p>\n</blockquote>",
        "id": 535221299,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755650923
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3134335811\">PR review</a>:</p>\n<blockquote>\n<p>Mind updating a few bits and pieces of documentation as well with this? The ones I can think of are:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/docs/stability-wasm-proposals.md#wasm-proposals\">The wasm proposals table</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/docs/stability-tiers.md#x86_64\">The architecture table for supported wasm proposals</a></li>\n</ul>\n<p>Also, apart from Pulley and fuzzing possibly, are there other known entities to record in issues before landing? E.g. anything like an open question about performance, API, etc.</p>\n<p>I should also clarify that I so far haven't looked at the wasmtime-cranelift side of things at all, I figured I'd defer to @fitzgen for that, but Nick if you'd like I'm happy to review it here too.</p>\n</blockquote>",
        "id": 535221300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755650923
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2286672060\">PR review comment</a>:</p>\n<blockquote>\n<p>Is <code>clone</code> the right operation to call here? I would have expected we just thread through the <code>VMGcRef</code> as-is because we're effectively moving ownership into the return value</p>\n</blockquote>",
        "id": 535221301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755650923
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2286670083\">PR review comment</a>:</p>\n<blockquote>\n<p>Given that we need to in theory replicate these methods on <code>StoreContextMut</code>, <code>Store</code>, <code>Caller</code>, and other things that implement <code>AsContextMut</code>, and given that in theory we also need to eventually add <code>catch_async</code> in addition to <code>catch</code>, I'd subjectively say this is probably fine to relegate to examples or documentation but otherwise not live here as a first-class function.</p>\n</blockquote>",
        "id": 535221302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755650923
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2286706457\">PR review comment</a>:</p>\n<blockquote>\n<p>Reading this over, the semantics of <code>set_pending_exception</code> are such that it panics if the exception is already set, right? Would that mean that if an embedder forgot to call <code>take_pending_exception</code> and then reentered wasm after an exception, would that panic on another exception?</p>\n<p>If not, yay! If so, I might say we should instead allow <code>set_pending_exception</code> with whatever and it just overwrites whatever was there previously.</p>\n</blockquote>",
        "id": 535221303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755650923
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2286678303\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW this is an example of where in my subjective opinion <code>#[cfg]</code> is overkill. For example if we have <code>ThrownException</code>, a unit struct, in the public API when the <code>gc</code> feature is disabled that seems fine to me and worth it to avoid growing more <code>#[cfg]</code></p>\n</blockquote>",
        "id": 535221304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755650923
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2286693288\">PR review comment</a>:</p>\n<blockquote>\n<p>With the changes here and to the <code>match</code> below, could you run the <code>call.rs</code> benchmark before/after this PR with the <code>^sync.*no-hook.*host-to-wasm.* typed - nop$</code> regex? If there's no real change, yay! If there's a regression, mind spot-checking to see if anything jumps out?</p>\n</blockquote>",
        "id": 535221305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755650923
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2286699441\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be possible to change this to <code>Option&lt;usize&gt;</code> representing the payload? That way <code>UnwindToHost</code> would assert it's <code>None</code> and <code>UnwindToWasm</code> would assert it's <code>Some</code>. </p>\n</blockquote>",
        "id": 535221306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755650924
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535375010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755717024
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3137967699\">PR review</a>.</p>",
        "id": 535377865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718154
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289101177\">PR review comment</a>:</p>\n<blockquote>\n<p>Hmm, I pulled on this thread a bit, and adding a <code>ThrownException</code> unit struct (or uninhabitable enum) allows this to clean up, but then starts pulling a bunch of other things out of <code>gc</code>-only config as well (<code>TrapReason</code>, more unwind code depending on where we want to draw the boundary...) and honestly it seems cleaner to me to take the sharp line of types-and-enum-arms-don't-exist-for-exceptions in a GC-disabled build? Otherwise there are a bunch of dynamically unreachable failure points, which seems awkward in its own way...</p>\n</blockquote>",
        "id": 535377868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718154
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535378657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718469
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3137982036\">PR review</a>.</p>",
        "id": 535378660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718470
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289111376\">PR review comment</a>:</p>\n<blockquote>\n<p>We did indeed have \"panic on re-setting pending exception\", due to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2279374762\">your review comment here</a> suggesting that we <code>debug_assert</code> to ensure no prior exception. That said, now that we have the \"pending exception slot\" API, this is user-exposed and clearly a different tradeoff, so I've removed that assert.</p>\n</blockquote>",
        "id": 535378662,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718471
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3137982349\">PR review</a>.</p>",
        "id": 535378678,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718479
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289111574\">PR review comment</a>:</p>\n<blockquote>\n<p>Definitely not, it turns out! I was playing Type Tetris with the APIs and this was the best I had found, but it turns out <code>Rooted::new</code> is exactly what I wanted to root an existing raw ref. Updated.</p>\n</blockquote>",
        "id": 535378680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718479
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3137982591\">PR review</a>.</p>",
        "id": 535378695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718485
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289111723\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 535378696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718485
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3137982796\">PR review</a>.</p>",
        "id": 535378704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718489
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289111863\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, removed for now -- always possible to add later if it turns out to be a real ergonomic need...</p>\n</blockquote>",
        "id": 535378705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718489
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3137982996\">PR review</a>.</p>",
        "id": 535378713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718494
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289111999\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 535378714,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718494
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3137983388\">PR review</a>.</p>",
        "id": 535378734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718504
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289112275\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 535378735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718504
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3137983757\">PR review</a>.</p>",
        "id": 535378744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718509
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289112461\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 535378745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755718509
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3138033200\">PR review</a>.</p>",
        "id": 535380817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755719426
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289148716\">PR review comment</a>:</p>\n<blockquote>\n<p>I see a ~10% regression (10.8ns -&gt; 12.1ns) on core Wasm host-to-Wasm calls, and an in-the-noise / \"0.4% speedup\" on component host-to-Wasm calls. I don't see any obvious reason that would cause this for non-trapping/throwing calls, but given a little more plumbing in general I'm also not too surprised. Happy to try digging in further if needed...</p>\n</blockquote>",
        "id": 535380818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755719426
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3138043301\">PR review</a>.</p>",
        "id": 535381275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755719624
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289157121\">PR review comment</a>:</p>\n<blockquote>\n<p>This is slightly tricky as it would then imply the caller of <code>unwind</code> knows when to provide the payload -- the protocol is that the pending exception remains on the <code>Store</code> if we're <code>UnwindToHost</code>'ing, and not if we're <code>UnwindToWasm</code>'ing. IMHO I'd rather keep the knowledge of <code>self.unwind</code> enum arms local to this file, but open to other ideas if you have any.</p>\n</blockquote>",
        "id": 535381276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755719624
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535381982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755720001
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3137966615\">PR review</a>:</p>\n<blockquote>\n<p>r=me with the offsets and stack map stuff addressed, thanks!</p>\n</blockquote>",
        "id": 535382048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755720029
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289107828\">PR review comment</a>:</p>\n<blockquote>\n<p>I think we will want to have both the existing <code>GcLayouts::exception_tag_offset</code> method and a new <code>GcLayouts::exception_instance_idx_offset</code> method, and then use those things here (or the collector-specific constants that those things are implemented with here).</p>\n</blockquote>",
        "id": 535382049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755720029
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289100481\">PR review comment</a>:</p>\n<blockquote>\n<p>It is pretty funky and potentially footgun-y that we have <code>tag_offset</code> as the offset of the instance id and then do <code>tag_offset + 4</code> to get the tag offset. Can we use proper constants and/or <code>VMOffsets</code> methods for everything here (and also have tests asserting that they are correct, if we are missing them).</p>\n</blockquote>",
        "id": 535382050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755720029
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289108662\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    log::trace!(\"translate_exn_unbox({tag_index:?}, {exn_ref:?})\");\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 535382051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755720029
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289132260\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this should be on the maybe-<code>ireduce</code>d value, not the direct payload. Don't have a link to the code off-hand but I am pretty sure we assert somewhere that we only have stack maps for <code>i32</code> types.</p>\n</blockquote>",
        "id": 535382052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755720029
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289137390\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/c645077df15584651f115ae9c909072cd699ef28/crates/cranelift/src/compiler.rs#L1314-L1329\">https://github.com/bytecodealliance/wasmtime/blob/c645077df15584651f115ae9c909072cd699ef28/crates/cranelift/src/compiler.rs#L1314-L1329</a></p>\n</blockquote>",
        "id": 535382053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755720029
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#issuecomment-3207907433\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>:</p>\n<blockquote>\n<blockquote>\n<p>Mind updating a few bits and pieces of documentation as well with this? The ones I can think of are:</p>\n<div class=\"codehilite\"><pre><span></span><code>* [The wasm proposals table](https://github.com/bytecodealliance/wasmtime/blob/main/docs/stability-wasm-proposals.md#wasm-proposals)\n\n* [The architecture table for supported wasm proposals](https://github.com/bytecodealliance/wasmtime/blob/main/docs/stability-tiers.md#x86_64)\n</code></pre></div>\n\n<p>Also, apart from Pulley and fuzzing possibly, are there other known entities to record in issues before landing? E.g. anything like an open question about performance, API, etc.</p>\n</blockquote>\n<p>Docs updated!</p>\n<p>The two major remaining bits are Pulley support and ensuring exception support is fuzzed. I'll work on at least the latter, and I'll file issues for both once this merges.</p>\n<p>All comments addressed modulo those still open above -- thanks!</p>\n</blockquote>",
        "id": 535382133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755720066
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535385396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755721741
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3138140165\">PR review</a>.</p>",
        "id": 535385405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755721744
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289226836\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n</blockquote>",
        "id": 535385407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755721744
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3138140413\">PR review</a>.</p>",
        "id": 535385415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755721750
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289227048\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 535385416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755721750
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3138140596\">PR review</a>.</p>",
        "id": 535385429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755721755
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289227206\">PR review comment</a>:</p>\n<blockquote>\n<p>Good point -- fixed!</p>\n</blockquote>",
        "id": 535385430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755721756
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#issuecomment-3207998343\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>:</p>\n<blockquote>\n<p>@alexcrichton I think this is ready for you again on the three open threads above; and a final LGTM or any other issues you see on the runtime side. Thanks!</p>\n</blockquote>",
        "id": 535385503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755721800
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3138154872\">PR review</a>.</p>",
        "id": 535386253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755722114
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289237935\">PR review comment</a>:</p>\n<blockquote>\n<p>No I agree that we should avoid <code>unreachable!()</code>-behind-cfg or things like that as agreed it gets tough to reason about \"why again isn't this dynamically reachable?\" In that sense I agree that <code>TrapReason::Exception</code> should stay #[cfg]'d away.</p>\n<p>In retrospect I don't think I fully thought this through. My main reaction was duplication of the function signature and fallback to <code>TrapReason::User</code>. This could be \"solved\" with something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Error</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"gc\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* test for `ThrownException` and return it */</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">TrapReason</span><span class=\"p\">::</span><span class=\"n\">user</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>which avoids duplicating the function signature and keeps the gc code \"on the side\". Not perfect in the sense of it still has #[cfg], but this is all quite minor and not as actionable as I originally thought it was, so I'd say let's conclude \"just ignore alex here\"</p>\n</blockquote>",
        "id": 535386254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755722114
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3138157651\">PR review</a>.</p>",
        "id": 535386396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755722187
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289240130\">PR review comment</a>:</p>\n<blockquote>\n<p>That's reasonable enough for now IMO. I suspect we might be able to recover that by shuffling around things, maybe adding <code>#[cold]</code>, tweaking slow paths, etc. That being said it's still solidly in the realm of \"this shouldn't matter and it's still fast\", so I think it's fine to defer such theoretical tweaks to a future point in time.</p>\n</blockquote>",
        "id": 535386398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755722188
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3138159673\">PR review</a>.</p>",
        "id": 535386515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755722242
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289241659\">PR review comment</a>:</p>\n<blockquote>\n<p>Nah that seems reasonable, this is a feeble attempt by me to future-proof Pulley support a bit more. Let's just defer and deal with it in total later.</p>\n</blockquote>",
        "id": 535386519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755722243
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3138165961\">PR review</a>:</p>\n<blockquote>\n<p>All sounds reasonable to me!</p>\n<p>I suspect this is likely going to bounce on CI at least once, and for that I'd recommend adding <code>prtest:full</code> to the commit messsage to get full CI here on the PR as that should give a much faster cycle time than going through the merge queue. Although that's all moot if it sails through the merge queue on the first try.</p>\n</blockquote>",
        "id": 535386839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755722407
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535388085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755723037
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#pullrequestreview-3138197319\">PR review</a>.</p>",
        "id": 535388110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755723050
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#discussion_r2289267226\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, cool, the cfg-inside-the-function is at least a little bit cleaner -- switched to that. Thanks!</p>\n</blockquote>",
        "id": 535388111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755723050
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535388746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755723370
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#issuecomment-3208094520\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>:</p>\n<blockquote>\n<p>Could you address CI failures in separate commits instead of squashing all back into one? That makes it a bit easier to review after this has merged (and it all gets squashed in the merge queue anyway)</p>\n</blockquote>",
        "id": 535390163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755724116
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#issuecomment-3208213859\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>:</p>\n<blockquote>\n<p>Ah, sorry about that! Bad habit trying to keep a clean commit history. Last diff was</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">libcalls</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">libcalls</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">de80727fa9</span><span class=\"o\">..</span><span class=\"mi\">19</span><span class=\"n\">a18af8ea</span><span class=\"w\"> </span><span class=\"mi\">100644</span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">libcalls</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">libcalls</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1612</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">1612</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">raise</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">VMStore</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_instance</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"c1\">// When Cranelift isn't in use then this is an unused libcall for Pulley, so</span>\n<span class=\"w\">     </span><span class=\"c1\">// just insert a stub to catch bugs if it's accidentally called.</span>\n<span class=\"w\">     </span><span class=\"cp\">#[cfg(not(has_host_compiler_backend))]</span>\n\n<span class=\"o\">-</span><span class=\"w\">    </span><span class=\"fm\">unreachable!</span><span class=\"p\">()</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">;</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"fm\">unreachable!</span><span class=\"p\">()</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\"> </span><span class=\"c1\">// Builtins for continuations. These are thin wrappers around the</span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">throw</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">throw</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">cf28c5caa</span><span class=\"o\">..</span><span class=\"n\">a6cf333a94</span><span class=\"w\"> </span><span class=\"mi\">100644</span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">throw</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">throw</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">115</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">115</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">compute_throw_action</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">VMStore</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">ThrowAction</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">         </span><span class=\"p\">}</span>\n<span class=\"w\">         </span><span class=\"nb\">None</span>\n<span class=\"w\">     </span><span class=\"p\">};</span>\n\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">unwinder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">nogc</span><span class=\"p\">.</span><span class=\"n\">unwinder</span><span class=\"p\">();</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">action</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">         </span><span class=\"n\">wasmtime_unwinder</span><span class=\"p\">::</span><span class=\"n\">compute_throw_action</span><span class=\"p\">(</span>\n\n<span class=\"o\">-</span><span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">wasmtime_unwinder</span><span class=\"p\">::</span><span class=\"n\">UnwindHost</span><span class=\"p\">,</span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"n\">unwinder</span><span class=\"p\">,</span>\n<span class=\"w\">             </span><span class=\"n\">handler_lookup</span><span class=\"p\">,</span>\n<span class=\"w\">             </span><span class=\"n\">exit_pc</span><span class=\"p\">,</span>\n<span class=\"w\">             </span><span class=\"n\">exit_trampoline_fp</span><span class=\"p\">,</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 535396165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755727457
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535397001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755727862
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535400059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755729683
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535400415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755729864
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535403205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755731844
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535407217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755735022
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535408705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755736401
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535409739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755737251
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#issuecomment-3208596407\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>:</p>\n<blockquote>\n<p>While there may be more than one segfaulting test I can reproduce <code>exceptions::craneliftnative_basic_throw</code> failing with this stack trace:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa022684a8</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime_environ</span><span class=\"p\">::</span><span class=\"n\">module</span><span class=\"p\">::</span><span class=\"n\">Module</span><span class=\"p\">::</span><span class=\"n\">defined_tag_index</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">environ</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">528</span>\n<span class=\"p\">#</span><span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa022768a0</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">instance</span><span class=\"p\">::</span><span class=\"n\">Instance</span><span class=\"p\">::</span><span class=\"n\">get_exported_tag</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">676</span>\n<span class=\"p\">#</span><span class=\"mi\">2</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa020592fe</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">throw</span><span class=\"p\">::</span><span class=\"n\">compute_throw_action</span><span class=\"p\">::{</span><span class=\"n\">closure</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">throw</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">99</span>\n<span class=\"p\">#</span><span class=\"mi\">3</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa02058a6e</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime_internal_unwinder</span><span class=\"p\">::</span><span class=\"n\">throw</span><span class=\"p\">::</span><span class=\"n\">compute_throw_action</span><span class=\"p\">::{</span><span class=\"n\">closure</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">throw</span><span class=\"p\">::</span><span class=\"n\">compute_throw_action</span><span class=\"p\">::{</span><span class=\"n\">closure_env</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">unwinder</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">throw</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">76</span>\n<span class=\"p\">#</span><span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa0236f44c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime_internal_unwinder</span><span class=\"p\">::</span><span class=\"n\">stackwalk</span><span class=\"p\">::</span><span class=\"n\">visit_frames</span><span class=\"o\">&lt;</span><span class=\"n\">wasmtime_internal_unwinder</span><span class=\"p\">::</span><span class=\"n\">throw</span><span class=\"p\">::</span><span class=\"n\">ThrowAction</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime_internal_unwinder</span><span class=\"p\">::</span><span class=\"n\">throw</span><span class=\"p\">::</span><span class=\"n\">compute_throw_action</span><span class=\"p\">::{</span><span class=\"n\">closure_env</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">throw</span><span class=\"p\">::</span><span class=\"n\">compute_throw_action</span><span class=\"p\">::{</span><span class=\"n\">closure_env</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">unwinder</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">stackwalk</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">203</span>\n<span class=\"p\">#</span><span class=\"mi\">5</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa020588b6</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime_internal_unwinder</span><span class=\"p\">::</span><span class=\"n\">throw</span><span class=\"p\">::</span><span class=\"n\">compute_throw_action</span><span class=\"o\">&lt;</span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">throw</span><span class=\"p\">::</span><span class=\"n\">compute_throw_action</span><span class=\"p\">::{</span><span class=\"n\">closure_env</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">unwinder</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">throw</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">60</span>\n<span class=\"p\">#</span><span class=\"mi\">6</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa020613f8</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">throw</span><span class=\"p\">::</span><span class=\"n\">compute_throw_action</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">throw</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">120</span>\n<span class=\"p\">#</span><span class=\"mi\">7</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa02387efc</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">traphandlers</span><span class=\"p\">::</span><span class=\"n\">call_thread_state</span><span class=\"p\">::</span><span class=\"n\">CallThreadState</span><span class=\"p\">::</span><span class=\"n\">record_unwind</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">traphandlers</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">819</span>\n<span class=\"p\">#</span><span class=\"mi\">8</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa0241cca2</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">traphandlers</span><span class=\"p\">::</span><span class=\"n\">catch_unwind_and_record_trap</span><span class=\"p\">::{</span><span class=\"n\">closure</span><span class=\"p\">#</span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">result</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">traphandlers</span><span class=\"p\">::</span><span class=\"n\">TrapReason</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">instance</span><span class=\"p\">::{</span><span class=\"k\">impl</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}::</span><span class=\"n\">enter_host_from_wasm</span><span class=\"p\">::{</span><span class=\"n\">closure_env</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">result</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">traphandlers</span><span class=\"p\">::</span><span class=\"n\">TrapReason</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">libcalls</span><span class=\"p\">::</span><span class=\"n\">raw</span><span class=\"p\">::</span><span class=\"n\">throw_ref</span><span class=\"p\">::{</span><span class=\"n\">closure_env</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">traphandlers</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">136</span>\n<span class=\"p\">#</span><span class=\"mi\">9</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa0245e3b8</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">traphandlers</span><span class=\"p\">::</span><span class=\"n\">tls</span><span class=\"p\">::</span><span class=\"n\">with</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">traphandlers</span><span class=\"p\">::</span><span class=\"n\">catch_unwind_and_record_trap</span><span class=\"p\">::{</span><span class=\"n\">closure_env</span><span class=\"p\">#</span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">result</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">traphandlers</span><span class=\"p\">::</span><span class=\"n\">TrapReason</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">instance</span><span class=\"p\">::{</span><span class=\"k\">impl</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}::</span><span class=\"n\">enter_host_from_wasm</span><span class=\"p\">::{</span><span class=\"n\">closure_env</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">result</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">traphandlers</span><span class=\"p\">::</span><span class=\"n\">TrapReason</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">libcalls</span><span class=\"p\">::</span><span class=\"n\">raw</span><span class=\"p\">::</span><span class=\"n\">throw_ref</span><span class=\"p\">::{</span><span class=\"n\">closure_env</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">traphandlers</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">1394</span>\n<span class=\"p\">#</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"mh\">0x000002aa02417ecc</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">traphandlers</span><span class=\"p\">::</span><span class=\"n\">catch_unwind_and_record_trap</span><span class=\"o\">&lt;</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">result</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">traphandlers</span><span class=\"p\">::</span><span class=\"n\">TrapReason</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">instance</span><span class=\"p\">::{</span><span class=\"k\">impl</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}::</span><span class=\"n\">enter_host_from_wasm</span><span class=\"p\">::{</span><span class=\"n\">closure_env</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">result</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">traphandlers</span><span class=\"p\">::</span><span class=\"n\">TrapReason</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">libcalls</span><span class=\"p\">::</span><span class=\"n\">raw</span><span class=\"p\">::</span><span class=\"n\">throw_ref</span><span class=\"p\">::{</span><span class=\"n\">closure_env</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">traphandlers</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">136</span>\n<span class=\"p\">#</span><span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"mh\">0x000002aa021466e0</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">instance</span><span class=\"p\">::</span><span class=\"n\">Instance</span><span class=\"p\">::</span><span class=\"n\">enter_host_from_wasm</span><span class=\"o\">&lt;</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">result</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">traphandlers</span><span class=\"p\">::</span><span class=\"n\">TrapReason</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">libcalls</span><span class=\"p\">::</span><span class=\"n\">raw</span><span class=\"p\">::</span><span class=\"n\">throw_ref</span><span class=\"p\">::{</span><span class=\"n\">closure_env</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">265</span>\n<span class=\"p\">#</span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"mh\">0x000002aa02132a9a</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">libcalls</span><span class=\"p\">::</span><span class=\"n\">raw</span><span class=\"p\">::</span><span class=\"n\">throw_ref</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">libcalls</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">125</span>\n<span class=\"p\">#</span><span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"mh\">0x000075fbea7486cc</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"mh\">0x000075fbea7480da</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"mh\">0x000075fbea74813c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"mh\">0x000075fbea74821c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"p\">#</span><span class=\"mi\">17</span><span class=\"w\"> </span><span class=\"mh\">0x000002aa016c9026</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">vmcontext</span><span class=\"p\">::</span><span class=\"n\">VMFuncRef</span><span class=\"p\">::</span><span class=\"n\">array_call_native</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">vmcontext</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">961</span>\n<span class=\"p\">#</span><span class=\"mi\">18</span><span class=\"w\"> </span><span class=\"mh\">0x000002aa016c8f66</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">vmcontext</span><span class=\"p\">::</span><span class=\"n\">VMFuncRef</span><span class=\"p\">::</span><span class=\"n\">array_call</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">vmcontext</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">918</span>\n<span class=\"p\">#</span><span class=\"mi\">19</span><span class=\"w\"> </span><span class=\"mh\">0x000002aa018f2082</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">func</span><span class=\"p\">::{</span><span class=\"k\">impl</span><span class=\"p\">#</span><span class=\"mi\">1</span><span class=\"p\">}::</span><span class=\"n\">call_unchecked_raw</span><span class=\"p\">::{</span><span class=\"n\">closure</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">1025</span>\n<span class=\"p\">#</span><span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"mh\">0x000002aa01102302</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">traphandlers</span><span class=\"p\">::</span><span class=\"n\">catch_traps</span><span class=\"p\">::{</span><span class=\"n\">closure</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}::</span><span class=\"n\">call_closure</span><span class=\"o\">&lt;</span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">func</span><span class=\"p\">::{</span><span class=\"k\">impl</span><span class=\"p\">#</span><span class=\"mi\">1</span><span class=\"p\">}::</span><span class=\"n\">call_unchecked_raw</span><span class=\"p\">::{</span><span class=\"n\">closure_env</span><span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">traphandlers</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">463</span>\n</code></pre></div>\n<p>Given that it's s390x-only though it's probably an endianness issue, perhaps something with a little-endian load needs to be native-endian? Or vice versa? Or maybe a store on the host needs to be little instead of native endian?</p>\n</blockquote>",
        "id": 535411627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755738580
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#issuecomment-3208600210\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>:</p>\n<blockquote>\n<p>Yep, it's almost certainly endianness -- taking a look!</p>\n</blockquote>",
        "id": 535411827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755738751
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#issuecomment-3208632699\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>:</p>\n<blockquote>\n<p>Actually, it's an issue with dynamic context reads during the stack-walk, it seems -- s390x ABI is a bit different (stackchains rather than FP-chains) so I suspect this is the issue.</p>\n</blockquote>",
        "id": 535413485,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755739941
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535415839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755741892
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535415973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755742004
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#issuecomment-3208720884\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>:</p>\n<blockquote>\n<p>s390x turned out to expose a mismatch in the definition of \"spillslot offset\" for the dynamic context -- the accessor I had exposed returns offset from the fixed storage area, which is ordinarily at <code>SP+0</code> <em>unless</em> there is an outgoing args area. s390x always has an outgoing args area (per ABI). A win for ISA diversity wrt testing!</p>\n</blockquote>",
        "id": 535416072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755742073
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535416141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755742114
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326#issuecomment-3208838225\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 535420199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755745498
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>.</p>",
        "id": 535421222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755746233
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11326\">PR #11326</a>:</p>\n<blockquote>\n<p>This PR introduces support for the [Wasm exception-handling proposal], which introduces a conventional try/catch mechanism to WebAssembly. The PR supports modules that use <code>try_table</code> to register handlers for a dynamic scope; and provides <code>throw</code> and <code>throw_ref</code> that allocate (in the first case) and throw exception objects.</p>\n<p>This PR builds on top of the work in #10510 for Cranelift-level exception support, #10919 for an unwinder, and #11230 for exception objects built on top of GC, in addition a bunch of smaller fix and enabling PRs around those.</p>\n<p>[Wasm exception-handling proposal]: <a href=\"https://github.com/WebAssembly/exception-handling/\">https://github.com/WebAssembly/exception-handling/</a></p>\n</blockquote>",
        "id": 535589790,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755816832
    }
]