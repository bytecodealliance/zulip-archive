[
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the fuzz-bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10613\">Issue #10613</a>.</p>",
        "id": 513047505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744988506
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the winch label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10613\">Issue #10613</a>.</p>",
        "id": 513047506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744988506
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10613\">issue #10613</a>:</p>\n<blockquote>\n<p>Extracted from <a href=\"https://oss-fuzz.com/testcase-detail/5727091947798528\">https://oss-fuzz.com/testcase-detail/5727091947798528</a> this module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (export \"e\") (result i64 f64)\n    call $a\n    block $block (result i64 f64)\n      call $b\n      i32.const 1\n      br_table $block 1 $block\n      unreachable\n    end\n    unreachable\n  )\n  (func $a (result i64 f64)\n    i64.const 4\n    f64.const 5\n  )\n  (func $b (result i64 f64)\n    i64.const 7\n    f64.const 8\n  )\n)\n</code></pre></div>\n<p>shows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Ccompiler</span><span class=\"o\">=</span><span class=\"n\">cranelift</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"n\">warning</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span>\n<span class=\"mi\">7</span>\n<span class=\"mi\">8</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Ccompiler</span><span class=\"o\">=</span><span class=\"n\">winch</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"n\">warning</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span>\n<span class=\"mi\">4</span>\n<span class=\"mi\">8</span>\n</code></pre></div>\n<p>where the 7/8 combo is what this module should produce.</p>\n<p>cc @saulecabrera @jeffcharles </p>\n</blockquote>",
        "id": 513047509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744988507
    },
    {
        "content": "<p>saulecabrera <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10613#issuecomment-2818257880\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10613\">issue #10613</a>:</p>\n<blockquote>\n<p>Thanks Alex, taking a look. </p>\n</blockquote>",
        "id": 513387764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745236202
    },
    {
        "content": "<p>saulecabrera assigned saulecabrera to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10613\">issue #10613</a>.</p>",
        "id": 513439277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745256185
    },
    {
        "content": "<p>saulecabrera <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10613#issuecomment-2846009500\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10613\">issue #10613</a>:</p>\n<blockquote>\n<p>I finally was able to set aside some time to look at this issue. I have located the exact place to where this issue is happening. In some cases, like the one above, stack results are not correctly shuffled before performing the jump required by <code>br_table</code>. I'm currently working on a fix. </p>\n</blockquote>",
        "id": 515600494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746143149
    },
    {
        "content": "<p>saulecabrera edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10613#issuecomment-2846009500\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10613\">issue #10613</a>:</p>\n<blockquote>\n<p>I was finally able to set aside some time to look at this issue. I have located the exact place to where this issue is happening. In some cases, like the one above, stack results are not correctly shuffled before performing the jump required by <code>br_table</code>. I'm currently working on a fix. </p>\n</blockquote>",
        "id": 515600545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746143163
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10613\">issue #10613</a>:</p>\n<blockquote>\n<p>Extracted from <a href=\"https://oss-fuzz.com/testcase-detail/5727091947798528\">https://oss-fuzz.com/testcase-detail/5727091947798528</a> this module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (export \"e\") (result i64 f64)\n    call $a\n    block $block (result i64 f64)\n      call $b\n      i32.const 1\n      br_table $block 1 $block\n      unreachable\n    end\n    unreachable\n  )\n  (func $a (result i64 f64)\n    i64.const 4\n    f64.const 5\n  )\n  (func $b (result i64 f64)\n    i64.const 7\n    f64.const 8\n  )\n)\n</code></pre></div>\n<p>shows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Ccompiler</span><span class=\"o\">=</span><span class=\"n\">cranelift</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"n\">warning</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span>\n<span class=\"mi\">7</span>\n<span class=\"mi\">8</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Ccompiler</span><span class=\"o\">=</span><span class=\"n\">winch</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"n\">warning</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span>\n<span class=\"mi\">4</span>\n<span class=\"mi\">8</span>\n</code></pre></div>\n<p>where the 7/8 combo is what this module should produce.</p>\n<p>cc @saulecabrera @jeffcharles </p>\n</blockquote>",
        "id": 516297628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746479725
    }
]