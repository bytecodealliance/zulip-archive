[
    {
        "content": "<p>bongjunj opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639\">PR #11639</a> from <code>bongjunj:fold-add-or-neg</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n<p>This adds <code>(rule (simplify (iadd ty (bor ty x y) (ineg ty y))) (band ty x (bnot ty y)))</code></p>\n</blockquote>",
        "id": 538222551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757337086
    },
    {
        "content": "<p><strong>bongjunj</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639\">PR #11639</a>.</p>",
        "id": 538222553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757337087
    },
    {
        "content": "<p><strong>bongjunj</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639\">PR #11639</a>.</p>",
        "id": 538222554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757337087
    },
    {
        "content": "<p>bongjunj <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639#issuecomment-3266285294\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639\">PR #11639</a>:</p>\n<blockquote>\n<p>Seems like <code>iadd ... (ineg ty y)</code> -&gt; <code>isub ... y</code> wins over this rule.</p>\n</blockquote>",
        "id": 538224951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757337672
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639#issuecomment-3266649251\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639\">PR #11639</a>:</p>\n<blockquote>\n<p>That might be fixable by adjusting the per-opcode costs perhaps? We could make arithmetic operations like iadd/isub slightly more costly than bitwise operations like band/bnot perhaps</p>\n</blockquote>",
        "id": 538244325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757342367
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639#issuecomment-3266902300\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639\">PR #11639</a>:</p>\n<blockquote>\n<p>I'll note that the mid-end does keep both around, rather than destructively rewriting (because egraphs!), so in the future if we have a more sophisticated cost function extractor there may be cases for both -- e.g. if the slightly more expensive form uses partial results that are already computed somewhere else. Perhaps different ISAs will have different cost functions too (they should all be 1-cycle ALU ops on any reasonable machine, but maybe some combinations of instructions fold together or compressed instruction forms are available or ...).</p>\n<p>All that said, I'm curious @bongjunj -- are you driving your exploration with some sort of overall goodness metric? In other words, are you finding any and all equivalences, or is your goal to find those that seem to simplify somehow? And for this particular one, did you see instances where it leads to useful simplifications?</p>\n<p>(I'm not opposed at all to building up a nice database of simplifications in general; as we've sometimes said, \"rules are cheap\" with ISLE's DSL compiler combining their matching. Just curious where all this is going.)</p>\n</blockquote>",
        "id": 538260534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757346181
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639#issuecomment-3266913633\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639\">PR #11639</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 538261354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757346357
    },
    {
        "content": "<p>bongjunj <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639#issuecomment-3268452107\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639\">PR #11639</a>:</p>\n<blockquote>\n<p>Just realized that this is another version of the simplification of <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10979\">https://github.com/bytecodealliance/wasmtime/pull/10979</a></p>\n<p>In addition, to @cfallin's comment, all my simplification rules are inspired by LLVM InstCombine rules.<br>\nFor example, this particular rule resembles the LLVM optimization of the following:</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">define</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"vg\">@src</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%A</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nv\">%B</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">or</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">123</span>\n<span class=\"w\">  </span><span class=\"nv\">%C</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">add</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">-123</span>\n<span class=\"w\">  </span><span class=\"k\">ret</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%C</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">define</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"vg\">@tgt</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%A</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nv\">%C</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">-124</span>\n<span class=\"w\">  </span><span class=\"k\">ret</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%C</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>(<a href=\"https://alive2.llvm.org/ce/z/QY4j7V\">https://alive2.llvm.org/ce/z/QY4j7V</a>)</p>\n<p>So basically, what I'm doing now is observe the discrepancy between the LLVM InstCombine pass and Cranelift's mid-end optimizer and then add rules to Cranelift for such missed optimization opportunities. In other words, the good metric we are looking for here is kind of \"LLVM-ness\". But I'm not sure how we can measure the usefulness of (with a well-established metric), or find an instance of this particular rule.</p>\n</blockquote>",
        "id": 538333129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757378070
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639#issuecomment-3271274159\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639\">PR #11639</a>:</p>\n<blockquote>\n<blockquote>\n<p>So basically, what I'm doing now is observe the discrepancy between the LLVM InstCombine pass and Cranelift's mid-end optimizer and then add rules to Cranelift for such missed optimization opportunities. In other words, the good metric we are looking for here is kind of \"LLVM-ness\". </p>\n</blockquote>\n<p>That sounds great, then! I wanted to make sure we had some ground truth indicating these rewrites could be useful, and \"LLVM does it\" is a very strong argument for that. Thanks for putting in this effort!</p>\n</blockquote>",
        "id": 538467753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757432310
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639#issuecomment-3271294569\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639\">PR #11639</a>:</p>\n<blockquote>\n<p>To the immediate question of making this rule actually fire: since we already rewrite <code>(iadd _ x (ineg _ y))</code> to <code>(isub _ x y)</code>, could you rewrite the left-hand side to cascade on that, and match on <code>(isub _ (bor _ x y) y)</code>?</p>\n</blockquote>",
        "id": 538468693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757432573
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639#issuecomment-3271729506\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11639\">PR #11639</a>:</p>\n<blockquote>\n<p>Small clarification on the following, because I think it is pretty important when we are talking about rewrites that aren't necessarily beneficial on their own:</p>\n<blockquote>\n<p>I'm not opposed at all to building up a nice database of simplifications in general; as we've sometimes said, \"rules are cheap\" with ISLE's DSL compiler combining their matching.</p>\n</blockquote>\n<p>Rules are cheap, <em>but e-nodes are expensive</em>. (At least, expensive relative to rules, and there is always the risk of accidentally expanding to exponential numbers of e-nodes, which can be subtly easy to do.)</p>\n<p>So adding all the commutative versions of a beneficial simplification is cheap, but adding basic commutation rules for every commutative operation (e.g. <code>a+b --&gt; b+a</code> and <code>a|b --&gt; b|a</code>) is expensive.</p>\n<p>Similarly, if we have an input <code>A</code> that matches rule <code>r</code> to produce <code>B</code> which then matches rule <code>s</code> to produce the final output <code>C</code> (<code>A --r--&gt; B --s--&gt; C</code>) then creating a \"macro rule\" that composes <code>r</code> and <code>s</code> (<code>A --rs--&gt; C</code>) is a win in our system (from a cost perspective) since we are trading away an intermediate e-node (expensive) for an additional rule (cheap).[^0]</p>\n<p>[^0]: It would be <em>super</em> cool if, given an input set of basic rules, the ISLE compiler automatically derived a set of macro rules based on them. Seems like a potentially fun/fruitful research project.</p>\n<p>So adding rules that create new e-nodes because <em>maybe</em> they will be useful for some other beneficial rewrite, but aren't beneficial on their own, is something that should ultimately be approached with care. That doesn't mean we shouldn't ever do it, but we should at least put in the effort to check that there actually exists another beneficial rewrite that could fire afterwards, and make sure it isn't too general such that it will result in tons of intermediate e-nodes that might not actually lead to some other beneficial rule firing.</p>\n</blockquote>",
        "id": 538497423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757440445
    }
]