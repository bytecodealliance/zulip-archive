[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11125\">issue #11125</a>:</p>\n<blockquote>\n<p>Follow up issue to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11122\">https://github.com/bytecodealliance/wasmtime/pull/11122</a></p>\n<p>The semantics of <code>br_if</code> are such that we branch to the consequent on a non-zero condition value and the alternative  on a zero condition value. Often we are emitting x64 instructions to to the <code>op</code> and then explicitly test whether the result is zero or non-zero and branch accordingly. However, for many <code>op</code>s we can instead just do some kind of test/compare on <code>a</code> and <code>b</code> directly, instead of the <code>op</code> and then a non-zero test.</p>\n<p>For example given</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code>    <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">i32.or</span>\n    <span class=\"k\">if</span> <span class=\"c1\">;; label = @1</span>\n      <span class=\"nb\">call</span> <span class=\"mi\">0</span>\n    <span class=\"k\">else</span>\n      <span class=\"nb\">call</span> <span class=\"mi\">1</span>\n    <span class=\"k\">end</span>\n</code></pre></div>\n<p>we currently emit the comparison as</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"err\">00000019</span><span class=\"w\">    </span><span class=\"err\">0</span><span class=\"nf\">b</span><span class=\"w\"> </span><span class=\"no\">d1</span><span class=\"w\">                             </span><span class=\"no\">or</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">ecx</span>\n<span class=\"err\">0000001</span><span class=\"nf\">b</span><span class=\"w\">    </span><span class=\"mi\">85</span><span class=\"w\"> </span><span class=\"no\">d2</span><span class=\"w\">                             </span><span class=\"no\">test</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">edx</span>\n<span class=\"err\">0000001</span><span class=\"nf\">d</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"no\">f</span><span class=\"w\"> </span><span class=\"mi\">85</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">                 </span><span class=\"no\">jne</span><span class=\"w\"> </span><span class=\"mi\">0x38</span>\n<span class=\"na\">...</span>\n</code></pre></div>\n<p>but we should be able to do something like</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">or</span><span class=\"w\"> </span><span class=\"no\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">ecx</span>\n<span class=\"nf\">je</span><span class=\"w\"> </span><span class=\"mi\">0x38</span>\n<span class=\"na\">...</span>\n</code></pre></div>\n<p>instead.</p>\n<p>I think that we can add special cases for <code>br_if(op(a, b))</code> for all <code>op</code>s in <code>{iadd, isub, bor, bxor}</code>. Maybe more. (Note that we already have a <code>br_if(band(a, b))</code> special case).</p>\n<p>Note that doing this might require some additional refactorings in the x64 assembler library and its ISLE constructor generation: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11122#issuecomment-3001204011\">https://github.com/bytecodealliance/wasmtime/pull/11122#issuecomment-3001204011</a></p>\n</blockquote>",
        "id": 525561286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750784654
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11125\">Issue #11125</a>.</p>",
        "id": 525588919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750796297
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the cranelift<span aria-label=\"goal\" class=\"emoji emoji-1f945\" role=\"img\" title=\"goal\">:goal:</span>optimize-speed label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11125\">Issue #11125</a>.</p>",
        "id": 525588920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750796297
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the cranelift:area:x64 label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11125\">Issue #11125</a>.</p>",
        "id": 525588921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750796297
    }
]