[
    {
        "content": "<p>rvolosatovs opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a> from <code>rvolosatovs:fix/flaky-content-length-test</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Closes #11656 </p>\n</blockquote>",
        "id": 538484324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757437270
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538484938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757437409
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538496517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757440108
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538497093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757440338
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538498361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757440765
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538500554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757441457
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538500706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757441517
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538505035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757442977
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538605789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757496804
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538608085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757497531
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538614405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757499790
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>:</p>\n<blockquote>\n<p>Closes #11656 </p>\n<p>The reason for the flakiness was an issue in implementation of the test HTTP server logic - short write of the 2nd connection would <em>sometimes</em> cause an error and the 3rd connection would fail to get established, since the server would stop accepting connections.<br>\nThe reason for this is that there is a race condition for the \"short write\" case in which the client might not even have started sending the request body to the server yet when the error is caught by the consumer and consequently the I/O driver task is dropped. The cases where the body was not started to be transmitted yet would be treated as success by Hyper and so the 3rd connection would be accepted, however in the rare cases where the request body has already started being streamed, connection handling would fail server-side due to the short write, aborting the accept loop and causing \"connection refused\" error in the guest for the 3rd connection never triggering the <code>content-length</code> check for the 3rd case and therefore causing a panic on the <code>transmit.expect_err</code>, since from <code>wasi:http</code> perspective transmission future did not encounter errors as it has never started. To address the last part, I've also pushed <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658/commits/db3cbac35da23760997cf4ba44964bf7a357af26\">https://github.com/bytecodealliance/wasmtime/pull/11658/commits/db3cbac35da23760997cf4ba44964bf7a357af26</a> to make sure <code>content-length</code> check happens early and even if the <code>GuestBody</code> is already dropped by the time guest is trying to write</p>\n</blockquote>",
        "id": 538614572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757499860
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>:</p>\n<blockquote>\n<p>Closes #11656 </p>\n<p>We paired with @alexcrichton yesterday debugging this (thank you, @alexcrichton!) and here's the summary of what we've found out:<br>\nThe reason for the flakiness was an issue in implementation of the test HTTP server logic - short write of the 2nd connection would <em>sometimes</em> cause an error and the 3rd connection would fail to get established, since the server would stop accepting connections.<br>\nThe reason for this is that there is a race condition for the \"short write\" case in which the client might not even have started sending the request body to the server yet when the error is caught by the consumer and consequently the I/O driver task is dropped. The cases where the body was not started to be transmitted yet would be treated as success by Hyper and so the 3rd connection would be accepted, however in the rare cases where the request body has already started being streamed, connection handling would fail server-side due to the short write, aborting the accept loop and causing \"connection refused\" error in the guest for the 3rd connection never triggering the <code>content-length</code> check for the 3rd case and therefore causing a panic on the <code>transmit.expect_err</code>, since from <code>wasi:http</code> perspective transmission future did not encounter errors as it has never even began. To address the last part, I've also pushed <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658/commits/db3cbac35da23760997cf4ba44964bf7a357af26\">https://github.com/bytecodealliance/wasmtime/pull/11658/commits/db3cbac35da23760997cf4ba44964bf7a357af26</a> to make sure <code>content-length</code> check happens early and even if the <code>GuestBody</code> is already dropped by the time guest is trying to write</p>\n</blockquote>",
        "id": 538614928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757499992
    },
    {
        "content": "<p><strong>rvolosatovs</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a> as ready for review.</p>",
        "id": 538615357,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757500142
    },
    {
        "content": "<p><strong>rvolosatovs</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-wasi-reviewers\">wasmtime-wasi-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538615359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757500143
    },
    {
        "content": "<p><strong>rvolosatovs</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538615360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757500143
    },
    {
        "content": "<p><strong>rvolosatovs</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538615361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757500143
    },
    {
        "content": "<p><strong>rvolosatovs</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538615391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757500153
    },
    {
        "content": "<p>rvolosatovs has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538615428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757500165
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538623552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757502631
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538623761,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757502705
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538650631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757510570
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658#issuecomment-3274973122\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>:</p>\n<blockquote>\n<p>I've been working on some refactoring and addition of <code>content-length</code> validation for requests carrying bodies originating from the host as well as some refactoring, since it's all related to <code>content-length</code>, I went ahead and just pushed it to this PR to simplify review/merge process</p>\n</blockquote>",
        "id": 538650916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757510643
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>:</p>\n<blockquote>\n<p>Closes #11656 </p>\n<p>We paired with @alexcrichton yesterday debugging this (thank you, @alexcrichton!) and here's the summary of what we've found out:<br>\nThe reason for the flakiness was an issue in implementation of the test HTTP server logic - short write of the 2nd connection would <em>sometimes</em> cause an error and the 3rd connection would fail to get established, since the server would stop accepting connections.<br>\nThe reason for this is that there is a race condition for the \"short write\" case in which the client might not even have started sending the request body to the server yet when the error is caught by the consumer and consequently the I/O driver task is dropped. The cases where the body was not started to be transmitted yet would be treated as success by Hyper and so the 3rd connection would be accepted, however in the rare cases where the request body has already started being streamed, connection handling would fail server-side due to the short write, aborting the accept loop and causing \"connection refused\" error in the guest for the 3rd connection never triggering the <code>content-length</code> check for the 3rd case and therefore causing a panic on the <code>transmit.expect_err</code>, since from <code>wasi:http</code> perspective transmission future did not encounter errors as it has never even began. To address the last part, I've also pushed <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658/commits/db3cbac35da23760997cf4ba44964bf7a357af26\">https://github.com/bytecodealliance/wasmtime/pull/11658/commits/db3cbac35da23760997cf4ba44964bf7a357af26</a> to make sure <code>content-length</code> check happens early and even if the <code>GuestBody</code> is already dropped by the time guest is trying to write</p>\n<p>In this PR I've also:</p>\n<ul>\n<li>added <code>content-length</code> validation for requests carrying bodies originating from the host</li>\n<li>did some refactoring of the guest body functionality</li>\n<li>added a bit more docs</li>\n</ul>\n</blockquote>",
        "id": 538651210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757510714
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538653602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757511291
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11658\">PR #11658</a>.</p>",
        "id": 538655756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757511813
    }
]