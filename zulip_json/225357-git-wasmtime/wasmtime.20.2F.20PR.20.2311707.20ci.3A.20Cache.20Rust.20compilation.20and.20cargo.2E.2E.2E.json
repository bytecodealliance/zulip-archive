[
    {
        "content": "<p>tschneidereit opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707\">PR #11707</a> from <code>tschneidereit:actions-cache</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>I noticed that Wasmtime uses almost no cache for its GitHub Actions workflows. Let's see how well adding a cache for <code>target</code> plus various <code>cargo</code> dirs works.</p>\n</blockquote>",
        "id": 540081313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758134776
    },
    {
        "content": "<p><strong>tschneidereit</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707\">PR #11707</a>.</p>",
        "id": 540081315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758134776
    },
    {
        "content": "<p><strong>tschneidereit</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707\">PR #11707</a>.</p>",
        "id": 540081317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758134777
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707#issuecomment-3304273236\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707\">PR #11707</a>:</p>\n<blockquote>\n<p>Personally I don't think we're a good fit for caching here, so I'm not sure about this. Some concerns I would have are:</p>\n<ul>\n<li>Right now this is keyed on os + lock file but what exactly is built/cached in a <code>target</code> dir depends on the build itself. That means that as-is there may not be much sharing between builders with whomever wins the race to populate the cache (especially with features in play changing deep in deps). If we were to fully shard the cache based on build then I'd fear we would blow the limits quickly. We have &gt;100 CI entries and with a 10G limit for the whole repo that gives ~100M per cache entry, and a build of Wasmtime is much larger than that.</li>\n<li>We don't really need to cache Cargo registry lookups any more AFAIK as it's such a small portion of the build itself.</li>\n</ul>\n<p>The most plausible route I know of for caching would be something like <code>sccache</code>-level granularity rather than target-dir-granularity, but I also haven't tested out if that would help much. Our slowest builds are mostly emulation of s390x/riscv64 and Windows. Emulation makes sense and Windows is unfortunately just really slow</p>\n</blockquote>",
        "id": 540087138,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758136847
    },
    {
        "content": "<p>tschneidereit updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707\">PR #11707</a>.</p>",
        "id": 540087627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758137059
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707#issuecomment-3304293663\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707\">PR #11707</a>:</p>\n<blockquote>\n<p>Yeah, it's possible that this will end up not being worth it: my first attempt shaved about 45 seconds off the build, and that might vary by which job wins the race to creating the cache entry.</p>\n<p>I just force-pushed a new version using <a href=\"https://github.com/Swatinem/rust-cache\">https://github.com/Swatinem/rust-cache</a>. We'll see if that does any better at all. If not, the only other thing I can think of is to specifically enable caching for the longest-running jobs and nothing else. Or we'll just close this at that point.</p>\n</blockquote>",
        "id": 540088094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758137263
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707#issuecomment-3304358120\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707\">PR #11707</a>:</p>\n<blockquote>\n<p>I re-triggered the build with cache seeded, but I'm already pretty certain that this won't help as-is: the job name part of the cache keys for the <code>test-*</code> jobs is abbreviated in a way that makes exactly the longest-running jobs race for creating the cache entry :/</p>\n</blockquote>",
        "id": 540091338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758138487
    },
    {
        "content": "<p>tschneidereit updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707\">PR #11707</a>.</p>",
        "id": 540107350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758145523
    },
    {
        "content": "<p>tschneidereit updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707\">PR #11707</a>.</p>",
        "id": 540109056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758146624
    },
    {
        "content": "<p>tschneidereit updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707\">PR #11707</a>.</p>",
        "id": 540114387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758149786
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707#issuecomment-3304795062\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707\">PR #11707</a>:</p>\n<blockquote>\n<p>With a switch to only using the cache for the longest-running test job, I think this might work? It seems to reduce CI runtime by about 60-80 seconds, or ~10% or so, which doesn't seem too bad.</p>\n<p>The last iteration also only caches dependencies now. With that, a cache entry for Linux is about 340MB, which should hopefully mean that for a full test run we should still stay way under 10GB, and hence shouldn't risk evicting the preexisting, much more long-term stable caches.</p>\n</blockquote>",
        "id": 540114942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758150099
    },
    {
        "content": "<p>tschneidereit edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707#issuecomment-3304795062\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707\">PR #11707</a>:</p>\n<blockquote>\n<p>With a switch to only using the cache for the longest-running test job, I think this might work? It seems to reduce CI runtime by about 60-80 seconds, or ~10% or so, which doesn't seem too bad.</p>\n<p>The last iteration also only caches dependencies now. With that, a cache entry for Linux is about 400MB, which should hopefully mean that for a full test run we should still stay way under 10GB, and hence shouldn't risk evicting the preexisting, much more long-term stable caches.</p>\n<p>[Edit: 400MB, not 340MB. I think that doesn't change the calculus though)</p>\n</blockquote>",
        "id": 540115062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758150182
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707#issuecomment-3312647802\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11707\">PR #11707</a>:</p>\n<blockquote>\n<p>Could you run <code>prtest:full</code> for this too? I'm not actually sure how many wasmtime-cli builds we do but it would be good to confirm the total size is hopefully well under 10G. Only caching wasmtime-cli seems reasonable since <a href=\"https://github.com/bytecodealliance/wasmtime/actions/metrics/performance?tab=jobs&amp;filters=workflow_file_name%3Amain.yml\">that's our slowest test run</a> mostly, with the one outlier being C API tests on Windows.</p>\n<p>Another possible alternative, though, is to configure sccache for the wasmtime-cli test job too. That would I think yield effectively the same speedups with better cache eviction behavior because the cache entries are much more fine-grained.</p>\n</blockquote>",
        "id": 540482542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758295692
    }
]