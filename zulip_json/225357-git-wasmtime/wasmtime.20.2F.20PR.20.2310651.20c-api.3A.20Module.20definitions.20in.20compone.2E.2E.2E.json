[
    {
        "content": "<p>MangoPeachGrape opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651\">PR #10651</a> from <code>MangoPeachGrape:c-api/component-model/module-def</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>See previous comment <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10598#issuecomment-2818696550\">https://github.com/bytecodealliance/wasmtime/pull/10598#issuecomment-2818696550</a>.<br>\nSketched out a similar approach to the one in #9812. I haven't finished it, as I'm quite unsure if this is the way to go.</p>\n<p>Would something like this be better?:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// insert into the NameMap (error if shadow)</span>\n<span class=\"n\">wasmtime_component_linker_define_instance</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"aa\"</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// fetch \"aa\" from the NameMap (error if not defined), then define the module inside it</span>\n<span class=\"n\">wasmtime_component_linker_define_module</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"aa.module\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>That would require adding function to <code>LinkerInstance</code>, similar to <code>into_instance()</code>, but instead of inserting to the map, it would fetch.</p>\n<p>Is that a valid/better approach?</p>\n<p>Also, is seperating the path parts by <code>.</code> fine, or should the path be passed as <code>const char**</code>?</p>\n<p>Also also, @alexcrichton, could you provide me a nested test component, as I couldn't for the life of me get the syntax correct? Thanks</p>\n</blockquote>",
        "id": 513842226,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745406889
    },
    {
        "content": "<p><strong>MangoPeachGrape</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651\">PR #10651</a>.</p>",
        "id": 513842229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745406889
    },
    {
        "content": "<p><strong>MangoPeachGrape</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651\">PR #10651</a>.</p>",
        "id": 513842231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745406889
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651#issuecomment-2824597137\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651\">PR #10651</a>:</p>\n<blockquote>\n<p>Ok I want to definitely apologize -- what I'm thinking now is \"let's go back to what you had before\".</p>\n<p>While I agree with my sentiment in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10598#issuecomment-2818696550\">https://github.com/bytecodealliance/wasmtime/pull/10598#issuecomment-2818696550</a> it's not a hard-and-fast rule we adhere to in the C API. There are a number of other locations where return values are effectively borrowed from the input value. In that sense it's not like we have to 100% avoid it, it's just best if we can IMO.</p>\n<p>Currently the <code>component::Linker</code> API is such that once you call <code>.instance(...)</code> you can't call it again, so what I was originally thinking with that comment was not actually possible where you'd sort of push/pop contexts and/or build up a \"path\" as you're doing here. Basically the base API is a bit restrictive, and I'm also not sure that we want to change that.</p>\n<p>Ok though so on this PR specifically, my thoughts are:</p>\n<ul>\n<li>We'll want to avoid <code>.</code> as a path separator (or any other string) to avoid possible clashing with import names in general.</li>\n<li>I'm souring on my own idea after seeing what it takes to implement it. I think it would be best to avoid having mirror data structures in the C API on reflection and probably best if we stick to being a thin wrapper around the Rust API.</li>\n</ul>\n<p>That all leads me to thinking we should go back to the original API you had sketched out, where the C API is a wrapper around <code>Box&lt;LinkerInstance&lt;'_, T&gt;&gt;</code> more-or-less. I'm really sorry I led you astray with my suggestion, I should have more fully thought through the suggestion before having you put work into it! For that I'm sorry :(</p>\n<p>WDYT though about going back to using <code>LinkerInstance</code> raw in the C API? That would I think make the implementation of the C API easier but would require some stern words in the documentation about the lifetime of the resulting pointer and the order in which things must be used/destroyed for example. If you're ok with this approach then I'd recommend re-adding <code>wasmtime_component_linker_instance_t</code> and then have a function <code>wasmtime_component_linker_root</code> which takes a <code>wasmtime_component_linker_t</code> and returns the instance. From that instance you could then project more instances (e.g. <code>wasmtime_component_linker_instance_add_instance</code> (wow that is becoming a mouthful, maybe bikeshed that...) to return a sub-<code>wasmtime_component_linker_instance_t</code> or <code>wasmtime_component_linker_instance_add_module</code> for adding a module as-is)</p>\n</blockquote>",
        "id": 513894134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745420189
    },
    {
        "content": "<p>MangoPeachGrape updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651\">PR #10651</a>.</p>",
        "id": 513940742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745433409
    },
    {
        "content": "<p>MangoPeachGrape <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651#issuecomment-2825198703\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651\">PR #10651</a>:</p>\n<blockquote>\n<p>No problem! Let me know if you think of better names, or see any other issues. I'll do docs and tests tomorrow.</p>\n</blockquote>",
        "id": 513942246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745433930
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651#pullrequestreview-2788423986\">PR review</a>:</p>\n<blockquote>\n<p>Nice yeah this looks great, thanks again and sorry for the whiplash!</p>\n<p>With tests + docs looks good to me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <br>\n</p>\n</blockquote>",
        "id": 513944000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745434551
    },
    {
        "content": "<p>MangoPeachGrape updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651\">PR #10651</a>.</p>",
        "id": 514188235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745517149
    },
    {
        "content": "<p>MangoPeachGrape <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651#issuecomment-2828466321\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651\">PR #10651</a>:</p>\n<blockquote>\n<p>Let me know if you can think of a better way to convey the lifetime rules.</p>\n<p>What's next, values?</p>\n</blockquote>",
        "id": 514192993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745517776
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651#pullrequestreview-2792360133\">PR review</a>.</p>",
        "id": 514219276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745524991
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651#issuecomment-2828731356\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651\">PR #10651</a>:</p>\n<blockquote>\n<p>Before values, perhaps instantiation? Then maybe loading exports like functions, and then after that function invocations which would be a forcing function on values?</p>\n</blockquote>",
        "id": 514219363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745525031
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651\">PR #10651</a>.</p>",
        "id": 514222533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745526289
    },
    {
        "content": "<p>MangoPeachGrape <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651#issuecomment-2830833917\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651\">PR #10651</a>:</p>\n<blockquote>\n<p>@alexcrichton WDYM by instantiation? Something other than <code>wasmtime_component_linker_instantiate()</code>?</p>\n</blockquote>",
        "id": 514412188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745597340
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651#issuecomment-2831205221\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10651\">PR #10651</a>:</p>\n<blockquote>\n<p>Oh ignore me, I forgot that was already added!</p>\n</blockquote>",
        "id": 514444448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745607746
    }
]