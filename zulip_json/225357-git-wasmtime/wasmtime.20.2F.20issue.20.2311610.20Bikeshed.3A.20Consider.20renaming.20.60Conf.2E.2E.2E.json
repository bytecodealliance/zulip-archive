[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11610\">issue #11610</a>:</p>\n<blockquote>\n<p>This is an issue spawned from <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11604/files/07388c12a717179b9f37b656332ec15ac2744eeb#r2323328166\">this comment</a> where currently Wasmtime has a number of methods on <code>Config</code> which are prefixed with <code>cranelift_*</code>. The original intention of this was to clearly indicate that these are Cranelift-specific features and not related to other compilers. The way things have evolved over time, however, is that when Winch is enabled we also use Cranelift to generate trampolines. Additionally many Cranelift settings also affect Winch since it's using many of the same ISA primitives and flags and such.</p>\n<p>Given all that while these options are technically correct in that they only affect Cranelift they're also confusing in that they also affect Winch-configured builds. It's probably worth considering renaming these methods to avoid \"cranelift\" in the name and just say that they're \"compiler\" related. We can document some of them and their applicability to certain compiler backends (e.g. Winch doesn't respect opt_level for its generated code)</p>\n</blockquote>",
        "id": 537768139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757027098
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime:api label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11610\">Issue #11610</a>.</p>",
        "id": 537768141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757027099
    },
    {
        "content": "<p>saulecabrera <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11610#issuecomment-3259220668\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11610\">issue #11610</a>:</p>\n<blockquote>\n<p>Regarding the the applicability to certain compiler backends, should a configuration error be returned if a particular setting doesn't affect/is not applicable to a certain backend to further reduce any confusion regarding the matrix of settings/backends? e.g., <code>cranelift_pcc</code> or <code>cranelift_regalloc_algorithm</code> don't really affect Winch, so I think that an option in such cases would be to validate the applicability of such settings, similar to what we do for runtime features <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/winch_engine_features.rs\">that are not supported by Winch, but that are by Cranelift</a>. </p>\n</blockquote>",
        "id": 537915928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757093396
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11610#issuecomment-3259660888\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11610\">issue #11610</a>:</p>\n<blockquote>\n<p>On one hand, I agree, but on the other hand Winch uses Cranelift for trampolines so technically all Cranelift settings affect those. I'm not sure if we can say up front whether any setting would be critical for trampolines in terms of \"you have to be able to set this even when using Winch or otherwise the system won't work\". </p>\n<p>It would make it much cleaner conceptually, though, if we could deny all Cranelift-specific settings when using Winch.</p>\n</blockquote>",
        "id": 537941666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757103885
    }
]