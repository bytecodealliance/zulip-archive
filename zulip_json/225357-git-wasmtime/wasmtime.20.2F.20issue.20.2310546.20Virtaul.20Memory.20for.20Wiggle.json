[
    {
        "content": "<p>Destructor17 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10546\">issue #10546</a>:</p>\n<blockquote>\n<p>Wiggle's GuestMemory enum seem to be very limited. <br>\nBoth Unshared and Shared cases are basically slices. <br>\nIt is impossible to obtain slices to guest memory from such embedders as WebAssembly JS API or Wasmer.</p>\n<p>I ran into this issue while making my own WebAssembly JS API based embedder.<br>\nI'd like to use Wiggle and wasi-common to implement wasip1 and wasi-threads as well as some additional apis, and share these implementations with implementation based Wasmtime.<br>\nBut, since embedder's and guest's memories are different WebAssembly.Memory objects, existing GuestMemory doesn't cover my case.</p>\n<h4>Feature</h4>\n<p>It would be nice to see a third case in GuestMemory enum called Virtaul, Dynamic, or whatever.<br>\nThis new case allows embedder to implementation memory operations such as reading, writing and checking memory size. <br>\nEmbedder might implement memory operations using simple memcpy, invoking JavaScript code, IPC, or even network, who knows...</p>\n<h4>Benefit</h4>\n<p>I believe this improvement could allow Wiggle and wasi-common reach wider range of WebAssembly embedders.</p>\n<h4>Implementation</h4>\n<p>This improvement's implementation seem to be straightforward.<br>\nSo I believe we just need to:</p>\n<ul>\n<li>add trait for memory operations. Let's call it <code>VirtualMemory</code></li>\n<li>add new case to GuestMemory containing <code>dyn VirtualMemory</code></li>\n<li>cover missing match arms in GuestMemory's functions.</li>\n</ul>\n<p>I already implemented this in my fork and it works just fine.</p>\n<p>I am not sure, but adding third arm to frequently called matches may make imported function a bit slower even if this third case is not in use.</p>\n<h4>Alternatives</h4>\n<p>Since this improvement's benefits for Wasmtime itself are questionable, maybe it doesn't worth implementing at all.<br>\nAlternatively, it still can be implemented under feature flag.</p>\n</blockquote>",
        "id": 510869844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744100865
    },
    {
        "content": "<p>Destructor17 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10546#issuecomment-2785677801\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10546\">issue #10546</a>:</p>\n<blockquote>\n<p>I am willing to upstream my implementation of this feature, but I believe it worth some discussion, so I started from issue.</p>\n</blockquote>",
        "id": 510872229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744101531
    },
    {
        "content": "<p>Destructor17 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10546\">issue #10546</a>:</p>\n<blockquote>\n<p>Wiggle's GuestMemory enum seem to be very limited. <br>\nBoth Unshared and Shared cases are basically slices. <br>\nIt is impossible to obtain slices to guest memory from such embedders as WebAssembly JS API or Wasmer.</p>\n<p>I ran into this issue while making my own WebAssembly JS API based embedder.<br>\nI'd like to use Wiggle and wasi-common to implement wasip1 and wasi-threads as well as some additional apis, and share these implementations with implementation based on Wasmtime.<br>\nBut, since embedder's and guest's memories are different WebAssembly.Memory objects, existing GuestMemory doesn't cover my case.</p>\n<h4>Feature</h4>\n<p>It would be nice to see a third case in GuestMemory enum called Virtaul, Dynamic, or whatever.<br>\nThis new case allows embedder to implementation memory operations such as reading, writing and checking memory size. <br>\nEmbedder might implement memory operations using simple memcpy, invoking JavaScript code, IPC, or even network, who knows...</p>\n<h4>Benefit</h4>\n<p>I believe this improvement could allow Wiggle and wasi-common reach wider range of WebAssembly embedders.</p>\n<h4>Implementation</h4>\n<p>This improvement's implementation seem to be straightforward.<br>\nSo I believe we just need to:</p>\n<ul>\n<li>add trait for memory operations. Let's call it <code>VirtualMemory</code></li>\n<li>add new case to GuestMemory containing <code>dyn VirtualMemory</code></li>\n<li>cover missing match arms in GuestMemory's functions.</li>\n</ul>\n<p>I already implemented this in my fork and it works just fine.</p>\n<p>I am not sure, but adding third arm to frequently called matches may make imported function a bit slower even if this third case is not in use.</p>\n<h4>Alternatives</h4>\n<p>Since this improvement's benefits for Wasmtime itself are questionable, maybe it doesn't worth implementing at all.<br>\nAlternatively, it still can be implemented under feature flag.</p>\n</blockquote>",
        "id": 510872565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744101645
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10546\">issue #10546</a>:</p>\n<blockquote>\n<p>Wiggle's GuestMemory enum seem to be very limited. <br>\nBoth Unshared and Shared cases are basically slices. <br>\nIt is impossible to obtain slices to guest memory from such embedders as WebAssembly JS API or Wasmer.</p>\n<p>I ran into this issue while making my own WebAssembly JS API based embedder.<br>\nI'd like to use Wiggle and wasi-common to implement wasip1 and wasi-threads as well as some additional apis, and share these implementations with implementation based on Wasmtime.<br>\nBut, since embedder's and guest's memories are different WebAssembly.Memory objects, existing GuestMemory doesn't cover my case.</p>\n<h4>Feature</h4>\n<p>It would be nice to see a third case in GuestMemory enum called Virtaul, Dynamic, or whatever.<br>\nThis new case allows embedder to implementation memory operations such as reading, writing and checking memory size. <br>\nEmbedder might implement memory operations using simple memcpy, invoking JavaScript code, IPC, or even network, who knows...</p>\n<h4>Benefit</h4>\n<p>I believe this improvement could allow Wiggle and wasi-common reach wider range of WebAssembly embedders.</p>\n<h4>Implementation</h4>\n<p>This improvement's implementation seem to be straightforward.<br>\nSo I believe we just need to:</p>\n<ul>\n<li>add trait for memory operations. Let's call it <code>VirtualMemory</code></li>\n<li>add new case to GuestMemory containing <code>dyn VirtualMemory</code></li>\n<li>cover missing match arms in GuestMemory's functions.</li>\n</ul>\n<p>I already implemented this in my fork and it works just fine.</p>\n<p>I am not sure, but adding third arm to frequently called matches may make imported function a bit slower even if this third case is not in use.</p>\n<h4>Alternatives</h4>\n<p>Since this improvement's benefits for Wasmtime itself are questionable, maybe it doesn't worth implementing at all.<br>\nAlternatively, it still can be implemented under feature flag.</p>\n</blockquote>",
        "id": 510953364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744123368
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10546#issuecomment-2786691634\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10546\">issue #10546</a>:</p>\n<blockquote>\n<p>Thanks for the report! Wiggle however is currently on \"life support\" in the sense that we're not seeking to develop it for broader audiences. You're welcome however to copy it out-of-tree and develop it in a fork, but we're no longer doing major development of it in-tree. It's only there for our current bindings and no more.</p>\n</blockquote>",
        "id": 510953365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744123368
    }
]