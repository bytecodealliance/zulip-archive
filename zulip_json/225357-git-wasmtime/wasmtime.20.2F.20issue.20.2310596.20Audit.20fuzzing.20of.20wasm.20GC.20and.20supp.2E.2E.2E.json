[
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the fuzzing label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10596\">Issue #10596</a>.</p>",
        "id": 512608212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744823182
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:gc label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10596\">Issue #10596</a>.</p>",
        "id": 512608213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744823182
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10596\">issue #10596</a>:</p>\n<blockquote>\n<p>I wanted to file a tracking issue for support of fuzzing wasm-gc with <code>wasm-smith</code>. Currently this is enabled on OSS-Fuzz but I believe that <code>wasm-smith</code> is still lacking some somewhat major features for fuzzing the GC proposal. The purpose of this issue is to track various items we know we need to fuzz but haven't implemented yet.</p>\n<ul>\n<li>[ ] One thing I've just noticed when reading over <code>wasm-smith</code> is the support for constant expressions. Currently only a pretty small set of opcodes are generated and this additionally doesn't include opcodes such as <code>any.convert_extern</code> or <code>extern.convert_any</code> (a recent addition to the spec to clarify these are intended happened recently)</li>\n<li>[ ] I don't believe that <code>wasm-smith</code> has much support for non-nullable types given that they don't have a great default, but that also means that non-nullable types I don't think are fuzzed too much with <code>wasm-smith</code>.</li>\n</ul>\n</blockquote>",
        "id": 512608215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1744823183
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10596#issuecomment-2815974760\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10596\">issue #10596</a>:</p>\n<blockquote>\n<blockquote>\n<p>Currently only a pretty small set of opcodes are generated and this additionally doesn't include opcodes such as <code>any.convert_extern</code> or <code>extern.convert_any</code> (a recent addition to the spec to clarify these are intended happened recently)</p>\n</blockquote>\n<p>This should be pretty easy to address.</p>\n<blockquote>\n<p>I don't believe that <code>wasm-smith</code> has much support for non-nullable types given that they don't have a great default, but that also means that non-nullable types I don't think are fuzzed too much with <code>wasm-smith</code>.</p>\n</blockquote>\n<p>This is correct, but is a bit trickier to fix. We could potentially keep track of, for each type, whether a type is part of a non-nullable cycle or not, and avoid generating globals and what not of that type. And also add a code path to recursively create instances of a particular type in a top-down style. This is a bit of a heavy hammer, but I can't think of a better alternative off the top of my head.</p>\n</blockquote>",
        "id": 513078204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745000581
    }
]