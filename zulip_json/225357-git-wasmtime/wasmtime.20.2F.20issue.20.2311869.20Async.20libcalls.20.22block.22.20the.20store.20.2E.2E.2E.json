[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11869\">issue #11869</a>:</p>\n<blockquote>\n<p>At this time the implementation of async libcalls in Wasmtime all use the <code>block_on</code> helper internally in the implementation. This has the property, though, that the store is \"locked\" while the libcall is waiting on the result meaning that in a component-model-async world it's not possible to make progress on anything else in the store while this is happening. This notably affects <code>Store::run_concurrent</code> as well where any select-ed async computation won't make progress because the wasm is locking up everything.</p>\n<p>To fix this it will require async libcalls to be refactored/reimplemented to not close over the store for the duration of their execution. Instead something like <code>Accessor</code> will be required where mutable access to a store can be temporarily granted but otherwise it's not held across <code>await</code> points. In implementing this it'll fix <code>run_concurrent</code> to correctly and actually run various computations in the provided closure concurrently. This will also enable other concurrent tasks within the store to make progress while a libcall is blocked.</p>\n</blockquote>",
        "id": 545132224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760564730
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:component-model-async label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11869\">Issue #11869</a>.</p>",
        "id": 545132227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1760564730
    }
]