[
    {
        "content": "<p>ettec opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10084\">issue #10084</a>:</p>\n<blockquote>\n<p>Hi wasmtime,</p>\n<p>In our project we are seeing the time taken to deserialize modules go from single digit milliseconds upto sometimes around a minute, I've created a simple test project to demonstrate the behaviour we are seeing in our codebase and wondered if you could let me know if the behaviour seen is expected or its a bug, here's the test project:</p>\n<p><a href=\"https://github.com/ettec/wasm-load-tests-wasmtime\">https://github.com/ettec/wasm-load-tests-wasmtime</a></p>\n<p>After cloning the above, run : <code>/generateWorkflowTestsFiles.sh 100</code> in the root directory.</p>\n<p>To see the behaviour, you can run the test <code>Test_LoadAllWorkflows_DeserializeFromFile_ParallelWithLock</code>,  you will notice that the deserialize time (printed in the console) starts to slow sign significantly towards the end of the test even though it has loaded less modules than is loaded by the <code>Test_LoadAllWorkflows_DeserializeFromFile_SingleThreaded</code>  test for example. </p>\n<p>I am at a bit of a loss to explain why loading modules on a single thread versus loading on multiple threads (with a lock around the DeserializeFromFile call so it is only accessed in a single threaded fashion, not necessary afaik, but this was added 'just in case') should result in such different deserialization times and why the deserialisation time degrades so noticeably.  Any insight much appreciated. <br>\n</p>\n</blockquote>",
        "id": 495386943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737585838
    },
    {
        "content": "<p>ettec <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10084#issuecomment-2608431722\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10084\">issue #10084</a>:</p>\n<blockquote>\n<p>....possibly related, just observed a single threaded case that exhibits the same behaviour:</p>\n<p>Update the following test like so and I'm seeing it slowdown:</p>\n<p>`func Test_LoadAllWorkflows_DeserializeFromFile_SingleThreaded(t *testing.T) {<br>\n    //deserializeSingleThreaded(t, 100)<br>\n    //deserializeSingleThreaded(t, 100)</p>\n<div class=\"codehilite\"><pre><span></span><code>deserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\n</code></pre></div>\n\n<p>}`</p>\n<p>Switched back to the following and it works without any issue despite the number of workflows loaded being the same in both cases (200):</p>\n<p>`func Test_LoadAllWorkflows_DeserializeFromFile_SingleThreaded(t *testing.T) {<br>\n    deserializeSingleThreaded(t, 100)<br>\n    deserializeSingleThreaded(t, 100)</p>\n<div class=\"codehilite\"><pre><span></span><code>/*\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)*/\n</code></pre></div>\n\n<p>}`</p>\n</blockquote>",
        "id": 495388063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737586410
    },
    {
        "content": "<p>ettec edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10084#issuecomment-2608431722\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10084\">issue #10084</a>:</p>\n<blockquote>\n<p>....possibly related, just observed a single threaded case that exhibits the same behaviour:</p>\n<p>Update the following test like so and I'm seeing it slowdown:</p>\n<p>`<br>\nfunc Test_LoadAllWorkflows_DeserializeFromFile_SingleThreaded(t *testing.T) {<br>\n    //deserializeSingleThreaded(t, 100)<br>\n    //deserializeSingleThreaded(t, 100)</p>\n<div class=\"codehilite\"><pre><span></span><code>deserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\ndeserializeSingleThreaded(t, 20)\n</code></pre></div>\n\n<p>}<br>\n`</p>\n<p>Switched back to the following and it works without any issue despite the number of workflows loaded being the same in both cases (200):</p>\n<p>`<br>\nfunc Test_LoadAllWorkflows_DeserializeFromFile_SingleThreaded(t *testing.T) {<br>\n    deserializeSingleThreaded(t, 100)<br>\n    deserializeSingleThreaded(t, 100)</p>\n<div class=\"codehilite\"><pre><span></span><code>/*\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)\n    deserializeSingleThreaded(t, 20)*/\n</code></pre></div>\n\n<p>}<br>\n`</p>\n</blockquote>",
        "id": 495388114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737586440
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10084#issuecomment-2608433044\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10084\">issue #10084</a>:</p>\n<blockquote>\n<p>Thanks for the report! Before digging too much into this could you test out <a href=\"https://github.com/ettec/wasm-load-tests-wasmtime/blob/84d1d19852248b657ccecd9e44673b99defa7786/workflows_test.go#L399-L405\">modifying Wasmtime's config here</a> to call <code>cfg.SetNativeUnwindInfo(false)</code>? That's a gut hunch I'd have where the native host can exhibit quadratic behavior when loading/unloading modules, but if you're not integrating with debuggers or anything like that then native unwind info is unnecessary.</p>\n</blockquote>",
        "id": 495388208,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737586475
    },
    {
        "content": "<p>ettec edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10084#issuecomment-2608431722\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10084\">issue #10084</a>:</p>\n<blockquote>\n<p>....possibly related, just observed a single threaded case that exhibits the same behaviour:</p>\n<p>Update the following test like so and I'm seeing it slowdown:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"n\">Test_LoadAllWorkflows_DeserializeFromFile_SingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">//deserializeSingleThreaded(t, 100)</span>\n<span class=\"w\">    </span><span class=\"c1\">//deserializeSingleThreaded(t, 100)</span>\n\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Switched back to the following and it works without any issue despite the number of workflows loaded being the same in both cases (200):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"n\">Test_LoadAllWorkflows_DeserializeFromFile_SingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"cm\">/*</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)*/</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</blockquote>",
        "id": 495388210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737586480
    },
    {
        "content": "<p>ettec edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10084#issuecomment-2608431722\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10084\">issue #10084</a>:</p>\n<blockquote>\n<p>....possibly related, just observed a single threaded case that exhibits the same behaviour:</p>\n<p>Update the following test like so and I'm seeing it slowdown:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"n\">Test_LoadAllWorkflows_DeserializeFromFile_SingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">//deserializeSingleThreaded(t, 100)</span>\n<span class=\"w\">    </span><span class=\"c1\">//deserializeSingleThreaded(t, 100)</span>\n\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Switched back to the following and it works without any issue despite the number of modules loaded being the same in both cases (200):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"n\">Test_LoadAllWorkflows_DeserializeFromFile_SingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">deserializeSingleThreaded</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"cm\">/*</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)</span>\n<span class=\"cm\">        deserializeSingleThreaded(t, 20)*/</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</blockquote>",
        "id": 495388644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737586690
    },
    {
        "content": "<p>ettec closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10084\">issue #10084</a>:</p>\n<blockquote>\n<p>Hi wasmtime,</p>\n<p>In our project we are seeing the time taken to deserialize modules go from single digit milliseconds upto sometimes around a minute, I've created a simple test project to demonstrate the behaviour we are seeing in our codebase and wondered if you could let me know if the behaviour seen is expected or its a bug, here's the test project:</p>\n<p><a href=\"https://github.com/ettec/wasm-load-tests-wasmtime\">https://github.com/ettec/wasm-load-tests-wasmtime</a></p>\n<p>After cloning the above, run : <code>/generateWorkflowTestsFiles.sh 100</code> in the root directory.</p>\n<p>To see the behaviour, you can run the test <code>Test_LoadAllWorkflows_DeserializeFromFile_ParallelWithLock</code>,  you will notice that the deserialize time (printed in the console) starts to slow sign significantly towards the end of the test even though it has loaded less modules than is loaded by the <code>Test_LoadAllWorkflows_DeserializeFromFile_SingleThreaded</code>  test for example. </p>\n<p>I am at a bit of a loss to explain why loading modules on a single thread versus loading on multiple threads (with a lock around the DeserializeFromFile call so it is only accessed in a single threaded fashion, not necessary afaik, but this was added 'just in case') should result in such different deserialization times and why the deserialisation time degrades so noticeably.  Any insight much appreciated. <br>\n</p>\n</blockquote>",
        "id": 495391906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737588461
    },
    {
        "content": "<p>ettec <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10084#issuecomment-2608476025\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10084\">issue #10084</a>:</p>\n<blockquote>\n<p>Hi Alex, thanks for the quick response.  That does indeed fix the problem,  big relief as getting this working is critical for us, thanks again for your quick help. </p>\n</blockquote>",
        "id": 495391910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737588462
    }
]