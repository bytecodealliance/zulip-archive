[
    {
        "content": "<p>wingo opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779\">issue #11779</a>:</p>\n<blockquote>\n<p>According to <a href=\"https://www.rfc-editor.org/rfc/rfc3986#section-3.3\">RFC 3986 ยง3.3</a>, the following predicate should define the valid characters in a path:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">is_valid_path_char</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"</span>\n<span class=\"w\">    </span><span class=\"n\">ch</span><span class=\"p\">.</span><span class=\"n\">is_ascii_alphanumeric</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"s\">\"-._~\"</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// unreserved</span>\n<span class=\"w\">        </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">ch</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"sc\">'%'</span><span class=\"w\">                                  </span><span class=\"c1\">// pct-encoded</span>\n<span class=\"w\">        </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"s\">\"!$&amp;'()*+,;=\"</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span><span class=\"w\">                 </span><span class=\"c1\">// sub-delims</span>\n<span class=\"w\">        </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"s\">\":@\"</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>However, the following paths are accepted via <code>request.set_path_and_query</code>:</p>\n<ul>\n<li><code>/\"</code></li>\n<li><code>/{</code></li>\n<li><code>/|</code></li>\n<li><code>/}</code></li>\n<li><code>/^</code></li>\n<li><code>/[</code></li>\n<li><code>/]</code></li>\n<li><code>/\\</code></li>\n<li><code>/#</code></li>\n</ul>\n<p>What should change here, the spec or Wasmtime?</p>\n<p>Relatedly, Wasmtime accepts non-absolute paths, which I am not sure are valid; <a href=\"https://github.com/WebAssembly/wasi-http/issues/178#issuecomment-3359974132\">https://github.com/WebAssembly/wasi-http/issues/178#issuecomment-3359974132</a>.</p>\n</blockquote>",
        "id": 542698205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759397923
    },
    {
        "content": "<p><a href=\"https://github.com/wingo\">wingo</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779\">Issue #11779</a>.</p>",
        "id": 542698206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759397923
    },
    {
        "content": "<p>wingo edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779\">issue #11779</a>:</p>\n<blockquote>\n<p>According to <a href=\"https://www.rfc-editor.org/rfc/rfc3986#section-3.3\">RFC 3986 ยง3.3</a>, the following predicate should define the valid characters in a path component (besides the <code>/</code> and <code>?</code> delimiters):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">is_valid_path_char</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"</span>\n<span class=\"w\">    </span><span class=\"n\">ch</span><span class=\"p\">.</span><span class=\"n\">is_ascii_alphanumeric</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"s\">\"-._~\"</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// unreserved</span>\n<span class=\"w\">        </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">ch</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"sc\">'%'</span><span class=\"w\">                                  </span><span class=\"c1\">// pct-encoded</span>\n<span class=\"w\">        </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"s\">\"!$&amp;'()*+,;=\"</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span><span class=\"w\">                 </span><span class=\"c1\">// sub-delims</span>\n<span class=\"w\">        </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"s\">\":@\"</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>However, the following paths are accepted via <code>request.set_path_and_query</code>:</p>\n<ul>\n<li><code>/\"</code></li>\n<li><code>/{</code></li>\n<li><code>/|</code></li>\n<li><code>/}</code></li>\n<li><code>/^</code></li>\n<li><code>/[</code></li>\n<li><code>/]</code></li>\n<li><code>/\\</code></li>\n<li><code>/#</code></li>\n</ul>\n<p>What should change here, the spec or Wasmtime?</p>\n<p>Relatedly, Wasmtime accepts non-absolute paths, which I am not sure are valid; <a href=\"https://github.com/WebAssembly/wasi-http/issues/178#issuecomment-3359974132\">https://github.com/WebAssembly/wasi-http/issues/178#issuecomment-3359974132</a>.</p>\n</blockquote>",
        "id": 542698633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759398082
    },
    {
        "content": "<p>wingo edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779\">issue #11779</a>:</p>\n<blockquote>\n<p>According to <a href=\"https://www.rfc-editor.org/rfc/rfc3986#section-3.3\">RFC 3986 ยง3.3</a>, the following predicate should define the valid characters in a path component (besides the <code>/</code> and <code>?</code> delimiters):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">is_valid_path_char</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"</span>\n<span class=\"w\">    </span><span class=\"n\">ch</span><span class=\"p\">.</span><span class=\"n\">is_ascii_alphanumeric</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"s\">\"-._~\"</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// unreserved</span>\n<span class=\"w\">        </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">ch</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"sc\">'%'</span><span class=\"w\">                                  </span><span class=\"c1\">// pct-encoded</span>\n<span class=\"w\">        </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"s\">\"!$&amp;'()*+,;=\"</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span><span class=\"w\">                 </span><span class=\"c1\">// sub-delims</span>\n<span class=\"w\">        </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"s\">\":@\"</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>However, the following paths are accepted via <code>request.set_path_and_query</code>:</p>\n<ul>\n<li><code>/\"</code></li>\n<li><code>/{</code></li>\n<li><code>/|</code></li>\n<li><code>/}</code></li>\n<li><code>/^</code></li>\n<li><code>/[</code></li>\n<li><code>/]</code></li>\n<li><code>/\\</code></li>\n<li><code>/#</code></li>\n</ul>\n<p>What should change here, the spec or Wasmtime?</p>\n<p>Relatedly, Wasmtime accepts non-absolute paths, which I am not sure are valid; <a href=\"https://github.com/WebAssembly/wasi-http/issues/178#issuecomment-3359974132\">https://github.com/WebAssembly/wasi-http/issues/178#issuecomment-3359974132</a>.</p>\n</blockquote>",
        "id": 542699176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759398254
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779#issuecomment-3360267571\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779\">issue #11779</a>:</p>\n<blockquote>\n<p>I think the http crate is following <a href=\"https://url.spec.whatwg.org/\">https://url.spec.whatwg.org/</a>, which is a formalization of how actual browsers behave in practice. Also for <code>\"</code>, <code>{</code> and <code>}</code> see:</p>\n<p><a href=\"https://github.com/hyperium/http/blob/439d1c50d71e3be3204b6c4a1bf2255ed78e1f93/src/uri/path.rs#L62-L73\">https://github.com/hyperium/http/blob/439d1c50d71e3be3204b6c4a1bf2255ed78e1f93/src/uri/path.rs#L62-L73</a></p>\n</blockquote>",
        "id": 542702739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759399356
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779#issuecomment-3360325070\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779\">issue #11779</a>:</p>\n<blockquote>\n<p>As @bjorn3 says, this follows what browsers do, because the RFC isn't web compatible.</p>\n<blockquote>\n<p>Relatedly, Wasmtime accepts non-absolute paths, which I am not sure are valid; <a href=\"https://github.com/WebAssembly/wasi-http/issues/178#issuecomment-3359974132\">WebAssembly/wasi-http#178 (comment)</a>.</p>\n</blockquote>\n<p>I think this is a bit underspecified, yeah. It's useful in practice for hosts that route traffic based on patterns that don't just include the host, but also other aspects of the URL: in such a case, it can make sense to interpret relative URLs as relative to the incoming request's URL. At the very least, changing this might be a breaking change at this point (though I'm not certain it is.)</p>\n</blockquote>",
        "id": 542705083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759400158
    },
    {
        "content": "<p>wingo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779#issuecomment-3360858733\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779\">issue #11779</a>:</p>\n<blockquote>\n<p>FWIW, @lukewagner is saying in <a href=\"https://github.com/WebAssembly/wasi-http/issues/178#issuecomment-3238221648\">https://github.com/WebAssembly/wasi-http/issues/178#issuecomment-3238221648</a> that at least some parts of RFC 9110 are web-compatible.  I don't have a horse in this race, I just want things to be specified somewhere.  Could be an RFC, could be a whatwg spec, could have some WASI-specific exceptions, but they should be written down.</p>\n</blockquote>",
        "id": 542723769,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759406557
    },
    {
        "content": "<p>wingo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779#issuecomment-3360926237\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779\">issue #11779</a>:</p>\n<blockquote>\n<p>that comment in the http crate is delightful :)</p>\n</blockquote>",
        "id": 542726654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759407400
    },
    {
        "content": "<p>wingo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779#issuecomment-3360945643\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779\">issue #11779</a>:</p>\n<blockquote>\n<p>Regarding the URL WhatWG spec -- I don't think it's the right reference for WASI.  Otherwise <code>wasi:http</code> would allow spaces in URIs and perform percent-encoding/decoding, but it does not, and that is fine.</p>\n</blockquote>",
        "id": 542727467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759407643
    },
    {
        "content": "<p>wingo edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779#issuecomment-3360945643\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779\">issue #11779</a>:</p>\n<blockquote>\n<p>Regarding the URL WhatWG spec -- I don't think it's the right reference for WASI.  Otherwise <code>wasi:http</code> would allow spaces in URIs and perform percent-encoding/decoding, but it does not, and that is fine.  I am happy to be corrected of course :)</p>\n</blockquote>",
        "id": 542727610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759407684
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasi:impl label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11779\">Issue #11779</a>.</p>",
        "id": 542756060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759415200
    }
]