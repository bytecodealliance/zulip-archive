[
    {
        "content": "<p>thatrajeevkr opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a> from <code>thatrajeevkr:fix/riscv-uadd-overflow</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Implements ISLE lowering for uadd_overflow.i64 in the RISC-V backend, enabling Cranelift to handle unsigned addition with overflow for 64-bit, sub-64-bit, and 128-bit types.</p>\n<p>i64: add + sltu to detect overflow</p>\n<p>Sub-64-bit types: zero-extend, then add + sltu</p>\n<p>i128: multiword add with carry propagation</p>\n<p>Fixes unsupported feature error when compiling Wasm modules with large address offsets</p>\n<p>Fix <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11540\">#11540</a></p>\n</blockquote>",
        "id": 537188015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756772972
    },
    {
        "content": "<p><strong>thatrajeevkr</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>.</p>",
        "id": 537188019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756772973
    },
    {
        "content": "<p><strong>thatrajeevkr</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>.</p>",
        "id": 537188020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756772973
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#pullrequestreview-3175625712\">PR review</a>.</p>",
        "id": 537243094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756804656
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#discussion_r2315455402\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think this would work. rv_sltu does a 64bit unsigned less than comparison, but if you add two 32bit integers into a 64bit register you will never overflow the full 64bit and thus <code>tmp_x + tmp_y</code> will never be less than <code>tmp_x</code>. What LLVM does instead is to use a 32bit add (<code>addw</code>), in which case <code>sltu</code> would work just fine. That way also only <code>x</code> would need to be zero extended I think. <a href=\"https://rust.godbolt.org/z/zz5avj33h\">https://rust.godbolt.org/z/zz5avj33h</a></p>\n</blockquote>",
        "id": 537243095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756804656
    },
    {
        "content": "<p>thatrajeevkr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>.</p>",
        "id": 537251671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756807544
    },
    {
        "content": "<p>thatrajeevkr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#pullrequestreview-3175838118\">PR review</a>.</p>",
        "id": 537251840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756807610
    },
    {
        "content": "<p>thatrajeevkr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#discussion_r2315601833\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for the input, I have put in a small fix for this.</p>\n</blockquote>",
        "id": 537251842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756807610
    },
    {
        "content": "<p><strong>thatrajeevkr</strong> requested <a href=\"https://github.com/bjorn3\">bjorn3</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>.</p>",
        "id": 537255078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756808962
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#pullrequestreview-3177320128\">PR review</a>:</p>\n<blockquote>\n<p>This looks good -- thanks!</p>\n<p>In addition to the little formatting nit below, could you update <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/filetests/filetests/runtests/uadd_overflow.clif\">our runtest</a> for this instruction so that it tests riscv64 too?</p>\n</blockquote>",
        "id": 537323677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756830400
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#discussion_r2316596176\">PR review comment</a>:</p>\n<blockquote>\n<p>Tiny nit, but let's have a blank line between the section header comment and the <code>;; For i64 ...</code> start of this rule.</p>\n</blockquote>",
        "id": 537323683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756830401
    },
    {
        "content": "<p>thatrajeevkr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>.</p>",
        "id": 537326657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756831351
    },
    {
        "content": "<p>thatrajeevkr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#pullrequestreview-3177373333\">PR review</a>.</p>",
        "id": 537326745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756831383
    },
    {
        "content": "<p>thatrajeevkr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#discussion_r2316637068\">PR review comment</a>:</p>\n<blockquote>\n<p>just made this change now!</p>\n</blockquote>",
        "id": 537326746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756831383
    },
    {
        "content": "<p>thatrajeevkr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>.</p>",
        "id": 537328278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756831986
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#pullrequestreview-3177425352\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 537329738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756832508
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>.</p>",
        "id": 537329755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756832515
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#issuecomment-3246180308\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>:</p>\n<blockquote>\n<p>@thatrajeevkr it looks like the runtest <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/17410416652/job/49425967217?pr=11583\">failed</a> because it also contains narrower-than-32-bit cases; in theory you could implement those as well, but probably the easier fix is to split the runtest file into two (keep the preamble and split the test functions and expectations), with 64/32-bit cases separate from 16/8-bit cases (perhaps in a file called <code>uadd_overflow_narrow.clif</code>)?</p>\n</blockquote>",
        "id": 537332885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756833600
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#issuecomment-3246180308\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>:</p>\n<blockquote>\n<p>@thatrajeevkr it looks like the runtest <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/17410416652/job/49425967217?pr=11583\">failed</a> because it also contains narrower-than-32-bit cases; in theory you could implement those as well, but probably the easier fix is to split the runtest file into two (keep the preamble and split the test functions and expectations), with 128/64/32-bit cases separate from 16/8-bit cases (perhaps in a file called <code>uadd_overflow_narrow.clif</code>) and then enable riscv64 only for 128/64/32 bits?</p>\n</blockquote>",
        "id": 537332957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756833629
    },
    {
        "content": "<p>cfallin has disabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>.</p>",
        "id": 537359846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756845163
    },
    {
        "content": "<p>thatrajeevkr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>.</p>",
        "id": 537359848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756845163
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#issuecomment-3246785261\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>:</p>\n<blockquote>\n<p>@thatrajeevkr It looks like an <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/17415282801/job/49442153710?pr=11583#step:19:576\">i128 test</a> is failing now, showing overflow when there is none -- mind taking a look?</p>\n</blockquote>",
        "id": 537364114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756847097
    },
    {
        "content": "<p>thatrajeevkr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>.</p>",
        "id": 537365797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756847929
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#pullrequestreview-3178174524\">PR review</a>.</p>",
        "id": 537366477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756848268
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#discussion_r2317205463\">PR review comment</a>:</p>\n<blockquote>\n<p>Thinking about this tweak -- I suspect that the second arm of the OR was supposed to cover the case where the high-half sum wraps around back to the original value when carry is set?</p>\n<p>That is, normally we can see if <code>x + y</code> overflows by checking if the sum is less than <code>x</code> (has wrapped around). The closest it can get is if <code>y</code> is all-ones (<code>-1</code>), then we get to <code>x - 1</code>; so strict less than (<code>sltu</code>, i.e., set-less-than unsigned) is appropriate.</p>\n<p>But for <code>x + y + carry</code>, it's possible that the sum wraps around all the way back to <code>x</code>, so <code>carry &amp;&amp; (x + y + carry == x)</code> is the appropriate second case, I think? So overall <code>sum_hi_with_carry &lt; x_hi || (carry &amp;&amp; sum_high_with_carry == x_hi)</code>?</p>\n</blockquote>",
        "id": 537366481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756848268
    },
    {
        "content": "<p>thatrajeevkr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#pullrequestreview-3178184147\">PR review</a>.</p>",
        "id": 537367050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756848549
    },
    {
        "content": "<p>thatrajeevkr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#discussion_r2317212745\">PR review comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">overflow</span><span class=\"w\"> </span><span class=\"n\">XReg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_sltu</span><span class=\"w\"> </span><span class=\"n\">sum_hi_with_carry</span><span class=\"w\"> </span><span class=\"n\">x_hi</span><span class=\"p\">)</span>\n<span class=\"w\">                     </span><span class=\"p\">(</span><span class=\"n\">rv_and</span><span class=\"w\"> </span><span class=\"n\">carry</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_eq</span><span class=\"w\"> </span><span class=\"n\">sum_hi_with_carry</span><span class=\"w\"> </span><span class=\"n\">x_hi</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>how about this method? <br>\n</p>\n</blockquote>",
        "id": 537367051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756848549
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#pullrequestreview-3178255265\">PR review</a>.</p>",
        "id": 537370434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756850471
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#discussion_r2317263657\">PR review comment</a>:</p>\n<blockquote>\n<p>That looks right; and I think the <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/17416248333/job/49445312095?pr=11583\">remaining failure</a> should cover the case that this handles!</p>\n</blockquote>",
        "id": 537370436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756850471
    },
    {
        "content": "<p>thatrajeevkr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>.</p>",
        "id": 537371917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756851305
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#pullrequestreview-3178337343\">PR review</a>.</p>",
        "id": 537373134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756852055
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#discussion_r2317314039\">PR review comment</a>:</p>\n<blockquote>\n<p>@thatrajeevkr actually it appears that <code>rv_eq</code> isn't a defined constructor -- see the latest test failures. You should be able to <code>cargo check</code> locally (as that error message states) to iterate until it builds at least, before going through a CI roundtrip. (We also have docs on cross-compiling and testing with qemu if you want to iterate on the runtest locally, but that's much more involved...)</p>\n</blockquote>",
        "id": 537373135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756852055
    },
    {
        "content": "<p>thatrajeevkr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#pullrequestreview-3180624750\">PR review</a>.</p>",
        "id": 537473637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756905268
    },
    {
        "content": "<p>thatrajeevkr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583#discussion_r2318945479\">PR review comment</a>:</p>\n<blockquote>\n<p>I found a fix for this which builds fine in my local, I will commit those changes.</p>\n</blockquote>",
        "id": 537473639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756905268
    },
    {
        "content": "<p>thatrajeevkr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>.</p>",
        "id": 537514266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756916988
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11583\">PR #11583</a>.</p>",
        "id": 537523676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756920303
    }
]