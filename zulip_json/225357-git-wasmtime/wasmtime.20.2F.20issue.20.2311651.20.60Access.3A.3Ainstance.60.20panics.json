[
    {
        "content": "<p>rvolosatovs opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11651\">issue #11651</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Use <code>store</code> option to bindgen without <code>async</code> or simply call <code>instance</code> on <code>Access</code> returned by <code>Access::new</code></p>\n<h3>Steps to Reproduce</h3>\n<p>apply the following diff to #11649 </p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/wasi-http/src/p3/bindings.rs b/crates/wasi-http/src/p3/bindings.rs</span>\n<span class=\"gh\">index b7fec724c1..9f2bd8e9cf 100644</span>\n<span class=\"gd\">--- a/crates/wasi-http/src/p3/bindings.rs</span>\n<span class=\"gi\">+++ b/crates/wasi-http/src/p3/bindings.rs</span>\n<span class=\"gu\">@@ -11,8 +11,8 @@ mod generated {</span>\n<span class=\"w\"> </span>            \"wasi:http/types/[drop]response\": store | trappable | tracing,\n<span class=\"w\"> </span>            \"wasi:http/types/[method]request.consume-body\": async | store | trappable | tracing,\n<span class=\"w\"> </span>            \"wasi:http/types/[method]response.consume-body\": async | store | trappable | tracing,\n<span class=\"gd\">-            \"wasi:http/types/[static]request.new\": async | store | trappable | tracing,</span>\n<span class=\"gd\">-            \"wasi:http/types/[static]response.new\": async | store | trappable | tracing,</span>\n<span class=\"gi\">+            \"wasi:http/types/[static]request.new\": store | trappable | tracing,</span>\n<span class=\"gi\">+            \"wasi:http/types/[static]response.new\": store | trappable | tracing,</span>\n<span class=\"w\"> </span>            default: trappable | tracing,\n<span class=\"w\"> </span>        },\n<span class=\"w\"> </span>        exports: { default: async | store },\n<span class=\"gh\">diff --git a/crates/wasi-http/src/p3/host/types.rs b/crates/wasi-http/src/p3/host/types.rs</span>\n<span class=\"gh\">index 165e4e4e12..3d662da585 100644</span>\n<span class=\"gd\">--- a/crates/wasi-http/src/p3/host/types.rs</span>\n<span class=\"gi\">+++ b/crates/wasi-http/src/p3/host/types.rs</span>\n<span class=\"gu\">@@ -303,45 +303,43 @@ impl HostFields for WasiHttpCtxView&lt;'_&gt; {</span>\n<span class=\"w\"> </span>}\n\n<span class=\"w\"> </span>impl HostRequestWithStore for WasiHttp {\n<span class=\"gd\">-    async fn new&lt;T&gt;(</span>\n<span class=\"gd\">-        store: &amp;Accessor&lt;T, Self&gt;,</span>\n<span class=\"gi\">+    fn new&lt;T&gt;(</span>\n<span class=\"gi\">+        mut store: Access&lt;'_, T, Self&gt;,</span>\n<span class=\"w\"> </span>        headers: Resource&lt;Headers&gt;,\n<span class=\"w\"> </span>        contents: Option&lt;StreamReader&lt;u8&gt;&gt;,\n<span class=\"w\"> </span>        trailers: FutureReader&lt;Result&lt;Option&lt;Resource&lt;Trailers&gt;&gt;, ErrorCode&gt;&gt;,\n<span class=\"w\"> </span>        options: Option&lt;Resource&lt;RequestOptions&gt;&gt;,\n<span class=\"w\"> </span>    ) -&gt; wasmtime::Result&lt;(Resource&lt;Request&gt;, FutureReader&lt;Result&lt;(), ErrorCode&gt;&gt;)&gt; {\n<span class=\"gi\">+        let WasiHttpCtxView { table, .. } = store.get();</span>\n<span class=\"gi\">+        let headers = delete_fields(table, headers)?;</span>\n<span class=\"gi\">+        let options = options</span>\n<span class=\"gi\">+            .map(|options| delete_request_options(table, options))</span>\n<span class=\"gi\">+            .transpose()?;</span>\n<span class=\"gi\">+        let (result_tx, result_rx) = oneshot::channel();</span>\n<span class=\"gi\">+        let body = Body::Guest {</span>\n<span class=\"gi\">+            contents_rx: contents,</span>\n<span class=\"gi\">+            trailers_rx: trailers,</span>\n<span class=\"gi\">+            result_tx,</span>\n<span class=\"gi\">+        };</span>\n<span class=\"gi\">+        let req = Request {</span>\n<span class=\"gi\">+            method: http::Method::GET,</span>\n<span class=\"gi\">+            scheme: None,</span>\n<span class=\"gi\">+            authority: None,</span>\n<span class=\"gi\">+            path_with_query: None,</span>\n<span class=\"gi\">+            headers: headers.into(),</span>\n<span class=\"gi\">+            options: options.map(Into::into),</span>\n<span class=\"gi\">+            body,</span>\n<span class=\"gi\">+        };</span>\n<span class=\"gi\">+        let req = table.push(req).context(\"failed to push request to table\")?;</span>\n<span class=\"w\"> </span>        let instance = store.instance();\n<span class=\"gd\">-        store.with(|mut store| {</span>\n<span class=\"gd\">-            let (result_tx, result_rx) = oneshot::channel();</span>\n<span class=\"gd\">-            let WasiHttpCtxView { table, .. } = store.get();</span>\n<span class=\"gd\">-            let headers = delete_fields(table, headers)?;</span>\n<span class=\"gd\">-            let options = options</span>\n<span class=\"gd\">-                .map(|options| delete_request_options(table, options))</span>\n<span class=\"gd\">-                .transpose()?;</span>\n<span class=\"gd\">-            let body = Body::Guest {</span>\n<span class=\"gd\">-                contents_rx: contents,</span>\n<span class=\"gd\">-                trailers_rx: trailers,</span>\n<span class=\"gd\">-                result_tx,</span>\n<span class=\"gd\">-            };</span>\n<span class=\"gd\">-            let req = Request {</span>\n<span class=\"gd\">-                method: http::Method::GET,</span>\n<span class=\"gd\">-                scheme: None,</span>\n<span class=\"gd\">-                authority: None,</span>\n<span class=\"gd\">-                path_with_query: None,</span>\n<span class=\"gd\">-                headers: headers.into(),</span>\n<span class=\"gd\">-                options: options.map(Into::into),</span>\n<span class=\"gd\">-                body,</span>\n<span class=\"gd\">-            };</span>\n<span class=\"gd\">-            let req = table.push(req).context(\"failed to push request to table\")?;</span>\n<span class=\"gd\">-            Ok((</span>\n<span class=\"gd\">-                req,</span>\n<span class=\"gd\">-                FutureReader::new(</span>\n<span class=\"gd\">-                    instance,</span>\n<span class=\"gd\">-                    &amp;mut store,</span>\n<span class=\"gd\">-                    GuestBodyResultProducer::Receiver(result_rx),</span>\n<span class=\"gd\">-                ),</span>\n<span class=\"gd\">-            ))</span>\n<span class=\"gd\">-        })</span>\n<span class=\"gi\">+        Ok((</span>\n<span class=\"gi\">+            req,</span>\n<span class=\"gi\">+            FutureReader::new(</span>\n<span class=\"gi\">+                instance,</span>\n<span class=\"gi\">+                &amp;mut store,</span>\n<span class=\"gi\">+                GuestBodyResultProducer::Receiver(result_rx),</span>\n<span class=\"gi\">+            ),</span>\n<span class=\"gi\">+        ))</span>\n<span class=\"w\"> </span>    }\n\n<span class=\"w\"> </span>    async fn consume_body&lt;T&gt;(\n<span class=\"gu\">@@ -586,39 +584,37 @@ impl HostRequestOptions for WasiHttpCtxView&lt;'_&gt; {</span>\n<span class=\"w\"> </span>}\n\n<span class=\"w\"> </span>impl HostResponseWithStore for WasiHttp {\n<span class=\"gd\">-    async fn new&lt;T&gt;(</span>\n<span class=\"gd\">-        store: &amp;Accessor&lt;T, Self&gt;,</span>\n<span class=\"gi\">+    fn new&lt;T&gt;(</span>\n<span class=\"gi\">+        mut store: Access&lt;'_, T, Self&gt;,</span>\n<span class=\"w\"> </span>        headers: Resource&lt;Headers&gt;,\n<span class=\"w\"> </span>        contents: Option&lt;StreamReader&lt;u8&gt;&gt;,\n<span class=\"w\"> </span>        trailers: FutureReader&lt;Result&lt;Option&lt;Resource&lt;Trailers&gt;&gt;, ErrorCode&gt;&gt;,\n<span class=\"w\"> </span>    ) -&gt; wasmtime::Result&lt;(Resource&lt;Response&gt;, FutureReader&lt;Result&lt;(), ErrorCode&gt;&gt;)&gt; {\n<span class=\"gi\">+        let WasiHttpCtxView { table, .. } = store.get();</span>\n<span class=\"gi\">+        let headers = delete_fields(table, headers)?;</span>\n<span class=\"gi\">+        let (result_tx, result_rx) = oneshot::channel();</span>\n<span class=\"gi\">+        let body = Body::Guest {</span>\n<span class=\"gi\">+            contents_rx: contents,</span>\n<span class=\"gi\">+            trailers_rx: trailers,</span>\n<span class=\"gi\">+            result_tx,</span>\n<span class=\"gi\">+        };</span>\n<span class=\"gi\">+        let res = Response {</span>\n<span class=\"gi\">+            status: http::StatusCode::OK,</span>\n<span class=\"gi\">+            headers: headers.into(),</span>\n<span class=\"gi\">+            body,</span>\n<span class=\"gi\">+        };</span>\n<span class=\"gi\">+        let res = table</span>\n<span class=\"gi\">+            .push(res)</span>\n<span class=\"gi\">+            .context(\"failed to push response to table\")?;</span>\n<span class=\"w\"> </span>        let instance = store.instance();\n<span class=\"gd\">-        store.with(|mut store| {</span>\n<span class=\"gd\">-            let (result_tx, result_rx) = oneshot::channel();</span>\n<span class=\"gd\">-            let WasiHttpCtxView { table, .. } = store.get();</span>\n<span class=\"gd\">-            let headers = delete_fields(table, headers)?;</span>\n<span class=\"gd\">-            let body = Body::Guest {</span>\n<span class=\"gd\">-                contents_rx: contents,</span>\n<span class=\"gd\">-                trailers_rx: trailers,</span>\n<span class=\"gd\">-                result_tx,</span>\n<span class=\"gd\">-            };</span>\n<span class=\"gd\">-            let res = Response {</span>\n<span class=\"gd\">-                status: http::StatusCode::OK,</span>\n<span class=\"gd\">-                headers: headers.into(),</span>\n<span class=\"gd\">-                body,</span>\n<span class=\"gd\">-            };</span>\n<span class=\"gd\">-            let res = table</span>\n<span class=\"gd\">-                .push(res)</span>\n<span class=\"gd\">-                .context(\"failed to push response to table\")?;</span>\n<span class=\"gd\">-            Ok((</span>\n<span class=\"gd\">-                res,</span>\n<span class=\"gd\">-                FutureReader::new(</span>\n<span class=\"gd\">-                    instance,</span>\n<span class=\"gd\">-                    &amp;mut store,</span>\n<span class=\"gd\">-                    GuestBodyResultProducer::Receiver(result_rx),</span>\n<span class=\"gd\">-                ),</span>\n<span class=\"gd\">-            ))</span>\n<span class=\"gd\">-        })</span>\n<span class=\"gi\">+        Ok((</span>\n<span class=\"gi\">+            res,</span>\n<span class=\"gi\">+            FutureReader::new(</span>\n<span class=\"gi\">+                instance,</span>\n<span class=\"gi\">+                &amp;mut store,</span>\n<span class=\"gi\">+                GuestBodyResultProducer::Receiver(result_rx),</span>\n<span class=\"gi\">+            ),</span>\n<span class=\"gi\">+        ))</span>\n<span class=\"w\"> </span>    }\n\n<span class=\"w\"> </span>    async fn consume_body&lt;T&gt;(\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>Success</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">p3</span><span class=\"p\">::</span><span class=\"n\">p3_http_outbound_request_unsupported_scheme</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">rvolosatovs</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">bytecodealliance</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">component</span><span class=\"o\">/</span><span class=\"n\">concurrent</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">255</span><span class=\"p\">:</span><span class=\"mi\">23</span><span class=\"p\">:</span>\n<span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Option</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">None</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>\n</code></pre></div>\n<h3>Extra Info</h3>\n<p>This was introduced in #11628</p>\n<p>cc @alexcrichton </p>\n</blockquote>",
        "id": 538450371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757427758
    },
    {
        "content": "<p><a href=\"https://github.com/rvolosatovs\">rvolosatovs</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11651\">Issue #11651</a>.</p>",
        "id": 538450372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757427758
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11651#issuecomment-3271171250\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11651\">issue #11651</a>:</p>\n<blockquote>\n<p>This is currently an intentional design decision but it's based under the assumption that <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11226\">https://github.com/bytecodealliance/wasmtime/issues/11226</a> is going to be resolved which means that all the <code>Instance</code> parameters are going to go away. We planned on talking to Luke this Thursday about some various ramifications of this decision as it touches on component model semantics a bit, but after that the hope was to implement that and remove the <code>Instance</code> from <code>Accessor</code> too</p>\n</blockquote>",
        "id": 538461923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757430720
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the wasm-proposal:component-model-async label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11651\">Issue #11651</a>.</p>",
        "id": 538904635,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757608813
    },
    {
        "content": "<p>alexcrichton assigned dicej to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11651\">issue #11651</a>.</p>",
        "id": 539597576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757952069
    },
    {
        "content": "<p>dicej closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11651\">issue #11651</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Use <code>store</code> option to bindgen without <code>async</code> or simply call <code>instance</code> on <code>Access</code> returned by <code>Access::new</code></p>\n<h3>Steps to Reproduce</h3>\n<p>apply the following diff to #11649 </p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/wasi-http/src/p3/bindings.rs b/crates/wasi-http/src/p3/bindings.rs</span>\n<span class=\"gh\">index b7fec724c1..9f2bd8e9cf 100644</span>\n<span class=\"gd\">--- a/crates/wasi-http/src/p3/bindings.rs</span>\n<span class=\"gi\">+++ b/crates/wasi-http/src/p3/bindings.rs</span>\n<span class=\"gu\">@@ -11,8 +11,8 @@ mod generated {</span>\n<span class=\"w\"> </span>            \"wasi:http/types/[drop]response\": store | trappable | tracing,\n<span class=\"w\"> </span>            \"wasi:http/types/[method]request.consume-body\": async | store | trappable | tracing,\n<span class=\"w\"> </span>            \"wasi:http/types/[method]response.consume-body\": async | store | trappable | tracing,\n<span class=\"gd\">-            \"wasi:http/types/[static]request.new\": async | store | trappable | tracing,</span>\n<span class=\"gd\">-            \"wasi:http/types/[static]response.new\": async | store | trappable | tracing,</span>\n<span class=\"gi\">+            \"wasi:http/types/[static]request.new\": store | trappable | tracing,</span>\n<span class=\"gi\">+            \"wasi:http/types/[static]response.new\": store | trappable | tracing,</span>\n<span class=\"w\"> </span>            default: trappable | tracing,\n<span class=\"w\"> </span>        },\n<span class=\"w\"> </span>        exports: { default: async | store },\n<span class=\"gh\">diff --git a/crates/wasi-http/src/p3/host/types.rs b/crates/wasi-http/src/p3/host/types.rs</span>\n<span class=\"gh\">index 165e4e4e12..3d662da585 100644</span>\n<span class=\"gd\">--- a/crates/wasi-http/src/p3/host/types.rs</span>\n<span class=\"gi\">+++ b/crates/wasi-http/src/p3/host/types.rs</span>\n<span class=\"gu\">@@ -303,45 +303,43 @@ impl HostFields for WasiHttpCtxView&lt;'_&gt; {</span>\n<span class=\"w\"> </span>}\n\n<span class=\"w\"> </span>impl HostRequestWithStore for WasiHttp {\n<span class=\"gd\">-    async fn new&lt;T&gt;(</span>\n<span class=\"gd\">-        store: &amp;Accessor&lt;T, Self&gt;,</span>\n<span class=\"gi\">+    fn new&lt;T&gt;(</span>\n<span class=\"gi\">+        mut store: Access&lt;'_, T, Self&gt;,</span>\n<span class=\"w\"> </span>        headers: Resource&lt;Headers&gt;,\n<span class=\"w\"> </span>        contents: Option&lt;StreamReader&lt;u8&gt;&gt;,\n<span class=\"w\"> </span>        trailers: FutureReader&lt;Result&lt;Option&lt;Resource&lt;Trailers&gt;&gt;, ErrorCode&gt;&gt;,\n<span class=\"w\"> </span>        options: Option&lt;Resource&lt;RequestOptions&gt;&gt;,\n<span class=\"w\"> </span>    ) -&gt; wasmtime::Result&lt;(Resource&lt;Request&gt;, FutureReader&lt;Result&lt;(), ErrorCode&gt;&gt;)&gt; {\n<span class=\"gi\">+        let WasiHttpCtxView { table, .. } = store.get();</span>\n<span class=\"gi\">+        let headers = delete_fields(table, headers)?;</span>\n<span class=\"gi\">+        let options = options</span>\n<span class=\"gi\">+            .map(|options| delete_request_options(table, options))</span>\n<span class=\"gi\">+            .transpose()?;</span>\n<span class=\"gi\">+        let (result_tx, result_rx) = oneshot::channel();</span>\n<span class=\"gi\">+        let body = Body::Guest {</span>\n<span class=\"gi\">+            contents_rx: contents,</span>\n<span class=\"gi\">+            trailers_rx: trailers,</span>\n<span class=\"gi\">+            result_tx,</span>\n<span class=\"gi\">+        };</span>\n<span class=\"gi\">+        let req = Request {</span>\n<span class=\"gi\">+            method: http::Method::GET,</span>\n<span class=\"gi\">+            scheme: None,</span>\n<span class=\"gi\">+            authority: None,</span>\n<span class=\"gi\">+            path_with_query: None,</span>\n<span class=\"gi\">+            headers: headers.into(),</span>\n<span class=\"gi\">+            options: options.map(Into::into),</span>\n<span class=\"gi\">+            body,</span>\n<span class=\"gi\">+        };</span>\n<span class=\"gi\">+        let req = table.push(req).context(\"failed to push request to table\")?;</span>\n<span class=\"w\"> </span>        let instance = store.instance();\n<span class=\"gd\">-        store.with(|mut store| {</span>\n<span class=\"gd\">-            let (result_tx, result_rx) = oneshot::channel();</span>\n<span class=\"gd\">-            let WasiHttpCtxView { table, .. } = store.get();</span>\n<span class=\"gd\">-            let headers = delete_fields(table, headers)?;</span>\n<span class=\"gd\">-            let options = options</span>\n<span class=\"gd\">-                .map(|options| delete_request_options(table, options))</span>\n<span class=\"gd\">-                .transpose()?;</span>\n<span class=\"gd\">-            let body = Body::Guest {</span>\n<span class=\"gd\">-                contents_rx: contents,</span>\n<span class=\"gd\">-                trailers_rx: trailers,</span>\n<span class=\"gd\">-                result_tx,</span>\n<span class=\"gd\">-            };</span>\n<span class=\"gd\">-            let req = Request {</span>\n<span class=\"gd\">-                method: http::Method::GET,</span>\n<span class=\"gd\">-                scheme: None,</span>\n<span class=\"gd\">-                authority: None,</span>\n<span class=\"gd\">-                path_with_query: None,</span>\n<span class=\"gd\">-                headers: headers.into(),</span>\n<span class=\"gd\">-                options: options.map(Into::into),</span>\n<span class=\"gd\">-                body,</span>\n<span class=\"gd\">-            };</span>\n<span class=\"gd\">-            let req = table.push(req).context(\"failed to push request to table\")?;</span>\n<span class=\"gd\">-            Ok((</span>\n<span class=\"gd\">-                req,</span>\n<span class=\"gd\">-                FutureReader::new(</span>\n<span class=\"gd\">-                    instance,</span>\n<span class=\"gd\">-                    &amp;mut store,</span>\n<span class=\"gd\">-                    GuestBodyResultProducer::Receiver(result_rx),</span>\n<span class=\"gd\">-                ),</span>\n<span class=\"gd\">-            ))</span>\n<span class=\"gd\">-        })</span>\n<span class=\"gi\">+        Ok((</span>\n<span class=\"gi\">+            req,</span>\n<span class=\"gi\">+            FutureReader::new(</span>\n<span class=\"gi\">+                instance,</span>\n<span class=\"gi\">+                &amp;mut store,</span>\n<span class=\"gi\">+                GuestBodyResultProducer::Receiver(result_rx),</span>\n<span class=\"gi\">+            ),</span>\n<span class=\"gi\">+        ))</span>\n<span class=\"w\"> </span>    }\n\n<span class=\"w\"> </span>    async fn consume_body&lt;T&gt;(\n<span class=\"gu\">@@ -586,39 +584,37 @@ impl HostRequestOptions for WasiHttpCtxView&lt;'_&gt; {</span>\n<span class=\"w\"> </span>}\n\n<span class=\"w\"> </span>impl HostResponseWithStore for WasiHttp {\n<span class=\"gd\">-    async fn new&lt;T&gt;(</span>\n<span class=\"gd\">-        store: &amp;Accessor&lt;T, Self&gt;,</span>\n<span class=\"gi\">+    fn new&lt;T&gt;(</span>\n<span class=\"gi\">+        mut store: Access&lt;'_, T, Self&gt;,</span>\n<span class=\"w\"> </span>        headers: Resource&lt;Headers&gt;,\n<span class=\"w\"> </span>        contents: Option&lt;StreamReader&lt;u8&gt;&gt;,\n<span class=\"w\"> </span>        trailers: FutureReader&lt;Result&lt;Option&lt;Resource&lt;Trailers&gt;&gt;, ErrorCode&gt;&gt;,\n<span class=\"w\"> </span>    ) -&gt; wasmtime::Result&lt;(Resource&lt;Response&gt;, FutureReader&lt;Result&lt;(), ErrorCode&gt;&gt;)&gt; {\n<span class=\"gi\">+        let WasiHttpCtxView { table, .. } = store.get();</span>\n<span class=\"gi\">+        let headers = delete_fields(table, headers)?;</span>\n<span class=\"gi\">+        let (result_tx, result_rx) = oneshot::channel();</span>\n<span class=\"gi\">+        let body = Body::Guest {</span>\n<span class=\"gi\">+            contents_rx: contents,</span>\n<span class=\"gi\">+            trailers_rx: trailers,</span>\n<span class=\"gi\">+            result_tx,</span>\n<span class=\"gi\">+        };</span>\n<span class=\"gi\">+        let res = Response {</span>\n<span class=\"gi\">+            status: http::StatusCode::OK,</span>\n<span class=\"gi\">+            headers: headers.into(),</span>\n<span class=\"gi\">+            body,</span>\n<span class=\"gi\">+        };</span>\n<span class=\"gi\">+        let res = table</span>\n<span class=\"gi\">+            .push(res)</span>\n<span class=\"gi\">+            .context(\"failed to push response to table\")?;</span>\n<span class=\"w\"> </span>        let instance = store.instance();\n<span class=\"gd\">-        store.with(|mut store| {</span>\n<span class=\"gd\">-            let (result_tx, result_rx) = oneshot::channel();</span>\n<span class=\"gd\">-            let WasiHttpCtxView { table, .. } = store.get();</span>\n<span class=\"gd\">-            let headers = delete_fields(table, headers)?;</span>\n<span class=\"gd\">-            let body = Body::Guest {</span>\n<span class=\"gd\">-                contents_rx: contents,</span>\n<span class=\"gd\">-                trailers_rx: trailers,</span>\n<span class=\"gd\">-                result_tx,</span>\n<span class=\"gd\">-            };</span>\n<span class=\"gd\">-            let res = Response {</span>\n<span class=\"gd\">-                status: http::StatusCode::OK,</span>\n<span class=\"gd\">-                headers: headers.into(),</span>\n<span class=\"gd\">-                body,</span>\n<span class=\"gd\">-            };</span>\n<span class=\"gd\">-            let res = table</span>\n<span class=\"gd\">-                .push(res)</span>\n<span class=\"gd\">-                .context(\"failed to push response to table\")?;</span>\n<span class=\"gd\">-            Ok((</span>\n<span class=\"gd\">-                res,</span>\n<span class=\"gd\">-                FutureReader::new(</span>\n<span class=\"gd\">-                    instance,</span>\n<span class=\"gd\">-                    &amp;mut store,</span>\n<span class=\"gd\">-                    GuestBodyResultProducer::Receiver(result_rx),</span>\n<span class=\"gd\">-                ),</span>\n<span class=\"gd\">-            ))</span>\n<span class=\"gd\">-        })</span>\n<span class=\"gi\">+        Ok((</span>\n<span class=\"gi\">+            res,</span>\n<span class=\"gi\">+            FutureReader::new(</span>\n<span class=\"gi\">+                instance,</span>\n<span class=\"gi\">+                &amp;mut store,</span>\n<span class=\"gi\">+                GuestBodyResultProducer::Receiver(result_rx),</span>\n<span class=\"gi\">+            ),</span>\n<span class=\"gi\">+        ))</span>\n<span class=\"w\"> </span>    }\n\n<span class=\"w\"> </span>    async fn consume_body&lt;T&gt;(\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>Success</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">p3</span><span class=\"p\">::</span><span class=\"n\">p3_http_outbound_request_unsupported_scheme</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">rvolosatovs</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">bytecodealliance</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">component</span><span class=\"o\">/</span><span class=\"n\">concurrent</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">255</span><span class=\"p\">:</span><span class=\"mi\">23</span><span class=\"p\">:</span>\n<span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Option</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">None</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>\n</code></pre></div>\n<h3>Extra Info</h3>\n<p>This was introduced in #11628</p>\n<p>cc @alexcrichton </p>\n</blockquote>",
        "id": 543400906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1759781771
    }
]