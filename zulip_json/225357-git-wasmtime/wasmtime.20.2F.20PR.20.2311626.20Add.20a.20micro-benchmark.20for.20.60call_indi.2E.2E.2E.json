[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626\">PR #11626</a> from <code>fitzgen:call-indirect-micro-benches</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Compares lazy versus strict table initialization, as well as calling the same callee repeatedly versus a different callee each time.</p>\n<p>Results on my machine, for what its worth:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">call</span><span class=\"o\">-</span><span class=\"n\">indirect</span><span class=\"o\">/</span><span class=\"n\">same</span><span class=\"o\">-</span><span class=\"n\">callee</span><span class=\"o\">/</span><span class=\"n\">table</span><span class=\"o\">-</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">lazy</span><span class=\"o\">/</span><span class=\"mi\">65536</span><span class=\"o\">-</span><span class=\"n\">calls</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">143.37</span><span class=\"w\"> </span><span class=\"err\">µ</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">144.78</span><span class=\"w\"> </span><span class=\"err\">µ</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">146.31</span><span class=\"w\"> </span><span class=\"err\">µ</span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">thrpt</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mf\">447.93</span><span class=\"w\"> </span><span class=\"n\">Melem</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">452.67</span><span class=\"w\"> </span><span class=\"n\">Melem</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">457.11</span><span class=\"w\"> </span><span class=\"n\">Melem</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">outliers</span><span class=\"w\"> </span><span class=\"n\">among</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"n\">measurements</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">3.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n<span class=\"n\">call</span><span class=\"o\">-</span><span class=\"n\">indirect</span><span class=\"o\">/</span><span class=\"n\">different</span><span class=\"o\">-</span><span class=\"n\">callees</span><span class=\"o\">/</span><span class=\"n\">table</span><span class=\"o\">-</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">lazy</span><span class=\"o\">/</span><span class=\"mi\">65536</span><span class=\"o\">-</span><span class=\"n\">calls</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">2.3910</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">2.4159</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">2.4430</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">thrpt</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mf\">26.826</span><span class=\"w\"> </span><span class=\"n\">Melem</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">27.127</span><span class=\"w\"> </span><span class=\"n\">Melem</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">27.410</span><span class=\"w\"> </span><span class=\"n\">Melem</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"n\">outliers</span><span class=\"w\"> </span><span class=\"n\">among</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"n\">measurements</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">14.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">12.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n<span class=\"n\">call</span><span class=\"o\">-</span><span class=\"n\">indirect</span><span class=\"o\">/</span><span class=\"n\">same</span><span class=\"o\">-</span><span class=\"n\">callee</span><span class=\"o\">/</span><span class=\"n\">table</span><span class=\"o\">-</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">strict</span><span class=\"o\">/</span><span class=\"mi\">65536</span><span class=\"o\">-</span><span class=\"n\">calls</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">130.12</span><span class=\"w\"> </span><span class=\"err\">µ</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">131.28</span><span class=\"w\"> </span><span class=\"err\">µ</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">132.59</span><span class=\"w\"> </span><span class=\"err\">µ</span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">thrpt</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mf\">494.27</span><span class=\"w\"> </span><span class=\"n\">Melem</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">499.21</span><span class=\"w\"> </span><span class=\"n\">Melem</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">503.65</span><span class=\"w\"> </span><span class=\"n\">Melem</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"n\">outliers</span><span class=\"w\"> </span><span class=\"n\">among</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"n\">measurements</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">9.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">4.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n<span class=\"w\">  </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">5.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n<span class=\"n\">call</span><span class=\"o\">-</span><span class=\"n\">indirect</span><span class=\"o\">/</span><span class=\"n\">different</span><span class=\"o\">-</span><span class=\"n\">callees</span><span class=\"o\">/</span><span class=\"n\">table</span><span class=\"o\">-</span><span class=\"n\">init</span><span class=\"o\">-</span><span class=\"n\">strict</span><span class=\"o\">/</span><span class=\"mi\">65536</span><span class=\"o\">-</span><span class=\"n\">calls</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">178.40</span><span class=\"w\"> </span><span class=\"err\">µ</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">180.80</span><span class=\"w\"> </span><span class=\"err\">µ</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">183.30</span><span class=\"w\"> </span><span class=\"err\">µ</span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">thrpt</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mf\">357.53</span><span class=\"w\"> </span><span class=\"n\">Melem</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">362.47</span><span class=\"w\"> </span><span class=\"n\">Melem</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">367.36</span><span class=\"w\"> </span><span class=\"n\">Melem</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">outliers</span><span class=\"w\"> </span><span class=\"n\">among</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"n\">measurements</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n</code></pre></div>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 537921226,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757094942
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626\">PR #11626</a>.</p>",
        "id": 537921229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757094943
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626\">PR #11626</a>.</p>",
        "id": 537921230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757094943
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626#pullrequestreview-3190372462\">PR review</a>:</p>\n<blockquote>\n<p>Wow so if I'm reading those numbers right lazy initialization is ~15x more expensive than not? Or put another way if you use &lt; 1/15th of your table lazy is worth it but otherwise it's a net loss?</p>\n</blockquote>",
        "id": 537925228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757096453
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626#discussion_r2325759417\">PR review comment</a>:</p>\n<blockquote>\n<p>How come this has 5 elements? (vs 1 or somesuch)</p>\n</blockquote>",
        "id": 537925229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757096453
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626#discussion_r2325754515\">PR review comment</a>:</p>\n<blockquote>\n<p>Any particular reason this is split across two instances?</p>\n</blockquote>",
        "id": 537925230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757096453
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626#pullrequestreview-3190383165\">PR review</a>.</p>",
        "id": 537925248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757096463
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626#issuecomment-3259360337\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626\">PR #11626</a>:</p>\n<blockquote>\n<blockquote>\n<p>Wow so if I'm reading those numbers right lazy initialization is ~15x more expensive than not? Or put another way if you use &lt; 1/15th of your table lazy is worth it but otherwise it's a net loss?</p>\n</blockquote>\n<p>At least as far as post-instantiation performance -- any performance tradeoff decision would want to consider that, as well. For example the early benchmarking that led to implementing all of this did look at the end-to-end (instantiation, execution, teardown) throughput and \"very sparse\" usage does tend to be the case for large modules (e.g. SpiderMonkey) with instance-per-request semantics. If we don't already it'd be great to have more docs on the tradeoffs here...</p>\n</blockquote>",
        "id": 537926057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757096803
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626#issuecomment-3259371879\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626\">PR #11626</a>:</p>\n<blockquote>\n<blockquote>\n<p>Wow so if I'm reading those numbers right lazy initialization is ~15x more expensive than not? Or put another way if you use &lt; 1/15th of your table lazy is worth it but otherwise it's a net loss?</p>\n</blockquote>\n<p>From a purely Wasm-execution-throughput point of view, yes.</p>\n<p>But lazy table initialization is a pretty big win for instantiation of large modules.</p>\n<p>And then there is the usage pattern aspect as well, that Chris mentions.</p>\n</blockquote>",
        "id": 537926885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757097106
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626#pullrequestreview-3190411777\">PR review</a>.</p>",
        "id": 537926984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757097145
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626#discussion_r2325782736\">PR review comment</a>:</p>\n<blockquote>\n<p>No real reason, had to choose something <em>shrug</em></p>\n</blockquote>",
        "id": 537926987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757097145
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626#pullrequestreview-3190414692\">PR review</a>.</p>",
        "id": 537927199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757097226
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626#discussion_r2325784847\">PR review comment</a>:</p>\n<blockquote>\n<p>To defeat potential Wasm-to-CLIF frontend bounds-checking optimizations and such. Same reason we pass the callee index in as a parameter, rather than have it be a constant. Probably overkill, but not too hard to do, so why not.</p>\n</blockquote>",
        "id": 537927200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757097226
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11626\">PR #11626</a>.</p>",
        "id": 537943417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757104632
    }
]