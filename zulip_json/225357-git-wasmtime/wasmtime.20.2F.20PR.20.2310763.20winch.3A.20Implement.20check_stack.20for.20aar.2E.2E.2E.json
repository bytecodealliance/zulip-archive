[
    {
        "content": "<p>graydon opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a> from <code>graydon:winch-aarch64-check-stack</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This is my first attempt at contributing to winch or cranelift at all -- wide open to any feedback/suggestions. I was just poking around looking for things I could do to help push winch over the finish line on aarch64. @saulecabrera suggested the missing <code>check_stack</code> implementation might be a welcome change.</p>\n<p>(This is also my first time working with aarch64 instructions in any detail; hopefully I got the semantics not-too-wrong)</p>\n<p>Before:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Ccompiler</span><span class=\"o\">=</span><span class=\"n\">winch</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spec_testsuite</span><span class=\"o\">/</span><span class=\"n\">call</span><span class=\"p\">.</span><span class=\"n\">wast</span>\n<span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">.]</span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">dev</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.41</span><span class=\"n\">s</span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Ccompiler</span><span class=\"o\">=</span><span class=\"n\">winch</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spec_testsuite</span><span class=\"o\">/</span><span class=\"n\">call</span><span class=\"p\">.</span><span class=\"n\">wast</span><span class=\"err\">`</span>\n<span class=\"n\">execution</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"n\">fiber</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">overflowed</span><span class=\"w\"> </span><span class=\"n\">its</span><span class=\"w\"> </span><span class=\"n\">stackzsh</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">abort</span><span class=\"w\">      </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Ccompiler</span><span class=\"o\">=</span><span class=\"n\">winch</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spec_testsuite</span><span class=\"o\">/</span><span class=\"n\">call</span><span class=\"p\">.</span><span class=\"n\">wast</span>\n</code></pre></div>\n<p>After:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Ccompiler</span><span class=\"o\">=</span><span class=\"n\">winch</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spec_testsuite</span><span class=\"o\">/</span><span class=\"n\">call</span><span class=\"p\">.</span><span class=\"n\">wast</span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">dev</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.41</span><span class=\"n\">s</span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Ccompiler</span><span class=\"o\">=</span><span class=\"n\">winch</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spec_testsuite</span><span class=\"o\">/</span><span class=\"n\">call</span><span class=\"p\">.</span><span class=\"n\">wast</span><span class=\"err\">`</span>\n<span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tests</span><span class=\"o\">/</span><span class=\"n\">spec_testsuite</span><span class=\"o\">/</span><span class=\"n\">call</span><span class=\"p\">.</span><span class=\"n\">wast</span><span class=\"o\">'</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">directive</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spec_testsuite</span><span class=\"o\">/</span><span class=\"n\">call</span><span class=\"p\">.</span><span class=\"n\">wast</span><span class=\"p\">:</span><span class=\"mi\">285</span><span class=\"p\">:</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">           </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">exhausted</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 517214654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746844441
    },
    {
        "content": "<p><strong>graydon</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a>.</p>",
        "id": 517214656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746844442
    },
    {
        "content": "<p><strong>graydon</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a>.</p>",
        "id": 517214657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746844442
    },
    {
        "content": "<p><strong>graydon</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a>.</p>",
        "id": 517214665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746844442
    },
    {
        "content": "<p><strong>graydon</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a>.</p>",
        "id": 517214672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746844442
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763#issuecomment-2868308664\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 517219458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746848979
    },
    {
        "content": "<p>graydon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a>.</p>",
        "id": 517303078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746919005
    },
    {
        "content": "<p>graydon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a>.</p>",
        "id": 517305729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746921660
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/saulecabrera\">saulecabrera</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a>.</p>",
        "id": 517391912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746993748
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763#issuecomment-2870097834\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a>:</p>\n<blockquote>\n<p>(moving review over to @saulecabrera)</p>\n<p>Looks like you found <code>WASMTIME_TEST_BLESS=1</code> though which is indeed the recommend way to fix the original test failures <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 517391940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1746993779
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763#discussion_r2084899088\">PR review comment</a>:</p>\n<blockquote>\n<p>Perhaps we should update the documentation here, since the implementation here differs a bit from x64, e.g., we're emitting <code>add rd, rm, rn</code></p>\n</blockquote>",
        "id": 517582507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747063338
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763#discussion_r2084920175\">PR review comment</a>:</p>\n<blockquote>\n<p>Here we might want to use <code>self.masm.trapif</code> instead. Aarch64 requires the SP to be 16-byte aligned, and even though the SP is not used for memory addressing, if a trap is raised, signal handling code will segfault if SP is not correctly aligned. See <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10146\">https://github.com/bytecodealliance/wasmtime/pull/10146</a> for more details. </p>\n</blockquote>",
        "id": 517582508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747063338
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763#pullrequestreview-2833583040\">PR review</a>:</p>\n<blockquote>\n<p>This is looking really good, thanks! I left a couple of comments inline, which I think is probably worth addressing. </p>\n<p>In terms of tests, since our last discussion via Zulip, <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10750\">https://github.com/bytecodealliance/wasmtime/pull/10750</a> landed, which enables running some aarch64 tests in CI. It's probably a good idea to enable at least the <code>call.wast</code> tests here <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/test-util/src/wast.rs#L422\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/test-util/src/wast.rs#L422</a>. Ideally, we should enable all of them, but it's possible that some of them will fail, due to some of the existing bugs that I'm currently in the process of fixing. </p>\n</blockquote>",
        "id": 517582511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747063338
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763#discussion_r2084893838\">PR review comment</a>:</p>\n<blockquote>\n<p>Should we perhaps change these two to be <code>Writable&lt;Reg&gt;</code>, we're changing both of them and it's easier to audit sites in which registers are changed in the <code>MacroAssembler</code> layer if those are annotated as writable.</p>\n</blockquote>",
        "id": 517582512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747063339
    },
    {
        "content": "<p>graydon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763#pullrequestreview-2835064406\">PR review</a>.</p>",
        "id": 517710889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747100690
    },
    {
        "content": "<p>graydon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763#discussion_r2085777343\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh, sure (<code>self</code> already is a <code>MacroAssembler</code> so I assume you mean <code>self.trapif</code>).</p>\n</blockquote>",
        "id": 517710890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747100691
    },
    {
        "content": "<p>graydon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763#pullrequestreview-2835064893\">PR review</a>.</p>",
        "id": 517710975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747100719
    },
    {
        "content": "<p>graydon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763#discussion_r2085777660\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh, ok. I already did alter it (note it describes an instruction _sequence_) but I can alter it to be a little more explicit.</p>\n</blockquote>",
        "id": 517710976,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747100719
    },
    {
        "content": "<p>graydon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763#pullrequestreview-2835064983\">PR review</a>.</p>",
        "id": 517710992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747100724
    },
    {
        "content": "<p>graydon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763#discussion_r2085777739\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, done.</p>\n</blockquote>",
        "id": 517710993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747100725
    },
    {
        "content": "<p>graydon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a>.</p>",
        "id": 517711136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747100768
    },
    {
        "content": "<p>graydon <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763#issuecomment-2874793395\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a>:</p>\n<blockquote>\n<p>@saulecabrera thanks for the review! one thing worth pointing out is that this change doesn't include the bit about emitting unwind instructions that's in the x86_64 masm. I got the impression that's a larger project though (there doesn't seem to be any unwind support in the aarch64 backend at all right now -- is that something else that needs doing?)</p>\n</blockquote>",
        "id": 517711954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747101074
    },
    {
        "content": "<p>graydon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a>.</p>",
        "id": 517714538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747101998
    },
    {
        "content": "<p>saulecabrera <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763#issuecomment-2878224276\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a>:</p>\n<blockquote>\n<p>@graydon You're right that there is no unwind support right now, it's not expected to land that functionality as part of this PR. I think that once that (any passing) tests are updated here  <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/test-util/src/wast.rs#L422\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/test-util/src/wast.rs#L422</a>, we should be able to land this one. </p>\n</blockquote>",
        "id": 517943542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747181231
    },
    {
        "content": "<p>graydon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a>.</p>",
        "id": 518222342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747293045
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763#pullrequestreview-2843697232\">PR review</a>:</p>\n<blockquote>\n<p>LGTM, thanks! </p>\n</blockquote>",
        "id": 518303310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747315630
    },
    {
        "content": "<p>saulecabrera merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10763\">PR #10763</a>.</p>",
        "id": 518309238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1747316926
    }
]