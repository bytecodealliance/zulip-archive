[
    {
        "content": "<p>posborne opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a> from <code>posborne:copyless-deserialize-no-std</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>For targets without virtual memory support, the only mechanism for load code previously was to copy bytes from a provided slice into a separate, owned, allocated buffer containing a copy of the serialized module contents.  This is expensive for constrained targets and prohibits embedded runtimes like doing things like running code directly out of memory-mapped devices such as NOR flash.</p>\n<p>The tradeoff for directly using the externally owned memory is that the caller must ensure that the code memory will not be written to for the lifetime of the CodeMemory.</p>\n<p>Issue #10245 </p>\n<hr>\n<p>This code has limited testing right now as the <code>min-platform</code> example is only able to run in-tree and CI when virtual memory is enabled via the custom feature in the embedding.  A potentially interesting enhancement would be to support another form of the example which targets a \"true\" embedded target such as a cortex-m processor (cortex-m4/thumbv7-none-eabihf or similar -- such as would target an STM32 MCU).  This could be setup to run on a developers machine and assert expected output in CI via QEMU.</p>\n<p>CC @alexcrichton @ia0 @sunfishcode</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 503075095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741020370
    },
    {
        "content": "<p><strong>posborne</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a>.</p>",
        "id": 503075096,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741020370
    },
    {
        "content": "<p><strong>posborne</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a>.</p>",
        "id": 503075097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741020370
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#pullrequestreview-2654686247\">PR review</a>.</p>",
        "id": 503075378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741020466
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#discussion_r1977846075\">PR review comment</a>:</p>\n<blockquote>\n<p>Reusing <code>NonNull</code>/<code>SendSyncPtr</code> here and casting the const ptr to mut definitely feels hacky so feedback very welcome on a better approach if one would make sense for this.</p>\n</blockquote>",
        "id": 503075379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741020466
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a>.</p>",
        "id": 503082806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741022481
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#discussion_r1977931834\">PR review comment</a>:</p>\n<blockquote>\n<p>There is no difference between <code>*mut T</code> and <code>*const T</code> in Rust's semantics, so it isn't a big deal.</p>\n<p>Soft preference for using <code>.cast::&lt;T&gt;()</code> and <code>.cast_{const,mut}()</code> methods for conversions, since they are a little more explicit and future proof, since they cast just one thing at a time, where <code>as</code> can change multiple things.</p>\n</blockquote>",
        "id": 503088260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741024210
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#pullrequestreview-2654757377\">PR review</a>:</p>\n<blockquote>\n<p>Looks great! Just a couple nitpicks below.</p>\n</blockquote>",
        "id": 503088261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741024211
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#discussion_r1977887362\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe also mention that the pointer must be valid for <code>size</code> bytes and must point to the contents of a <code>.cwasm</code> file or result of <code>{Module,Component}::serialize</code>-style APIs.</p>\n</blockquote>",
        "id": 503088262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741024211
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#pullrequestreview-2654987241\">PR review</a>.</p>",
        "id": 503099993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741028001
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#discussion_r1978021113\">PR review comment</a>:</p>\n<blockquote>\n<p>I'll change the cast; the ptr semantics between <code>*const</code> and <code>*mut</code> matched my understanding as well (at least within this context), but it always throws me off a bit.  Casting to mut and then mutating would potentially be a source of UB I believe.</p>\n<p>The usage of <code>NonNull</code> in this way would seem to essentially fall under this note from the docs:</p>\n<blockquote>\n<p>Notice that NonNull&lt;T&gt; has a From instance for &amp;T. However, this does not change the fact that mutating through a (pointer derived from a) shared reference is undefined behavior unless the mutation happens inside an <a href=\"https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html\">UnsafeCell&lt;T&gt;</a>. The same goes for creating a mutable reference from a shared reference. When using this From instance without an UnsafeCell&lt;T&gt;, it is your responsibility to ensure that as_mut is never called, and as_ptr is never used for mutation.</p>\n</blockquote>\n<p>Since we are prohibiting mutation (via <code>as_mut()</code>), the usage should be sound.  Some of the UB details may be specific to data originally owned by rust, but that could be the case here as well, even though the API is taking a raw <code>*const</code>.</p>\n</blockquote>",
        "id": 503099994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741028001
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a>.</p>",
        "id": 503112925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741032120
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a>.</p>",
        "id": 503113416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741032298
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#pullrequestreview-2655221797\">PR review</a>.</p>",
        "id": 503117747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741033817
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#discussion_r1978152483\">PR review comment</a>:</p>\n<blockquote>\n<p>A small bikeshed on this, one thing we could do here is take <code>NonNull&lt;[u8]&gt;</code> which (a) bundles ptr/len into one, and (b) helps clarify the contract that it must be non-null</p>\n</blockquote>",
        "id": 503117750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741033817
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#pullrequestreview-2655362491\">PR review</a>.</p>",
        "id": 503125791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741036887
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#discussion_r1978248120\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm definitely not against this; I think the counterpoint is that, at least with the type signature, you lose the ability to document that the usage of the memory is going to be immutable (which I do believe would be an important invariant for the intended use case) and we end up pushing the <code>*mut</code> transmute to callers who have a reference to an immutable chunk of memory.</p>\n<p>So, we gain the ability to model with types that we require a non-null pointer but we lose the ability to inform the caller that we're using the memory immutably. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> </p>\n</blockquote>",
        "id": 503125792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741036887
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#pullrequestreview-2655464860\">PR review</a>.</p>",
        "id": 503133240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741039635
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#discussion_r1978312192\">PR review comment</a>:</p>\n<blockquote>\n<p>That's already true as soon as you're using raw pointers instead of safe references though, so we are already in that world here.</p>\n</blockquote>",
        "id": 503133241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741039635
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a>.</p>",
        "id": 503143145,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741043933
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#pullrequestreview-2655561135\">PR review</a>.</p>",
        "id": 503143181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741043958
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#discussion_r1978374796\">PR review comment</a>:</p>\n<blockquote>\n<p>Pushed a new commit making the change to <code>NonNull&lt;[u8]&gt;</code>.</p>\n</blockquote>",
        "id": 503143182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741043959
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#pullrequestreview-2658048508\">PR review</a>.</p>",
        "id": 503299899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741102863
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#discussion_r1979714021\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this unconditionally use the <code>new_externally_owned</code> variant here? I think it'd be best to keep the semantics of this API independent of activated crate features since <code>deserialize_raw</code> is documented as not copying but here using <code>from_slice_with_alignment</code> I think would do a copy?</p>\n<p>If that chang is made I think it's also fine to drop <code>alignment</code> here and basically document that as part of the unsafe contract.</p>\n</blockquote>",
        "id": 503299900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741102863
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#pullrequestreview-2658052206\">PR review</a>:</p>\n<blockquote>\n<p>Oh one last comment, for testing could something be added to <code>tests/all/module.rs</code> perhaps? It doesn't need to be super comprehensive but I think it'd be good to have at least a small test (maybe Pulley-only?) which loads a module, asserts the image is pointing within the original pointer, and maybe does some basic arithmetic in-wasm to ensure it works.</p>\n</blockquote>",
        "id": 503300222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741102940
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#pullrequestreview-2658399401\">PR review</a>.</p>",
        "id": 503323346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741108962
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#discussion_r1979901752\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Could this unconditionally use the new_externally_owned variant here?</p>\n</blockquote>\n<p>Yeah, should be doable.  I'll do some testing to ensure we don't simply panic or crash but are able to nicely reject modules that will not be able to be execute without mmap but agree that it's probably best to provide this on all platforms in a consistent fashion.</p>\n</blockquote>",
        "id": 503323349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741108962
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a>.</p>",
        "id": 503383358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741130054
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#issuecomment-2699217354\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a>:</p>\n<blockquote>\n<p>@alexcrichton Hopefully the updates address your latest comments, I did a little bit of extra in order to ensure that we bailed out with hopefully reasonable errors rather than panics for cases where virtual memory is required.</p>\n<p>I wasn't able to find a clear way to assert in the test context that the memory offsets were identical as a lot of the APIs that actually make it through to the CodeMemory and mmap are either not public or they work on copy types.  It's likely that I missed something that I can assert on but I did at least test that we can do some basic math.</p>\n</blockquote>",
        "id": 503383774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741130273
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#issuecomment-2699301962\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a>:</p>\n<blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> tests and changes look great to me, no need to test what I was thinking if it's difficult</p>\n</blockquote>",
        "id": 503388834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741132775
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a>.</p>",
        "id": 503392693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741134518
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#issuecomment-2699347470\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a>:</p>\n<blockquote>\n<p>Fixed the compile error, missed doing a final compile check on a target with virtual memory.</p>\n</blockquote>",
        "id": 503392785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741134576
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a>.</p>",
        "id": 503392876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741134612
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321#issuecomment-2699506505\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a>:</p>\n<blockquote>\n<p>Ok, I missed that for platforms like i686 that the default engine config falls back on pulley so those wouldn't expect to fail -- I should be able to handle that just fine.  I'll try to do some testing for those cases and fix that up tomorrow morning.  Will probably just do a check around the assertion on the engine target triple containing \"pulley\".</p>\n<p>With that small change I'll probably amend the original commit and squash down as the initial title about only adding this support for platforms without virtual memory support is no longer true as well.</p>\n</blockquote>",
        "id": 503401454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741138957
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a>.</p>",
        "id": 503556788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741190145
    },
    {
        "content": "<p>posborne edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10321\">PR #10321</a>:</p>\n<blockquote>\n<p>For targets without virtual memory support, the only mechanism for<br>\nload code previously was to copy bytes from a provided slice into<br>\na separate, owned, allocated buffer containing a copy of the serialized<br>\nmodule contents.  This is expensive for constrained targets and<br>\nprohibits embedded runtimes like doing things like running code<br>\ndirectly out of memory-mapped devices such as NOR flash.</p>\n<p>The tradeoff for directly using the externally owned memory is that<br>\nthe caller must ensure that the code memory will not be written<br>\nto for the lifetime of the CodeMemory.</p>\n<p>Loading code from externally owned memory is supported for all<br>\nconfigurations but is expected to fail to deserialize on platforms<br>\nthat support virtual memory and are attempting to load modules<br>\nor components that require that the memory be made executable<br>\n(native code rather than pulley).</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/10245\">https://github.com/bytecodealliance/wasmtime/issues/10245</a></p>\n</blockquote>",
        "id": 503557808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741190346
    }
]