[
    {
        "content": "<p>khagankhan opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605\">PR #11605</a> from <code>khagankhan:rec-struct</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This is open to review but it is not ready for merge because of the assertion failure we are having. <br>\ncc @fitzgen </p>\n</blockquote>",
        "id": 537625454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756977004
    },
    {
        "content": "<p><strong>khagankhan</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605\">PR #11605</a>.</p>",
        "id": 537625456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756977004
    },
    {
        "content": "<p><strong>khagankhan</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605\">PR #11605</a>.</p>",
        "id": 537625457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756977004
    },
    {
        "content": "<p>khagankhan submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#pullrequestreview-3184188398\">PR review</a>.</p>",
        "id": 537625642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756977053
    },
    {
        "content": "<p>khagankhan created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#discussion_r2321372089\">PR review comment</a>:</p>\n<blockquote>\n<p>new ranges for Types</p>\n</blockquote>",
        "id": 537625644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756977053
    },
    {
        "content": "<p>khagankhan submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#pullrequestreview-3184195664\">PR review</a>.</p>",
        "id": 537625888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756977119
    },
    {
        "content": "<p>khagankhan created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#discussion_r2321375278\">PR review comment</a>:</p>\n<blockquote>\n<p>Here I tried to distribute structs over different recs.</p>\n</blockquote>",
        "id": 537625891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756977119
    },
    {
        "content": "<p>khagankhan edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605\">PR #11605</a>:</p>\n<blockquote>\n<p>cc @fitzgen </p>\n</blockquote>",
        "id": 537632153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756978941
    },
    {
        "content": "<p>khagankhan edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605\">PR #11605</a>:</p>\n<blockquote>\n<p>Open to review <br>\ncc @fitzgen </p>\n</blockquote>",
        "id": 537632404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756979031
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#issuecomment-3253061246\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605\">PR #11605</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 537642802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756982719
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605\">PR #11605</a>.</p>",
        "id": 537686637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756996205
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#pullrequestreview-3187449069\">PR review</a>:</p>\n<blockquote>\n<p>Good start, although I think we need some tweaks before this can land.</p>\n<p>One thing I don't see is any mutators for our types and rec groups (e.g. add/remove types, switch a type from one rec group to another, etc). Is the plan that we will add mutators in follow up PRs? That is fine, but I just want to make sure it isn't overlooked.</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 537766847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757026237
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#discussion_r2323702208\">PR review comment</a>:</p>\n<blockquote>\n<p>None of these methods seem to be used?</p>\n</blockquote>",
        "id": 537766848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757026238
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#discussion_r2323696822\">PR review comment</a>:</p>\n<blockquote>\n<p>We specifically <em>do not</em> want to evenly distribute types between rec groups. We <em>want</em> to explore the weird edge cases where all types are in one rec group and all other rec groups are empty, etc. Also, we already have a mapping from type to rec group in the form of the <code>SubType::rec_group</code> field and we should use that mapping, not ignore it.</p>\n<p>Instead, I would expect something like this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Gather all rec groups and types by rec group.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">rec_groups</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">types</span>\n<span class=\"w\">                         </span><span class=\"p\">.</span><span class=\"n\">rec_groups</span>\n<span class=\"w\">                         </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n<span class=\"w\">                         </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">id</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[]))</span>\n<span class=\"w\">                         </span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">BTreeMap</span><span class=\"o\">&lt;</span><span class=\"n\">RecGroupId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">TypeId</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">type_defs</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">rec_groups</span><span class=\"p\">.</span><span class=\"n\">entry</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">rec_group</span><span class=\"p\">).</span><span class=\"n\">or_default</span><span class=\"p\">().</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Encode those rec groups and their types into the types section.</span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">type_ids</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">rec_groups</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">().</span><span class=\"n\">rec</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">type_ids</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">ty_id</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">(</span><span class=\"s\">\"create a `wasm_encoder::SubType` for the type with id `ty_id`\"</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 537766849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757026238
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#discussion_r2323681248\">PR review comment</a>:</p>\n<blockquote>\n<p>Instead of <code>num_{rec_groups,types}</code> can these be <code>max_{rec_groups,types}</code>? We already have an (implicit) count of rec groups and types via the size of the <code>Types::{type_defs,rec_groups}</code> fields. Then we would define a <code>Types::fixup</code> method that takes a reference to the limits and removes any entries beyond the given limit, and finally we would call <code>Types::fixup</code> from <code>TableOps::fixup</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Types</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">fixup</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">limits</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">TableOpsLimits</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">rec_groups</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">limits</span><span class=\"p\">.</span><span class=\"n\">max_rec_groups</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">rec_groups</span><span class=\"p\">.</span><span class=\"n\">pop_last</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">type_defs</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">limits</span><span class=\"p\">.</span><span class=\"n\">max_types</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">type_defs</span><span class=\"p\">.</span><span class=\"n\">pop_last</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This ensures that we always have a valid number of types and rec groups by the time we get to emitting a Wasm binary, which is similar to how we treat everything else (assume/assert it is valid in <code>to_wasm_binary</code>, enforce validity in <code>fixup</code>).</p>\n<p>(Aside: eventually we will probably want custom serialization/deserialization with <code>#[serde(serialize_with = \"my_serialization_func\")]</code> for all of our container types so that we never try to allocate a huge <code>Vec</code>/<code>BTreeSet</code>/<code>BTreeMap</code> during deserialization of untrusted fuzzer data, leading to OOMs.)</p>\n</blockquote>",
        "id": 537766850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757026238
    },
    {
        "content": "<p>khagankhan <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#issuecomment-3256131768\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605\">PR #11605</a>:</p>\n<blockquote>\n<p>Thanks for the comments @fitzgen! Yes mutators are coming next. I just want to go step by step so addressing them is easy</p>\n</blockquote>",
        "id": 537767064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757026401
    },
    {
        "content": "<p>khagankhan updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605\">PR #11605</a>.</p>",
        "id": 539652720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757973250
    },
    {
        "content": "<p>khagankhan <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#issuecomment-3294089391\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605\">PR #11605</a>:</p>\n<blockquote>\n<p>@fitzgen It is ready for the second round of reviews. There is a failing test of <code>limit &gt; 0</code> which is related to the #11587 that I am looking at. </p>\n</blockquote>",
        "id": 539652992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757973411
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#discussion_r2353125399\">PR review comment</a>:</p>\n<blockquote>\n<p>Style nitpick: newline between imports and declarations</p>\n</blockquote>",
        "id": 539818503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758042182
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#pullrequestreview-3230920177\">PR review</a>:</p>\n<blockquote>\n<p>Looks good! Two tiny nitpicks below, but should be good to merge when they are addressed and the test issue you mentioned is resolved. Thanks!</p>\n</blockquote>",
        "id": 539818504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758042182
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#discussion_r2353128902\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick: lets exhaustively match on the struct definition here so that as we expand that type we are reminded to update this code by the compiler:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                CompositeType::Struct(StructType {}) =&gt; wasm_encoder::SubType {\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 539818506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758042182
    },
    {
        "content": "<p>khagankhan updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605\">PR #11605</a>.</p>",
        "id": 540070882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758130966
    },
    {
        "content": "<p>khagankhan updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605\">PR #11605</a>.</p>",
        "id": 540074037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758132147
    },
    {
        "content": "<p>khagankhan <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#issuecomment-3304056524\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605\">PR #11605</a>:</p>\n<blockquote>\n<p>@fitzgen ready for the review. It passes the tests now. The potential merge should fix #11587 <br>\n</p>\n</blockquote>",
        "id": 540074755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758132391
    },
    {
        "content": "<p>khagankhan <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#issuecomment-3304140951\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605\">PR #11605</a>:</p>\n<blockquote>\n<p>cc @eeide</p>\n</blockquote>",
        "id": 540079588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758134137
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605#pullrequestreview-3235946410\">PR review</a>.</p>",
        "id": 540088283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758137346
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11605\">PR #11605</a>.</p>",
        "id": 540092097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758138798
    }
]