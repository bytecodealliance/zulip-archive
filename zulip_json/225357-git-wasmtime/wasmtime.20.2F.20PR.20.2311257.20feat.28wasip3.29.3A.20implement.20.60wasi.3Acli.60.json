[
    {
        "content": "<p>rvolosatovs opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a> from <code>rvolosatovs:feat/wasip3-cli</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>follow-up on #11221, this implements <code>wasi:cli</code>, mostly by moving and cleaning up the implementation from <a href=\"https://github.com/bytecodealliance/wasip3-prototyping\">https://github.com/bytecodealliance/wasip3-prototyping</a></p>\n</blockquote>",
        "id": 529112470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752689508
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#pullrequestreview-3026423401\">PR review</a>.</p>",
        "id": 529120620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752692927
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#discussion_r2211313527\">PR review comment</a>:</p>\n<blockquote>\n<p>Could the <code>InputStream</code> and <code>OutputStream</code> traits directly have a <code>Send</code> supertrait to avoid needing <code>InputStream + Send</code> for example in the builder and such?</p>\n</blockquote>",
        "id": 529120622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752692927
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#discussion_r2211305017\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be possible to use <code>std::io::IsTerminal</code> instead?</p>\n</blockquote>",
        "id": 529120623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752692927
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#discussion_r2211306388\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW a trick I've used in the past is to use <code>T::clocks(self)</code> in the body which forcibly ensures that recursion doesn't happen and avoids <code>**</code> syntax as well. Just a style thing though, no meaningful difference</p>\n</blockquote>",
        "id": 529120624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752692927
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#discussion_r2211314678\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be possible to drop <code>Unpin</code> since this is already in a box anyway?</p>\n</blockquote>",
        "id": 529120625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752692927
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#discussion_r2211325428\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm a bit wary of making the implementation more generic than it already is, so would it be possible to drop these associated types and hardwire the trait objects? Or are these needed to multiplex the p2/p3 implementation?</p>\n</blockquote>",
        "id": 529120626,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752692927
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#discussion_r2211329957\">PR review comment</a>:</p>\n<blockquote>\n<p>Could you explain a bit more as to why this is necessary?</p>\n<p>I forget the matrix of types/traits involved here, but I would naively expect that <code>&amp;mut WasiImpl&lt;Self&gt;</code> is basically equivalent to <code>WasiImpl&lt;&amp;mut Self&gt;</code></p>\n</blockquote>",
        "id": 529120627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752692927
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#discussion_r2211323419\">PR review comment</a>:</p>\n<blockquote>\n<p>My guess is \"no\" given the litany of implementations we have, but in such a case could documentation be added that this is basically a mirror of what's in libstd? Also is it worth trying to add a blanket <code>impl&lt;T: std::IsTerminal&gt; wasi::IsTermainal for T</code> impl?</p>\n</blockquote>",
        "id": 529120629,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752692928
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#pullrequestreview-3028811352\">PR review</a>.</p>",
        "id": 529242675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752746126
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#discussion_r2212896672\">PR review comment</a>:</p>\n<blockquote>\n<p>We cannot use the <code>std::io::IsTerminal</code>, because it's sealed: <a href=\"https://github.com/rust-lang/rust/blob/f8f6997469237299c1d60814c7b9828602a1f8e4/library/std/src/io/stdio.rs#L1197\">https://github.com/rust-lang/rust/blob/f8f6997469237299c1d60814c7b9828602a1f8e4/library/std/src/io/stdio.rs#L1197</a></p>\n<p>Unfortunately, largely because of that, blanket implementations for <code>T</code> also do not appear to be possible.</p>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0119</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">conflicting</span><span class=\"w\"> </span><span class=\"n\">implementations</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">IsTerminal</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">tokio</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Stderr</span><span class=\"err\">`</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">cli</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">126</span><span class=\"p\">:</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">66</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">std</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">IsTerminal</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">IsTerminal</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">---------------------------------------------</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"n\">here</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"mi\">126</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IsTerminal</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">tokio</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Stderr</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">conflicting</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">tokio</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Stderr</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">upstream</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">sealed</span><span class=\"p\">::</span><span class=\"n\">Sealed</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">tokio</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Stderr</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"> </span><span class=\"n\">versions</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">upstream</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">IsTerminal</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">tokio</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Stderr</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"> </span><span class=\"n\">versions</span>\n</code></pre></div>\n<p><code>tokio::io::Stderr</code> cannot implement <code>std::io::IsTerminal</code>, because it's sealed and <em>we</em> cannot implement <code>wasmtime_wasi::cli::IsTerminal</code> for it if we provide a blanket implementation for <code>std::io::IsTerminal</code></p>\n</blockquote>",
        "id": 529242676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752746126
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#pullrequestreview-3028946064\">PR review</a>.</p>",
        "id": 529249059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752748485
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#discussion_r2212981797\">PR review comment</a>:</p>\n<blockquote>\n<p>Depends, if these per-proposal \"View\" traits are adopted by <code>p2</code> implementation, then the associated types would be used for exactly this purpose. Currently, only the p3 implementation uses these traits.</p>\n<p>I'll move this trait to <code>wasmtime_wasi::p3::cli::WasiCliView</code> without the associated types for now and maybe we can revisit once we have all of WASI implemented in this repo.</p>\n</blockquote>",
        "id": 529249061,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752748485
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#pullrequestreview-3029006168\">PR review</a>.</p>",
        "id": 529252023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752749626
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#discussion_r2213019311\">PR review comment</a>:</p>\n<blockquote>\n<p>I was hoping for that as well, but I've spent roughly 1h actively working on it and roughly an hour more trying things out while in meetings, but I could not figure it out without significant API changes.<br>\nWhat I'd like to get from this implementation:</p>\n<ul>\n<li>be able to select a proposal to link (<code>wasi:cli</code> in this case) and:<ul>\n<li><em>only</em> implement parts relevant for that proposal (<code>WasiCliView</code> instead of <code>WasiView</code>)</li>\n<li>add symbols to linker using a familiar API (<code>wasmtime_wasi::p3::cli::add_to_linker</code>) without having to resort to lower-level, generated <code>wasmtime_wasi::p3::bindings::wasi::cli::*</code> per-interface functions - which is error prone, tedious and introduces additional maintenance burden</li>\n</ul>\n</li>\n<li>be able to link <em>all</em> of WASI, i.e. implement <code>WasiView</code> and call <code>wasmtime_wasi::p3::add_to_linker</code></li>\n</ul>\n<p>The convention is that we implement interfaces for <code>WasiCliImpl&lt;T&gt;</code>, where <code>T: WasiCliView</code>. The challenge then in the likes of: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/90ab7916a996a38dc405b1ff861c7c137ed230a7/crates/wasi/src/p3/clocks/mod.rs#L74\">https://github.com/bytecodealliance/wasmtime/blob/90ab7916a996a38dc405b1ff861c7c137ed230a7/crates/wasi/src/p3/clocks/mod.rs#L74</a></p>\n<p>We need a <code>WasiCliImpl(&amp;mut T)</code>, where <code>T</code> implements <code>WasiCliView</code>, but I don't see a way to acquire such a <code>T</code>, when we start with <code>WasiView</code>. I can't do a <code>|v| &amp;mut WasiImpl(v)</code>, since that would create an intermediate reference, which would be immediately dropped. I don't see a way to thread the lifetime through in a way that supports two different traits directly here.<br>\nWe also currently have a separate trait for getting the resource table and we cannot call both <code>WasiCliView::cli</code> and <code>ResourceView::table</code> inside the closure, since that would make us mutably borrow twice</p>\n<p>There are workarounds though:</p>\n<ol>\n<li>Have <code>WasiCliView::cli</code> return a tuple <code>(&amp;mut WasiCliCtx, &amp;mut ResourceTable)</code></li>\n<li>Store <code>ResourceTable</code> in <code>WasiCliCtx</code></li>\n</ol>\n<p>This morning I actually got another idea, which I'm going to try now: <code>WasiCliCtxView&lt;'a&gt;</code>, which would have to <code>&amp;mut</code> borrows, <code>&amp;mut WasiCliCtx</code> and <code>&amp;mut ResourceTable</code>, so <code>WasiCliView::cli</code> would have to return that. A bit awkward to use, but potentially it could work and hopefully it'd only be required in this lower level/advanced use case API</p>\n</blockquote>",
        "id": 529252024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752749626
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#discussion_r2213019311\">PR review comment</a>.</p>",
        "id": 529252218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752749687
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a>.</p>",
        "id": 529261997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752753182
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#pullrequestreview-3029201049\">PR review</a>.</p>",
        "id": 529262082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752753211
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#discussion_r2213135626\">PR review comment</a>:</p>\n<blockquote>\n<p>It worked! No <code>WasiCliImpl</code> and no need for generics in the host implementations anymore</p>\n</blockquote>",
        "id": 529262084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752753212
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a>.</p>",
        "id": 529262594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752753375
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a>.</p>",
        "id": 529266996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752754899
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a>.</p>",
        "id": 529270041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752755917
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a>.</p>",
        "id": 529270752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752756153
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#issuecomment-3083968779\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a>:</p>\n<blockquote>\n<p>Semantics of <code>wasi:cli</code> stdio are not completely clear to me at this point, so I don't want to spend too much time designing the API for it, especially since this interface will likely change soon. There's currently no out-of-the-box way to \"capture\" stdout/stderr, users will have to implement their own with synchronization (e.g. using a <code>Mutex</code>)</p>\n<p>refs <a href=\"https://github.com/WebAssembly/wasi-cli/issues/65\">https://github.com/WebAssembly/wasi-cli/issues/65</a><br>\nrefs <a href=\"https://github.com/WebAssembly/wasi-cli/issues/64\">https://github.com/WebAssembly/wasi-cli/issues/64</a> </p>\n</blockquote>",
        "id": 529272977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752756887
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#issuecomment-3083968779\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a>:</p>\n<blockquote>\n<p>Semantics of <code>wasi:cli</code> stdio are not completely clear to me at this point, so I don't want to spend too much time designing the API for it, especially since this interface will likely change soon. There's currently no out-of-the-box way to \"capture\" stdout/stderr, users will have to implement their own with synchronization (e.g. using a <code>Mutex</code>) for now</p>\n<p>refs <a href=\"https://github.com/WebAssembly/wasi-cli/issues/65\">https://github.com/WebAssembly/wasi-cli/issues/65</a><br>\nrefs <a href=\"https://github.com/WebAssembly/wasi-cli/issues/64\">https://github.com/WebAssembly/wasi-cli/issues/64</a> </p>\n</blockquote>",
        "id": 529273036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752756906
    },
    {
        "content": "<p><strong>rvolosatovs</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a> as ready for review.</p>",
        "id": 529273057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752756913
    },
    {
        "content": "<p><strong>rvolosatovs</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-wasi-reviewers\">wasmtime-wasi-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a>.</p>",
        "id": 529273058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752756914
    },
    {
        "content": "<p><strong>rvolosatovs</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a>.</p>",
        "id": 529273062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752756914
    },
    {
        "content": "<p><strong>rvolosatovs</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a>.</p>",
        "id": 529273063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752756915
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#pullrequestreview-3029996261\">PR review</a>:</p>\n<blockquote>\n<p>Nice I like how the changes worked out, thanks for pushing on it!</p>\n</blockquote>",
        "id": 529303198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752765568
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#issuecomment-3084481539\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a>:</p>\n<blockquote>\n<blockquote>\n<p>There's currently no out-of-the-box way to \"capture\" stdout/stderr</p>\n</blockquote>\n<p>Agreed yeah this is ok for now. For anything else along these lines mind opening an issue for that? I'll open an issue for this one specifically</p>\n</blockquote>",
        "id": 529303333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752765606
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257#issuecomment-3084696917\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a>:</p>\n<blockquote>\n<p>Oh while cargo vet I think was spurious the <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/16350124789/job/46194454343\">failure on Windows</a> I think is valid  which is <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257/files#diff-20f1fb49b0d9c0f977b5090e0b0b5df8d606c8200105e41431969a8dbfea8766R14\">this line</a>. IIRC we set a few extra env vars for Windows for WASI testing</p>\n</blockquote>",
        "id": 529316752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752769864
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a>.</p>",
        "id": 529435435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752834741
    },
    {
        "content": "<p>rvolosatovs has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a>.</p>",
        "id": 529435563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752834800
    },
    {
        "content": "<p>rvolosatovs merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11257\">PR #11257</a>.</p>",
        "id": 529442496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752837588
    }
]