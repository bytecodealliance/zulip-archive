[
    {
        "content": "<p>dicej opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11222\">issue #11222</a>:</p>\n<blockquote>\n<p>Currently, the implementation of <code>{Future,Stream}Any</code> and the conversion functions from those types to/from <code>Host{Future,Stream}</code> have a couple of major paper cuts:</p>\n<ul>\n<li>They're prone to leakage, e.g. dropping a <code>StreamAny</code> without closing it or passing it to the guest will leave the read end open, meaning any further writes will hang forever.</li>\n<li>Conversion to <code>Host{Stream,Future}</code> does no typechecking, and a type error will only be raised later when a read is matched with a write (and in some cases, even then there won't be a type error if the payload types are <code>memcpy</code>-able, e.g. <code>u8</code> vs. <code>s8</code>).</li>\n</ul>\n</blockquote>",
        "id": 528384454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752256467
    },
    {
        "content": "<p><a href=\"https://github.com/dicej\">dicej</a> added the wasm-proposal:component-model-async label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11222\">Issue #11222</a>.</p>",
        "id": 528384455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752256467
    },
    {
        "content": "<p>dicej closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11222\">issue #11222</a>:</p>\n<blockquote>\n<p>Currently, the implementation of <code>{Future,Stream}Any</code> and the conversion functions from those types to/from <code>Host{Future,Stream}</code> have a couple of major paper cuts:</p>\n<ul>\n<li>They're prone to leakage, e.g. dropping a <code>StreamAny</code> without closing it or passing it to the guest will leave the read end open, meaning any further writes will hang forever.</li>\n<li>Conversion to <code>Host{Stream,Future}</code> does no typechecking, and a type error will only be raised later when a read is matched with a write (and in some cases, even then there won't be a type error if the payload types are <code>memcpy</code>-able, e.g. <code>u8</code> vs. <code>s8</code>).</li>\n</ul>\n</blockquote>",
        "id": 534056163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755032829
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11222#issuecomment-3181027928\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11222\">issue #11222</a>:</p>\n<blockquote>\n<p>@alexcrichton This seems to be a duplicate of #11161.  I'm going to close this one in favor of that one; feel free to reopen if they're both needed.</p>\n</blockquote>",
        "id": 534056164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755032830
    },
    {
        "content": "<p>dicej reopened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11222\">issue #11222</a>:</p>\n<blockquote>\n<p>Currently, the implementation of <code>{Future,Stream}Any</code> and the conversion functions from those types to/from <code>Host{Future,Stream}</code> have a couple of major paper cuts:</p>\n<ul>\n<li>They're prone to leakage, e.g. dropping a <code>StreamAny</code> without closing it or passing it to the guest will leave the read end open, meaning any further writes will hang forever.</li>\n<li>Conversion to <code>Host{Stream,Future}</code> does no typechecking, and a type error will only be raised later when a read is matched with a write (and in some cases, even then there won't be a type error if the payload types are <code>memcpy</code>-able, e.g. <code>u8</code> vs. <code>s8</code>).</li>\n</ul>\n</blockquote>",
        "id": 534056209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755032856
    },
    {
        "content": "<p>dicej closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11222\">issue #11222</a>:</p>\n<blockquote>\n<p>Currently, the implementation of <code>{Future,Stream}Any</code> and the conversion functions from those types to/from <code>Host{Future,Stream}</code> have a couple of major paper cuts:</p>\n<ul>\n<li>They're prone to leakage, e.g. dropping a <code>StreamAny</code> without closing it or passing it to the guest will leave the read end open, meaning any further writes will hang forever.</li>\n<li>Conversion to <code>Host{Stream,Future}</code> does no typechecking, and a type error will only be raised later when a read is matched with a write (and in some cases, even then there won't be a type error if the payload types are <code>memcpy</code>-able, e.g. <code>u8</code> vs. <code>s8</code>).</li>\n</ul>\n</blockquote>",
        "id": 534056233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1755032869
    }
]