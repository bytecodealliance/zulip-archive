[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087\">PR #10087</a> from <code>cfallin:s390x-one-armed-branch</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This is a followup to #10086, this time removing the one-armed branch variant for s390x. This branch was only used as the default-target branch in the <code>br_table</code> lowering. This PR incorporates the branch into the <code>JTSequence</code> pseudo-instruction. Some care is needed to keep the <code>ProducesBool</code> abstraction; it is unwrapped into its <code>ProducesFlags</code> and the <code>JTSequence</code> becomes a <code>ConsumesFlags</code>, so the compare for the jump-table bound (for default target) is not part of the pseudoinst. (This is OK because regalloc-inserted moves never alter flags, by explicit contract; the same reason allows cmp/branch terminators.)</p>\n<p>Along the way I noticed that the comments on <code>JTSequence</code> claimed that <code>targets</code> included the default, but this is (no longer?) the case, as the targets are unwrapped by <code>jump_table_targets</code> which peels off the first (default) separately. Aside from comments, this only affected pretty-printing; codegen was correct.</p>\n<p>With this, we have no more one-armed branches; hence, this fixes #9980.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 495416663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737602888
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087\">PR #10087</a>.</p>",
        "id": 495416666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737602889
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087\">PR #10087</a>.</p>",
        "id": 495416667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737602889
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087\">PR #10087</a>.</p>",
        "id": 495417878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737603716
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087#issuecomment-2608885776\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087\">PR #10087</a>:</p>\n<blockquote>\n<p>cc @uweigand if you are available to review? Otherwise we're probably OK with the usual reviewer rotation...</p>\n</blockquote>",
        "id": 495426641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737609874
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087#pullrequestreview-2569666073\">PR review</a>:</p>\n<blockquote>\n<p>Looks generally good to me, but see inline for a couple of comments.</p>\n<p>As a longer-term improvement, I'm wondering if the whole default case handling couldn't just be done by common code using regular basic blocks and branch instructions, enabling all the normal optimization machinery?  The back-end would then only have to do the actual tablejump (simply assuming that no overflow can happen).</p>\n</blockquote>",
        "id": 495486200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737633623
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087#discussion_r1926862516\">PR review comment</a>:</p>\n<blockquote>\n<p>The generated code is slightly worse now as the shifting is done before the branch.  This probably doesn't have a very significant impact on the pipeline, but it does increase register pressure.  One alternative would be to compare the shifted value instead (assuming there are no overflow considerations).</p>\n<p>But I guess this isn't serious enough that it should prevent merging this.</p>\n</blockquote>",
        "id": 495486202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737633623
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087#discussion_r1926859873\">PR review comment</a>:</p>\n<blockquote>\n<p>Couldn't we have a <code>jt_sequence_bool</code> that implicitly decomposes the <code>ProducesBool</code> like the above?  Then we wouldn't have to introduce the <code>bool_producer</code> / <code>bool_cond</code> accessors just for this case ...</p>\n</blockquote>",
        "id": 495486203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737633623
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087\">PR #10087</a>.</p>",
        "id": 495546247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737651484
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087\">PR #10087</a>.</p>",
        "id": 495546866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737651678
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087#pullrequestreview-2570484117\">PR review</a>.</p>",
        "id": 495546881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737651682
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087#discussion_r1927342690\">PR review comment</a>:</p>\n<blockquote>\n<p>Great idea, done!</p>\n</blockquote>",
        "id": 495546884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737651682
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087#pullrequestreview-2570488413\">PR review</a>.</p>",
        "id": 495547226,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737651791
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087#discussion_r1927345171\">PR review comment</a>:</p>\n<blockquote>\n<p>Hmm, that's true -- I did the code motion without looking at the instruction semantics in detail to optimize. We can optimize in a followup if needed I suppose.</p>\n</blockquote>",
        "id": 495547228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737651792
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087#issuecomment-2610462060\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087\">PR #10087</a>:</p>\n<blockquote>\n<p>Could I bother someone for a rubber-stamp here (@uweigand's not an official approver) -- @alexcrichton or @fitzgen maybe? Thanks!</p>\n</blockquote>",
        "id": 495549373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737652527
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087#issuecomment-2610462060\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087\">PR #10087</a>:</p>\n<blockquote>\n<p>Could I bother someone for a rubber-stamp here (@uweigand's not an official approver) -- @alexcrichton or @fitzgen maybe? (Or @abrown as original reviewer?) Thanks!</p>\n</blockquote>",
        "id": 495549449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737652554
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087#pullrequestreview-2570518516\">PR review</a>.</p>",
        "id": 495549586,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737652590
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087\">PR #10087</a>.</p>",
        "id": 495550153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737652795
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10087\">PR #10087</a>.</p>",
        "id": 495554705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737654320
    }
]