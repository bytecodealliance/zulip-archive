[
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the performance label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10102\">Issue #10102</a>.</p>",
        "id": 495755581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737737696
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the pulley label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10102\">Issue #10102</a>.</p>",
        "id": 495755582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737737696
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10102\">issue #10102</a>:</p>\n<blockquote>\n<p>I wasnted to open a meta-issue about tracking the performance of Pulley. There's a few items I've identified about improving Pulley's performance which I'm unable to tackle today myself so I'm hoping to track both the meta-topic here of Pulley's performance.</p>\n<p>Overall Pulley is in a relatively good spot with respect to performance right now, but Pulley is by no means outstripping other wasm interpreters. Pulley's chief downside from what I can tell is that it's starting from a much lower level of abstraction than other interpreters, CLIF, instead of wasm. This particularly hurts memory accesses where Pulley fundamentally uses two opcodes per memory access: one for the bounds check and one for the actual load/store. In terms of interpreter performance is this pretty costly to turn the interpreter loop twice per load/store where other interpreters are likely only turning the loop once.</p>\n<p>That's not to say that Pulley is fundamentally less performant than other interpreters, however. Pulley also has the strengths of an optimizing compiler such as Cranelift to perform relatively advanced optimizations such as hoisting loads/stores out of loops. Pulley also can relatively easily add macro-ops as necessary to improve performance as well.</p>\n<p>Locally though what I've seen are performance issues with Pulley are:</p>\n<ul>\n<li>[ ] As mentioned above, loads/stores are two opcodes. This is because one opcode is \"rooted\" in the CLIF <code>trapnz</code> node for the bounds check. Another node is rooted in the load/store itself. Lowering in ISLE has no way currently to merge these two instructions together into a single trapping instruction. Improving this would need the ability to lower two terms at once (sort of?) or something like a peephole optimization pass after VCode is created.</li>\n<li>[ ] Pulley register moves are not cheap, unlike native platforms, and regalloc2's allocation decisions don't always minimize register moves. One example is <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9942\">https://github.com/bytecodealliance/wasmtime/issues/9942</a>. Other decisions I've found hard to isolate into reproducible examples, but I've seen when benchmarking <a href=\"https://github.com/wasmi-labs/wasmi-benchmarks/blob/d045a88246d3ac9b0b80b188feda54b89ca126b5/benches/res/wasm/coremark-minimal.wasm\">this binary</a> that a hot loop both starts and ends with the same <code>xmov</code>, so I'm not sure why it's there. I've tried to isolate some small examples in <code>tests/disas/pulley/coremark-1.wat</code> and <code>tests/disas/pulley/fib.wat</code> in-tree.</li>\n<li>[ ] In general Cranelift isn't the best at optimizing explicitly-bounds-checked code. Pulley can't rely on signals for catching faults meaning that all loads/stores are explicitly bounds-checked. One example of suboptimal performance here is that the bound of linear memory, stored in <code>VMContext</code>, isn't hoisted outside of a loop. The bound is reloaded each iteration of the loop despite the loop not doing anything that can mutate the bound (such as calling another function or writing to VMContext). The reason for this is that the base pointer if memory is marked (correctly) as <code>readonly</code> but the bound is not <code>readonly</code> (also correctly).</li>\n<li>[ ] It's not clear what to do with the interpreter loop in terms of the \"match loop\" vs the \"tail loop\". This is additionally tracked in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9995\">https://github.com/bytecodealliance/wasmtime/issues/9995</a> and conventional wisdom is that the \"tail loop\" should be faster but that doesn't seem to be true for all benchmarks. This probably needs more investigation as I'm not sure what's going on myself.</li>\n<li>[ ] One possible vector for optimization is opcode decoding in the interpreter. Currently all immediates are loaded one-by-one from memory but it should be possible to load multiple at once by issuing a pointer-size-load at the start of an instruction. This in theory reduces the number of loads that the native CPU has to pipeline while putting more work on shifts/bitops on the ALU. The downside of this approach is that we have to be more careful as it's possible to read past the end of a function when decoding it. Initial benchmarking additionally showed that this wasn't a speedup on x64. I've got a branch implementing this but it's not in a clean enough state to land this in-tree.</li>\n</ul>\n<p>I plan on adding more items here over time as I see them, and/or spinning off these to sub-issues as appropriate.</p>\n</blockquote>",
        "id": 495755587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737737698
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10102#issuecomment-2612981766\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10102\">issue #10102</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"pulley\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: pulley</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 495755764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737737752
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10102#issuecomment-2613591627\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10102\">issue #10102</a>:</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>As mentioned above, loads/stores are two opcodes. This is because one opcode is \"rooted\" in the CLIF <code>trapnz</code> node for the bounds check. Another node is rooted in the load/store itself. Lowering in ISLE has no way currently to merge these two instructions together into a single trapping instruction. Improving this would need the ability to lower two terms at once (sort of?) or something like a peephole optimization pass after VCode is created.</li>\n</ul>\n</blockquote>\n<p>Alternatively, rather than making instruction selection support lowering two root instructions at once (which is hard), we could try something like this:</p>\n<ul>\n<li>we add to Pulley a <code>bounds_checked_{load,store} dest, addr, bound</code> family of instructions (exact details to vary with what we actually need) that are defined to trap when the address is out of bounds</li>\n<li>\n<p>we enable spectre mitigations, or something new but not \"spectre\" that uses selects instead of trap[n]zs for bounds checks, so that we see the bounds check in the data flow into the memory operation, rather than it being a separate <code>trap[n]z</code>, eg:<br>\n<code>\n  v0 = select is_in_bounds, addr, zero\n  v1 = load v0\n  </code></p>\n</li>\n<li>\n<p>we add lowering rules to pattern match on that data flow going into a load/store and emit <code>bounds_checked_{load,store}</code> instructions when possible</p>\n<ul>\n<li>bonus: figure out how to avoid re-adding bounds checks to every load/store during lowering when we already deduped them in the mid-end, so that the first memory operation lowers to a <code>bounds_checked_*</code> operation but subsequent ones lower to raw loads/stores<br>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 495810004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737761556
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10102#issuecomment-2613626370\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10102\">issue #10102</a>:</p>\n<blockquote>\n<p>cc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10111\">https://github.com/bytecodealliance/wasmtime/issues/10111</a>, since I believe we've seen some pulley benchmarks where a conditional trap was deduplicated within a loop body, but not hoisted up above the loop for a combo of reasons (see that issue for more discussion).</p>\n</blockquote>",
        "id": 495812726,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737763371
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10102#issuecomment-2616559377\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10102\">issue #10102</a>:</p>\n<blockquote>\n<p>For the spectre ops, I think that could work yeah. We currently discard all trap codes in <code>MemFlags</code> on loads/stores but that's mainly because there are none today. That could be used to hook into Pully where we can semantically have instructions that are \"trap if addr==0 otherwise do the load/stores\". We could then move all macro-ops like <code>*_g32</code> addressing to these semantics and fold the spectre-check + trapping-load into the new <code>*_g32</code> ops. </p>\n<p>I'll see if I can't play around with that this week.</p>\n</blockquote>",
        "id": 496185288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738001770
    }
]