[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>.</p>",
        "id": 501307943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740263441
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>.</p>",
        "id": 501307945,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740263441
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a> from <code>alexcrichton:assembler-isle-refactor</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit is spawned out of discussion between me and Andrew in conjunction with the thoughts in #10238. The goal here is to pave a way forward for various kinds of instructions in the future as well as give access to more instructions today we already have formats for.</p>\n<p>The major changes in this commit are:</p>\n<ul>\n<li><code>Assembler*</code> types are gone from ISLE, except for immediates. Instead types like <code>Gpr</code> and <code>GprMem</code> are used instead.</li>\n<li>Rust-defined constructors for each instruction return <code>MInst</code> instead of implicitly performing an <code>emit</code> operation.</li>\n<li>Instructions with a read/write <code>GprMem</code> operand now generate two ISLE constructors instead of one. One constructor takes <code>Gpr</code> and returns <code>Gpr</code>, the other takes <code>Amode</code> and returns <code>SideEffectNoResult</code>.</li>\n<li>Generated ISLE constructors now match the SSA-like form of VCode/ISLE we already have. For example <code>AssemblerReadWriteGpr</code> is never used as a result, it's just <code>Gpr</code> instead. Conversions happen in Rust during construction of assembler instructions.</li>\n</ul>\n<p>Using this new support various <code>x64_*_mem</code> instructions have now moved over to the new assembler and using that instead. Looking to the future this is intended to make it easier to generate constructors that return <code>ProducesFlags</code> or <code>ConsumesFlags</code> such as <code>x64_adc</code> and friends. This will require more refactoring to enable this but the goal is to move roughly in such a direction.</p>\n<p>I've attempted to make this abstract enough that it'll be relatively easily extensible in the future to more ISLE constructors with minimal changes, so some abstractions here may not be fully used just yet but the hope is that they will be in the near future.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 501307946,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740263442
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2676430759\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<p>I'll also note that this creates a lot of conflicts with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10273\">https://github.com/bytecodealliance/wasmtime/pull/10273</a>, and I'm happy to have that go through first and rebase around that, or also have this go in first and I can help that PR rebase around this. Either way works for me</p>\n</blockquote>",
        "id": 501307994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740263486
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2676452989\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 501313329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740267879
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2676535183\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<p>An example of extending this is <a href=\"https://github.com/alexcrichton/wasmtime/commit/ea299c4bc6bc05cc7662f5a80903a350a5a22751\">https://github.com/alexcrichton/wasmtime/commit/ea299c4bc6bc05cc7662f5a80903a350a5a22751</a> where I've updated the <code>add</code>/<code>adc</code> instructions to using <code>ProducesFlags</code> and <code>ConsumesFlags</code> in ISLE. That enabled removing more adc/add constructors using the now-old <code>MInst</code> variants. It generates a lot of constructors that we don't actually use today, but they're all there and much more easily accessible than they are today.</p>\n</blockquote>",
        "id": 501329020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740280647
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>.</p>",
        "id": 501338970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740289739
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2676637734\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<p>Adding myself as a reviewer here -- want to take a look, excited to see progress on untangling some of the layers of abstraction.</p>\n</blockquote>",
        "id": 501339020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740289786
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2677022983\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<p>Some before/after of ISLE constructors for this PR are:</p>\n<p><strong>before</strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">AssemblerReadWriteGprMem</span><span class=\"w\"> </span><span class=\"n\">AssemblerImm8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">AssemblerReadWriteGprMem</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">AssemblerReadWriteGprMem</span><span class=\"w\"> </span><span class=\"n\">AssemblerReadGpr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">AssemblerReadWriteGprMem</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">AssemblerReadWriteGpr</span><span class=\"w\"> </span><span class=\"n\">AssemblerReadGprMem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">AssemblerReadWriteGpr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm</span><span class=\"p\">)</span>\n</code></pre></div>\n<p><strong>after</strong></p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi_raw</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"n\">AssemblerImm8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">MInstAndGprMem</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi_raw</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi_raw</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi_mem</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Amode</span><span class=\"w\"> </span><span class=\"n\">AssemblerImm8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">SideEffectNoResult</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_mi_mem</span><span class=\"w\"> </span><span class=\"n\">rm8</span><span class=\"w\"> </span><span class=\"n\">imm8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">side_effect_minst_and_gpr_mem</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_mi_raw</span><span class=\"w\"> </span><span class=\"n\">rm8</span><span class=\"w\"> </span><span class=\"n\">imm8</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">AssemblerImm8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_mi</span><span class=\"w\"> </span><span class=\"n\">rm8</span><span class=\"w\"> </span><span class=\"n\">imm8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_minst_and_gpr_mem</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_mi_raw</span><span class=\"w\"> </span><span class=\"n\">rm8</span><span class=\"w\"> </span><span class=\"n\">imm8</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr_raw</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">MInstAndGprMem</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr_raw</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr_raw</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr_mem</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Amode</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">SideEffectNoResult</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_mr_mem</span><span class=\"w\"> </span><span class=\"n\">rm8</span><span class=\"w\"> </span><span class=\"n\">r8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">side_effect_minst_and_gpr_mem</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_mr_raw</span><span class=\"w\"> </span><span class=\"n\">rm8</span><span class=\"w\"> </span><span class=\"n\">r8</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_mr</span><span class=\"w\"> </span><span class=\"n\">rm8</span><span class=\"w\"> </span><span class=\"n\">r8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_minst_and_gpr_mem</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_mr_raw</span><span class=\"w\"> </span><span class=\"n\">rm8</span><span class=\"w\"> </span><span class=\"n\">r8</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm_raw</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">MInstAndGpr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm_raw</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm_raw</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_rm</span><span class=\"w\"> </span><span class=\"n\">r8</span><span class=\"w\"> </span><span class=\"n\">rm8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_minst_and_gpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_rm_raw</span><span class=\"w\"> </span><span class=\"n\">r8</span><span class=\"w\"> </span><span class=\"n\">rm8</span><span class=\"p\">)))</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 501397591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740334562
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2679081604\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<p>Ok, I'll take a look at this today. After we talked, I took the approach a few steps further so I'll try to reconcile that with this.</p>\n</blockquote>",
        "id": 501597040,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740416069
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2679854538\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<p>Ok, as a point of comparison, here is where I ended up for the same instructions <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2677022983\">above</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">emit_x64_addb_mi</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_x64_addb_mi</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_mi</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_inst</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">gpr</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_gpr</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">gpr</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">emit_x64_addb_mr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_x64_addb_mr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_mr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_inst</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">gpr</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_gpr</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">gpr</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">emit_x64_addb_rm</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_x64_addb_rm</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_rm</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_inst</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">gpr</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_gpr</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">gpr</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>What's going on in this version is that (1) the <code>x64_addb_*</code> ISLE now returns an <code>AssemblerOutputs</code> instead of actually emitting the instruction; the emission part is left to (2) some <code>emit_x64_addb_*</code> ISLE which we generate right beside it. Why? I was a bit concerned that if we keep on generating new variants of these things (<code>_mem</code>, <code>_flags</code>, etc.) we end up muddying the waters; instead, we can use the \"return an inst\" version in (1) to fit into all the existing conventions ISLE defines: <code>ProducesFlags</code>, <code>ConsumesFlags</code>, <code>SideEffect</code>, etc.</p>\n<p>What is <code>AssemblerOutputs</code>, you ask?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">AssemblerOutputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">enum</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">WritesMemory</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">WritesGpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">gpr</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">))</span>\n<span class=\"p\">))</span>\n</code></pre></div>\n<p>I was thinking that this core enum can be matched on or auto-converted (<code>AssemblerOutputs.WritesMemory</code> --&gt; <code>SideEffect</code>) into the existing compiler but don't perpetuate all the <code>*Flags</code> and <code>SideEffect</code> logic in the generator. If we were to change any of those conventions, I was hoping this approach would reduce the blast radius. Thoughts?</p>\n</blockquote>",
        "id": 501665314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740437317
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2679854538\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<p>Ok, as a point of comparison, here is where I ended up for the same instructions <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2677022983\">above</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">emit_x64_addb_mi</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_x64_addb_mi</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_mi</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_inst</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">gpr</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_gpr</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">gpr</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">emit_x64_addb_mr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_x64_addb_mr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_mr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_inst</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">gpr</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_gpr</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">gpr</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">emit_x64_addb_rm</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_x64_addb_rm</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_rm</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_inst</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">gpr</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_gpr</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">gpr</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>What's going on in this version is that (1) the <code>x64_addb_*</code> ISLE now returns an <code>AssemblerOutputs</code> instead of actually emitting the instruction; the emission part is left to (2) some <code>emit_x64_addb_*</code> ISLE which we generate right beside it. Why? I was a bit concerned that if we keep on generating new variants of these things (<code>_mem</code>, <code>_flags</code>, etc.) we end up muddying the waters; instead, we can use the \"return an inst\" version in (1) to fit into all the existing conventions ISLE defines: <code>ProducesFlags</code>, <code>ConsumesFlags</code>, <code>SideEffect</code>, etc.</p>\n<p>What is <code>AssemblerOutputs</code>, you ask?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">AssemblerOutputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">enum</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">WritesMemory</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">WritesGpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">gpr</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">))</span>\n<span class=\"p\">))</span>\n</code></pre></div>\n<p>I was thinking that this core enum can be matched on or auto-converted (<code>AssemblerOutputs.WritesMemory</code> --&gt; <code>SideEffect</code>) into the existing compiler but don't perpetuate all the <code>*Flags</code> and <code>SideEffect</code> logic in the generator. If we were to change any of those conventions, I was hoping this approach would reduce the blast radius. Thoughts?</p>\n<p>[edit: I know that that up above we don't want some of those <code>emit_*</code> ISLE functions to return a <code>Gpr</code>... my branch is still a work in progress so that is not all the way there.]</p>\n</blockquote>",
        "id": 501665907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740437486
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2679854538\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<p>Ok, as a point of comparison, here is where I ended up for the same instructions <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2677022983\">above</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mi</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">emit_x64_addb_mi</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_x64_addb_mi</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_mi</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_inst</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">gpr</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_gpr</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">gpr</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr</span><span class=\"w\"> </span><span class=\"n\">x64_addb_mr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">emit_x64_addb_mr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_x64_addb_mr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_mr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_inst</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">gpr</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_gpr</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">gpr</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm</span><span class=\"w\"> </span><span class=\"n\">x64_addb_rm</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">emit_x64_addb_rm</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_x64_addb_rm</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">AssemblerOutputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_addb_rm</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"n\">GprMem</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_inst</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">gpr</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">asm_out_gpr</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">gpr</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>What's going on in this version is that (1) the <code>x64_addb_*</code> ISLE now returns an <code>AssemblerOutputs</code> instead of actually emitting the instruction; the emission part is left to (2) some <code>emit_x64_addb_*</code> ISLE which we generate right beside it. Why? I was a bit concerned that if we keep on generating new variants of these things (<code>_mem</code>, <code>_flags</code>, etc.) we end up muddying the waters; instead, we can use the \"return an inst\" version in (1) to fit into all the existing conventions ISLE defines: <code>ProducesFlags</code>, <code>ConsumesFlags</code>, <code>SideEffect</code>, etc.</p>\n<p>What is <code>AssemblerOutputs</code>, you ask?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">AssemblerOutputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">enum</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">WritesMemory</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">WritesGpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">gpr</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">))</span>\n<span class=\"p\">))</span>\n</code></pre></div>\n<p>I was thinking that this core enum can be matched on or auto-converted (<code>AssemblerOutputs.WritesMemory</code> --&gt; <code>SideEffect</code>) into the existing compiler but don't perpetuate all the <code>*Flags</code> and <code>SideEffect</code> logic in the generator. If we were to change any of those conventions, I was hoping this approach would reduce the blast radius. Thoughts?</p>\n<p>[edit: I know that up above we don't want some of those <code>emit_*</code> ISLE functions to return a <code>Gpr</code>... my branch is still a work in progress so that is not all the way there.]</p>\n</blockquote>",
        "id": 501665935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740437497
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2679875124\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<p>Another thought: at some point soon we could move all the code that generates ISLE out of <code>cranelift-assembler-x64-meta</code> and into <code>cranelift-codegen-meta</code>. </p>\n</blockquote>",
        "id": 501667833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740438054
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2680027802\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<p>Two thoughts to add:</p>\n<ul>\n<li>In general it has been bothering me a bit that we have separate <code>Assembler*</code> types at all. I think a lot of the distaste for the binding code currently comes from the fact that we have to do these translations. I really like that this PR eliminates <code>AssemblerGpr</code> and friends at the <code>inst.isle</code> layer; the immediates are still there, but we can hopefully remove those in a future change. The ideal IMHO is that we actually reuse types directly -- so rather than define our own <code>GprMem</code>/<code>GprMemImm</code> on the Cranelift side, we use the assembler types throughout (and because we plug the regalloc2 types into the assembler types, everything will be compatible when we generate regalloc traversal code).</li>\n<li>I'm finding myself with a distaste for the \"return the instruction as an object\" APIs in general, because of the additional plumbing that this creates, though I understand the reason this side-quest started (<code>ProducesFlags</code>/<code>ConsumesFlags</code> constructors). I wonder whether we could instead avoid that extra plumbing in ISLE, and the definition of <code>emit_*</code> helpers and <code>MInstAnd*</code> auxiliary types, by instead pushing the <code>ProducesFlags</code> and <code>ConsumesFlags</code> types down into the generated ISLE; so we have the lowest-level constructors that either (i) emit the inst and return e.g. a <code>Gpr</code> (and that's it, no more types needed), or (ii) return a <code>ProducesFlags</code>/<code>ConsumesFlags</code> and we pass these to <code>with_flags</code>, which does the emission and returns <code>Gpr</code> / pair of <code>Gpr</code>s / whatever.</li>\n</ul>\n<p>Basically I'm hoping for simplicity via reduction in layers of abstraction as far as possible without losing type safety; that was the original state of play, the flags abstraction added a bit but it was seen as necessary, now the separate assembler layer whose types are being kept separate (rather than propagated through Cranelift) is ratcheting the boilerplate up past a critical threshold IMHO. Curious to hear your thoughts.</p>\n</blockquote>",
        "id": 501682064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740443494
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2680317668\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<p>@abrown </p>\n<p>I think you and I basically converged on the same idea. In this PR the <code>*_raw</code> constructors return either <code>MInst</code> (your <code>WritesMemory</code> variant), <code>MInstAndGpr</code> (your <code>WritesGpr</code> variant), or <code>MInstAndGprMem</code> (same as your <code>AssemblerOutputs</code> type). The \"middle parts\" of then converting from the \"raw\" thing to the output thing is basically inline ISLE for you vs helper functions for you. Basically I think we're thinking the same thing, but the main difference for me is that no constructor takes <code>GprMem</code> as a first argument, but instead splits that into two constructors -- one taking <code>Gpr</code> and one taking <code>Amode</code>.</p>\n<p>Also I can confirm that with something like <code>AssemblerOutputs</code> (or the more specific types I have in this PR) there need not be any changes to handle <code>{Produces,Consumes}Flags</code>. The <a href=\"https://github.com/alexcrichton/wasmtime/commit/ea299c4bc6bc05cc7662f5a80903a350a5a22751\">commit above</a> has no changes to <code>*_raw</code> and enables new flags-aware constructors.</p>\n<hr>\n<p>@cfallin </p>\n<blockquote>\n<p>The ideal IMHO is that we actually reuse types directly -- so rather than define our own GprMem/GprMemImm on the Cranelift side, we use the assembler types throughout</p>\n</blockquote>\n<p><span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span> from me on this, agreed that should be the end state.</p>\n<blockquote>\n<p>so we have the lowest-level constructors that either (i) emit the inst and return e.g. a Gpr (and that's it, no more types needed), or (ii) return a ProducesFlags/ConsumesFlags and we pass these to with_flags, which does the emission and returns Gpr / pair of Gprs / whatever.</p>\n</blockquote>\n<p>To me this is what it comes down to, the question of \"what is the lowest level thing?\" As-is today it's not possible to create <code>{Produces,Consumes}Flags</code> in ISLE because the <code>emit</code> happens in the Rust FFI layer. With your suggestion I think it would effectively double-the FFI layer by having one \"raw\" function return a <code>Gpr</code> and another return an <code>MInst</code>, which is something I was trying to avoid. In playing around with the assembler/generated code the FFI layer is the hardest to debug and reason about because the compiler doesn't show errors in the generated code, only on the <code>asm::generate!()</code> invocation. I've thought a bit about how to fix this and kept coming up blank.</p>\n<p>In the end my goal here was to have the \"raw\" constructor be as general-purpose as possible, aka the \"narrow waist\" that all ISLE abstractions would be built on. It's more-or-less @abrown's <code>AssemblerOutputs</code> suggestion and personally I like that design over what I have here. It's just one type to think about and then ISLE constructors figure out what to do with it. The forseeable changes I can think of to <code>AssemblerOutputs</code> are (a) a variant returning two <code>Gpr</code> values for <code>mul</code> and (b) adding a variant returning an <code>Xmm</code> register instead of a <code>Gpr</code>. </p>\n<hr>\n<p>Overall I feel like we're all basically in agreement about how to design this -- a \"raw\" thing with fancy ISLE abstractions on top -- and are more-or-less trying to figure out what to paint the bikeshed. What I might concretely propose is to hand-write this in ISLE:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">AssemblerOutputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">enum</span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">stores</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instructions</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">modify</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">traps</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">etc</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">SideEffect</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">anything</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">gpr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">including</span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"s\">\"mr\"</span><span class=\"w\"> </span><span class=\"n\">variants</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">Gpr</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">RetGpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">gpr</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">imul</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">mul</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">div</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">etc</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">RetTwoGpr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">gpr1</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">gpr2</span><span class=\"w\"> </span><span class=\"n\">Gpr</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">SSE</span><span class=\"o\">/</span><span class=\"n\">AVX</span><span class=\"o\">/</span><span class=\"n\">etc</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">RetXmm</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">MInst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">gpr</span><span class=\"w\"> </span><span class=\"n\">Xmm</span><span class=\"p\">))</span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">maybe</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RetXmm2</span><span class=\"err\">`</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">Unsure</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">those</span>\n<span class=\"p\">))</span>\n</code></pre></div>\n<p>The FFI layer in Rust would always return an <code>AssemblerOutputs</code> from each and every method. Most raw constructors would statically return just one variant, for example \"RM\" encodings would always return <code>RetGpr</code>. The \"MR\" variants, however, would dynamically return either <code>SideEffect</code> or <code>RetGpr</code> depending on the input. The ISLE constructor would know which it passed in and there'd be one constructor for each (e.g. <code>x64_addb_mi</code> and <code>x64_addb_mi_mem</code> above).</p>\n<p>To me this strikes a nice balance of:</p>\n<ul>\n<li>Generated FFI code in Rust is \"simple\" in the sense that everything is a round peg in a round hole. There's one constructor per instruction as well so no need to deal with a matrix of FFI constructors per instruction.</li>\n<li>ISLE types get to stay as ISLE types in constructors. No <code>Assembler*</code> once we transition immediates. Everything stays as <code>Gpr</code>, <code>GprMem</code>, etc.</li>\n<li>Dealing with constructs like <code>{Produces,Consumes}Flags</code> happens exclusively in ISLE.</li>\n<li>Each instruction gets an array of constructors for the various \"type signatures\" it can take -- e.g. return-gpr, read-modify-write memory, return-gpr-with-flags, read-modify-write memory-with-flags, etc.</li>\n</ul>\n<p>I think it would also make sense to define all the helper functions that converts <code>AssemblerOutputs</code> to ctor outputs (e.g. <code>AssemblerOutputs =&gt; Gpr</code>) as hand-written functions in ISLE. These would be just below the <code>AssemblerOutputs</code> definition which would be easy to skim and would be relatively easily connect-able to the machine-generated instructions too.</p>\n<hr>\n<p>That's a lot of words, but WDYT?</p>\n</blockquote>",
        "id": 501703416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740453493
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2680423517\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<blockquote>\n<p>To me this is what it comes down to, the question of \"what is the lowest level thing?\" As-is today it's not possible to create {Produces,Consumes}Flags in ISLE because the emit happens in the Rust FFI layer. With your suggestion I think it would effectively double-the FFI layer by having one \"raw\" function return a Gpr and another return an MInst, which is something I was trying to avoid.</p>\n</blockquote>\n<p>Not quite; I'm imaging that the external Rust constructor for (e.g.) a variant of <code>add</code> returns <em>only</em> a <code>ProducesFlags</code> -- that's the fundamental thing -- and one could either use that in a <code>with_flags</code> or (via an automatic conversion) get a <code>Gpr</code> by pairing with a null <code>ConsumesFlags</code>. (call it something like <code>(decl ignore_flags (ProducesFlags) Gpr)</code> maybe?)</p>\n<p>Some of this goes back to early ISLE design philosophy, but: my intent with the initial design was to hew as close to a \"value semantics\" view of the program operators and instructions as possible, because this is what enables reasoning about expression equivalence, makes verification possible, etc. From that point of view, it makes sense that some instruction that is a binary operator (i) takes two registers and (ii) returns a register, just like its CLIF cousins. The bit of lowering logic that bridges the gap is hiding the emit in the constructor and returning the value. The magic of data dependencies means that it is physically impossible to call the ctors in an order that is not a valid toposort of operations, so emitting-when-constructed is always valid.</p>\n<p>We started carrying <code>MInst</code>s around instead when we invented the <code>ProducesFlags</code>/<code>ConsumesFlags</code> abstraction; that was the first time that we wanted to have some other way of controlling emission time, to ensure flags aren't clobbered. But we carefully wrapped the insts inside another enum and provided a combinator (<code>with_flags</code>) that itself hid the emission inside, so we were back to a world of value semantics with ensured ordering in the end.</p>\n<p>This is part of the reason I'm not so sure that \"return the <code>MInst</code>\" is more fundamental: it's exposing more of the mechanism, certainly, but it's moving to a world where one has access to sharp tools that can be combined in the wrong way (emitting out of order), and where one has more pieces that one has to put together, more complex overall.</p>\n<p>So if <em>possible</em> I'd prefer to bias us back toward implicit emission everywhere, and I do think it's possible here, as described above -- the fact that the instruction produces flags is fundamental, so that one is the one that we define; and an implicit converter can throw away the flags if we don't care. Thoughts?</p>\n</blockquote>",
        "id": 501710390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740457455
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2682730698\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<p>Personally I feel that the principles you're thinking of make sense, but I don't see the need to apply them to generated code -- instead only to the surface area of the generated code. Code generating code to me is always a hairy problem and having a precise return value like <code>ProducesFlags</code> for all instructions to me will be a bit sisyphean. For example:</p>\n<ul>\n<li>\"MR\" instructions where the destination is <code>GprMem</code> need two constructors somehow still. If it's two \"raw\"  constructors then that's twice the FFI code to generate. If it's one \"raw\" constructor then that signature can be a footgun because it's dynamic whether the returned <code>ProducesFlags</code> has a gpr in it or not.</li>\n<li>Right now <code>ProducesFlags</code> stores a <code>Reg</code>, not a <code>Gpr</code> or <code>Xmm</code>. Making this more type-safe would require duplicating all of <code>ProducesFlags</code>.</li>\n<li>Personally I find <code>ProducesFlags</code> and <code>ConsumesFlags</code> pretty clunky to work with. Something like <code>(rule (produces_flags_get_reg (ProducesFlags.ProducesFlagsReturnsResultWithConsumer _ reg))</code> is the entire width of the screen to match a single variant. I find it confusing and a footgun which exact variant of <code>ProducesFlags</code> and <code>ConsumesFlags</code> is produced for various instructions. The <code>with_flags_*</code> methods are <a href=\"https://github.com/bytecodealliance/wasmtime/blob/898b0feb732fdf485a0f904074347c63d3a9ae2a/cranelift/codegen/src/prelude_lower.isle#L548-L931\">almost 500 lines of ISLE</a> and I find myself adding new rules there in an ad-hoc manner whenever something seems to trip a \"missing lowering rule\" panic.</li>\n</ul>\n<p>Basically while I agree with where you're coming from I don't think that <code>ProducesFlags</code> and <code>ConsumesFlags</code> is a great abstraction to build on. I'm also not sure what the loss is by having these <code>*_raw</code> constructors return a \"thing\" which is a bit non-standard since they're never manually used anyway. In terms of integrating with verification it seems like the \"leaves\" of verification would be the typed instruction lowerings rather than the <code>*_raw</code> lowerings, which are also all auto-generated.</p>\n</blockquote>",
        "id": 501864344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740504215
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2682764278\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<p>That's fair enough; I'm not deeply wedded to any of the suggestions, and we should do what works before we try to contort too far toward an ideal. I do agree that if we could find a better abstraction for working with flags, that might be welcome. (I'll let this percolate through my slightly creaky neurons some more but I wonder if it might be simpler to go back to a world of explicitly represented flags values, track which flags are current in the lowering infra, and panic if an instruction sequence is emitted that clobbers the expected flags.) Anyway -- you both have been iterating on this in a more hands-on way so I'll trust your instincts here!</p>\n</blockquote>",
        "id": 501865950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740504710
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2682942985\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<p>I just want to say that this discussion has been very helpful to change my mind about a couple of things:</p>\n<ul>\n<li>previously I didn't like splitting out the different <code>x64_...</code> and <code>x64_..._mem</code> constructors but @alexcrichton is right in that we need this kind of thing; that's what we already do by convention in <code>inst.isle</code> anyways!</li>\n<li>since each constructor would return a different type, we're only a step away then from generating code to return the other types like <code>{Produces|Consumes}Flags</code>; maybe for now we just deal with them exclusively in ISLE like Alex mentions but I'm not as opposed to generating more integration-layer constructors if we have to; agreed with both of you that we want correct-by-construction but <code>{Produces|Consumes}Flags</code> feels a bit clunky</li>\n<li>previously I had been trying to avoid injecting \"weird\" ISLE conventions into the assembler but I'm not worried about this any more: this integration layer we're talking about _should_ know all about ISLE, <code>cranelift-codegen</code>, our conventional types, etc., and, by moving this layer into <code>cranelift-codegen-meta</code>, it isn't \"leaking\" into the assembler (this is what was bugging me).</li>\n<li>previously, in keeping things separate, I brought in all the <code>Assembler*</code> types; I'm on board now that these should go away and, actually, my branch gets rid of all the <code>AssemblerImm*</code> types, replacing them with Rust integer types (I'll break that into a separate PR)</li>\n</ul>\n<p>What do we do next? I like Alex's plan a few posts up; how much more needs to change to get there from this PR?</p>\n</blockquote>",
        "id": 501883832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740508425
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2686062084\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>:</p>\n<blockquote>\n<p>To put the plan down in writing (and make sure I didn't miss anything) the consensus from today's Cranelift meeting was:</p>\n<ul>\n<li>I'm handing this PR to @abrown for further work</li>\n<li>The strategy at the end of <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2680317668\">https://github.com/bytecodealliance/wasmtime/pull/10276#issuecomment-2680317668</a> is the way to go</li>\n<li>Improving the \"clunkiness\" of produces/consumes flags is deferred to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10298\">https://github.com/bytecodealliance/wasmtime/issues/10298</a></li>\n</ul>\n</blockquote>",
        "id": 502133075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740599969
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>.</p>",
        "id": 502164668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740612681
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>.</p>",
        "id": 502164913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740612795
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#pullrequestreview-2646227200\">PR review</a>:</p>\n<blockquote>\n<p>This looks reasonable, thanks!</p>\n</blockquote>",
        "id": 502168707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740614771
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#discussion_r1972603333\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we add an example here, just to see at a glance what the constructors look like? It's a little hard to pick out from the format string below otherwise.</p>\n</blockquote>",
        "id": 502168708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740614771
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#pullrequestreview-2646413111\">PR review</a>.</p>",
        "id": 502183463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740623222
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#discussion_r1972728310\">PR review comment</a>:</p>\n<blockquote>\n<p>Like inline in the code comment or in this PR?</p>\n</blockquote>",
        "id": 502183464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740623222
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#pullrequestreview-2646414523\">PR review</a>.</p>",
        "id": 502183638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740623312
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#discussion_r1972729336\">PR review comment</a>:</p>\n<blockquote>\n<p>In the code comment, yep, similar to how elsewhere there are some examples of <code>(decl ...)</code> and the like.</p>\n</blockquote>",
        "id": 502183639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740623312
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#pullrequestreview-2648660297\">PR review</a>.</p>",
        "id": 502347953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740679956
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276#discussion_r1974107346\">PR review comment</a>:</p>\n<blockquote>\n<p>Now that I'm looking at this, there are some examples up at the top of this function already like we've done elsewhere... But they are a bit sparse &mdash; I'll add a bit more detail.</p>\n</blockquote>",
        "id": 502347954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740679956
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>.</p>",
        "id": 502349490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740680532
    },
    {
        "content": "<p>abrown has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>.</p>",
        "id": 502349511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740680538
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10276\">PR #10276</a>.</p>",
        "id": 502356417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740682682
    }
]