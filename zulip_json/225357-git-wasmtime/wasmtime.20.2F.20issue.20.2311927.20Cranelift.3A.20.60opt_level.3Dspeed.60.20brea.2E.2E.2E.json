[
    {
        "content": "<p>emturner opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11927\">issue #11927</a>:</p>\n<blockquote>\n<p>When compiling with <code>opt_level=speed</code>, <code>sdiv i64::MIN, i64::MIN</code> returns <code>-1</code> instead of <code>1</code>.</p>\n<p>The same occurs with <code>opt_level=speed_and_size</code>.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">sdiv_by_const_neg_i64min_i64</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sdiv</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">sdiv_by_const_neg_i64min_i64</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>add the above in <code>cranelift/filetests/filetests/runtests/sdiv-broken.clif</code></li>\n<li><code>cd cranelift</code></li>\n<li><code>cargo +1.88.0 run -- test filetests/filetests/runtests/sdiv-broken.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The test should pass. <code>i64::MIN / i64::MIN == 1</code>.</p>\n<h3>Actual Results</h3>\n<p>We get an incorrect result: <code>i64::MIN / i64::MIN == -1</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: f678260bb3b2fa07ae10737f581b2d395d3349da is the first commit that causes the issue.</p>\n<p>All cranelift versions from then on (1.22.0 -&gt; current @ 1.25.1) are affected.</p>\n<p>Operating system: Guix Linux @ 6.16.7,   Ubuntu 24.04.3 LTS. Mac M2 possibly also affected (will confirm).</p>\n<p>Architecture: AMD64, x86_64</p>\n<h3>Extra Info</h3>\n<p>As far as I can tell, the algorithm for the 'const denominator division' is correct. Indeed the proptests are correct. There appears to be some issue in how the constants are all inligned from the <code>smulhi</code> and the various shifts in the fast algorithm. All other values appear to work correctly.<br>\n</p>\n</blockquote>",
        "id": 546730101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761238870
    },
    {
        "content": "<p><a href=\"https://github.com/emturner\">emturner</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11927\">Issue #11927</a>.</p>",
        "id": 546730102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761238870
    },
    {
        "content": "<p><a href=\"https://github.com/emturner\">emturner</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11927\">Issue #11927</a>.</p>",
        "id": 546730104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761238871
    },
    {
        "content": "<p>emturner edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11927\">issue #11927</a>:</p>\n<blockquote>\n<p>When compiling with <code>opt_level=speed</code>, <code>sdiv i64::MIN, i64::MIN</code> returns <code>-1</code> instead of <code>1</code>.</p>\n<p>The same occurs with <code>opt_level=speed_and_size</code>.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">sdiv_by_const_neg_i64min_i64</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sdiv</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">sdiv_by_const_neg_i64min_i64</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>add the above in <code>cranelift/filetests/filetests/runtests/sdiv-broken.clif</code></li>\n<li><code>cd cranelift</code></li>\n<li><code>cargo +1.88.0 run -- test filetests/filetests/runtests/sdiv-broken.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The test should pass. <code>i64::MIN / i64::MIN == 1</code>.</p>\n<h3>Actual Results</h3>\n<p>We get an incorrect result: <code>i64::MIN / i64::MIN == -1</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: f678260bb3b2fa07ae10737f581b2d395d3349da is the first commit that causes the issue.</p>\n<p>All cranelift versions from then on (1.22.0 -&gt; current @ 1.25.1) are affected.</p>\n<p>Operating system: Guix Linux @ 6.16.7,   Ubuntu 24.04.3 LTS. Mac M2 possibly also affected (will confirm).</p>\n<p>Architecture: AMD64, x86_64</p>\n<h3>Extra Info</h3>\n<p>As far as I can tell, the algorithm for the 'const denominator division' is correct. Indeed the proptests cover this case. </p>\n<p>My best guess is that there could be some issue in how the constants are all inlined from the <code>smulhi</code> and the various other shifts in the fast algorithm. All other values appear to work correctly.<br>\n</p>\n</blockquote>",
        "id": 546737548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761241412
    },
    {
        "content": "<p>emturner <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11927#issuecomment-3442053987\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11927\">issue #11927</a>:</p>\n<blockquote>\n<p>This also happens with <code>i32</code> signed division.</p>\n</blockquote>",
        "id": 546849237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761297506
    },
    {
        "content": "<p>emturner edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11927\">issue #11927</a>:</p>\n<blockquote>\n<p>When compiling with <code>opt_level=speed</code>, <code>sdiv i64::MIN, i64::MIN</code> returns <code>-1</code> instead of <code>1</code>.</p>\n<p>The same occurs with <code>opt_level=speed_and_size</code>.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">sdiv_by_const_neg_i64min_i64</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sdiv</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">sdiv_by_const_neg_i64min_i64</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>add the above in <code>cranelift/filetests/filetests/runtests/sdiv-broken.clif</code></li>\n<li><code>cd cranelift</code></li>\n<li><code>cargo +1.88.0 run -- test filetests/filetests/runtests/sdiv-broken.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The test should pass. <code>i64::MIN / i64::MIN == 1</code>.</p>\n<h3>Actual Results</h3>\n<p>We get an incorrect result: <code>i64::MIN / i64::MIN == -1</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: f678260bb3b2fa07ae10737f581b2d395d3349da is the first commit that causes the issue.</p>\n<p>All cranelift versions from then on (1.22.0 -&gt; current @ 1.25.1) are affected.</p>\n<p>Operating system: Guix Linux @ 6.16.7,  Ubuntu 24.04.3 LTS, Mac M2.</p>\n<p>Architecture: AMD64, x86_64</p>\n<h3>Extra Info</h3>\n<p>As far as I can tell, the algorithm for the 'const denominator division' is correct. Indeed the proptests cover this case. </p>\n<p>My best guess is that there could be some issue in how the constants are all inlined from the <code>smulhi</code> and the various other shifts in the fast algorithm. All other values appear to work correctly.<br>\n</p>\n</blockquote>",
        "id": 546875644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761306149
    },
    {
        "content": "<p>emturner edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11927\">issue #11927</a>:</p>\n<blockquote>\n<p>When compiling with <code>opt_level=speed</code>, <code>sdiv i64::MIN, i64::MIN</code> returns <code>-1</code> instead of <code>1</code>.</p>\n<p>The same occurs with <code>opt_level=speed_and_size</code>.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">sdiv_by_const_neg_i64min_i64</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sdiv</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">sdiv_by_const_neg_i64min_i64</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>add the above in <code>cranelift/filetests/filetests/runtests/sdiv-broken.clif</code></li>\n<li><code>cd cranelift</code></li>\n<li><code>cargo +1.88.0 run -- test filetests/filetests/runtests/sdiv-broken.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The test should pass. <code>i64::MIN / i64::MIN == 1</code>.</p>\n<h3>Actual Results</h3>\n<p>We get an incorrect result: <code>i64::MIN / i64::MIN == -1</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: f678260bb3b2fa07ae10737f581b2d395d3349da is the first commit that causes the issue.</p>\n<p>All cranelift versions from then on (1.22.0 -&gt; current @ 1.25.1) are affected.</p>\n<p>Operating system: Guix Linux @ 6.16.7,  Ubuntu 24.04.3 LTS, MacOS.</p>\n<p>Architecture: AMD64, x86_64, Mac M2.</p>\n<h3>Extra Info</h3>\n<p>As far as I can tell, the algorithm for the 'const denominator division' is correct. Indeed the proptests cover this case. </p>\n<p>My best guess is that there could be some issue in how the constants are all inlined from the <code>smulhi</code> and the various other shifts in the fast algorithm. All other values appear to work correctly.<br>\n</p>\n</blockquote>",
        "id": 546875712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761306175
    },
    {
        "content": "<p>emturner edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11927\">issue #11927</a>:</p>\n<blockquote>\n<p>When compiling with <code>opt_level=speed</code>, <code>sdiv i64::MIN, i64::MIN</code> returns <code>-1</code> instead of <code>1</code>.</p>\n<p>The same occurs with <code>opt_level=speed_and_size</code>.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">sdiv_by_const_neg_i64min_i64</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sdiv</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">sdiv_by_const_neg_i64min_i64</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>add the above in <code>cranelift/filetests/filetests/runtests/sdiv-broken.clif</code></li>\n<li><code>cd cranelift</code></li>\n<li><code>cargo +1.88.0 run -- test filetests/filetests/runtests/sdiv-broken.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The test should pass. <code>i64::MIN / i64::MIN == 1</code>.</p>\n<h3>Actual Results</h3>\n<p>We get an incorrect result: <code>i64::MIN / i64::MIN == -1</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: f678260bb3b2fa07ae10737f581b2d395d3349da is the first commit that causes the issue.</p>\n<p>All cranelift versions from then on (1.22.0 -&gt; current @ 1.25.1) are affected.</p>\n<p>Operating system: Guix Linux @ 6.16.7,  Ubuntu 24.04.3 LTS, MacOS.</p>\n<p>Architecture: AMD64, x86_64, Mac M2.</p>\n<h3>Extra Info</h3>\n<p>As far as I can tell, the algorithm for the 'const denominator division' is correct. Indeed the proptests cover this case. </p>\n<p>~My best guess is that there could be some issue in how the constants are all inlined from the <code>smulhi</code> and the various other shifts in the fast algorithm. All other values appear to work correctly.~</p>\n<p>EDIT: the incorrect rule fires in the case of <code>sdiv</code> where <code>d == ty::MIN</code>. Namely, the rule for _positive_ power of two fires instead of _negative_ power of two.<br>\n</p>\n</blockquote>",
        "id": 546877891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1761306946
    }
]