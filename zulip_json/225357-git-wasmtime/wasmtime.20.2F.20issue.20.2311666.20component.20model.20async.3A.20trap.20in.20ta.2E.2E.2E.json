[
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11666\">issue #11666</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/BigOrangeQWQ/wit-bindgen/blob/bug-report/composed.wasm\">composed.wasm</a><br>\n<a href=\"https://github.com/BigOrangeQWQ/wit-bindgen/blob/bug-report/runner-c.wasm\">runner-c.wasm</a><br>\n<a href=\"https://github.com/BigOrangeQWQ/wit-bindgen/blob/bug-report/test-c.wasm\">test-c.wasm</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Use the <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime-async/async/ping-pong/test.wit\">WIT</a> interface:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"p\">:</span><span class=\"nc\">test</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">ping</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">async</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">future</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">future</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">pong</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">async</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">future</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">runner</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>Compile two components: runner-c.wasm (UTF-8) and test-c.wasm (UTF-16). Both of these components are built from <code>wit-bindgen</code> ping-pong <a href=\"https://github.com/bytecodealliance/wit-bindgen/tree/main/tests/runtime-async/async/ping-pong\">test</a></li>\n<li>Compose these components into a single composed.wasm using wasm-tools component compose.</li>\n<li>Run composed.wasm using Wasmtime. </li>\n</ul>\n<h3>Expected Results</h3>\n<p>The async function should complete successfully, and the <code>task.return</code> operation should not panic.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">composed</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">run</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">function</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">           </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"mh\">0x2ca9f</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">core</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">exports_test_async_ping_return</span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"mh\">0x2bf63</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">core</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">exports_test_async_ping_callback</span>\n<span class=\"w\">           </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"mh\">0x2ca51</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">core</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__wasm_export_exports_test_async_ping_callback</span>\n<span class=\"w\">       </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">invalid</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">task</span><span class=\"p\">.</span><span class=\"k\">return</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"o\">/</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">options</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">task</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime 38.0.0 (024db5b4e 2025-09-08)</p>\n<p>Operating system: MacOS 15.6.1 </p>\n<p>Architecture: arm64</p>\n<h3>Extra Info</h3>\n<p>The async lift of the function's signature contains UTF-16 encoding information. If this encoding is modified to UTF-8, the program will continue to run.</p>\n</blockquote>",
        "id": 538681018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757517902
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:component-model-async label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11666\">Issue #11666</a>.</p>",
        "id": 538681052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757517908
    },
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11666\">issue #11666 component model async: trap in task.return when using different string encodings</a> to <a href=\"https://github.com/bytecodealliance/wasm-tools/issues/2301\">bytecodealliance/wasm-tools/#2301</a>.</p>",
        "id": 538681854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757518115
    }
]