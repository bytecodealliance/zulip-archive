[
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>.</p>",
        "id": 495793380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737752997
    },
    {
        "content": "<p>dicej opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a> from <code>dicej:async-fused-test</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This is another piece of #9582 which I'm splitting out to make review easier.</p>\n<p>This test exercises fused adapter generation for various flavors of intercomponent async-&gt;async, async-&gt;sync, and sync-&gt;async calls.</p>\n<p>The remaining changes fill in some TODOs to make the test pass.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 495793382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737752998
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>.</p>",
        "id": 495793383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737752998
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>.</p>",
        "id": 495795182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737753868
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>.</p>",
        "id": 495796312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737754384
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>.</p>",
        "id": 495797275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737754823
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2573628586\">PR review</a>:</p>\n<blockquote>\n<p>I think this is as far as I'm gonna get today. I haven't gotten to most of <code>trampoline.rs</code> yet which I realize is most of the guts of this PR, but I'll do that on Monday</p>\n</blockquote>",
        "id": 495803898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757944
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929263560\">PR review comment</a>:</p>\n<blockquote>\n<p>Just confirming this isn't a typo, but you're working with <code>MAX_FLAT_PARAMS</code> and <code>ty.params</code>, but storing the result in <code>results</code></p>\n</blockquote>",
        "id": 495803899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757944
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929266106\">PR review comment</a>:</p>\n<blockquote>\n<p>Also nowadays if you'd like I think it'd be reasonable to move this to close to the impl of the trait for <code>StoreInner&lt;T&gt;</code>. </p>\n<p>Also in terms of <code>#[cfg]</code> by moving this to a location that's already guarded by this feature you won't have to use the fully qualified paths for all types below to avoid unused import warnings.</p>\n</blockquote>",
        "id": 495803900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757944
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929265394\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this impl move to some location which is already gated by <code>feature = \"component-model-async\"</code>? I suspect this'll want to import things and/or work with things only present when the feature is enabled, so keeping everything localized might help cut down on <code>#[cfg]</code>.</p>\n</blockquote>",
        "id": 495803901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757944
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929264719\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind leaving some comments as to what this is doing? I suspect the <code>if async { ... }</code> is intentional but natively it looks like this is mixing up results/params (which I suspect it isn't, but a comment would help dispel any doubt)</p>\n</blockquote>",
        "id": 495803902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757944
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929274869\">PR review comment</a>:</p>\n<blockquote>\n<p>This is going to be a little tricky, but ideally we'd move these <code>#[cfg]</code> to the function level to have these functions entirely disappear when the feature is disabled.</p>\n<p>I say this is tricky because it's a bit subtle how this works. The corresponding <code>foreach_builtin_function!</code> macro for core wasm has support for this but it requires updating callers to expand their macro-matching syntax to include macro-matchers for cfgs.</p>\n<p>The other gotcha is that the numbering of libcalls isn't affected by <code>#[cfg]</code>. This helps ensure that one Wasmtime with a certain set of features can load compiled code into a different Wasmtime with a different set of features. This means that <code>VMComponentLibcalls</code>, for example, has the same structure regardless of <code>#[cfg]</code>. The way this is solved for core wasm is that the <code>VMBuiltinFunctions</code> structure ignores the <code>#[cfg]</code> on each item, but the macro-generated trampoline is where the do-the-call-or-<code>unreachable!()</code> lives. </p>\n<p>In the end the goal though is to be able to avoid defining this function entirely when it's not configured.</p>\n</blockquote>",
        "id": 495803903,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757944
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929266900\">PR review comment</a>:</p>\n<blockquote>\n<p>Huh I completely forgot about this... Another option would be to add more callbacks here, but having a separate trait as well I think is also totally reasonable. Probably best to keep everything packaged up in a single trait to help with the <code>#[cfg]</code></p>\n</blockquote>",
        "id": 495803904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757944
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929300635\">PR review comment</a>:</p>\n<blockquote>\n<p>Like above, the <code>call_libcall</code> helper might be able to help clean this up a little further</p>\n</blockquote>",
        "id": 495803905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757944
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929270468\">PR review comment</a>:</p>\n<blockquote>\n<p>I suspect you probably have a preference for this style of import but at some point in the future we're going to have to have a reckoning about this. It's not great that we have multiple styles of imports throughout the codebase in the sense that it's a bit jarring to see the inconsistency. While the true fix is probably along the lines \"wait for rustfmt to format imports\" in the interim if you're working near other imports mind matching the preexisting style?</p>\n</blockquote>",
        "id": 495803906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757944
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929307588\">PR review comment</a>:</p>\n<blockquote>\n<p>This looks pretty similar to some code in <code>signature.rs</code> (and I'm similarly a bit confused about params/results a little). Is this similar enough that it might warrant a helper of some kind to do this internally?</p>\n<p>(similar for <code>dst_flat</code> below, some sort of helper that takes <code>lower_opts</code> or <code>async_</code> which handles async-vs-not)</p>\n</blockquote>",
        "id": 495803907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757944
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929280378\">PR review comment</a>:</p>\n<blockquote>\n<p>Was this an intentional decision, or a copy/paste? The comment is true for anything that is exclusively imported by fused adapter modules (e.g. <code>*_transfer</code>) but for normal component model intrinsics (which I think this represents) this is definitely a case we'll need to handle. </p>\n</blockquote>",
        "id": 495803908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757944
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929281843\">PR review comment</a>:</p>\n<blockquote>\n<p>You might be able to replace <code>host::task_return</code> + <code>load_libcall</code> + this with the <code>call_libcall</code> helper perhaps?</p>\n</blockquote>",
        "id": 495803909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757944
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929278457\">PR review comment</a>:</p>\n<blockquote>\n<p>Question about this: how come these exports are here? Accessing extra exports of adapter modules seems like it'd be a pretty big change and I'm also not entirely sure what they'd be used for. Not really necessary to put a comment here, but I'm curious to peel the curtain back a bit more on how the exports are going to be used in future PRs.</p>\n<p>(I also have a theory that this is here to get past wasm validation to <code>ref.func</code> the function or something like that, and if that's what's happening here there are other alternatives to solve that)</p>\n</blockquote>",
        "id": 495803910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757945
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929300265\">PR review comment</a>:</p>\n<blockquote>\n<p>Two things on this:</p>\n<ul>\n<li>For <code>let params = ...</code> above, it's unclear to me what this is doing. For example I'm not sure why this would switch to <code>None</code> for unknown types as opposed to return an error or panic or something. Additionally this looks like something that's better done in perhaps a <code>translate.rs</code> or <code>inline.rs</code> step? </li>\n<li>For <code>let ty = ...</code> this looks like it's doing a hash map lookup of a calculated type. Would it be possible to calculate that when the type is originally created early on in <code>translate.rs</code> and/or <code>inline.rs</code> and then thread that through to here? For example I'd expect that this function here would have <code>ty: Option&lt;SomeIndex&gt;</code> as an argument and then that's what's encoded into a <code>u32</code> here.</li>\n</ul>\n</blockquote>",
        "id": 495803911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757945
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929302742\">PR review comment</a>:</p>\n<blockquote>\n<p>Perhaps something like <code>raise_if_negative_one</code>? It looks a bit odd above that an i64 return value is passed into a method that says <code>if_i32</code>.</p>\n</blockquote>",
        "id": 495803912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757945
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929310881\">PR review comment</a>:</p>\n<blockquote>\n<p>How come the <code>::record</code> constructor couldn't be used like before? </p>\n</blockquote>",
        "id": 495803913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737757945
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2573735556\">PR review</a>.</p>",
        "id": 495805700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737758997
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929332575\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, it's a little confusing since <code>task.return</code> allows you to return up to <code>MAX_FLAT_PARAMS</code> on the stack.  I'll leave a comment to explain.</p>\n</blockquote>",
        "id": 495805702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737758998
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2573739066\">PR review</a>.</p>",
        "id": 495806004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737759169
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929334709\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, no problem.  I originally _did_ match the existing style, but then found it convenient to use this style so I could put all the imports under a single <code>#[cfg(...)]</code> annotation.  I'll switch it back.</p>\n</blockquote>",
        "id": 495806005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737759169
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2573740064\">PR review</a>.</p>",
        "id": 495806103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737759235
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929335275\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I was wondering if there was a cleaner way to do this.  I'm open to suggestions.</p>\n</blockquote>",
        "id": 495806104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737759235
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2573740966\">PR review</a>.</p>",
        "id": 495806227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737759301
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929335925\">PR review comment</a>:</p>\n<blockquote>\n<p>Correct, it's all about <code>ref.func</code> validation.  If there's a better way to address that, I'm definitely open to it.</p>\n</blockquote>",
        "id": 495806228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737759301
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2573745055\">PR review</a>.</p>",
        "id": 495806638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737759574
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929340186\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I've already done that (and removed other duplication) in a follow-up PR I'm currently finishing up.  Can it wait for that PR?</p>\n</blockquote>",
        "id": 495806640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737759574
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929338490\">PR review comment</a>:</p>\n<blockquote>\n<p>I believe we discussed this at some point when pairing in a Slack huddle and decided then to use the trap approach.  So far it seems to be working for every test I throw at it (including cases that don't involve fused adapters at all), so if there's a scenario where this is the wrong behavior, I'd like to understand what it is and add a test case for it.</p>\n</blockquote>",
        "id": 495806641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737759574
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2573749802\">PR review</a>.</p>",
        "id": 495806988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737759750
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929341682\">PR review comment</a>:</p>\n<blockquote>\n<p>Agreed about the <code>None</code> default; I don't remember why I did that.  I'll switch it to a panic.</p>\n<p>And yes, I can move this code to an earlier stage, e.g. <code>translate.rs</code> or <code>inline.rs</code>.</p>\n</blockquote>",
        "id": 495806989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737759750
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2573751445\">PR review</a>.</p>",
        "id": 495807072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737759788
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929342685\">PR review comment</a>:</p>\n<blockquote>\n<p>Per my response above: I've already done this in a follow-up PR.</p>\n</blockquote>",
        "id": 495807074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737759788
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2573757822\">PR review</a>.</p>",
        "id": 495807568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737760068
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929346610\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, I think this is an artifact of when Luke changed the async lift ABI; previously parameter passing worked differently for async vs. sync lifts, and now they're the same.  In the churn I neglected to unify the code.  I'll do that.</p>\n</blockquote>",
        "id": 495807569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737760068
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2573761237\">PR review</a>.</p>",
        "id": 495808029,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737760316
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929348718\">PR review comment</a>:</p>\n<blockquote>\n<p>OK, now I remember the conversation.  I guess the scenario where this would be a problem is if a guest exported its <code>task.return</code> intrinsic to the host and the host called it.  I'll see if I can create a test case for that.</p>\n</blockquote>",
        "id": 495808031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737760317
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2573816485\">PR review</a>.</p>",
        "id": 495812508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737763242
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929387509\">PR review comment</a>:</p>\n<blockquote>\n<p>I won't be able to actually test this until I've filled more of the runtime code (coming in future PRs).  Would it be okay if I left a TODO comment here for the purposes of this PR?</p>\n<p>I'd also like to propose changing the component model spec to prohibit re-exporting imported intrinsics.  I'm guessing we can't catch that reliably during validation due to e.g. <code>call_indirect</code> shenanigans, but we'd at least be justified in trapping at runtime.  @lukewagner do you have an opinion?</p>\n</blockquote>",
        "id": 495812510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737763243
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2573839108\">PR review</a>.</p>",
        "id": 495814885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737764912
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929403216\">PR review comment</a>:</p>\n<blockquote>\n<p>Sounds like we're agreed having a separate trait makes sense, so I'm leaving this as-is.</p>\n</blockquote>",
        "id": 495814886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737764912
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2573852762\">PR review</a>.</p>",
        "id": 495816198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737765871
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929413722\">PR review comment</a>:</p>\n<blockquote>\n<p>Alternatively, if it's straightforward to support <code>Abi::Array</code> properly here we can just do that; I'll probably need some guidance on how to do that, though.</p>\n</blockquote>",
        "id": 495816199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737765871
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1929387509\">PR review comment</a>.</p>",
        "id": 495887368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737824545
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2576422526\">PR review</a>.</p>",
        "id": 496201301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738007679
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1931110257\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah ok, if it's only about <code>ref.func</code>, then what you'll want to use is a \"declare\" element segment. You'll call <a href=\"https://docs.rs/wasm-encoder/latest/wasm_encoder/struct.ElementSection.html#method.declared\">this function</a> in wasm-encoder basically. That way you won't have to export the functions, but it will still be valid to <code>ref.func</code> the functions.</p>\n</blockquote>",
        "id": 496201302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738007679
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2576426212\">PR review</a>.</p>",
        "id": 496201655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738007800
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1931112748\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah yeah I think you booted up on the context here. It's the reexport case that I'm worried about (and you're right that I don't think we can reasonably forbid it at the embedder level). I think it's probably pretty easy to add <code>Abi::Array</code> support, it's mostly just around refactoring to use helpers to access the arguments/store returns, otherwise it's all the same internals. </p>\n<p>I think it'd be reasonable to leave this as a TODO, though, in the interim. Mind filing an issue about that? (can probably start a <code>component-model-async</code> label too perhaps)</p>\n</blockquote>",
        "id": 496201660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738007802
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2576426594\">PR review</a>.</p>",
        "id": 496201682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738007812
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1931113032\">PR review comment</a>:</p>\n<blockquote>\n<p>Sounds good <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 496201683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738007812
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2576434295\">PR review</a>.</p>",
        "id": 496202366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738008068
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1931117900\">PR review comment</a>:</p>\n<blockquote>\n<p>On <a href=\"https://github.com/bytecodealliance/wasmtime/blob/098bd1c3ff7cde8f03226baaf5b92f3a3fc80d7f/crates/environ/src/component.rs#L86-L92\">these functions</a> you can add <code>#[cfg(feature = \"component-model-async\")]</code>. After doing that you'll need to:</p>\n<ol>\n<li>Change <a href=\"https://github.com/bytecodealliance/wasmtime/blob/098bd1c3ff7cde8f03226baaf5b92f3a3fc80d7f/crates/wasmtime/src/runtime/vm/interpreter.rs#L385-L397\">this</a> to look like the <code>core</code> case above, notably around handling <code>$( #[cfg($attr:meta)] )?</code></li>\n<li>Change <a href=\"https://github.com/bytecodealliance/wasmtime/blob/098bd1c3ff7cde8f03226baaf5b92f3a3fc80d7f/crates/wasmtime/src/runtime/vm/component/libcalls.rs#L82-L93\">this</a> to look more like <a href=\"https://github.com/bytecodealliance/wasmtime/blob/098bd1c3ff7cde8f03226baaf5b92f3a3fc80d7f/crates/wasmtime/src/runtime/vm/libcalls.rs#L114-L126\">this</a> when handling <code>$attr</code></li>\n</ol>\n</blockquote>",
        "id": 496202368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738008068
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2576444345\">PR review</a>:</p>\n<blockquote>\n<p>Ok I'm trying to decipher <code>trampoline.rs</code> but if it's ok with you I'd prefer to ask for more documentation first before diving further into these methods. Currently there's very little documentation on how things are set up and understanding enough to be able to review this PR I think would require cross-referencing both all the details in the spec along with Wasmtime internal implementation details. A lot of this is also pretty specific to Wasmtime itself in the sense that it's all internal adapter details and we're implementing halves of the spec in some places.</p>\n<p>Would you be ok writing up some docs for this? Ideally I'd find it most helpful to have a high-level description of how the adapters piece together and what the expected flow between them is. My hope is that such documentation would also be pretty valuable for future readers to understand this as well.</p>\n</blockquote>",
        "id": 496208593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738010623
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1931124936\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind throwing \"async\" in the name of these local variables (and <code>return_adapter</code> below) to clarify they're async-related things?</p>\n</blockquote>",
        "id": 496208595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738010623
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1931124017\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind adding a private <code>Compiler::new</code> constructor? That should help deduplicate this and the <code>Compiler</code> constructions above too</p>\n</blockquote>",
        "id": 496208596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738010623
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1931126720\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind leaving some high-level comments on each of these cases about what sort of adapters are being created? Mostly to help guide what adapters are calling what and what the purpose of the various adapter functions are.</p>\n</blockquote>",
        "id": 496208597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738010623
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1931142581\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm a bit perplexed by this and I've been trying to think about this but to no avail.</p>\n<p>High-level request: mind writing up some longer-form documentation in this module or on a function here about adapters in the async world? For example I see the use of globals here and it makes me wonder:</p>\n<ul>\n<li>Why are globals needed here? For example what function will pick up these globals later?</li>\n<li>What prevents these globals from being set again before the \"other side\" picks up the results?</li>\n</ul>\n<p>I suspect there's answers to these and it's where I think some docs could help. I realize as well that I didn't do a great job of documenting most of this file the first time I wrote it, so I'm also sort of using this opportunity to request some docs while it's still fresh in your head as well.</p>\n<p>At a lower-level: why is <code>param_locals</code> passed twice here? It feels surprising and I'm not sure the code below was meant to handle the same values in/out, but I suspect you've been testing with this as well. Mind leaving some comments as to why it's ok to do that here? I'm lacking the high-level picture of what these adapters are doing so that might also help piece together why it's ok to pass the two sides in here too.</p>\n<p>(also if you're up for it adding docs to preexisting methods like <code>translate_results</code> would be most welcome, but I understand if you'd prefer to not or defer that to later)</p>\n</blockquote>",
        "id": 496208598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738010623
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1931146236\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind adding a helper method like <code>self.global_set(u32)</code> which automatically does the <code>flush_code</code> plus <code>Body::GlobalSet</code>?</p>\n</blockquote>",
        "id": 496208599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738010623
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1931127628\">PR review comment</a>:</p>\n<blockquote>\n<p>(I'm also not sure at-a-glance, for example, what the <code>param_globals</code>/<code>result_globals</code> variables are, so either docs here or on the methods below I think would be useful)</p>\n</blockquote>",
        "id": 496208601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738010623
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>.</p>",
        "id": 496403377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738090300
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>.</p>",
        "id": 496403378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738090301
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>.</p>",
        "id": 496403379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738090301
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2579159951\">PR review</a>.</p>",
        "id": 496403877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738090460
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1932701041\">PR review comment</a>:</p>\n<blockquote>\n<p>I just pushed an update which uses <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1989\">https://github.com/bytecodealliance/wasm-tools/pull/1989</a> and makes this code obsolete.  Now we compare <code>TypeTupleIndex</code>es, so no need to intern core function types anymore.</p>\n</blockquote>",
        "id": 496403878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738090460
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>.</p>",
        "id": 496435483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738103509
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2579571276\">PR review</a>.</p>",
        "id": 496436279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738103942
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1932959134\">PR review comment</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/10143\">https://github.com/bytecodealliance/wasmtime/issues/10143</a></p>\n</blockquote>",
        "id": 496436281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738103942
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>.</p>",
        "id": 496437715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738104841
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>.</p>",
        "id": 496442505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738107518
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2579646384\">PR review</a>.</p>",
        "id": 496442615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738107597
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1933008681\">PR review comment</a>:</p>\n<blockquote>\n<p>I just pushed an update that adds some comments.  Let me know if anything needs to be clarified or added.</p>\n</blockquote>",
        "id": 496442616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738107597
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2579681318\">PR review</a>.</p>",
        "id": 496446317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738109614
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1933031716\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, it's confusing and needs docs; I'll add them.</p>\n<blockquote>\n<p>Why are globals needed here? For example what function will pick up these globals later?</p>\n</blockquote>\n<p>Quoting the comment I just pushed:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"c1\">// Like the async-&gt;async case above, for the sync-&gt;async case we</span>\n<span class=\"w\">            </span><span class=\"c1\">// also need `async-start` and `async-return` helper functions to</span>\n<span class=\"w\">            </span><span class=\"c1\">// allow the callee to asynchronously \"pull\" the parameters and</span>\n<span class=\"w\">            </span><span class=\"c1\">// \"push\" the results when it is ready.</span>\n<span class=\"w\">            </span><span class=\"c1\">//</span>\n<span class=\"w\">            </span><span class=\"c1\">// However, since the caller is using the synchronous ABI, the</span>\n<span class=\"w\">            </span><span class=\"c1\">// parameters may have been passed via the stack rather than linear</span>\n<span class=\"w\">            </span><span class=\"c1\">// memory.  In that case, we use global variables to store them such</span>\n<span class=\"w\">            </span><span class=\"c1\">// that they can be retrieved by the `async-start` function.</span>\n<span class=\"w\">            </span><span class=\"c1\">// Similarly, the `async-return` function may write its result to</span>\n<span class=\"w\">            </span><span class=\"c1\">// global variables from which the adapter function can read and</span>\n<span class=\"w\">            </span><span class=\"c1\">// return them via the stack to the caller.</span>\n</code></pre></div>\n<blockquote>\n<p>What prevents these globals from being set again before the \"other side\" picks up the results?</p>\n</blockquote>\n<p>Since these globals are only used for sync-lowered imports, and the caller instance can only call one of those at a time, we know nobody will touch them.</p>\n<blockquote>\n<p>At a lower-level: why is param_locals passed twice here?</p>\n</blockquote>\n<p>Hmm, I think you found a bug (and a hole it the test coverage).  I think my _intention_ was that <code>translate_results</code> would use the last element of its <code>param_locals</code> parameter as the destination pointer in the case where the result does not fit on the stack.  But that doesn't make sense because it's a pointer to the callee's memory -- it only makes sense as a source pointer.  I think I was just confused, and the code is wrong.</p>\n<p>I added tests to tests/all/component_model/import.rs to cover the various combinations of passing parameters and returning results via the stack and the heap, but am now realizing I'm missing component composition tests for those scenarios.</p>\n<p>Also now realizing that testing async-lifted exports that return more than MAX_FLAT_RESULTS is not sufficient.  Since <code>task.return</code> accepts up to <code>MAX_FLAT_PARAMS</code>, I need to exceed that also.</p>\n<p>I'll add those tests and fix any issues I find.</p>\n</blockquote>",
        "id": 496446319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738109614
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2579893549\">PR review</a>.</p>",
        "id": 496462996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738120771
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1933195355\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>What prevents these globals from being set again before the \"other side\" picks up the results?</p>\n</blockquote>\n<p>Since these globals are only used for sync-lowered imports, and the caller instance can only call one of those at a time, we know nobody will touch them.</p>\n</blockquote>\n<p>Actually, I'm going to take this back.  For sync-lowered imports called from an async-without-callback-lifted export, we _could_ have more than one running concurrently, in which case we'd have a problem.  The good news is that we've decided not to include the async-without-callback ABI in WASIp3, so I don't need to solve that right away, but we do need to make sure we reject such exports until we've solved it.</p>\n<p>This shouldn't be a problem for sync-lowered imports called from sync-lifted exports or async-with-callback-lifted exports since neither can be reentered until the import returns.</p>\n</blockquote>",
        "id": 496462997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738120771
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1933031716\">PR review comment</a>.</p>",
        "id": 496463102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738120829
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1933195355\">PR review comment</a>.</p>",
        "id": 496463447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738121066
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2581347487\">PR review</a>.</p>",
        "id": 496569397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738163074
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934060161\">PR review comment</a>:</p>\n<blockquote>\n<p>Are you concerned at all about the cost of calling <code>flush_code</code> for each <code>GlobalSet</code> rather than once for all of them?</p>\n</blockquote>",
        "id": 496569398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738163075
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2581351759\">PR review</a>.</p>",
        "id": 496569712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738163159
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934062478\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh, I see -- it doesn't matter because pushing the <code>GlobalSet</code>s won't add anything to <code>self.code</code>, so <code>flush_code</code> will be a no-op anyway.</p>\n</blockquote>",
        "id": 496569714,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738163159
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>.</p>",
        "id": 496570743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738163405
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2581518391\">PR review</a>.</p>",
        "id": 496582659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738166538
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934161715\">PR review comment</a>:</p>\n<blockquote>\n<p>FYI, I'm currently tackling the arduous but inevitable task of rebasing my <code>async</code> branch onto this one.  Tons of conflicts, as expected.  Once I've finished that, I'll make sure all the existing tests pass, then add new tests and docs per the above discussion, and finally copy any relevant changes/fixes back into this PR.</p>\n</blockquote>",
        "id": 496582661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738166539
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934161715\">PR review comment</a>.</p>",
        "id": 496585354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738167235
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#pullrequestreview-2581917268\">PR review</a>:</p>\n<blockquote>\n<p>I'm sorry I know I sound like a broken record but I'm personally still very lost trying to understand this. On one hand one way I can fix this is to go study the component-model specification, try to piece together what an expected implementation would be, and then try to connect those dots back to this implementation. On the other hand though I also think it'd be valuable to have enough local documentation to not require that because although I can do that it would also be required for any future readers as well.</p>\n<p>If you feel like I'm requesting too much documentation though or there's something that is well outside the purview of this module's documentation and it's more basic fundamental understanding please let me know though. I don't think we should just mirror the entire specification in comments into this repository, but at the same time I still think there are critical implementation pieces lacking comments such as the protocol between the async-start/return adapters as well as the host-provided async-enter/exit functions.</p>\n</blockquote>",
        "id": 496627652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178659
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934406740\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind also leaving a comment here too?</p>\n</blockquote>",
        "id": 496627655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178660
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934404237\">PR review comment</a>:</p>\n<blockquote>\n<p>No need to do this here but for the future might be good to add this attribute to the future/stream/error transfer down below too</p>\n</blockquote>",
        "id": 496627656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178660
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934406256\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind leaving a small comment here explaining a bit about what's going on?</p>\n</blockquote>",
        "id": 496627658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178660
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934417494\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind leaving a comment here for why this is starting from scratch when allocating globals? (e.g. why it's not reusing <code>counts</code> from above when parameters were handled)</p>\n</blockquote>",
        "id": 496627659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178660
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934415987\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this iterator be a method on <code>lower_sig</code> itself? That'd help move out some of this complexity and makes it a bit easier to see that the <code>if</code> here is unrelated to async/sync and it's just about signatures.</p>\n</blockquote>",
        "id": 496627660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178660
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934430999\">PR review comment</a>:</p>\n<blockquote>\n<p>These constants seem like they might be used by the host runtime as well, is that right? If so should they be <code>pub</code> and somewhere accessible from the outside of this crate?</p>\n</blockquote>",
        "id": 496627661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178660
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934432188\">PR review comment</a>:</p>\n<blockquote>\n<p>This in theory can move to a \"declare\" <code>elem</code> segment, right? </p>\n<p>If no, mind commenting why it's exported?</p>\n<p>If so, feel free to leave this here but can you add a comment/TODO saying it should become an element segment?</p>\n</blockquote>",
        "id": 496627662,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178660
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934408042\">PR review comment</a>:</p>\n<blockquote>\n<p>Is this a copy/paste typo with <code>task.return</code> when this function is about async start?</p>\n</blockquote>",
        "id": 496627663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178660
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934427837\">PR review comment</a>:</p>\n<blockquote>\n<p>One question I'm left with after reading these docs is what's done with async-{start,return}, e.g. who's calling them. Definitely feel free to say \"go read the CM docs Alex\" for this, but it's at least to me still a big missing piece of the puzzle in understanding these trampolines.</p>\n</blockquote>",
        "id": 496627665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178660
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934441284\">PR review comment</a>:</p>\n<blockquote>\n<p>I fear I'm personally still pretty lost here. In a sync-&gt;async call what I was expecting is that the results would be stored in globals and async-start would read from those globals when called by somone (the host? unsure). The results would then be stored-to in async-return. Here I was expecting something to block (as the caller is sync) until the nested async call was finished and then the globals would be read.</p>\n<p>That doesn't appear to be what's happening though? I commented above that's it's not clear what async-start/async-return are doing but the setting of globals here rather than reading is what really threw me astray... Mind leaving more comments as to what the host intrinsics are doing and the various protocol that this is adhering to?</p>\n</blockquote>",
        "id": 496627666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178660
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934434027\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind adding a comment here as a small recap of what these intrinsics are doing? For example it looks a little odd to immediately call one then the other but I presume the host is doing something as part of enter/exit which may continue to execute wasm code?</p>\n</blockquote>",
        "id": 496627667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178660
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934434478\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind leaving comments as to what these two locals are?</p>\n</blockquote>",
        "id": 496627668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178660
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934449229\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm personally pretty nervous about the use of <code>global</code>s here because it seems like it'll be easy to get wires crossed by accident and overwrite globals or use uninitialized globals. To help alleviate this concern though, what do you think about some debug-only code?</p>\n<p>In wasmtime-cranelift we perform some extra debug checks in <code>cfg!(debug_assertions)</code> in the generated code itself. I'm wondering if we could do something similar here where in <code>debug_assertions</code> mode there's an \"in_use\" global which is asserted to be zero when we store to it and then it's asserted to be 1 when we read from it. (and stores switch from 0-&gt;1 where reads switch from 1-&gt;0). That'd help make me more confident that although I don't fully understand everything here we have at least a layer of defense against bugs in debug mode for testing/fuzzing.</p>\n</blockquote>",
        "id": 496627669,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178660
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934452453\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok I'll admit I'm still very lost as to what's going on here. My current understanding of async-start is that an async task calls it to get the parameters of the original async call. Here it looks like the adapter is performing the \"translate from one component to another call\", but I'm pretty confused why this signature's locals would ever be used. Why would a parameter be passed in if you're trying to learn the original parameters of the initial caller?</p>\n<p>The globals bits make sense to me where the initial caller put some stuff in globals and that's read here, but I'm not sure how this works without the globals?</p>\n</blockquote>",
        "id": 496627670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178660
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#discussion_r1934437377\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind leaving a comment as to what these are doing? For example why nparams is being passed and expanding a bit on what it means to leave room for the guest context?</p>\n</blockquote>",
        "id": 496627671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178660
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106#issuecomment-2622648974\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>:</p>\n<blockquote>\n<p>To be clear: I absolutely agree that more docs and comments are needed -- I've only added a bit of that so far but plan to add more.  Feel free to ignore this PR until that's done.</p>\n</blockquote>",
        "id": 496628357,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738178926
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>.</p>",
        "id": 503339445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741113993
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>.</p>",
        "id": 503339446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741113993
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">PR #10106</a>.</p>",
        "id": 503339447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1741113993
    }
]