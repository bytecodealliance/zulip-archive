[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871\">PR #10871</a> from <code>abrown:asm-scalar-moves</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This change represents a first part toward changing all scalar moves in x64 to use the new assembler. Recall that when moving sub-64-bit values, upper bits of a GPR remain unchanged, so Cranelift chooses to use zero-extending moves for those operations. This change does not touch that: for 64-bit moves, Cranelift _does_ use <code>movq</code> and this PR only touches that usage. Why? <code>movq</code> is used widely throughout Cranelift and many filetests will change, so it seems safer to change moves part by part.</p>\n</blockquote>",
        "id": 521330402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622078
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871\">PR #10871</a>.</p>",
        "id": 521330403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622079
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871\">PR #10871</a>.</p>",
        "id": 521330404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622079
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2881831166\">PR review</a>.</p>",
        "id": 521330657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622164
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116218789\">PR review comment</a>:</p>\n<blockquote>\n<p>@cfallin: I expect 3 PCC tests to fail due to this. I tried to look at how I might re-write this based on the assembler but at this point we only have assembler types to deal with. What to do?</p>\n</blockquote>",
        "id": 521330659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622164
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2881833854\">PR review</a>.</p>",
        "id": 521330853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622238
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116220514\">PR review comment</a>:</p>\n<blockquote>\n<p>Technically this PR only makes use of this instruction but its seems valuable to add the other variants; I'm surprised we don't use the <code>MI</code> format anywhere?</p>\n</blockquote>",
        "id": 521330855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622238
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2881838814\">PR review</a>.</p>",
        "id": 521331308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622377
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116224135\">PR review comment</a>:</p>\n<blockquote>\n<p>Here's another Capstone-related weirdness: the assembler emits all immediates the same but this special logic \"fixes\" things up so we can match against Capstone. I will be very thankful when we can switch to a more regular disassembler.</p>\n</blockquote>",
        "id": 521331309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622377
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2881843978\">PR review</a>:</p>\n<blockquote>\n<p>This looks good overall -- thanks for the continued migration push!</p>\n</blockquote>",
        "id": 521332251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622656
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116230182\">PR review comment</a>:</p>\n<blockquote>\n<p>Pre-existing but I'm just noticing it now -- whether in this PR or separately, could we update the printing format for these synthetic amodes so that we don't have \"x+-y\" to mean \"x-y\"? (Slightly more complex in the formatting code but hopefully not too bad)</p>\n</blockquote>",
        "id": 521332253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622657
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116227769\">PR review comment</a>:</p>\n<blockquote>\n<p>It's fine to remove the newly failing tests for now, I think -- PCC shouldn't get in the way of progress here (I'm happy to update it later when I next get a timeslice for it). Feel free to remove the test directives in the files and leave a note instead \"disabled until PCC is migrated to understand new assembler instructions\" or similar...</p>\n</blockquote>",
        "id": 521332254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622657
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2881851937\">PR review</a>.</p>",
        "id": 521332410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622714
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116232210\">PR review comment</a>:</p>\n<blockquote>\n<p>I know we do read-modify-write (load; add; store) in our lowering rules but I too am surprised we don't do store-of-immediate; seems worth adding?</p>\n</blockquote>",
        "id": 521332411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622715
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2881852263\">PR review</a>.</p>",
        "id": 521332460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622724
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116232412\">PR review comment</a>:</p>\n<blockquote>\n<p>(Not necessarily in this PR to be clear, but in general)</p>\n</blockquote>",
        "id": 521332463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622724
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2881863283\">PR review</a>.</p>",
        "id": 521333166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622956
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116237303\">PR review comment</a>:</p>\n<blockquote>\n<p>Actually, on second look -- does the <code>rw(rm8)</code> here mean that we have a read/write (modify) operand? This is somewhat surprising to me, per our Zulip thread -- to use this properly with narrow values we'd have to have an \"undefined def\" pseudoinst prior to it which would add a lot of bloat/compile-time slowdown otherwise.</p>\n</blockquote>",
        "id": 521333167,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748622956
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2882048927\">PR review</a>.</p>",
        "id": 521347129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748628166
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116357350\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, exactly: my plan was was to keep an eye out for this as more rules get converted.</p>\n</blockquote>",
        "id": 521347130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748628166
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871\">PR #10871</a>.</p>",
        "id": 521347701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748628389
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2882060609\">PR review</a>.</p>",
        "id": 521347875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748628468
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116364878\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, this is not great. I've been mulling over what to do here and I also think <code>&lt;offset:n&gt;</code> isn't the most clear; perhaps we want to refactor this offset table logic to allow naming the underlying offset. I'll add this to the TODO list.</p>\n</blockquote>",
        "id": 521347876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748628468
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2882099674\">PR review</a>.</p>",
        "id": 521349793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748629338
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116388683\">PR review comment</a>:</p>\n<blockquote>\n<p>This bothers me too; we may need some better modeling here. On the <code>xmm</code> side, we've been using <code>rw</code> for operations that only partially write the XMM register. E.g., there are f32 operations that only touch the bottom 32 bits and we need to indicate that those upper bits remain unchanged. Modeling this with <code>rw</code> works well when it comes to Cranelift because the ISLE rules already pass in the XMM register we are modifying, making the dependencies make sense to regalloc. But, though convenient, this is not technically correct at the assembler level, we are not truly _reading_ the bits that get changed; we're only writing them, just like we do here with <code>movb</code>. It feels like we need some modeling here at the assembler level: we want to define <code>movb</code> as <code>w(rm8)</code> but then somehow still use a <code>ReadWriteGpr</code> when interacting with regalloc to keep the data dependencies sane, right?</p>\n</blockquote>",
        "id": 521349794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748629339
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116400199\">PR review comment</a>:</p>\n<blockquote>\n<p>Perhaps the rule is simple for GPR: every time we see <code>w(r*{8|16|32})</code> defined in the assembler, we actually emit code using the right <code>ReadWriteGpr</code> type.</p>\n<p>For XMM it might be more complex: <code>w(xmm)</code> does not tell us that only some of the bits are modified so we may need to examine the other operands?</p>\n</blockquote>",
        "id": 521350140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748629512
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2882118882\">PR review</a>.</p>",
        "id": 521350142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748629513
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116422514\">PR review comment</a>:</p>\n<blockquote>\n<p>Another idea: we add a <code>partial</code> bit which gets set automatically for <code>w(r*{8|16|32})</code> but set explicitly for XMM, e.g., <code>w(partial(xmm))</code>. Then when we decide what type to use for an operand <code>op</code>, we would emit the <code>ReadWrite*</code> type when <code>op.is_read_write() || op.is_partial()</code>.</p>\n</blockquote>",
        "id": 521351487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748629990
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2882159180\">PR review</a>.</p>",
        "id": 521351489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748629991
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2882294468\">PR review</a>.</p>",
        "id": 521356919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748632418
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116496507\">PR review comment</a>:</p>\n<blockquote>\n<p>It's possible I'm not fully grokking the proposed rules here, but the end state needs to be: writes to GPRs, even narrow writes, must be only <code>w</code>, not <code>rw</code>. This is a reflection of the semantic gap between CLIF / VCode data types and the machine: when we store an <code>i8</code> (say)-typed vreg in a particular register, it really is only 8 bits wide, and the rest of the machine register is unused. As long as uses and defs of vregs are properly typed, the undefined bits never affect anything.</p>\n<p>(This is different than the Xmm case, as you note too -- a lane insertion is operating on a 128-bit input and producing a 128-bit output, so we don't have the same \"narrow type in wide register\" gap.)</p>\n<p>We almost certainly don't want a full type system at the assembler layer, but in the absence of that, we do need to represent this gap somehow. There's a bit of tension with the \"general assembler library\" use-case, where the latter may actually want to represent that the writes are partial, etc. Perhaps we have a mode bit somewhere indicating that partial GPR writes are to be treated as full writes (a <code>high_gpr_bits_are_undefined()</code> method on the toplevel Regs trait so we can plug in a constant <code>true</code> impl from Cranelift, maybe?). Or there's always the option that we adopt the Cranelift convention and, w.r.t. regalloc metadata, assume that the embedder is only doing things in a properly typed way, so narrow writes leave undefined bits rather than previously-present bits...</p>\n</blockquote>",
        "id": 521356921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748632419
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2882599849\">PR review</a>.</p>",
        "id": 521374793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748640822
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116692756\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm a bit surprised because I thought <code>rw(rm8)</code> is basically almost exactly what we want here? It matches the raw instruction because it's a single operand, and it matches Cranelift because the actual operand is <code>api::Registers::ReadWriteGpr</code> which is modeled as two <code>VReg</code>s in Cranelift (which during emisson is required to be the same register). Additionally for generic assembler purposes there's nothing saying that <code>ReadWriteGpr</code> has to be different than <code>WriteGpr</code>, so I'd imagine a generic usage of this crate would have the same type plugged in there.</p>\n<p>Otherwise I'm curious where your concern about compile-time comes from @cfallin? It seems like we're not actually using <code>movb</code> anywhere unless we're storing to memory, and register moves generated by regalloc always otherwise use <code>movq</code> to overwrite the entire destination.</p>\n<hr>\n<p>Orthogonally though one possible change we may want to consider: should this instruction be split into two forms? If the destination is memory that's technically not a read/write operand, it's a pure write in this case. That doesn't actually get surfaced anywhere right now but with PCC integration in the future it might? Basically the read/write-ness is a property of the register-to-register encoding, not the register-to-memory encoding.</p>\n<p>For the <code>movss</code> instruction for example I modeled this where memory-to-xmm is a write of the destination since it zeros upper bits, but xmm-to-xmm is a read/write of the destination as it only overwrites the lower bits. Should something similar be done here where the register-to-memory version of <code>movb</code> uses <code>w(m8)</code> while the register-to-register version uses <code>rw(r8)</code>?</p>\n</blockquote>",
        "id": 521374794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748640823
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2882635441\">PR review</a>.</p>",
        "id": 521377417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748642378
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116715737\">PR review comment</a>:</p>\n<blockquote>\n<p>Well, it comes down to expected uses. In Cranelift lowerings we make use of narrow-width instructions to perform operations that logically write a new value into a register, and we don't care about the upper bits. It seems we don't use <code>movb</code> this way today, but in general this is exposing a footgun and a semantic gap: we aren't careful about distinguishing between \"I'm using this instruction that leaves upper bits untouched but I don't care, and it doesn't matter because the value is logically narrow so upper bits are undef\" and \"I'm using this instruction to insert bits in top of a pre-existing value\". We want <code>Write</code> for the former and <code>ReadWrite</code> for the latter.</p>\n<blockquote>\n<p>Otherwise I'm curious where your concern about compile-time comes from @cfallin?</p>\n</blockquote>\n<p>I had thought we were using <code>movb</code> directly for reg-to-reg moves but it seems not. My concern in general comes from the way that one converts a <code>rw</code> to <code> w</code>-with-don't-care-bits, by using an <code>UninitializedValue</code> pseudo-op to def the vreg that comes \"into\" the <code>rw</code>. I was worried we'd have to start inserting a bunch of those to retain regalloc correctness.</p>\n<hr>\n<p>I think the most reasonable solution may be: define the <code>r</code>/<code>rw</code>/<code>w</code>'s \"scope\" to be only the width of the instruction. That squares away with how mem ops actually do only load/store the 8/16/32 bits as appropriate. It also matches Cranelift's invariant/expectation already: we store narrow values in the appropriate bits of a register, and don't say anything about the rest. Concretely, that would mean we have only <code>w</code> here, because the destination width is <code>8</code>. (<code>pinsrb</code> could still have an <code>rw</code> operand because its destination width is <code>128</code> -- so it reads and writes 128 bits with defined results.) If we really wanted to use <code>movb</code> as an \"insert lower byte in register\" operation we could also define a variant with a width of <code>64</code> and an <code>rw</code> op. We should then define the <em>width</em> of the write as part of the metadata somehow. What do you think?</p>\n</blockquote>",
        "id": 521377418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748642379
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116716634\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>We should then define the width of the write as part of the metadata somehow</p>\n</blockquote>\n<p>or rather, I suppose that's just the <code>8</code> in <code>rm8</code>. So <code>w(rm8)</code> is correct in this interpretation, and means \"we're writing 8 bits\" -- we don't read the 8 bits first, so it's not <code>rw(rm8)</code>.</p>\n</blockquote>",
        "id": 521377636,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748642451
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2882636782\">PR review</a>.</p>",
        "id": 521377637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748642451
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2882680813\">PR review</a>.</p>",
        "id": 521378714,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748643129
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116743432\">PR review comment</a>:</p>\n<blockquote>\n<p>I like that, it makes a lot of sense to me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>I particularly like the idea of \"ok let's model how some bits are preserved\" is a special-case variant of an instruction we may expose in some circumstances but aren't necessarily required to.</p>\n</blockquote>",
        "id": 521378715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748643129
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#pullrequestreview-2882851683\">PR review</a>.</p>",
        "id": 521383765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748646558
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871#discussion_r2116848772\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, after talking about this with @cfallin, I think the right thing to at the assembler level is to use <code>w</code>, i.e., \" define the r/rw/w's \"scope\" to be only the width of the instruction.\" What I realized I was trying to do is avoid footguns up at the ISLE level, but we (1) are already relying on Cranelift to use the right widths and (2) we can be safer another way (e.g., we _know_ a <code>w(r8)</code> is actually a partial write so we could still generate a <code>ReadWriteGpr</code> parameter for that operand... or a <code>type PartialWriteGpr = ReadWriteGpr</code>?). I'll update this PR with all <code>w</code> for now and follow it up with a different PR that we can throw darts at.</p>\n</blockquote>",
        "id": 521383766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748646558
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871\">PR #10871</a>.</p>",
        "id": 521384049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748646753
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10871\">PR #10871</a>.</p>",
        "id": 521388075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748649959
    }
]