[
    {
        "content": "<p>sammyne opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10683\">issue #10683</a>:</p>\n<blockquote>\n<h2>1. Environment</h2>\n<ul>\n<li>wasmtime 32.0.0</li>\n<li>wasi-sdk 22.0</li>\n<li>LLDB 18.1.8</li>\n</ul>\n<h2>2. Source codes</h2>\n<h3>fib-cc/lib.cc: C++ source codes</h3>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;cstdint&gt;</span>\n\n<span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">__export_name__</span><span class=\"p\">(</span><span class=\"s\">\"fib\"</span><span class=\"p\">)))</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"w\">  </span><span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">uint8_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"s\">\"hello world\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"s\">\"hello world\"</span><span class=\"p\">),</span>\n<span class=\"w\">  </span><span class=\"p\">};</span>\n\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>debugger/src/main.rs: embedded wasmtime</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">\"target/wasm32-unknown-unknown/debug/fib.wasm\"</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Load our previously compiled wasm file (built previously with Cargo) and</span>\n<span class=\"w\">    </span><span class=\"c1\">// also ensure that we generate debuginfo so this executable can be</span>\n<span class=\"w\">    </span><span class=\"c1\">// debugged in GDB.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">debug_info</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">cranelift_opt_level</span><span class=\"p\">(</span><span class=\"n\">OptLevel</span><span class=\"p\">::</span><span class=\"nb\">None</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Invoke `fib` export</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"fib\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"fib(6) = {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Makefile</h3>\n<div class=\"codehilite\" data-code-language=\"Makefile\"><pre><span></span><code><span class=\"nv\">debugger</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>target/release/debugger\n<span class=\"nv\">fibcc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>fib-cc/build/fib-cc.wasm\n\n<span class=\"nf\">.PHONY</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">all</span>\n<span class=\"nf\">all</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">$(</span><span class=\"nv\">debugger</span><span class=\"k\">)</span> <span class=\"k\">$(</span><span class=\"nv\">fibcc</span><span class=\"k\">)</span>\n\n<span class=\"nf\">$(debugger)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">debugger</span>/<span class=\"n\">src</span>/<span class=\"n\">main</span>.<span class=\"n\">rs</span>\n<span class=\"w\">    </span>cargo<span class=\"w\"> </span>build<span class=\"w\"> </span>-r<span class=\"w\"> </span>-p<span class=\"w\"> </span>debugger\n\n<span class=\"nf\">$(fibcc)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">fib</span>-<span class=\"n\">cc</span>/<span class=\"n\">lib</span>.<span class=\"n\">cc</span>\n<span class=\"w\">    </span><span class=\"k\">$(</span>MAKE<span class=\"k\">)</span><span class=\"w\"> </span>-C<span class=\"w\"> </span>fib-cc\n\n<span class=\"nf\">lldb-cc</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">$(</span><span class=\"nv\">debugger</span><span class=\"k\">)</span> <span class=\"k\">$(</span><span class=\"nv\">fibcc</span><span class=\"k\">)</span>\n<span class=\"w\">    </span>lldb<span class=\"w\"> </span>-O<span class=\"w\"> </span><span class=\"s1\">'settings set target.disable-aslr false'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'breakpoint set -n main'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'r'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s2\">\"breakpoint set -n 'fib'\"</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'c'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'n'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'p a'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>--<span class=\"w\"> </span><span class=\"k\">$(</span>debugger<span class=\"k\">)</span><span class=\"w\"> </span><span class=\"k\">$(</span>fibcc<span class=\"k\">)</span>\n\n<span class=\"nf\">.PHONY</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">clean</span>\n<span class=\"nf\">clean</span><span class=\"o\">:</span>\n<span class=\"w\">    </span>cargo<span class=\"w\"> </span>clean\n<span class=\"w\">    </span><span class=\"k\">$(</span>MAKE<span class=\"k\">)</span><span class=\"w\"> </span>-C<span class=\"w\"> </span>fib-cc<span class=\"w\"> </span>clean\n</code></pre></div>\n<h2>3. Problem reproduction</h2>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>make<span class=\"w\"> </span>lldb-cc\n</code></pre></div>\n<p>Logs go as</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>root@bd04aefd8e7c:/workspace/module#<span class=\"w\"> </span>make<span class=\"w\"> </span>lldb-cc\nlldb<span class=\"w\"> </span>-O<span class=\"w\"> </span><span class=\"s1\">'settings set target.disable-aslr false'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'breakpoint set -n main'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'r'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s2\">\"breakpoint set -n 'fib'\"</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'c'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'n'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'n'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'n'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'expr (void)__vmctx-&gt;set()'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'p *h.ptr'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'expr *(char(*)[12])(&amp;(__vmctx.memory[1024]))'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'p *(char(*)[12])(&amp;h.ptr)'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'p *(char(*)[12])(h.ptr)'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>--<span class=\"w\"> </span>target/release/debugger<span class=\"w\"> </span>fib-cc/build/fib-cc.wasm\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>settings<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>target.disable-aslr<span class=\"w\"> </span><span class=\"nb\">false</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>target<span class=\"w\"> </span>create<span class=\"w\"> </span><span class=\"s2\">\"target/release/debugger\"</span>\nCurrent<span class=\"w\"> </span>executable<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"s1\">'/workspace/module/target/release/debugger'</span><span class=\"w\"> </span><span class=\"o\">(</span>x86_64<span class=\"o\">)</span>.\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>settings<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>--<span class=\"w\"> </span>target.run-args<span class=\"w\">  </span><span class=\"s2\">\"fib-cc/build/fib-cc.wasm\"</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>breakpoint<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>-n<span class=\"w\"> </span>main\nBreakpoint<span class=\"w\"> </span><span class=\"m\">1</span>:<span class=\"w\"> </span><span class=\"nv\">where</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>debugger<span class=\"sb\">`</span>main,<span class=\"w\"> </span><span class=\"nv\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>0x00000000000baac0\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>r\nProcess<span class=\"w\"> </span><span class=\"m\">5041</span><span class=\"w\"> </span>launched:<span class=\"w\"> </span><span class=\"s1\">'/workspace/module/target/release/debugger'</span><span class=\"w\"> </span><span class=\"o\">(</span>x86_64<span class=\"o\">)</span>\nProcess<span class=\"w\"> </span><span class=\"m\">5041</span><span class=\"w\"> </span>stopped\n*<span class=\"w\"> </span>thread<span class=\"w\"> </span><span class=\"c1\">#1, name = 'debugger', stop reason = breakpoint 1.1</span>\n<span class=\"w\">    </span>frame<span class=\"w\"> </span><span class=\"c1\">#0: 0x0000557f8015aac0 debugger`main</span>\ndebugger<span class=\"sb\">`</span>main:\n-&gt;<span class=\"w\">  </span>0x557f8015aac0<span class=\"w\"> </span>&lt;+0&gt;:<span class=\"w\"> </span>pushq<span class=\"w\">  </span>%rax\n<span class=\"w\">    </span>0x557f8015aac1<span class=\"w\"> </span>&lt;+1&gt;:<span class=\"w\"> </span>movq<span class=\"w\">   </span>%rsi,<span class=\"w\"> </span>%rcx\n<span class=\"w\">    </span>0x557f8015aac4<span class=\"w\"> </span>&lt;+4&gt;:<span class=\"w\"> </span>movslq<span class=\"w\"> </span>%edi,<span class=\"w\"> </span>%rdx\n<span class=\"w\">    </span>0x557f8015aac7<span class=\"w\"> </span>&lt;+7&gt;:<span class=\"w\"> </span>leaq<span class=\"w\">   </span>-0x59e<span class=\"o\">(</span>%rip<span class=\"o\">)</span>,<span class=\"w\"> </span>%rax<span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span>debugger::main::h4a2646090ba600e9\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>breakpoint<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>-n<span class=\"w\"> </span><span class=\"s1\">'fib'</span>\nBreakpoint<span class=\"w\"> </span><span class=\"m\">2</span>:<span class=\"w\"> </span>no<span class=\"w\"> </span>locations<span class=\"w\"> </span><span class=\"o\">(</span>pending<span class=\"o\">)</span>.\nWARNING:<span class=\"w\">  </span>Unable<span class=\"w\"> </span>to<span class=\"w\"> </span>resolve<span class=\"w\"> </span>breakpoint<span class=\"w\"> </span>to<span class=\"w\"> </span>any<span class=\"w\"> </span>actual<span class=\"w\"> </span>locations.\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>c\n<span class=\"m\">1</span><span class=\"w\"> </span>location<span class=\"w\"> </span>added<span class=\"w\"> </span>to<span class=\"w\"> </span>breakpoint<span class=\"w\"> </span><span class=\"m\">2</span>\nProcess<span class=\"w\"> </span><span class=\"m\">5041</span><span class=\"w\"> </span>resuming\nProcess<span class=\"w\"> </span><span class=\"m\">5041</span><span class=\"w\"> </span>stopped\n*<span class=\"w\"> </span>thread<span class=\"w\"> </span><span class=\"c1\">#1, name = 'debugger', stop reason = breakpoint 2.1</span>\n<span class=\"w\">    </span>frame<span class=\"w\"> </span><span class=\"c1\">#0: 0x00007fcd740f4015 JIT(0x557f812a0590)`fib(n=6) at lib.cc:13:12</span>\n<span class=\"w\">   </span><span class=\"m\">10</span><span class=\"w\">   </span>//<span class=\"w\"> </span>调试符号应该用<span class=\"w\"> </span>C<span class=\"w\"> </span>的函数名，而不是<span class=\"w\"> </span>export-name。\n<span class=\"w\">   </span><span class=\"m\">11</span><span class=\"w\">   </span>__attribute__<span class=\"o\">((</span>__export_name__<span class=\"o\">(</span><span class=\"s2\">\"fib-cc\"</span><span class=\"o\">)))</span>\n<span class=\"w\">   </span><span class=\"m\">12</span><span class=\"w\">   </span>extern<span class=\"w\"> </span><span class=\"s2\">\"C\"</span><span class=\"w\"> </span>uint32_t<span class=\"w\"> </span>fib<span class=\"o\">(</span>uint32_t<span class=\"w\"> </span>n<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span>\n-&gt;<span class=\"w\"> </span><span class=\"m\">13</span><span class=\"w\">     </span>uint32_t<span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">14</span><span class=\"w\">     </span>uint32_t<span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">15</span>\n<span class=\"w\">   </span><span class=\"m\">16</span><span class=\"w\">     </span>hello<span class=\"w\"> </span>h<span class=\"o\">{</span>.ptr<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span>const<span class=\"w\"> </span>uint8_t*<span class=\"o\">)</span><span class=\"s2\">\"hello world\"</span>,<span class=\"w\"> </span>.len<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>sizeof<span class=\"o\">(</span><span class=\"s2\">\"hello world\"</span><span class=\"o\">)}</span><span class=\"p\">;</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>n\nProcess<span class=\"w\"> </span><span class=\"m\">5041</span><span class=\"w\"> </span>stopped\n*<span class=\"w\"> </span>thread<span class=\"w\"> </span><span class=\"c1\">#1, name = 'debugger', stop reason = step over</span>\n<span class=\"w\">    </span>frame<span class=\"w\"> </span><span class=\"c1\">#0: 0x00007fcd740f4022 JIT(0x557f812a0590)`fib(n=6) at lib.cc:14:12</span>\n<span class=\"w\">   </span><span class=\"m\">11</span><span class=\"w\">   </span>__attribute__<span class=\"o\">((</span>__export_name__<span class=\"o\">(</span><span class=\"s2\">\"fib-cc\"</span><span class=\"o\">)))</span>\n<span class=\"w\">   </span><span class=\"m\">12</span><span class=\"w\">   </span>extern<span class=\"w\"> </span><span class=\"s2\">\"C\"</span><span class=\"w\"> </span>uint32_t<span class=\"w\"> </span>fib<span class=\"o\">(</span>uint32_t<span class=\"w\"> </span>n<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">   </span><span class=\"m\">13</span><span class=\"w\">     </span>uint32_t<span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">;</span>\n-&gt;<span class=\"w\"> </span><span class=\"m\">14</span><span class=\"w\">     </span>uint32_t<span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">15</span>\n<span class=\"w\">   </span><span class=\"m\">16</span><span class=\"w\">     </span>hello<span class=\"w\"> </span>h<span class=\"o\">{</span>.ptr<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span>const<span class=\"w\"> </span>uint8_t*<span class=\"o\">)</span><span class=\"s2\">\"hello world\"</span>,<span class=\"w\"> </span>.len<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>sizeof<span class=\"o\">(</span><span class=\"s2\">\"hello world\"</span><span class=\"o\">)}</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">17</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>n\nProcess<span class=\"w\"> </span><span class=\"m\">5041</span><span class=\"w\"> </span>stopped\n*<span class=\"w\"> </span>thread<span class=\"w\"> </span><span class=\"c1\">#1, name = 'debugger', stop reason = step over</span>\n<span class=\"w\">    </span>frame<span class=\"w\"> </span><span class=\"c1\">#0: 0x00007fcd740f402f JIT(0x557f812a0590)`fib(n=6) at lib.cc:16:9</span>\n<span class=\"w\">   </span><span class=\"m\">13</span><span class=\"w\">     </span>uint32_t<span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">14</span><span class=\"w\">     </span>uint32_t<span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">15</span>\n-&gt;<span class=\"w\"> </span><span class=\"m\">16</span><span class=\"w\">     </span>hello<span class=\"w\"> </span>h<span class=\"o\">{</span>.ptr<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span>const<span class=\"w\"> </span>uint8_t*<span class=\"o\">)</span><span class=\"s2\">\"hello world\"</span>,<span class=\"w\"> </span>.len<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>sizeof<span class=\"o\">(</span><span class=\"s2\">\"hello world\"</span><span class=\"o\">)}</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">17</span>\n<span class=\"w\">   </span><span class=\"m\">18</span><span class=\"w\">     </span><span class=\"k\">for</span><span class=\"o\">(</span>int<span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"o\">=</span><span class=\"m\">0</span><span class=\"p\">;</span><span class=\"w\"> </span>i&lt;n<span class=\"p\">;</span><span class=\"w\"> </span>++i<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">   </span><span class=\"m\">19</span><span class=\"w\">       </span>auto<span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>a<span class=\"p\">;</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>n\nProcess<span class=\"w\"> </span><span class=\"m\">5041</span><span class=\"w\"> </span>stopped\n*<span class=\"w\"> </span>thread<span class=\"w\"> </span><span class=\"c1\">#1, name = 'debugger', stop reason = step over</span>\n<span class=\"w\">    </span>frame<span class=\"w\"> </span><span class=\"c1\">#0: 0x00007fcd740f4069 JIT(0x557f812a0590)`fib(n=6) at lib.cc:18:11</span>\n<span class=\"w\">   </span><span class=\"m\">15</span>\n<span class=\"w\">   </span><span class=\"m\">16</span><span class=\"w\">     </span>hello<span class=\"w\"> </span>h<span class=\"o\">{</span>.ptr<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span>const<span class=\"w\"> </span>uint8_t*<span class=\"o\">)</span><span class=\"s2\">\"hello world\"</span>,<span class=\"w\"> </span>.len<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>sizeof<span class=\"o\">(</span><span class=\"s2\">\"hello world\"</span><span class=\"o\">)}</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">17</span>\n-&gt;<span class=\"w\"> </span><span class=\"m\">18</span><span class=\"w\">     </span><span class=\"k\">for</span><span class=\"o\">(</span>int<span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"o\">=</span><span class=\"m\">0</span><span class=\"p\">;</span><span class=\"w\"> </span>i&lt;n<span class=\"p\">;</span><span class=\"w\"> </span>++i<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">   </span><span class=\"m\">19</span><span class=\"w\">       </span>auto<span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>a<span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">20</span><span class=\"w\">       </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>b<span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">21</span><span class=\"w\">       </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span>t<span class=\"p\">;</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>expr<span class=\"w\"> </span><span class=\"o\">(</span>void<span class=\"o\">)</span>__vmctx-&gt;set<span class=\"o\">()</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>p<span class=\"w\"> </span>*h.ptr\n<span class=\"o\">(</span>const<span class=\"w\"> </span>uint8_t<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s1\">'h'</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>expr<span class=\"w\"> </span>*<span class=\"o\">(</span>char<span class=\"o\">(</span>*<span class=\"o\">)[</span><span class=\"m\">12</span><span class=\"o\">])(</span><span class=\"p\">&amp;</span><span class=\"o\">(</span>__vmctx.memory<span class=\"o\">[</span><span class=\"m\">1024</span><span class=\"o\">]))</span>\n<span class=\"o\">(</span>char<span class=\"o\">[</span><span class=\"m\">12</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"nv\">$0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"hello world\"</span>\n<span class=\"w\">  </span>Evaluated<span class=\"w\"> </span>this<span class=\"w\"> </span>expression<span class=\"w\"> </span>after<span class=\"w\"> </span>applying<span class=\"w\"> </span>Fix-It<span class=\"o\">(</span>s<span class=\"o\">)</span>:\n<span class=\"w\">    </span>*<span class=\"o\">(</span>char<span class=\"o\">(</span>*<span class=\"o\">)[</span><span class=\"m\">12</span><span class=\"o\">])(</span><span class=\"p\">&amp;</span><span class=\"o\">(</span>__vmctx-&gt;memory<span class=\"o\">[</span><span class=\"m\">1024</span><span class=\"o\">]))</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>p<span class=\"w\"> </span>*<span class=\"o\">(</span>char<span class=\"o\">(</span>*<span class=\"o\">)[</span><span class=\"m\">12</span><span class=\"o\">])(</span><span class=\"p\">&amp;</span>h.ptr<span class=\"o\">)</span>\n<span class=\"o\">(</span>char<span class=\"o\">[</span><span class=\"m\">12</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"s2\">\"\\0\\U00000004\\0\\0\\0\\0\\0\\0\\f\"</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>p<span class=\"w\"> </span>*<span class=\"o\">(</span>char<span class=\"o\">(</span>*<span class=\"o\">)[</span><span class=\"m\">12</span><span class=\"o\">])(</span>h.ptr<span class=\"o\">)</span>\nerror:<span class=\"w\"> </span>&lt;user<span class=\"w\"> </span>expression<span class=\"w\"> </span><span class=\"m\">5</span>&gt;:1:2:<span class=\"w\"> </span>cannot<span class=\"w\"> </span>cast<span class=\"w\"> </span>from<span class=\"w\"> </span><span class=\"nb\">type</span><span class=\"w\"> </span><span class=\"s1\">'WebAssemblyPtrWrapper&lt;const uint8_t&gt;'</span><span class=\"w\"> </span>to<span class=\"w\"> </span>pointer<span class=\"w\"> </span><span class=\"nb\">type</span><span class=\"w\"> </span><span class=\"s1\">'char (*)[12]'</span>\n<span class=\"w\">    </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>*<span class=\"o\">(</span>char<span class=\"o\">(</span>*<span class=\"o\">)[</span><span class=\"m\">12</span><span class=\"o\">])(</span>h.ptr<span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"p\">|</span><span class=\"w\">  </span>^~~~~~~~~~~~~~~~~~~~\n</code></pre></div>\n<p>The log indicates that <code>p *(char(*)[12])(h.ptr)</code> failed to convert <code>h.ptr</code> as a readable c-str of 12 char (which it actually is).</p>\n<p>Two questions:</p>\n<ol>\n<li>How can I convert <code>WebAssemblyPtrWrapper&lt;const uint8_t&gt;</code> as <code>*(char(*)[12])</code> for printing?</li>\n<li>How to resolve failure to set breakpoint on 'fib' symbol with errors as<br>\n<code>bash\n    Breakpoint 2: no locations (pending).\n    WARNING:  Unable to resolve breakpoint to any actual locations.\n    </code></li>\n</ol>\n<p>The full project goes as <a href=\"https://github.com/sammyne/deep-dive-wasm-debug/tree/feat-pack-up-asking-stuff-for-WebAssemblyPtrWrapper/module\">https://github.com/sammyne/deep-dive-wasm-debug/tree/feat-pack-up-asking-stuff-for-WebAssemblyPtrWrapper/module</a></p>\n</blockquote>",
        "id": 514728504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745820772
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10683#issuecomment-2834304735\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10683\">issue #10683</a>:</p>\n<blockquote>\n<blockquote>\n<p>How to resolve failure to set breakpoint on 'fib' symbol with errors as </p>\n</blockquote>\n<p>That is a harmless warning. It is indeed true that <code>fib</code> doesn't exist yet when you set the breakpoint. It is only generated once Wasmtime gets a chance to compile the wasm file and register the debuginfo it generates with lldb.</p>\n<blockquote>\n<p>How can I convert WebAssemblyPtrWrapper&lt;const uint8_t&gt; as <em>(char(</em>)[12]) for printing?</p>\n</blockquote>\n<p>Does <code>p *(char(*)[12])(&amp;*h.ptr)</code> work? <code>WebAssemblyPtrWrapper</code> has a <code>operator*</code> method.</p>\n</blockquote>",
        "id": 514745442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745827143
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10683#issuecomment-2834304735\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10683\">issue #10683</a>:</p>\n<blockquote>\n<blockquote>\n<p>How to resolve failure to set breakpoint on 'fib' symbol with errors as </p>\n</blockquote>\n<p>That is a harmless warning. It is indeed true that <code>fib</code> doesn't exist yet when you set the breakpoint. It is only generated once Wasmtime gets a chance to compile the wasm file and register the debuginfo it generates with lldb.</p>\n<blockquote>\n<p>How can I convert WebAssemblyPtrWrapper&lt;const uint8_t&gt; as <em>(char(</em>)[12]) for printing?</p>\n</blockquote>\n<p>Does <code>p *(char(*)[12])(&amp;*h.ptr)</code> work? <code>WebAssemblyPtrWrapper</code> has an <code>operator*</code> method.</p>\n</blockquote>",
        "id": 514745466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745827148
    },
    {
        "content": "<p>sammyne closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10683\">issue #10683</a>:</p>\n<blockquote>\n<h2>1. Environment</h2>\n<ul>\n<li>wasmtime 32.0.0</li>\n<li>wasi-sdk 22.0</li>\n<li>LLDB 18.1.8</li>\n</ul>\n<h2>2. Source codes</h2>\n<h3>fib-cc/lib.cc: C++ source codes</h3>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;cstdint&gt;</span>\n\n<span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">__export_name__</span><span class=\"p\">(</span><span class=\"s\">\"fib\"</span><span class=\"p\">)))</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"w\">  </span><span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">uint8_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"s\">\"hello world\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"s\">\"hello world\"</span><span class=\"p\">),</span>\n<span class=\"w\">  </span><span class=\"p\">};</span>\n\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>debugger/src/main.rs: embedded wasmtime</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">\"target/wasm32-unknown-unknown/debug/fib.wasm\"</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Load our previously compiled wasm file (built previously with Cargo) and</span>\n<span class=\"w\">    </span><span class=\"c1\">// also ensure that we generate debuginfo so this executable can be</span>\n<span class=\"w\">    </span><span class=\"c1\">// debugged in GDB.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">debug_info</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">cranelift_opt_level</span><span class=\"p\">(</span><span class=\"n\">OptLevel</span><span class=\"p\">::</span><span class=\"nb\">None</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Invoke `fib` export</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"fib\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"fib(6) = {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Makefile</h3>\n<div class=\"codehilite\" data-code-language=\"Makefile\"><pre><span></span><code><span class=\"nv\">debugger</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>target/release/debugger\n<span class=\"nv\">fibcc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>fib-cc/build/fib-cc.wasm\n\n<span class=\"nf\">.PHONY</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">all</span>\n<span class=\"nf\">all</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">$(</span><span class=\"nv\">debugger</span><span class=\"k\">)</span> <span class=\"k\">$(</span><span class=\"nv\">fibcc</span><span class=\"k\">)</span>\n\n<span class=\"nf\">$(debugger)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">debugger</span>/<span class=\"n\">src</span>/<span class=\"n\">main</span>.<span class=\"n\">rs</span>\n<span class=\"w\">    </span>cargo<span class=\"w\"> </span>build<span class=\"w\"> </span>-r<span class=\"w\"> </span>-p<span class=\"w\"> </span>debugger\n\n<span class=\"nf\">$(fibcc)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">fib</span>-<span class=\"n\">cc</span>/<span class=\"n\">lib</span>.<span class=\"n\">cc</span>\n<span class=\"w\">    </span><span class=\"k\">$(</span>MAKE<span class=\"k\">)</span><span class=\"w\"> </span>-C<span class=\"w\"> </span>fib-cc\n\n<span class=\"nf\">lldb-cc</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">$(</span><span class=\"nv\">debugger</span><span class=\"k\">)</span> <span class=\"k\">$(</span><span class=\"nv\">fibcc</span><span class=\"k\">)</span>\n<span class=\"w\">    </span>lldb<span class=\"w\"> </span>-O<span class=\"w\"> </span><span class=\"s1\">'settings set target.disable-aslr false'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'breakpoint set -n main'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'r'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s2\">\"breakpoint set -n 'fib'\"</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'c'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'n'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'p a'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>--<span class=\"w\"> </span><span class=\"k\">$(</span>debugger<span class=\"k\">)</span><span class=\"w\"> </span><span class=\"k\">$(</span>fibcc<span class=\"k\">)</span>\n\n<span class=\"nf\">.PHONY</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">clean</span>\n<span class=\"nf\">clean</span><span class=\"o\">:</span>\n<span class=\"w\">    </span>cargo<span class=\"w\"> </span>clean\n<span class=\"w\">    </span><span class=\"k\">$(</span>MAKE<span class=\"k\">)</span><span class=\"w\"> </span>-C<span class=\"w\"> </span>fib-cc<span class=\"w\"> </span>clean\n</code></pre></div>\n<h2>3. Problem reproduction</h2>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>make<span class=\"w\"> </span>lldb-cc\n</code></pre></div>\n<p>Logs go as</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>root@bd04aefd8e7c:/workspace/module#<span class=\"w\"> </span>make<span class=\"w\"> </span>lldb-cc\nlldb<span class=\"w\"> </span>-O<span class=\"w\"> </span><span class=\"s1\">'settings set target.disable-aslr false'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'breakpoint set -n main'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'r'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s2\">\"breakpoint set -n 'fib'\"</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'c'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'n'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'n'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'n'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'expr (void)__vmctx-&gt;set()'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'p *h.ptr'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'expr *(char(*)[12])(&amp;(__vmctx.memory[1024]))'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'p *(char(*)[12])(&amp;h.ptr)'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>-o<span class=\"w\"> </span><span class=\"s1\">'p *(char(*)[12])(h.ptr)'</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>--<span class=\"w\"> </span>target/release/debugger<span class=\"w\"> </span>fib-cc/build/fib-cc.wasm\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>settings<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>target.disable-aslr<span class=\"w\"> </span><span class=\"nb\">false</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>target<span class=\"w\"> </span>create<span class=\"w\"> </span><span class=\"s2\">\"target/release/debugger\"</span>\nCurrent<span class=\"w\"> </span>executable<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"s1\">'/workspace/module/target/release/debugger'</span><span class=\"w\"> </span><span class=\"o\">(</span>x86_64<span class=\"o\">)</span>.\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>settings<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>--<span class=\"w\"> </span>target.run-args<span class=\"w\">  </span><span class=\"s2\">\"fib-cc/build/fib-cc.wasm\"</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>breakpoint<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>-n<span class=\"w\"> </span>main\nBreakpoint<span class=\"w\"> </span><span class=\"m\">1</span>:<span class=\"w\"> </span><span class=\"nv\">where</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>debugger<span class=\"sb\">`</span>main,<span class=\"w\"> </span><span class=\"nv\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>0x00000000000baac0\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>r\nProcess<span class=\"w\"> </span><span class=\"m\">5041</span><span class=\"w\"> </span>launched:<span class=\"w\"> </span><span class=\"s1\">'/workspace/module/target/release/debugger'</span><span class=\"w\"> </span><span class=\"o\">(</span>x86_64<span class=\"o\">)</span>\nProcess<span class=\"w\"> </span><span class=\"m\">5041</span><span class=\"w\"> </span>stopped\n*<span class=\"w\"> </span>thread<span class=\"w\"> </span><span class=\"c1\">#1, name = 'debugger', stop reason = breakpoint 1.1</span>\n<span class=\"w\">    </span>frame<span class=\"w\"> </span><span class=\"c1\">#0: 0x0000557f8015aac0 debugger`main</span>\ndebugger<span class=\"sb\">`</span>main:\n-&gt;<span class=\"w\">  </span>0x557f8015aac0<span class=\"w\"> </span>&lt;+0&gt;:<span class=\"w\"> </span>pushq<span class=\"w\">  </span>%rax\n<span class=\"w\">    </span>0x557f8015aac1<span class=\"w\"> </span>&lt;+1&gt;:<span class=\"w\"> </span>movq<span class=\"w\">   </span>%rsi,<span class=\"w\"> </span>%rcx\n<span class=\"w\">    </span>0x557f8015aac4<span class=\"w\"> </span>&lt;+4&gt;:<span class=\"w\"> </span>movslq<span class=\"w\"> </span>%edi,<span class=\"w\"> </span>%rdx\n<span class=\"w\">    </span>0x557f8015aac7<span class=\"w\"> </span>&lt;+7&gt;:<span class=\"w\"> </span>leaq<span class=\"w\">   </span>-0x59e<span class=\"o\">(</span>%rip<span class=\"o\">)</span>,<span class=\"w\"> </span>%rax<span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span>debugger::main::h4a2646090ba600e9\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>breakpoint<span class=\"w\"> </span><span class=\"nb\">set</span><span class=\"w\"> </span>-n<span class=\"w\"> </span><span class=\"s1\">'fib'</span>\nBreakpoint<span class=\"w\"> </span><span class=\"m\">2</span>:<span class=\"w\"> </span>no<span class=\"w\"> </span>locations<span class=\"w\"> </span><span class=\"o\">(</span>pending<span class=\"o\">)</span>.\nWARNING:<span class=\"w\">  </span>Unable<span class=\"w\"> </span>to<span class=\"w\"> </span>resolve<span class=\"w\"> </span>breakpoint<span class=\"w\"> </span>to<span class=\"w\"> </span>any<span class=\"w\"> </span>actual<span class=\"w\"> </span>locations.\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>c\n<span class=\"m\">1</span><span class=\"w\"> </span>location<span class=\"w\"> </span>added<span class=\"w\"> </span>to<span class=\"w\"> </span>breakpoint<span class=\"w\"> </span><span class=\"m\">2</span>\nProcess<span class=\"w\"> </span><span class=\"m\">5041</span><span class=\"w\"> </span>resuming\nProcess<span class=\"w\"> </span><span class=\"m\">5041</span><span class=\"w\"> </span>stopped\n*<span class=\"w\"> </span>thread<span class=\"w\"> </span><span class=\"c1\">#1, name = 'debugger', stop reason = breakpoint 2.1</span>\n<span class=\"w\">    </span>frame<span class=\"w\"> </span><span class=\"c1\">#0: 0x00007fcd740f4015 JIT(0x557f812a0590)`fib(n=6) at lib.cc:13:12</span>\n<span class=\"w\">   </span><span class=\"m\">10</span><span class=\"w\">   </span>//<span class=\"w\"> </span>调试符号应该用<span class=\"w\"> </span>C<span class=\"w\"> </span>的函数名，而不是<span class=\"w\"> </span>export-name。\n<span class=\"w\">   </span><span class=\"m\">11</span><span class=\"w\">   </span>__attribute__<span class=\"o\">((</span>__export_name__<span class=\"o\">(</span><span class=\"s2\">\"fib-cc\"</span><span class=\"o\">)))</span>\n<span class=\"w\">   </span><span class=\"m\">12</span><span class=\"w\">   </span>extern<span class=\"w\"> </span><span class=\"s2\">\"C\"</span><span class=\"w\"> </span>uint32_t<span class=\"w\"> </span>fib<span class=\"o\">(</span>uint32_t<span class=\"w\"> </span>n<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span>\n-&gt;<span class=\"w\"> </span><span class=\"m\">13</span><span class=\"w\">     </span>uint32_t<span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">14</span><span class=\"w\">     </span>uint32_t<span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">15</span>\n<span class=\"w\">   </span><span class=\"m\">16</span><span class=\"w\">     </span>hello<span class=\"w\"> </span>h<span class=\"o\">{</span>.ptr<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span>const<span class=\"w\"> </span>uint8_t*<span class=\"o\">)</span><span class=\"s2\">\"hello world\"</span>,<span class=\"w\"> </span>.len<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>sizeof<span class=\"o\">(</span><span class=\"s2\">\"hello world\"</span><span class=\"o\">)}</span><span class=\"p\">;</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>n\nProcess<span class=\"w\"> </span><span class=\"m\">5041</span><span class=\"w\"> </span>stopped\n*<span class=\"w\"> </span>thread<span class=\"w\"> </span><span class=\"c1\">#1, name = 'debugger', stop reason = step over</span>\n<span class=\"w\">    </span>frame<span class=\"w\"> </span><span class=\"c1\">#0: 0x00007fcd740f4022 JIT(0x557f812a0590)`fib(n=6) at lib.cc:14:12</span>\n<span class=\"w\">   </span><span class=\"m\">11</span><span class=\"w\">   </span>__attribute__<span class=\"o\">((</span>__export_name__<span class=\"o\">(</span><span class=\"s2\">\"fib-cc\"</span><span class=\"o\">)))</span>\n<span class=\"w\">   </span><span class=\"m\">12</span><span class=\"w\">   </span>extern<span class=\"w\"> </span><span class=\"s2\">\"C\"</span><span class=\"w\"> </span>uint32_t<span class=\"w\"> </span>fib<span class=\"o\">(</span>uint32_t<span class=\"w\"> </span>n<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">   </span><span class=\"m\">13</span><span class=\"w\">     </span>uint32_t<span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">;</span>\n-&gt;<span class=\"w\"> </span><span class=\"m\">14</span><span class=\"w\">     </span>uint32_t<span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">15</span>\n<span class=\"w\">   </span><span class=\"m\">16</span><span class=\"w\">     </span>hello<span class=\"w\"> </span>h<span class=\"o\">{</span>.ptr<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span>const<span class=\"w\"> </span>uint8_t*<span class=\"o\">)</span><span class=\"s2\">\"hello world\"</span>,<span class=\"w\"> </span>.len<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>sizeof<span class=\"o\">(</span><span class=\"s2\">\"hello world\"</span><span class=\"o\">)}</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">17</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>n\nProcess<span class=\"w\"> </span><span class=\"m\">5041</span><span class=\"w\"> </span>stopped\n*<span class=\"w\"> </span>thread<span class=\"w\"> </span><span class=\"c1\">#1, name = 'debugger', stop reason = step over</span>\n<span class=\"w\">    </span>frame<span class=\"w\"> </span><span class=\"c1\">#0: 0x00007fcd740f402f JIT(0x557f812a0590)`fib(n=6) at lib.cc:16:9</span>\n<span class=\"w\">   </span><span class=\"m\">13</span><span class=\"w\">     </span>uint32_t<span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">14</span><span class=\"w\">     </span>uint32_t<span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">15</span>\n-&gt;<span class=\"w\"> </span><span class=\"m\">16</span><span class=\"w\">     </span>hello<span class=\"w\"> </span>h<span class=\"o\">{</span>.ptr<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span>const<span class=\"w\"> </span>uint8_t*<span class=\"o\">)</span><span class=\"s2\">\"hello world\"</span>,<span class=\"w\"> </span>.len<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>sizeof<span class=\"o\">(</span><span class=\"s2\">\"hello world\"</span><span class=\"o\">)}</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">17</span>\n<span class=\"w\">   </span><span class=\"m\">18</span><span class=\"w\">     </span><span class=\"k\">for</span><span class=\"o\">(</span>int<span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"o\">=</span><span class=\"m\">0</span><span class=\"p\">;</span><span class=\"w\"> </span>i&lt;n<span class=\"p\">;</span><span class=\"w\"> </span>++i<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">   </span><span class=\"m\">19</span><span class=\"w\">       </span>auto<span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>a<span class=\"p\">;</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>n\nProcess<span class=\"w\"> </span><span class=\"m\">5041</span><span class=\"w\"> </span>stopped\n*<span class=\"w\"> </span>thread<span class=\"w\"> </span><span class=\"c1\">#1, name = 'debugger', stop reason = step over</span>\n<span class=\"w\">    </span>frame<span class=\"w\"> </span><span class=\"c1\">#0: 0x00007fcd740f4069 JIT(0x557f812a0590)`fib(n=6) at lib.cc:18:11</span>\n<span class=\"w\">   </span><span class=\"m\">15</span>\n<span class=\"w\">   </span><span class=\"m\">16</span><span class=\"w\">     </span>hello<span class=\"w\"> </span>h<span class=\"o\">{</span>.ptr<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span>const<span class=\"w\"> </span>uint8_t*<span class=\"o\">)</span><span class=\"s2\">\"hello world\"</span>,<span class=\"w\"> </span>.len<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>sizeof<span class=\"o\">(</span><span class=\"s2\">\"hello world\"</span><span class=\"o\">)}</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">17</span>\n-&gt;<span class=\"w\"> </span><span class=\"m\">18</span><span class=\"w\">     </span><span class=\"k\">for</span><span class=\"o\">(</span>int<span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"o\">=</span><span class=\"m\">0</span><span class=\"p\">;</span><span class=\"w\"> </span>i&lt;n<span class=\"p\">;</span><span class=\"w\"> </span>++i<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">   </span><span class=\"m\">19</span><span class=\"w\">       </span>auto<span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>a<span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">20</span><span class=\"w\">       </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>b<span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"m\">21</span><span class=\"w\">       </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span>t<span class=\"p\">;</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>expr<span class=\"w\"> </span><span class=\"o\">(</span>void<span class=\"o\">)</span>__vmctx-&gt;set<span class=\"o\">()</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>p<span class=\"w\"> </span>*h.ptr\n<span class=\"o\">(</span>const<span class=\"w\"> </span>uint8_t<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s1\">'h'</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>expr<span class=\"w\"> </span>*<span class=\"o\">(</span>char<span class=\"o\">(</span>*<span class=\"o\">)[</span><span class=\"m\">12</span><span class=\"o\">])(</span><span class=\"p\">&amp;</span><span class=\"o\">(</span>__vmctx.memory<span class=\"o\">[</span><span class=\"m\">1024</span><span class=\"o\">]))</span>\n<span class=\"o\">(</span>char<span class=\"o\">[</span><span class=\"m\">12</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"nv\">$0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"hello world\"</span>\n<span class=\"w\">  </span>Evaluated<span class=\"w\"> </span>this<span class=\"w\"> </span>expression<span class=\"w\"> </span>after<span class=\"w\"> </span>applying<span class=\"w\"> </span>Fix-It<span class=\"o\">(</span>s<span class=\"o\">)</span>:\n<span class=\"w\">    </span>*<span class=\"o\">(</span>char<span class=\"o\">(</span>*<span class=\"o\">)[</span><span class=\"m\">12</span><span class=\"o\">])(</span><span class=\"p\">&amp;</span><span class=\"o\">(</span>__vmctx-&gt;memory<span class=\"o\">[</span><span class=\"m\">1024</span><span class=\"o\">]))</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>p<span class=\"w\"> </span>*<span class=\"o\">(</span>char<span class=\"o\">(</span>*<span class=\"o\">)[</span><span class=\"m\">12</span><span class=\"o\">])(</span><span class=\"p\">&amp;</span>h.ptr<span class=\"o\">)</span>\n<span class=\"o\">(</span>char<span class=\"o\">[</span><span class=\"m\">12</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"s2\">\"\\0\\U00000004\\0\\0\\0\\0\\0\\0\\f\"</span>\n<span class=\"o\">(</span>lldb<span class=\"o\">)</span><span class=\"w\"> </span>p<span class=\"w\"> </span>*<span class=\"o\">(</span>char<span class=\"o\">(</span>*<span class=\"o\">)[</span><span class=\"m\">12</span><span class=\"o\">])(</span>h.ptr<span class=\"o\">)</span>\nerror:<span class=\"w\"> </span>&lt;user<span class=\"w\"> </span>expression<span class=\"w\"> </span><span class=\"m\">5</span>&gt;:1:2:<span class=\"w\"> </span>cannot<span class=\"w\"> </span>cast<span class=\"w\"> </span>from<span class=\"w\"> </span><span class=\"nb\">type</span><span class=\"w\"> </span><span class=\"s1\">'WebAssemblyPtrWrapper&lt;const uint8_t&gt;'</span><span class=\"w\"> </span>to<span class=\"w\"> </span>pointer<span class=\"w\"> </span><span class=\"nb\">type</span><span class=\"w\"> </span><span class=\"s1\">'char (*)[12]'</span>\n<span class=\"w\">    </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>*<span class=\"o\">(</span>char<span class=\"o\">(</span>*<span class=\"o\">)[</span><span class=\"m\">12</span><span class=\"o\">])(</span>h.ptr<span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"p\">|</span><span class=\"w\">  </span>^~~~~~~~~~~~~~~~~~~~\n</code></pre></div>\n<p>The log indicates that <code>p *(char(*)[12])(h.ptr)</code> failed to convert <code>h.ptr</code> as a readable c-str of 12 char (which it actually is).</p>\n<p>Two questions:</p>\n<ol>\n<li>How can I convert <code>WebAssemblyPtrWrapper&lt;const uint8_t&gt;</code> as <code>*(char(*)[12])</code> for printing?</li>\n<li>How to resolve failure to set breakpoint on 'fib' symbol with errors as<br>\n<code>bash\n    Breakpoint 2: no locations (pending).\n    WARNING:  Unable to resolve breakpoint to any actual locations.\n    </code></li>\n</ol>\n<p>The full project goes as <a href=\"https://github.com/sammyne/deep-dive-wasm-debug/tree/feat-pack-up-asking-stuff-for-WebAssemblyPtrWrapper/module\">https://github.com/sammyne/deep-dive-wasm-debug/tree/feat-pack-up-asking-stuff-for-WebAssemblyPtrWrapper/module</a></p>\n</blockquote>",
        "id": 514746882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745827551
    },
    {
        "content": "<p>sammyne <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10683#issuecomment-2834325777\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10683\">issue #10683</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>How to resolve failure to set breakpoint on 'fib' symbol with errors as</p>\n</blockquote>\n<p>That is a harmless warning. It is indeed true that <code>fib</code> doesn't exist yet when you set the breakpoint. It is only generated once Wasmtime gets a chance to compile the wasm file and register the debuginfo it generates with lldb.</p>\n<blockquote>\n<p>How can I convert WebAssemblyPtrWrapper as _(char(_)[12]) for printing?</p>\n</blockquote>\n<p>Does <code>p *(char(*)[12])(&amp;*h.ptr)</code> work? <code>WebAssemblyPtrWrapper</code> has an <code>operator*</code> method.</p>\n</blockquote>\n<p>It work! Great thanks~</p>\n</blockquote>",
        "id": 514746884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745827552
    }
]