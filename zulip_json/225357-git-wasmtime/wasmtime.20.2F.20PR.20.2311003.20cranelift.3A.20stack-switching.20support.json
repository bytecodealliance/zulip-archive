[
    {
        "content": "<p>posborne opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a> from <code>posborne:stack-switching-cranelift</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>These changes pull in the cranelift changes from #10177 with some additional stacked changes to resolve conflicts, align with previous changes in the stack-switching series, and address feedback items which were raised on previous iterations of the PR (but mostly not changing anything of significant substance).  Tracking Issue: #10248.</p>\n<p>The <code>stack-switching</code> feature flag is retained and used minimally in this changeset in order to avoid compilation problems, but not really used beyond that.  There is at least one item in the tracking issue already related to likely finding a way to drop these compilation flags in most places but I think it is worth deferring that here as it will required touching code more broadly.</p>\n<p>CC @frank-emrich @dhil <br>\n</p>\n</blockquote>",
        "id": 523342315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749577664
    },
    {
        "content": "<p><strong>posborne</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 523342320,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749577665
    },
    {
        "content": "<p><strong>posborne</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 523342321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749577665
    },
    {
        "content": "<p><strong>posborne</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 523342322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749577665
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2914571577\">PR review</a>.</p>",
        "id": 523342955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749577948
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138476543\">PR review comment</a>:</p>\n<blockquote>\n<p>@frank-emrich @dhil I put this in here as passing as the only use of <code>allow_smaller</code> here is in the debug assertions which seemed like a potential defect, though I didn't do a deep dive into the full usage.</p>\n</blockquote>",
        "id": 523342956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749577948
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 523346375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749579193
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2914690454\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! Lots of comments below but for the most part these should be pretty straightforward to fix.</p>\n</blockquote>",
        "id": 523389833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138547820\">PR review comment</a>:</p>\n<blockquote>\n<p>This is fine to add, but fwiw the <code>sized_stack_slots</code> member is <code>pub</code> and implements <code>Index&lt;StackSlot&gt;</code> so you can always do</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">sized_stack_slots</span><span class=\"p\">[</span><span class=\"n\">slot</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 523389834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138590700\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we fold the <code>is_vmgcref_type()</code> branch into the <code>match</code> here? Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">WasmHeapTopType</span><span class=\"p\">::</span><span class=\"n\">Any</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">WasmHeapTopType</span><span class=\"p\">::</span><span class=\"n\">Extern</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.,</span>\n<span class=\"w\">    </span><span class=\"n\">WasmHeapTopType</span><span class=\"p\">::</span><span class=\"n\">Func</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.,</span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This should allow us to exhaustively match and remove the <code>_ =&gt; panic!(...)</code> arm.</p>\n</blockquote>",
        "id": 523389835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138579656\">PR review comment</a>:</p>\n<blockquote>\n<p>If we move the <code>stack_switching</code> module from the top-level to being a submodule of <code>func_environ</code> (similar to the <code>func_environ::gc</code> module) then we don't need to make all those members of <code>FuncEnvironment</code> be <code>pub(crate)</code>, which is a little thing but a nice thing (especially if we consider all the future evolutions of this code and any changes to <code>FuncEnvironment</code> members that will also need or not need to become <code>pub(crate)</code>).</p>\n</blockquote>",
        "id": 523389836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138872519\">PR review comment</a>:</p>\n<blockquote>\n<p>And this could be a <code>smallvec</code> too.</p>\n</blockquote>",
        "id": 523389837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138879190\">PR review comment</a>:</p>\n<blockquote>\n<p>Instead of looking at the value's CLIF type, can you modify <code>translate_ref_is_null</code> to pass in the actual wasm type as an argument? We already map multiple Wasm types onto the same CLIF type, it just so happens that is not currently the case for the particular type used for pointers to stacks, but this code as-written is pretty fragile to rely on that incidental property.</p>\n</blockquote>",
        "id": 523389839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138585321\">PR review comment</a>:</p>\n<blockquote>\n<p>Nice to avoid the allocation when possible:</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        let mut args: SmallVec&lt;[_; 6]&gt; = smallvec![vmctx, table_index_arg, delta];\n</code></pre></div>\n<p>(I think I counted the max args correctly but feel free to fix the inline capacity if I messed up)</p>\n</blockquote>",
        "id": 523389840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138897891\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd prefer defining a type containing the fat pointer's parts, something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">ContObj</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">revision</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ir</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">contref</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ir</span><span class=\"p\">::</span><span class=\"n\">Value</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ContObj</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"sd\">/// ...</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// getters for the parts...</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>rather than trying to use <code>ir::types::I128</code> here.</p>\n<p>Then we could also add <code>ContObj::load</code> and <code>ContObj::store</code> helper methods as needed.</p>\n<p>This lets us avoid the sketchy <code>transmute</code> alluded to above (which I don't believe actually exists anyways, because we pass <code>VMContObj</code>s by parts to libcalls already) and we also don't need to do all the packing and unpacking and extending/reducing that packing into and unpacing from <code>ir::types::I128</code> requires either.</p>\n<p>The only reason <code>ir::types::I128</code> exists is for ABI compatibility with LLVM code, which isn't a concern we have here.</p>\n</blockquote>",
        "id": 523389841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138907457\">PR review comment</a>:</p>\n<blockquote>\n<p>My suggestion for a <code>ContObj</code> type instead of <code>ir::types::I128</code> is basically to do the same as what is happening here.</p>\n</blockquote>",
        "id": 523389842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138882385\">PR review comment</a>:</p>\n<blockquote>\n<p>TODO</p>\n</blockquote>",
        "id": 523389843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138871893\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar here regarding exhaustively matching on the top type.</p>\n</blockquote>",
        "id": 523389844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138937180\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we leave this as an error instead of a panic?</p>\n</blockquote>",
        "id": 523389845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138905515\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we put this into a helper function something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">control_context_size</span><span class=\"p\">(</span><span class=\"n\">triple</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">target_lexicon</span><span class=\"p\">::</span><span class=\"n\">Triple</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">WasmResult</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">triple</span><span class=\"p\">.</span><span class=\"n\">architecture</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">triple</span><span class=\"p\">.</span><span class=\"n\">operating_system</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">target_lexicon</span><span class=\"p\">::</span><span class=\"n\">Architecture</span><span class=\"p\">::</span><span class=\"n\">X86_64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">target_lexicon</span><span class=\"p\">::</span><span class=\"n\">OperatingSystem</span><span class=\"p\">::</span><span class=\"n\">Linux</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"mi\">24</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">wasm_unsupported</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"stack switching is not supported on {triple}\"</span><span class=\"p\">)),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This will future proof the code and give us a nice place to slot in updates when we expand platform support.</p>\n</blockquote>",
        "id": 523389846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138912432\">PR review comment</a>:</p>\n<blockquote>\n<p>This is not a <code>VMHostArray</code>, it is a pointer to a <code>VMHostArray</code>, right? Can we update the name to reflect that? <code>VMHostArrayPtr</code> or <code>VMHostArrayRef</code> perhaps?</p>\n<p>Also, I don't think we need to separate the static offset and dynamic base address because nothing is (for example) determining whether we need to emit explicit bounds checks or can rely on guard pages for these accesses, so we can just have a single <code>address: ir::Value</code> field and trust Cranelift's instruction selection choose the best addressing mode it can given the input IR.</p>\n</blockquote>",
        "id": 523389847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138933506\">PR review comment</a>:</p>\n<blockquote>\n<p>These should be able to be <code>SmallVec</code>s too.</p>\n</blockquote>",
        "id": 523389849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138937963\">PR review comment</a>:</p>\n<blockquote>\n<p><code>SmallVec</code></p>\n</blockquote>",
        "id": 523389850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138934542\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you make sure there is an item for this in the tracking issue?</p>\n</blockquote>",
        "id": 523389851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138936450\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we name the local something else? Having both a <code>resume_table</code> and <code>resumetable</code> variable in scope at the same time is pretty confusing. Maybe we can have <code>wasm_resume_table</code> and <code>clif_resume_table</code>?</p>\n</blockquote>",
        "id": 523389852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600005
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138934897\">PR review comment</a>:</p>\n<blockquote>\n<p><code>SmallVec</code> here too.</p>\n</blockquote>",
        "id": 523389853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600006
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2138937445\">PR review comment</a>:</p>\n<blockquote>\n<p><code>SmallVec</code></p>\n</blockquote>",
        "id": 523389854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749600006
    },
    {
        "content": "<p>dhil submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2916488494\">PR review</a>.</p>",
        "id": 523530455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749638293
    },
    {
        "content": "<p>dhil created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2139768791\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this code is harmless. It seems to be doing some confidence testing that the byte-encoding of the values will fit into the allocated space. If I read the above comment correctly (and the code below) then each encoded element is stored as if it had type <code>T</code>, so for elements of type <code>S</code> such that <code>|S| &lt; |T|</code>, then there will be some padding between each element. </p>\n<p>I am not sure <code>allow_smaller</code> is useful, perhaps we can just have <code>debug_assert!(size &lt;= std::mem::size_of::&lt;T&gt;());</code>, or perhaps we can dispense with this particular confidence checking altogether.</p>\n</blockquote>",
        "id": 523530456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749638293
    },
    {
        "content": "<p>dhil created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2139740860\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>/// The Cranelift type used to represent all of the following:\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 523530457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749638293
    },
    {
        "content": "<p>dhil created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2139780378\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, good shout! I think I am to blame for the current state of affairs.</p>\n</blockquote>",
        "id": 523530458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749638293
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 523616800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749666428
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2918308049\">PR review</a>.</p>",
        "id": 523618118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749666989
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2140836164\">PR review comment</a>:</p>\n<blockquote>\n<p>I think 7 here, will do a commit with the smallvec changes.</p>\n</blockquote>",
        "id": 523618119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749666990
    },
    {
        "content": "<p>posborne edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2140836164\">PR review comment</a>.</p>",
        "id": 523618529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749667176
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2140900521\">PR review comment</a>:</p>\n<blockquote>\n<p>For args and returns, I guessed at a smallvec max of 8; I didn't see anywhere where we are bound to this, but smallvec will still fall back on heap allocations if we go beyond this.</p>\n</blockquote>",
        "id": 523623783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749669467
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2918413223\">PR review</a>.</p>",
        "id": 523623784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749669467
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2140909305\">PR review comment</a>:</p>\n<blockquote>\n<p>Added to tracking.</p>\n</blockquote>",
        "id": 523624456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749669834
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2918426637\">PR review</a>.</p>",
        "id": 523624459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749669834
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2918460662\">PR review</a>.</p>",
        "id": 523626674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749670780
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2140931444\">PR review comment</a>:</p>\n<blockquote>\n<p>For now, I'll keep a debug_assert! in place to check <code>size &lt;= std::mem::size_of::&lt;T&gt;()</code>.</p>\n</blockquote>",
        "id": 523626675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749670780
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2918764372\">PR review</a>.</p>",
        "id": 523639329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749676311
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2141127507\">PR review comment</a>:</p>\n<blockquote>\n<p>Tracing through this, just wanted to confirm that in order to do this we'll need to update wasm-tools/wasmparser to pass through the heap type information (similar to RefNull)?  Or am I off in the weeds in tracking through the changes required?</p>\n</blockquote>",
        "id": 523639331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749676311
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2921757670\">PR review</a>.</p>",
        "id": 523785979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749743218
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2143105262\">PR review comment</a>:</p>\n<blockquote>\n<p>Argh. I forgot that <code>ref.is_null</code> doesn't have a type parameter. I'll see how hard it would be to add type information that can be used here (and elsewhere).</p>\n</blockquote>",
        "id": 523785980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749743218
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2922307626\">PR review</a>.</p>",
        "id": 523816984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749755272
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2143434918\">PR review comment</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/11030\">https://github.com/bytecodealliance/wasmtime/pull/11030</a> passes the wasm ref type through to <code>translate_ref_is_null</code>. A couple things need to happen before that can land tho, see the PR description.</p>\n</blockquote>",
        "id": 523816986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749755272
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 524290722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750090776
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2932775091\">PR review</a>.</p>",
        "id": 524291684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750091123
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2150405090\">PR review comment</a>:</p>\n<blockquote>\n<p>Just removed this for now as there's already an error at where this callsite will eventually be and its addition should be obvious.  Probably to follow the work that @cfallin does to land other exception bits.</p>\n<p>I confirmed the tracking issues already has an item to track <code>resume.throw</code> addition (outside of the initial impl).</p>\n</blockquote>",
        "id": 524291686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750091123
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#issuecomment-2977288151\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>:</p>\n<blockquote>\n<p>Pushed most of the updates but still need to make the suggested updates around the fat pointer stuff and resolve conflicts with upstream.</p>\n</blockquote>",
        "id": 524292392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750091365
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 524769890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750274554
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 524772558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750275759
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2940468002\">PR review</a>.</p>",
        "id": 524772678,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750275806
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2155371631\">PR review comment</a>:</p>\n<blockquote>\n<p>Updated to use the wasm type as part of merging upstream back into the branch.</p>\n</blockquote>",
        "id": 524772680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750275807
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2940470759\">PR review</a>.</p>",
        "id": 524772854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750275876
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2155373368\">PR review comment</a>:</p>\n<blockquote>\n<p>Implemented this now.</p>\n</blockquote>",
        "id": 524772857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750275876
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2155422297\">PR review comment</a>:</p>\n<blockquote>\n<p>Discussed this change a bit more with @fitzgen and played around with an impl.  Currently, we are thinking that to facilitate having a single wasm value be modeled by multiple ir values (as we want here), we'll need to do some updates to the code translator to support having a single translated wasm value map to multiple ir values.</p>\n<p>This will be a larger change, so I am proposing that we move forward with changing the stack-switching code to be updated to use that mechanism when introduced in a later change.</p>\n</blockquote>",
        "id": 524777253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750277813
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2940546130\">PR review</a>.</p>",
        "id": 524777254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750277813
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 524777397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750277891
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#issuecomment-2997092761\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>:</p>\n<blockquote>\n<p>@fitzgen I believe this is ready for review again, let me know if there's pieces I missed in my previous updates.  As noted, I chose to defer fatpointer changes for now to be potentially addressed as part of (or following) changes to the translation stack.</p>\n</blockquote>",
        "id": 525366899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750695349
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2954464208\">PR review</a>:</p>\n<blockquote>\n<p>LGTM modulo a few final comments below, we should be able to merge this and move on to follow ups after they are addressed.</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 525557954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783468
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2164387365\">PR review comment</a>:</p>\n<blockquote>\n<p>Ditto</p>\n</blockquote>",
        "id": 525557955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783468
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2164461278\">PR review comment</a>:</p>\n<blockquote>\n<p>And then construction would become something like this:</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    assert!(env.pointer_type().bits() &lt;= 64);\n    let contref_addr = pos.ins().uextend(ir::types::I28, contref_addr);\n\n    let revision_counter = pos.ins().uextend(ir::types::I128, revision_counter);\n    let shifted_counter = pos.ins().ishl_imm(revision_counter, 64);\n\n    pos.ins().bor(shifted_counter, contref_addr)\n</code></pre></div>\n<p>Note: if you want to switch the order of the contref pointer and the counter in the fat pointer, that's fine (I think I unwittingly switched it from what is in the code now), but the important point is that we should be able do all of this fat pointer construction and destruction without branching on endianness and pointer width.</p>\n</blockquote>",
        "id": 525557956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783468
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2164428969\">PR review comment</a>:</p>\n<blockquote>\n<p>I think it makes sense to <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/tests/disas\">add <code>disas</code> tests</a> for these operations in <code>tests/disas/stack-switching/*</code>. Should be as easy as writing a couple <code>.wat</code> files and then running <code>WASMTIME_TEST_BLESS=1 cargo test --test disas</code> to initialize the golden output.</p>\n<p>Doesn't need to be in this PR, but if not in this PR, then should be added to the tracking issue. </p>\n</blockquote>",
        "id": 525557957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783468
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2164445163\">PR review comment</a>:</p>\n<blockquote>\n<p>Can this just be something like</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    let ptr_ty = env.pointer_type();\n    assert!(ptr_ty.bits() &lt;= 64);\n\n    let contref = pos.ins().ireduce(ptr_ty, contobj);\n\n    let shifted = pos.ins().ushr_imm(contobj, 64);\n    let revision_counter = pos.ins().ireduce(it::types::I64, shifted);\n\n    (revision_counter, contref)\n</code></pre></div>\n<p>?</p>\n<p>That is, we define the fat pointer as 128 bits where the upper 64 are the revision counter and the bottom <code>sizeof(pointer)</code> bits are the pointer to the continuation. This way I don't think we ever have to branch on endianness or pointer width.</p>\n</blockquote>",
        "id": 525557959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783468
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2164387084\">PR review comment</a>:</p>\n<blockquote>\n<p>This shouldn't need to be <code>pub(crate)</code> after the <code>stack_switching</code> module moved to <code>func_environ::stack_switching</code>, right?</p>\n</blockquote>",
        "id": 525557960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783468
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-2959975446\">PR review</a>.</p>",
        "id": 525804894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750895625
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2167824936\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, this makes sense to me, will adopt this approach (with a quick round of testing) until we can split into individual ir values.</p>\n</blockquote>",
        "id": 525804895,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750895626
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 526449992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751304644
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#issuecomment-3024857619\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>:</p>\n<blockquote>\n<p>@fitzgen I am hunting down one regression with the latest, probably around the changes to table ops based on wasm types (though I haven't found a smoking gun yet).  These tests passed prior to some of the latest changes on this branch and the test is doing a table.grow of continuations followed by a resume of the first added to the table which traps on a null reference.</p>\n</blockquote>",
        "id": 526650861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751389409
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 526882800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1751492021
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 528712763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752515432
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#issuecomment-3070453116\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>:</p>\n<blockquote>\n<p>Pulled in and resolved conflicts (some pretty mild ones from <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11216\">https://github.com/bytecodealliance/wasmtime/pull/11216</a>.  @fitzgen Review would be appreciated; I think in our last convos I had played around with a different fatpointer impl but I'm fine with this as-is (possibly to revisit later on).</p>\n</blockquote>",
        "id": 528713211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752515597
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 528713378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752515657
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-3017296649\">PR review</a>.</p>",
        "id": 528715501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752516471
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2205517257\">PR review comment</a>:</p>\n<blockquote>\n<p>This field is already public.</p>\n</blockquote>",
        "id": 528715502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752516472
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2205519101\">PR review comment</a>:</p>\n<blockquote>\n<p>Why is this necessary? Wasm doesn't have 128bit integers.</p>\n</blockquote>",
        "id": 528715656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752516535
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-3017300172\">PR review</a>.</p>",
        "id": 528715657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752516535
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-3017417112\">PR review</a>.</p>",
        "id": 528720911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752518914
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2205589105\">PR review comment</a>:</p>\n<blockquote>\n<p>At least in this iteration of the changes, the stack switching code is using an i128 for it's vmcontobj fat pointer (consisting of vmcontref pointer and revision).  @fitzgen and I have discussed a bit about how we can get rid of this and just have two ir values through the transformation, but it will require some additional changes to how we model the relationship between wasm and clif values to support having one of the former map to two distinct ir values.</p>\n</blockquote>",
        "id": 528720912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752518914
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-3017450869\">PR review</a>.</p>",
        "id": 528722998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752519754
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2205611230\">PR review comment</a>:</p>\n<blockquote>\n<p>I'll remove this in favor of using the pub field directly; probably just a miss on the visibility when the wasmfx contributors originally authored these changes (looks like field has been pub for a long time).</p>\n</blockquote>",
        "id": 528722999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752519754
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 528724271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752520258
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 529950058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753124310
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-3052723095\">PR review</a>:</p>\n<blockquote>\n<p>LGTM! Couple final nitpicks before this lands, but once those are addressed, feel free to add it to the merge queue or ask me to do that (I forget if you have those permissions or not).</p>\n<p>Thanks for sticking through with this one!</p>\n</blockquote>",
        "id": 530623586,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753381933
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2229226724\">PR review comment</a>:</p>\n<blockquote>\n<p>This field is only accessed in a submodule, so it does not need to be <code>pub(crate)</code>.</p>\n</blockquote>",
        "id": 530623587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753381933
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2229230264\">PR review comment</a>:</p>\n<blockquote>\n<p>Similarly, this is only accessed in submodules as well, and not across crate boundaries at all, so it does not need to be <code>pub</code>.</p>\n</blockquote>",
        "id": 530623588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753381933
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2229243182\">PR review comment</a>:</p>\n<blockquote>\n<p>And then this should be something like</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        u8::try_from(align(\n            u32::from(self.vmcontobj_revision())\n                + u32::try_from(core::mem::size_of::&lt;u64&gt;()).unwrap(),\n            u32::from(self.size()),\n        ))\n        .unwrap()\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 530623589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753381933
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2229237980\">PR review comment</a>:</p>\n<blockquote>\n<p>To work across non-64-bit ISAs, which we support today via, for example, the 32-bit Pulley interpreter, this needs to be</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        self.size()\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 530623590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753381933
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2229248535\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think this align(16) needs to be here anymore, as described in the deleted <code>FIXME</code> comment? But if we are leaving it, then we should have a follow up item to investigate in the meta issue and also should adjust the <code>size_of_vmcontobj</code> method above to align to 16 instead of the natural alignment that my suggestion comment sketched out.</p>\n</blockquote>",
        "id": 530623591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753381933
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-3053411334\">PR review</a>.</p>",
        "id": 530650335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753392707
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2229622936\">PR review comment</a>:</p>\n<blockquote>\n<p>I wasn't sure if we wanted to pad out this struct to always be packed as 128 bits or as two words.  I think two words makes more sense and aligns with what you are saying but means that the cranelift generated code will definitely need to be updated to be able to support 32-bit target architectures (probably along with changes discussed before to change how we do the fatpointer handling).</p>\n<p>I'll land changes after thinking this a bit more and update the meta-issue with any notes on 32-bit targets.</p>\n</blockquote>",
        "id": 530650338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753392708
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 536320341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756247084
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#issuecomment-3228668740\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>:</p>\n<blockquote>\n<p>@posborne is this ready for review now?</p>\n</blockquote>",
        "id": 536445555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756308289
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#issuecomment-3228847906\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>:</p>\n<blockquote>\n<p>@fitzgen Yes, should be ready for review -- I'll just push a fixup for the CI issues.  I sent a side note in zulip but I'll repost here:</p>\n<blockquote>\n<p>Ok, I got around to updating the branch with (hopefully) a final set of changes. Since we had been going back-and-forth on VMContObj alignment a bit I did end up changing this to natural alignment with revision now being defined as a usize.</p>\n<p>Along with that I updated the cranelift fatpointer code and libcalls to work with the usize and to use an appropriate fat pointer container ir type for two words -- for this I had to plumb through a size type for that layer matching what exists for components (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003/commits/078002aa024fe825f148f9dbcf864049bcf708ba\">https://github.com/bytecodealliance/wasmtime/pull/11003/commits/078002aa024fe825f148f9dbcf864049bcf708ba</a>).</p>\n<p>Since the changes were a bit more substantive I will wait for a fresh review of that -- there were some merge conflicts related to the other changes in func_environ but they were pretty straightforward to address.</p>\n<p>In parallel, I'll work on a rebase of the test changes to get a bit of extra validation as there isn't a lot in tree to cover things end-to-end on its own.</p>\n</blockquote>\n</blockquote>",
        "id": 536454407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756310988
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 536456337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756311649
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#issuecomment-3229467019\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>:</p>\n<blockquote>\n<p>@fitzgen I did run the test changes now -- a subset of those tests are now failing as it looks like there are some codepaths hit due to upstream changes where we end up calling <code>Val::null_top</code> which currently panics for continuation types.</p>\n</blockquote>",
        "id": 536483924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756322396
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 536505359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756334973
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 536505493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756335075
    },
    {
        "content": "<p>posborne <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#issuecomment-3229994059\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>:</p>\n<blockquote>\n<blockquote>\n<p>@fitzgen I did run the test changes now -- a subset of those tests are now failing as it looks like there are some codepaths hit due to upstream changes where we end up calling Val::null_top which currently panics for continuation types.</p>\n</blockquote>\n<p>To get tests going with the upstream stuff, I did end up adding a minimal <code>Val::ContRef</code> member which doesn't seem avoidable.  I tried to keep this as small and I could bundle it with the test changes, but it does appear to be required in order to have ref.null globals for continuations and some other cases.</p>\n</blockquote>",
        "id": 536505764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756335259
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#issuecomment-3231268137\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:x64\", \"wasmtime:api\", \"wasmtime:ref-types\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: wasmtime:ref-types</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 536520375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756347288
    },
    {
        "content": "<p><strong>posborne</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 536643449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756398104
    },
    {
        "content": "<p><strong>posborne</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 536643451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756398104
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 536643452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756398105
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#issuecomment-3234399931\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\", \"wasmtime:c-api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 536656646,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756403091
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-3166231115\">PR review</a>:</p>\n<blockquote>\n<p>LGTM with the below addressed, thanks!</p>\n</blockquote>",
        "id": 536672460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756409730
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2308346750\">PR review comment</a>:</p>\n<blockquote>\n<p>This should still zero the global's definition, no?</p>\n</blockquote>",
        "id": 536672461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756409731
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2308349488\">PR review comment</a>:</p>\n<blockquote>\n<p>And similar here</p>\n</blockquote>",
        "id": 536672462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756409731
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-3166309175\">PR review</a>.</p>",
        "id": 536675170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756411075
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2308403125\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, definitely.</p>\n</blockquote>",
        "id": 536675171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756411075
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 536676488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756411693
    },
    {
        "content": "<p>posborne has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 536676671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756411790
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 536696957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756424386
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 536836715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756489804
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 536841302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756491723
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-3169656717\">PR review</a>.</p>",
        "id": 536841481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756491811
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2310810947\">PR review comment</a>:</p>\n<blockquote>\n<p>This stuff should be a method on the <code>PtrSize</code> trait that we define in <code>vmoffsets.rs</code> (maybe <code>fn vm_host_array_layout(&amp;self) -&gt; (u8, u32)</code>) and ultimately we should have access to that method here via <code>env.offsets.ptr</code>.</p>\n<p>We should definitely avoid any kind of <code>std::mem::{size,align}_of</code> calls, as that ends up being pretty fragile (doesn't work for <code>f64</code> across 32- and 64-bit architectures, for example, where the alignment is different despite size being the same).</p>\n</blockquote>",
        "id": 536841483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756491812
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-3169672962\">PR review</a>.</p>",
        "id": 536841938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756492034
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2310823200\">PR review comment</a>:</p>\n<blockquote>\n<p>To clarify a little more:</p>\n<p>To avoid the <code>std::mem::{size,align}_of</code> calls, you may have to have different <code>PtrSize</code> methods for each concrete <code>T</code> that is used, and then bound <code>T</code> by <code>T: HostArrayLayout</code> and define</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HostArrayLayout</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">host_array_layout</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">PtrSize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">P</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and implement that for each concreate <code>T</code> such that it calls the appropriate <code>PtrSize</code> method.</p>\n</blockquote>",
        "id": 536841940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756492035
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-3169679543\">PR review</a>.</p>",
        "id": 536842355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756492229
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2310828306\">PR review comment</a>:</p>\n<blockquote>\n<p>Makes sense, I'll take a look at making changes to revise VMHostArray and any other problematic parts I can find (or see if @dhil can help out).  I wanted to get a basic version of the commit up to get this kind of feedback as doing operations on the generic T here (from the original impl) seemed problematic for the reasons you describe.</p>\n</blockquote>",
        "id": 536842358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756492230
    },
    {
        "content": "<p>posborne updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 537346600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756839069
    },
    {
        "content": "<p><strong>posborne</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 537741396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757015675
    },
    {
        "content": "<p>posborne submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-3186981110\">PR review</a>.</p>",
        "id": 537741489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757015710
    },
    {
        "content": "<p>posborne created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2323358549\">PR review comment</a>:</p>\n<blockquote>\n<p>Addressed in 9343ab99f2c07fb3f2a4dd778142422da9202d3f if my interpretation was correct.</p>\n</blockquote>",
        "id": 537741490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757015710
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-3187357718\">PR review</a>.</p>",
        "id": 537760878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757022605
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#discussion_r2323624201\">PR review comment</a>:</p>\n<blockquote>\n<p>Looks good, thanks!</p>\n</blockquote>",
        "id": 537760879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757022605
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003#pullrequestreview-3187360262\">PR review</a>.</p>",
        "id": 537760999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757022678
    },
    {
        "content": "<p>posborne merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11003\">PR #11003</a>.</p>",
        "id": 537764091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757024422
    }
]