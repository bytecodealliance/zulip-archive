[
    {
        "content": "<p>jdejaegh opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11700\">issue #11700</a>:</p>\n<blockquote>\n<p>Hello,</p>\n<p>I recently updated the wasmtime dependency in one of my projects (from v32 to v36, to be on the LTS). I am mainly using the component model and resources. Since the update, I am having trouble understanding how to deal with the data in the <code>Store</code>.  </p>\n<p>Here is my use-case: I use components to update methods of structs at runtime. I wrote a procedural macro to generate the code needed to check if a component is available to update the method at runtime. If a component is available, I load it and call the corresponding function in the component. To have a meaningful example, I removed the procedural macro part and reduced the code to a minimum (non) working example.</p>\n<p>In wasmtime v32, I could handle a call to a method as follows:</p>\n<p>```rust<br>\n    pub fn greet(&amp;self) {<br>\n        let plugin = get_wasm_component(\"person_plugin\");<br>\n        if let Ok((engine, component, mut linker)) = plugin {<br>\n            let mut data = StatePerson::default();<br>\n            let res_idx = 0_u32;<br>\n            data.person_table.insert(res_idx, MaybePerson::NotMut(self));<br>\n            let self_res = Resource::new_borrow(res_idx);</p>\n<div class=\"codehilite\"><pre><span></span><code>        let mut store = Store::new(&amp;engine, data);\n        person_bindings::example::plugin::imp::add_to_linker(&amp;mut linker, |state| state).unwrap();\n        person_bindings::example::plugin::printer::add_to_linker(&amp;mut linker, |state| state).unwrap();\n\n        let bindings = person_bindings::PersonPlugin::instantiate(&amp;mut store, &amp;component, &amp;linker).unwrap();\n        bindings.call_greet(&amp;mut store, self_res).unwrap()\n    } else { self.greet_internal() } \n}\n</code></pre></div>\n\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Since</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">updated</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">v36</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">am</span><span class=\"w\"> </span><span class=\"n\">unable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">logic</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">change</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">probably</span><span class=\"w\"> </span><span class=\"n\">introduced</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"n\">between</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"mi\">36</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">probably</span><span class=\"w\"> </span><span class=\"n\">related</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"c1\">//github.com/bytecodealliance/wasmtime/pull/10760.</span>\n\n<span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">added</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">annotations</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">add_to_linker</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">complains</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">:</span>\n\n<span class=\"err\">```</span><span class=\"n\">text</span>\n\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0521</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">borrowed</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"n\">escapes</span><span class=\"w\"> </span><span class=\"n\">outside</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">method</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">65</span><span class=\"p\">:</span><span class=\"mi\">29</span>\n<span class=\"w\">   </span><span class=\"o\">|</span>\n<span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"o\">-----</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"o\">|</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"err\">`</span><span class=\"bp\">self</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">body</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"kd\">let</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"mi\">1</span><span class=\"err\">`</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"mi\">65</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">);</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                             </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                             </span><span class=\"o\">|</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                             </span><span class=\"err\">`</span><span class=\"bp\">self</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">escapes</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"n\">here</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                             </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">outlive</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"err\">`</span>\n</code></pre></div>\n<p>As I understand, the compiler wants me to have a <code>'static</code> lifetime on <code>self</code> (which I don't really want to have). I tried to have the <code>store</code> destroyed at the end of the function by calling <code>store.into_data()</code> without success.</p>\n<p>Is there a way to use wasmtime v36 in this setup? </p>\n<p>Here is a minimum working example of my code: <a href=\"https://github.com/jdejaegh/wasmtime-32-to-36-bug\">https://github.com/jdejaegh/wasmtime-32-to-36-bug</a></p>\n<p>Thanks for the help :)</p>\n</blockquote>",
        "id": 539705817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758009607
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11700#issuecomment-3298758658\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11700\">issue #11700</a>:</p>\n<blockquote>\n<p>Thanks for the report, and this is indeed an intentional consequence of <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10760\">https://github.com/bytecodealliance/wasmtime/pull/10760</a>. Unfortunately there's no simple trick to get previous code relying on non-<code>'static</code> values working like it was before. Various refactorings you could possibly apply are:</p>\n<ul>\n<li>You could store <code>data</code> in TLS via a mechanism like scoped-tls. This would mean your <code>T</code> in <code>Store&lt;T&gt;</code> would be <code>()</code> or something trivial and data would actually be accessed through TLS.</li>\n<li>You could refactor data in <code>self</code> to be clone-able or otherwise not connected to <code>self</code>. For example using <code>Rc</code> or <code>Arc</code> or similar.</li>\n<li>You could \"lie\" and have the store data be <code>*const Foo</code> to subvert the borrow checker (I wouldn't recommend this though)</li>\n</ul>\n</blockquote>",
        "id": 539768054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758029008
    },
    {
        "content": "<p>jdejaegh closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11700\">issue #11700</a>:</p>\n<blockquote>\n<p>Hello,</p>\n<p>I recently updated the wasmtime dependency in one of my projects (from v32 to v36, to be on the LTS). I am mainly using the component model and resources. Since the update, I am having trouble understanding how to deal with the data in the <code>Store</code>.  </p>\n<p>Here is my use-case: I use components to update methods of structs at runtime. I wrote a procedural macro to generate the code needed to check if a component is available to update the method at runtime. If a component is available, I load it and call the corresponding function in the component. To have a meaningful example, I removed the procedural macro part and reduced the code to a minimum (non) working example.</p>\n<p>In wasmtime v32, I could handle a call to a method as follows:</p>\n<p>```rust<br>\n    pub fn greet(&amp;self) {<br>\n        let plugin = get_wasm_component(\"person_plugin\");<br>\n        if let Ok((engine, component, mut linker)) = plugin {<br>\n            let mut data = StatePerson::default();<br>\n            let res_idx = 0_u32;<br>\n            data.person_table.insert(res_idx, MaybePerson::NotMut(self));<br>\n            let self_res = Resource::new_borrow(res_idx);</p>\n<div class=\"codehilite\"><pre><span></span><code>        let mut store = Store::new(&amp;engine, data);\n        person_bindings::example::plugin::imp::add_to_linker(&amp;mut linker, |state| state).unwrap();\n        person_bindings::example::plugin::printer::add_to_linker(&amp;mut linker, |state| state).unwrap();\n\n        let bindings = person_bindings::PersonPlugin::instantiate(&amp;mut store, &amp;component, &amp;linker).unwrap();\n        bindings.call_greet(&amp;mut store, self_res).unwrap()\n    } else { self.greet_internal() } \n}\n</code></pre></div>\n\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Since</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">updated</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">v36</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">am</span><span class=\"w\"> </span><span class=\"n\">unable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">logic</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">change</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">probably</span><span class=\"w\"> </span><span class=\"n\">introduced</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"n\">between</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"mi\">36</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">probably</span><span class=\"w\"> </span><span class=\"n\">related</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"c1\">//github.com/bytecodealliance/wasmtime/pull/10760.</span>\n\n<span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">added</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">annotations</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">add_to_linker</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">complains</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">:</span>\n\n<span class=\"err\">```</span><span class=\"n\">text</span>\n\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0521</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">borrowed</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"n\">escapes</span><span class=\"w\"> </span><span class=\"n\">outside</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">method</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">65</span><span class=\"p\">:</span><span class=\"mi\">29</span>\n<span class=\"w\">   </span><span class=\"o\">|</span>\n<span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"o\">-----</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"o\">|</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"err\">`</span><span class=\"bp\">self</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">body</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"kd\">let</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"mi\">1</span><span class=\"err\">`</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"mi\">65</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">);</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                             </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                             </span><span class=\"o\">|</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                             </span><span class=\"err\">`</span><span class=\"bp\">self</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">escapes</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"n\">here</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                             </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">outlive</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"err\">`</span>\n</code></pre></div>\n<p>As I understand, the compiler wants me to have a <code>'static</code> lifetime on <code>self</code> (which I don't really want to have). I tried to have the <code>store</code> destroyed at the end of the function by calling <code>store.into_data()</code> without success.</p>\n<p>Is there a way to use wasmtime v36 in this setup? </p>\n<p>Here is a minimum working example of my code: <a href=\"https://github.com/jdejaegh/wasmtime-32-to-36-bug\">https://github.com/jdejaegh/wasmtime-32-to-36-bug</a></p>\n<p>Thanks for the help :)</p>\n</blockquote>",
        "id": 540441670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758284362
    },
    {
        "content": "<p>jdejaegh <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11700#issuecomment-3311981674\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11700\">issue #11700</a>:</p>\n<blockquote>\n<p>Thanks for the reply.  Unfortunately, none of the options suggested worked with the example.</p>\n<ol>\n<li>Using a TLS requires that the data in there is <code>'static</code> as well.  This would include <code>self</code> which is not possible to have <code>'static</code> here.</li>\n<li>The crate I want to produce should be \"<code>self</code>-agnostic\": what is in <code>self</code> should not prevent the call from working.  The goal is to provide a macro to users so they can apply it on any struct and have some methods replaced by WebAssembly calls.  I would like to avoid restricting what <code>self</code> can be.</li>\n<li>I did not investigate much in the last option.</li>\n</ol>\n<p>I ended up using the unsafe <code>std::mem::transmute</code> similarly to what was done in <code>wasmtime 32</code>: convert the lifetime to <code>'static</code>.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/v32.0.0/crates/wasmtime/src/runtime/store.rs#L609-L620\">https://github.com/bytecodealliance/wasmtime/blob/v32.0.0/crates/wasmtime/src/runtime/store.rs#L609-L620</a></p>\n<p>Here is how I applied it in my case:</p>\n<p><div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span>    let mut data = StatePerson::default();\n<span class=\"w\"> </span>    let res_idx = 0_u32;\n<span class=\"gd\">-    data.person_table.insert(res_idx, MaybePerson::NotMut(self));</span>\n<span class=\"gi\">+    data.person_table.insert(res_idx, MaybePerson::NotMut(unsafe {std::mem::transmute::&lt;&amp;'_ Person, &amp;'static Person&gt;(self)}));</span>\n<span class=\"w\"> </span>    let self_res = Resource::new_borrow(res_idx);\n\n<span class=\"w\"> </span>    let mut store = Store::new(&amp;engine, data);\n<span class=\"w\"> </span>```\n~~~\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 540441672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1758284362
    }
]