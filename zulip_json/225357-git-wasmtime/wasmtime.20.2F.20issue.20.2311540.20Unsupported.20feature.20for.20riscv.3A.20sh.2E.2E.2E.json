[
    {
        "content": "<p>12101111 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11540\">issue #11540</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Test case from <a href=\"https://github.com/WebAssembly/testsuite/blob/main/address.wast\">https://github.com/WebAssembly/testsuite/blob/main/address.wast</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"8u_bad\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"cp\">$i</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">load8_u</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"cp\">$i</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"s\">\"riscv64gc-unknown-none\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">memory_init_cow</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">memory_reservation</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">memory_reservation_for_growth</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">signals_based_traps</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">r#\"</span>\n<span class=\"s\">(module</span>\n<span class=\"s\">  (memory 1)</span>\n<span class=\"s\">  (data (i32.const 0) \"abcdefghijklmnopqrstuvwxyz\")</span>\n\n<span class=\"s\">  (func (export \"8u_bad\") (param $i i32)</span>\n<span class=\"s\">    (drop (i32.load8_u offset=4294967295 (local.get $i)))</span>\n<span class=\"s\">  )</span>\n<span class=\"s\">)</span>\n<span class=\"s\">    \"#</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">precompile_module</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>It should compile.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Unsupported</span><span class=\"w\"> </span><span class=\"n\">feature</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">should</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ISLE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uadd_overflow</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x0001_0000_0000</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">I64</span><span class=\"p\">)</span><span class=\"err\">`</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: e767c56b824e5ce8947997b052859e050419d35b and 36.0</p>\n<p>Operating system: Linux</p>\n<p>Architecture: riscv64gc<br>\n</p>\n</blockquote>",
        "id": 536236437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756214756
    },
    {
        "content": "<p><a href=\"https://github.com/12101111\">12101111</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11540\">Issue #11540</a>.</p>",
        "id": 536236441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756214756
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the cranelift:area:riscv64 label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11540\">Issue #11540</a>.</p>",
        "id": 536244337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756216851
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the good first issue label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11540\">Issue #11540</a>.</p>",
        "id": 536648718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756400041
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the cranelift:E-compiler label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11540\">Issue #11540</a>.</p>",
        "id": 536648720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756400042
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the cranelift:E-compiler-easy label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11540\">Issue #11540</a>.</p>",
        "id": 536648721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756400042
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11540#issuecomment-3234255207\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11540\">issue #11540</a>:</p>\n<blockquote>\n<p>Thanks for filing this issue, @12101111.</p>\n<p>FWIW, this is a pretty good first issue for Cranelift stuff, if anyone wants to dip their toes into compiler hacking! We just need to add a lowering rule for <code>uadd_overflow</code> to <code>cranelift/codegen/src/isa/riscv64/lower.isle</code> similar to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4e9865c76837b9f8e6e5c7e\">the <code>uadd_overflow</code> rules we have for aarch64</a>.</p>\n</blockquote>",
        "id": 536649223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756400242
    },
    {
        "content": "<p>thatrajeevkr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11540#issuecomment-3240430788\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11540\">issue #11540</a>:</p>\n<blockquote>\n<p>can i work on this? </p>\n</blockquote>",
        "id": 537010146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756676185
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11540#issuecomment-3240451029\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11540\">issue #11540</a>:</p>\n<blockquote>\n<p>@thatrajeevkr yes, as noted above this is a good first issue -- no permission needed; feel free to submit a PR!</p>\n</blockquote>",
        "id": 537012103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756678478
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11540\">issue #11540</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Test case from <a href=\"https://github.com/WebAssembly/testsuite/blob/main/address.wast\">https://github.com/WebAssembly/testsuite/blob/main/address.wast</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"8u_bad\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"cp\">$i</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">load8_u</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"cp\">$i</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"s\">\"riscv64gc-unknown-none\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">memory_init_cow</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">memory_reservation</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">memory_reservation_for_growth</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">signals_based_traps</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">r#\"</span>\n<span class=\"s\">(module</span>\n<span class=\"s\">  (memory 1)</span>\n<span class=\"s\">  (data (i32.const 0) \"abcdefghijklmnopqrstuvwxyz\")</span>\n\n<span class=\"s\">  (func (export \"8u_bad\") (param $i i32)</span>\n<span class=\"s\">    (drop (i32.load8_u offset=4294967295 (local.get $i)))</span>\n<span class=\"s\">  )</span>\n<span class=\"s\">)</span>\n<span class=\"s\">    \"#</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">precompile_module</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>It should compile.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Unsupported</span><span class=\"w\"> </span><span class=\"n\">feature</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">should</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ISLE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uadd_overflow</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x0001_0000_0000</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">I64</span><span class=\"p\">)</span><span class=\"err\">`</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: e767c56b824e5ce8947997b052859e050419d35b and 36.0</p>\n<p>Operating system: Linux</p>\n<p>Architecture: riscv64gc<br>\n</p>\n</blockquote>",
        "id": 537523684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1756920304
    }
]