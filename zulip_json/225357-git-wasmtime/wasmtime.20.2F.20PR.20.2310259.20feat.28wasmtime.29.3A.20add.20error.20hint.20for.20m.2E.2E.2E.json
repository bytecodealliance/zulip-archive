[
    {
        "content": "<p>vados-cosmonic opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10259\">PR #10259</a> from <code>vados-cosmonic:feat(wasmtime)=add-error-hint-for-missing-wasi-flags</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit adds some code to print an error hint when a failed <code>wasmtime run</code> command could have been called with arguments (in particular <code>-S &lt;capability&gt;</code>) that would have enabled the command to succeed.</p>\n<p>Output looks like this, when running a module that imports <code>wasi:http</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">warning</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">missing</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">http</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"o\">@</span><span class=\"mf\">0.2.2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">option</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">http</span><span class=\"p\">]</span><span class=\"w\">  </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">enabled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">consider</span><span class=\"w\"> </span><span class=\"n\">re</span><span class=\"o\">-</span><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">'-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"o\">'</span><span class=\"p\">.</span>\n<span class=\"n\">Run</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">help</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">full</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">options</span><span class=\"p\">.</span>\n\n<span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">http_hello_world</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">component</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">http</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"o\">@</span><span class=\"mf\">0.2.2</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">matching</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">linker</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">instance</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">fields</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"> </span><span class=\"k\">type</span>\n</code></pre></div>\n<p>There are a few bits left to figure out (ex. <em>seems</em> like wit-parser doesn't yet have any shared/reusable relatively simple function for parsing import names into constituent parts?), but wanted to put up a draft to get some feedback, and make sure this is even desirable for maintainers.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 500947413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740077139
    },
    {
        "content": "<p>vados-cosmonic updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10259\">PR #10259</a>.</p>",
        "id": 500949294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740077750
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10259#issuecomment-2675223927\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10259\">PR #10259</a>:</p>\n<blockquote>\n<p>Personally I'm always a fan of improving error messages, so overall seems like a good idea.</p>\n<p>For the specifics though I'd prefer to try to get more structured data here as opposed to having stringly-typed error messages with string searching for when to print an error. For example we could add a dedicated error type which indicates exactly which import was not found (e.g. <code>ComponentImportNotFound</code> or something like that) to extract the missing one. Matching that to a WASI interface, and then to a flag, is going to be a bit trickier and that's where some more \"stringly-typed\" things may need to come into play (or just rough heuristics).</p>\n<p>Using <code>wit-parser</code> here I'll note that the dependency doesn't already exist at runtime. There's additionally not WIT embedded in the CLI itself. In theory the <code>generate!</code> macro could generate extra structures to detect \"is this import supplied by this\" but then that also runs into version numbers and matching and such.</p>\n<p>Basically I think it'll be unfortunately pretty nontrivial to present a good error message here, so to improve things it's probably necessary to accept false positives/negatives for the time being.</p>\n</blockquote>",
        "id": 501159714,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740161281
    },
    {
        "content": "<p>vados-cosmonic <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10259#issuecomment-2675887148\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10259\">PR #10259</a>:</p>\n<blockquote>\n<blockquote>\n<p>For the specifics though I'd prefer to try to get more structured data here as opposed to having stringly-typed error messages with string searching for when to print an error. For example we could add a dedicated error type which indicates exactly which import was not found (e.g. ComponentImportNotFound or something like that) to extract the missing one. Matching that to a WASI interface, and then to a flag, is going to be a bit trickier and that's where some more \"stringly-typed\" things may need to come into play (or just rough heuristics).</p>\n</blockquote>\n<p>Yeah I definitely agree that it'd be better to have a structured error here -- given that we don't yet have a unified way to parse/represent the text of an import name (AFAIK, outside a <code>Resolve</code>), I figured that might be a bit difficult to get perfectly (we might end up passing a string anyway as the import name?).</p>\n<blockquote>\n<p>Basically I think it'll be unfortunately pretty nontrivial to present a good error message here, so to improve things it's probably necessary to accept false positives/negatives for the time being.</p>\n</blockquote>\n<p>Yeah what do you think would be a good way to proceed here? To just print the message regardless of error contents, maybe as a general <code>hint</code> ?</p>\n</blockquote>",
        "id": 501209909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740185173
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10259#issuecomment-2679782331\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10259\">PR #10259</a>:</p>\n<blockquote>\n<p>A possible idea:</p>\n<ul>\n<li>Add a dedicated type to <code>wasmtime::component::Linker</code> where the error type represents \"this failed to link because some import was missing\" or something like that.</li>\n<li>The CLI detects this case and then falls back to something to possibly add more context to the error that <code>wasmtime::component::Linker</code> generated</li>\n<li>This \"add context\" method would look something along the lines of:<ul>\n<li>Enable all <code>-S...</code> options and attempt to create an <code>InstancePre</code>. If that fails then don't add context and just return an error.</li>\n<li>If that succeeds then for every <code>-S</code> option turn it back off and see if creation of <code>InstancePre</code> still fails. If creation succeeds, leave it off, otherwise leave it on.</li>\n<li>At the end diff <code>-S</code> options with what the user provided, adding context to the error saying \"did you mean <code>-Scli,http</code>\" or similar</li>\n</ul>\n</li>\n</ul>\n<p>That's a little involved but in theory should be pretty robust in the face adding/removing methods over time and such. It'd also handle the case of something like <code>-Sexit-with-code</code> which is pretty different from cases of \"the entire interface is missing\"</p>\n</blockquote>",
        "id": 501659446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740435285
    },
    {
        "content": "<p>vados-cosmonic <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10259#issuecomment-2684469258\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10259\">PR #10259</a>:</p>\n<blockquote>\n<p>Thanks for the basic layout of the plan! That sounds good -- a bit surprised with the creating of the <code>InstancePre</code> being the best way to test -- I was thinking that we could look up based on the type information coming back from the error, but I guess the idea is that we can do this approach <em>without</em> trying to pass along <em>which</em> import was broken?</p>\n</blockquote>",
        "id": 502003835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740563673
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10259#issuecomment-2685559390\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10259\">PR #10259</a>:</p>\n<blockquote>\n<p>Yeah that's the theory, and also relying on all the same machinery in wasmtime for type-checking and stuff without replicating it in the CLI</p>\n</blockquote>",
        "id": 502088905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1740586982
    },
    {
        "content": "<p>vados-cosmonic closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10259\">PR #10259</a>.</p>",
        "id": 513919530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745426688
    },
    {
        "content": "<p>vados-cosmonic <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10259#issuecomment-2824915331\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10259\">PR #10259</a>:</p>\n<blockquote>\n<p>Closing this for now for when I can get back to it to avoid clogging up the active PR list!</p>\n</blockquote>",
        "id": 513919532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745426689
    }
]