[
    {
        "content": "<p>dicej opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a> from <code>dicej:generalized-fiber-abstraction</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>As part of the work implementing the new Component Model async ABI in the <code>wasip3-prototyping</code> repo, I've generalized the <code>FiberFuture</code> abstraction in <code>wasmtime::runtime::store::async_</code> to support fibers which can either retain exclusive access to the store across suspend points or release it.  The latter allows the store to be used by the <code>component-model-async</code> event loop and/or other fibers to run before the original fiber resumes, which is the key to allowing multiple fibers to run concurrently, passing control of the store back and forth.</p>\n<p>In the case of Pulley, the above generalization means we also need to give each fiber its own <code>Interpreter</code> so that multiple concurrent fibers don't clobber each other's state.</p>\n<p>Concretely, this moves a lot of the code out of <code>async_.rs</code> and into a new <code>fiber.rs</code> submodule which will be shared with the <code>component-model-async</code> implementation.</p>\n<p>This also pulls in a new <code>StoreToken&lt;T&gt;</code> utility which has been useful in <code>wasip3-prototyping</code> to safely convert from a <code>&amp;mut dyn VMStore</code> to a <code>StoreContextMut&lt;'a, T&gt;</code> when we previously witnessed a conversion in the other direction.</p>\n<p>Note that I've added a <code>'static</code> bound to the <code>VMStore</code> trait, which simplifies use of <code>&amp;mut dyn VMStore</code>, avoiding thorny lifetime issues.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 525411676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750715103
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525411677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750715103
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525411678,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750715103
    },
    {
        "content": "<p><strong>dicej</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525411680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750715103
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525412392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750715541
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#pullrequestreview-2954278673\">PR review</a>:</p>\n<blockquote>\n<p>I'll keep taking a look at <code>fiber.rs</code>, but this is at least an initial round of feedback.</p>\n</blockquote>",
        "id": 525558083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783510
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164276663\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind prefixing this with <code>SAFETY:</code>?</p>\n</blockquote>",
        "id": 525558084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783510
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164299005\">PR review comment</a>:</p>\n<blockquote>\n<p>I was surprised how much <code>'static</code> bounds cropped up all over the place from this refactoring and this is what I ended up tracing it back to. This <code>'static</code> can be replaced with <code>'a</code> and with that I believe many transitive callers of this function can also remove <code>'static</code></p>\n<p>&lt;details&gt;</p>\n<p>&lt;summary&gt;diff&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/wasmtime/src/runtime/component/func/typed.rs b/crates/wasmtime/src/runtime/component/func/typed.rs</span>\n<span class=\"gh\">index f87447af7..c378742da 100644</span>\n<span class=\"gd\">--- a/crates/wasmtime/src/runtime/component/func/typed.rs</span>\n<span class=\"gi\">+++ b/crates/wasmtime/src/runtime/component/func/typed.rs</span>\n<span class=\"gu\">@@ -179,7 +179,7 @@ where</span>\n<span class=\"w\"> </span>    ) -&gt; Result&lt;Return&gt;\n<span class=\"w\"> </span>    where\n<span class=\"w\"> </span>        Params: Send + Sync,\n<span class=\"gd\">-        Return: Send + Sync + 'static,</span>\n<span class=\"gi\">+        Return: Send + Sync,</span>\n<span class=\"w\"> </span>    {\n<span class=\"w\"> </span>        let mut store = store.as_context_mut();\n<span class=\"w\"> </span>        assert!(\n<span class=\"gh\">diff --git a/crates/wasmtime/src/runtime/fiber.rs b/crates/wasmtime/src/runtime/fiber.rs</span>\n<span class=\"gh\">index ba34e9e6b..76a89b3e7 100644</span>\n<span class=\"gd\">--- a/crates/wasmtime/src/runtime/fiber.rs</span>\n<span class=\"gi\">+++ b/crates/wasmtime/src/runtime/fiber.rs</span>\n<span class=\"gu\">@@ -585,7 +585,7 @@ unsafe fn suspend_fiber(</span>\n\n<span class=\"w\"> </span>/// Run the specified function on a newly-created fiber and `.await` its\n<span class=\"w\"> </span>/// completion.\n<span class=\"gd\">-pub(crate) async fn on_fiber&lt;R: Send + 'static&gt;(</span>\n<span class=\"gi\">+pub(crate) async fn on_fiber&lt;R: Send&gt;(</span>\n<span class=\"w\"> </span>    store: &amp;mut StoreOpaque,\n<span class=\"w\"> </span>    func: impl FnOnce(&amp;mut StoreOpaque) -&gt; R + Send,\n<span class=\"w\"> </span>) -&gt; Result&lt;R&gt; {\n<span class=\"gu\">@@ -596,7 +596,7 @@ pub(crate) async fn on_fiber&lt;R: Send + 'static&gt;(</span>\n<span class=\"w\"> </span>}\n\n<span class=\"w\"> </span>/// Wrap the specified function in a fiber and return it.\n<span class=\"gd\">-fn prepare_fiber&lt;'a, R: Send + 'static&gt;(</span>\n<span class=\"gi\">+fn prepare_fiber&lt;'a, R: Send + 'a&gt;(</span>\n<span class=\"w\"> </span>    store: &amp;mut dyn VMStore,\n<span class=\"w\"> </span>    func: impl FnOnce(&amp;mut dyn VMStore) -&gt; R + Send + 'a,\n<span class=\"w\"> </span>) -&gt; Result&lt;(StoreFiber&lt;'a&gt;, oneshot::Receiver&lt;R&gt;)&gt; {\n<span class=\"gu\">@@ -612,7 +612,7 @@ fn prepare_fiber&lt;'a, R: Send + 'static&gt;(</span>\n\n<span class=\"w\"> </span>/// Run the specified function on a newly-created fiber and `.await` its\n<span class=\"w\"> </span>/// completion.\n<span class=\"gd\">-async fn on_fiber_raw&lt;R: Send + 'static&gt;(</span>\n<span class=\"gi\">+async fn on_fiber_raw&lt;R: Send&gt;(</span>\n<span class=\"w\"> </span>    store: &amp;mut StoreOpaque,\n<span class=\"w\"> </span>    func: impl FnOnce(&amp;mut dyn VMStore) -&gt; R + Send,\n<span class=\"w\"> </span>) -&gt; Result&lt;R&gt; {\n<span class=\"gh\">diff --git a/crates/wasmtime/src/runtime/func/typed.rs b/crates/wasmtime/src/runtime/func/typed.rs</span>\n<span class=\"gh\">index e9304b755..0df0dcc40 100644</span>\n<span class=\"gd\">--- a/crates/wasmtime/src/runtime/func/typed.rs</span>\n<span class=\"gi\">+++ b/crates/wasmtime/src/runtime/func/typed.rs</span>\n<span class=\"gu\">@@ -132,10 +132,7 @@ where</span>\n<span class=\"w\"> </span>        &amp;self,\n<span class=\"w\"> </span>        mut store: impl AsContextMut&lt;Data: Send&gt;,\n<span class=\"w\"> </span>        params: Params,\n<span class=\"gd\">-    ) -&gt; Result&lt;Results&gt;</span>\n<span class=\"gd\">-    where</span>\n<span class=\"gd\">-        Results: 'static,</span>\n<span class=\"gd\">-    {</span>\n<span class=\"gi\">+    ) -&gt; Result&lt;Results&gt; {</span>\n<span class=\"w\"> </span>        let mut store = store.as_context_mut();\n<span class=\"w\"> </span>        assert!(\n<span class=\"w\"> </span>            store.0.async_support(),\n<span class=\"gh\">diff --git a/crates/wasmtime/src/runtime/store/async_.rs b/crates/wasmtime/src/runtime/store/async_.rs</span>\n<span class=\"gh\">index c34d1dac4..f1c8a7454 100644</span>\n<span class=\"gd\">--- a/crates/wasmtime/src/runtime/store/async_.rs</span>\n<span class=\"gi\">+++ b/crates/wasmtime/src/runtime/store/async_.rs</span>\n<span class=\"gu\">@@ -171,7 +171,7 @@ impl StoreOpaque {</span>\n<span class=\"w\"> </span>    /// This function will convert the synchronous `func` into an asynchronous\n<span class=\"w\"> </span>    /// future. This is done by running `func` in a fiber on a separate native\n<span class=\"w\"> </span>    /// stack which can be suspended and resumed from.\n<span class=\"gd\">-    pub(crate) async fn on_fiber&lt;R: Send + 'static&gt;(</span>\n<span class=\"gi\">+    pub(crate) async fn on_fiber&lt;R: Send&gt;(</span>\n<span class=\"w\"> </span>        &amp;mut self,\n<span class=\"w\"> </span>        func: impl FnOnce(&amp;mut Self) -&gt; R + Send,\n<span class=\"w\"> </span>    ) -&gt; Result&lt;R&gt; {\n<span class=\"gu\">@@ -286,7 +286,7 @@ impl StoreOpaque {</span>\n\n<span class=\"w\"> </span>impl&lt;T&gt; StoreContextMut&lt;'_, T&gt; {\n<span class=\"w\"> </span>    /// Executes a synchronous computation `func` asynchronously on a new fiber.\n<span class=\"gd\">-    pub(crate) async fn on_fiber&lt;R: Send + 'static&gt;(</span>\n<span class=\"gi\">+    pub(crate) async fn on_fiber&lt;R: Send&gt;(</span>\n<span class=\"w\"> </span>        &amp;mut self,\n<span class=\"w\"> </span>        func: impl FnOnce(&amp;mut StoreContextMut&lt;'_, T&gt;) -&gt; R + Send,\n<span class=\"w\"> </span>    ) -&gt; Result&lt;R&gt;\n</code></pre></div>\n<p>&lt;/summary&gt;</p>\n<p>would that be possible to avoid the extra <code>'static</code> cropping up? I can sort of see how component-model-async bits may still require <code>'static</code>, but for preexisting bits in Wasmtime I'd be surprised if it required <code>'static</code>.</p>\n</blockquote>",
        "id": 525558086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783510
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164279145\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind adding some brief comments as to the purpose of this type?</p>\n</blockquote>",
        "id": 525558087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783510
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164282704\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be directly imported at use-sites below to avoid the #[cfg]'d import?</p>\n</blockquote>",
        "id": 525558088,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783510
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164321911\">PR review comment</a>:</p>\n<blockquote>\n<p>This runs a risk of causing problems because the <code>async</code> feature previously I believe didn't require the <code>std</code> feature, and now it does. Would it be possible to refactor to remove the need for the oneshot bits?</p>\n</blockquote>",
        "id": 525558089,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783510
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164402395\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be possible for this to return <code>&amp;mut fiber::AsyncState</code> instead of a raw pointer?</p>\n</blockquote>",
        "id": 525558090,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783510
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164406501\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW this style of imports is currently largely nonexistent within Wasmtime. Would you be ok reformatting this in a style more consistent with the rest of Wasmtime?</p>\n</blockquote>",
        "id": 525558091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783510
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164397754\">PR review comment</a>:</p>\n<blockquote>\n<p>If possible I think it'd be good to do the same to the <code>Send</code> bounds as well, but I haven't gamed that out yet.</p>\n</blockquote>",
        "id": 525558092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783511
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164392181\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not sure how exactly yet, but I'd prefer to avoid this #[cfg] necessity just to access <code>self.executor</code> as it's very easy to forget an non-obvious that it's required.</p>\n</blockquote>",
        "id": 525558093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783511
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164278617\">PR review comment</a>:</p>\n<blockquote>\n<p>In retrospect let's add <code>'static</code> here. There's weird things with variance about extending or shortening lifetimes in types (e.g. being able to safely change a <code>StoreToken&lt;T&gt;</code> to a <code>StoreToken&lt;U&gt;</code> where just the lifetimes differ). Having <code>'static</code> means we wouldn't have to worry about it though.</p>\n</blockquote>",
        "id": 525558094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783511
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164458909\">PR review comment</a>:</p>\n<blockquote>\n<p>Where possible I'd like to aggressively remove <code>pub(crate)</code> from this file. This function for example in wasip3-prototyping is only used elsewhere in <code>Instance::resume_fiber</code> and the implementation looks like a good candidate for moving to this file as a method on <code>StoreFiber&lt;'static&gt;</code>, so could this function be made purely internal?</p>\n</blockquote>",
        "id": 525558095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783511
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164471296\">PR review comment</a>:</p>\n<blockquote>\n<p>This to me feels like it's a safety contract that's a bit too onerous to uphold since none of the callers of this function actually have a <code>&amp;mut StoreOpaque</code> or similar in context. You'd have to travel a layer or two up the stack to actually see that and it feels a bit too \"far\" to me to find the proof of \"ah, yes, ok this is safe\". Would it be possible to actually take <code>&amp;mut StoreOpaque</code> here as an argument? (that would also simplify the executor handling pieces I believe)</p>\n</blockquote>",
        "id": 525558096,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783511
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164464751\">PR review comment</a>:</p>\n<blockquote>\n<p>To expand on this some more, this is a pretty unsafe function and the boundaries of abstraction aren't really that clear to me. Understanding this function in isolation is pretty difficult and I feel it fits best within the context of <code>on_fiber_raw</code> or <code>Instance::resume_fiber</code>, which is where I'd prefer to keep all these unsafe set/reset/restore/etc bits all centralized in one function where possible so it's clear what's responsible for what.</p>\n</blockquote>",
        "id": 525558097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783511
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164472575\">PR review comment</a>:</p>\n<blockquote>\n<p>One of the sticklers for taking an argument is probably <code>Drop for StoreFiber</code>, and that's something where we can soup up the <code>Drop for Store</code> to call a function over here to avoid relying on <code>Drop for StoreFiber</code> (or something like that)</p>\n</blockquote>",
        "id": 525558098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783511
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164475000\">PR review comment</a>:</p>\n<blockquote>\n<p>Well, on second thought, no maybe that's not a good idea. Fibers can't be dropped unless they've finished so that would introduce footguns of forgetting to call the destructor on panics for example (or something like that)...</p>\n<p>If the dtor is a \"special case\" that seems somewhat reasonable </p>\n</blockquote>",
        "id": 525558099,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783511
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164461982\">PR review comment</a>:</p>\n<blockquote>\n<p>Actually, on raeding this more, it looks like <code>Instance::resume_fiber</code> and <code>on_fiber_raw</code> above are more-or-less the same function where the only difference is <code>Instance::resume_fiber</code> can have a different type of return value which <code>on_fiber_raw</code> would assert never happens. Could the methods all get refactored/merged into this file?</p>\n</blockquote>",
        "id": 525558101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750783511
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#pullrequestreview-2954652484\">PR review</a>.</p>",
        "id": 525561169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750784610
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164505735\">PR review comment</a>:</p>\n<blockquote>\n<p>I _think_ you can use <code>oneshot</code> without enabling the <code>futures/std</code> feature, so we might be able to just remove this line.  I'll play around with it.</p>\n</blockquote>",
        "id": 525561170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750784610
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164507319\">PR review comment</a>:</p>\n<blockquote>\n<p>I believe we did this to satisfy miri, but I can retest with <code>&amp;mut</code> and see what happens.</p>\n</blockquote>",
        "id": 525561324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750784668
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#pullrequestreview-2954654843\">PR review</a>.</p>",
        "id": 525561325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750784668
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525566041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750786707
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#pullrequestreview-2954753669\">PR review</a>.</p>",
        "id": 525566198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750786779
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164563613\">PR review comment</a>:</p>\n<blockquote>\n<p>I've applied your patch to remove the <code>'static</code> bounds; let me know if you want me to do the same for <code>Send</code>.</p>\n</blockquote>",
        "id": 525566199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750786779
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164577863\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah if possible I think we should remove <code>Send</code> here too as I think <code>'static</code> and <code>Send</code> are the root of <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/145\">https://github.com/bytecodealliance/wasip3-prototyping/issues/145</a> perhaps?</p>\n</blockquote>",
        "id": 525567149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750787240
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#pullrequestreview-2954777162\">PR review</a>.</p>",
        "id": 525567150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750787241
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164582332\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, miri won't tolerate that:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">scenario</span><span class=\"p\">::</span><span class=\"n\">round_trip</span><span class=\"p\">::</span><span class=\"n\">async_round_trip_stackful</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Undefined</span><span class=\"w\"> </span><span class=\"n\">Behavior</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">attempting</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"mi\">3440249</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">alloc1440939</span><span class=\"p\">[</span><span class=\"mh\">0x18</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">tag</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">exist</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">borrow</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">location</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">dicej</span><span class=\"o\">/</span><span class=\"n\">p</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">fiber</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">444</span><span class=\"p\">:</span><span class=\"mi\">57</span>\n<span class=\"w\">     </span><span class=\"o\">|</span>\n<span class=\"mi\">444</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_reset_executor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Reset</span><span class=\"p\">(</span><span class=\"n\">fiber</span><span class=\"p\">.</span><span class=\"n\">executor_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">fiber</span><span class=\"p\">.</span><span class=\"n\">executor_ptr</span><span class=\"p\">);</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                                         </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                                         </span><span class=\"o\">|</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                                         </span><span class=\"n\">attempting</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"mi\">3440249</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">alloc1440939</span><span class=\"p\">[</span><span class=\"mh\">0x18</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">tag</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">exist</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">borrow</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">location</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                                         </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">occurs</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">part</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">alloc1440939</span><span class=\"p\">[</span><span class=\"mh\">0x18</span><span class=\"o\">..</span><span class=\"mh\">0x20</span><span class=\"p\">]</span>\n<span class=\"w\">     </span><span class=\"o\">|</span>\n<span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">this</span><span class=\"w\"> </span><span class=\"n\">indicates</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">potential</span><span class=\"w\"> </span><span class=\"n\">bug</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">program</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">it</span><span class=\"w\"> </span><span class=\"n\">performed</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">invalid</span><span class=\"w\"> </span><span class=\"n\">operation</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">Stacked</span><span class=\"w\"> </span><span class=\"n\">Borrows</span><span class=\"w\"> </span><span class=\"n\">rules</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">violated</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">experimental</span>\n<span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">see</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"c1\">//github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information</span>\n<span class=\"n\">help</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"mi\">3440249</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">created</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">SharedReadWrite</span><span class=\"w\"> </span><span class=\"n\">retag</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offsets</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0x18</span><span class=\"o\">..</span><span class=\"mh\">0x20</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">dicej</span><span class=\"o\">/</span><span class=\"n\">p</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">fiber</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">476</span><span class=\"p\">:</span><span class=\"mi\">18</span>\n<span class=\"w\">     </span><span class=\"o\">|</span>\n<span class=\"mi\">476</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">store_opaque_mut</span><span class=\"p\">().</span><span class=\"n\">async_state</span><span class=\"p\">()).</span><span class=\"n\">current_executor</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"n\">help</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"mi\">3440249</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">later</span><span class=\"w\"> </span><span class=\"n\">invalidated</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offsets</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mh\">0x0</span><span class=\"o\">..</span><span class=\"mh\">0x38</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">Unique</span><span class=\"w\"> </span><span class=\"n\">retag</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">dicej</span><span class=\"o\">/</span><span class=\"n\">p</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">1947</span><span class=\"p\">:</span><span class=\"mi\">9</span>\n<span class=\"w\">     </span><span class=\"o\">|</span>\n<span class=\"mi\">1947</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">async_state</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^</span>\n</code></pre></div>\n<p>We might be able to address it a different way (e.g. a larger refactoring), though.  Not sure how deep that rabbit hole will go.</p>\n</blockquote>",
        "id": 525567512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750787410
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#pullrequestreview-2954784049\">PR review</a>.</p>",
        "id": 525567513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750787410
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#pullrequestreview-2954863748\">PR review</a>.</p>",
        "id": 525571542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750788930
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164622539\">PR review comment</a>:</p>\n<blockquote>\n<p>Oof, and it looks like miri is upset for other reasons on <code>wasip3-prototyping</code> <code>main</code>; I seem to have caused a regression with the fiber unification PR.  Debugging now.</p>\n</blockquote>",
        "id": 525571543,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750788930
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525572804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750789449
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#pullrequestreview-2954896164\">PR review</a>.</p>",
        "id": 525572905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750789507
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164642190\">PR review comment</a>:</p>\n<blockquote>\n<p>Okay, just pushed a fix for that regression: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114/commits/ae227b658643761ebb3603a428879a826e4f0762\">https://github.com/bytecodealliance/wasmtime/pull/11114/commits/ae227b658643761ebb3603a428879a826e4f0762</a></p>\n</blockquote>",
        "id": 525572907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750789507
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525576974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750791003
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#pullrequestreview-2955308647\">PR review</a>.</p>",
        "id": 525594524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750798781
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164889720\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh I forgot to mention this earlier but FWIW this looks like it's copy/pasted from elsewhere and would be good to deduplicate.</p>\n</blockquote>",
        "id": 525594525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750798781
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2164889387\">PR review comment</a>:</p>\n<blockquote>\n<p>Toying around a bit with wasip3-prototyping, for this to be more sound we're going to want to add <code>Send + Sync</code> to the bounds of <code>fun</code>. That makes the <code>unsafe impl Send/Sync</code> above a bit more sound because it at least accounts for all captured values within <code>fun</code>. The fallout wasn't too large from what I saw and seemed mostly as-expected</p>\n</blockquote>",
        "id": 525594526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750798781
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525605304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750804200
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2165056653\">PR review comment</a>:</p>\n<blockquote>\n<p>We chatted about this over Zoom and concluded that changing the <code>*mut</code> to a <code>&amp;mut</code> would require a larger-scale refactoring to make sound and miri-approved, so we're leaving it as-is for now.</p>\n</blockquote>",
        "id": 525605583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750804374
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#pullrequestreview-2955589694\">PR review</a>.</p>",
        "id": 525605584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750804374
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#pullrequestreview-2955590209\">PR review</a>.</p>",
        "id": 525605637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750804400
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2165057028\">PR review comment</a>:</p>\n<blockquote>\n<p>I've pushed an update which addresses this.</p>\n</blockquote>",
        "id": 525605638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750804401
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525607168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750805395
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525610880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750808019
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525748877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750868367
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525753120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750869899
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525753426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750870019
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525795406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750888103
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525797823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750889750
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525800538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750891826
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525944495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750956322
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525946643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750957061
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525955538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750960685
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525965755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750964554
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525966955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750965198
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525967239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750965379
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525968932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750966296
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#pullrequestreview-2963338286\">PR review</a>:</p>\n<blockquote>\n<p>@dicej ok these are all the changes I'd like to make, mind reviewing the changes I made as well before merging? Afterwards feel free to go ahead and queue this for merge</p>\n</blockquote>",
        "id": 525969099,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750966401
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#pullrequestreview-2963610179\">PR review</a>.</p>",
        "id": 525979295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750971283
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114#discussion_r2169984068\">PR review comment</a>:</p>\n<blockquote>\n<p>This comment is confusing since it refers to nonexistent docs for <code>resume_fiber</code>, and in any case we don't need to handwave about the \"contract\" anymore since <code>resume_fiber</code> now takes an explicit <code>&amp;mut StoreOpaque</code> parameter.  So maybe just say something like \"This fiber will only be resumed using <code>resume_fiber</code>, which takes a <code>&amp;mut StoreOpaque</code> parameter and has given us exclusive access...\".</p>\n</blockquote>",
        "id": 525979296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750971284
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525979929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750971587
    },
    {
        "content": "<p>dicej has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525979956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750971598
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525984158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750973921
    },
    {
        "content": "<p>dicej has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525984183,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750973938
    },
    {
        "content": "<p>dicej merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11114\">PR #11114</a>.</p>",
        "id": 525987140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1750976112
    }
]