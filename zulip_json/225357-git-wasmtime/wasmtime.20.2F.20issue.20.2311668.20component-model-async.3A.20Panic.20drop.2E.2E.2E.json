[
    {
        "content": "<p>alexcrichton assigned dicej to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11668\">issue #11668</a>.</p>",
        "id": 538677886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757517118
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11668\">issue #11668</a>:</p>\n<blockquote>\n<p>This test case:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(component\n  (component $A\n    (core module $a\n      (func (export \"run\") (result i32)\n        i32.const 1)\n      (func (export \"run-cb\") (param i32 i32 i32) (result i32)\n        unreachable)\n    )\n\n    (core instance $a (instantiate $a))\n    (func (export \"run\")\n      (canon lift (core func $a \"run\") async (callback (func $a \"run-cb\"))))\n  )\n  (component $B\n    (import \"a\" (instance $a (export \"run\" (func))))\n\n    (core module $libc (memory (export \"memory\") 1))\n    (core instance $libc (instantiate $libc))\n\n    (core func $run (canon lower (func $a \"run\") async))\n    (core func $new (canon waitable-set.new))\n    (core func $join (canon waitable.join))\n    (core func $drop (canon waitable-set.drop))\n    (core func $wait (canon waitable-set.wait (memory $libc \"memory\")))\n\n    (core module $b\n      (import \"\" \"run\" (func $run_a (result i32)))\n      (import \"\" \"new\" (func $new (result i32)))\n      (import \"\" \"join\" (func $join (param i32 i32)))\n      (import \"\" \"drop\" (func $drop (param i32)))\n      (import \"\" \"wait\" (func $wait (param i32 i32) (result i32)))\n\n      (func (export \"run\")\n        (local $ret i32)\n        (local $set i32)\n\n        (local.set $ret (call $run_a))\n\n        ;; make sure it's in the \"started\" state\n        (if (i32.ne (i32.and (local.get $ret) (i32.const 0xf)) (i32.const 1))\n          (then (unreachable)))\n\n        ;; extract the waitable handle\n        (local.set $ret (i32.shr_u (local.get $ret) (i32.const 4)))\n\n        ;; Make a waitable set and insert our handle into it\n        (local.set $set (call $new))\n        (call $join (local.get $ret) (local.get $set))\n\n        ;; wait for something to happen filling in memory address 4, but don't\n        ;; actually see what happened since this panics right now.\n        (call $wait (local.get $set) (i32.const 4))\n        drop\n      )\n    )\n    (core instance $b (instantiate $b\n      (with \"\" (instance\n        (export \"run\" (func $run))\n        (export \"new\" (func $new))\n        (export \"join\" (func $join))\n        (export \"drop\" (func $drop))\n        (export \"wait\" (func $wait))\n      ))\n    ))\n    (func (export \"run\")\n      (canon lift (core func $b \"run\")))\n  )\n\n  (instance $a (instantiate $A))\n  (instance $b (instantiate $B (with \"a\" (instance $a))))\n  (export \"run\" (func $b \"run\"))\n)\n\n(assert_return (invoke \"run\"))\n</code></pre></div>\n<p>yields:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"o\">-</span><span class=\"n\">model</span><span class=\"o\">-</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wast</span>\n\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">fiber</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">442</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">:</span>\n<span class=\"nc\">attempted</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"o\">-</span><span class=\"n\">progress</span><span class=\"w\"> </span><span class=\"n\">fiber</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">calling</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">StoreFiber</span><span class=\"p\">::</span><span class=\"n\">dispose</span><span class=\"err\">`</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 538677897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757517119
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:component-model-async label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11668\">Issue #11668</a>.</p>",
        "id": 538677898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757517119
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11668\">issue #11668</a>:</p>\n<blockquote>\n<p>This test case:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(component\n  (component $A\n    (core module $a\n      (func (export \"run\") (result i32)\n        i32.const 1)\n      ;; raise a trap in the callback which is what causes the host-side panic\n      (func (export \"run-cb\") (param i32 i32 i32) (result i32)\n        unreachable)\n    )\n\n    (core instance $a (instantiate $a))\n    (func (export \"run\")\n      (canon lift (core func $a \"run\") async (callback (func $a \"run-cb\"))))\n  )\n  (component $B\n    (import \"a\" (instance $a (export \"run\" (func))))\n\n    (core module $libc (memory (export \"memory\") 1))\n    (core instance $libc (instantiate $libc))\n\n    (core func $run (canon lower (func $a \"run\") async))\n    (core func $new (canon waitable-set.new))\n    (core func $join (canon waitable.join))\n    (core func $drop (canon waitable-set.drop))\n    (core func $wait (canon waitable-set.wait (memory $libc \"memory\")))\n\n    (core module $b\n      (import \"\" \"run\" (func $run_a (result i32)))\n      (import \"\" \"new\" (func $new (result i32)))\n      (import \"\" \"join\" (func $join (param i32 i32)))\n      (import \"\" \"drop\" (func $drop (param i32)))\n      (import \"\" \"wait\" (func $wait (param i32 i32) (result i32)))\n\n      (func (export \"run\")\n        (local $ret i32)\n        (local $set i32)\n\n        (local.set $ret (call $run_a))\n\n        ;; make sure it's in the \"started\" state\n        (if (i32.ne (i32.and (local.get $ret) (i32.const 0xf)) (i32.const 1))\n          (then (unreachable)))\n\n        ;; extract the waitable handle\n        (local.set $ret (i32.shr_u (local.get $ret) (i32.const 4)))\n\n        ;; Make a waitable set and insert our handle into it\n        (local.set $set (call $new))\n        (call $join (local.get $ret) (local.get $set))\n\n        ;; wait for something to happen filling in memory address 4, but don't\n        ;; actually see what happened since this panics right now.\n        (call $wait (local.get $set) (i32.const 4))\n        drop\n      )\n    )\n    (core instance $b (instantiate $b\n      (with \"\" (instance\n        (export \"run\" (func $run))\n        (export \"new\" (func $new))\n        (export \"join\" (func $join))\n        (export \"drop\" (func $drop))\n        (export \"wait\" (func $wait))\n      ))\n    ))\n    (func (export \"run\")\n      (canon lift (core func $b \"run\")))\n  )\n\n  (instance $a (instantiate $A))\n  (instance $b (instantiate $B (with \"a\" (instance $a))))\n  (export \"run\" (func $b \"run\"))\n)\n\n(assert_return (invoke \"run\"))\n</code></pre></div>\n<p>yields:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"o\">-</span><span class=\"n\">model</span><span class=\"o\">-</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wast</span>\n\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">fiber</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">442</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">:</span>\n<span class=\"nc\">attempted</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"o\">-</span><span class=\"n\">progress</span><span class=\"w\"> </span><span class=\"n\">fiber</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">calling</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">StoreFiber</span><span class=\"p\">::</span><span class=\"n\">dispose</span><span class=\"err\">`</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 538678013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757517149
    },
    {
        "content": "<p>dicej closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11668\">issue #11668</a>:</p>\n<blockquote>\n<p>This test case:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(component\n  (component $A\n    (core module $a\n      (func (export \"run\") (result i32)\n        i32.const 1)\n      ;; raise a trap in the callback which is what causes the host-side panic\n      (func (export \"run-cb\") (param i32 i32 i32) (result i32)\n        unreachable)\n    )\n\n    (core instance $a (instantiate $a))\n    (func (export \"run\")\n      (canon lift (core func $a \"run\") async (callback (func $a \"run-cb\"))))\n  )\n  (component $B\n    (import \"a\" (instance $a (export \"run\" (func))))\n\n    (core module $libc (memory (export \"memory\") 1))\n    (core instance $libc (instantiate $libc))\n\n    (core func $run (canon lower (func $a \"run\") async))\n    (core func $new (canon waitable-set.new))\n    (core func $join (canon waitable.join))\n    (core func $drop (canon waitable-set.drop))\n    (core func $wait (canon waitable-set.wait (memory $libc \"memory\")))\n\n    (core module $b\n      (import \"\" \"run\" (func $run_a (result i32)))\n      (import \"\" \"new\" (func $new (result i32)))\n      (import \"\" \"join\" (func $join (param i32 i32)))\n      (import \"\" \"drop\" (func $drop (param i32)))\n      (import \"\" \"wait\" (func $wait (param i32 i32) (result i32)))\n\n      (func (export \"run\")\n        (local $ret i32)\n        (local $set i32)\n\n        (local.set $ret (call $run_a))\n\n        ;; make sure it's in the \"started\" state\n        (if (i32.ne (i32.and (local.get $ret) (i32.const 0xf)) (i32.const 1))\n          (then (unreachable)))\n\n        ;; extract the waitable handle\n        (local.set $ret (i32.shr_u (local.get $ret) (i32.const 4)))\n\n        ;; Make a waitable set and insert our handle into it\n        (local.set $set (call $new))\n        (call $join (local.get $ret) (local.get $set))\n\n        ;; wait for something to happen filling in memory address 4, but don't\n        ;; actually see what happened since this panics right now.\n        (call $wait (local.get $set) (i32.const 4))\n        drop\n      )\n    )\n    (core instance $b (instantiate $b\n      (with \"\" (instance\n        (export \"run\" (func $run))\n        (export \"new\" (func $new))\n        (export \"join\" (func $join))\n        (export \"drop\" (func $drop))\n        (export \"wait\" (func $wait))\n      ))\n    ))\n    (func (export \"run\")\n      (canon lift (core func $b \"run\")))\n  )\n\n  (instance $a (instantiate $A))\n  (instance $b (instantiate $B (with \"a\" (instance $a))))\n  (export \"run\" (func $b \"run\"))\n)\n\n(assert_return (invoke \"run\"))\n</code></pre></div>\n<p>yields:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"o\">-</span><span class=\"n\">model</span><span class=\"o\">-</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wast</span>\n\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">fiber</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">442</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">:</span>\n<span class=\"nc\">attempted</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"o\">-</span><span class=\"n\">progress</span><span class=\"w\"> </span><span class=\"n\">fiber</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">calling</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">StoreFiber</span><span class=\"p\">::</span><span class=\"n\">dispose</span><span class=\"err\">`</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 538750010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757546085
    }
]