[
    {
        "content": "<p>kvcache opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10215\">issue #10215</a>:</p>\n<blockquote>\n<p>I'm attempting to compile guest functions using <code>wasm32-unknown-unknown</code>, but I'd like to use the Component model. Trying to parse a guest function as a Component does not work without <code>wasm32-wasip2</code>.</p>\n<p>I don't want to use <code>wasm32-wasip2</code> because I need to define all of my host interfaces.</p>\n<p>Client:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"function\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Function</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">momento</span><span class=\"p\">::</span><span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">function_invoke_post</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Function</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Host fails when parsing wasm byte array:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_bytes</span><span class=\"p\">).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FunctionError</span><span class=\"p\">::</span><span class=\"n\">InvalidWasm</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>When I compile with <code>wasm32-unknown-unknown</code>, it says <code>\"attempted to parse a wasm module with a component parser\"</code>.</p>\n<p>When I compile with <code>wasm32-wasip2</code>, it fails on WASI interfaces I'm not adding to the linker.</p>\n</blockquote>",
        "id": 498884759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739229406
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10215#issuecomment-2649479217\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10215\">issue #10215</a>:</p>\n<blockquote>\n<p>When compiling with <code>wasm32-unknown-unknown</code> rustc emits a WebAssembly Module. You can convert that to a WebAssembly Component with the <code>wasm-tools component new</code> command line tool, or using <a href=\"https://docs.rs/wit-component/latest/wit_component/struct.ComponentEncoder.html\">https://docs.rs/wit-component/latest/wit_component/struct.ComponentEncoder.html</a> directly.</p>\n</blockquote>",
        "id": 498885739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739229784
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10215#issuecomment-2649479217\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10215\">issue #10215</a>:</p>\n<blockquote>\n<p>When compiling with <code>wasm32-unknown-unknown</code> rustc emits a WebAssembly Module. You can convert that to a WebAssembly Component with the <code>wasm-tools component new</code> command line tool, or using <a href=\"https://docs.rs/wit-component/latest/wit_component/struct.ComponentEncoder.html\">https://docs.rs/wit-component/latest/wit_component/struct.ComponentEncoder.html</a> directly.</p>\n<p>The <code>wasm32-wasip2</code> target passes the module emitted by rustc to <code>wasm-component-ld</code> which wraps up the conversion performed above, plus some details to adapt wasip1 interfaces to wasip2, which you don't care about.</p>\n</blockquote>",
        "id": 498885873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739229841
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10215#issuecomment-2649479217\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10215\">issue #10215</a>:</p>\n<blockquote>\n<p>When compiling with <code>wasm32-unknown-unknown</code> rustc emits a WebAssembly Module. You can convert that to a WebAssembly Component with the <code>wasm-tools component new</code> command line tool, or using <a href=\"https://docs.rs/wit-component/latest/wit_component/struct.ComponentEncoder.html\">https://docs.rs/wit-component/latest/wit_component/struct.ComponentEncoder.html</a> directly.</p>\n<p>The <code>wasm32-wasip2</code> target passes the Module emitted by rustc to <code>wasm-component-ld</code> which wraps up the Component conversion performed above, plus some details to adapt wasip1 interfaces to wasip2, which you don't care about.</p>\n</blockquote>",
        "id": 498885952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739229863
    },
    {
        "content": "<p>kvcache closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10215\">issue #10215</a>:</p>\n<blockquote>\n<p>I'm attempting to compile guest functions using <code>wasm32-unknown-unknown</code>, but I'd like to use the Component model. Trying to parse a guest function as a Component does not work without <code>wasm32-wasip2</code>.</p>\n<p>I don't want to use <code>wasm32-wasip2</code> because I need to define all of my host interfaces.</p>\n<p>Client:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"function\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Function</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">momento</span><span class=\"p\">::</span><span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">function_invoke_post</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Function</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Host fails when parsing wasm byte array:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_bytes</span><span class=\"p\">).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FunctionError</span><span class=\"p\">::</span><span class=\"n\">InvalidWasm</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>When I compile with <code>wasm32-unknown-unknown</code>, it says <code>\"attempted to parse a wasm module with a component parser\"</code>.</p>\n<p>When I compile with <code>wasm32-wasip2</code>, it fails on WASI interfaces I'm not adding to the linker.</p>\n</blockquote>",
        "id": 498899938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739235519
    },
    {
        "content": "<p>kvcache <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10215#issuecomment-2649587125\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10215\">issue #10215</a>:</p>\n<blockquote>\n<p>@pchickey Thank you, this is what I needed! I now see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/component/main.rs\">an example</a> does this too.</p>\n</blockquote>",
        "id": 498899940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1739235520
    }
]