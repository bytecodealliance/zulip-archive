[
    {
        "content": "<p>florianhartung opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10677\">issue #10677</a>:</p>\n<blockquote>\n<p>I am storing non-<code>Send</code> data inside a <code>Store&lt;T&gt;</code> in a single-threaded synchronous environment.<br>\nAlso I am using the <code>wasmtime::component::bindgen!</code> macro to generate bindings for my WIT definition.<br>\nUpdating the <code>wasmtime</code> dependency from <code>28.0.0</code> to <code>32.0.0</code> introduces a compilation error because a new <code>Send</code> bound on the store data exists for calling guest-exported functions.</p>\n<p>I tried setting <code>require_store_data_send: false</code> and <code>async: false</code> according to the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/macro.bindgen.html\"><code>bindgen!</code> documentation</a>, however these seem to only have an impact on the trait bound of the generated <code>add_to_linker_imports_get_host</code> function. </p>\n<p>Here is a minimal example for better understanding:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">inline</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">        package my:inline;</span>\n<span class=\"s\">        world my-world {</span>\n<span class=\"s\">            export foo: func();</span>\n<span class=\"s\">        }</span>\n<span class=\"s\">    \"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">require_store_data_send</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>expands to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyWorld</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">call_foo</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContextMut</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">S</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">where</span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContext</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">Data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Here there is a <code>&lt;S as wasmtime::AsContext&gt;::Data: Send</code> trait bound, which essentially forbids the use of non-<code>Send</code> store data when calling guest-exposed functions.<br>\nThis restriction did not exist in <code>v28.0.0</code> and I do not see a reason why it would be required now.</p>\n<p>The change was introduced in <a href=\"https://github.com/bytecodealliance/wasmtime/commit/636435f148271214aeb24d8563f3a76ff20a3ac0\">this commit</a> in <code>crates/wit-bindgen/src/lib.rs</code> line 3290 (<a href=\"https://github.com/bytecodealliance/wasmtime/commit/636435f148271214aeb24d8563f3a76ff20a3ac0#diff-b365a0c26d559b75058e519f7e01c9e0b201da9f8a16df2b96cf6693f6b38ce6R3290\">this</a> is the direct link, however the link does not load correctly for me atleast).</p>\n<p>My question is: Is this indeed a bug or is there is any other option I've overlooked that allows me to use non-<code>Send</code> store data?</p>\n</blockquote>",
        "id": 514455610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745612629
    },
    {
        "content": "<p>florianhartung <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10677#issuecomment-2831372114\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10677\">issue #10677</a>:</p>\n<blockquote>\n<p>Also I noticed that all tests in <code>crates/component-macro/tests</code> cover only the  <code>require_store_data_send: true</code> case as of now.</p>\n</blockquote>",
        "id": 514456955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745612916
    },
    {
        "content": "<p>florianhartung edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10677#issuecomment-2831372114\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10677\">issue #10677</a>:</p>\n<blockquote>\n<p>Also I noticed that all the tests in <code>crates/component-macro/tests</code> currently only cover the  <code>require_store_data_send: true</code> case.</p>\n</blockquote>",
        "id": 514465244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745616638
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10677\">issue #10677</a>:</p>\n<blockquote>\n<p>I am storing non-<code>Send</code> data inside a <code>Store&lt;T&gt;</code> in a single-threaded synchronous environment.<br>\nAlso I am using the <code>wasmtime::component::bindgen!</code> macro to generate bindings for my WIT definition.<br>\nUpdating the <code>wasmtime</code> dependency from <code>28.0.0</code> to <code>32.0.0</code> introduces a compilation error because a new <code>Send</code> bound on the store data exists for calling guest-exported functions.</p>\n<p>I tried setting <code>require_store_data_send: false</code> and <code>async: false</code> according to the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/macro.bindgen.html\"><code>bindgen!</code> documentation</a>, however these seem to only have an impact on the trait bound of the generated <code>add_to_linker_imports_get_host</code> function. </p>\n<p>Here is a minimal example for better understanding:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">inline</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">        package my:inline;</span>\n<span class=\"s\">        world my-world {</span>\n<span class=\"s\">            export foo: func();</span>\n<span class=\"s\">        }</span>\n<span class=\"s\">    \"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">require_store_data_send</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>expands to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyWorld</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">call_foo</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContextMut</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">S</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">where</span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContext</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">Data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Here there is a <code>&lt;S as wasmtime::AsContext&gt;::Data: Send</code> trait bound, which essentially forbids the use of non-<code>Send</code> store data when calling guest-exposed functions.<br>\nThis restriction did not exist in <code>v28.0.0</code> and I do not see a reason why it would be required now.</p>\n<p>The change was introduced in <a href=\"https://github.com/bytecodealliance/wasmtime/commit/636435f148271214aeb24d8563f3a76ff20a3ac0\">this commit</a> in <code>crates/wit-bindgen/src/lib.rs</code> line 3290 (<a href=\"https://github.com/bytecodealliance/wasmtime/commit/636435f148271214aeb24d8563f3a76ff20a3ac0#diff-b365a0c26d559b75058e519f7e01c9e0b201da9f8a16df2b96cf6693f6b38ce6R3290\">this</a> is the direct link, however the link does not load correctly for me atleast).</p>\n<p>My question is: Is this indeed a bug or is there is any other option I've overlooked that allows me to use non-<code>Send</code> store data?</p>\n</blockquote>",
        "id": 514853332,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745856645
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10677#issuecomment-2835773398\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10677\">issue #10677</a>:</p>\n<blockquote>\n<p>Thanks for the report! This was an accidental regression that wasn't intended. Should be fixed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10685\">https://github.com/bytecodealliance/wasmtime/pull/10685</a></p>\n</blockquote>",
        "id": 514853334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745856646
    },
    {
        "content": "<p>alexcrichton reopened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10677\">issue #10677</a>:</p>\n<blockquote>\n<p>I am storing non-<code>Send</code> data inside a <code>Store&lt;T&gt;</code> in a single-threaded synchronous environment.<br>\nAlso I am using the <code>wasmtime::component::bindgen!</code> macro to generate bindings for my WIT definition.<br>\nUpdating the <code>wasmtime</code> dependency from <code>28.0.0</code> to <code>32.0.0</code> introduces a compilation error because a new <code>Send</code> bound on the store data exists for calling guest-exported functions.</p>\n<p>I tried setting <code>require_store_data_send: false</code> and <code>async: false</code> according to the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/macro.bindgen.html\"><code>bindgen!</code> documentation</a>, however these seem to only have an impact on the trait bound of the generated <code>add_to_linker_imports_get_host</code> function. </p>\n<p>Here is a minimal example for better understanding:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">inline</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">        package my:inline;</span>\n<span class=\"s\">        world my-world {</span>\n<span class=\"s\">            export foo: func();</span>\n<span class=\"s\">        }</span>\n<span class=\"s\">    \"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">require_store_data_send</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>expands to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyWorld</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">call_foo</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContextMut</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">S</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">where</span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContext</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">Data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Here there is a <code>&lt;S as wasmtime::AsContext&gt;::Data: Send</code> trait bound, which essentially forbids the use of non-<code>Send</code> store data when calling guest-exposed functions.<br>\nThis restriction did not exist in <code>v28.0.0</code> and I do not see a reason why it would be required now.</p>\n<p>The change was introduced in <a href=\"https://github.com/bytecodealliance/wasmtime/commit/636435f148271214aeb24d8563f3a76ff20a3ac0\">this commit</a> in <code>crates/wit-bindgen/src/lib.rs</code> line 3290 (<a href=\"https://github.com/bytecodealliance/wasmtime/commit/636435f148271214aeb24d8563f3a76ff20a3ac0#diff-b365a0c26d559b75058e519f7e01c9e0b201da9f8a16df2b96cf6693f6b38ce6R3290\">this</a> is the direct link, however the link does not load correctly for me atleast).</p>\n<p>My question is: Is this indeed a bug or is there is any other option I've overlooked that allows me to use non-<code>Send</code> store data?</p>\n</blockquote>",
        "id": 514853345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745856650
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10677#issuecomment-2835773951\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10677\">issue #10677</a>:</p>\n<blockquote>\n<p>er, didn't mean to close, wrong button.</p>\n</blockquote>",
        "id": 514853375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745856660
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10677\">issue #10677</a>:</p>\n<blockquote>\n<p>I am storing non-<code>Send</code> data inside a <code>Store&lt;T&gt;</code> in a single-threaded synchronous environment.<br>\nAlso I am using the <code>wasmtime::component::bindgen!</code> macro to generate bindings for my WIT definition.<br>\nUpdating the <code>wasmtime</code> dependency from <code>28.0.0</code> to <code>32.0.0</code> introduces a compilation error because a new <code>Send</code> bound on the store data exists for calling guest-exported functions.</p>\n<p>I tried setting <code>require_store_data_send: false</code> and <code>async: false</code> according to the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/macro.bindgen.html\"><code>bindgen!</code> documentation</a>, however these seem to only have an impact on the trait bound of the generated <code>add_to_linker_imports_get_host</code> function. </p>\n<p>Here is a minimal example for better understanding:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">inline</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">        package my:inline;</span>\n<span class=\"s\">        world my-world {</span>\n<span class=\"s\">            export foo: func();</span>\n<span class=\"s\">        }</span>\n<span class=\"s\">    \"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">require_store_data_send</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>expands to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyWorld</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">call_foo</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContextMut</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">S</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">where</span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">AsContext</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">Data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Here there is a <code>&lt;S as wasmtime::AsContext&gt;::Data: Send</code> trait bound, which essentially forbids the use of non-<code>Send</code> store data when calling guest-exposed functions.<br>\nThis restriction did not exist in <code>v28.0.0</code> and I do not see a reason why it would be required now.</p>\n<p>The change was introduced in <a href=\"https://github.com/bytecodealliance/wasmtime/commit/636435f148271214aeb24d8563f3a76ff20a3ac0\">this commit</a> in <code>crates/wit-bindgen/src/lib.rs</code> line 3290 (<a href=\"https://github.com/bytecodealliance/wasmtime/commit/636435f148271214aeb24d8563f3a76ff20a3ac0#diff-b365a0c26d559b75058e519f7e01c9e0b201da9f8a16df2b96cf6693f6b38ce6R3290\">this</a> is the direct link, however the link does not load correctly for me atleast).</p>\n<p>My question is: Is this indeed a bug or is there is any other option I've overlooked that allows me to use non-<code>Send</code> store data?</p>\n</blockquote>",
        "id": 514867259,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1745860959
    }
]