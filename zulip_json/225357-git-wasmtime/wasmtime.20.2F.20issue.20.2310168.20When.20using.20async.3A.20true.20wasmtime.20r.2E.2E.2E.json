[
    {
        "content": "<p><a href=\"https://github.com/profitgrowinginnovator\">profitgrowinginnovator</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10168\">Issue #10168</a>.</p>",
        "id": 497254912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738499709
    },
    {
        "content": "<p>profitgrowinginnovator opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10168\">issue #10168</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The wit file:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">sasync</span><span class=\"p\">:</span><span class=\"nc\">guest</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Returns the name of the SaaS provider</span>\n<span class=\"w\">        </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">fn</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"http://main.rs\">main.rs</a>:<br>\n`</p>\n<p>use bindings::exports::sasync::guest::string_if::{Guest, GuestStringRs};<br>\nuse wit_bindgen::generate;</p>\n<p>mod bindings {<br>\n    wit_bindgen::generate!({<br>\n        path: \"./wit/async-string.wit\",<br>\n        world: \"string-guest\",<br>\n        async: true,<br>\n    });</p>\n<div class=\"codehilite\"><pre><span></span><code>use super::AsyncString;\nexport!(AsyncString);\n</code></pre></div>\n\n<p>}</p>\n<p>pub struct AsyncString;</p>\n<p>// <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Implement <code>GuestStringRs</code> for <code>AsyncString</code></p>\n<p>impl GuestStringRs for AsyncString {</p>\n<div class=\"codehilite\"><pre><span></span><code>async fn string_fn(&amp;self) -&gt; String {\n    &quot;success&quot;.to_string()\n}\n</code></pre></div>\n\n<p>}</p>\n<p>impl Guest for AsyncString {<br>\n    type StringRs = AsyncString;<br>\n}</p>\n<p>fn main() {</p>\n<div class=\"codehilite\"><pre><span></span><code>println!(&quot;WASM executed successfully!&quot;);\n</code></pre></div>\n\n<p>}`</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>cargo build --target wasm32-wasip2</li>\n<li>wasmtime run target/wasm32-wasip2/debug/async-string.wasm</li>\n</ul>\n<h3>Expected Results</h3>\n<p>WASM executed successfully! [This is what happens when async: false and async removed from fn string_fn]</p>\n<h3>Actual Results</h3>\n<p>Error: failed to parse WebAssembly module</p>\n<p>Caused by:<br>\n    invalid leading byte (0x9) for canonical function (at offset 0x3a8a7e)</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <br>\nwit-bindgen = { version= \"0.38.0\", features = [\"async\"] }<br>\nwit-bindgen-rt = { version = \"0.38.0\", features = [\"async\"] }</p>\n<p>Operating system: MacOS</p>\n<p>Architecture: Arm</p>\n<h3>Extra Info</h3>\n<p>Here is a github with all the code:<br>\n<a href=\"https://github.com/profitgrowinginnovator/async-string\">https://github.com/profitgrowinginnovator/async-string</a></p>\n<p>Similar module error is launched when an async wasm is read:<br>\nError: failed to parse WebAssembly module</p>\n<p>Caused by:<br>\n    invalid leading byte (0x9) for canonical function (at offset 0x3a8a7e)</p>\n<p>#[tokio::main]  // Requires the \"macros\" feature<br>\nasync fn main() -&gt; anyhow::Result&lt;()&gt; {<br>\n    let mut config = Config::new();<br>\n    config.wasm_component_model(true);<br>\n    config.async_support(true); // Enable async support<br>\n    let engine = Engine::new(&amp;config)?;<br>\n    //let mut linker = Linker::&lt;MyState&gt;::new(&amp;engine);</p>\n<div class=\"codehilite\"><pre><span></span><code>let state = MyString::default();\nlet mut store = Store::new(&amp;engine, state);\nlet linker = Linker::new(&amp;engine);\nlet component = Component::from_file(&amp;engine, &quot;../async-string/target/wasm32-wasip2/debug/async-string.wasm&quot;)?;\n\nlet command = Command::instantiate_async(&amp;mut store, &amp;component, &amp;linker).await?;\nlet result = command.wasi_cli_run().call_run(store);\nprintln!(&quot;Result from WASM: {:?}&quot;, result.await);\nOk(())\n</code></pre></div>\n\n<p>}</p>\n</blockquote>",
        "id": 497254914,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738499709
    },
    {
        "content": "<p>profitgrowinginnovator edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10168\">issue #10168</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The wit file:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">sasync</span><span class=\"p\">:</span><span class=\"nc\">guest</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Returns the name of the SaaS provider</span>\n<span class=\"w\">        </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">fn</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"http://main.rs\">main.rs</a>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">sasync</span><span class=\"p\">::</span><span class=\"n\">guest</span><span class=\"p\">::</span><span class=\"n\">string_if</span><span class=\"p\">::{</span><span class=\"n\">Guest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">GuestStringRs</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"p\">;</span>\n\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"./wit/async-string.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"string-guest\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">AsyncString</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">AsyncString</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">AsyncString</span><span class=\"p\">;</span>\n\n\n<span class=\"c1\">// âœ… Implement `GuestStringRs` for `AsyncString`</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">GuestStringRs</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AsyncString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">string_fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"s\">\"success\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AsyncString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">StringRs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AsyncString</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"WASM executed successfully!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span><span class=\"err\">```</span>\n\n\n<span class=\"p\">###</span><span class=\"w\"> </span><span class=\"n\">Steps</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Reproduce</span>\n\n<span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip2</span>\n<span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip2</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"k\">async</span><span class=\"o\">-</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"p\">###</span><span class=\"w\"> </span><span class=\"n\">Expected</span><span class=\"w\"> </span><span class=\"n\">Results</span>\n\n<span class=\"n\">WASM</span><span class=\"w\"> </span><span class=\"n\">executed</span><span class=\"w\"> </span><span class=\"n\">successfully</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"n\">happens</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"n\">removed</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">string_fn</span><span class=\"p\">]</span>\n\n<span class=\"p\">###</span><span class=\"w\"> </span><span class=\"n\">Actual</span><span class=\"w\"> </span><span class=\"n\">Results</span>\n\n<span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">invalid</span><span class=\"w\"> </span><span class=\"n\">leading</span><span class=\"w\"> </span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mh\">0x9</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">canonical</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x3a8a7e</span><span class=\"p\">)</span>\n\n<span class=\"p\">###</span><span class=\"w\"> </span><span class=\"n\">Versions</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">Environment</span>\n\n<span class=\"n\">Wasmtime</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">commit</span><span class=\"p\">:</span>\n<span class=\"nc\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.38.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"async\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"o\">-</span><span class=\"n\">rt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.38.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"async\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"n\">Operating</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">MacOS</span>\n\n<span class=\"n\">Architecture</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Arm</span>\n\n<span class=\"p\">###</span><span class=\"w\"> </span><span class=\"n\">Extra</span><span class=\"w\"> </span><span class=\"n\">Info</span>\n<span class=\"n\">Here</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">github</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">:</span>\n<span class=\"nc\">https</span><span class=\"p\">:</span><span class=\"c1\">//github.com/profitgrowinginnovator/async-string</span>\n\n<span class=\"n\">Similar</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">launched</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"p\">:</span>\n<span class=\"nc\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">invalid</span><span class=\"w\"> </span><span class=\"n\">leading</span><span class=\"w\"> </span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mh\">0x9</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">canonical</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x3a8a7e</span><span class=\"p\">)</span>\n\n<span class=\"cp\">#[tokio::main]</span><span class=\"w\">  </span><span class=\"c1\">// Requires the \"macros\" feature</span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Enable async support</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">//let mut linker = Linker::&lt;MyState&gt;::new(&amp;engine);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyString</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"../async-string/target/wasm32-wasip2/debug/async-string.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"p\">::</span><span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">wasi_cli_run</span><span class=\"p\">().</span><span class=\"n\">call_run</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Result from WASM: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n\n\n\n<span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 497254949,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738499749
    },
    {
        "content": "<p>profitgrowinginnovator edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10168\">issue #10168</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The wit file:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">sasync</span><span class=\"p\">:</span><span class=\"nc\">guest</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Returns the name of the SaaS provider</span>\n<span class=\"w\">        </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">fn</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"http://main.rs\">main.rs</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">sasync</span><span class=\"p\">::</span><span class=\"n\">guest</span><span class=\"p\">::</span><span class=\"n\">string_if</span><span class=\"p\">::{</span><span class=\"n\">Guest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">GuestStringRs</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"p\">;</span>\n\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"./wit/async-string.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"string-guest\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">AsyncString</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">AsyncString</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">AsyncString</span><span class=\"p\">;</span>\n\n\n<span class=\"c1\">// âœ… Implement `GuestStringRs` for `AsyncString`</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">GuestStringRs</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AsyncString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">string_fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"s\">\"success\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AsyncString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">StringRs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AsyncString</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"WASM executed successfully!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>cargo build --target wasm32-wasip2</li>\n<li>wasmtime run target/wasm32-wasip2/debug/async-string.wasm</li>\n</ul>\n<h3>Expected Results</h3>\n<p>WASM executed successfully! [This is what happens when async: false and async removed from fn string_fn]</p>\n<h3>Actual Results</h3>\n<p>Error: failed to parse WebAssembly module</p>\n<p>Caused by:<br>\n    invalid leading byte (0x9) for canonical function (at offset 0x3a8a7e)</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <br>\nwit-bindgen = { version= \"0.38.0\", features = [\"async\"] }<br>\nwit-bindgen-rt = { version = \"0.38.0\", features = [\"async\"] }</p>\n<p>Operating system: MacOS</p>\n<p>Architecture: Arm</p>\n<h3>Extra Info</h3>\n<p>Here is a github with all the code:<br>\n<a href=\"https://github.com/profitgrowinginnovator/async-string\">https://github.com/profitgrowinginnovator/async-string</a></p>\n<p>Similar module error is launched when an async wasm is read:<br>\nError: failed to parse WebAssembly module</p>\n<p>Caused by:<br>\n    invalid leading byte (0x9) for canonical function (at offset 0x3a8a7e)</p>\n<p>#[tokio::main]  // Requires the \"macros\" feature<br>\nasync fn main() -&gt; anyhow::Result&lt;()&gt; {<br>\n    let mut config = Config::new();<br>\n    config.wasm_component_model(true);<br>\n    config.async_support(true); // Enable async support<br>\n    let engine = Engine::new(&amp;config)?;<br>\n    //let mut linker = Linker::&lt;MyState&gt;::new(&amp;engine);</p>\n<div class=\"codehilite\"><pre><span></span><code>let state = MyString::default();\nlet mut store = Store::new(&amp;engine, state);\nlet linker = Linker::new(&amp;engine);\nlet component = Component::from_file(&amp;engine, &quot;../async-string/target/wasm32-wasip2/debug/async-string.wasm&quot;)?;\n\nlet command = Command::instantiate_async(&amp;mut store, &amp;component, &amp;linker).await?;\nlet result = command.wasi_cli_run().call_run(store);\nprintln!(&quot;Result from WASM: {:?}&quot;, result.await);\nOk(())\n</code></pre></div>\n\n<p>}</p>\n</blockquote>",
        "id": 497255015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738499777
    },
    {
        "content": "<p>profitgrowinginnovator edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10168\">issue #10168</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The wit file:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">sasync</span><span class=\"p\">:</span><span class=\"nc\">guest</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Returns the name of the SaaS provider</span>\n<span class=\"w\">        </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">fn</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"http://main.rs\">main.rs</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">sasync</span><span class=\"p\">::</span><span class=\"n\">guest</span><span class=\"p\">::</span><span class=\"n\">string_if</span><span class=\"p\">::{</span><span class=\"n\">Guest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">GuestStringRs</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"p\">;</span>\n\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"./wit/async-string.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"string-guest\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">AsyncString</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">AsyncString</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">AsyncString</span><span class=\"p\">;</span>\n\n\n<span class=\"c1\">// âœ… Implement `GuestStringRs` for `AsyncString`</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">GuestStringRs</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AsyncString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">string_fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"s\">\"success\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AsyncString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">StringRs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AsyncString</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"WASM executed successfully!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>cargo build --target wasm32-wasip2</li>\n<li>wasmtime run target/wasm32-wasip2/debug/async-string.wasm</li>\n</ul>\n<h3>Expected Results</h3>\n<p>WASM executed successfully! [This is what happens when async: false and async removed from fn string_fn]</p>\n<h3>Actual Results</h3>\n<p>Error: failed to parse WebAssembly module</p>\n<p>Caused by:<br>\n    invalid leading byte (0x9) for canonical function (at offset 0x3a8a7e)</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <br>\nwit-bindgen = { version= \"0.38.0\", features = [\"async\"] }<br>\nwit-bindgen-rt = { version = \"0.38.0\", features = [\"async\"] }</p>\n<p>Operating system: MacOS</p>\n<p>Architecture: Arm</p>\n<h3>Extra Info</h3>\n<p>Here is a github with all the code:<br>\n<a href=\"https://github.com/profitgrowinginnovator/async-string\">https://github.com/profitgrowinginnovator/async-string</a></p>\n<p>Similar module error is launched when an async wasm is read:<br>\nError: failed to parse WebAssembly module</p>\n<p>Caused by:<br>\n    invalid leading byte (0x9) for canonical function (at offset 0x3a8a7e)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[tokio::main]</span><span class=\"w\">  </span><span class=\"c1\">// Requires the \"macros\" feature</span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Enable async support</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">//let mut linker = Linker::&lt;MyState&gt;::new(&amp;engine);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyString</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"../async-string/target/wasm32-wasip2/debug/async-string.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"p\">::</span><span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">wasi_cli_run</span><span class=\"p\">().</span><span class=\"n\">call_run</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Result from WASM: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</blockquote>",
        "id": 497255041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738499813
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10168#issuecomment-2629380327\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10168\">issue #10168</a>:</p>\n<blockquote>\n<p>Support for the async ABI of the component model is not yet implemented in Wasmtime as it was only recently introduced in the component model. There is an open PR to implement it: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9582\">https://github.com/bytecodealliance/wasmtime/pull/9582</a></p>\n</blockquote>",
        "id": 497255290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738500018
    },
    {
        "content": "<p>profitgrowinginnovator <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10168#issuecomment-2630216688\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10168\">issue #10168</a>:</p>\n<blockquote>\n<p>Thanks for letting me know. I just found out about <a href=\"https://github.com/bytecodealliance/wrpc\">https://github.com/bytecodealliance/wrpc</a> Hopefully this solves it.</p>\n</blockquote>",
        "id": 497354690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738569588
    },
    {
        "content": "<p>profitgrowinginnovator closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10168\">issue #10168</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The wit file:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">sasync</span><span class=\"p\">:</span><span class=\"nc\">guest</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"sd\">/// Returns the name of the SaaS provider</span>\n<span class=\"w\">        </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">fn</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"http://main.rs\">main.rs</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">sasync</span><span class=\"p\">::</span><span class=\"n\">guest</span><span class=\"p\">::</span><span class=\"n\">string_if</span><span class=\"p\">::{</span><span class=\"n\">Guest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">GuestStringRs</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"p\">;</span>\n\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"./wit/async-string.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"string-guest\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">AsyncString</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">AsyncString</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">AsyncString</span><span class=\"p\">;</span>\n\n\n<span class=\"c1\">// âœ… Implement `GuestStringRs` for `AsyncString`</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">GuestStringRs</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AsyncString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">string_fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"s\">\"success\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AsyncString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">StringRs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AsyncString</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"WASM executed successfully!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>cargo build --target wasm32-wasip2</li>\n<li>wasmtime run target/wasm32-wasip2/debug/async-string.wasm</li>\n</ul>\n<h3>Expected Results</h3>\n<p>WASM executed successfully! [This is what happens when async: false and async removed from fn string_fn]</p>\n<h3>Actual Results</h3>\n<p>Error: failed to parse WebAssembly module</p>\n<p>Caused by:<br>\n    invalid leading byte (0x9) for canonical function (at offset 0x3a8a7e)</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <br>\nwit-bindgen = { version= \"0.38.0\", features = [\"async\"] }<br>\nwit-bindgen-rt = { version = \"0.38.0\", features = [\"async\"] }</p>\n<p>Operating system: MacOS</p>\n<p>Architecture: Arm</p>\n<h3>Extra Info</h3>\n<p>Here is a github with all the code:<br>\n<a href=\"https://github.com/profitgrowinginnovator/async-string\">https://github.com/profitgrowinginnovator/async-string</a></p>\n<p>Similar module error is launched when an async wasm is read:<br>\nError: failed to parse WebAssembly module</p>\n<p>Caused by:<br>\n    invalid leading byte (0x9) for canonical function (at offset 0x3a8a7e)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[tokio::main]</span><span class=\"w\">  </span><span class=\"c1\">// Requires the \"macros\" feature</span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Enable async support</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">//let mut linker = Linker::&lt;MyState&gt;::new(&amp;engine);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyString</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"../async-string/target/wasm32-wasip2/debug/async-string.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"p\">::</span><span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">wasi_cli_run</span><span class=\"p\">().</span><span class=\"n\">call_run</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Result from WASM: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</blockquote>",
        "id": 497354834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1738569613
    }
]