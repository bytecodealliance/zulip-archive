[
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11684\">PR #11684</a>.</p>",
        "id": 538920218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757615049
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11684#pullrequestreview-3213194623\">PR review</a>.</p>",
        "id": 538922424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757616002
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11684#discussion_r2342032880\">PR review comment</a>:</p>\n<blockquote>\n<p>I realize that this is optional, but it's something I've been hesitant about adding in the past (a tokio dep, even optional, in Wasmtime). If possible I'd prefer to avoid this myself (and commented below about the impl)</p>\n</blockquote>",
        "id": 538922428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757616002
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11684#discussion_r2342031421\">PR review comment</a>:</p>\n<blockquote>\n<p>These feel a bit surprising to me where a drop on the host is a trap in the guest, instead I might say we should remove these and instead rely on <code>impl&lt;T, D, Fut&gt; FutureProducer&lt;D&gt; for Fut</code> below. In my mind it's more appropriate to map a channel closure to <code>None</code> in components as opposed to a trap?</p>\n</blockquote>",
        "id": 538922430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757616003
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11684#pullrequestreview-3213586600\">PR review</a>.</p>",
        "id": 538940644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757623689
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11684#discussion_r2342305935\">PR review comment</a>:</p>\n<blockquote>\n<p>From what I understand futures <em>must</em> produce a value and the <code>FutureProducer</code> can only ever return <code>None</code> when the poll is cancelled (i.e. <code>finish</code> is true)</p>\n<p>@dicej is my understanding correct?</p>\n</blockquote>",
        "id": 538940645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757623689
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11684#discussion_r2342317026\">PR review comment</a>:</p>\n<blockquote>\n<p>Other than causing a trap on host drop we could just never resolve the future, i.e. return <code>Pending</code> without ever waking the runtime or produce <code>T::default()</code><br>\nPerhaps these implementations are fairly WASI-specific and should just stay in <code>wasmtime-wasi</code>, at least for now</p>\n</blockquote>",
        "id": 538941195,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757623997
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11684#pullrequestreview-3213604804\">PR review</a>.</p>",
        "id": 538941198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757623997
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11684#pullrequestreview-3214037339\">PR review</a>.</p>",
        "id": 538957893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757634787
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11684#discussion_r2342601112\">PR review comment</a>:</p>\n<blockquote>\n<p>That's right yeah, so this would map to <code>type Item = Option&lt;T&gt;</code>, not <code>type Item = T</code> like it does now. Basically the mismatch in Rust channel semantics and component-model channel semantics I think should show up at the type-level, not the runtime 'this trapped' level</p>\n</blockquote>",
        "id": 538957894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757634788
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11684\">PR #11684</a>.</p>",
        "id": 539024242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757670573
    },
    {
        "content": "<p>rvolosatovs submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11684#pullrequestreview-3215863562\">PR review</a>.</p>",
        "id": 539026131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757671192
    },
    {
        "content": "<p>rvolosatovs created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11684#discussion_r2343711927\">PR review comment</a>:</p>\n<blockquote>\n<p>I've reworked this by requiring the blanket impl futures to handle trapping directly. Although it seemed a bit dangerous to me when I originally did that, since embedders could cause a trap \"on accident\", I think that's fine, since these futures will actually be type bound in practice, e.g. embedders will not be able to accidentally cause a trap passing an <code>async { Err(String::from(\"interface-level error\")) }</code> to <code>FutureReader::new</code> corresponding to <code>future&lt;result&lt;_, string&gt;&gt;</code>, since the Rust type system would require:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;&gt;</span>\n</code></pre></div>\n<p>With this we don't need specialized producer wrappers, but rather can use <code>Future</code>s directly</p>\n</blockquote>",
        "id": 539026134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757671192
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11684#pullrequestreview-3224926663\">PR review</a>:</p>\n<blockquote>\n<p>Sounds good to me, thanks!</p>\n</blockquote>",
        "id": 539573855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757946325
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11684\">PR #11684</a>.</p>",
        "id": 539579958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1757947730
    }
]