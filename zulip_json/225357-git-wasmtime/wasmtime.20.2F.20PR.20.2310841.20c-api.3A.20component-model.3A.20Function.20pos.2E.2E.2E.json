[
    {
        "content": "<p><strong>MangoPeachGrape</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841\">PR #10841</a>.</p>",
        "id": 520709682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748363091
    },
    {
        "content": "<p>MangoPeachGrape opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841\">PR #10841</a> from <code>MangoPeachGrape:c-api/component-model/more</code> to <code>bytecodealliance:main</code>.</p>",
        "id": 520709683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748363091
    },
    {
        "content": "<p><strong>MangoPeachGrape</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841\">PR #10841</a>.</p>",
        "id": 520709684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748363091
    },
    {
        "content": "<p>MangoPeachGrape updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841\">PR #10841</a>.</p>",
        "id": 520710803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748363302
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841#pullrequestreview-2872704499\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for this!</p>\n<p>Random thought: do you know how we might run asan or something to check for memory leaks in CI? I'm not sure how to do that myself but it'd be nice to ensure that we're not accidentally leaking any memory with this representation anywhere</p>\n</blockquote>",
        "id": 520760932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748380561
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841\">PR #10841</a>.</p>",
        "id": 520763327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748381776
    },
    {
        "content": "<p>MangoPeachGrape <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841#issuecomment-2919271661\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841\">PR #10841</a>:</p>\n<blockquote>\n<p>@alexcrichton I'm not really sure, as the C and Rust allocators are different, right? Would you compile both with LeakSanitizer?<br>\nSee:<br>\n<a href=\"https://doc.rust-lang.org/beta/unstable-book/compiler-flags/sanitizer.html#leaksanitizer\">https://doc.rust-lang.org/beta/unstable-book/compiler-flags/sanitizer.html#leaksanitizer</a><br>\n<a href=\"https://clang.llvm.org/docs/LeakSanitizer.html\">https://clang.llvm.org/docs/LeakSanitizer.html</a></p>\n</blockquote>",
        "id": 521086478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748522343
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841#issuecomment-2919757301\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841\">PR #10841</a>:</p>\n<blockquote>\n<p>They should both bottom out in <code>malloc</code> and <code>free</code> by default, so I think ASAN might be enough (which IIRC also detects leaks in addition to other things).  If LSAN works though that also seems reasonable to me</p>\n</blockquote>",
        "id": 521118176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748532488
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841#issuecomment-2932670001\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841\">PR #10841</a>:</p>\n<blockquote>\n<p>I recently hooked up wasmtime and a C api project (though not wasmtime's C api) to asan to find my own bugs of that sort. I found that I needed to:</p>\n<ul>\n<li>compile the rust with nightly and <code>RUSTFLAGS=-Zsanitizer=address</code></li>\n<li>install and build the C with an llvm/clang toolchain that is relatively recent so the sanitizer is compatible with the information emitted by rustc, since my CI package manager's was too old I used LLVM-20.1 which is the same version rust is using in nightly</li>\n<li>build the C sources with <code>-fsanitize=address,undefined -fno-omit-frame-pointer</code> cflags</li>\n</ul>\n</blockquote>",
        "id": 521852668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748901858
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841#issuecomment-2932670001\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841\">PR #10841</a>:</p>\n<blockquote>\n<p>I recently hooked up wasmtime and a C api project (though not wasmtime's C api) to asan to find my own bugs of that sort. I found that I needed to:</p>\n<ul>\n<li>compile the rust with nightly and <code>RUSTFLAGS=-Zsanitizer=address</code></li>\n<li>install and build the C with an llvm/clang toolchain that is relatively recent so the sanitizer is compatible with the information emitted by rustc, since my CI package manager's was too old I used LLVM-20.1 which is the same version rust is using in nightly. I don't have a sense for when rust will drift far enough from that to break something, but it works right now anyway.</li>\n<li>build the C sources with <code>-fsanitize=address,undefined -fno-omit-frame-pointer</code> cflags</li>\n</ul>\n</blockquote>",
        "id": 521852734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748901904
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841#issuecomment-2932670001\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841\">PR #10841</a>:</p>\n<blockquote>\n<p>I recently hooked up wasmtime and a C api project (though not wasmtime's C api) to asan to find my own bugs of that sort. I found that I needed to:</p>\n<ul>\n<li>compile the rust with nightly and <code>RUSTFLAGS=-Zsanitizer=address</code></li>\n<li>install and build the C with an llvm/clang toolchain that is relatively recent so the sanitizer is compatible with the information emitted by rustc, since my CI package manager's was too old I used LLVM-20.1 which is the same version rust is using in nightly. I don't have a sense for when rust will drift far enough from that to break something, but it works right now anyway.</li>\n<li>build the C sources with <code>-fsanitize=address,undefined -fno-omit-frame-pointer</code> cflags</li>\n<li>set <code>ASAN_SYMBOLIZER_PATH=&lt;install location of LLVM-20.1.0-Linux-X64&gt;/bin/llvm-symbolizer</code> to get symbols in asan's traces</li>\n</ul>\n</blockquote>",
        "id": 521853006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748902019
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841#issuecomment-2932670001\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10841\">PR #10841</a>:</p>\n<blockquote>\n<p>I recently hooked up wasmtime and a C api project (though not wasmtime's C api) to asan to find my own bugs of that sort. I found that I needed to:</p>\n<ul>\n<li>compile the rust with nightly and <code>RUSTFLAGS=-Zsanitizer=address</code></li>\n<li>install and build the C with an llvm/clang toolchain that is relatively recent so the sanitizer is compatible with the information emitted by rustc, since my CI package manager's was too old I used LLVM-20.1 which is the same version rust is using in nightly. I don't have a sense for when rust will drift far enough from that to break something, but it works right now anyway.</li>\n<li>build the C sources with <code>-fsanitize=address,undefined -fno-omit-frame-pointer</code> cflags</li>\n<li>set <code>ASAN_SYMBOLIZER_PATH=&lt;install location of LLVM-20.1.0-Linux-X64&gt;/bin/llvm-symbolizer</code> to get symbols in asan's traces</li>\n</ul>\n<p>Also, beware that running debug builds of cranelift under asan will be egregiously, obscenely slow.</p>\n</blockquote>",
        "id": 521853308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748902156
    }
]