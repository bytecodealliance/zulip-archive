[
    {
        "content": "<p>akldc opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10996\">issue #10996</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">none</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">preserve_frame_pointers</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_multi_ret_implicit_sret</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"n\">block0</span><span class=\"p\">():</span>\n<span class=\"w\">    </span><span class=\"nc\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">3524126683585344751</span>\n<span class=\"w\">    </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mf\">66e07</span><span class=\"n\">ap</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v36</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band</span><span class=\"p\">.</span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"n\">v36</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>When the <code>opt_level</code> is set to <code>none</code>, the result is as follows.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">x86</span><span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3524126683585344751</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mf\">66e07</span><span class=\"n\">ap</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"n\">riscv64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3524126683585344751</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mf\">66e07</span><span class=\"n\">ap</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"n\">aarch64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">obfuscator</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">registry</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">index</span><span class=\"p\">.</span><span class=\"n\">crates</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"o\">-</span><span class=\"mi\">1949</span><span class=\"n\">cf8c6b5b557f</span><span class=\"o\">/</span><span class=\"n\">regalloc2</span><span class=\"o\">-</span><span class=\"mf\">0.12.2</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">ion</span><span class=\"o\">/</span><span class=\"n\">process</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">1253</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">:</span>\n<span class=\"nc\">Could</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">allocate</span><span class=\"w\"> </span><span class=\"n\">minimal</span><span class=\"w\"> </span><span class=\"n\">bundle</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">allocation</span><span class=\"w\"> </span><span class=\"n\">problem</span><span class=\"w\"> </span><span class=\"n\">should</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">possible</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">solve</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>But when <code>opt_level</code> is switched to <code>speed</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">x86</span><span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3524126683585344751</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mf\">66e07</span><span class=\"n\">ap</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"n\">riscv64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3524126683585344751</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mf\">66e07</span><span class=\"n\">ap</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"n\">aarch64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3524126683585344751</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mf\">66e07</span><span class=\"n\">ap</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>In this example, there's only one <code>band</code> instruction.<br>\nOn aarch64, it throws an error before optimization but runs correctly after.  Whatâ€™s the reason for that?</p>\n</blockquote>",
        "id": 523290413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749561573
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10996\">Issue #10996</a>.</p>",
        "id": 523290416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749561573
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10996\">Issue #10996</a>.</p>",
        "id": 523290418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749561573
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10996#issuecomment-2959310296\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10996\">issue #10996</a>:</p>\n<blockquote>\n<p>The reason why it runs with optimizations is probably that the <code>band</code> gets optimized out, turning <code>v36</code> into an alias to <code>v10</code>.</p>\n</blockquote>",
        "id": 523294812,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749562851
    },
    {
        "content": "<p>akldc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10996#issuecomment-2962710472\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10996\">issue #10996</a>:</p>\n<blockquote>\n<p>@bjorn3 <br>\nIf the <code>band</code> operation on floating-point numbers is actually invalid or illegal, shouldnâ€™t it cause an error both before and after optimization? Simply optimizing it away seems unsound, as it changes the programâ€™s behavior rather than preserving its correctness.</p>\n</blockquote>",
        "id": 523561480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749648405
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the cranelift:area:aarch64 label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10996\">Issue #10996</a>.</p>",
        "id": 523576827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749652750
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10996#issuecomment-2963107764\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10996\">issue #10996</a>:</p>\n<blockquote>\n<p>Float-related bitops are legal, but generally not well supported across backends since they're so rarely used. We've concluded in the past we don't want to remove float-related bitops, so I think that this is a valid bug to have open personally.</p>\n<p>The optimization here is sound in that if aarch64 generated code without panicking when optimizations are disabled then the code should do the same thing. The reason this passes with optimizations is as @bjorn3 said in that the shape of the IR being code-generated is different.</p>\n</blockquote>",
        "id": 523577033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749652817
    },
    {
        "content": "<p>akldc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10996#issuecomment-2966916313\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10996\">issue #10996</a>:</p>\n<blockquote>\n<p>@alexcrichton <br>\nThank you for your response. I look forward to Cranelift becoming more sound over time.</p>\n</blockquote>",
        "id": 523764559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749736997
    }
]