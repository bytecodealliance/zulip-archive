[
    {
        "content": "<p>tpmccallum opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a> from <code>tpmccallum:invoke_wave_enhancements</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This PR is in relation to the Zulip conversation at <a href=\"#narrow/channel/217126-wasmtime/topic/wasmtime-cli.3A.20support.20run.20--invoke.20for.20components.20using.20wave\">#wasmtime &gt; wasmtime-cli: support run --invoke for components using wave</a>.</p>\n<p>This PR includes @pchickey's <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10054\">existing PR 10054</a>.</p>\n<p>There is an <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10291\">open issue</a> relating to this work.</p>\n<p>Along with the changes, the documentation has also been updated accordingly (the changes in the<code>docs/cli-options.md</code> file of this PR).<br>\n</p>\n</blockquote>",
        "id": 509619073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743578369
    },
    {
        "content": "<p><strong>tpmccallum</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>.</p>",
        "id": 509619077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743578369
    },
    {
        "content": "<p><strong>tpmccallum</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>.</p>",
        "id": 509619078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743578369
    },
    {
        "content": "<p><strong>tpmccallum</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>.</p>",
        "id": 509619079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743578369
    },
    {
        "content": "<p>tpmccallum edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>:</p>\n<blockquote>\n<p>This PR is in relation to the Zulip conversation at <a href=\"#narrow/channel/217126-wasmtime/topic/wasmtime-cli.3A.20support.20run.20--invoke.20for.20components.20using.20wave\">#wasmtime &gt; wasmtime-cli: support run --invoke for components using wave</a>.</p>\n<p>This PR includes @pchickey's <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10054\">existing PR 10054</a>. (Apologies @pchickey I could not see the <code>pch/invoke_wave</code> in the dropdown when trying to create a PR that would target your <code>pch/invoke_wave</code> branch; I'm not sure why <code>pch/invoke_wave</code> does not show up. When I pushed it generated this new 10511 PR and included all of your previous changes, so I hope we are still on the right path to getting this <code>--invoke</code> feature implemented.</p>\n<p>There is an <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10291\">open issue</a> relating to this work.</p>\n<p>Along with the changes, the documentation has also been updated accordingly (the changes in the<code>docs/cli-options.md</code> file of this PR).<br>\n</p>\n</blockquote>",
        "id": 509621177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743579080
    },
    {
        "content": "<p>tpmccallum edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>:</p>\n<blockquote>\n<p>This PR is in relation to the Zulip conversation at <a href=\"#narrow/channel/217126-wasmtime/topic/wasmtime-cli.3A.20support.20run.20--invoke.20for.20components.20using.20wave\">#wasmtime &gt; wasmtime-cli: support run --invoke for components using wave</a>.</p>\n<p>This PR includes @pchickey's <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10054\">existing PR 10054</a>. (Apologies @pchickey I could not see the <code>pch/invoke_wave</code> in the dropdown when trying to create a PR that would target your <code>pch/invoke_wave</code> branch). I'm not sure why <code>pch/invoke_wave</code> does not show up. When I pushed it generated this new 10511 PR and included all of your previous changes, so I hope we are still on the right path to getting this <code>--invoke</code> feature implemented.</p>\n<p>There is an <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10291\">open issue</a> relating to this work.</p>\n<p>Along with the changes, the documentation has also been updated accordingly (the changes in the<code>docs/cli-options.md</code> file of this PR).<br>\n</p>\n</blockquote>",
        "id": 509634868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743583095
    },
    {
        "content": "<p>tpmccallum edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>:</p>\n<blockquote>\n<p>This PR is in relation to the Zulip conversation at <a href=\"#narrow/channel/217126-wasmtime/topic/wasmtime-cli.3A.20support.20run.20--invoke.20for.20components.20using.20wave\">#wasmtime &gt; wasmtime-cli: support run --invoke for components using wave</a>.</p>\n<p>This PR includes @pchickey's <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10054\">existing PR 10054</a>. (Apologies @pchickey I could not see the <code>pch/invoke_wave</code> in the dropdown when trying to create a PR that would target your <code>pch/invoke_wave</code> branch). I'm not sure why <code>pch/invoke_wave</code> does not show up. When I pushed it generated this new 10511 PR and included all of your previous changes, so I hope we are still on the right path to getting this <code>--invoke</code> feature implemented.</p>\n<p>There is an <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10291\">open issue</a> relating to this work.</p>\n<p>Along with the changes, the documentation has also been updated accordingly (the changes in the<code>docs/cli-options.md</code> file of this PR).</p>\n<p><strong>Functionality</strong></p>\n<p>The invoke function works great:</p>\n<p>Compress WIT:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package example:component;\n\nworld compress {\n    export compress: func(input: string) -&gt; list&lt;u8&gt;;\n}\n</code></pre></div>\n<p><a href=\"http://lib.rs\">lib.rs</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(warnings)]</span>\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"p\">;</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">zstd</span><span class=\"p\">::</span><span class=\"n\">stream</span><span class=\"p\">::</span><span class=\"n\">encode_all</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Cursor</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Component</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">compress</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">encode_all</span><span class=\"p\">(</span><span class=\"n\">Cursor</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"n\">with_types_in</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Cargo.toml:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"compress\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">zstd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.13\"</span>\n<span class=\"n\">wit-bindgen-rt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.39.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"bitflags\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"k\">[lib]</span>\n<span class=\"n\">crate-type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"cdylib\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">[package.metadata.component]</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"wit/compress.wit\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>CLI:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>/Users/tpmccallum/wasmtime/target/release/wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"compress(\\\"hello\\\")\"</span><span class=\"w\"> </span>/Users/tpmccallum/testing_components/compress/target/wasm32-wasip1/debug/compress.wasm\n<span class=\"o\">[</span><span class=\"m\">40</span>,<span class=\"w\"> </span><span class=\"m\">181</span>,<span class=\"w\"> </span><span class=\"m\">47</span>,<span class=\"w\"> </span><span class=\"m\">253</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">88</span>,<span class=\"w\"> </span><span class=\"m\">41</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">104</span>,<span class=\"w\"> </span><span class=\"m\">101</span>,<span class=\"w\"> </span><span class=\"m\">108</span>,<span class=\"w\"> </span><span class=\"m\">108</span>,<span class=\"w\"> </span><span class=\"m\">111</span><span class=\"o\">]</span>\n</code></pre></div>\n</blockquote>",
        "id": 509635557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743583311
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>.</p>",
        "id": 509715969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743604674
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>.</p>",
        "id": 509715970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743604675
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>.</p>",
        "id": 509715972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743604675
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>.</p>",
        "id": 509715974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743604675
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#pullrequestreview-2736531672\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for working on this.</p>\n<p>I rebased my branch on main, and changed the base branch for this PR to be my branch.</p>\n<p>I think if you drop the change to wave core i128, we can merge this to my branch, and then I'll have alex review my PR.</p>\n</blockquote>",
        "id": 509717615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743605076
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#discussion_r2024978237\">PR review comment</a>:</p>\n<blockquote>\n<p>The original code is correct here - this is making a pair of i64 out of the bits in a i128, so we want those operations to discard the extra bits and not panic when they are present</p>\n</blockquote>",
        "id": 509717616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743605076
    },
    {
        "content": "<p>tpmccallum submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#pullrequestreview-2737700842\">PR review</a>.</p>",
        "id": 509802090,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743631577
    },
    {
        "content": "<p>tpmccallum created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#discussion_r2025666508\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks, Pat.<br>\nSure thing. The reason I updated this code is that there was <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/14222433195/job/39853589268\">a value truncation error in the cargo clippy CI</a>, which read:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">casting</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"kt\">u128</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"kt\">i64</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">truncate</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">value</span>\n<span class=\"n\">help</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">if</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">intentional</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">allow</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lint</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"cp\">#[allow(clippy::cast_possible_truncation)]</span><span class=\"err\">`</span>\n<span class=\"n\">or</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">try_from</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">accordingly</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">::</span><span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>I will change it back and run clippy locally to ensure it truncates silently and suppresses the warning/error.<br>\nWill report back here soon.</p>\n</blockquote>",
        "id": 509802091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743631577
    },
    {
        "content": "<p>tpmccallum submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#pullrequestreview-2737743668\">PR review</a>.</p>",
        "id": 509805275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743633148
    },
    {
        "content": "<p>tpmccallum created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#discussion_r2025690921\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok, I did a <code>cargo clean</code> and <code>cargo build --release</code> and then also performed the CI locally i.e.:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_INCREMENTAL</span><span class=\"o\">=</span><span class=\"m\">0</span>\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_DEV_DEBUG</span><span class=\"o\">=</span><span class=\"m\">0</span>\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_TEST_DEBUG</span><span class=\"o\">=</span><span class=\"m\">0</span>\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">RUSTFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-D warnings\"</span>\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">WIT_REQUIRE_SEMICOLONS</span><span class=\"o\">=</span><span class=\"m\">1</span>\ncargo<span class=\"w\"> </span>clippy<span class=\"w\"> </span>--workspace<span class=\"w\"> </span>--all-targets\n</code></pre></div>\n<p>The following error occurred:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"w\">    </span>Checking<span class=\"w\"> </span>wiggle<span class=\"w\"> </span>v32.0.0<span class=\"w\"> </span><span class=\"o\">(</span>/Users/tpmccallum/wasmtime/crates/wiggle<span class=\"o\">)</span>\nerror:<span class=\"w\"> </span>casting<span class=\"w\"> </span><span class=\"sb\">`</span>u128<span class=\"sb\">`</span><span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"sb\">`</span>i64<span class=\"sb\">`</span><span class=\"w\"> </span>may<span class=\"w\"> </span>truncate<span class=\"w\"> </span>the<span class=\"w\"> </span>value\n<span class=\"w\">   </span>--&gt;<span class=\"w\"> </span>crates/wasmtime/src/runtime/wave/core.rs:103:19\n<span class=\"w\">    </span><span class=\"p\">|</span>\n<span class=\"m\">103</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">         </span><span class=\"nb\">let</span><span class=\"w\"> </span><span class=\"nv\">low</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>v<span class=\"w\"> </span>as<span class=\"w\"> </span>i64<span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">|</span><span class=\"w\">                   </span>^^^^^^^^\n<span class=\"w\">    </span><span class=\"p\">|</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span>help:<span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span>this<span class=\"w\"> </span>is<span class=\"w\"> </span>intentional<span class=\"w\"> </span>allow<span class=\"w\"> </span>the<span class=\"w\"> </span>lint<span class=\"w\"> </span>with<span class=\"w\"> </span><span class=\"sb\">`</span><span class=\"c1\">#[allow(clippy::cast_possible_truncation)]` ...</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span>help:<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>further<span class=\"w\"> </span>information<span class=\"w\"> </span>visit<span class=\"w\"> </span>https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span>note:<span class=\"w\"> </span><span class=\"sb\">`</span>-D<span class=\"w\"> </span>clippy::cast-possible-truncation<span class=\"sb\">`</span><span class=\"w\"> </span>implied<span class=\"w\"> </span>by<span class=\"w\"> </span><span class=\"sb\">`</span>-D<span class=\"w\"> </span>warnings<span class=\"sb\">`</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span>help:<span class=\"w\"> </span>to<span class=\"w\"> </span>override<span class=\"w\"> </span><span class=\"sb\">`</span>-D<span class=\"w\"> </span>warnings<span class=\"sb\">`</span><span class=\"w\"> </span>add<span class=\"w\"> </span><span class=\"sb\">`</span><span class=\"c1\">#[allow(clippy::cast_possible_truncation)]`</span>\nhelp:<span class=\"w\"> </span>...<span class=\"w\"> </span>or<span class=\"w\"> </span>use<span class=\"w\"> </span><span class=\"sb\">`</span>try_from<span class=\"sb\">`</span><span class=\"w\"> </span>and<span class=\"w\"> </span>handle<span class=\"w\"> </span>the<span class=\"w\"> </span>error<span class=\"w\"> </span>accordingly\n<span class=\"w\">    </span><span class=\"p\">|</span>\n<span class=\"m\">103</span><span class=\"w\"> </span>-<span class=\"w\">         </span><span class=\"nb\">let</span><span class=\"w\"> </span><span class=\"nv\">low</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>v<span class=\"w\"> </span>as<span class=\"w\"> </span>i64<span class=\"p\">;</span>\n<span class=\"m\">103</span><span class=\"w\"> </span>+<span class=\"w\">         </span><span class=\"nb\">let</span><span class=\"w\"> </span><span class=\"nv\">low</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>i64::try_from<span class=\"o\">(</span>v<span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">|</span>\n\nerror:<span class=\"w\"> </span>could<span class=\"w\"> </span>not<span class=\"w\"> </span>compile<span class=\"w\"> </span><span class=\"sb\">`</span>wasmtime<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"o\">(</span>lib<span class=\"o\">)</span><span class=\"w\"> </span>due<span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span>previous<span class=\"w\"> </span>error\nwarning:<span class=\"w\"> </span>build<span class=\"w\"> </span>failed,<span class=\"w\"> </span>waiting<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>other<span class=\"w\"> </span><span class=\"nb\">jobs</span><span class=\"w\"> </span>to<span class=\"w\"> </span>finish...\n</code></pre></div>\n<p>I will try that same original code again, but this time with the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![allow(clippy::cast_possible_truncation)]</span>\n</code></pre></div>\n<p>Report back soon ... :) </p>\n</blockquote>",
        "id": 509805278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743633148
    },
    {
        "content": "<p>tpmccallum edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#discussion_r2025690921\">PR review comment</a>.</p>",
        "id": 509812413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743637175
    },
    {
        "content": "<p>tpmccallum edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#discussion_r2025690921\">PR review comment</a>.</p>",
        "id": 509812739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743637382
    },
    {
        "content": "<p>tpmccallum edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#discussion_r2025690921\">PR review comment</a>.</p>",
        "id": 509813262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743637748
    },
    {
        "content": "<p>tpmccallum submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#pullrequestreview-2738005956\">PR review</a>.</p>",
        "id": 509819488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743641754
    },
    {
        "content": "<p>tpmccallum created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#discussion_r2025832097\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok, so that attribute (<code>#[allow(clippy::cast_possible_truncation)]</code> at the function level) seemed to do the trick.</p>\n<p>Build:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>cargo<span class=\"w\"> </span>build<span class=\"w\"> </span>--release\n<span class=\"w\">   </span>Compiling<span class=\"w\"> </span>proc-macro2<span class=\"w\"> </span>v1.0.92\n<span class=\"w\">   </span>Compiling<span class=\"w\"> </span>unicode-ident<span class=\"w\"> </span>v1.0.8\n<span class=\"w\">  </span>--<span class=\"w\"> </span>snip<span class=\"w\"> </span>--\n<span class=\"w\">   </span>Compiling<span class=\"w\"> </span>wasmtime-wasi-tls<span class=\"w\"> </span>v32.0.0<span class=\"w\"> </span><span class=\"o\">(</span>/Users/tpmccallum/wasmtime/crates/wasi-tls<span class=\"o\">)</span>\n<span class=\"w\">    </span>Finished<span class=\"w\"> </span><span class=\"sb\">`</span>release<span class=\"sb\">`</span><span class=\"w\"> </span>profile<span class=\"w\"> </span><span class=\"o\">[</span>optimized<span class=\"o\">]</span><span class=\"w\"> </span>target<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>10m<span class=\"w\"> </span>59s\n</code></pre></div>\n<p>Clippy:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_INCREMENTAL</span><span class=\"o\">=</span><span class=\"m\">0</span>\n$<span class=\"w\"> </span><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_DEV_DEBUG</span><span class=\"o\">=</span><span class=\"m\">0</span>\n$<span class=\"w\"> </span><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CARGO_PROFILE_TEST_DEBUG</span><span class=\"o\">=</span><span class=\"m\">0</span>\n$<span class=\"w\"> </span><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">RUSTFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-D warnings\"</span>\n$<span class=\"w\"> </span><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">WIT_REQUIRE_SEMICOLONS</span><span class=\"o\">=</span><span class=\"m\">1</span>\n$<span class=\"w\"> </span>cargo<span class=\"w\"> </span>clippy<span class=\"w\"> </span>--workspace<span class=\"w\"> </span>--all-targets\n<span class=\"w\">   </span>Compiling<span class=\"w\"> </span>proc-macro2<span class=\"w\"> </span>v1.0.92\n<span class=\"w\">   </span>Compiling<span class=\"w\"> </span>unicode-ident<span class=\"w\"> </span>v1.0.8\n<span class=\"w\">   </span>Compiling<span class=\"w\"> </span>serde<span class=\"w\"> </span>v1.0.215\n<span class=\"w\">  </span>--snip--\n<span class=\"w\">    </span>Checking<span class=\"w\"> </span>wasmtime-c-api<span class=\"w\"> </span>v32.0.0<span class=\"w\"> </span><span class=\"o\">(</span>/Users/tpmccallum/wasmtime/crates/c-api/artifact<span class=\"o\">)</span>\n<span class=\"w\">    </span>Finished<span class=\"w\"> </span><span class=\"sb\">`</span>dev<span class=\"sb\">`</span><span class=\"w\"> </span>profile<span class=\"w\"> </span><span class=\"o\">[</span>unoptimized<span class=\"o\">]</span><span class=\"w\"> </span>target<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>4m<span class=\"w\"> </span>34s\n</code></pre></div>\n<p>I will commit the changes now.</p>\n</blockquote>",
        "id": 509819490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743641754
    },
    {
        "content": "<p>tpmccallum updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>.</p>",
        "id": 509820341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743642221
    },
    {
        "content": "<p>tpmccallum updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>.</p>",
        "id": 509820729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743642447
    },
    {
        "content": "<p>tpmccallum updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>.</p>",
        "id": 509839020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743653241
    },
    {
        "content": "<p>tpmccallum updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>.</p>",
        "id": 509843332,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743655801
    },
    {
        "content": "<p>tpmccallum updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>.</p>",
        "id": 509848726,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743658972
    },
    {
        "content": "<p>tpmccallum <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#issuecomment-2774552109\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>:</p>\n<blockquote>\n<p>Ok, signing off for the day.<br>\n<code>cargo build --release</code> and <code>cargo clippy</code> are <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </p>\n<p>The absence of parentheses will give a helpful result:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"compress\"</span><span class=\"w\"> </span>compress.wasm\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">compress</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">compress</span><span class=\"o\">'</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">calls</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">parentheses</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress()\"</span><span class=\"p\">).</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">escaped</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">).</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">unexpected</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">..</span><span class=\"mi\">8</span>\n</code></pre></div>\n<p>Interestingly, the absence of outer double quotes is a little trickier. The Rust code I added attempts to test for double quotes via <code>starts_with</code> and <code>ends_with</code>, but this does not work. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"starts_with: {}, ends_with: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">ends_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>One would assume the result to be <code>starts_with: true, ends_with: true</code> but in reality the result is actually:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">starts_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ends_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span>\n</code></pre></div>\n<p>Alas, this is not a good enough validator of whether the exported function being invoked by <code>--invoke</code> is surrounded in double quotes. I did try (and succeeded) to see the outer double quotes when they existed. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// This `invoke` that Rust sees here does not show the outer double quotes. Only the following `func()` or `func(42)`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">invoke</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"c1\">// However, I can get the raw data and see double quotes if/when they exist. For example `\"func()\"` or `\"func(42)\"`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw_invoke</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The overarching issue is ... if a user does not surround the exported function in double quotes it fails in the shell log before the Rust even sees it. And the result is something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span>compress<span class=\"o\">(</span><span class=\"se\">\\\"</span>hello<span class=\"se\">\\\"</span><span class=\"o\">)</span><span class=\"w\"> </span>compress.wasm\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>zsh:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>file<span class=\"w\"> </span>attribute:<span class=\"w\"> </span><span class=\"s2\">\"</span>\n</code></pre></div>\n<p>I am stumped in finding a way to enforce outer double quotes in the <code>wasmtime run</code> CLI. For this reason, I ended up being a bit verbose on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511/files#diff-0363d17382eb8132dd4d579c9a666828fbea069adaa1de08f5ba5b548a854eb6\">the documentation on this PR</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code><span class=\"gu\">## `run`</span>\n\nThis is the <span class=\"sb\">`wasmtime`</span> CLI's main subcommand, and it's also the default if no\nother subcommand is provided. The <span class=\"sb\">`run`</span> command will execute a WebAssembly\nmodule. This means that the module will be compiled to native code,\ninstantiated, and then optionally have an export executed.\n\nThe <span class=\"sb\">`wasmtime`</span> CLI will automatically hook up any WASI-related imported\nfunctionality, but at this time, if your module imports anything else, it will\nfail instantiation.\n\nThe <span class=\"sb\">`run`</span> command takes one positional argument, which is the name of the module to run:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>foo.wasm\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nNote that the <span class=\"sb\">`wasmtime`</span> CLI can take both a binary WebAssembly file (<span class=\"sb\">`*.wasm`</span>)\nas well as the text format for WebAssembly (<span class=\"sb\">`*.wat`</span>):\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>foo.wat\n<span class=\"sb\">```</span>\n\nThe <span class=\"sb\">`run`</span> command accepts an optional <span class=\"sb\">`--invoke`</span> argument, which is the name of\nan exported function of the module to run.\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize()\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nThe exported function's name and exported function's parentheses must both be enclosed in one set of double quotes, i.e. <span class=\"sb\">`\"initialize()\"`</span>.\nThis treats the exported function as a single argument and prevents issues with shell interpretation.\nThe presence of the parenthesis <span class=\"sb\">`()`</span> signifies function invocation, as apposed to the function name just being referenced.\nThis convention helps to distinguish function calls from other kinds of string arguments.\n\n<span class=\"gs\">**Note:**</span> If your function takes a string argument, ensure that you use escaped double quotes inside the parentheses. For example:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize(\\\"hello\\\")\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nEach individual argument within the parentheses must be separated by a comma:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize(\\\"Pi\\\", 3.14)\"</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"add(1, 2)\"</span>\n<span class=\"sb\">```</span>\n</code></pre></div>\n<p>Hope all of that makes sense. Happy to do more - happy reviewing.</p>\n</blockquote>",
        "id": 509848733,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743658977
    },
    {
        "content": "<p>tpmccallum edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#issuecomment-2774552109\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>:</p>\n<blockquote>\n<p>Ok, signing off for the day.<br>\n<code>cargo build --release</code> and <code>cargo clippy</code> are <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </p>\n<p>The absence of parentheses will give a helpful result:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"compress\"</span><span class=\"w\"> </span>compress.wasm\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">compress</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">compress</span><span class=\"o\">'</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">calls</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">parentheses</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress()\"</span><span class=\"p\">).</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">escaped</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">).</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">unexpected</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">..</span><span class=\"mi\">8</span>\n</code></pre></div>\n<p>Interestingly, the absence of outer double quotes is a little trickier. The Rust code I added attempts to test for double quotes via <code>starts_with</code> and <code>ends_with</code>, but this does not work. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"starts_with: {}, ends_with: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">ends_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>One would assume the result to be <code>starts_with: true, ends_with: true</code> but in reality the result is actually:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">starts_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ends_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span>\n</code></pre></div>\n<p>Alas, this is not a good enough validator of whether the exported function being invoked by <code>--invoke</code> is surrounded in double quotes. I did try (and succeeded) to see the outer double quotes when they existed. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// This `invoke` that Rust sees here does not show the outer double quotes. Only the following `func()` or `func(42)`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">invoke</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"c1\">// However, I can get the raw data and see double quotes if/when they exist. For example `\"func()\"` or `\"func(42)\"`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw_invoke</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The overarching issue is ... if a user does not surround the exported function in double quotes it fails in the shell long before the Rust even sees it. And the result is something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span>compress<span class=\"o\">(</span><span class=\"se\">\\\"</span>hello<span class=\"se\">\\\"</span><span class=\"o\">)</span><span class=\"w\"> </span>compress.wasm\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>zsh:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>file<span class=\"w\"> </span>attribute:<span class=\"w\"> </span><span class=\"s2\">\"</span>\n</code></pre></div>\n<p>I am stumped in finding a way to enforce outer double quotes in the <code>wasmtime run</code> CLI. For this reason, I ended up being a bit verbose on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511/files#diff-0363d17382eb8132dd4d579c9a666828fbea069adaa1de08f5ba5b548a854eb6\">the documentation on this PR</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code><span class=\"gu\">## `run`</span>\n\nThis is the <span class=\"sb\">`wasmtime`</span> CLI's main subcommand, and it's also the default if no\nother subcommand is provided. The <span class=\"sb\">`run`</span> command will execute a WebAssembly\nmodule. This means that the module will be compiled to native code,\ninstantiated, and then optionally have an export executed.\n\nThe <span class=\"sb\">`wasmtime`</span> CLI will automatically hook up any WASI-related imported\nfunctionality, but at this time, if your module imports anything else, it will\nfail instantiation.\n\nThe <span class=\"sb\">`run`</span> command takes one positional argument, which is the name of the module to run:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>foo.wasm\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nNote that the <span class=\"sb\">`wasmtime`</span> CLI can take both a binary WebAssembly file (<span class=\"sb\">`*.wasm`</span>)\nas well as the text format for WebAssembly (<span class=\"sb\">`*.wat`</span>):\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>foo.wat\n<span class=\"sb\">```</span>\n\nThe <span class=\"sb\">`run`</span> command accepts an optional <span class=\"sb\">`--invoke`</span> argument, which is the name of\nan exported function of the module to run.\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize()\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nThe exported function's name and exported function's parentheses must both be enclosed in one set of double quotes, i.e. <span class=\"sb\">`\"initialize()\"`</span>.\nThis treats the exported function as a single argument and prevents issues with shell interpretation.\nThe presence of the parenthesis <span class=\"sb\">`()`</span> signifies function invocation, as apposed to the function name just being referenced.\nThis convention helps to distinguish function calls from other kinds of string arguments.\n\n<span class=\"gs\">**Note:**</span> If your function takes a string argument, ensure that you use escaped double quotes inside the parentheses. For example:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize(\\\"hello\\\")\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nEach individual argument within the parentheses must be separated by a comma:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize(\\\"Pi\\\", 3.14)\"</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"add(1, 2)\"</span>\n<span class=\"sb\">```</span>\n</code></pre></div>\n<p>Hope all of that makes sense. Happy to do more - happy reviewing.</p>\n</blockquote>",
        "id": 509848844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743659043
    },
    {
        "content": "<p>tpmccallum updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>.</p>",
        "id": 509849017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743659138
    },
    {
        "content": "<p>tpmccallum edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#issuecomment-2774552109\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>:</p>\n<blockquote>\n<p>Ok, signing off for the day.<br>\n<code>cargo build --release</code> and <code>cargo clippy</code> are <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </p>\n<p>The absence of parentheses will give a helpful result:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"compress\"</span><span class=\"w\"> </span>compress.wasm\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">compress</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">compress</span><span class=\"o\">'</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">calls</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">parentheses</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress()\"</span><span class=\"p\">).</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">escaped</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">).</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">unexpected</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">..</span><span class=\"mi\">8</span>\n</code></pre></div>\n<p>Interestingly, the absence of outer double quotes is a little trickier. The Rust code I added attempts to test for double quotes via <code>starts_with</code> and <code>ends_with</code>, but this does not work. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"starts_with: {}, ends_with: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">ends_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>One would assume the result to be <code>starts_with: true, ends_with: true</code> but in reality the result is actually:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">starts_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ends_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span>\n</code></pre></div>\n<p>Alas, this is not a good enough validator of whether the exported function being invoked by <code>--invoke</code> is surrounded in double quotes. I did try (and succeeded) to see the outer double quotes when they existed. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// This `invoke` that Rust sees here does not show the outer double quotes. Only the following `func()` or `func(42)`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">invoke</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"c1\">// However, I can get the raw data and see double quotes if/when they exist. For example `\"func()\"` or `\"func(42)\"`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw_invoke</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The overarching issue is ... if a user does not surround the exported function in double quotes it fails in the shell long before the Rust even sees it. And the result is something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span>compress<span class=\"o\">(</span><span class=\"se\">\\\"</span>hello<span class=\"se\">\\\"</span><span class=\"o\">)</span><span class=\"w\"> </span>compress.wasm\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>zsh:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>file<span class=\"w\"> </span>attribute:<span class=\"w\"> </span><span class=\"s2\">\"</span>\n</code></pre></div>\n<p>I am stumped in finding a way to enforce outer double quotes in the <code>wasmtime run</code> CLI. For this reason, I ended up being a bit verbose on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511/files#diff-0363d17382eb8132dd4d579c9a666828fbea069adaa1de08f5ba5b548a854eb6\">the documentation on this PR</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code><span class=\"gu\">## `run`</span>\n\nThis is the <span class=\"sb\">`wasmtime`</span> CLI's main subcommand, and it's also the default if no\nother subcommand is provided. The <span class=\"sb\">`run`</span> command will execute a WebAssembly\nmodule. This means that the module will be compiled to native code,\ninstantiated, and then optionally have an export executed.\n\nThe <span class=\"sb\">`wasmtime`</span> CLI will automatically hook up any WASI-related imported\nfunctionality, but at this time, if your module imports anything else, it will\nfail instantiation.\n\nThe <span class=\"sb\">`run`</span> command takes one positional argument, which is the name of the module to run:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>foo.wasm\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nNote that the <span class=\"sb\">`wasmtime`</span> CLI can take both a binary WebAssembly file (<span class=\"sb\">`*.wasm`</span>)\nas well as the text format for WebAssembly (<span class=\"sb\">`*.wat`</span>):\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>foo.wat\n<span class=\"sb\">```</span>\n\nThe <span class=\"sb\">`run`</span> command accepts an optional <span class=\"sb\">`--invoke`</span> argument, which is the name of\nan exported function of the module to run.\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize()\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nThe exported function's name and exported function's parentheses must both be enclosed in one set of double quotes, i.e. <span class=\"sb\">`\"initialize()\"`</span>.\nThis treats the exported function as a single argument and prevents issues with shell interpretation.\nThe presence of the parenthesis <span class=\"sb\">`()`</span> signifies function invocation, as apposed to the function name just being referenced.\nThis convention helps to distinguish function calls from other kinds of string arguments.\n\n<span class=\"gs\">**Note:**</span> If your function takes a string argument, ensure that you use escaped double quotes inside the parentheses. For example:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize(\\\"hello\\\")\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nEach individual argument within the parentheses must be separated by a comma:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize(\\\"Pi\\\", 3.14)\"</span><span class=\"w\"> </span>foo.wasm\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"add(1, 2)\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n</code></pre></div>\n<p>Hope all of that makes sense. Happy to do more - happy reviewing.</p>\n</blockquote>",
        "id": 509849035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743659152
    },
    {
        "content": "<p>tpmccallum edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#issuecomment-2774552109\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>:</p>\n<blockquote>\n<p>Ok, signing off for the day.<br>\n<code>cargo build --release</code> and <code>cargo clippy</code> are <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </p>\n<p>The absence of parentheses will give a helpful result:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"compress\"</span><span class=\"w\"> </span>compress.wasm\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">compress</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">compress</span><span class=\"o\">'</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">calls</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">parentheses</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress()\"</span><span class=\"p\">).</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">escaped</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">).</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">unexpected</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">..</span><span class=\"mi\">8</span>\n</code></pre></div>\n<p>Interestingly, the absence of outer double quotes is a little trickier. The Rust code I added attempts to test for double quotes via <code>starts_with</code> and <code>ends_with</code>, but this does not work. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"starts_with: {}, ends_with: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">ends_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>One would assume the result to be <code>starts_with: true, ends_with: true</code> but in reality the result is actually:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">starts_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ends_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span>\n</code></pre></div>\n<p>Alas, this is not a good enough validator of whether the exported function being invoked by <code>--invoke</code> is surrounded in double quotes. I did try (and succeeded) to see the outer double quotes when they existed. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// This `invoke` that Rust sees here does not show the outer double quotes. Only the following `func()` or `func(42)`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">invoke</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"c1\">// However, I can get the raw data and see double quotes if/when they exist. For example `\"func()\"` or `\"func(42)\"`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw_invoke</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The overarching issue is ... if a user does not surround the exported function in double quotes it fails in the shell long before the Rust even sees it. And the result is something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span>compress<span class=\"o\">(</span><span class=\"se\">\\\"</span>hello<span class=\"se\">\\\"</span><span class=\"o\">)</span><span class=\"w\"> </span>compress.wasm\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>zsh:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>file<span class=\"w\"> </span>attribute:<span class=\"w\"> </span><span class=\"s2\">\"</span>\n</code></pre></div>\n<p>I am stumped in finding a way to enforce outer double quotes in the <code>wasmtime run</code> CLI. </p>\n<p>(I am convinced that even something built into wasm-wave would not catch the missing outer double quotes in time anyway.)</p>\n<p>For this reason, I ended up being a bit verbose on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511/files#diff-0363d17382eb8132dd4d579c9a666828fbea069adaa1de08f5ba5b548a854eb6\">the documentation on this PR</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code><span class=\"gu\">## `run`</span>\n\nThis is the <span class=\"sb\">`wasmtime`</span> CLI's main subcommand, and it's also the default if no\nother subcommand is provided. The <span class=\"sb\">`run`</span> command will execute a WebAssembly\nmodule. This means that the module will be compiled to native code,\ninstantiated, and then optionally have an export executed.\n\nThe <span class=\"sb\">`wasmtime`</span> CLI will automatically hook up any WASI-related imported\nfunctionality, but at this time, if your module imports anything else, it will\nfail instantiation.\n\nThe <span class=\"sb\">`run`</span> command takes one positional argument, which is the name of the module to run:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>foo.wasm\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nNote that the <span class=\"sb\">`wasmtime`</span> CLI can take both a binary WebAssembly file (<span class=\"sb\">`*.wasm`</span>)\nas well as the text format for WebAssembly (<span class=\"sb\">`*.wat`</span>):\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>foo.wat\n<span class=\"sb\">```</span>\n\nThe <span class=\"sb\">`run`</span> command accepts an optional <span class=\"sb\">`--invoke`</span> argument, which is the name of\nan exported function of the module to run.\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize()\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nThe exported function's name and exported function's parentheses must both be enclosed in one set of double quotes, i.e. <span class=\"sb\">`\"initialize()\"`</span>.\nThis treats the exported function as a single argument and prevents issues with shell interpretation.\nThe presence of the parenthesis <span class=\"sb\">`()`</span> signifies function invocation, as apposed to the function name just being referenced.\nThis convention helps to distinguish function calls from other kinds of string arguments.\n\n<span class=\"gs\">**Note:**</span> If your function takes a string argument, ensure that you use escaped double quotes inside the parentheses. For example:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize(\\\"hello\\\")\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nEach individual argument within the parentheses must be separated by a comma:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize(\\\"Pi\\\", 3.14)\"</span><span class=\"w\"> </span>foo.wasm\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"add(1, 2)\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n</code></pre></div>\n<p>Hope all of that makes sense. Happy to do more - happy reviewing.</p>\n</blockquote>",
        "id": 509849180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743659226
    },
    {
        "content": "<p><strong>tpmccallum</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>.</p>",
        "id": 509902731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743677136
    },
    {
        "content": "<p>pchickey merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>.</p>",
        "id": 510237706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743782295
    },
    {
        "content": "<p>tpmccallum edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#issuecomment-2774552109\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>:</p>\n<blockquote>\n<p>Ok, signing off for the day.<br>\n<code>cargo build --release</code> and <code>cargo clippy</code> are <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </p>\n<p>The absence of parentheses will give a helpful result:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"compress\"</span><span class=\"w\"> </span>compress.wasm\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">compress</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">compress</span><span class=\"o\">'</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">calls</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">parentheses</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress()\"</span><span class=\"p\">).</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">escaped</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">).</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">unexpected</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">..</span><span class=\"mi\">8</span>\n</code></pre></div>\n<h1>Detecting Quotes In Rust</h1>\n<p><strong>Interestingly, the absence of outer double quotes is a little trickier. The Rust code I added attempts to test for double quotes via <code>starts_with</code> and <code>ends_with</code>, but this does not work. For example:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"starts_with: {}, ends_with: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">ends_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">));</span>\n</code></pre></div>\n<p><strong>One would assume the result to be <code>starts_with: true, ends_with: true</code> but in reality the result is actually:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">starts_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ends_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span>\n</code></pre></div>\n<p>Alas, this is not a validator that is good enough to know whether the exported function being invoked by <code>--invoke</code> is surrounded by double quotes. I did try (and succeeded) to see the outer double quotes when they actually do existed. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// This `invoke` that Rust sees here does not show the outer double quotes. Only the following `func()` or `func(42)`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">invoke</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"c1\">// However, I can get the raw data and see double quotes if/when they exist. For example `\"func()\"` or `\"func(42)\"`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw_invoke</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The overarching issue is that <strong>if a user does not surround the exported function in quotes, it fails in the shell long before the Rust even sees it</strong>. And the result is something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span>compress<span class=\"o\">(</span><span class=\"se\">\\\"</span>hello<span class=\"se\">\\\"</span><span class=\"o\">)</span><span class=\"w\"> </span>compress.wasm\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>zsh:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>file<span class=\"w\"> </span>attribute:<span class=\"w\"> </span><span class=\"s2\">\"</span>\n</code></pre></div>\n<p>I am stumped in finding a way to enforce outer double quotes in the <code>wasmtime run</code> CLI. </p>\n<p>(I am convinced that even something built into wasm-wave would not catch the missing outer double quotes in time anyway.)</p>\n<p>For this reason, I ended up being a bit verbose on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511/files#diff-0363d17382eb8132dd4d579c9a666828fbea069adaa1de08f5ba5b548a854eb6\">the documentation on this PR</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code><span class=\"gu\">## `run`</span>\n\nThis is the <span class=\"sb\">`wasmtime`</span> CLI's main subcommand, and it's also the default if no\nother subcommand is provided. The <span class=\"sb\">`run`</span> command will execute a WebAssembly\nmodule. This means that the module will be compiled to native code,\ninstantiated, and then optionally have an export executed.\n\nThe <span class=\"sb\">`wasmtime`</span> CLI will automatically hook up any WASI-related imported\nfunctionality, but at this time, if your module imports anything else, it will\nfail instantiation.\n\nThe <span class=\"sb\">`run`</span> command takes one positional argument, which is the name of the module to run:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>foo.wasm\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nNote that the <span class=\"sb\">`wasmtime`</span> CLI can take both a binary WebAssembly file (<span class=\"sb\">`*.wasm`</span>)\nas well as the text format for WebAssembly (<span class=\"sb\">`*.wat`</span>):\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>foo.wat\n<span class=\"sb\">```</span>\n\nThe <span class=\"sb\">`run`</span> command accepts an optional <span class=\"sb\">`--invoke`</span> argument, which is the name of\nan exported function of the module to run.\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize()\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nThe exported function's name and exported function's parentheses must both be enclosed in one set of double quotes, i.e. <span class=\"sb\">`\"initialize()\"`</span>.\nThis treats the exported function as a single argument and prevents issues with shell interpretation.\nThe presence of the parenthesis <span class=\"sb\">`()`</span> signifies function invocation, as apposed to the function name just being referenced.\nThis convention helps to distinguish function calls from other kinds of string arguments.\n\n<span class=\"gs\">**Note:**</span> If your function takes a string argument, ensure that you use escaped double quotes inside the parentheses. For example:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize(\\\"hello\\\")\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nEach individual argument within the parentheses must be separated by a comma:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize(\\\"Pi\\\", 3.14)\"</span><span class=\"w\"> </span>foo.wasm\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"add(1, 2)\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n</code></pre></div>\n<p>Hope all of that makes sense. Happy to do more - happy reviewing.</p>\n</blockquote>",
        "id": 510313414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743814005
    },
    {
        "content": "<p>tpmccallum edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#issuecomment-2774552109\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>:</p>\n<blockquote>\n<p>Ok, signing off for the day.<br>\n<code>cargo build --release</code> and <code>cargo clippy</code> are <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </p>\n<p>The absence of parentheses will give a helpful result:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"compress\"</span><span class=\"w\"> </span>compress.wasm\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">compress</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">compress</span><span class=\"o\">'</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">calls</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">parentheses</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress()\"</span><span class=\"p\">).</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">escaped</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">).</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">unexpected</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">..</span><span class=\"mi\">8</span>\n</code></pre></div>\n<h1>Detecting Quotes In Rust</h1>\n<p><strong>Interestingly, the absence of outer double quotes is a little trickier. The Rust code I added attempts to test for double quotes via <code>starts_with</code> and <code>ends_with</code>, but this does not work. For example:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"starts_with: {}, ends_with: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">ends_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">));</span>\n</code></pre></div>\n<p><strong>One would assume the result to be <code>starts_with: true, ends_with: true</code> but in reality the result is actually:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">starts_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ends_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span>\n</code></pre></div>\n<p>Alas, this is not a validator that is good enough to know whether the exported function being invoked by <code>--invoke</code> is surrounded by double quotes. <strong>I did try (and succeeded using the <code>format!</code> macro)</strong> to see the outer double quotes when they actually do existed. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// This `invoke` that Rust sees here does not show the outer double quotes. Only the following `func()` or `func(42)`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">invoke</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"c1\">// However, I can get the raw data and see double quotes if/when they exist. For example `\"func()\"` or `\"func(42)\"`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw_invoke</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The overarching issue is that <strong>if a user does not surround the exported function in quotes, it fails in the shell long before the Rust even sees it</strong>. And the result is something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span>compress<span class=\"o\">(</span><span class=\"se\">\\\"</span>hello<span class=\"se\">\\\"</span><span class=\"o\">)</span><span class=\"w\"> </span>compress.wasm\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>zsh:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>file<span class=\"w\"> </span>attribute:<span class=\"w\"> </span><span class=\"s2\">\"</span>\n</code></pre></div>\n<p>I am stumped in finding a way to enforce outer double quotes in the <code>wasmtime run</code> CLI. </p>\n<p>(I am convinced that even something built into wasm-wave would not catch the missing outer double quotes in time anyway.)</p>\n<p>For this reason, I ended up being a bit verbose on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511/files#diff-0363d17382eb8132dd4d579c9a666828fbea069adaa1de08f5ba5b548a854eb6\">the documentation on this PR</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code><span class=\"gu\">## `run`</span>\n\nThis is the <span class=\"sb\">`wasmtime`</span> CLI's main subcommand, and it's also the default if no\nother subcommand is provided. The <span class=\"sb\">`run`</span> command will execute a WebAssembly\nmodule. This means that the module will be compiled to native code,\ninstantiated, and then optionally have an export executed.\n\nThe <span class=\"sb\">`wasmtime`</span> CLI will automatically hook up any WASI-related imported\nfunctionality, but at this time, if your module imports anything else, it will\nfail instantiation.\n\nThe <span class=\"sb\">`run`</span> command takes one positional argument, which is the name of the module to run:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>foo.wasm\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nNote that the <span class=\"sb\">`wasmtime`</span> CLI can take both a binary WebAssembly file (<span class=\"sb\">`*.wasm`</span>)\nas well as the text format for WebAssembly (<span class=\"sb\">`*.wat`</span>):\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>foo.wat\n<span class=\"sb\">```</span>\n\nThe <span class=\"sb\">`run`</span> command accepts an optional <span class=\"sb\">`--invoke`</span> argument, which is the name of\nan exported function of the module to run.\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize()\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nThe exported function's name and exported function's parentheses must both be enclosed in one set of double quotes, i.e. <span class=\"sb\">`\"initialize()\"`</span>.\nThis treats the exported function as a single argument and prevents issues with shell interpretation.\nThe presence of the parenthesis <span class=\"sb\">`()`</span> signifies function invocation, as apposed to the function name just being referenced.\nThis convention helps to distinguish function calls from other kinds of string arguments.\n\n<span class=\"gs\">**Note:**</span> If your function takes a string argument, ensure that you use escaped double quotes inside the parentheses. For example:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize(\\\"hello\\\")\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n\nEach individual argument within the parentheses must be separated by a comma:\n\n<span class=\"sb\">```sh</span>\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"initialize(\\\"Pi\\\", 3.14)\"</span><span class=\"w\"> </span>foo.wasm\n$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"add(1, 2)\"</span><span class=\"w\"> </span>foo.wasm\n<span class=\"sb\">```</span>\n</code></pre></div>\n<p>Hope all of that makes sense. Happy to do more - happy reviewing.</p>\n</blockquote>",
        "id": 510318495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743817875
    },
    {
        "content": "<p>tpmccallum edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#issuecomment-2774552109\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>:</p>\n<blockquote>\n<p>Ok, signing off for the day.<br>\n<code>cargo build --release</code> and <code>cargo clippy</code> are <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </p>\n<p>The absence of parentheses will give a helpful result:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"compress\"</span><span class=\"w\"> </span>compress.wasm\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">compress</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">compress</span><span class=\"o\">'</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">calls</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">parentheses</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress()\"</span><span class=\"p\">).</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">escaped</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">).</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">unexpected</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">..</span><span class=\"mi\">8</span>\n</code></pre></div>\n<h1>Detecting Quotes In Rust</h1>\n<p><strong>Interestingly, the absence of outer double quotes is a little trickier. The Rust code I added attempts to test for double quotes via <code>starts_with</code> and <code>ends_with</code>, but this does not work. For example:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"starts_with: {}, ends_with: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">ends_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">));</span>\n</code></pre></div>\n<p><strong>One would assume the result to be <code>starts_with: true, ends_with: true</code> but in reality the result is actually:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">starts_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ends_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span>\n</code></pre></div>\n<p>Alas, this is not a validator that is good enough to know whether the exported function being invoked by <code>--invoke</code> is surrounded by double quotes. <strong>I did try (and succeeded using the <code>format!</code> macro)</strong> to see the outer double quotes when they actually do existed. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// This `invoke` that Rust sees here does not show the outer double quotes. Only the following `func()` or `func(42)`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">invoke</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"c1\">// However, I can get the raw data and see double quotes if/when they exist. For example `\"func()\"` or `\"func(42)\"`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw_invoke</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The overarching issue is that <strong>if a user does not surround the exported function in quotes, it fails in the shell long before the Rust even sees it</strong>. And the result is something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span>compress<span class=\"o\">(</span><span class=\"se\">\\\"</span>hello<span class=\"se\">\\\"</span><span class=\"o\">)</span><span class=\"w\"> </span>compress.wasm\n\nzsh:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>file<span class=\"w\"> </span>attribute:<span class=\"w\"> </span><span class=\"s2\">\"</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span>compress<span class=\"o\">(</span><span class=\"s2\">\"hello\"</span><span class=\"o\">)</span><span class=\"w\"> </span>compress.wasm\n\nzsh:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>file<span class=\"w\"> </span>attribute:<span class=\"w\"> </span>h\n</code></pre></div>\n<hr>\n<p>The following quoting examples do work, which is great.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"compress(\\\"hello\\\")\"</span><span class=\"w\"> </span>compress.wasm\n\n<span class=\"o\">[</span><span class=\"m\">40</span>,<span class=\"w\"> </span><span class=\"m\">181</span>,<span class=\"w\"> </span><span class=\"m\">47</span>,<span class=\"w\"> </span><span class=\"m\">253</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">88</span>,<span class=\"w\"> </span><span class=\"m\">41</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">104</span>,<span class=\"w\"> </span><span class=\"m\">101</span>,<span class=\"w\"> </span><span class=\"m\">108</span>,<span class=\"w\"> </span><span class=\"m\">108</span>,<span class=\"w\"> </span><span class=\"m\">111</span><span class=\"o\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s1\">'compress(\"hello\")'</span><span class=\"w\"> </span>compress.wasm\n\n<span class=\"o\">[</span><span class=\"m\">40</span>,<span class=\"w\"> </span><span class=\"m\">181</span>,<span class=\"w\"> </span><span class=\"m\">47</span>,<span class=\"w\"> </span><span class=\"m\">253</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">88</span>,<span class=\"w\"> </span><span class=\"m\">41</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">104</span>,<span class=\"w\"> </span><span class=\"m\">101</span>,<span class=\"w\"> </span><span class=\"m\">108</span>,<span class=\"w\"> </span><span class=\"m\">108</span>,<span class=\"w\"> </span><span class=\"m\">111</span><span class=\"o\">]</span>\n</code></pre></div>\n<h2>Assist</h2>\n<p>I am stumped in finding a way to enforce outer double or single quotes in the <code>wasmtime run</code> CLI. </p>\n<p>(I am convinced that even something built into wasm-wave would not catch the missing outer double quotes in time either. The errors with no outer quotes are stopped in their tracks in the CLI)</p>\n<p>For this reason, I ended up being a bit verbose on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511/\">the documentation on this PR</a></p>\n<p>Hope all of that makes sense. Happy to do more - happy reviewing.</p>\n</blockquote>",
        "id": 510320120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743818912
    },
    {
        "content": "<p>tpmccallum edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511#issuecomment-2774552109\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">PR #10511</a>:</p>\n<blockquote>\n<p>Ok, signing off for the day.<br>\n<code>cargo build --release</code> and <code>cargo clippy</code> are <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </p>\n<p>The absence of parentheses will give a helpful result:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"compress\"</span><span class=\"w\"> </span>compress.wasm\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">compress</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">compress</span><span class=\"o\">'</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">calls</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">parentheses</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress()\"</span><span class=\"p\">).</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enveloped</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">escaped</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">quotes</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">).</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">unexpected</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">..</span><span class=\"mi\">8</span>\n</code></pre></div>\n<h1>Detecting Quotes In Rust</h1>\n<p><strong>Interestingly, the absence of outer double quotes is a little trickier. The Rust code I added attempts to test for double quotes via <code>starts_with</code> and <code>ends_with</code>, but this does not work. For example:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"compress(</span><span class=\"se\">\\\"</span><span class=\"s\">hello</span><span class=\"se\">\\\"</span><span class=\"s\">)\"</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"starts_with: {}, ends_with: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">ends_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">));</span>\n</code></pre></div>\n<p><strong>One would assume the result to be <code>starts_with: true, ends_with: true</code> but in reality the result is actually:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">starts_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ends_with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span>\n</code></pre></div>\n<p>Alas, this is not a validator that is good enough to know whether the exported function being invoked by <code>--invoke</code> is surrounded by double quotes. <strong>I did try (and succeeded using the <code>format!</code> macro)</strong> to see the outer double quotes when they actually do existed. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// This `invoke` that Rust sees here does not show the outer double quotes. Only the following `func()` or `func(42)`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">invoke</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"c1\">// However, I can get the raw data and see double quotes if/when they exist. For example `\"func()\"` or `\"func(42)\"`.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw_invoke</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The overarching issue is that <strong>if a user does not surround the exported function in quotes, it fails in the shell long before the Rust even sees it</strong>. And the result is something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span>compress<span class=\"o\">(</span><span class=\"se\">\\\"</span>hello<span class=\"se\">\\\"</span><span class=\"o\">)</span><span class=\"w\"> </span>compress.wasm\n\nzsh:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>file<span class=\"w\"> </span>attribute:<span class=\"w\"> </span><span class=\"s2\">\"</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span>compress<span class=\"o\">(</span><span class=\"s2\">\"hello\"</span><span class=\"o\">)</span><span class=\"w\"> </span>compress.wasm\n\nzsh:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>file<span class=\"w\"> </span>attribute:<span class=\"w\"> </span>h\n</code></pre></div>\n<hr>\n<p>The following quoting examples do work, which is great.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s2\">\"compress(\\\"hello\\\")\"</span><span class=\"w\"> </span>compress.wasm\n\n<span class=\"o\">[</span><span class=\"m\">40</span>,<span class=\"w\"> </span><span class=\"m\">181</span>,<span class=\"w\"> </span><span class=\"m\">47</span>,<span class=\"w\"> </span><span class=\"m\">253</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">88</span>,<span class=\"w\"> </span><span class=\"m\">41</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">104</span>,<span class=\"w\"> </span><span class=\"m\">101</span>,<span class=\"w\"> </span><span class=\"m\">108</span>,<span class=\"w\"> </span><span class=\"m\">108</span>,<span class=\"w\"> </span><span class=\"m\">111</span><span class=\"o\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--invoke<span class=\"w\"> </span><span class=\"s1\">'compress(\"hello\")'</span><span class=\"w\"> </span>compress.wasm\n\n<span class=\"o\">[</span><span class=\"m\">40</span>,<span class=\"w\"> </span><span class=\"m\">181</span>,<span class=\"w\"> </span><span class=\"m\">47</span>,<span class=\"w\"> </span><span class=\"m\">253</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">88</span>,<span class=\"w\"> </span><span class=\"m\">41</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">104</span>,<span class=\"w\"> </span><span class=\"m\">101</span>,<span class=\"w\"> </span><span class=\"m\">108</span>,<span class=\"w\"> </span><span class=\"m\">108</span>,<span class=\"w\"> </span><span class=\"m\">111</span><span class=\"o\">]</span>\n</code></pre></div>\n<h2>Assist</h2>\n<p>I am stumped in finding a way to enforce outer double or single quotes in the <code>wasmtime run</code> CLI. </p>\n<p>(I am convinced that even something built into wasm-wave would not catch the missing outer double quotes in time either. The errors with no outer quotes are stopped in their tracks in the CLI)</p>\n<p>For this reason, I ended up being a bit verbose on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10054/files#diff-0363d17382eb8132dd4d579c9a666828fbea069adaa1de08f5ba5b548a854eb6\">the documentation on this PR</a></p>\n<p>Hope all of that makes sense. Happy to do more - happy reviewing.</p>\n</blockquote>",
        "id": 510320291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1743819039
    }
]