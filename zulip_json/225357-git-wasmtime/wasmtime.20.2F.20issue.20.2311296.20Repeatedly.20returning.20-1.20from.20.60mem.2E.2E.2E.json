[
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296\">issue #11296</a>:</p>\n<blockquote>\n<h3>Describe the bug</h3>\n<p>Hello, I caught the following performance anomalies while using <code>wasmtime</code>. The specific performance is as follows:</p>\n<p>&lt;img width=\"414\" height=\"127\" alt=\"Image\" src=\"<a href=\"https://github.com/user-attachments/assets/b2447f47-b354-431e-97b9-02562124977d\">https://github.com/user-attachments/assets/b2447f47-b354-431e-97b9-02562124977d</a>\" /&gt;</p>\n<p>The data is in seconds, and each data is the result of ten executions and averages.</p>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/user-attachments/files/21366488/test_case.zip\">test_case.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">wasm2wat</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">wat2wasm</span>\n<span class=\"n\">wasm2wat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"n\">wat2wasm</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">Execute</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">collect</span><span class=\"w\"> </span><span class=\"n\">data</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">task</span><span class=\"o\">-</span><span class=\"n\">clock</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">wasmer</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">task</span><span class=\"o\">-</span><span class=\"n\">clock</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">task</span><span class=\"o\">-</span><span class=\"n\">clock</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">wasmedge</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">jit</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">task</span><span class=\"o\">-</span><span class=\"n\">clock</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">build_fast_jit</span><span class=\"o\">/</span><span class=\"n\">iwasm</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">task</span><span class=\"o\">-</span><span class=\"n\">clock</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">build_llvm_jit</span><span class=\"o\">/</span><span class=\"n\">iwasm</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<h3>Expected and actual Results</h3>\n<p><code>test_case.wasm</code> causes large execution time differences between several runtimes, with <code>wasmtime</code> and <code>wasmer</code> being particularly pronounced. The execution time of <code>wasmer</code> is about 5x-6x, and the execution time of <code>wasmtime</code> is about 7x-9x.<br>\nI did an analysis of <code>tase_case.wat</code> and found that when I deleted the code like the following for 50-52 lines, the execution time is as shown in <code>modified.wasm</code>. At this point, the results of each runtime are relatively normal. From this I think the following directives may be causing performance anomalies in both runtime tools.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">          </span><span class=\"p\">(</span><span class=\"nb\">drop</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">grow</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)))</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>The runtime tools are all built on release and use JIT mode.<br>\n<code>Wasmer</code> uses the <code>Cranelift</code> backend, and the execution time of the <code>llvm</code> backend for this test case is basically the same as that of <code>Cranelift</code>.</p>\n<ul>\n<li>wasmer：wasmer 6.0.1</li>\n<li>wasmtime：wasmtime 35.0.0 (9c2e6f17c 2025-06-17)</li>\n<li>wasmedge：version 0.14.1</li>\n<li>WAMR：iwasm 2.4.0</li>\n<li>wabt：1.0.27</li>\n<li>llvm：18.1.8</li>\n<li>Host OS：Ubuntu 22.04.5 LTS x64</li>\n<li>CPU：12th Gen Intel® Core™ i7-12700 × 20</li>\n<li>rustc：rustc 1.87.0 (17067e9ac 2025-05-09)<br>\n        binary: rustc<br>\n        commit-hash: 17067e9ac6d7ecb70e50f92c1944e545188d2359<br>\n        commit-date: 2025-05-09<br>\n        host: x86_64-unknown-linux-gnu<br>\n        release: 1.87.0<br>\n        LLVM version: 20.1.1</li>\n</ul>\n<h3>Extra Info</h3>\n<p>I also submitted an issue about the phenomenon to <code>wasmer</code>.<br>\nIf you need any other relevant information, please let me know and I will do my best to provide it. Looking forward to your reply! Thank you!<br>\n</p>\n</blockquote>",
        "id": 530372216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753283863
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the performance label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296\">Issue #11296</a>.</p>",
        "id": 530372222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753283866
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296#issuecomment-3109080933\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296\">issue #11296</a>:</p>\n<blockquote>\n<p>Thanks for digging in further, I've updated the issue title to reflect these findings.</p>\n</blockquote>",
        "id": 530372283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753283882
    },
    {
        "content": "<p>gaaraw <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296#issuecomment-3111697561\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296\">issue #11296</a>:</p>\n<blockquote>\n<blockquote>\n<p>please do not post information in bugs as screenshots (your initial table and your later terminal screenshot). </p>\n</blockquote>\n<p>Thank you so much for the reminder! This regulates my work, and I will remember it in my heart!</p>\n</blockquote>",
        "id": 530461660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753322275
    },
    {
        "content": "<p>primoly <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296#issuecomment-3114427317\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/11296\">issue #11296</a>:</p>\n<blockquote>\n<p>I’ve got two simple tests. Both <code>memory.grow</code> an ungrowable memory 2&lt;sup&gt;32&lt;/sup&gt; times.<br>\nThe first grows by zero pages, so it always succeeds and the second grows by one page and always fails.</p>\n<h3>grow0.wat</h3>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"test\"</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"k\">loop</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n      <span class=\"nb\">memory.grow</span>\n      <span class=\"nb\">drop</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n      <span class=\"nb\">i32.add</span>\n      <span class=\"nb\">local.tee</span> <span class=\"mi\">0</span>\n      <span class=\"nb\">br_if</span> <span class=\"mi\">0</span>\n    <span class=\"k\">end</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mf\">0 0</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<h3>grow1.wat</h3>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"test\"</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"k\">loop</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n      <span class=\"nb\">memory.grow</span>\n      <span class=\"nb\">drop</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n      <span class=\"nb\">i32.add</span>\n      <span class=\"nb\">local.tee</span> <span class=\"mi\">0</span>\n      <span class=\"nb\">br_if</span> <span class=\"mi\">0</span>\n    <span class=\"k\">end</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mf\">0 0</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>I get strangely diverging performance by different engines:</p>\n<table>\n<thead>\n<tr>\n<th>Engine</th>\n<th>Test</th>\n<th>Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Wasmtime</td>\n<td>grow0</td>\n<td>27 sec</td>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>grow0</td>\n<td>3 min</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>grow0</td>\n<td>33 sec</td>\n</tr>\n<tr>\n<td>Chrome</td>\n<td>grow0</td>\n<td>8 min</td>\n</tr>\n<tr>\n<td>Wasmtime</td>\n<td>grow1</td>\n<td>38 sec</td>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>grow1</td>\n<td>38 sec</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>grow1</td>\n<td>12 sec</td>\n</tr>\n<tr>\n<td>Chrome</td>\n<td>grow1</td>\n<td>39 sec</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</blockquote>",
        "id": 530622339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1753381514
    }
]