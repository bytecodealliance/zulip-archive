[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11238\">PR #11238</a> from <code>alexcrichton:accessor-apis</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>After discussion with Joel we've concluded that while <code>&amp;mut Accessor&lt;T, D&gt;</code> was originally added to model host functions it is also appropriate to use it to model embedder-rooted invocations of items such as wasm as well. Effectively the conclusion we reached was that <code>*::call_concurrent</code> should be taking <code>&amp;Accessor</code>, not <code>StoreContextMut</code>. This has a number of benefits to it over the previous iteration:</p>\n<ul>\n<li>\n<p>This makes exports behave more like imports where <code>Accessor</code> means \"you're in the concurrent world\".</p>\n</li>\n<li>\n<p>This makes exports have an <code>async fn</code> signature which is easier to read and understand.</p>\n</li>\n<li>\n<p>This automatically enforces the guarantee that the returned future is only polled within the main event loop because the future is always considered to close over the <code>&amp;Accessor</code> provided meaning it statically cannot live outside of the event loop.</p>\n</li>\n<li>\n<p>This paves the way forward to future refactorings to avoid storing so much state within a <code>Store&lt;T&gt;</code> and instead try to store state directly in futures themselves. This should make cancellation more natural and eventually also remove <code>'static</code> bounds on params/results. Furthermore this should make it easier to avoid spawning tasks internally by storing state in futures instead of spawned tasks.</p>\n</li>\n</ul>\n<p>In doing this one of the main questions we were faced with was what to do about <code>&amp;mut Accessor&lt;T, D&gt;</code>, namely the <code>mut</code> part. With a mutable accessor it would be only possible to call one function concurrently. One option considered was to add combinators like <code>Accessor::join</code> and <code>Accessor::race</code> but in the end we decided to avoid going that direction and instead switch to <code>&amp;Accessor&lt;T, D&gt;</code> everywhere, freely enabling aliasing of the accessor. This has the downside that <code>Accessor::with</code> is now a relatively dangerous function in that it can panic, but idiomatic usage of it is not expected to panic as the distinction between the <code>async</code> and sync boundary of <code>Accessor</code> vs <code>StoreContextMut</code> is expected to naturally make the recursive panic condition of <code>with</code> rare to come up in practice.</p>\n<p>Concrete changes in this commit are:</p>\n<ul>\n<li><code>Accessor::with</code> now requires <code>&amp;self</code>.</li>\n<li><code>Accessor::spawn</code> now requires <code>&amp;self</code>.</li>\n<li>Host functions are now given <code>&amp;Accessor</code>, not <code>&amp;mut Accessor</code>.</li>\n<li><code>{Typed,}Func::call_concurrent</code> is now an <code>async fn</code> which takes an <code>&amp;Accessor</code> instead of <code>StoreContextMut</code>.</li>\n<li>Guest bindings generation for concurrent invocations now looks exactly like async bindings generation except for replacing <code>StoreContextMut</code> with <code>Accessor</code>.</li>\n</ul>\n<p>Note that this commit does not yet update the internal implementations of these functions to benefit from the new abilities that taking <code>&amp;Accessor</code> implies. Instead that's deferred to a future update as necessary. Instead this is only updating the public API of the <code>wasmtime</code> crate to enable these refactorings in the future.</p>\n<p>Also note that this does not yet update all functions to take <code>&amp;Accessor</code>. Notably futures and streams still need to be updated.</p>\n<p>cc #11224</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 528732321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752523855
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/dicej\">dicej</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11238\">PR #11238</a>.</p>",
        "id": 528732322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752523855
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11238\">PR #11238</a>.</p>",
        "id": 528732324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752523855
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11238#issuecomment-3070832147\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11238\">PR #11238</a>:</p>\n<blockquote>\n<p>One other update: <code>Instance::run_with</code> is updated to now take <code>AyncFnOnce</code> instead of <code>FnOnce() -&gt; Box&lt;...&gt;</code></p>\n</blockquote>",
        "id": 528732376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752523882
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11238#discussion_r2207730710\">PR review comment</a>:</p>\n<blockquote>\n<p>Could collapse the <code>if</code> expression here into <code>(\"async\", \"_async\", \".await\", self.generator.opts.concurrent_exports)</code></p>\n</blockquote>",
        "id": 528879969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752591105
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11238#pullrequestreview-3020786261\">PR review</a>.</p>",
        "id": 528879970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752591105
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11238\">PR #11238</a>.</p>",
        "id": 528882012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752591630
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11238\">PR #11238</a>.</p>",
        "id": 528882030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752591634
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11238\">PR #11238</a>.</p>",
        "id": 528889466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1752593889
    }
]