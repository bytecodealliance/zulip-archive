[
    {
        "content": "<p>akldc opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">issue #10906</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">none</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">preserve_frame_pointers</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_multi_ret_implicit_sret</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"w\">    </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">i16x8</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">const0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x560af419d25ee4ab70b6b8ba64146998</span>\n\n<span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">66</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"mh\">0x6342</span>\n<span class=\"w\">    </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f64const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">3</span><span class=\"n\">ebf9685e6a16p</span><span class=\"o\">-</span><span class=\"mi\">2</span>\n<span class=\"w\">    </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i16x8</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block2</span>\n\n<span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v23</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">scalar_to_vector</span><span class=\"p\">.</span><span class=\"n\">i16x8</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v23</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>clif-util run -v ./test1.clif</code></p>\n<h3>Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000000000000000006342</span>\n</code></pre></div>\n<p>Then add a return value v9.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">none</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">preserve_frame_pointers</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_multi_ret_implicit_sret</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"w\">    </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i16x8</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">const0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x560af419d25ee4ab70b6b8ba64146998</span>\n\n<span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">66</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"mh\">0x6342</span>\n<span class=\"w\">    </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f64const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">3</span><span class=\"n\">ebf9685e6a16p</span><span class=\"o\">-</span><span class=\"mi\">2</span>\n<span class=\"w\">    </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i16x8</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block2</span>\n\n<span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v23</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">scalar_to_vector</span><span class=\"p\">.</span><span class=\"n\">i16x8</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v23</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>Sometimes the result is <code>[0x1.3ebf9685e6a16p-2, 0x00000000000000000000000000006342]</code>, <br>\nand other times it’s <code>[0x1.3ebf9685e6a16p-2, 0x000000000000000100000000ffff6342]</code>. <br>\nWhy does this inconsistency happen?</p>\n</blockquote>",
        "id": 522124765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748957492
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">Issue #10906</a>.</p>",
        "id": 522124766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748957493
    },
    {
        "content": "<p><a href=\"https://github.com/akldc\">akldc</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">Issue #10906</a>.</p>",
        "id": 522124767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1748957493
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906#issuecomment-2941493203\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">issue #10906</a>:</p>\n<blockquote>\n<p>cc @abrown -- looks like a potential nondeterminism issue with a SIMD instruction on x86 -- want to take a look?</p>\n</blockquote>",
        "id": 522452593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749071533
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906#issuecomment-2947035672\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">issue #10906</a>:</p>\n<blockquote>\n<p>I looked at this today. The first example compiles to:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>cargo<span class=\"w\"> </span>run<span class=\"w\"> </span>-p<span class=\"w\"> </span>cranelift-tools<span class=\"w\"> </span>--<span class=\"w\"> </span>compile<span class=\"w\"> </span>--target<span class=\"w\"> </span>x86_64<span class=\"w\"> </span>before.clif<span class=\"w\"> </span>--output<span class=\"w\"> </span>before.s\n<span class=\"gp\">$ </span>objdump<span class=\"w\"> </span>-d<span class=\"w\"> </span>before.s\n<span class=\"go\">Disassembly of section .text:</span>\n\n<span class=\"go\">0000000000000000 &lt;%main&gt;:</span>\n<span class=\"go\">   0:   55                      push   %rbp</span>\n<span class=\"go\">   1:   48 89 e5                mov    %rsp,%rbp</span>\n<span class=\"go\">   4:   b8 42 63 00 00          mov    $0x6342,%eax</span>\n<span class=\"go\">   9:   66 0f c4 c0 00          pinsrw $0x0,%eax,%xmm0</span>\n<span class=\"go\">   e:   48 89 ec                mov    %rbp,%rsp</span>\n<span class=\"go\">  11:   5d                      pop    %rbp</span>\n<span class=\"go\">  12:   c3                      ret</span>\n</code></pre></div>\n<p>With the added return value:</p>\n<p><div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>cargo<span class=\"w\"> </span>run<span class=\"w\"> </span>-p<span class=\"w\"> </span>cranelift-tools<span class=\"w\"> </span>--<span class=\"w\"> </span>compile<span class=\"w\"> </span>--target<span class=\"w\"> </span>x86_64<span class=\"w\"> </span>after.clif<span class=\"w\"> </span>--output<span class=\"w\"> </span>after.s\n<span class=\"gp\">$ </span>objdump<span class=\"w\"> </span>-d<span class=\"w\"> </span>after.s\n<span class=\"go\">Disassembly of section .text:</span>\n\n<span class=\"go\">0000000000000000 &lt;%main&gt;:</span>\n<span class=\"go\">   0:   55                      push   %rbp</span>\n<span class=\"go\">   1:   48 89 e5                mov    %rsp,%rbp</span>\n<span class=\"go\">   4:   ba 42 63 00 00          mov    $0x6342,%edx</span>\n<span class=\"go\">   9:   48 b9 16 6a 5e 68 f9    movabs $0x3fd3ebf9685e6a16,%rcx</span>\n<span class=\"go\">  10:   eb d3 3f</span>\n<span class=\"go\">  13:   66 48 0f 6e c1          movq   %rcx,%xmm0</span>\n<span class=\"go\">  18:   66 0f c4 ca 00          pinsrw $0x0,%edx,%xmm1</span>\n<span class=\"go\">  1d:   48 89 ec                mov    %rbp,%rsp</span>\n<span class=\"go\">  20:   5d                      pop    %rbp</span>\n<span class=\"go\">  21:   c3                      ret</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 522684407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749167648
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906#issuecomment-2947067540\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">issue #10906</a>:</p>\n<blockquote>\n<p>The ISLE chain appears to be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">scalar_to_vector</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">bitcast_gpr_to_xmm</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_bits</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">))</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bitcast_gpr_to_xmm</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x64_pinsrw</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">xmm_uninit_value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_pinsrw</span><span class=\"w\"> </span><span class=\"n\">src1</span><span class=\"w\"> </span><span class=\"n\">src2</span><span class=\"w\"> </span><span class=\"n\">lane</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_pinsrw_a</span><span class=\"w\"> </span><span class=\"n\">src1</span><span class=\"w\"> </span><span class=\"n\">src2</span><span class=\"w\"> </span><span class=\"n\">lane</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>That uninitialized XMM could have some extra bits in it?</p>\n</blockquote>",
        "id": 522684736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749167964
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906#issuecomment-2947067540\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">issue #10906</a>:</p>\n<blockquote>\n<p>The ISLE chain appears to be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">scalar_to_vector</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">bitcast_gpr_to_xmm</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_bits</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">))</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bitcast_gpr_to_xmm</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x64_pinsrw</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">xmm_uninit_value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_pinsrw</span><span class=\"w\"> </span><span class=\"n\">src1</span><span class=\"w\"> </span><span class=\"n\">src2</span><span class=\"w\"> </span><span class=\"n\">lane</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64_pinsrw_a</span><span class=\"w\"> </span><span class=\"n\">src1</span><span class=\"w\"> </span><span class=\"n\">src2</span><span class=\"w\"> </span><span class=\"n\">lane</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>That uninitialized XMM could have some extra bits in it? Seems like it should have been zeroed out.</p>\n</blockquote>",
        "id": 522684939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749168091
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906#issuecomment-2947099174\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">issue #10906</a>:</p>\n<blockquote>\n<blockquote>\n<p>(rule (bitcast_gpr_to_xmm 16 src)<br>\n     (x64_pinsrw (xmm_uninit_value) src 0))</p>\n</blockquote>\n<p>That seems like the issue, unless I'm misunderstanding -- <code>bitcast_gpr_to_xmm</code> should zero the upper lanes, but this is explicitly opting into uninitialized/existing bits in those lanes. It seems we've had this since #9045.</p>\n</blockquote>",
        "id": 522685232,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749168328
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906#issuecomment-2947099174\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">issue #10906</a>:</p>\n<blockquote>\n<blockquote>\n<p><code>\n(rule (bitcast_gpr_to_xmm 16 src)\n     (x64_pinsrw (xmm_uninit_value) src 0))\n</code></p>\n</blockquote>\n<p>That seems like the issue, unless I'm misunderstanding -- <code>bitcast_gpr_to_xmm</code> should zero the upper lanes, but this is explicitly opting into uninitialized/existing bits in those lanes. It seems we've had this since #9045.</p>\n</blockquote>",
        "id": 522685246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749168342
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906#issuecomment-2947266988\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">issue #10906</a>:</p>\n<blockquote>\n<p>Do we need a <code>x64_pxor</code> of a <code>temp_writable_xmm</code> there, then? (I'm looking around for something like <code>zero_xmm</code> but not finding it).</p>\n</blockquote>",
        "id": 522686809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749169743
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906#issuecomment-2947350415\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">issue #10906</a>:</p>\n<blockquote>\n<p>IMO <code>bitcast_gpr_to_xmm</code> is probably fine insofar that the name alone implies to me that it's got the expected behavior, but <code>scalar_to_vector</code> is documented as zeroing all upper lanes and so the bug lies in implementing <code>scalar_to_vector</code> with <code>bitcast_gpr_to_xmm</code>. The lowering of <code>scalar_to_vector</code> for <code>ty_scalar_float</code> also looks wrong because it's not zeroing the upper lanes, so I think that the <code>scalar_to_vector</code> instruction lowering may just need some love and care to fix some cases. WebAssembly only uses the lowering where the source is a 32-bit or 64-bit integer loaded from memory which is why I don't think this has come up before.</p>\n</blockquote>",
        "id": 522687688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749170487
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906#issuecomment-2947355975\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">issue #10906</a>:</p>\n<blockquote>\n<p>Although that being said I think it would be reasonable to document <code>bitcast_gpr_to_xmm</code> as zeroing all the other bits (it certainly helps to avoid creating false dependencies). Nevertheless I think <code>scalar_to_vector</code> for floats still needs improving.</p>\n</blockquote>",
        "id": 522687746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749170548
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906#issuecomment-2947390507\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">issue #10906</a>:</p>\n<blockquote>\n<p>Yeah, I suppose it depends on which way we define it. I suppose I was reading \"<code>..._to_xmm</code>\" as meaning \"to 128 bits\" but one could just as well think about this the same way we think about narrow values in GPRs. I'm fine going either way.</p>\n</blockquote>",
        "id": 522688142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749170942
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906#issuecomment-2947899586\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">issue #10906</a>:</p>\n<blockquote>\n<p>I hadn't read these latest comments prior to #10949; sounds like maybe I should alter the solution there?</p>\n</blockquote>",
        "id": 522695701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749178346
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906#issuecomment-2949454870\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">issue #10906</a>:</p>\n<blockquote>\n<p>Personally I think that's a reasonable fix, but mind leaving a comment on the <code>bitcast_gpr_to_xmm</code> helper that it's defined as zeroing all the upper bits? (which is then why it's suitable for <code>scalar_to_vector</code>)</p>\n</blockquote>",
        "id": 522790841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749220394
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10906\">issue #10906</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">none</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">preserve_frame_pointers</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_multi_ret_implicit_sret</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"w\">    </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">i16x8</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">const0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x560af419d25ee4ab70b6b8ba64146998</span>\n\n<span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">66</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"mh\">0x6342</span>\n<span class=\"w\">    </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f64const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">3</span><span class=\"n\">ebf9685e6a16p</span><span class=\"o\">-</span><span class=\"mi\">2</span>\n<span class=\"w\">    </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i16x8</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block2</span>\n\n<span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v23</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">scalar_to_vector</span><span class=\"p\">.</span><span class=\"n\">i16x8</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v23</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>clif-util run -v ./test1.clif</code></p>\n<h3>Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000000000000000006342</span>\n</code></pre></div>\n<p>Then add a return value v9.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">none</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">preserve_frame_pointers</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_multi_ret_implicit_sret</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"w\">    </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i16x8</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">const0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x560af419d25ee4ab70b6b8ba64146998</span>\n\n<span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">66</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"mh\">0x6342</span>\n<span class=\"w\">    </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f64const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">3</span><span class=\"n\">ebf9685e6a16p</span><span class=\"o\">-</span><span class=\"mi\">2</span>\n<span class=\"w\">    </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i16x8</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">const0</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block2</span>\n\n<span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v23</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">scalar_to_vector</span><span class=\"p\">.</span><span class=\"n\">i16x8</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v23</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>Sometimes the result is <code>[0x1.3ebf9685e6a16p-2, 0x00000000000000000000000000006342]</code>, <br>\nand other times it’s <code>[0x1.3ebf9685e6a16p-2, 0x000000000000000100000000ffff6342]</code>. <br>\nWhy does this inconsistency happen?</p>\n</blockquote>",
        "id": 522821791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1749231343
    }
]