[
    {
        "content": "<p>Is there overlap between wasi-nn and web-nn? Apologies if this has been asked before.</p>\n<ul>\n<li><a href=\"https://github.com/webmachinelearning/webnn\">https://github.com/webmachinelearning/webnn</a></li>\n<li><a href=\"https://www.w3.org/TR/webnn/\">https://www.w3.org/TR/webnn/</a></li>\n</ul>\n<p>It would be very interesting if wasi-nn components could be backed by web-nn using a tool like JCO.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/webmachinelearning/webnn\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b2008fde50f9f0cbadf4faefb2564c75afa05eed\\/68747470733a2f2f7265706f7369746f72792d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3135353630373638362f38643265303030302d643333642d313165622d393031352d386332303732303865646131)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/webmachinelearning/webnn\" title=\"GitHub - webmachinelearning/webnn: ðŸ§  Web Neural Network API\">GitHub - webmachinelearning/webnn: ðŸ§  Web Neural Network API</a></div><div class=\"message_embed_description\">ðŸ§  Web Neural Network API. Contribute to webmachinelearning/webnn development by creating an account on GitHub.</div></div></div>",
        "id": 400045052,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1698974970
    },
    {
        "content": "<p>There is one key difference between the APIs: WebNN is a model builder API in which one \"builds up\" a graph of nodes, the ML operations to perform. wasi-nn is a model loader API in which one loads an encoded version of a model in a single step. In the model builder paradigm, the user can introspect the graph operations--low-level control. In the model loader paradigm, the model contents are essentially opaque to the user--high-level ease of use.</p>",
        "id": 400046538,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1698975956
    },
    {
        "content": "<p>When wasi-nn was first proposed, we discussed this difference with the Web ML working group: at the time they were also considering enabling the model loader paradigm for WebNN. That didn't happen (though maybe at some point it still could?).</p>",
        "id": 400046699,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1698976072
    },
    {
        "content": "<p>Ah OK that makes sense. While WebNN may adopt the loader paradigm, are there plans for creating a builder API for wasi?</p>",
        "id": 400046836,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1698976186
    },
    {
        "content": "<p>Many of the key WebNN contributors from Intel work in our larger group so we have discussed how one might implement wasi-nn in terms of WebNN. No one has vetted this idea with implementation (so take it for the idea that it is), but it could be possible to write code to read a model in, e.g., the ONNX format and rebuild that as a WebNN graph.</p>",
        "id": 400046898,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1698976209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421591\">Bailey Hayes</span> <a href=\"#narrow/stream/266558-wasi-nn/topic/Web.20Neural.20Network.20API/near/400046836\">said</a>:</p>\n<blockquote>\n<p>Ah OK that makes sense. While WebNN may adopt the loader paradigm, are there plans for creating a builder API for wasi?</p>\n</blockquote>\n<p>I think that idea has been floated, but my sense is that the easiest thing here is to try to build an \"encoded graph to WebNN graph\" converter.</p>",
        "id": 400047003,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1698976316
    },
    {
        "content": "<p>Convincing WebNN to adopt the loader paradigm -- lots of work and a long shot. Defining a WebNN clone in wasi-nn and implementing it in several engines -- even more work! But creating a conversion from a well-defined model encoding (e.g., ONNX, OpenVINO) to the also well-defined WebNN builder API seems... workable. Ningxin (one of the leads from our group) showed us that in some phase for a certain ML backend, WebNN already does this kind of conversion. My thought is that this converter could be compiled to a combination of WebAssembly and JS, which seems crucial for using it in JCO.</p>",
        "id": 400047450,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1698976596
    },
    {
        "content": "<p>I suspect there may be certain parts of graph encodings that cannot yet be modeled in WebNN's builder API, but that is the part that would need to be vetted.</p>",
        "id": 400047540,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1698976677
    },
    {
        "content": "<p>I don't have a use-case (yet) for needing this in a js runtime, but it's certainly something I'm curious about. Thank you for the info</p>",
        "id": 400047828,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1698976829
    },
    {
        "content": "<p>I think it is a good idea to add support of wasi-nn in JCO at some point, via an ML framework layer such as onnx.js or tensorflow.js.</p>",
        "id": 401209584,
        "sender_full_name": "Mingqiu Sun",
        "timestamp": 1699553123
    },
    {
        "content": "<p>Forgive me, I'm a newcomer to this space and I'm sure this is a perennial topic.</p>\n<p>The <a href=\"https://bytecodealliance.org/articles/using-wasi-nn-in-wasmtime#specification\">2020 blog post that introduced <code>wasi-nn</code></a> said that the primary motivation for using a graph loader API (vs builder) was due to the growth/instability of the WebNN API, which was rapidly adding new operations at the time. 5 years later, is that still the case or has it mostly stabilized?</p>\n<p>I was just watching <a href=\"https://youtu.be/zLge2-_0Occ?si=dOgRokxBpiDIlW1r&amp;t=160\">the talk the <code>wasi-gfx</code> project folks gave at Wasmcon</a>. They've created a tool, <a href=\"https://github.com/wasi-gfx/webidl2wit\"><code>webidl2wit</code></a>, for mechanically translating WebIDL to WIT. They used it to automatically map the entire <code>WebGPU</code> API into wasi (!), minimizing the amount of manual adaptation required to keep the APIs in sync. They demo running GPU code in the browser and on a host running a customized <code>wasmtime</code>. I'd be curious whether a similar approach might be workable for bringing the graph loader API to wasi (via <code>wasi-nn</code> or a separate initiative.)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"zLge2-_0Occ\" href=\"https://youtu.be/zLge2-_0Occ?si=dOgRokxBpiDIlW1r&amp;t=160\"><img src=\"https://uploads.zulipusercontent.net/ed3bf2f2c23a0135d24229c437322f94f0106d19/68747470733a2f2f692e7974696d672e636f6d2f76692f7a4c6765322d5f304f63632f64656661756c742e6a7067\"></a></div>",
        "id": 498528181,
        "sender_full_name": "zslayton",
        "timestamp": 1739042426
    },
    {
        "content": "<blockquote>\n<p>I'd be curious whether a similar approach might be workable for bringing the graph loader API to wasi (viaÂ <code>wasi-nn</code>Â or a separate initiative.)</p>\n</blockquote>\n<p>I think you mean WebNN's _graph builder_ API, right? But, yes, I think it could make sense as an experiment. It would be cool to be able to use more web APIs from within a standalone WebAssembly runtime!</p>",
        "id": 499280496,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1739378677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"741277\">@zslayton</span>, here are challenges that I feel that experiment might run into: are we able to link to a WebNN implementation from whatever engine the experiment uses? IIRC, WebNN had a way to use JS code as operators--how do we map that in the experiment?</p>",
        "id": 499281486,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1739378959
    },
    {
        "content": "<blockquote>\n<p>I think you mean WebNN's _graph builder_ API, right?</p>\n</blockquote>\n<p><span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> D'oh! Yes, that's what I meant, thanks.</p>\n<blockquote>\n<p>are we able to link to a WebNN implementation from whatever engine the experiment uses?</p>\n</blockquote>\n<p>I'm confident this is possible, but less confident about how to actually do it. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> The <a href=\"https://webmachinelearning.github.io/webnn-status/#implementation-status-of-webnn-operations\">only cross-platform ML framework that implements <code>WebNN</code></a> is <code>LiteRT</code> (formerly TensorFlow-Lite).  There are several Rust crates for TF-Lite (in various states of repair), so hopefully one of those would be sufficient to start on a proof-of-concept that forwarded the appropriate method calls. (I'm very open to others' thoughts here!)</p>\n<blockquote>\n<p>IIRC, WebNN had a way to use JS code as operators--how do we map that in the experiment?</p>\n</blockquote>\n<p>I took a look through <a href=\"https://www.w3.org/TR/webnn/#privacy\">the W3C spec</a> but wasn't able to find something like this. Could you point me to an example?</p>",
        "id": 499294604,
        "sender_full_name": "zslayton",
        "timestamp": 1739382795
    },
    {
        "content": "<p>I may have mis-remembered about JS operators or perhaps that went away over time. And I also am not completely sure which implementation to start with; what you suggested sounds reasonable, though. Perhaps take a look at ONNX as well, since I know the <code>ort</code> crate works (it's used currently in <code>wasmtime-wasi-nn</code>).</p>",
        "id": 499349037,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1739403493
    },
    {
        "content": "<p>Let me contact some people I know here who work on WebNN and see if they have any suggestions.</p>",
        "id": 499349066,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1739403520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"741277\">@zslayton</span>, in checking around, I didn't find anything that would help you implementation-wise--sorry! Are you still interested in experimenting with this?</p>",
        "id": 507076264,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1742505185
    },
    {
        "content": "<p>I'm interested, but unfortunately I won't be able to dedicate time to this<br>\nin the immediate future.<span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span></p>",
        "id": 508201662,
        "sender_full_name": "zslayton",
        "timestamp": 1742975549
    }
]