[
    {
        "content": "<p>Hi everyone,</p>\n<p>I'm experiencing an issue with file uploads from a WASM module using the waki HTTP client. Small files work fine, but larger files cause the request to hang. I'm hoping someone might have insights into what's going wrong or if there are known limitations.</p>\n<h2>What I'm trying to do</h2>\n<p>I'm implementing Google's resumable file upload API in a WASM module. The goal is to replicate this curl command:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># Upload the actual bytes.</span>\ncurl<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">upload_url</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">  </span>-H<span class=\"w\"> </span><span class=\"s2\">\"Content-Length: </span><span class=\"si\">${</span><span class=\"nv\">NUM_BYTES</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">  </span>-H<span class=\"w\"> </span><span class=\"s2\">\"X-Goog-Upload-Offset: 0\"</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">  </span>-H<span class=\"w\"> </span><span class=\"s2\">\"X-Goog-Upload-Command: upload, finalize\"</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">  </span>--data-binary<span class=\"w\"> </span><span class=\"s2\">\"@</span><span class=\"si\">${</span><span class=\"nv\">AUDIO_PATH</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"w\"> </span><span class=\"m\">2</span>&gt;<span class=\"w\"> </span>/dev/null<span class=\"w\"> </span>&gt;<span class=\"w\"> </span>file_info.json\n</code></pre></div>\n<h2>Setup</h2>\n<ul>\n<li><strong>Host</strong>: Rust application using Wasmtime</li>\n<li><strong>WASM module</strong>: Using waki HTTP client for requests</li>\n<li><strong>WASI imports</strong>: wasmtime_wasi and wasmtime_wasi_http</li>\n<li><strong>File access</strong>: Goes through the host via WASI</li>\n</ul>\n<h2>The Problem</h2>\n<ul>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Small file (0.18 MB): Uploads successfully</li>\n<li><span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> Large file (11.08 MB): Hangs at <code>upload_request.send()?</code></li>\n</ul>\n<p>Here's the relevant code from my WASM module:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">upload_file_and_get_uri</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">client</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Client</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">files_endpoint</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">api_key</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">audio_path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Path</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">file_size</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">mime_type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Step 1: Initiate resumable upload (this works fine)</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">init_request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">client</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">files_endpoint</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s\">\"x-goog-api-key\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">api_key</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s\">\"X-Goog-Upload-Protocol\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"resumable\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s\">\"X-Goog-Upload-Command\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"start\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s\">\"X-Goog-Upload-Header-Content-Length\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">file_size</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s\">\"X-Goog-Upload-Header-Content-Type\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mime_type</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s\">\"Content-Type\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"application/json\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">(</span><span class=\"n\">serde_json</span><span class=\"p\">::</span><span class=\"n\">to_string</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">json</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"s\">\"file\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"s\">\"display_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"AUDIO\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}),</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">init_response</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">init_request</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// ... get upload_url from response headers ...</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Step 2: Upload file (this is where it hangs for large files)</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">file_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">audio_path</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// File read succeeds</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Creating client\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">upload_request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">client</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">upload_url</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s\">\"Content-Length\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">file_size</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s\">\"X-Goog-Upload-Offset\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"0\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s\">\"X-Goog-Upload-Command\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"upload, finalize\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">(</span><span class=\"n\">file_bytes</span><span class=\"p\">);</span><span class=\"w\">  </span><span class=\"c1\">// 11.08 MB of data</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Making request\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">upload_response</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">upload_request</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// &lt;-- HANGS HERE for large file</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Received request response\"</span><span class=\"p\">);</span><span class=\"w\">  </span><span class=\"c1\">// Never reached for large file</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// ... process response ...</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2>Questions</h2>\n<ol>\n<li>Are there known limitations in WASM/WASI for HTTP request body sizes?</li>\n<li>Could this be a memory allocation issue within the WASM module?</li>\n<li>Is there a timeout or buffer size limit in wasmtime_wasi_http that I should be aware of?</li>\n<li>Should I be using chunked uploads instead? (I tried implementing chunked uploads but faced similar issues)</li>\n</ol>\n<h2>Additional Context</h2>\n<p>The host setup includes proper WASI configuration:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">MyState</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"n\">wasmtime_wasi_http</span><span class=\"p\">::</span><span class=\"n\">add_only_http_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Has anyone encountered similar issues with large HTTP payloads in WASM modules? Any suggestions on alternative approaches or debugging strategies would be greatly appreciated!</p>\n<p>Thanks in advance!</p>",
        "id": 530422390,
        "sender_full_name": "Utilize3214",
        "timestamp": 1753300512
    },
    {
        "content": "<p>I am not familiar with waki and my best guess is that this is a bug in waki, without more context. Have you asked the waki maintainers to help you debug this?</p>",
        "id": 530431270,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1753304068
    },
    {
        "content": "<p>also: I'd be debugging this interactively so you can jump into <code>upload_request.send</code> and see directly what happens</p>",
        "id": 530441327,
        "sender_full_name": "Ralph",
        "timestamp": 1753308445
    },
    {
        "content": "<p>Thank you for the prompt response!</p>\n<p>You were right to suspect a waki-specific issue. It turns out the problem was with the version of waki I was using. After updating to the latest version, the large file uploads (11MB+) now work perfectly without any code changes.</p>",
        "id": 530611495,
        "sender_full_name": "Utilize3214",
        "timestamp": 1753377798
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"778076\">@Utilize3214</span> could you elucidate more on the problem that waki had? I'm not familiar with waki at all, and still don't know what it is, but if it was a usage bug in the WASI toolchain/something upstream <em>can</em> make better to prevent bugs downstream, it might be useful to share the details or a link so interested parties can see what happened!</p>\n<p>Debugging waki is almost certainly not on topic for this forum <em>but</em> helping embedders avoid bugs almost certainly is.</p>",
        "id": 530755435,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1753443882
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"598440\">@Victor Adossi</span>, happy to share more details. <strong>waki</strong> is an HTTP client and server library designed for WebAssembly components using WASI, built specifically to work within WASI's constraints. From my understanding (though limited), the issue was related to how waki handled large HTTP request bodies when interfacing with wasi-http. It was fixed in this PR: <a href=\"https://github.com/wacker-dev/waki/pull/35\">https://github.com/wacker-dev/waki/pull/35</a>. The PR description and code changes would give you a much better technical understanding than I can provide. Hope this helps.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/wacker-dev/waki/pull/35\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a9c24cebe17743f4d1280858527f73383d81fa30/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613232613465373163653430303565396364646638656361613930613234303962326365366434313435623032663631343038626136326564326435666432382f7761636b65722d6465762f77616b692f70756c6c2f3335&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/wacker-dev/waki/pull/35\" title=\"Initiate the HTTP connection before writing the body stream by iawia002 · Pull Request #35 · wacker-dev/waki\">Initiate the HTTP connection before writing the body stream by iawia002 · Pull Request #35 · wacker-dev/waki</a></div><div class=\"message_embed_description\">ref: bytecodealliance/wasmtime#9653 (comment)</div></div></div>",
        "id": 530771384,
        "sender_full_name": "Utilize3214",
        "timestamp": 1753449057
    },
    {
        "content": "<p>Thanks for sharing!</p>",
        "id": 530772635,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1753449460
    }
]