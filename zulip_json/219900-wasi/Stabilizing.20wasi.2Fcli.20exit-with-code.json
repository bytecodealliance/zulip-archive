[
    {
        "content": "<p>A while ago we added cli exit-with-code to the wasi-cli world, but it is still listed as \"unstable\" in <a href=\"https://github.com/WebAssembly/wasi-cli/blob/07e4b66066ee7c183b10e8ee696e5aa571e9fbef/wit/exit.wit#L15\">https://github.com/WebAssembly/wasi-cli/blob/07e4b66066ee7c183b10e8ee696e5aa571e9fbef/wit/exit.wit#L15</a> so (I presume) we can't really use in e. g. wasi-libc yet. I am wondering what would the process be where the end result is it being usable from libc.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-cli/blob/07e4b66066ee7c183b10e8ee696e5aa571e9fbef/wit/exit.wit#L15\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/fc000a7c4d55b1cc46d0ebdd015946d398c93ac0/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386136376461336565316631343233333635323432373730633232616130613235346333663932636165636336336366616431653738363239363661626666302f576562417373656d626c792f776173692d636c69&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-cli/blob/07e4b66066ee7c183b10e8ee696e5aa571e9fbef/wit/exit.wit#L15\" title=\"wasi-cli/wit/exit.wit at 07e4b66066ee7c183b10e8ee696e5aa571e9fbef Â· WebAssembly/wasi-cli\">wasi-cli/wit/exit.wit at 07e4b66066ee7c183b10e8ee696e5aa571e9fbef Â· WebAssembly/wasi-cli</a></div><div class=\"message_embed_description\">Command-Line Interface (CLI) World for WASI. Contribute to WebAssembly/wasi-cli development by creating an account on GitHub.</div></div></div>",
        "id": 534556791,
        "sender_full_name": "SingleAccretion",
        "timestamp": 1755204088
    },
    {
        "content": "<p>I think the steps would look more-or-less like:</p>\n<ul>\n<li>Formally propose in the WASI SG  that this should become a stable API (I'm a bit hazy on this  but if you make a presentation with your case I suspect that's more-or-less sufficient)</li>\n<li>Update the WITs</li>\n<li>Wait for a WASI release (once every 2 months)</li>\n<li>Update Wasmtime with the new WITs plus removal of the feature (e.g. it's always on-by-default now)</li>\n</ul>\n<p>The next big question is when to update wasi-libc. Unfortunately there's not a great answer there just yet. There's no preexisting policy about which version of the WITs are used to generate bindings in wasi-libc (it's only just now recently getting support for wasip2 natively). Additionally with Wasmtime's p1-to-p2 adapter there's no formal policy yet about what versions of WASI to support.</p>\n<p>Basically it's required to get this to a stable API to use, but after that it's not 100% clear when default tooling can use this. If you're interested in pushing this forward I'd recommend starting with a presentation to the WASI SG and then getting it out in Wasmtime, and then after that we can see where we're at and what, if any, policies we need</p>",
        "id": 534557571,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1755204438
    },
    {
        "content": "<p>Oh, thank you for such a quick and comprehensive reply :). I'll start working though the steps...</p>",
        "id": 534558953,
        "sender_full_name": "SingleAccretion",
        "timestamp": 1755205124
    },
    {
        "content": "<p>Regarding which WITs to use for <code>wasi-libc</code>: this is yet another example of where optional imports would be super useful.  <code>wasi-libc</code> could optionally import <code>exit-with-code</code> and fall back to the old <code>exit</code> if needed.</p>",
        "id": 534559829,
        "sender_full_name": "Joel Dice",
        "timestamp": 1755205500
    },
    {
        "content": "<p>agreed yeah, although the irony with optional imports is that they're mostly only useful if they were implemented a long time ago, if we were to implement optional imports today it'd still take a long time to percolate to all the runtimes and be usable for wasi-libc (same usability issues as using a newer WASI API on first-time-use)</p>",
        "id": 534563013,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1755206912
    },
    {
        "content": "<p>All the more reason to do it ASAP.</p>",
        "id": 534564403,
        "sender_full_name": "Joel Dice",
        "timestamp": 1755207687
    },
    {
        "content": "<p>easier said than done :)</p>",
        "id": 534565427,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1755208300
    },
    {
        "content": "<p>On a semi-related note, inspired by this, we had some discussion today about this and I wrote down a plan: <a class=\"message-link\" href=\"/#narrow/channel/223391-wasm/topic/Optional.20imports.20in.20the.20component.20model/near/535179924\">#wasm &gt; Optional imports in the component model @ ðŸ’¬</a></p>",
        "id": 535179984,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1755626732
    }
]