[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"681848\">mainrs</span> <a href=\"#narrow/channel/219900-wasi/topic/Runtime.20linking.20issues.20with.20wasip3.20and.20nightly.20reactor/near/522526604\">said</a>:</p>\n<blockquote>\n<p>Compilation is done using <code>cargo build --manifest-path wasm/Cargo.toml --target wasm32-wasip1 --release</code>, followed by <code>wasm-tools component new target/wasm32-wasip1/release/library.wasm --adapt wasi_snapshot_preview1.reactor.wasm --skip-validation -o component.wasm</code>. As far as I understood, this should lift my component into p3.</p>\n</blockquote>\n<p>As you discovered, it won't lift your component into p3.  The <code>wasi_snapshot_preview1.reactor.wasm</code> adapter only adapts from p1 to p2 -- it has no p3 support yet, and there are no specific plans to add such support AFAIK.  Additionally, <code>wasi-libc</code> (on which Rust's <code>std</code> is based when targeting <code>wasm32-wasip{1,2}</code>) does not yet have any support for p3, so any features you (or your crate dependencies) use from <code>std</code> will bottom out in p1 or p2 imports.</p>\n<p>Regarding a hypothetical p1-&gt;p3 or p2-&gt;p3 adapter: such a thing would certainly be useful, but it's much less urgent than the existing p1-&gt;p2 adapter was.  The p1-&gt;p2 transition involved switching from core wasm modules and the WITX ABI to the component model and its canonical ABI, which meant a host had no way to provide both p1 and p2 imports to a single binary, meaning an adapter was necessary to support any mix of the two.  For p2-&gt;p3, the situation is much better: p3 (and the component model async ABI it relies on) is purely additive and can be considered a superset of p2.  Therefore, a host can easily run a component that imports (and exports) a mix of p2 and p3 interfaces, so an adapter is not necessary.</p>\n<p>Practically speaking, that means you have only one option for exporting the <code>wasi:cli@0.3.0</code> world currently: either generate the bindings using <code>wit-bindgen</code> and use them directly in a lib crate (not a bin crate, which would require a <code>main</code> function and pull in <code>wasi:cli@0.2.0</code>) instead of using <code>std</code> to e.g. get environment variables.</p>\n<p>Alternatively, you could modify your host embedding to add both the p2 and p3 imports from <code>wasmtime-wasi</code> to the <code>Linker</code>, which would allow the p2 imports pulled in by <code>std</code> to work, as well as any p3 imports your app uses.  You'd still need to manually generate the <code>wasi:cli/run@0.3.0</code> export in order to export a p3-compatible <code>async</code> <code>run</code> function, though.</p>\n<p>Eventually, we'll add native p3 support to <code>wasi-libc</code> and Rust via a new <code>wasm32-wasip3</code> target, at which point you'll be able to run the resulting components in a \"pure\" p3 host with no p2 support, but we're not there yet.  Also, I'm not sure what <code>async main</code> would look like for such a target.  <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> might have thoughts.</p>",
        "id": 522618672,
        "sender_full_name": "Joel Dice",
        "timestamp": 1749137145
    },
    {
        "content": "<p>Everything Joel said makes sense to me, and the only bits I'd add are that we're likely to do a p1-&gt;p3 adapter at some point (basically new builds of the current adapter) but as Joel mentions we don't have that allocated for someone to work on just yet (WASIp3 is currently a moving target). For <code>async main</code> man I haven't thought about that at all, but I think that might be something we could support in the <code>wasi</code> crate (e.g. <code>#[wasi::main] async fn main() { ... }</code> where eventually the <code>wasi</code> crate will switch to WASIp3 by default</p>",
        "id": 522620034,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1749137562
    },
    {
        "content": "<p>Thank you for the clarifications! That helped me out a lot in understanding what exactly these adapters are doing and why they have been created! <br>\nRegarding the async main question: wouldn't it be enough for <code>#[wasi::main]</code> to translate to a normal main function that spawns a blocking call to an async closure? I think I've seen such a function inside <code>wit_bindgen::rt</code>.</p>",
        "id": 522622534,
        "sender_full_name": "mainrs",
        "timestamp": 1749138313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"681848\">mainrs</span> <a href=\"#narrow/channel/219900-wasi/topic/Runtime.20linking.20issues.20with.20wasip3.20and.20nightly.20reactor/near/522622534\">said</a>:</p>\n<blockquote>\n<p>Regarding the async main question: wouldn't it be enough for <code>#[wasi::main]</code> to translate to a normal main function that spawns a blocking call to an async closure?</p>\n</blockquote>\n<p>Technically, yes, that's possible, but it would prevent the host (or composed component) from making more than one concurrent call to that component instance.  And maybe that's okay for a CLI-style app, but it would be more flexible to allow concurrent calls, which requires exporting an async function from the component.</p>",
        "id": 522624846,
        "sender_full_name": "Joel Dice",
        "timestamp": 1749139051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"681848\">mainrs</span> has marked this topic as resolved.</p>",
        "id": 522625408,
        "sender_full_name": "Notification Bot",
        "timestamp": 1749139228
    },
    {
        "content": "<p>I'd definitely say that the current <code>block_on</code> calls in the wit-bindgen tests are more of a kludge and are not \"the future\"</p>",
        "id": 522625496,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1749139257
    },
    {
        "content": "<p>native async support is definitely the way to go (eventually)</p>",
        "id": 522625544,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1749139269
    }
]