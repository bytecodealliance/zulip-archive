[
    {
        "content": "<p>The monotonic clock interface has this language:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// A monotonic clock is a clock which has an unspecified initial value, and</span>\n</code></pre></div>\n<p>OK, sure.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// successive reads of the clock will produce non-decreasing values.</span>\n</code></pre></div>\n<p>Is this right <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> ? <code>now()</code> might overflow and wrap, which could be interpreted as \"decreasing\".</p>",
        "id": 536179909,
        "sender_full_name": "Andy Wingo",
        "timestamp": 1756195180
    },
    {
        "content": "<p>I think in wasip3 tests I will hard-code a \"maximum reasonable duration\" of, like, a day, and fail the test if a computed difference between two <code>Instant</code>s is more than a day, under the theory that it's more likely to be a bug than a technically-possible outcome.</p>",
        "id": 536182943,
        "sender_full_name": "Andy Wingo",
        "timestamp": 1756196245
    },
    {
        "content": "<p>relatedly, <code>wait_until</code> has to bake in some assumption about wraparound, otherwise <code>wait_until()</code> when invoked on a <code>now()</code> that already passed would never wake</p>",
        "id": 536227536,
        "sender_full_name": "Andy Wingo",
        "timestamp": 1756211996
    },
    {
        "content": "<p>related: <a href=\"https://github.com/WebAssembly/wasi-testsuite/pull/120#pullrequestreview-3155404792\">https://github.com/WebAssembly/wasi-testsuite/pull/120#pullrequestreview-3155404792</a> cc <span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-testsuite/pull/120#pullrequestreview-3155404792\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a86552be606179368dec2f5d9a51ae0043a57301/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613334353637643662613337393235366632396561633936346433363635393561623534653938343839663938323066356533366632366265663766353536622f576562417373656d626c792f776173692d7465737473756974652f70756c6c2f313230&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-testsuite/pull/120#pullrequestreview-3155404792\" title=\"First wasip3 test by wingo · Pull Request #120 · WebAssembly/wasi-testsuite\">First wasip3 test by wingo · Pull Request #120 · WebAssembly/wasi-testsuite</a></div><div class=\"message_embed_description\">Depends on #114.  Adds wasm32-wasip3 Rust test directory, with a first Rust-based test.  Test runner not yet updated; requires passing Wcomponent-model-async=y -Sp3=y to wasmtime.  Building the was...</div></div></div>",
        "id": 536229114,
        "sender_full_name": "Andy Wingo",
        "timestamp": 1756212485
    },
    {
        "content": "<p>POSIX seems to be similarly ambiguous about monotonic clock overflow.</p>\n<p>I see two reasonable options:</p>\n<ul>\n<li>It just \"can't overflow\"; I guess an implementation would trap rather than returning an overflowed value</li>\n<li>Carefully define wrapping; this seems somewhat difficult to spec and implement given the other (non-)constraints on monotonic clock values</li>\n</ul>",
        "id": 536257731,
        "sender_full_name": "Lann Martin",
        "timestamp": 1756220609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396878\">Andy Wingo</span> <a href=\"#narrow/channel/219900-wasi/topic/wasi.3Aclocks.2Fmonotonic-clock.20language/near/536179909\">said</a>:</p>\n<blockquote>\n<p>The monotonic clock interface has this language:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// A monotonic clock is a clock which has an unspecified initial value, and</span>\n</code></pre></div>\n<p>OK, sure.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// successive reads of the clock will produce non-decreasing values.</span>\n</code></pre></div>\n<p>Is this right <span class=\"user-mention silent\" data-user-id=\"254083\">Dan Gohman</span> ? <code>now()</code> might overflow and wrap, which could be interpreted as \"decreasing\".</p>\n</blockquote>\n<p>The monotonic clock returns a <code>u64</code> of nanoseconds, so the intention here is that the host should trap if it's somehow live for the 584 or so years it would take to achieve a wraparound, so that users of the API never have to deal with this extremely rare and extremely awkward corner case.</p>\n<p>We should document that more explicitly.</p>",
        "id": 536265970,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1756223141
    },
    {
        "content": "<p>I've now filed <a href=\"https://github.com/WebAssembly/wasi-clocks/pull/96\">https://github.com/WebAssembly/wasi-clocks/pull/96</a> to propose wording for this.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-clocks/pull/96\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/32260e3111f433a0303fa9551e6f6c53201f53f5/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353666303561633332303564313165646664393261613738633639666562333265663836663131326130396362396231313936336632616637393733636134612f576562417373656d626c792f776173692d636c6f636b732f70756c6c2f3936&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-clocks/pull/96\" title=\"Document that `monotonic-clock.now` doesn't wrap. by sunfishcode · Pull Request #96 · WebAssembly/wasi-clocks\">Document that `monotonic-clock.now` doesn't wrap. by sunfishcode · Pull Request #96 · WebAssembly/wasi-clocks</a></div><div class=\"message_embed_description\">584 years ought to be enough for anyone.</div></div></div>",
        "id": 536276209,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1756226320
    },
    {
        "content": "<p>if the start value is unspecified, then overflow could happen at <em>any</em> time</p>",
        "id": 536297238,
        "sender_full_name": "David Lloyd",
        "timestamp": 1756235306
    },
    {
        "content": "<p>the start value could be ((2 ** 64) - 1) - (the number of nanoseconds before your lunch break)</p>",
        "id": 536297362,
        "sender_full_name": "David Lloyd",
        "timestamp": 1756235362
    },
    {
        "content": "<p>And then the spec says it would have to trap, and then everyone would stop using that implementation <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 536299691,
        "sender_full_name": "Lann Martin",
        "timestamp": 1756236582
    },
    {
        "content": "<p>Pragmatically, <code>wasi-libc</code> needs to be able to implement <code>clock_gettime(CLOCK_MONOTONIC, ...)</code>, and hosts will typically be using those same semantics in the implementation.</p>",
        "id": 536300495,
        "sender_full_name": "Lann Martin",
        "timestamp": 1756236950
    },
    {
        "content": "<p>too bad this wasn't spec'd as a u128 nanos (or u64 seconds + u64 nanos), else we could implement the trap as \"rely on the heat death of the universe\"</p>",
        "id": 536301131,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1756237190
    },
    {
        "content": "<p>(a subtype of \"unobservable trap because the host no longer exists\", which can thus be optimized away, I suppose)</p>",
        "id": 536301235,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1756237232
    },
    {
        "content": "<p>Sounds like a universally applicable optimization</p>",
        "id": 536301311,
        "sender_full_name": "Lann Martin",
        "timestamp": 1756237259
    },
    {
        "content": "<p>ok so it's UB to not make forward progress in C (infinite loops are UB), but if eventually no one can observe the forward progress that means all our programs are already UB -- about to go make the fastest compiler ever</p>",
        "id": 536302069,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1756237494
    },
    {
        "content": "<p>(I could have sworn I've seen a joke post somewhere that riffs on basically that: C somehow technically admits a compiler that produces zero-byte executables for all programs as standards-compliant. some lesson about spec'ing the right thing here...)</p>",
        "id": 536302554,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1756237726
    },
    {
        "content": "<p>For what it's worth, the \"wall\" clock does use a seconds+nanos time, so it can represent astronomical-scale times. It's just the monotonic clock, which is meant for timing durations that is limited to a <code>u64</code>.</p>",
        "id": 536309104,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1756240847
    },
    {
        "content": "<p>If it wasn't for the compatibility and bookkeeping overhead problems I might suggest that <code>instant</code> should be a resource with methods like <code>elapsed: func() -&gt; duration</code> and <code>since(other: instant) -&gt; duration</code> and no integer repr</p>",
        "id": 536316751,
        "sender_full_name": "Lann Martin",
        "timestamp": 1756244736
    },
    {
        "content": "<p>If someone can describe a use case that absolutely needs a single instance to live more than 10 years, convincingly, with a straight face, then maybe it would make sense to consider.</p>",
        "id": 536316916,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1756244855
    },
    {
        "content": "<p>If you had a runtime that could \"suspend\"/snapshot instances to disk and resume them later it's at least plausible that an instance could experience years of actual run time, even if the clock also suspends (like CLOCK_MONOTONIC)</p>",
        "id": 536317505,
        "sender_full_name": "Lann Martin",
        "timestamp": 1756245259
    },
    {
        "content": "<p>I think it would be something \"exotic\" (by current standards) like that rather than a host actually having a live instance for that long</p>",
        "id": 536317630,
        "sender_full_name": "Lann Martin",
        "timestamp": 1756245345
    },
    {
        "content": "<p>I guess the most plausible use case would be a test harness that implements \"time travel\" to exercise date calculations or whatever</p>",
        "id": 536317975,
        "sender_full_name": "Lann Martin",
        "timestamp": 1756245557
    },
    {
        "content": "<p>I suppose <code>now</code> could just be <code>-&gt; result&lt;instant&gt;</code> instead of trapping?</p>",
        "id": 536318272,
        "sender_full_name": "Lann Martin",
        "timestamp": 1756245707
    },
    {
        "content": "<p>To be clear, I do think it's plausible that someone could do this some day. But I think it's worthwhile to have an actual use case at hand rather than trying to guess.</p>",
        "id": 536318594,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1756245933
    },
    {
        "content": "<p>In most use cases I can imagine, one would still want the ability to cope with rare-but-not-never traps. If you have any data that you really really care about, the best place for it to live is usually in a database, not a suuuuper-long-lived Wasm instance.</p>",
        "id": 536318661,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1756245965
    },
    {
        "content": "<p>If we had a use case, then we could meaningfully answer the question of whether <code>-&gt; result&lt;instant&gt;</code> would be good enough. If a single instance lives that long, is it ok if monotonic timers just start failing part-way through its lifetime? If not, then perhaps we really do need the version that works on handles.</p>",
        "id": 536319287,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1756246364
    },
    {
        "content": "<p>I also think that <code>monotonic-clock</code> falls closer to the \"compatibility\" end of the spectrum along with e.g. <code>udp-socket</code> than the \"model the spec\" end like <code>http</code>. If you need time-traveling components maybe you don't use wasi-libc.</p>",
        "id": 536319754,
        "sender_full_name": "Lann Martin",
        "timestamp": 1756246670
    },
    {
        "content": "<p>A similarly-pragmatic example is <code>random/random</code> which clearly expects to be running only in certain kinds of environments where you always have access to endless entropy.</p>",
        "id": 536320030,
        "sender_full_name": "Lann Martin",
        "timestamp": 1756246873
    },
    {
        "content": "<p>every interface is imperfect, but some interfaces are useful. <code>now: fn() -&gt; result&lt;instant&gt;</code> is not useful because for every not-extremely-exotic program in existence, the only sensible thing to do when you get an error is to trap, because theres no way to continue executing once the monotonic clock stopped working.</p>",
        "id": 536323641,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1756249062
    },
    {
        "content": "<p>plenty of programs that wont use libc will use the monotonic-clock interface, for instance wstd uses it directly without going through wasi-libc. but i dont think a single user writing wasi programs today would be served by us imagining some extremely exotic user that might exist tomorrow and creating an overwrought clocks interface in anticipation. lets save our energy for all the other promises we made that we havent delivered yet</p>",
        "id": 536323910,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1756249228
    },
    {
        "content": "<p>To clarify: I agree that this doesn't need to change. The speculation above is just feeling out the design tradeoffs in the context of a real need to clarify the interface docs.</p>",
        "id": 536427411,
        "sender_full_name": "Lann Martin",
        "timestamp": 1756303206
    }
]