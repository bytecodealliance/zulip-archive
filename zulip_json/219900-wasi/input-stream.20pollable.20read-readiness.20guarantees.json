[
    {
        "content": "<p>want to bring more visibility to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9667#issuecomment-2608134946\">https://github.com/bytecodealliance/wasmtime/issues/9667#issuecomment-2608134946</a>: Alex pointed out that, basically, the guarantees I wrote down for input-stream read readiness are bogus and cant reasonably be met on top of posix. They've never been met by wasmtime, so I think we should just change the spec to weaken the guarantees provided, and accommodate that in e.g. wstd and any other places we depended on it.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/9667#issuecomment-2608134946\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a9c8ba14eaf3e834836b10a80e355df061105521/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623635663438363137616536393234393336366162626563636133316566396162306461633162646566343731663133323666313962333536396566353532612f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f39363637&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/9667#issuecomment-2608134946\" title=\"wasmtime-wasi: Unexpected tcp stream break (Returning 0 for `std::io::ErrorKind::WouldBlock`) 路 Issue #9667 路 bytecodealliance/wasmtime\">wasmtime-wasi: Unexpected tcp stream break (Returning 0 for `std::io::ErrorKind::WouldBlock`) 路 Issue #9667 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">wasmtime/crates/wasi/src/tcp.rs Lines 719 to 723 in 6767488 // Failing with `EWOULDBLOCK` is how we differentiate between a closed channel and no // data to read right now. Err(e) if e.kind() == st...</div></div></div>",
        "id": 495363616,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1737575945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span> do you know if jco has the same behavior as wasmtime here?</p>",
        "id": 495363683,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1737575973
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> <span class=\"user-mention\" data-user-id=\"344849\">@Yosh Wuyts</span> <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> )</p>",
        "id": 495363707,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1737575988
    },
    {
        "content": "<p>I'm pretty sure Node.js stream reads after poll can return zero bytes in reality as well, so this wouldn't be a problem for JS if it's already happening there too</p>",
        "id": 495375754,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1737580850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span>  I read over the issue - what's the proposed mapping back to Rust from this? Is it something like:</p>\n<ul>\n<li>wasi: <code>StreamError::Closed</code> -&gt; <code>AsyncRead::read</code>: <code>Ok(0)</code></li>\n<li>wasi: <code>Ok(0)</code> -&gt; <code>AsyncRead::read</code>: [pending future]</li>\n</ul>",
        "id": 495533608,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1737648061
    },
    {
        "content": "<p>Heh, okay what I wrote is less clear than I imagined it would be. I guess I'm wondering what the concrete change we're proposing here is?</p>",
        "id": 495534463,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1737648277
    },
    {
        "content": "<p>I presume slightly changing the documentation from</p>\n<blockquote>\n<p>The pollable given by <code>subscribe</code> will be ready when more bytes are available.</p>\n</blockquote>\n<p>to something along the lines of:</p>\n<blockquote>\n<p>The pollable given by <code>subscribe</code> will be ready when the read should be attempted again.</p>\n</blockquote>",
        "id": 495535105,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1737648451
    },
    {
        "content": "<p>ohhh, I see - and that gives us room to schedule a wake to signal EOF, right?</p>",
        "id": 495535650,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1737648600
    },
    {
        "content": "<p>Hmm, not sure what you mean, but I don't think EOF has anything to do with this</p>",
        "id": 495535961,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1737648694
    },
    {
        "content": "<p>More about EWOULDBLOCK (a.k.a. Poll:Pending in rust)</p>",
        "id": 495536170,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1737648749
    },
    {
        "content": "<p>Oh interesting; I meant EOF as \"end of stream\" - so like, we can signal \"ready\" to say \"there are no more bytes here\". The previous wording read like that was disallowed?</p>",
        "id": 495536186,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1737648755
    },
    {
        "content": "<p>ahhh, okay - that's also interesting</p>",
        "id": 495536229,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1737648770
    },
    {
        "content": "<p>either way tho: I now understand that the current wording is too narrow, ty!</p>",
        "id": 495536511,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1737648857
    },
    {
        "content": "<p>Basically we want to communicate to users that they should always use a loop when pollables and streams are involved since a pollable being ready doesn't guarantee there the next read or write will produce/consume more than zero bytes.</p>",
        "id": 495536590,
        "sender_full_name": "Joel Dice",
        "timestamp": 1737648881
    },
    {
        "content": "<p>Pollable::ready() has more to do with EWOULDBLOCK.</p>\n<p>The current docs mention that: If a pollable signals readiness, the next operation MUST NOT return \"EWOULDBLOCK\" (or however the API in question has WIT-ified that response code).</p>\n<p>The proposal is to relax that condition to effectively say:  If a pollable signals readiness, the next operation _likely won't_ return \"EWOULDBLOCK\". But no promises.. #Yolo :P</p>",
        "id": 495536689,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1737648908
    },
    {
        "content": "<p>What Dave just said is what I was thinking for a rewording yeah. Including #yolo too!</p>",
        "id": 495541656,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737650223
    }
]