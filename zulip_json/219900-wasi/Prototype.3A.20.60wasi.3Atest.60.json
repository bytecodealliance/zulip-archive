[
    {
        "content": "<p>I've put together a prototype <code>wasi:test</code> interface and examples: <a href=\"https://github.com/lann/wasi-test\">https://github.com/lann/wasi-test</a></p>\n<p>tl;dr:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">this_test_always_fails</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">TestContext</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"s\">\"failed as expected\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"n\">wasi_test</span><span class=\"p\">::</span><span class=\"n\">suite</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">this_test_always_fails</span><span class=\"p\">);</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>wac<span class=\"w\"> </span>--plug<span class=\"w\"> </span>example-tests.wasm<span class=\"w\"> </span>wasi-test-runner-cli.wasm<span class=\"w\"> </span>-o<span class=\"w\"> </span>runnable-tests.wasm\n<span class=\"gp\">$ </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>-Wcomponent-model-async<span class=\"w\"> </span>runnable-tests.wasm\n<span class=\"go\">Test this-test-always-fails...FAIL (\"failed as expected\")</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/lann/wasi-test\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/708c1a71ac099eca47192657007110fb98656ee3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663736373861386438613939383936656665376165326536666263333366363038386237623666336634356264333230653864633931333166643738356664332f6c616e6e2f776173692d74657374&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/lann/wasi-test\" title=\"GitHub - lann/wasi-test\">GitHub - lann/wasi-test</a></div><div class=\"message_embed_description\">Contribute to lann/wasi-test development by creating an account on GitHub.</div></div></div>",
        "id": 544827031,
        "sender_full_name": "Lann Martin",
        "timestamp": 1760471959
    },
    {
        "content": "<p>Oh this is neat! For the Rust HTTP sample we never got around to answering how to test it</p>",
        "id": 546252923,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1761057045
    },
    {
        "content": "<p>Something like this seems like it might help? - though I assume that does require answering the <code>wasi:http</code> composition question first</p>",
        "id": 546253127,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1761057087
    },
    {
        "content": "<blockquote>\n<p>the <code>wasi:http</code> composition question</p>\n</blockquote>\n<p>Which composition question? <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 546266696,
        "sender_full_name": "Lann Martin",
        "timestamp": 1761060383
    },
    {
        "content": "<p>I think what I meant was: how can we test a WASI http server from WASI itself? Presumably the right way we'd want to solve that is by linking the http server into our test component, and triggering calls to the server component from there.</p>",
        "id": 546754043,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1761247393
    },
    {
        "content": "<p>What we're doing now in e.g. wstd to test networking things is to spin up a Wasmtime instance in Rust and use that to instrument test programs externally.</p>",
        "id": 546754205,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1761247471
    },
    {
        "content": "<p>Presumably if we had an <code>WASI::http/server</code>, we should be able to link that against <code>WASI::http/middleware</code> somehow, and us that to drive the tests?</p>",
        "id": 546754559,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1761247595
    },
    {
        "content": "<p>But maybe I'm thinking about this wrong heh</p>",
        "id": 546754634,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1761247623
    },
    {
        "content": "<p>By \"WASI http server\" do you mean like <code>wasmtime serve</code> or do you mean a component exporting a wasi:http handler?</p>",
        "id": 546757089,
        "sender_full_name": "Lann Martin",
        "timestamp": 1761248525
    },
    {
        "content": "<p>I meant the latter</p>",
        "id": 546878287,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1761307074
    },
    {
        "content": "<p>In that case wasi:test should work. The test(s) would import the handler and call into it. You'd probably want a test implementation of wasi:http to ease testing any actual application logic.</p>",
        "id": 546881260,
        "sender_full_name": "Lann Martin",
        "timestamp": 1761307935
    },
    {
        "content": "<p>Added a composition diagram to the <a href=\"https://github.com/lann/wasi-test/blob/main/README.md\">readme</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/lann/wasi-test/blob/main/README.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/df0022281c825bc29dd38b4158b3761d617d7d77/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373234613266363238353461373737336534353666303262626635316433653434326237386430626133393536393165336132613939626461303332366233622f6c616e6e2f776173692d74657374&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/lann/wasi-test/blob/main/README.md\" title=\"wasi-test/README.md at main 路 lann/wasi-test\">wasi-test/README.md at main 路 lann/wasi-test</a></div><div class=\"message_embed_description\">Contribute to lann/wasi-test development by creating an account on GitHub.</div></div></div>",
        "id": 546888170,
        "sender_full_name": "Lann Martin",
        "timestamp": 1761309928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> the SVG isn't loading for me; maybe a broken link?</p>",
        "id": 546902219,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1761313749
    },
    {
        "content": "<p>Clicking through does show it tho; e.g. <a href=\"https://github.com/lann/wasi-test/blob/main/composition.svg\">https://github.com/lann/wasi-test/blob/main/composition.svg</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/lann/wasi-test/blob/main/composition.svg\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/69cd52bc32ea9b41a234789d2cd609ef1b174f7d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633265386236626132626662363066646133616264306438316533383230393631316432333766653535303636356439316361623862363033613862306264372f6c616e6e2f776173692d74657374&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/lann/wasi-test/blob/main/composition.svg\" title=\"wasi-test/composition.svg at main 路 lann/wasi-test\">wasi-test/composition.svg at main 路 lann/wasi-test</a></div><div class=\"message_embed_description\">Contribute to lann/wasi-test development by creating an account on GitHub.</div></div></div>",
        "id": 546902346,
        "sender_full_name": "Yosh Wuyts",
        "timestamp": 1761313782
    },
    {
        "content": "<p>One thing to clarify there wrt your question: the \"Test Runner\" interfaces don't matter for the thing being tested; the CLI test runner could run tests that target an HTTP handler, for instance.</p>",
        "id": 546903837,
        "sender_full_name": "Lann Martin",
        "timestamp": 1761314167
    },
    {
        "content": "<p>Also - and maybe this is getting closer to answering your question - a more complete diagram for testing an HTTP handler would involve something providing <code>wasi:http</code> imports to both the \"Tests Component\" and the \"Component Under Test\". That <em>could</em> just be the host but for application testing you'd probably prefer an entirely separate guest implementation, both for reproducibility and to enable fancy test functionality (mocking, request/response recording, etc).</p>",
        "id": 546905628,
        "sender_full_name": "Lann Martin",
        "timestamp": 1761314609
    }
]