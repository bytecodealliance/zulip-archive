[
    {
        "content": "<p>I am trying to use the wasmtime-was-http implementation from the prototyping repository. I called <code>wasmtime_wasi_http::p3::add_only_http_to_linker(&amp;mut linker).unwrap();</code>, yet my component that imports <code>wasi::http::handler::handle</code> and calls it to make outgoing http requests fails during instantiation, because said function is not found inside the linker. I use the exact same wit files as the repository: I copy-pasted them to make sure that the types match.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">ugl</span><span class=\"o\">-</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">31</span><span class=\"p\">:</span>\n<span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">component</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">http</span><span class=\"o\">/</span><span class=\"n\">handler</span><span class=\"o\">@</span><span class=\"mf\">0.3.0</span><span class=\"o\">-</span><span class=\"n\">draft</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">matching</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">linker</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">instance</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">handle</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"> </span><span class=\"k\">type</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">missing</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>I've taken a look at the source code of the wasmtime implementation and only ever see the proxy would being used for bindgen. Is the usage of the <code>handler</code> interface not possible (yet) without having a component also export a handle function itself?</p>",
        "id": 522599012,
        "sender_full_name": "mainrs",
        "timestamp": 1749131911
    },
    {
        "content": "<p>I've taken a look at the generated source code of <code>wasmtime-wasi-http</code> and the <code>wasmtime_wasi::p3::bindings::wasi::http::handler::add_to_linker</code> function looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">add_to_linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">                            </span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">                            </span><span class=\"n\">host_getter</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">D</span><span class=\"p\">::</span><span class=\"n\">Data</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">                        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n<span class=\"w\">                        </span><span class=\"k\">where</span>\n<span class=\"w\">                            </span><span class=\"n\">D</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">HostConcurrent</span><span class=\"p\">,</span>\n<span class=\"w\">                            </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">::</span><span class=\"n\">Data</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Host</span><span class=\"p\">,</span>\n<span class=\"w\">                            </span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span>\n<span class=\"w\">                        </span><span class=\"p\">{</span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span>\n<span class=\"w\">                                </span><span class=\"p\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"s\">\"wasi:http/handler@0.3.0-draft\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">                            </span><span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">func_wrap_concurrent</span><span class=\"p\">(</span>\n<span class=\"w\">                                </span><span class=\"s\">\"[async]handle\"</span><span class=\"p\">,</span>\n<span class=\"w\">                                </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">                                    </span><span class=\"n\">caller</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Accessor</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">                                    </span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,):</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Request</span><span class=\"o\">&gt;</span><span class=\"p\">,)</span><span class=\"o\">|</span>\n<span class=\"w\">                                </span><span class=\"p\">{</span>\n<span class=\"w\">                                    </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">accessor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                            </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">with_data</span><span class=\"p\">(</span><span class=\"n\">host_getter</span><span class=\"p\">)</span>\n<span class=\"w\">                                        </span><span class=\"p\">};</span>\n<span class=\"w\">                                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">HostConcurrent</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"n\">accessor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n<span class=\"w\">                                        </span><span class=\"nb\">Ok</span><span class=\"p\">((</span><span class=\"n\">r</span><span class=\"o\">?</span><span class=\"p\">,))</span>\n<span class=\"w\">                                    </span><span class=\"p\">})</span>\n<span class=\"w\">                                </span><span class=\"p\">},</span>\n<span class=\"w\">                            </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">                            </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">                        </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Which in my eyes should be correct and work. It even defines the exact same component name the error message mentions that is missing.</p>",
        "id": 522604864,
        "sender_full_name": "mainrs",
        "timestamp": 1749133473
    }
]