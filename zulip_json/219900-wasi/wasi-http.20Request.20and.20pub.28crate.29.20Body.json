[
    {
        "content": "<p>It seems like based on its visibility that I'm not supposed to be directly interacting with the Body of a <code>wasmtime_wasi_http::p3::Request</code>, but in my case I certainly would like to (which makes me think that I'm probably not doing the correct thing -- and if so would greatly appreciate learning the error of my ways!)</p>\n<p>I have a list of event handler components which each satisfy the following interface, where each may either short-circuit and return a request/response (HandleRequestResult::Done(req_or_res)), or pass on a potentially modified request to future handlers (HandleRequestResult::Next(req)):</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>interface event-handler {\n    use wasi:http/types@0.3.0-rc-2025-09-16.{request, response};\n    use capabilities.{capability-provider};\n\n    variant request-or-response {\n        request(request),\n        response(response),\n    }\n\n    variant handle-request-result {\n        next(request),\n        done(request-or-response),\n    }\n\n    handle-request: func(r: request, cp: capability-provider) -&gt; handle-request-result;\n\n   // ...other stuff unrelated to the question\n}\n</code></pre></div>\n<p>In the case of the end result of the chain being a request (not response), from the host side I'd like to execute the resulting <code>wasmtime_wasi_http::p3::Request</code>, but it seems like in order to do that I'd need to have access to the request Body, or use existing <code>wasi-http</code> code by passing it to a simple proxy handler component which just performs the request (though this seems a bit unusual).</p>\n<p>Does this sound right? Is there a better/easier way of doing this?</p>",
        "id": 543621282,
        "sender_full_name": "Theodore Brockman",
        "timestamp": 1759870942
    },
    {
        "content": "<p>I think you're running into a limitation of the <code>wasmtime-wasi-http</code> crate itself which is a bug we should fix! IMO what you want is <code>Request::into_http</code> akin to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a70809d0caa4959b5d991c2770de821ab3c63930/crates/wasi-http/src/p3/response.rs#L46\"><code>Response::into_http</code></a>. My guess is it would probably function more-or-less the same way, so in theory shouldn't be too hard to add</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/a70809d0caa4959b5d991c2770de821ab3c63930/crates/wasi-http/src/p3/response.rs#L46\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2a14b0135e7f1155ec0862e5e9c8619523eb1109/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343134643130323866383734396235636566613765373661393339303437633561383363306132396236626139343933353961386662636161313937376538622f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a70809d0caa4959b5d991c2770de821ab3c63930/crates/wasi-http/src/p3/response.rs#L46\" title=\"wasmtime/crates/wasi-http/src/p3/response.rs at a70809d0caa4959b5d991c2770de821ab3c63930 · bytecodealliance/wasmtime\">wasmtime/crates/wasi-http/src/p3/response.rs at a70809d0caa4959b5d991c2770de821ab3c63930 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 543630937,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1759875799
    },
    {
        "content": "<p>Okay, I'll mess around with that and can send in a PR if it ends up being legible <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 543632525,
        "sender_full_name": "Theodore Brockman",
        "timestamp": 1759876778
    }
]