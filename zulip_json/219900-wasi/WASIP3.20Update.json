[
    {
        "content": "<p>Late last year we decided that we'd like to start running a standup style update and to use the <a href=\"https://github.com/orgs/bytecodealliance/projects/16\">Ship WASIp3 project board</a>  (see topic <a class=\"message-link\" href=\"/#narrow/channel/219900-wasi/topic/WASIp3.20project.20board/near/479915405\">#wasi &gt; WASIp3 project board @ ðŸ’¬</a> for background) to coordinate work.</p>\n<p>Let's kick things off with an async style standup for this week!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/orgs/bytecodealliance/projects/16\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5ce2a01c3fe27d4bc753d1525377bb941d733be2/68747470733a2f2f6769746875622e636f6d2f6f70656e67726170682e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/orgs/bytecodealliance/projects/16\" title=\"Ship WASIp3 â€¢ bytecodealliance\">Ship WASIp3 â€¢ bytecodealliance</a></div><div class=\"message_embed_description\">Ship WASIp3</div></div></div>",
        "id": 493965033,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1736958026
    },
    {
        "content": "<p>Folks that have active work streams, will you post a quick update?<br>\ncc <span class=\"user-mention\" data-user-id=\"598440\">@Victor Adossi</span> <span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span></p>",
        "id": 493965388,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1736958123
    },
    {
        "content": "<h2>Jan 15, 2025</h2>\n<p><strong>Bailey Hayes</strong>: WASI clocks and random 0.3.0-draft WIT definitions have been reviewed and merged. We adjusted the API for wasi-clocks now that fn's are async, see: <a href=\"https://github.com/WebAssembly/wasi-clocks/blob/main/wit-0.3.0-draft/monotonic-clock.wit#L34-L44\">https://github.com/WebAssembly/wasi-clocks/blob/main/wit-0.3.0-draft/monotonic-clock.wit#L34-L44</a></p>\n<p>We decided to rev the <code>since</code> versions as 0.3.0 will make breaking changes to the 0.2.x series. Expect all 0.3.0-draft WIT's to align to this. Once <span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> PR's for filesystem and sockets merge, wasi-cli is the next target. I believe we're very close to having a draft for WASIP2 interfaces (http draft already exists but will be updated once deps land).</p>\n<p>Once the above is complete, adding support for WASIP3 interfaces in <a href=\"https://github.com/orgs/bytecodealliance/projects/16/views/1?pane=issue&amp;itemId=85549251\">wasmtime</a> and JCO can begin</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-clocks/blob/main/wit-0.3.0-draft/monotonic-clock.wit#L34-L44\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e92b42eaf014394d5c4109fb85278027ffe6bf29/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316333383865326530633363336335316234626534333232666265363935663061386534356139643635313939653938376538626331616631663031353732342f576562417373656d626c792f776173692d636c6f636b73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-clocks/blob/main/wit-0.3.0-draft/monotonic-clock.wit#L34-L44\" title=\"wasi-clocks/wit-0.3.0-draft/monotonic-clock.wit at main Â· WebAssembly/wasi-clocks\">wasi-clocks/wit-0.3.0-draft/monotonic-clock.wit at main Â· WebAssembly/wasi-clocks</a></div><div class=\"message_embed_description\">Clocks API for WASI. Contribute to WebAssembly/wasi-clocks development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/orgs/bytecodealliance/projects/16/views/1?pane=issue&amp;itemId=85549251\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5ce2a01c3fe27d4bc753d1525377bb941d733be2/68747470733a2f2f6769746875622e636f6d2f6f70656e67726170682e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/orgs/bytecodealliance/projects/16/views/1?pane=issue&amp;itemId=85549251\" title=\"Ship WASIp3 â€¢ bytecodealliance\">Ship WASIp3 â€¢ bytecodealliance</a></div><div class=\"message_embed_description\">Ship WASIp3</div></div></div>",
        "id": 493967654,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1736958739
    },
    {
        "content": "<h2>Items Ready for Work</h2>\n<p>If you're interested in jumping in, I see a couple items that could begin now:</p>\n<ul>\n<li>Add a <code>non-blocking</code> attribute <a href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=89740278\">issue on board</a>. Before starting this one, check-in with <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> </li>\n<li><a href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=86852507\">Doc work in component model book</a></li>\n</ul>\n<p>When picking up a new issue on the board, set yourself as the assignee.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=89740278\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5ce2a01c3fe27d4bc753d1525377bb941d733be2/68747470733a2f2f6769746875622e636f6d2f6f70656e67726170682e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=89740278\" title=\"Ship WASIp3 â€¢ bytecodealliance\">Ship WASIp3 â€¢ bytecodealliance</a></div><div class=\"message_embed_description\">Ship WASIp3</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=86852507\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5ce2a01c3fe27d4bc753d1525377bb941d733be2/68747470733a2f2f6769746875622e636f6d2f6f70656e67726170682e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=86852507\" title=\"Ship WASIp3 â€¢ bytecodealliance\">Ship WASIp3 â€¢ bytecodealliance</a></div><div class=\"message_embed_description\">Ship WASIp3</div></div></div>",
        "id": 493969444,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1736959211
    },
    {
        "content": "<p>Async/future/stream/error-context support has been merged into <code>wasm-tools</code> and <code>wit-bindgen</code> and is available in their latest releases.  Still iterating on the Wasmtime PR, knocking out todo items one by one.  Hoping to move that one to \"ready-for-review\" by the end of the month.  Meanwhile, it is feature-complete (modulo the <code>error-context</code> work Victor is doing, which I'm reviewing now), so feel free to clone the branch, kick the tires, and start adding WASIp3 support to <code>wasmtime-wasi</code> and <code>wasmtime-wasi-http</code>.</p>",
        "id": 493969697,
        "sender_full_name": "Joel Dice",
        "timestamp": 1736959275
    },
    {
        "content": "<p>Hey all, here's what I'm working on right now: </p>\n<ul>\n<li>P3 Error impl<ul>\n<li>Progress on implementation of Error, working implementation right now, w/ a PR to <code>wit-bindgen-rt</code> and a draft to Joel's wasmtime branch (immense thanks to <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> who walked me through this)</li>\n</ul>\n</li>\n<li>Jco async host imports<ul>\n<li>Tests for CLI stuff and HTTP</li>\n<li>Adding more tests for the other new implementations</li>\n<li>Doing a bit of exploration on how we can build <code>asyncify</code> faster (unlikely to pan out)</li>\n</ul>\n</li>\n</ul>\n<p>CC <span class=\"user-mention\" data-user-id=\"479055\">@Calvin Prewitt</span> who is doing the actual bulk of the work of jco host async imports</p>",
        "id": 493969815,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1736959302
    },
    {
        "content": "<p><code>wasi-sockets</code> and <code>wasi-filesystem</code> WIT update PRs are ready for review</p>\n<p>will work on removing <code>wasi:io/error.error</code> dep from <code>wasi:http</code> and after that start WASI implementation in Wasmtime</p>",
        "id": 494165334,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1737039030
    },
    {
        "content": "<p>Thanks. I've got a few remarks on the wasi-sockets part. Hope to get it written down soon</p>",
        "id": 494165945,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1737039154
    },
    {
        "content": "<p>Whatâ€™s the status of implementing P3 streams and futures in wasmtime::component? Thatâ€™s a prerequisite to a wasi impl, correct?</p>",
        "id": 494182802,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1737043556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> see my update above; that's feature-complete and has decent test coverage.  Working to get that PR in a reviewable state (hopefully in the next week or two), but meanwhile you can use my PR branch.</p>",
        "id": 494184786,
        "sender_full_name": "Joel Dice",
        "timestamp": 1737044091
    },
    {
        "content": "<p>Thanks. I will take a look. Iâ€™ve been factoring out wasi-io from wasmtime-wasi so that at least that much can be built nostd, idk how that will intersect with these new streams and futures but hopefully they can plug together</p>",
        "id": 494187922,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1737044927
    },
    {
        "content": "<p>Just a heads-up, I've started working on <code>stream</code> types with no <code>&lt;T&gt;</code>, added this ticket to the board: <a href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=94157967\">https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=94157967</a><br>\ni.e. implementing the spec change from <a href=\"https://github.com/WebAssembly/component-model/pull/440\">https://github.com/WebAssembly/component-model/pull/440</a> in wasm-tools and wit-bindgen</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=94157967\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5ce2a01c3fe27d4bc753d1525377bb941d733be2/68747470733a2f2f6769746875622e636f6d2f6f70656e67726170682e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=94157967\" title=\"Ship WASIp3 â€¢ bytecodealliance\">Ship WASIp3 â€¢ bytecodealliance</a></div><div class=\"message_embed_description\">Ship WASIp3</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/pull/440\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a596bbaf51cf1d0a87b3f8a19176419b1bb874e1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646464653365643466643162666238326430643039613363373938623463303934373262386461336163633737333561646536366362393737386661626638332f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f70756c6c2f343430&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/pull/440\" title=\"Make future and stream element types optional by lukewagner Â· Pull Request #440 Â· WebAssembly/component-model\">Make future and stream element types optional by lukewagner Â· Pull Request #440 Â· WebAssembly/component-model</a></div><div class=\"message_embed_description\">For the same reason that variant and result case payloads and func results are optional, it seems like the element types of future and stream should be optional, allowing them to convey (single-sho...</div></div></div>",
        "id": 494344574,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1737115142
    },
    {
        "content": "<p>Opened a draft PR to <code>wasi:cli</code> for 0.3.0 <a href=\"https://github.com/WebAssembly/wasi-cli/pull/52\">https://github.com/WebAssembly/wasi-cli/pull/52</a><br>\na few smaller-scoped <code>wasi:http</code> updates to 0.3.0 <a href=\"https://github.com/WebAssembly/wasi-http/pull/143\">https://github.com/WebAssembly/wasi-http/pull/143</a> <a href=\"https://github.com/WebAssembly/wasi-http/pull/142\">https://github.com/WebAssembly/wasi-http/pull/142</a><br>\n<code>wasi:random</code> fix <a href=\"https://github.com/WebAssembly/wasi-random/pull/52\">https://github.com/WebAssembly/wasi-random/pull/52</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-cli/pull/52\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ee5f0bd62ba1ba817a737b40ab49512816e2fca0/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346538643530376663356234336139663566316135333162333835363262623861383435303032353637376530636364636666346637653765383465323765342f576562417373656d626c792f776173692d636c692f70756c6c2f3532&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-cli/pull/52\" title=\"feat: add `wit-0.3.0-draft` by rvolosatovs Â· Pull Request #52 Â· WebAssembly/wasi-cli\">feat: add `wit-0.3.0-draft` by rvolosatovs Â· Pull Request #52 Â· WebAssembly/wasi-cli</a></div><div class=\"message_embed_description\">Refs WebAssembly/wasi-random#52\nRefs WebAssembly/wasi-sockets#111\nRefs WebAssembly/wasi-filesystem#164</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/pull/143\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a06920da5ad024e4936a3a975a2d2742b6da05ee/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303666343266666163353364363633666236336639626635356234313963623661313037313939386330623039373531666534323839333034396636653832382f576562417373656d626c792f776173692d687474702f70756c6c2f313433&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/pull/143\" title=\"feat(0.3): rework stream error handling/remove `wasi:io` usage by rvolosatovs Â· Pull Request #143 Â· WebAssembly/wasi-http\">feat(0.3): rework stream error handling/remove `wasi:io` usage by rvolosatovs Â· Pull Request #143 Â· WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">Remove wasi:io usage in wit-0.3.0-draft\nFollowed the same stream error handling convention as currently in\n\nfeat: add wasi-0.3.0 draftÂ wasi-filesystem#164\nfeat: add wasi-0.3.0 draftÂ wasi-sockets#111</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/pull/142\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7d6799708d75681725b6037dbe47b3ae528c835d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306363613865653032663064633439313131653164316536333964353231306431653666313532626563353930623435636164386332353561303363336564622f576562417373656d626c792f776173692d687474702f70756c6c2f313432&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/pull/142\" title=\"chore(0.3.0-draft): update `wasi:{clocks,random}` to `0.3.0` by rvolosatovs Â· Pull Request #142 Â· WebAssembly/wasi-http\">chore(0.3.0-draft): update `wasi:{clocks,random}` to `0.3.0` by rvolosatovs Â· Pull Request #142 Â· WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">update wit-deps to 0.5.0 (mainly for feat: add support for subdirÂ bytecodealliance/wit-deps#254)\nverify wit-0.3.0-draft deps in CI\nupdate wasi:clocks in wit-0.3.0-draft subtree to 0.3.0\nremove redu...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-random/pull/52\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3dec95166114792d12b412f01ccdf5bfe8b0e464/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656261656437343733336262653963663737653738623965623062316236616664326236386464613937613337393131333839316366656335643738303038642f576562417373656d626c792f776173692d72616e646f6d2f70756c6c2f3532&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-random/pull/52\" title=\"chore(0.3): bump `@since` gates to `0.3.0` by rvolosatovs Â· Pull Request #52 Â· WebAssembly/wasi-random\">chore(0.3): bump `@since` gates to `0.3.0` by rvolosatovs Â· Pull Request #52 Â· WebAssembly/wasi-random</a></div><div class=\"message_embed_description\">Refs WebAssembly/wasi-filesystem#164 (comment)</div></div></div>",
        "id": 494345064,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1737115319
    },
    {
        "content": "<p>Added a draft PR for <code>stream</code> of unit: <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1978\">https://github.com/bytecodealliance/wasm-tools/pull/1978</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/1978\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/242c1a8c42bf7447a0e4e32f96ef0c956c7d68ea/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316662656566373138613133663430376230366532653165366539373237333030353466383531376135633835396265376630373033613962633631343762312f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f31393738&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1978\" title=\"feat: add support for `stream` with no `&lt;T&gt;` by rvolosatovs Â· Pull Request #1978 Â· bytecodealliance/wasm-tools\">feat: add support for `stream` with no `&lt;T&gt;` by rvolosatovs Â· Pull Request #1978 Â· bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Add support for streams with no elements (streams of unit)\nRefs WebAssembly/component-model#440</div></div></div>",
        "id": 494353635,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1737118217
    },
    {
        "content": "<p>started the wasmtime WASI 0.3 impl <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10061\">https://github.com/bytecodealliance/wasmtime/pull/10061</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/10061\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/faebbbf4eec275d8255d82ef7ccf1aac18b1de13/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343934353463333035663837313734323432616562303231333965313531383765393439626536396636633163366430303733313338316432613832653864662f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3130303631&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/10061\" title=\"feat(wasi): add support for `wasi:random@0.3.0` by rvolosatovs Â· Pull Request #10061 Â· bytecodealliance/wasmtime\">feat(wasi): add support for `wasi:random@0.3.0` by rvolosatovs Â· Pull Request #10061 Â· bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This adds support for wasi:random@0.3.0 from https://github.com/WebAssembly/wasi-random/tree/3e99124e81d0f80872b826d161bef077ee37d241/wit-0.3.0-draft\nThe change is fully backwards-compatible from t...</div></div></div>",
        "id": 495077137,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1737471937
    },
    {
        "content": "<p>and now with actual async: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10063/commits/171a532910790379ebbfd85ddbb62b6f60a1fbff\">https://github.com/bytecodealliance/wasmtime/pull/10063/commits/171a532910790379ebbfd85ddbb62b6f60a1fbff</a> </p>\n<p>component build fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">artifacts</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">176</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">translated</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">validate</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">output</span>\n\n<span class=\"w\">  </span><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nc\">canonical</span><span class=\"w\"> </span><span class=\"n\">option</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">async</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"n\">feature</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x82da1a</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Will try basing on <code>async</code> branch</p>\n<p>btw, I've noticed that <code>wit-bindgen-rt</code> dependency, which appears to be used by <code>async</code> is missing out-of-the-box.<br>\nI believe deps are normally reexported by <code>wit-bindgen</code>, but in this case it appears that macro attempts to import from <code>::wit-bindgen-rt</code><br>\ncc <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> idk, if that's a known/fixed issue or do you want me to take a look?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/10063/commits/171a532910790379ebbfd85ddbb62b6f60a1fbff\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c4038796183d40603f87dc1d79e82edc1eb2d1d8/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f31323837373930353f733d34303026763d34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/10063/commits/171a532910790379ebbfd85ddbb62b6f60a1fbff\" title=\"feat: add support for `wasi:clocks@0.3.0` by rvolosatovs Â· Pull Request #10063 Â· bytecodealliance/wasmtime\">feat: add support for `wasi:clocks@0.3.0` by rvolosatovs Â· Pull Request #10063 Â· bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Add support for wasi:clocks@0.3.0.\nBlocked on #10061</div></div></div>",
        "id": 495100587,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1737478050
    },
    {
        "content": "<p>filed <a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/1135\">https://github.com/bytecodealliance/wit-bindgen/issues/1135</a>, working on a fix</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/issues/1135\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5d9f07ccb46e3dbd440c34dc597dc4d34d5f03bc/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333361383231646439373138373036393063376433306262663038613134656239653131316565636666333866343166376665383266643530633736306433622f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f6973737565732f31313335&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/1135\" title=\"Remove explicit `::wit_bindgen_rt` import from async support Â· Issue #1135 Â· bytecodealliance/wit-bindgen\">Remove explicit `::wit_bindgen_rt` import from async support Â· Issue #1135 Â· bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">Currently wit-bindgen explicitly imports ::wit_bindgen_rt for async, e.g.: wit-bindgen/crates/rust/src/lib.rs Lines 458 to 526 in 629ced7 if !self.future_payloads.is_empty() { self.src.push_str( \"\\...</div></div></div>",
        "id": 495103342,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1737478795
    },
    {
        "content": "<p>this seems to have fixed the issue: <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1136\">https://github.com/bytecodealliance/wit-bindgen/pull/1136</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1136\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/cac7eff44f03f8a5f5b60cff0e8a2871c5bd7281/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363361323135623166323836646334656563316637383362356666306263343537333964646566316331663039623339616366346266346439396538383439632f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f31313336&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1136\" title=\"fix: re-export `async_support` in `rt` by rvolosatovs Â· Pull Request #1136 Â· bytecodealliance/wit-bindgen\">fix: re-export `async_support` in `rt` by rvolosatovs Â· Pull Request #1136 Â· bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">Closes #1135</div></div></div>",
        "id": 495110628,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1737480954
    },
    {
        "content": "<p>FYI, I'm starting to work on wit-bindgen C support for async/streams/futures, which will unblock wasip3 support in <code>wasi-libc</code> and the toolchains which depend on it.</p>",
        "id": 495165765,
        "sender_full_name": "Joel Dice",
        "timestamp": 1737503000
    },
    {
        "content": "<p>I've rebased my Wasmtime WASI changes on latest <code>async</code> from <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> in <a href=\"https://github.com/rvolosatovs/wasmtime/tree/async-wasi\">https://github.com/rvolosatovs/wasmtime/tree/async-wasi</a></p>\n<p><code>wasi:clocks@0.3.0</code> test fails for now, but looks like we're pretty close to getting this working end-to-end:</p>\n<p>on <a href=\"https://github.com/rvolosatovs/wasmtime/commit/8ea812e04a77ab7a396bd74876d8c8ef6f0b017b\">https://github.com/rvolosatovs/wasmtime/commit/8ea812e04a77ab7a396bd74876d8c8ef6f0b017b</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">async_</span><span class=\"p\">::</span><span class=\"n\">preview3_sleep</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span>\n<span class=\"n\">preopen</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">TempDir</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"/var/folders/bq/thy1_b7x29l7s2wqw39r62yw0000gn/T/wasi_components_preview3_sleep.component_cp7fbR\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">async_</span><span class=\"p\">::</span><span class=\"n\">preview3_sleep</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">rvolosatovs</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">bytecodealliance</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">108</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">:</span>\n<span class=\"nc\">Cannot</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">happens</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">like</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">block_on</span><span class=\"err\">`</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">attempted</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">being</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">drive</span><span class=\"w\"> </span><span class=\"n\">asynchronous</span><span class=\"w\"> </span><span class=\"n\">tasks</span><span class=\"p\">.</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n\n<span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">sync</span><span class=\"p\">::</span><span class=\"n\">preview3_sleep</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span>\n<span class=\"n\">preopen</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">TempDir</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"/var/folders/bq/thy1_b7x29l7s2wqw39r62yw0000gn/T/wasi_components_preview3_sleep.component_bQriUp\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">sync</span><span class=\"p\">::</span><span class=\"n\">preview3_sleep</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">rvolosatovs</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">bytecodealliance</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">component</span><span class=\"o\">/</span><span class=\"n\">concurrent</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">534</span><span class=\"p\">:</span><span class=\"mi\">54</span><span class=\"p\">:</span>\n<span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Option</span><span class=\"p\">::</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">None</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>\n\n\n<span class=\"n\">failures</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">async_</span><span class=\"p\">::</span><span class=\"n\">preview3_sleep</span>\n<span class=\"w\">    </span><span class=\"n\">sync</span><span class=\"p\">::</span><span class=\"n\">preview3_sleep</span>\n</code></pre></div>\n<p>I'll start digging :)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rvolosatovs/wasmtime/tree/async-wasi\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8c78fbe704e6d640d935d3d392054e3fb6d0cb75/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396234353339303439326466376164646533383736303637383938363637393639393034366439643331343439613532363835373662363136353362623666382f72766f6c6f7361746f76732f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rvolosatovs/wasmtime/tree/async-wasi\" title=\"GitHub - rvolosatovs/wasmtime at async-wasi\">GitHub - rvolosatovs/wasmtime at async-wasi</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - GitHub - rvolosatovs/wasmtime at async-wasi</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rvolosatovs/wasmtime/commit/8ea812e04a77ab7a396bd74876d8c8ef6f0b017b\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/eb64dfe1277fa9031358deeb074417ab3faa2614/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346637343833376534303061303938353563623338383465356433363666373832616233393530363065393930326434396362363163333436376163376634322f72766f6c6f7361746f76732f7761736d74696d652f636f6d6d69742f38656138313265303461373761623761333936626437343837366438633865663666306230313762&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rvolosatovs/wasmtime/commit/8ea812e04a77ab7a396bd74876d8c8ef6f0b017b\" title=\"test: enable CM async feature in the engine Â· rvolosatovs/wasmtime@8ea812e\">test: enable CM async feature in the engine Â· rvolosatovs/wasmtime@8ea812e</a></div><div class=\"message_embed_description\">Signed-off-by: Roman Volosatovs &lt;rvolosatovs@riseup.net&gt;</div></div></div>",
        "id": 495283366,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1737552669
    },
    {
        "content": "<p>I got <code>wasi:clocks@0.3.0</code> test passing with async runtime in <a href=\"https://github.com/rvolosatovs/wasmtime/commit/c3406b2cb02a6013add16867a8c6debad8bbef39\">https://github.com/rvolosatovs/wasmtime/commit/c3406b2cb02a6013add16867a8c6debad8bbef39</a><br>\nthanks <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> for the help!</p>\n<p>I noticed the same \"current task missing\" panic when attempting to run the same test with <code>async_support(false)</code>, i.e. using sync host bindings. It makes sense, since in that case none of the async machinery seem to be used<br>\nWhat is the current thinking around that - are we planning to support wasip3 on hosts without <code>async_support</code> at all?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rvolosatovs/wasmtime/commit/c3406b2cb02a6013add16867a8c6debad8bbef39\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/833e9f2b1b7e39b2b3c39b7730a3d7538f6b89f6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633963396464353732643264663636323564393733343332333438663165633762396366626465326632663532356463623636616632666335386266356136312f72766f6c6f7361746f76732f7761736d74696d652f636f6d6d69742f63333430366232636230326136303133616464313638363761386336646562616438626265663339&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rvolosatovs/wasmtime/commit/c3406b2cb02a6013add16867a8c6debad8bbef39\" title=\"feat: run `wasi:clocks@0.3.0` tests Â· rvolosatovs/wasmtime@c3406b2\">feat: run `wasi:clocks@0.3.0` tests Â· rvolosatovs/wasmtime@c3406b2</a></div><div class=\"message_embed_description\">Signed-off-by: Roman Volosatovs &lt;rvolosatovs@riseup.net&gt;</div></div></div>",
        "id": 495351928,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1737571469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> and I discussed this a while ago.  We don't think WASIp3 or the component model async ABI make sense to support in Wasmtime with <code>async_support(false)</code>, and we're actually considering deprecating Wasmtime's component model sync APIs (i.e. making <code>async_support(true)</code> the default and, eventually, only option for running components).</p>",
        "id": 495352729,
        "sender_full_name": "Joel Dice",
        "timestamp": 1737571717
    },
    {
        "content": "<p>That sounds good to me and simplifies this effort - I won't be adding the <code>sync</code> bindings to wasip3 interfaces at all then :)</p>",
        "id": 495353047,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1737571825
    },
    {
        "content": "<p>thanks Joel, that sounds right - we'll have to see about deprecating the sync stuff for p2 we already provide (hacky as it is, it does actually meet some users needs) but I agree we shouldn't worry about sync interfaces to p3 or async CM</p>",
        "id": 495353575,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1737572025
    },
    {
        "content": "<p>Do I understand correctly that the plan is that the CM host must support async, but that all components can still be fully sync (if one wants that)? If wasmtime will always use async, it may be useful to support compiling with a very cheap async runtime so that e.g. embedded usecases donâ€™t need to pull in a costly featureful runtime</p>",
        "id": 495433807,
        "sender_full_name": "Juniper Tyree",
        "timestamp": 1737614528
    },
    {
        "content": "<p>Yes, you should basically just need tasks (which can be implemented with a library e.g. <a href=\"https://docs.rs/futures/latest/futures/task/index.html\">https://docs.rs/futures/latest/futures/task/index.html</a>), and whatever your platform needs for IO to make a custom executor</p>",
        "id": 495558068,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1737655437
    },
    {
        "content": "<p>I'm working on exactly that for P2 right now, the need is not limited to P3</p>",
        "id": 495558171,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1737655461
    },
    {
        "content": "<p>the existing P2 wasmtime-wasi always runs inside tokio, with the sync bindings it just hides that tokio in the background.</p>",
        "id": 495558276,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1737655498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"598440\">@Victor Adossi</span> I've sent you all invites to a 30 min call tomorrow, please let me know if that time slot does not work for you.<br>\nIf it does, then first item on the agenda would be discussing time slots and making this a regular meeting :)</p>",
        "id": 496837924,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1738260389
    },
    {
        "content": "<p>(I used emails from Wasmtime git log mostly)</p>",
        "id": 496838044,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1738260429
    },
    {
        "content": "<p>just realized I scheduled the meeting for next week <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> , just rescheduled for <em>tomorrow</em>, also moved it to a bit later to accommodate for US West Coast</p>",
        "id": 496844972,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1738262743
    },
    {
        "content": "<p>works for me yeah <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 496875313,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1738273894
    },
    {
        "content": "<p>joel/I won't be around next monday but don't let my absence block y'all the monday after that from meeting</p>",
        "id": 497065544,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1738348504
    },
    {
        "content": "<p>I've created <a href=\"https://github.com/bytecodealliance/wasip3-prototyping\">https://github.com/bytecodealliance/wasip3-prototyping</a> and we should all have admin access there</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e7aabfa46ef6a67424b7191b096b47a33f080a53/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326130323639663630656133383433333230343934633730396366326633336166376630633434323161336335306233643461656134376132366237353066352f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping\" title=\"bytecodealliance/wasip3-prototyping\">bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div>",
        "id": 497065904,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1738348638
    },
    {
        "content": "<p>I avoided a literal fork b/c i don't think github lets you fork a repo within the same org</p>",
        "id": 497066066,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1738348692
    },
    {
        "content": "<p>just pushed up wasmtime's current <code>main</code> to the <code>main</code> there as well</p>",
        "id": 497066109,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1738348710
    },
    {
        "content": "<p>Small follow-up to the discussion from yesterday, just for the sake of completeness - without any changes to the wasmtime bindgen, we <em>should</em> be able to use dynamic dispatch to avoid the complex state machines in implementations. I haven't tested it, but I don't see why returning a <code>Box&lt;dyn FnOnce(..)&gt;</code> wouldn't work.</p>\n<p>It's essentially the same thing we've been doing for a long time with <code>async_trait</code>, but it does seem as a bit of a setback, since we'd not be able to \"just\" use Rust async. It also seems non-obvious for embedders, especially those not completely familiar with dynamic dispatch/async (e.g. explicit <code>Box&lt;dyn ..&gt;</code> bounds would likely be required to avoid compiler errors)</p>\n<p>Just throwing it out there as a potential solution, I believe having \"true\" Rust async trait support would be a lot nicer/better</p>",
        "id": 497147176,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1738401211
    },
    {
        "content": "<p>Can you clarify how returning a <code>Box&lt;dyn ...&gt;</code> would help?  I'm not seeing what part of the problem it solves.</p>",
        "id": 497297294,
        "sender_full_name": "Joel Dice",
        "timestamp": 1738535201
    },
    {
        "content": "<p>FWIW, I just sketched out a potential API based on a thread-local variable which is only set to a valid value when Wasmtime is polling futures created by functions registered using <code>LinkerInstance::func_wrap_concurrent</code>: <a href=\"https://gist.github.com/dicej/21519f9cf2e4d57a3316ea0b2167d281\">https://gist.github.com/dicej/21519f9cf2e4d57a3316ea0b2167d281</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/dicej/21519f9cf2e4d57a3316ea0b2167d281\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/91f9baed8f4fc08c462d1a4de5a8c23942d45e97/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f6173736574732f676973742d6f672d696d6167652d3534666437646330373133652e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/dicej/21519f9cf2e4d57a3316ea0b2167d281\" title=\"Sketch of alternative `wasmtime-wit-bindgen` `concurrent-imports` approach based on thread-local storage\">Sketch of alternative `wasmtime-wit-bindgen` `concurrent-imports` approach based on thread-local storage</a></div><div class=\"message_embed_description\">Sketch of alternative `wasmtime-wit-bindgen` `concurrent-imports` approach based on thread-local storage - concurrent-bindgen-sketch.rs</div></div></div>",
        "id": 497297421,
        "sender_full_name": "Joel Dice",
        "timestamp": 1738535291
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/wasi/src/p3/sockets/host/types/tcp.rs b/crates/wasi/src/p3/sockets/host/types/tcp.rs</span>\n<span class=\"gh\">index e2a45eb6c..c5f3cbb7f 100644</span>\n<span class=\"gd\">--- a/crates/wasi/src/p3/sockets/host/types/tcp.rs</span>\n<span class=\"gi\">+++ b/crates/wasi/src/p3/sockets/host/types/tcp.rs</span>\n<span class=\"gu\">@@ -45,64 +45,65 @@ where</span>\n<span class=\"w\"> </span>        let ctx = store.data().sockets();\n<span class=\"w\"> </span>        let allowed = ctx.allowed_network_uses.tcp;\n<span class=\"w\"> </span>        let socket_addr_check = ctx.socket_addr_check.clone();\n<span class=\"gd\">-        let sock = store</span>\n<span class=\"gi\">+        let tcp_socket = match store</span>\n<span class=\"w\"> </span>            .data_mut()\n<span class=\"w\"> </span>            .table()\n<span class=\"w\"> </span>            .get_mut(&amp;mut socket)\n<span class=\"w\"> </span>            .context(\"failed to get socket resource from table\")\n<span class=\"gd\">-            .map(|socket| {</span>\n<span class=\"gd\">-                let tcp_state = mem::replace(&amp;mut socket.tcp_state, TcpState::BindStarted);</span>\n<span class=\"gd\">-                if let TcpState::Default(sock) = tcp_state {</span>\n<span class=\"gd\">-                    Some((sock, socket.family))</span>\n<span class=\"gd\">-                } else {</span>\n<span class=\"gd\">-                    socket.tcp_state = tcp_state;</span>\n<span class=\"gd\">-                    None</span>\n<span class=\"gd\">-                }</span>\n<span class=\"gi\">+        {</span>\n<span class=\"gi\">+            Ok(sock) =&gt; sock,</span>\n<span class=\"gi\">+            Err(err) =&gt; {</span>\n<span class=\"gi\">+                return Box::pin(async move {</span>\n<span class=\"gi\">+                    for_any(Box::new(for_any(move |_| Err(err)))) as Box&lt;dyn FnOnce(_) -&gt; _&gt;</span>\n<span class=\"gi\">+                }) as Pin&lt;Box&lt;dyn Future&lt;Output = _&gt;&gt;&gt;</span>\n<span class=\"gi\">+            }</span>\n<span class=\"gi\">+        };</span>\n<span class=\"gi\">+        let tcp_state = mem::replace(&amp;mut tcp_socket.tcp_state, TcpState::BindStarted);</span>\n<span class=\"gi\">+        let sock = if let TcpState::Default(sock) = tcp_state {</span>\n<span class=\"gi\">+            sock</span>\n<span class=\"gi\">+        } else {</span>\n<span class=\"gi\">+            tcp_socket.tcp_state = tcp_state;</span>\n<span class=\"gi\">+            return Box::pin(async {</span>\n<span class=\"gi\">+                for_any(</span>\n<span class=\"gi\">+                    Box::new(move |_| Ok(Err(ErrorCode::InvalidState))) as Box&lt;dyn FnOnce(_) -&gt; _&gt;</span>\n<span class=\"gi\">+                )</span>\n<span class=\"w\"> </span>            });\n<span class=\"gi\">+        };</span>\n<span class=\"w\"> </span>        let local_address = SocketAddr::from(local_address);\n<span class=\"gd\">-        async move {</span>\n<span class=\"gd\">-            let res = match sock {</span>\n<span class=\"gd\">-                Ok(sock)</span>\n<span class=\"gd\">-                    if !allowed</span>\n<span class=\"gd\">-                        || !socket_addr_check(local_address, SocketAddrUse::TcpBind).await =&gt;</span>\n<span class=\"gd\">-                {</span>\n<span class=\"gd\">-                    if let Some((sock, ..)) = sock {</span>\n<span class=\"gd\">-                        Ok(Ok((sock, Err(ErrorCode::AccessDenied))))</span>\n<span class=\"gd\">-                    } else {</span>\n<span class=\"gd\">-                        Ok(Err(ErrorCode::AccessDenied))</span>\n<span class=\"gd\">-                    }</span>\n<span class=\"gd\">-                }</span>\n<span class=\"gd\">-                Ok(Some((sock, family))) =&gt; {</span>\n<span class=\"gd\">-                    let res = bind(&amp;sock, local_address, family);</span>\n<span class=\"gd\">-                    Ok(Ok((sock, res)))</span>\n<span class=\"gd\">-                }</span>\n<span class=\"gd\">-                Ok(None) =&gt; Ok(Err(ErrorCode::InvalidState)),</span>\n<span class=\"gd\">-                Err(err) =&gt; Err(err),</span>\n<span class=\"gd\">-            };</span>\n<span class=\"gd\">-            for_any(move |mut store: StoreContextMut&lt;'_, Self::TcpSocketData&gt;| {</span>\n<span class=\"gd\">-                let sock = res?;</span>\n<span class=\"gd\">-                let socket = store</span>\n<span class=\"gi\">+        Box::pin(async move {</span>\n<span class=\"gi\">+            if !allowed || !socket_addr_check(local_address, SocketAddrUse::TcpBind).await {</span>\n<span class=\"gi\">+                return Box::new(move |mut store: StoreContextMut&lt;'_, Self::TcpSocketData&gt;| {</span>\n<span class=\"gi\">+                    let tcp_socket = store</span>\n<span class=\"gi\">+                        .data_mut()</span>\n<span class=\"gi\">+                        .table()</span>\n<span class=\"gi\">+                        .get_mut(&amp;mut socket)</span>\n<span class=\"gi\">+                        .context(\"failed to get socket resource from table\")?;</span>\n<span class=\"gi\">+                    tcp_socket.tcp_state = TcpState::Default(sock);</span>\n<span class=\"gi\">+                    Ok(Err(ErrorCode::AccessDenied))</span>\n<span class=\"gi\">+                }) as Box&lt;dyn FnOnce(_) -&gt; _&gt;;</span>\n<span class=\"gi\">+            }</span>\n<span class=\"gi\">+            Box::new(move |mut store: StoreContextMut&lt;'_, Self::TcpSocketData&gt;| {</span>\n<span class=\"gi\">+                let tcp_socket = store</span>\n<span class=\"w\"> </span>                    .data_mut()\n<span class=\"w\"> </span>                    .table()\n<span class=\"w\"> </span>                    .get_mut(&amp;mut socket)\n<span class=\"w\"> </span>                    .context(\"failed to get socket resource from table\")?;\n<span class=\"gd\">-                let (sock, res) = match sock {</span>\n<span class=\"gd\">-                    Ok(sock) =&gt; sock,</span>\n<span class=\"gd\">-                    Err(err) =&gt; return Ok(Err(err)),</span>\n<span class=\"gd\">-                };</span>\n<span class=\"w\"> </span>                ensure!(\n<span class=\"gd\">-                    matches!(socket.tcp_state, TcpState::BindStarted),</span>\n<span class=\"gi\">+                    matches!(tcp_socket.tcp_state, TcpState::BindStarted),</span>\n<span class=\"w\"> </span>                    \"corrupted socket state\"\n<span class=\"w\"> </span>                );\n<span class=\"gd\">-                if let Err(err) = res {</span>\n<span class=\"gd\">-                    socket.tcp_state = TcpState::Default(sock);</span>\n<span class=\"gd\">-                    Ok(Err(err))</span>\n<span class=\"gd\">-                } else {</span>\n<span class=\"gd\">-                    socket.tcp_state = TcpState::Bound(sock);</span>\n<span class=\"gd\">-                    Ok(Ok(()))</span>\n<span class=\"gi\">+                match bind(&amp;sock, local_address, tcp_socket.family) {</span>\n<span class=\"gi\">+                    Ok(()) =&gt; {</span>\n<span class=\"gi\">+                        tcp_socket.tcp_state = TcpState::Bound(sock);</span>\n<span class=\"gi\">+                        Ok(Ok(()))</span>\n<span class=\"gi\">+                    }</span>\n<span class=\"gi\">+                    Err(err) =&gt; {</span>\n<span class=\"gi\">+                        tcp_socket.tcp_state = TcpState::Default(sock);</span>\n<span class=\"gi\">+                        Ok(Err(err))</span>\n<span class=\"gi\">+                    }</span>\n<span class=\"w\"> </span>                }\n<span class=\"w\"> </span>            })\n<span class=\"gd\">-        }</span>\n<span class=\"gi\">+        })</span>\n<span class=\"w\"> </span>    }\n\n<span class=\"w\"> </span>    fn connect(\n</code></pre></div>\n<p>something roughly like this. I did not play the lifetime bingo to solve the \"one type is more general than the other\" and \"implementation of <code>FnOnce</code> is not general enough\", but that's a potential workaround (which, it seems, would require even more helpers akin to <code>for_any</code>). I'm not sure if it's more ergonomic or clear.</p>\n<p>Your sketch looks good to me, however, and I think it makes a lot of sense.</p>",
        "id": 497444390,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1738591568
    },
    {
        "content": "<p>FYI, I just pushed my <code>async</code> branch to the <code>main</code> branch of the wasip3-prototyping repo.  I won't rebase it anymore after that; we can merge from upstream main as necessary, which should be less disruptive than rebasing.</p>",
        "id": 497672298,
        "sender_full_name": "Joel Dice",
        "timestamp": 1738677567
    },
    {
        "content": "<p>I missed wherever this came up on github - whats the reasoning behind dropping the <code>-draft</code> suffix on wasi 0.3 wit packages versions?</p>",
        "id": 497947719,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1738776927
    },
    {
        "content": "<p><a href=\"https://github.com/WebAssembly/wasi-filesystem/pull/164/commits/44b42cdf648e32482a7167ed182265be9623a7c3\">https://github.com/WebAssembly/wasi-filesystem/pull/164/commits/44b42cdf648e32482a7167ed182265be9623a7c3</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-filesystem/pull/164/commits/44b42cdf648e32482a7167ed182265be9623a7c3\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c4038796183d40603f87dc1d79e82edc1eb2d1d8/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f31323837373930353f733d34303026763d34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-filesystem/pull/164/commits/44b42cdf648e32482a7167ed182265be9623a7c3\" title=\"feat: add `wasi-0.3.0` draft by rvolosatovs Â· Pull Request #164 Â· WebAssembly/wasi-filesystem\">feat: add `wasi-0.3.0` draft by rvolosatovs Â· Pull Request #164 Â· WebAssembly/wasi-filesystem</a></div><div class=\"message_embed_description\">Refs https://github.com/orgs/bytecodealliance/projects/16/views/1?pane=issue&amp;itemId=88153596\nRefs WebAssembly/wasi-sockets#111\nRefs #156 (change sets seem to be complimentary)\nFollowed the exam...</div></div></div>",
        "id": 497955019,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1738779240
    },
    {
        "content": "<p>Looks like I've discovered, what appears to be, a bindgen bug <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/2\">https://github.com/bytecodealliance/wasip3-prototyping/issues/2</a>, but not entirely sure yet.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/2\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/45cafec2732ea758c42aea6afab9ba028410f7c0/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316334396133633663646230666435636361623531613361313531643661326532616334393430633265646433616137343831393035616639346662393762352f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f6973737565732f32&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/2\" title=\"Resource borrows escape scope Â· Issue #2 Â· bytecodealliance/wasip3-prototyping\">Resource borrows escape scope Â· Issue #2 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">This appears to be bindgen bug, but not entirely sure that's the case. On d8c91c3 (from #1 ) with the following patch applied: diff --git a/crates/wasi/tests/all/p3/sockets.rs b/crates/wasi/tests/a...</div></div></div>",
        "id": 497955227,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1738779318
    },
    {
        "content": "<p>ok got it. so we can restore the -draft once that bug is fixed?</p>",
        "id": 497959576,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1738780809
    },
    {
        "content": "<p>I think so, however is there a particular reason we'd want the <code>-draft</code> suffix?<br>\nSince the interfaces are in a separate (draft) directory within proposal repositories anyway, the fact that those interfaces are \"draft\" should be clear and <em>not</em> introducing the suffix seem to minimize the churn</p>",
        "id": 497962590,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1738781804
    },
    {
        "content": "<p>It's a precedent we set with wasip2. We don't want anyone to accidentally think wasi 0.3.0 is ready. We're also expecting to make a series of updates as these are unlikely to be the final versions of the interfaces. <code>-draft</code> makes that easier.</p>",
        "id": 497965894,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1738782894
    },
    {
        "content": "<p>yep. we have meaningful semver there, so lets use it.</p>",
        "id": 497991005,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1738792875
    },
    {
        "content": "<p>it also means we can publish the draft versions to an OCI registry fearlessly.</p>",
        "id": 497991031,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1738792892
    },
    {
        "content": "<p>Some fast-feedback would be great on this issue in wasi-http:</p>\n<p><a href=\"https://github.com/WebAssembly/wasi-http/issues/153\">https://github.com/WebAssembly/wasi-http/issues/153</a></p>\n<p>It looks like a signature (<code>body.finish</code>) needs to change given that internally it produces an <code>error-context</code>. There are many options for how to fix it, but it would be great to get that fix in upstream on the 0.3.0-draft</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/issues/153\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/72f779de1094b3e08b1ce908e528a71d81c699a4/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f356262303762633661663036383439633162626432306335616362336631323733333566313936613236613162326231303539376230353431393631313638322f576562417373656d626c792f776173692d687474702f6973737565732f313533&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/issues/153\" title=\"Handling/forwarding `error-context`s that can be forwarded during a `body.finish` Â· Issue #153 Â· WebAssembly/wasi-http\">Handling/forwarding `error-context`s that can be forwarded during a `body.finish` Â· Issue #153 Â· WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">During some implementation for error-contexts in futures in the wasip3-prototyping repo, we found that there was an issue with wasi:http/types#body.finish, as it implicitly does a future.read which...</div></div></div>",
        "id": 498817470,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1739207654
    },
    {
        "content": "<p>A quick summary of the status meeting earlier today, please let me know if I missed something:</p>\n<ul>\n<li>Joel and Alex did design work on the Wasmtime WIT bindgen changes and Joel will work on updating the bindgen similar to what was sketched out in a GitHub Gist posted earlier</li>\n<li>Fermyon is interested in providing early access to wasip3, before official release and will work on integrating wasip3 in Spin ASAP.</li>\n<li>Roman worked on porting TCP wasip2 tests and most implementations, waiting on wasmtime-wit-bindgen changes to avoid too much churn before proceeding further.</li>\n<li>Victor making good progress on error context</li>\n<li>JCO tooling was updated, will need another update</li>\n<li>Calvin is looking at intrinstic generation for async</li>\n<li>Yosh will start working on wasip3 communication</li>\n<li><code>wasi-http/types.body#finish</code>: reads from future, which is fallible, but there is currently no way to propagate the <code>error-context</code> from the method. We need an issue discussion in <code>wasi-http</code> about how to handle that</li>\n<li>Joel will look into the bindgen borrow issue that Roman has discovered earlier.</li>\n<li>We should add more people to wasip3 status call, please feel free to invite anyone you think should be there, otherwise let me know and I will send out an invite.</li>\n</ul>",
        "id": 498821039,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1739208638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> this fixes the borrow issue: <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/4\">https://github.com/bytecodealliance/wasip3-prototyping/pull/4</a></p>",
        "id": 498851313,
        "sender_full_name": "Joel Dice",
        "timestamp": 1739217729
    },
    {
        "content": "<p>Awesome, thanks <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> ! Just tested it and can confirm that it fixed the issue I've encountered :)</p>",
        "id": 498981389,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1739271535
    },
    {
        "content": "<p>Here's the wasmtime-wit-bindgen ergonomics refactor: <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/6\">https://github.com/bytecodealliance/wasip3-prototyping/pull/6</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/6\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0930de7bcf3479d28721337ed575a3637aa39f42/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396634653531666534646363396631393865356236346161623532623036633564373864633530333765376366323734363036353531626664316132353364342f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f36&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/6\" title=\"refactor `concurrent_imports` support in wasmtime-wit-bindgen by dicej Â· Pull Request #6 Â· bytecodealliance/wasip3-prototyping\">refactor `concurrent_imports` support in wasmtime-wit-bindgen by dicej Â· Pull Request #6 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">I had a few goals with this PR:\n\n\nImprove the ergonomics of concurrent import bindings by supporting async/await sugar and allowing store access to be arbitrarily interspersed between await points ...</div></div></div>",
        "id": 499128826,
        "sender_full_name": "Joel Dice",
        "timestamp": 1739324038
    },
    {
        "content": "<p>Looks great! Here's <code>bind</code> and <code>connect</code> with new API <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/7dbc8a9fd6a2348e772a32382c3e29c88cad397e/crates/wasi/src/p3/sockets/host/types/tcp.rs#L67-L153\">https://github.com/bytecodealliance/wasip3-prototyping/blob/7dbc8a9fd6a2348e772a32382c3e29c88cad397e/crates/wasi/src/p3/sockets/host/types/tcp.rs#L67-L153</a></p>\n<p>See also <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/6#pullrequestreview-2612364221\">https://github.com/bytecodealliance/wasip3-prototyping/pull/6#pullrequestreview-2612364221</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/7dbc8a9fd6a2348e772a32382c3e29c88cad397e/crates/wasi/src/p3/sockets/host/types/tcp.rs#L67-L153\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/482ade849d4e17f92ce3c649ffb8d9983ff9b975/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663930383334366335326234636532393531326632383935383163643831333539616634323838643934656233356366303762653164326133303936346266302f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/7dbc8a9fd6a2348e772a32382c3e29c88cad397e/crates/wasi/src/p3/sockets/host/types/tcp.rs#L67-L153\" title=\"wasip3-prototyping/crates/wasi/src/p3/sockets/host/types/tcp.rs at 7dbc8a9fd6a2348e772a32382c3e29c88cad397e Â· bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/wasi/src/p3/sockets/host/types/tcp.rs at 7dbc8a9fd6a2348e772a32382c3e29c88cad397e Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/6#pullrequestreview-2612364221\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4617cbbedceda6e732a15a362369bfd383f1ce96/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656339306163346534336230666431346433316638623261643665363066323637363336376561383965393437613434656232616138343433376633663661372f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f36&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/6#pullrequestreview-2612364221\" title=\"refactor `concurrent_imports` support in wasmtime-wit-bindgen by dicej Â· Pull Request #6 Â· bytecodealliance/wasip3-prototyping\">refactor `concurrent_imports` support in wasmtime-wit-bindgen by dicej Â· Pull Request #6 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">I had a few goals with this PR:\n\n\nImprove the ergonomics of concurrent import bindings by supporting async/await sugar and allowing store access to be arbitrarily interspersed between await points ...</div></div></div>",
        "id": 499265126,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1739374837
    },
    {
        "content": "<p>first, quick, incomplete attempt at TCP send looks roughly like that <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/e84bce870bf7bafed014b0a536445e1e0deb22fa/crates/wasi/src/p3/sockets/host/types/tcp.rs#L263-L366\">https://github.com/bytecodealliance/wasip3-prototyping/blob/e84bce870bf7bafed014b0a536445e1e0deb22fa/crates/wasi/src/p3/sockets/host/types/tcp.rs#L263-L366</a><br>\nonce I can get <code>listen</code> working, I'll be able to run some tests</p>\n<p>(this also lacks shutdown on EOF, but just testing out the API for now)</p>",
        "id": 499309074,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1739387576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> this should unblock <code>listen</code>: <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/8\">https://github.com/bytecodealliance/wasip3-prototyping/pull/8</a></p>",
        "id": 499341881,
        "sender_full_name": "Joel Dice",
        "timestamp": 1739399939
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> !<br>\nWorking on <code>listen</code> I'm getting a sefault with this API and I've also ran into the <code>failed to get promise</code> due to <code>cannot remove owned resource while borrowed</code> again, looks like there's indeed a bug, which is likely similar to what happened with borrows.</p>\n<p>I've also added a little commit to allow <code>spawn</code> on store directly (from within <code>with</code>) (<a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/1/commits/e4e4e5531aee37c0a99ea5e2d9364c30c001752d\">https://github.com/bytecodealliance/wasip3-prototyping/pull/1/commits/e4e4e5531aee37c0a99ea5e2d9364c30c001752d</a>), however even after reverting that I'm still getting the same result.</p>\n<p>What's the most efficient way to proceed here?<br>\nShould I file issues with reproduction steps?<br>\nWould it help to get on a call and pair?</p>\n<p>I've pushed my commit trace to <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/1\">https://github.com/bytecodealliance/wasip3-prototyping/pull/1</a></p>",
        "id": 499524811,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1739464933
    },
    {
        "content": "<p>Filing issues would be ideal.  They don't need detailed descriptions -- just brief descriptions of each issue with steps to repro.</p>",
        "id": 499525873,
        "sender_full_name": "Joel Dice",
        "timestamp": 1739465163
    },
    {
        "content": "<p>BTW, I've been wondering how <code>listen: func() -&gt; result&lt;stream&lt;tcp-socket&gt;, error-code&gt;</code> is supposed to work given that the <code>tcp-socket</code>borrow only lasts until <code>listen</code> returns, i.e. the callee no longer has access to it after returning, so it can't use it in the spawned task.  Curious if <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> has guidance on this.</p>",
        "id": 499526725,
        "sender_full_name": "Joel Dice",
        "timestamp": 1739465349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/1/commits/c347376e66784b1a3560f3a5efb537961452832a\">https://github.com/bytecodealliance/wasip3-prototyping/pull/1/commits/c347376e66784b1a3560f3a5efb537961452832a</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/1/commits/c347376e66784b1a3560f3a5efb537961452832a\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c4038796183d40603f87dc1d79e82edc1eb2d1d8/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f31323837373930353f733d34303026763d34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/1/commits/c347376e66784b1a3560f3a5efb537961452832a\" title=\"implement wasip3 interfaces by rvolosatovs Â· Pull Request #1 Â· bytecodealliance/wasip3-prototyping\">implement wasip3 interfaces by rvolosatovs Â· Pull Request #1 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Refs WebAssembly/wasi-cli#52\nRefs bytecodealliance/wasmtime#10063\nRefs bytecodealliance/wasmtime#10061\nRefs bytecodealliance/wasmtime#10073</div></div></div>",
        "id": 499531354,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1739466356
    },
    {
        "content": "<p>filed the issue at <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/9\">https://github.com/bytecodealliance/wasip3-prototyping/issues/9</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/9\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0a36fc26d5023390cae42258c1ed7609ecfb5469/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363934356363656132653236646438393934353235656239393739323439396537626561343530623036646164356132643438643166313263393166643061662f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f6973737565732f39&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/9\" title=\"Segfault using `Accessor::spawn` Â· Issue #9 Â· bytecodealliance/wasip3-prototyping\">Segfault using `Accessor::spawn` Â· Issue #9 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Using Accessor::spawn from e6179b6 (#8), I'm getting a segfault on c347376 A way to reproduce this error is: cargo test -p wasmtime-wasi p3 -- --ignored --nocapture test p3::sockets::sockets_0_3_tc...</div></div></div>",
        "id": 499533827,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1739466972
    },
    {
        "content": "<blockquote>\n<p>BTW, I've been wondering how <code>listen: func() -&gt; result&lt;stream&lt;tcp-socket&gt;, error-code&gt;</code> is supposed to work given that the <code>tcp-socket</code>borrow only lasts until <code>listen</code> returns, i.e. the callee no longer has access to it after returning, so it can't use it in the spawned task.</p>\n</blockquote>\n<p>Roman and I discussed this in today's Wasmtime meeting and he clarified that the host implementation of <code>listen</code> does not attempt to use the borrowed resource as such after the function returns -- instead it clones the backing implementation and uses that, which makes sense.  And I guess a component-implemented version could do the same thing by making the exported <code>tcp-socket</code>resource implementation contain a cloneable and interior-ly mutable state which may be cloned for post-return use.</p>",
        "id": 499541398,
        "sender_full_name": "Joel Dice",
        "timestamp": 1739468989
    },
    {
        "content": "<p>Filed an issue for the second error I've encountered: <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/10\">https://github.com/bytecodealliance/wasip3-prototyping/issues/10</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/10\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/be0343a214ccf9be3f307f74efc501092882df2a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656338656435363535376338336131616337396139623632643237653165323165663236363230653539363934393662303738653138346263383637313536302f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f6973737565732f3130&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/10\" title=\"Owned resource seemingly escaping scope Â· Issue #10 Â· bytecodealliance/wasip3-prototyping\">Owned resource seemingly escaping scope Â· Issue #10 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">This issue looks very similar to #2, encountered while implementing wasi:sockets TCP On c347376 apply: diff --git a/crates/wasi/tests/all/p3/sockets.rs b/crates/wasi/tests/all/p3/sockets.rs index 3...</div></div></div>",
        "id": 499542472,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1739469270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> The segfault you found is the same as the one I discovered last week in the context of epoch interruption (although it turns out it can happen even with epoch interruption disabled) and am in the process of addressing.  Meanwhile, <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/11\">this tiny PR</a> makes it panic instead of segfault.</p>",
        "id": 499550557,
        "sender_full_name": "Joel Dice",
        "timestamp": 1739471438
    },
    {
        "content": "<p>Awesome, thanks for looking into it. Can confirm that it does not segfault anymore! :)</p>",
        "id": 499554454,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1739472525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> This fixes issue #10: <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/12\">https://github.com/bytecodealliance/wasip3-prototyping/pull/12</a>.  I'll continue working on #9, but might not finish it before the end of my day, in which case I should have a PR up tomorrow.</p>",
        "id": 499598826,
        "sender_full_name": "Joel Dice",
        "timestamp": 1739486312
    },
    {
        "content": "<p>Do we want to get CI running on the prototyping repo? I must have missed the how/when/why of when it was disabled, but having <em>some</em> tests run at PR time is likely better than none.</p>\n<p>It's not a showstopper as I think a forking workflow would allow all the changes anyone wanted, but just bringing it up here for discussion.</p>",
        "id": 499627748,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1739502184
    },
    {
        "content": "<p>Yes, that would be great.</p>",
        "id": 499634524,
        "sender_full_name": "Joel Dice",
        "timestamp": 1739506617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/13\">This PR</a> addresses #9.  BTW, I merged my other outstanding PRs (despite not yet being approved) because juggling 4 different branches was irritating me.  I'd also like to merge yours as soon as it's somewhat stable (<code>#[ignore</code>ing tests as necessary) so we don't need to jump back and forth so much.</p>",
        "id": 499837664,
        "sender_full_name": "Joel Dice",
        "timestamp": 1739570085
    },
    {
        "content": "<p>With that PR, the tests that were failing due to #9 no longer panic, but they hang indefinitely, consuming no CPU.  Not sure if that's a bug in the tests or in Wasmtime; I haven't had a chance to study them yet.</p>",
        "id": 499838005,
        "sender_full_name": "Joel Dice",
        "timestamp": 1739570230
    },
    {
        "content": "<p>I general, I think we can be pretty aggressive about merging PRs for now and avoid long-lived branches.  We're going to split it all up again for upstreaming anyway; for now let's keep things simple.  Enabling CI as Victor suggested will help avoid stepping on each others' toes.</p>",
        "id": 499838569,
        "sender_full_name": "Joel Dice",
        "timestamp": 1739570433
    },
    {
        "content": "<p>Sounds good, I've rebased <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/1\">https://github.com/bytecodealliance/wasip3-prototyping/pull/1</a> on latest <code>main</code> and marked it ready for review.<br>\nUnfortunately, I was not able to enable all TCP tests yet, as it seems I'm hitting a deadlock with stream I/O, the host never receives the data that the guest sends. I'll file an issue later today</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/1\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6a4a7d9a2bf49f0bfc80a126e84780bd5fff7334/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323232336165346361343531663938343532383264643061323836653034656361366563613366666135356635303739363936623733626366613734636134652f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f31&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/1\" title=\"implement wasip3 interfaces by rvolosatovs Â· Pull Request #1 Â· bytecodealliance/wasip3-prototyping\">implement wasip3 interfaces by rvolosatovs Â· Pull Request #1 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Refs WebAssembly/wasi-cli#52\nRefs bytecodealliance/wasmtime#10063\nRefs bytecodealliance/wasmtime#10061\nRefs bytecodealliance/wasmtime#10073\nThis currently contains fully implemented and tested wasi...</div></div></div>",
        "id": 500644572,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1739970074
    },
    {
        "content": "<p>Yeah, that deadlock sounds like the hang I saw last week.  I can look into that today.  If you can minimize the test case that reproduces it at all, that would definitely help.</p>",
        "id": 500662677,
        "sender_full_name": "Joel Dice",
        "timestamp": 1739974997
    },
    {
        "content": "<p>I tracked it down to these two:<br>\nguest: <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/33263c939f09ec0c68d200b7b8048441812657d4/crates/test-programs/src/bin/sockets_0_3_tcp_bind.rs#L71\">https://github.com/bytecodealliance/wasip3-prototyping/blob/33263c939f09ec0c68d200b7b8048441812657d4/crates/test-programs/src/bin/sockets_0_3_tcp_bind.rs#L71</a><br>\nhost: <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/33263c939f09ec0c68d200b7b8048441812657d4/crates/wasi/src/p3/sockets/host/types/tcp.rs#L435\">https://github.com/bytecodealliance/wasip3-prototyping/blob/33263c939f09ec0c68d200b7b8048441812657d4/crates/wasi/src/p3/sockets/host/types/tcp.rs#L435</a></p>\n<p>Neither of these calls ever resolve, as if the futures are not polled<br>\nI'm using the <code>Promise::into_future</code> in the host, which seems to be the right thing to do according to the docs, I have not tried it with <code>Promise::get</code></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/33263c939f09ec0c68d200b7b8048441812657d4/crates/test-programs/src/bin/sockets_0_3_tcp_bind.rs#L71\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b30959e27efc3f7f6b3c48d0e56a4e8d7ee7be1a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643038633233333734353937333631303039326431613761313431643934353136383036323233373335616165663263316233383738316633303866366633652f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/33263c939f09ec0c68d200b7b8048441812657d4/crates/test-programs/src/bin/sockets_0_3_tcp_bind.rs#L71\" title=\"wasip3-prototyping/crates/test-programs/src/bin/sockets_0_3_tcp_bind.rs at 33263c939f09ec0c68d200b7b8048441812657d4 Â· bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/test-programs/src/bin/sockets_0_3_tcp_bind.rs at 33263c939f09ec0c68d200b7b8048441812657d4 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/33263c939f09ec0c68d200b7b8048441812657d4/crates/wasi/src/p3/sockets/host/types/tcp.rs#L435\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b30959e27efc3f7f6b3c48d0e56a4e8d7ee7be1a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643038633233333734353937333631303039326431613761313431643934353136383036323233373335616165663263316233383738316633303866366633652f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/33263c939f09ec0c68d200b7b8048441812657d4/crates/wasi/src/p3/sockets/host/types/tcp.rs#L435\" title=\"wasip3-prototyping/crates/wasi/src/p3/sockets/host/types/tcp.rs at 33263c939f09ec0c68d200b7b8048441812657d4 Â· bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/wasi/src/p3/sockets/host/types/tcp.rs at 33263c939f09ec0c68d200b7b8048441812657d4 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div>",
        "id": 500677247,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1739978775
    },
    {
        "content": "<p>Yeah, <code>Promise::into_future</code> is the only one that makes sense in this context.  I'll take a look.</p>",
        "id": 500677455,
        "sender_full_name": "Joel Dice",
        "timestamp": 1739978823
    },
    {
        "content": "<p>Based on <code>println</code> debugging the guest is not even reaching the line you linked to.  Since the guest has lowered the<code>tcp-socket.send</code> import synchronously, and the implementation is trying to read the entire <code>stream&lt;u8&gt;</code> before returning, there's no way it will ever return; the guest is blocked on that call and will never write anything to the stream.</p>\n<p>I think you'll want to lower the <code>tcp-socket.send</code> import asynchronously and <code>await</code> it concurrently with a future that feeds the write end of the stream (e.g. using <a href=\"https://docs.rs/futures/latest/futures/future/fn.join.html\">join</a> or <a href=\"https://docs.rs/futures/latest/futures/prelude/stream/struct.FuturesUnordered.html\">FuturesUnordered</a>).  Happy to pair on this when you're available.</p>",
        "id": 500718288,
        "sender_full_name": "Joel Dice",
        "timestamp": 1739990437
    },
    {
        "content": "<p>Right, yeah, that makes sense, thanks!</p>",
        "id": 500731701,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1739995144
    },
    {
        "content": "<p>I'll push a fix later tonight if I'll get a chance, tomorrow otherwise</p>",
        "id": 500731804,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1739995193
    },
    {
        "content": "<p>had a few minutes to try it out <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/17\">https://github.com/bytecodealliance/wasip3-prototyping/pull/17</a>, will need to figure out a way to properly adapt the wasip2 test expectations regarding the behavior, but looks like it works. <code>tcp_streams</code> still hangs, but that's likely due to some write handle not being dropped. Will continue tomorrow.<br>\nThanks for taking a look, looks like we'll be able to have the complete TCP test suite working tomorrow</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/17\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/007976ad38654d8545c67663ca982c3a8dc9c23e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363737633832303735363337323364316561376165613139393930316333383035313032323439623566626232343939376163663936623631383266333735652f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3137&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/17\" title=\"test(tcp): avoid guest deadlock by rvolosatovs Â· Pull Request #17 Â· bytecodealliance/wasip3-prototyping\">test(tcp): avoid guest deadlock by rvolosatovs Â· Pull Request #17 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">We read every piece of feedback, and take your input very seriously.</div></div></div>",
        "id": 500740422,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1739998403
    },
    {
        "content": "<p>Interesting, looks like I found another issue - the <code>BackgroundTask</code> is not awoken by the executor after returning <code>Poll::Pending</code>.<br>\nI think it would be beneficial to pair later today!</p>",
        "id": 500853030,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740050142
    },
    {
        "content": "<p>if this is the waker used to poll these tasks, it would explain what I'm seeing: <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/f5fefc6f4e63b311850421c75d5cdb2e96784a7c/crates/wasmtime/src/runtime/component/concurrent.rs#L1459-L1469\">https://github.com/bytecodealliance/wasip3-prototyping/blob/f5fefc6f4e63b311850421c75d5cdb2e96784a7c/crates/wasmtime/src/runtime/component/concurrent.rs#L1459-L1469</a><br>\n<a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/f5fefc6f4e63b311850421c75d5cdb2e96784a7c/crates/wasmtime/src/runtime/component/concurrent.rs#L1561\">https://github.com/bytecodealliance/wasip3-prototyping/blob/f5fefc6f4e63b311850421c75d5cdb2e96784a7c/crates/wasmtime/src/runtime/component/concurrent.rs#L1561</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/f5fefc6f4e63b311850421c75d5cdb2e96784a7c/crates/wasmtime/src/runtime/component/concurrent.rs#L1459-L1469\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c524f94dc469faed71272cde888cec6889e2bd75/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646263653665663334623134313631626333666632356165363038633732306166616339353065323331303431333732346466663739313265643266663064332f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/f5fefc6f4e63b311850421c75d5cdb2e96784a7c/crates/wasmtime/src/runtime/component/concurrent.rs#L1459-L1469\" title=\"wasip3-prototyping/crates/wasmtime/src/runtime/component/concurrent.rs at f5fefc6f4e63b311850421c75d5cdb2e96784a7c Â· bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/wasmtime/src/runtime/component/concurrent.rs at f5fefc6f4e63b311850421c75d5cdb2e96784a7c Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/f5fefc6f4e63b311850421c75d5cdb2e96784a7c/crates/wasmtime/src/runtime/component/concurrent.rs#L1561\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c524f94dc469faed71272cde888cec6889e2bd75/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646263653665663334623134313631626333666632356165363038633732306166616339353065323331303431333732346466663739313265643266663064332f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/f5fefc6f4e63b311850421c75d5cdb2e96784a7c/crates/wasmtime/src/runtime/component/concurrent.rs#L1561\" title=\"wasip3-prototyping/crates/wasmtime/src/runtime/component/concurrent.rs at f5fefc6f4e63b311850421c75d5cdb2e96784a7c Â· bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/wasmtime/src/runtime/component/concurrent.rs at f5fefc6f4e63b311850421c75d5cdb2e96784a7c Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div>",
        "id": 500853567,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740050329
    },
    {
        "content": "<p>specifically, this future never gets polled again after returning <code>Poll::Pending</code>, even though <code>oneshot::Receiver</code> poll should have registered the wakup event once the <code>oneshot::Sender</code> is dropped (I have verified that it indeed gets dropped) <a href=\"https://docs.rs/tokio/latest/tokio/sync/oneshot/struct.Receiver.html\">https://docs.rs/tokio/latest/tokio/sync/oneshot/struct.Receiver.html</a></p>\n<p><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/f5fefc6f4e63b311850421c75d5cdb2e96784a7c/crates/wasi/src/p3/sockets/host/types/tcp.rs#L121-L125\">https://github.com/bytecodealliance/wasip3-prototyping/blob/f5fefc6f4e63b311850421c75d5cdb2e96784a7c/crates/wasi/src/p3/sockets/host/types/tcp.rs#L121-L125</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/f5fefc6f4e63b311850421c75d5cdb2e96784a7c/crates/wasi/src/p3/sockets/host/types/tcp.rs#L121-L125\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c524f94dc469faed71272cde888cec6889e2bd75/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646263653665663334623134313631626333666632356165363038633732306166616339353065323331303431333732346466663739313265643266663064332f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/f5fefc6f4e63b311850421c75d5cdb2e96784a7c/crates/wasi/src/p3/sockets/host/types/tcp.rs#L121-L125\" title=\"wasip3-prototyping/crates/wasi/src/p3/sockets/host/types/tcp.rs at f5fefc6f4e63b311850421c75d5cdb2e96784a7c Â· bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/wasi/src/p3/sockets/host/types/tcp.rs at f5fefc6f4e63b311850421c75d5cdb2e96784a7c Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div>",
        "id": 500854249,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740050539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> <code>dummy_waker</code> is only used in <code>first_poll</code> and <code>poll_and_block</code>, and those are only used for guest-&gt;host calls in <code>host.rs</code>, meaning <code>dummy_waker</code> should never be used for <code>spawn</code>ed tasks.  Instead, <code>spawn</code>ed tasks are pushed directly to <code>ConcurentState::futures</code>, and that is always polled with the <code>Context</code> received from the embedder's executor (i.e. Tokio in this case).</p>\n<p>My guess is that we're not polling <code>ConcurrentState::futures</code> between when <code>spawn</code> is called and when we suspend the fiber and return control to the executor, i.e. the <code>spawn</code>ed future is not being polled at all.  Or have you already verified that it's being polled at least once?</p>\n<p>Happy to pair today when you're available.  Meanwhile, I'll take a closer look.</p>",
        "id": 500896598,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740062666
    },
    {
        "content": "<p>It gets polled once for sure. I'll be available in a few minutes, we could jump on a call if you're free</p>",
        "id": 500900367,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740063583
    },
    {
        "content": "<p><a href=\"https://meet.google.com/sta-snii-ffj\">https://meet.google.com/sta-snii-ffj</a></p>",
        "id": 500902041,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740063994
    },
    {
        "content": "<p>Ok, after looking at the code, I think you're right that the issue is related to the guest synchronously dropping the listening tcp socket, which in the host drops the <code>oneshot::Sender</code>, but the guest code keeps running after the drop call returns, <em>before</em> the host has a chance to poll <code>ConcurrentState::futures</code> again.</p>",
        "id": 500911519,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740066399
    },
    {
        "content": "<p>So we get the trap because the guest tries to bind again before the old socket has really stopped listening.</p>",
        "id": 500911701,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740066451
    },
    {
        "content": "<p>I'm wondering if there's a way we can make <code>HostTcpSocket::drop</code> finish everything it needs to do (including waiting for the spawned future to complete) before returning.</p>",
        "id": 500912059,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740066539
    },
    {
        "content": "<p>It's like the spawned future needs to send a confirmation back to <code>HostTcpSocket::drop</code> indicating it's done.</p>",
        "id": 500912386,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740066610
    },
    {
        "content": "<p>For my understanding then, are you saying the observed behavior is a race condition effectively?</p>",
        "id": 500912502,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740066636
    },
    {
        "content": "<p>Would the future <em>eventually</em> get polled on it's own or it does require something to trigger the poll?</p>",
        "id": 500912626,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740066675
    },
    {
        "content": "<p>Kind of, except that it's 100% deterministic.</p>",
        "id": 500912629,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740066675
    },
    {
        "content": "<p>yes, I think the future would be polled if the guest were to yield between the drop and the bind</p>",
        "id": 500912710,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740066695
    },
    {
        "content": "<p>Want to jump back on the call to chat for a bit?</p>",
        "id": 500912851,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740066724
    },
    {
        "content": "<p>or if (like I was saying), the host drop implementation were to wait for confirmation before returning</p>",
        "id": 500912857,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740066726
    },
    {
        "content": "<p>yup</p>",
        "id": 500912872,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740066729
    },
    {
        "content": "<p><a href=\"https://meet.google.com/sta-snii-ffj\">https://meet.google.com/sta-snii-ffj</a></p>",
        "id": 500912972,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740066762
    },
    {
        "content": "<p>actually, following-up to our discussion just now, I might try <em>taking</em> the task out from the drop directly, by wrapping the <code>ListenTask</code> itself</p>\n<p>It does seem like a generally useful pattern, but I'm not actually sure if the abort handle should be responsibility of the runtime if we can figure that out by wrapping the task directly</p>",
        "id": 500917245,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740067825
    },
    {
        "content": "<p>Makes sense; want to try that before I start messing with the runtime code?</p>",
        "id": 500917442,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740067874
    },
    {
        "content": "<p>sounds good, let me try a few things!</p>",
        "id": 500917708,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740067938
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">p3</span><span class=\"o\">/</span><span class=\"n\">sockets</span><span class=\"o\">/</span><span class=\"n\">host</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"o\">/</span><span class=\"n\">tcp</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">p3</span><span class=\"o\">/</span><span class=\"n\">sockets</span><span class=\"o\">/</span><span class=\"n\">host</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"o\">/</span><span class=\"n\">tcp</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">d2b43129b</span><span class=\"o\">..</span><span class=\"n\">db000c471</span><span class=\"w\"> </span><span class=\"mi\">100644</span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">p3</span><span class=\"o\">/</span><span class=\"n\">sockets</span><span class=\"o\">/</span><span class=\"n\">host</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"o\">/</span><span class=\"n\">tcp</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">p3</span><span class=\"o\">/</span><span class=\"n\">sockets</span><span class=\"o\">/</span><span class=\"n\">host</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"o\">/</span><span class=\"n\">tcp</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">net</span><span class=\"p\">::</span><span class=\"n\">SocketAddr</span><span class=\"p\">;</span>\n<span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">pin</span><span class=\"p\">::{</span><span class=\"n\">pin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Pin</span><span class=\"p\">};</span>\n<span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">task</span><span class=\"p\">::</span><span class=\"n\">Poll</span><span class=\"p\">;</span>\n\n<span class=\"o\">-</span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">net</span><span class=\"p\">::</span><span class=\"n\">Shutdown</span><span class=\"p\">;</span>\n<span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">sync</span><span class=\"p\">::</span><span class=\"n\">Arc</span><span class=\"p\">;</span>\n<span class=\"o\">+</span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::{</span><span class=\"n\">net</span><span class=\"p\">::</span><span class=\"n\">Shutdown</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"p\">::</span><span class=\"n\">fd</span><span class=\"p\">::</span><span class=\"n\">AsRawFd</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">};</span>\n\n<span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"p\">::{</span><span class=\"n\">ensure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">};</span>\n<span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">io_lifetimes</span><span class=\"p\">::</span><span class=\"n\">AsSocketlike</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">769</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">769</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">where</span>\n<span class=\"w\">             </span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">rep</span><span class=\"p\">)</span>\n<span class=\"w\">             </span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s\">\"failed to delete socket resource from table\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">         </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">sock</span><span class=\"p\">.</span><span class=\"n\">tcp_state</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">-</span><span class=\"w\">            </span><span class=\"n\">TcpState</span><span class=\"p\">::</span><span class=\"n\">Listening</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">abort</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"n\">TcpState</span><span class=\"p\">::</span><span class=\"n\">Listening</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">abort</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">listener</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">+</span><span class=\"w\">                </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">libc</span><span class=\"p\">::</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">listener</span><span class=\"p\">.</span><span class=\"n\">as_raw_fd</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">                 </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"DROP LISTENER\"</span><span class=\"p\">);</span>\n<span class=\"w\">                 </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">abort</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">(());</span>\n<span class=\"w\">                 </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n</code></pre></div>\n<p>just as a very quick PoC, since I did not really find a nice way to close the listener yet, this seems to have fixed the issue.</p>\n<p>Of course, I got</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">fatal</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">IO</span><span class=\"w\"> </span><span class=\"n\">Safety</span><span class=\"w\"> </span><span class=\"n\">violation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">owned</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">descriptor</span><span class=\"w\"> </span><span class=\"n\">already</span><span class=\"w\"> </span><span class=\"n\">closed</span>\n</code></pre></div>\n<p>but I guess that's expected :D</p>\n<p>I tried also wrapping the listener in an <code>Option&lt;std::sync::Mutex&lt;TcpListener&gt;&gt;</code>, but that got pretty awkward pretty quick although it potentially can work as well</p>",
        "id": 500923337,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740069438
    },
    {
        "content": "<p>Yeah, I figured we'd need to use a <code>Mutex</code> somewhere given that the futures need to be <code>Send + Sync</code></p>",
        "id": 500923606,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740069511
    },
    {
        "content": "<p>ah, actually, we could also use <code>tokio::spawn</code> directly and communicate with the <code>BackgroundTask</code> via a channel</p>",
        "id": 500923813,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740069578
    },
    {
        "content": "<p>that way the <code>drop</code> can just use tokio task machinery directly</p>",
        "id": 500923859,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740069595
    },
    {
        "content": "<p>yeah, I could see that working</p>",
        "id": 500923934,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740069604
    },
    {
        "content": "<p>hmm, it mostly works, hitting some non-determinism, want to take a look?</p>",
        "id": 500929944,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740071235
    },
    {
        "content": "<p>sure, same google meet link?</p>",
        "id": 500930044,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740071256
    },
    {
        "content": "<p>yes, will be there in a sec</p>",
        "id": 500930273,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740071314
    },
    {
        "content": "<p>you people are rocking</p>",
        "id": 500934699,
        "sender_full_name": "Ralph",
        "timestamp": 1740072670
    },
    {
        "content": "<p>took me 3 different channels of 3 different types to get there, but got <code>tcp_bind</code> test consistently working <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/17\">https://github.com/bytecodealliance/wasip3-prototyping/pull/17</a> <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/17\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/aa24468fabcaf1a4d4edc0b23ea5d5255f2c82d3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633063613434383430653532326162616462353932303031633630333164353161323861633832353033386262616434313438363835386164373639373265632f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3137&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/17\" title=\"fix: ensure TCP listener is closed on drop, reenable `tcp_bind` test by rvolosatovs Â· Pull Request #17 Â· bytecodealliance/wasip3-prototyping\">fix: ensure TCP listener is closed on drop, reenable `tcp_bind` test by rvolosatovs Â· Pull Request #17 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">move TCP listener into a separate Tokio task and add state synchronisation to ensure it&#39;s dropped before TcpSocket::drop returns. We should be able to simplify this once tasks spawned via Acces...</div></div></div>",
        "id": 500943468,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740075730
    },
    {
        "content": "<p>Yikes, that <code>drop</code> implementation is complicated.  This should make it a lot simpler:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Spawned</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">Mutex</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"o\">&gt;&gt;&gt;&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"sd\">/// Handle to a spawned task which may be used to abort it.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">SpawnHandle</span><span class=\"p\">(</span><span class=\"n\">Spawned</span><span class=\"p\">);</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">SpawnHandle</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Abort the task.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">abort</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Return an [`AbortOnDropHandle`] which, when dropped, will abort the</span>\n<span class=\"w\">    </span><span class=\"sd\">/// task.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">abort_handle</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">AbortOnDropHandle</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">AbortOnDropHandle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">clone</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"sd\">/// Handle to a spawned task which will abort the task when dropped.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">AbortOnDropHandle</span><span class=\"p\">(</span><span class=\"n\">Spawned</span><span class=\"p\">);</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AbortOnDropHandle</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 500943947,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740075907
    },
    {
        "content": "<p>I should have a PR up by the end of the day.</p>",
        "id": 500944016,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740075933
    },
    {
        "content": "<p>Actually, the <code>SpawnHandle</code>/<code>AbortOnDropHandle</code> stuff is a bit trickier than I realized.  I need to not just clear the <code>Option</code> but also wake the waker (i.e. the <code>FuturesUnordered</code> waker, in this case) so it knows to poll the wrapper future one last time and remove it from the set.  Otherwise the wrapper future will be stuck in the <code>FuturesUnordered</code> forever.</p>",
        "id": 500946920,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740076967
    },
    {
        "content": "<p>It's doable, just need to spend some more time on it.</p>",
        "id": 500946997,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740076997
    },
    {
        "content": "<p>Got all TCP tests working <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/20\">https://github.com/bytecodealliance/wasip3-prototyping/pull/20</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/20\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9862c164bef1c70b07ab188db856ef5901a39773/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396439383863653233333565326234366630646639373766623362636663613464393737623938636137643934346538303333646235646635303739633365382f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3230&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/20\" title=\"wasip3 TCP implementation by rvolosatovs Â· Pull Request #20 Â· bytecodealliance/wasip3-prototyping\">wasip3 TCP implementation by rvolosatovs Â· Pull Request #20 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">This is a follow-up on #1 and #17 , which ensures the wasi:sockets TCP implementation is complete and fully tested using the adapted wasip2 test suite.\nThere&#39;s only one item I left a TODO about...</div></div></div>",
        "id": 501096411,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740141832
    },
    {
        "content": "<p>you people POUNDING!</p>",
        "id": 501100613,
        "sender_full_name": "Ralph",
        "timestamp": 1740143117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> there's a merge conflict in <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/18\">https://github.com/bytecodealliance/wasip3-prototyping/pull/18</a> currently, however <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/20\">https://github.com/bytecodealliance/wasip3-prototyping/pull/20</a> can be merged cleanly and it increases test coverage.<br>\nHow about we merge <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/20\">https://github.com/bytecodealliance/wasip3-prototyping/pull/20</a> now and I rebase <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/18\">https://github.com/bytecodealliance/wasip3-prototyping/pull/18</a> on the resulting <code>main</code>?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/18\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8e1882e2b9dd056296321ca10dbff70acab790c3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353238303936363332613832346633386262313766323031653066646131333662623230336539316139343032333333333463373336353533656130653066632f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3138&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/18\" title=\"refactor `concurrent_imports` support in `wasmtime-wit-bindgen` by dicej Â· Pull Request #18 Â· bytecodealliance/wasip3-prototyping\">refactor `concurrent_imports` support in `wasmtime-wit-bindgen` by dicej Â· Pull Request #18 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">This is yet another major rework of concurrent_imports; this time, the goal is to support add_to_linker_get_host properly such that input and output types of the host_getter param need not be the s...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/20\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9862c164bef1c70b07ab188db856ef5901a39773/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396439383863653233333565326234366630646639373766623362636663613464393737623938636137643934346538303333646235646635303739633365382f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3230&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/20\" title=\"wasip3 TCP implementation by rvolosatovs Â· Pull Request #20 Â· bytecodealliance/wasip3-prototyping\">wasip3 TCP implementation by rvolosatovs Â· Pull Request #20 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">This is a follow-up on #1 and #17 , which ensures the wasi:sockets TCP implementation is complete and fully tested using the adapted wasip2 test suite.\nThere&#39;s only one item I left a TODO about...</div></div></div>",
        "id": 501131280,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740152085
    },
    {
        "content": "<p>pushed a rebased version to <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/tree/dicej/another-bindgen-refactor-rebase\">https://github.com/bytecodealliance/wasip3-prototyping/tree/dicej/another-bindgen-refactor-rebase</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/tree/dicej/another-bindgen-refactor-rebase\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4394287b3444ef6d81160e74e4c925e28a2a3ca6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303864623364326361613839306139376366326634623362393532613035643735373032633637353732376161613134643433323339316262393830663262612f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/tree/dicej/another-bindgen-refactor-rebase\" title=\"GitHub - bytecodealliance/wasip3-prototyping at dicej/another-bindgen-refactor-rebase\">GitHub - bytecodealliance/wasip3-prototyping at dicej/another-bindgen-refactor-rebase</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - GitHub - bytecodealliance/wasip3-prototyping at dicej/another-bindge...</div></div></div>",
        "id": 501133992,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740152879
    },
    {
        "content": "<p>Yup, sounds good; I just merged #20</p>",
        "id": 501135237,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740153245
    },
    {
        "content": "<p>Awesome, should I push to your branch then?</p>",
        "id": 501135467,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740153319
    },
    {
        "content": "<p>Sure, thanks!</p>",
        "id": 501135538,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740153337
    },
    {
        "content": "<p>pushed. just a heads-up, I'm noticing some flakiness in <code>tcp_connect</code> test, let's see if switching to the new spawn functionality fixes that. Otherwise, we can ignore it for now</p>",
        "id": 501136304,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740153552
    },
    {
        "content": "<p>FYI, in the past when I've seen non-deterministic test behavior, I've been able to make it more consistent by adding/removing/adjusting <code>sleep</code> calls in host functions (e.g. artificially delaying tcp socket operations), so if we still see issues even with the new spawn feature, that might help with debugging.</p>",
        "id": 501136880,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740153714
    },
    {
        "content": "<p>I cancelled the CI run, if I'll manage to fix it, I'll push a fix within next 1.5h, otherwise I'll push an ignore for the flaky ones</p>",
        "id": 501138652,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740154254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> the fix for the race condition we discovered was fairly trivial <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/23\">https://github.com/bytecodealliance/wasip3-prototyping/pull/23</a><br>\nNote, that I cannot actually use the abort handle machinery out-of-the-box just yet due to the need of explicitly closing the stream write handle. Let's chat about it later today at the status update!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/23\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2d86c47e329eeb9bc591a9e29a7c6c2faf411de3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316461313163333936323565303331356439613639633433326634663839396236353065373933623031663633373237396432623937346533663933653434332f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3233&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/23\" title=\"fix: avoid race condition in TCP stream handling drop by rvolosatovs Â· Pull Request #23 Â· bytecodealliance/wasip3-prototyping\">fix: avoid race condition in TCP stream handling drop by rvolosatovs Â· Pull Request #23 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">On some occasions Notify::notified() might have been called after the Notify::notify_waiters call in the drop. Since Notify does not record the notification, the task was never receiving it.\nReceiv...</div></div></div>",
        "id": 501523653,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740398504
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> wanted to get your opinion on <a href=\"https://github.com/WebAssembly/wasi-http/pull/154\">https://github.com/WebAssembly/wasi-http/pull/154</a></p>\n<p>After talking with Joel at the P3 sync, we <em>want</em> to have <code>body.finish</code> not async (since it doesn't have to be, it's simply ferrying along the trailers), but right now creating a new future requires access to the store which currently is only doable from <code>async</code> functions.</p>\n<p>This somewhat inconvenient, but brought up the idea that the <em>lack</em> of trailers and trailers that <em>are present but empty</em> are different -- which means <code>option&lt;future&lt;trailers&gt;&gt;</code> might be a reasonable thing to put on the table. Right now, to make <code>future&lt;trailers&gt;</code> work, if there <em>are no</em> trailers, <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/16/files#diff-b468481a822742ff0042a838a1f52748bc5fd552c0d6d8699f2651c329ce64e3R207\">we create a new future to essentially and make sure to write nothing</a>. </p>\n<p>I think you were against <code>option&lt;future&lt;trailers&gt;&gt;</code>, am I remembering correctly?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/pull/154\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a842d1cd798a9d147b121ba4cb6fa875e645662e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663132643335623936383435636364323230626333663433373635353432356561323431353561356234663534646239623062396366616665636635373536382f576562417373656d626c792f776173692d687474702f70756c6c2f313534&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/pull/154\" title=\"feat: allow independent retrieval of trailers by vados-cosmonic Â· Pull Request #154 Â· WebAssembly/wasi-http\">feat: allow independent retrieval of trailers by vados-cosmonic Â· Pull Request #154 Â· WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">This commit changes wasi:http/types#body.finish to forward the optionally present trailers, rather than retrieve them with the possibility of generating an error along the way.\nWith this change, ca...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/16/files#diff-b468481a822742ff0042a838a1f52748bc5fd552c0d6d8699f2651c329ce64e3R207\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/bd0632c933ac849587b2546693ee76559eb5217c/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f3132333936383132373f733d34303026763d34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/16/files#diff-b468481a822742ff0042a838a1f52748bc5fd552c0d6d8699f2651c329ce64e3R207\" title=\"feat: update to independent trailer retrieval by vados-cosmonic Â· Pull Request #16 Â· bytecodealliance/wasip3-prototyping\">feat: update to independent trailer retrieval by vados-cosmonic Â· Pull Request #16 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">We read every piece of feedback, and take your input very seriously.</div></div></div>",
        "id": 501603066,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1740417547
    },
    {
        "content": "<p>To elaborate on what Victor said above: there's currently a limitation in <code>wasmtime-wit-bindgen</code>'s Component Model Async support such that sync functions can't create streams or futures, <em>but</em> that's a temporary limitation we plan to address soon, so no need to design around it.</p>",
        "id": 501609745,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740419163
    },
    {
        "content": "<p>thanks for the explanation, I'm fine with what you came up with</p>",
        "id": 501623356,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1740422980
    },
    {
        "content": "<p>Thanks! Just to make sure I fully understand -- are you going for creating the future here (no <code>option</code>, i.e. returning <code>future&lt;trailers&gt;</code> no matter what) or returning an <code>option&lt;future&lt;trailers&gt;&gt;</code>?</p>\n<p>If the former, a review on <a href=\"https://github.com/WebAssembly/wasi-http/pull/154\">https://github.com/WebAssembly/wasi-http/pull/154</a> would be appreciated! If the latter -- I'll get to making that change ASAP</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/pull/154\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a842d1cd798a9d147b121ba4cb6fa875e645662e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663132643335623936383435636364323230626333663433373635353432356561323431353561356234663534646239623062396366616665636635373536382f576562417373656d626c792f776173692d687474702f70756c6c2f313534&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/pull/154\" title=\"feat: allow independent retrieval of trailers by vados-cosmonic Â· Pull Request #154 Â· WebAssembly/wasi-http\">feat: allow independent retrieval of trailers by vados-cosmonic Â· Pull Request #154 Â· WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">This commit changes wasi:http/types#body.finish to forward the optionally present trailers, rather than retrieve them with the possibility of generating an error along the way.\nWith this change, ca...</div></div></div>",
        "id": 501635764,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1740426987
    },
    {
        "content": "<p>following the discussion from yesterday, I've replaced the Tokio task/channel magic by <code>AbortOnDropHandle</code> machinery in <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/32\">https://github.com/bytecodealliance/wasip3-prototyping/pull/32</a>, which does not rely on multi-threading anymore.<br>\nI think we need to talk a bit more about <code>send</code> and <code>connect</code>.<br>\ncc <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/32\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/285027a2ca24992f86b6e2996616e16d6cf52671/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366438373139346334663339616562663738323664306530613034316639643232326562633965363436346262633633646632613864353365343237633933332f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3332&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/32\" title=\"feat(sockets/tcp): switch to `AbortOnDropHandle` by rvolosatovs Â· Pull Request #32 Â· bytecodealliance/wasip3-prototyping\">feat(sockets/tcp): switch to `AbortOnDropHandle` by rvolosatovs Â· Pull Request #32 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Switch to AbortOnDropHandle introduced in #18\nThis simplifies the Drop logic and brings back single-threaded program support. I originally planned to introduce similar constructs for send and conne...</div></div></div>",
        "id": 501766228,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740480075
    },
    {
        "content": "<p>UDP implementation and tests: <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/33\">https://github.com/bytecodealliance/wasip3-prototyping/pull/33</a> - with this, we have latest wasip3 <code>wasi:sockets</code> draft fully implemented and tested using adapted wasip2 test suite. Will be starting with <code>wasi:filesystem</code> tomorrow.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/33\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0f71663ec24e2ae2f2b2bdd577938d669cab92bc/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353634646564613934643661373436393362633938623365373864626138383262373733646635343133323037336235333366636339353630376366393233352f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3333&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/33\" title=\"feat(sockets): implement UDP by rvolosatovs Â· Pull Request #33 Â· bytecodealliance/wasip3-prototyping\">feat(sockets): implement UDP by rvolosatovs Â· Pull Request #33 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fully implement UDP part of wasi:sockets\nFollow-up on #25</div></div></div>",
        "id": 501878764,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740506704
    },
    {
        "content": "<p>I got sidetracked yesterday fixing the soundness issue Alex raised in <code>wasmtime-wit-bindgen</code>'s <code>concurrent_imports</code> option, as well as restoring support for <code>&amp;mut T</code> forwarding <code>impl</code>s so we can generate <code>add_to_linker</code> functions again.  The good news is I got it working (should have a PR up today).  The bad news is I didn't work on anything else.  These are on my TODO list, though:</p>\n<ul>\n<li>Support creating streams and futures in sync host functions</li>\n<li>Support auto-closing <code>{Stream|Future}{Writer|Reader}</code> on drop</li>\n</ul>",
        "id": 501880177,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740507138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> when you switched to <code>AbortOnDropHandle</code>, how did you handle closing the <code>StreamWriter</code>?  Or is that still a TODO blocked on the \"auto-closing <code>{Stream|Future}{Writer|Reader}</code> on drop\" item I mentioned above?</p>",
        "id": 501881327,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740507533
    },
    {
        "content": "<p>I actually did not make any changes in that regard - there are two tasks, both spawned via the store. The tasks communicate over an mpsc.</p>\n<p>The producer side deals with all the OS-level stuff, I/O etc. , e.g. it owns the file descriptor (e.g. TCP stream) and it does not use the <code>Accessor</code> at all.<br>\nThe consumer side owns the StreamWriter and is responsible for closing it once mpsc is closed and/or an unrecoverable error is encountered.</p>\n<p>The abort handle of the producer task is stored as part of the resource state and so it's dropped once resource is dropped, triggering, e.g. close of a TCP stream FD.<br>\nThe consumer task will <em>eventually</em>(likely on next poll) find out that the producer is closed and close the StreamWriter</p>",
        "id": 501884589,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740508692
    },
    {
        "content": "<p>Ah, that makes sense -- thanks for the explanation.</p>",
        "id": 501884784,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740508754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"598440\">@Victor Adossi</span> I've been thinking some more about how to support creating futures and streams in sync host functions, and the easiest thing for the time being is to just tell <code>wasmtime-wit-bindgen</code> to generate an async function if it needs to create a future or stream (even if it doesn't need to <code>await</code>) -- which is exactly what <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/16\">Victor's PR</a> already does.  The guest can call that synchronously and everything will work as it should.</p>\n<p>Alex and I have ideas about making both the async and sync bindings more flexible and ergonomic in the future, but for the time being I think it's fine to tell the binding generator to generate an async function any time the implementation needs to <code>await</code> <em>or</em> create futures or streams.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/16\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f8508925fdc8aca91d3f8c9a3bef52d9a7c435de/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646231393736623838313961653233323861616538343433626164353934393362346630626233373032363265613331653566353165366331623232303763382f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3136&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/16\" title=\"feat: update to independent trailer retrieval by vados-cosmonic Â· Pull Request #16 Â· bytecodealliance/wasip3-prototyping\">feat: update to independent trailer retrieval by vados-cosmonic Â· Pull Request #16 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">We read every piece of feedback, and take your input very seriously.</div></div></div>",
        "id": 501927812,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740525346
    },
    {
        "content": "<p>Hello <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  this is probably a silly question but could someone explain what's the reason for changing the <code>cli/stdio</code> interface from:</p>\n<ul>\n<li><code>getStdout()-&gt;output-stream</code> and <code>getStderr()-&gt;output-stream</code> to</li>\n<li><code>setStdout(stream)</code> and <code>setStderr(stream)</code> ?</li>\n</ul>",
        "id": 502067157,
        "sender_full_name": "Tomasz Andrzejak",
        "timestamp": 1740581791
    },
    {
        "content": "<p>In the component model, the <code>stream</code> type always represents the readable end of a stream; there's no equivalent to <code>output-stream</code> for the writable end; which is to say that the component which creates a <code>stream</code> using <code>stream.new</code> can only give away the readable end and keep the writable end for itself.  So the only way to hook a <code>stream</code> up to stdout or stderr is to create that <code>stream</code> using <code>stream.new</code>, hold on to the writable end, and pass the readable end to e.g. <code>setStdout</code>.</p>",
        "id": 502068627,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740582105
    },
    {
        "content": "<p>The <code>setStdout</code>/<code>setStderr</code> API does raise an interesting question, though: If I compose two components and they both call <code>setStdout</code>, will one overwrite the other?  I.e. is only one of the components going to be able to write to stdout?</p>",
        "id": 502088511,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740586868
    },
    {
        "content": "<p>I imagine the host could maintain some kind of magic per-component state so that they don't overwrite each other, but I'm not sure that would be virtualizable by a guest component.</p>",
        "id": 502088933,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740586992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> following our earlier discussion: <a href=\"https://github.com/WebAssembly/wasi-sockets/pull/119\">https://github.com/WebAssembly/wasi-sockets/pull/119</a></p>\n<p>I'll also address the listen/receive stream <em>capturing</em> the lifetime of the socket resource later. (on that note, lazy question: does Rust guest <code>wit-bindgen</code> actually support this correctly, or does a returned stream capture the lifetime of the resource borrow the method was called on, in other words, are returned streams/futures <code>'static</code>?)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-sockets/pull/119\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9cfae482155008da73d928e19965ea737fba7379/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396662616337323962666331393864336434323933313631356665326234383132373461366437396563386332386165323138383561656237373034303333312f576562417373656d626c792f776173692d736f636b6574732f70756c6c2f313139&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-sockets/pull/119\" title=\"refactor(p3): clarify `tcp-socket.receive` semantics, unwrap `result` by rvolosatovs Â· Pull Request #119 Â· WebAssembly/wasi-sockets\">refactor(p3): clarify `tcp-socket.receive` semantics, unwrap `result` by rvolosatovs Â· Pull Request #119 Â· WebAssembly/wasi-sockets</a></div><div class=\"message_embed_description\">Futures can resolve to &quot;no value&quot; - use that property to simplify the signature and simply do not resolve to a result on success. As a side effect, this allows host implementations to fea...</div></div></div>",
        "id": 502090968,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740587460
    },
    {
        "content": "<p>I just opened an issue about the <code>set-stdout</code>/<code>set-stderr</code> question I raised above: <a href=\"https://github.com/WebAssembly/wasi-cli/issues/64\">https://github.com/WebAssembly/wasi-cli/issues/64</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-cli/issues/64\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4d32fecb79bb2d253d15c5813a63338220d15611/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313537373233373136386538303232306235313462346361656339393863323733346531653661376133383331356564633230316234653334666634303066662f576562417373656d626c792f776173692d636c692f6973737565732f3634&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-cli/issues/64\" title=\"[0.3.0-draft] Can calls to `set-stdout`/`set-stderr` overwrite each other? Â· Issue #64 Â· WebAssembly/wasi-cli\">[0.3.0-draft] Can calls to `set-stdout`/`set-stderr` overwrite each other? Â· Issue #64 Â· WebAssembly/wasi-cli</a></div><div class=\"message_embed_description\">In the 0.3.0-draft stdio.wit, the (currently undocumented) set-stdout and set-stderr functions raise the question of what happens when they are called more than once (either by the same component o...</div></div></div>",
        "id": 502091052,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740587484
    },
    {
        "content": "<p>Joel there's changes in wasm-tools now to update various intrinsics and line up with the spec, do you want to coordinate about landing this within wasmtime? I ask because jsturtevant is working on a bugfix at <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/2076\">wasm-tools#2076</a> which will unblock <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10249\">wasi-tls landing</a> (this is completely unrelated to async), but I bring this up as that'll require updating wasm-tools.</p>\n<p>The <a href=\"https://github.com/alexcrichton/wasmtime/commit/f472847a91363900f46150d29997be08993d2b12\">literal update</a> is pretty modest but I suspect the actual changes to trampolines/tests to be a bit more invasive. In particular core wasm signatures are changing and things like waitable sets now need to be both created and destroyed around usages too</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/2076\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a151136313eb4cb0fb596a771a372f79790fece2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653362303835646533633832623662316439333335666633643535303236633730346662303931303636333863386663653532656336323361313130643464322f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f32303736&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/2076\" title=\"fix mismatch in stability attributes error in wit-parser by jsturtevant Â· Pull Request #2076 Â· bytecodealliance/wasm-tools\">fix mismatch in stability attributes error in wit-parser by jsturtevant Â· Pull Request #2076 Â· bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">fixes: #1995\nWhen a new interface is marked as @unstable (feature = somefeaturegate) and it uses a stable type from another package via use package:interface/type.{name} the resulting package shoul...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/10249\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/84ff9b01c70b08ce1828e5946d58bec3d7a2ac5f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306131356631363362386265636136643931643661623237623562356365633737303566346131366236663530643266613263643464333031366335333163362f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3130323439&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/10249\" title=\"Initial implementation of Wasi-tls (Transport Layer Security)  by jsturtevant Â· Pull Request #10249 Â· bytecodealliance/wasmtime\">Initial implementation of Wasi-tls (Transport Layer Security)  by jsturtevant Â· Pull Request #10249 Â· bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">fixes: #10089\nThis adds a crate that provides the Wasmtime host implementation for the wasi-tls API.\nThe wasi-tls world allows WebAssembly modules to perform SSL/TLS operations,\nsuch as establishin...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/alexcrichton/wasmtime/commit/f472847a91363900f46150d29997be08993d2b12\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/930462ea44b45b0f5f219748e42c923d105636d7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613562303364396631336332306264633333646164636337316666613562643431383433343166383164376637616330363635393939623563386364346565372f616c65786372696368746f6e2f7761736d74696d652f636f6d6d69742f66343732383437613931333633393030663436313530643239393937626530383939336432623132&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/alexcrichton/wasmtime/commit/f472847a91363900f46150d29997be08993d2b12\" title=\"wip Â· alexcrichton/wasmtime@f472847\">wip Â· alexcrichton/wasmtime@f472847</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAsssembly, using Cranelift - wip Â· alexcrichton/wasmtime@f472847</div></div></div>",
        "id": 502150141,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740606361
    },
    {
        "content": "<p>Getting that upstream sounds fine to me and won't disrupt the WASIp3 work until we try to merge it into the <code>wasip3-prototyping</code> repo, but we don't need to do that right away.  So no need to delay the former, and I'm happy to help if anything comes up.</p>",
        "id": 502150392,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740606473
    },
    {
        "content": "<p>ok sounds good, I'll forge ahead when the update is necessary</p>",
        "id": 502150490,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740606506
    },
    {
        "content": "<p>although same question, but this time from wit-bindgen -- should I be careful about updating there or \"update at will\"?</p>",
        "id": 502150540,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740606528
    },
    {
        "content": "<p>I'd say update at will; we can delay updating the dep in the <code>wasip3-prototyping</code> repo as well.</p>",
        "id": 502150637,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740606586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/40\">https://github.com/bytecodealliance/wasip3-prototyping/pull/40</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/40\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/08b6fe73643553890845601bbe713ad6c9cb6c7f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386539663638383763333239633830636263653037326164636438366439383939643632336630656430363637653266363836666332633633363436376130382f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3430&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/40\" title=\"test: add a test for async export / async-as-sync import call by rvolosatovs Â· Pull Request #40 Â· bytecodealliance/wasip3-prototyping\">test: add a test for async export / async-as-sync import call by rvolosatovs Â· Pull Request #40 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">cc @dicej</div></div></div>",
        "id": 502335309,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740675866
    },
    {
        "content": "<blockquote>\n<p>test scenario::round_trip::async_round_trip_stackless_sync_import has been running for over 60 seconds</p>\n</blockquote>\n<p>looks like CI caught it as well</p>",
        "id": 502336533,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740676217
    },
    {
        "content": "<p>filed an issue <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/41\">https://github.com/bytecodealliance/wasip3-prototyping/issues/41</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/41\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b422405ffa219fe0912e4f406c61ea1d2e03e636/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376133613663656331373165363732383030353632346365353938663131373036313636356135366631646566363436353666313535386435303530306238332f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f6973737565732f3431&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/41\" title=\"Calling async host `concurrent_import` from a guest async export as sync deadlocks Â· Issue #41 Â· bytecodealliance/wasip3-prototyping\">Calling async host `concurrent_import` from a guest async export as sync deadlocks Â· Issue #41 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Currently, calling a host export implemented as async using concurrent_import as a sync import from an async export in the guest causes a deadlock. See #40 for a test case with a repro</div></div></div>",
        "id": 502337267,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740676453
    },
    {
        "content": "<p>question on CI: there's a copy of <code>main.yml</code> but trimmed down -- is this because when I originally made the repo I disabled <code>main.yml</code> (named \"CI\") and it was thought we needed to copy that to get something running?</p>",
        "id": 502376383,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740690115
    },
    {
        "content": "<p>I'm discovering in <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/43\">https://github.com/bytecodealliance/wasip3-prototyping/pull/43</a> that there's some sort of mixture or something going on where CI isn't actually running right now</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/43\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/cb778899897cf204e307bcdc511ecb4af4da0777/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336530376332393862336433393462663462363033376462363036396363343266343336383063363761346265376262643965656430393237383336616336392f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3433&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/43\" title=\"Merge remote-tracking branch 'upstream/main'  by alexcrichton Â· Pull Request #43 Â· bytecodealliance/wasip3-prototyping\">Merge remote-tracking branch 'upstream/main'  by alexcrichton Â· Pull Request #43 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">This is an attempt at merging the upstream repo back into this repo to bring everything up-to-date.</div></div></div>",
        "id": 502376527,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740690161
    },
    {
        "content": "<p>Probably.  In any case we're using wasip3-prototyping.yml (which we copied and modified) for PRs</p>",
        "id": 502376537,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740690166
    },
    {
        "content": "<p>or rather some jobs aren't running</p>",
        "id": 502376547,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740690172
    },
    {
        "content": "<p>is the goal to basically match the wasmtime repo?</p>",
        "id": 502376552,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740690177
    },
    {
        "content": "<p>if so I can set that up</p>",
        "id": 502376591,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740690191
    },
    {
        "content": "<p>(merge queues and all)</p>",
        "id": 502376600,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740690195
    },
    {
        "content": "<p>kind of, except we're skipping <code>cargo vet</code> for now</p>",
        "id": 502376625,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740690207
    },
    {
        "content": "<p>just vet? anything else?</p>",
        "id": 502376661,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740690219
    },
    {
        "content": "<p>That would be awesome -- I set up the copy there to mostly do the same thing as main but hopefully run slightly faster without tests that we wouldn't impact</p>",
        "id": 502376662,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1740690221
    },
    {
        "content": "<p>and I think we added another test job for async specifically</p>",
        "id": 502376669,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740690223
    },
    {
        "content": "<p>the async tests aren't run otherwise?</p>",
        "id": 502376701,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740690234
    },
    {
        "content": "<p>maybe not?  I haven't looked closely <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 502376793,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740690255
    },
    {
        "content": "<p>Yep, and another job for async specifically, mostly for visibility, the original goal was to <em>only</em> run those but figured there could be downstream effects</p>",
        "id": 502376819,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1740690268
    },
    {
        "content": "<p>ok I'll work to try to figure out what's going on and see if changes are necessary</p>",
        "id": 502376909,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740690302
    },
    {
        "content": "<p>the async tests are under <code>misc</code> I'm not  sure if that's covered under test by default but entirely could be!</p>",
        "id": 502376954,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1740690319
    },
    {
        "content": "<p>Yup happy with any changes there -- having merge queues and any tests that are necessary re-enabled would be nice</p>",
        "id": 502377051,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1740690356
    },
    {
        "content": "<p>To be clear, the extra job Victor added runs <code>cargo test -p component-async-tests</code>, but there are other async-related tests elsewhere (e.g. bindgen and WA(S)T tests)</p>",
        "id": 502377200,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740690408
    },
    {
        "content": "<p>I would <em>expect</em> <code>cargo test --all</code> to run the <code>component-async-tests</code>, but maybe it wasn't for some reason?</p>",
        "id": 502377316,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740690454
    },
    {
        "content": "<p>I don't even know if CI runs <code>cargo test --all</code></p>",
        "id": 502377350,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740690471
    },
    {
        "content": "<p>Ah it does by default, <code>run-tests.sh</code> uses <code>--workspace</code>, wasn't necessary for me to use <code>-p component-async-tests</code> by default, but did like having it broken out like fiber. Certainly happy with having it all get back to a state more similar to upstream</p>",
        "id": 502377801,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1740690668
    },
    {
        "content": "<p>ok in <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/43\">the main merge</a> I'm deleting wasip3-prototyping.yml, I disabled <code>cargo vet</code> for anything outside of bytecodealliance/wasmtime (I'll land that upstream)  and I'll work through the remaining failures</p>\n<p>I'll have a follow-up which splits out the component-async-tests package to its own CI bucket which should still run on PRs by default. </p>\n<p>I'm also enabling the merge queue. For now it's set as \"merge &amp; commit\" as the strategy, but I'm only going to leave that for this one PR. The merge strategy is defined at the repo level, not the PR level, so my plan is to change that to \"squash &amp; merge\" like wasmtime has after this merge lands</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/43\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/cb778899897cf204e307bcdc511ecb4af4da0777/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336530376332393862336433393462663462363033376462363036396363343266343336383063363761346265376262643965656430393237383336616336392f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3433&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/43\" title=\"Merge remote-tracking branch 'upstream/main'  by alexcrichton Â· Pull Request #43 Â· bytecodealliance/wasip3-prototyping\">Merge remote-tracking branch 'upstream/main'  by alexcrichton Â· Pull Request #43 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">This is an attempt at merging the upstream repo back into this repo to bring everything up-to-date.</div></div></div>",
        "id": 502381036,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740692072
    },
    {
        "content": "<p>Squash &amp; merge would complicate the eventual upstream contribution - I've set the strategy to \"rebase\" to allow for cherry-picking commits later</p>\n<p>If others prefer squashes - that's fine, but I'd like to be able to keep merging my WASI PRs with rebase</p>",
        "id": 502418371,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740694408
    },
    {
        "content": "<p>oh sure I can leave that turned on yeah</p>",
        "id": 502420375,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740694480
    },
    {
        "content": "<p>it'll mostly just be annoying that if a merge from upstream back to wasip3 happens we'll have to update merge queue settings around that</p>",
        "id": 502421075,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740694507
    },
    {
        "content": "<p>Giving it a bit more thought, I don't think I actually mind squash merges at this point, my upcoming PRs should be rather small/well-scoped, so rebase or squash should not really matter any more, the \"incremental\" commits I cared about are already in <code>main</code></p>",
        "id": 502442805,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740695384
    },
    {
        "content": "<p>ok set to squash + merge and the next PR should go through smoothly in theory</p>",
        "id": 502446929,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740695549
    },
    {
        "content": "<p>Looks like CI is broken <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/actions/runs/13586320199/job/37982051541\">https://github.com/bytecodealliance/wasip3-prototyping/actions/runs/13586320199/job/37982051541</a></p>\n<p>This occurred twice trying to merge <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/46\">https://github.com/bytecodealliance/wasip3-prototyping/pull/46</a></p>\n<p>I'll go ahead and merge manually on CLI</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/actions/runs/13586320199/job/37982051541\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/54a14a4191dc49cae1815a659f0380d1371c5f32/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383739626133363964663837363435333832656533663335323135353534373162653036363930656231663862396665313261663535646432313031636635632f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/actions/runs/13586320199/job/37982051541\" title=\"CI Â· bytecodealliance/wasip3-prototyping@a43a8ba\">CI Â· bytecodealliance/wasip3-prototyping@a43a8ba</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - CI Â· bytecodealliance/wasip3-prototyping@a43a8ba</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/46\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/37707b874bcafa8816dcd7eae39afc9c0232f65b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306631323032643166313739316132326366633861353830643831626462373431393262313062626339663932373036306530306334383765633364653834632f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3436&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/46\" title=\"report whether read end was closed on write to stream/future by dicej Â· Pull Request #46 Â· bytecodealliance/wasip3-prototyping\">report whether read end was closed on write to stream/future by dicej Â· Pull Request #46 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">This changes the return types of {Future|Stream}Writer::write to report whether the read end was closed before all values were delivered.  In the case of StreamWriter, it also auto-closes the write...</div></div></div>",
        "id": 502546631,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740739217
    },
    {
        "content": "<p><code>wasi:filesystem</code> <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/38\">https://github.com/bytecodealliance/wasip3-prototyping/pull/38</a></p>\n<p>going to investigate the flaky UDP test and start <code>wasi:cli</code> implementation</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/38\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3f3a834f151ee67221b64f776ef11e1a7d97ac12/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336536326261363862353864396532623366343130353937646361343663373365653532666537626431316532386336343230393232383566653535386630632f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3338&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/38\" title=\"feat: implement `wasi:filesystem` by rvolosatovs Â· Pull Request #38 Â· bytecodealliance/wasip3-prototyping\">feat: implement `wasi:filesystem` by rvolosatovs Â· Pull Request #38 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">wasi:filesystem implementation.\nThe preview2 filesystem-specific test suite seems to be pretty minimal - it includes only 1 test - it appears that most of FS oppperations are tested as part of cli ...</div></div></div>",
        "id": 502572521,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740747545
    },
    {
        "content": "<p>ci should hopefully be fixed <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/48\">here</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/48\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8092db9e195a17608294a2248eb4c600920de65a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616639623039313639323236633162623930396361626662616536643830323963303365663166326333663338386435313664393161333964333238316164362f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3438&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/48\" title=\"Add a missing `apt-get update` before install by alexcrichton Â· Pull Request #48 Â· bytecodealliance/wasip3-prototyping\">Add a missing `apt-get update` before install by alexcrichton Â· Pull Request #48 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">I always forget this and it always bites us within a few months. Alas.</div></div></div>",
        "id": 502605596,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740756814
    },
    {
        "content": "<p>awesome, thanks <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> !</p>",
        "id": 502605858,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740756899
    },
    {
        "content": "<p>Heads up that I had a flash of inspiration last night regarding improving the<code>{Stream|Future}{Writer|Reader}</code> host API ergonomics, and the implementation is looking good so far; aiming to have PR up by EOD.  In short, you'll be able to read, write, and close either end of a stream or future without needing a <code>StoreContextMut</code>.  Ideally you wouldn't need one for <em>creating</em> streams or futures either, but that's going to be more difficult to achieve, so I'm punting on that for now.</p>",
        "id": 502640540,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740767144
    },
    {
        "content": "<p>Here's the PR: <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/50\">https://github.com/bytecodealliance/wasip3-prototyping/pull/50</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/50\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/826648a114f9cb6ca27973eceeb2e968ee2c9ea1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656536316532313631626161346632373838326665356431316638383530313838303864633162393833616264313330643466356632613030383834313661652f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3530&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/50\" title=\"refactor host stream/future APIs by dicej Â· Pull Request #50 Â· bytecodealliance/wasip3-prototyping\">refactor host stream/future APIs by dicej Â· Pull Request #50 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">This adds close-on-drop functionality to {Stream|Future}{Writer|Reader} and support for reading and writing without a StoreContextMut.  Both of those features are enabled by spawning background tas...</div></div></div>",
        "id": 502691570,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740789825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> I haven't added a way to get a <code>Future</code> that resolves when the other end of a stream/future is closed yet, but I'm planning to do that Monday.</p>",
        "id": 502691655,
        "sender_full_name": "Joel Dice",
        "timestamp": 1740789882
    },
    {
        "content": "<p>I'm traveling today, so won't be able to make it to the status update call. On my way I'll be working on porting the rest of the p2 tests and finishing up the <code>wasi:cli</code>.<br>\n<span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> do I understand correctly that you already have wasip3 <code>wasi:http</code> implementation complete or should I work on that as well?</p>",
        "id": 502968163,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1740990944
    },
    {
        "content": "<p><code>wasi:cli</code> <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/47\">https://github.com/bytecodealliance/wasip3-prototyping/pull/47</a><br>\nassuming that <code>wasi:http</code> is already complete, all of WASIp3 is implemented in the prototyping repo.<br>\nI'll be focusing on testing, refactoring and bug fixes now. hopping on a plane soon</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/47\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/439b88bc8c2e3489ec1b34cd24fcb554da0fe572/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373166613266653339346261323236373337313566636639626534623864333564303932646663313638326461666461346232656339313634373461336432612f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3437&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/47\" title=\"feat: implement `wasi:cli` by rvolosatovs Â· Pull Request #47 Â· bytecodealliance/wasip3-prototyping\">feat: implement `wasi:cli` by rvolosatovs Â· Pull Request #47 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Just the implementation without tests for now, I'll be porting tests in the meantime.\nRefs #51</div></div></div>",
        "id": 503002147,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1741001286
    },
    {
        "content": "<p>Nice work!</p>\n<p>All I've done for <code>wasi:http</code> is <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/tree/main/crates/misc/component-async-tests/http\">sketch an implementation</a> for testing purposes, based on a now-out-of-date draft.  <span class=\"user-mention\" data-user-id=\"598440\">@Victor Adossi</span> has done some work to partially sync it with the latest draft, but not entirely.</p>\n<p>In any case, that implementation was only ever meant for runtime testing and examples; it has a bunch of TODOs, and I haven't tried to get the existing <code>wasmtime-wasi-http</code> tests ported over.  So if you have bandwidth to work on any of that, it would certainly be appreciated!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/tree/main/crates/misc/component-async-tests/http\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4d37365ce90d84f0f99b9aa33963ded9ef872768/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343930666533316635333862356433613637303836613366336633333434613562353036356536383762633435346331626430373634393639626566343838322f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/tree/main/crates/misc/component-async-tests/http\" title=\"wasip3-prototyping/crates/misc/component-async-tests/http at main Â· bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/misc/component-async-tests/http at main Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div>",
        "id": 503045764,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741013435
    },
    {
        "content": "<p>Ok, I'll work on HTTP then!</p>",
        "id": 503047760,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1741013902
    },
    {
        "content": "<p>I'll also have to dip out a bit early from the sync to run an errand too, I've mostly been working on the low-level tooling of wasmparser/etc sync'ing that with the spec and then working my way up to wit-bindgen with the goal of getting a C generator in mind (but also understanding the Rust generator at the same time)</p>",
        "id": 503054863,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741015660
    },
    {
        "content": "<p>It appears that <code>wasm32-wasip2</code> target is not currently supported by Rust wasip3 components, is that right?</p>\n<p>I'm getting:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">componentization</span>\n\n<span class=\"w\">          </span><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">              </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">decoding</span><span class=\"w\"> </span><span class=\"n\">custom</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"o\">-</span><span class=\"k\">type</span><span class=\"p\">:</span><span class=\"nc\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"p\">:</span><span class=\"mf\">0.39.0</span><span class=\"p\">:</span><span class=\"nc\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">@</span><span class=\"mf\">0.3.0</span><span class=\"p\">:</span><span class=\"nc\">command</span><span class=\"p\">:</span><span class=\"nc\">encoded</span><span class=\"w\"> </span><span class=\"n\">world</span>\n<span class=\"w\">              </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">invalid</span><span class=\"w\"> </span><span class=\"n\">leading</span><span class=\"w\"> </span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mh\">0x66</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0xda</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>when trying to build a component with <code>cargo build --target wasm32-wasip2 --release</code> on:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"mf\">1.84.1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">66221</span><span class=\"n\">abde</span><span class=\"w\"> </span><span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">11</span><span class=\"o\">-</span><span class=\"mi\">19</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>wit-bindgen e0d2b889411acf60738dcd976ed5373f7a81e651</p>",
        "id": 503302430,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1741103518
    },
    {
        "content": "<p>Ah, yeah, I guess that makes sense given that <code>wasm-component-ld</code> is using an older version of <code>wit-encoder</code>.  We'd need a build with an updated dep.</p>",
        "id": 503302731,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741103587
    },
    {
        "content": "<p>so for now we should build for <code>wasm32-unknown-unknown</code> and componentize manually then?</p>",
        "id": 503303032,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1741103660
    },
    {
        "content": "<p>or wasm32-wasip1</p>",
        "id": 503303123,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741103683
    },
    {
        "content": "<p>we're building with wasm32-wasip1 and adapting right now in the build scripts</p>",
        "id": 503303127,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1741103684
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/main/crates/test-programs/artifacts/build.rs\">https://github.com/bytecodealliance/wasip3-prototyping/blob/main/crates/test-programs/artifacts/build.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/main/crates/test-programs/artifacts/build.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/307ce22fe91008f2c96ece07868a191ae5bc195e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633732613762363164376664636533363031613864333936383635663465626533376364373630323835306437323437313262356632323038303564373463382f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/main/crates/test-programs/artifacts/build.rs\" title=\"wasip3-prototyping/crates/test-programs/artifacts/build.rs at main Â· bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/test-programs/artifacts/build.rs at main Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div>",
        "id": 503303181,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1741103696
    },
    {
        "content": "<p><code>wasmtime run</code> runs wasip3 components now <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/60\">https://github.com/bytecodealliance/wasip3-prototyping/pull/60</a> :)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/60\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/921bdabf40c467700787ae2c0fc5d39bf22ce0ab/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306135646137633733373731356231396662326262336633633534666563653834323630326434333830383162336131663039373563653933373932383062352f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3630&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/60\" title=\"feat(wasmtime-cli): enable async CM feature by rvolosatovs Â· Pull Request #60 Â· bytecodealliance/wasip3-prototyping\">feat(wasmtime-cli): enable async CM feature by rvolosatovs Â· Pull Request #60 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">With this I was able to run:\nmod bindings {\n    wit_bindgen::generate!({\n        world: &quot;wasi:cli/command&quot;,\n        async: {\n            exports: [\n                &quot;wasi:cli/run@0.3....</div></div></div>",
        "id": 503309100,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1741105173
    },
    {
        "content": "<p>as a heads up I'm going to start the process today of updating wasm-tools everywhere. Stuff's probably gonna be broken for awhile.</p>",
        "id": 503549827,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741188723
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> BTW, I'm finishing up addressing your feedback on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\">https://github.com/bytecodealliance/wasmtime/pull/10106</a> and plan to merge it when I'm done, in case you want to wait for that.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1ef0b79153280bfd2d84fa9557132526d73d1569/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636336626239316237303465356531336463363532386566663666353338376530653865303236626336623366313466363261393065353437353235303364342f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3130313036&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/10106\" title=\"add component-model-async/{fused|futures|streams}.wast tests by dicej Â· Pull Request #10106 Â· bytecodealliance/wasmtime\">add component-model-async/{fused|futures|streams}.wast tests by dicej Â· Pull Request #10106 Â· bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is another piece of #9582 which I&#39;m splitting out to make review easier.\nThe fused.wast test exercises fused adapter generation for various flavors of\nintercomponent async-&gt;async, async...</div></div></div>",
        "id": 503550172,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741188790
    },
    {
        "content": "<p>will do</p>",
        "id": 503550223,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741188806
    },
    {
        "content": "<p>tune in at 7 for today's episode of \"race to rebase\"</p>",
        "id": 503550303,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741188829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> #10106 is merged</p>",
        "id": 503583035,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741195406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I'll merge upstream Wasmtime into <code>wasip3-prototyping</code> unless you've already started that.</p>",
        "id": 503810058,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741271716
    },
    {
        "content": "<p>After that, I'm planning to work on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10338\">https://github.com/bytecodealliance/wasmtime/issues/10338</a> and then host support for waitable sets.  <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> are you planning to work on guest (i.e. <code>wit-bindgen</code>) support for waitable sets?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/10338\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/be162046111196e54c26a971658c67f6deb5cd85/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333730643732343730393165613338393536353031663630633263396438663766636534616537316232393437663335386434396133356438313166363063342f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f3130333338&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/10338\" title=\"Handle canonical options when translating `task.return` Â· Issue #10338 Â· bytecodealliance/wasmtime\">Handle canonical options when translating `task.return` Â· Issue #10338 Â· bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">I'm about to commit code in #10314 where the new canonical options specified on task.return, now present after a wasmparser update, are going to be ignored during compilation of the trampoline. Thi...</div></div></div>",
        "id": 503810907,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741271915
    },
    {
        "content": "<p>I haven't started the merge feel free</p>",
        "id": 503811368,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741272016
    },
    {
        "content": "<p>You might have to temporarily disable tests I don't think my wit bindgen tests are sufficient just yet</p>",
        "id": 503811527,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741272054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1197\">https://github.com/bytecodealliance/wit-bindgen/pull/1197</a></p>\n<p>the fix was pretty simple, as discussed.</p>\n<p>btw, I noticed that wit-bindgen in <code>main</code> appears to be broken, and I had to roll back to the last-known-good commit for testing this in my <code>wasi</code> fork. I'll file an issue later upstream, but for now it can be reproduced with <a href=\"https://github.com/rvolosatovs/wasi/tree/feat/p3\">https://github.com/rvolosatovs/wasi/tree/feat/p3</a> and using latest <code>main</code> of <code>wit-bindgen</code>. Just thought it's important to call it out</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1197\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/52efd99fd41c3ce909f4311f5105932d876bd839/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656538623039346562356530306165643065626435316462383830333437363937656263373164363064643966346463663562396436363732313330396330322f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f31313937&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1197\" title=\"feat(rust): do not yield to the host while guest tasks are ready by rvolosatovs Â· Pull Request #1197 Â· bytecodealliance/wit-bindgen\">feat(rust): do not yield to the host while guest tasks are ready by rvolosatovs Â· Pull Request #1197 Â· bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">cc @dicej\nThis fixes bytecodealliance/wasip3-prototyping#66\nNote, that eventually we might want go get smarter about this (or not) e.g. see https://docs.rs/tokio/latest/tokio/task/index.html#cooper...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rvolosatovs/wasi/tree/feat/p3\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/76de25d4c953b4d055a79f4c90845b52cd6bfb1d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613537303935323762316261336461353066393431626535333339383338653165316463623230623436376235653736623364643731333237343664623434662f72766f6c6f7361746f76732f77617369&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rvolosatovs/wasi/tree/feat/p3\" title=\"GitHub - rvolosatovs/wasi at feat/p3\">GitHub - rvolosatovs/wasi at feat/p3</a></div><div class=\"message_embed_description\">Experimental WASI API bindings for Rust. Contribute to rvolosatovs/wasi development by creating an account on GitHub.</div></div></div>",
        "id": 503871518,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1741288543
    },
    {
        "content": "<p>Yeah, I hit that too.  Fixing it now</p>",
        "id": 503871749,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741288607
    },
    {
        "content": "<p>oh is it the double <code>fn new</code> problem?</p>",
        "id": 503871797,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741288621
    },
    {
        "content": "<p>yup</p>",
        "id": 503871805,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741288623
    },
    {
        "content": "<p>I ran into that on <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1192\">https://github.com/bytecodealliance/wit-bindgen/pull/1192</a> as well, I can also split out the fix</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1192\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3e7812cf4ea9dbf16f5e41a5d4400d4e46c16c9f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383665653838303737323561663766633866333563613230653266343865353266323538623463333732643832646165666631663438666430326232623139622f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f31313932&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1192\" title=\"Add a `wit-bindgen test` subcommand by alexcrichton Â· Pull Request #1192 Â· bytecodealliance/wit-bindgen\">Add a `wit-bindgen test` subcommand by alexcrichton Â· Pull Request #1192 Â· bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">As I&#39;ve read more and more of the Rust async runtime support and other various bits and pieces I&#39;ve wanted more and more the ability to easily write tests for guest interactions with the ho...</div></div></div>",
        "id": 503871866,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741288644
    },
    {
        "content": "<p>it wasn't caught on CI because it's only a problem when things are compiled to wasm which the codegen tests aren't</p>",
        "id": 503871922,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741288665
    },
    {
        "content": "<p>I think for the time being we need to test async-related wit-bindgen changes manually against <code>wasip3-prototyping</code> to catch stuff like that.  Not ideal (and maybe not practical when stuff is out of sync), but something to aim for, at least.</p>",
        "id": 503872176,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741288740
    },
    {
        "content": "<p><code>wasip3-prototyping</code> is the only place we have runtime tests involving guest bindings for now</p>",
        "id": 503872260,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741288771
    },
    {
        "content": "<p>yeah I forgot to do it on that change :(</p>",
        "id": 503872302,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741288787
    },
    {
        "content": "<p>No worries; looking forward to having runtime tests in the wit-bindgen repo so we don't have to remember anymore.</p>",
        "id": 503872946,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741289013
    },
    {
        "content": "<p>Making progress on the merge, but now hitting this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">artifacts</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">184</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">translated</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">decode</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"w\">  </span><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">valid</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">resolve</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"cp\">$root</span><span class=\"p\">::[</span><span class=\"n\">task</span><span class=\"o\">-</span><span class=\"n\">backpressure</span><span class=\"p\">]</span><span class=\"err\">`</span>\n<span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">no</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"n\">imported</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">task</span><span class=\"o\">-</span><span class=\"n\">backpressure</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">specified</span>\n</code></pre></div>\n<p>No surprise; <code>wit-bindgen</code> hasn't been updated to match the latest <code>wit-encoder</code>.  <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> if you haven't already started that, I can dive in.</p>",
        "id": 503873788,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741289275
    },
    {
        "content": "<p>no please do</p>",
        "id": 503873872,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741289296
    },
    {
        "content": "<p>but I also don't mind taking this</p>",
        "id": 503873892,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741289302
    },
    {
        "content": "<p>I'm studying async tests right now</p>",
        "id": 503873901,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741289305
    },
    {
        "content": "<p>this is also making me rethinking if we should organize things a bit different w.r.t wit-bindgen and wasip3-prototyping,b ut that's for the side</p>",
        "id": 503873963,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741289329
    },
    {
        "content": "<p>Well you are faster than me at pretty much everything, so feel free to take it; I could work on the task.return options stuff while you do that.</p>",
        "id": 503874100,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741289378
    },
    {
        "content": "<p>wanna share your p3 branch-in-progress?</p>",
        "id": 503874160,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741289397
    },
    {
        "content": "<p>yup, just a sec</p>",
        "id": 503874190,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741289403
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/68\">https://github.com/bytecodealliance/wasip3-prototyping/pull/68</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/68\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e6108472cb7d23d88feba77a4fabcef14e0a9c35/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323161343735393464313935646438323633376236333938363730646638386233613535363533616439613136343839316437613930363639376633373533612f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3638&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/68\" title=\"WIP upstream merge by dicej Â· Pull Request #68 Â· bytecodealliance/wasip3-prototyping\">WIP upstream merge by dicej Â· Pull Request #68 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">We read every piece of feedback, and take your input very seriously.</div></div></div>",
        "id": 503874775,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741289562
    },
    {
        "content": "<p>oops, just realized I left a <code>[patch]</code> in the Cargo.toml to point to a local wit-bindgen; I'll revert that part</p>",
        "id": 503874896,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741289602
    },
    {
        "content": "<p>(although it might be useful for what you're doing :)</p>",
        "id": 503874957,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741289624
    },
    {
        "content": "<p>heh that was step 1 for me lol</p>",
        "id": 503874984,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741289633
    },
    {
        "content": "<p>I've hit a wit-component bug, will take a moment to fix</p>",
        "id": 503878696,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741290972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> can you confirm that I'm remembering this correctly: In order to make the runtime <code>task.return</code> validation a single comparison, we're going to intern the <code>dfg::CanonicalOptions</code> in <code>ComponentTypesBuilder</code> (call it e.g. <code>CanonicalOptionsIndex</code>), then pair that with the <code>TypeTupleIndex</code> we're already using to intern the component return type, producing a third interned thing (call it e.g. <code>TaskReturnIndex</code>) that represents the pair.  Then at runtime, we compare the two <code>TaskReturnIndex</code>es and trap if they don't match.  Does that sound right?</p>",
        "id": 503888295,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741294445
    },
    {
        "content": "<p>Eventually yeah, but for now it's probably easier to just shepherd along options individually and check then all</p>",
        "id": 503891279,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741295533
    },
    {
        "content": "<p>Already started down the intern path :).  Shouldn't be a lot of work; just wanted to make sure it wasn't the wrong approach.</p>",
        "id": 503891413,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741295593
    },
    {
        "content": "<p>Be careful to only intern a few things though</p>",
        "id": 503891455,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741295615
    },
    {
        "content": "<p>Since the spec says we only check a few minor options</p>",
        "id": 503891486,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741295632
    },
    {
        "content": "<p>ok, so create a new struct with only the relevant options, then</p>",
        "id": 503891575,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741295658
    },
    {
        "content": "<p>I also realize we need to confirm what function equality means in the spec because interning misses runtime reexpots</p>",
        "id": 503891611,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741295673
    },
    {
        "content": "<p>But yeah new steuct</p>",
        "id": 503891631,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741295683
    },
    {
        "content": "<p>Er memory equality I mean, but functions too with realloc</p>",
        "id": 503891747,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741295732
    },
    {
        "content": "<p>ok, so \"unusual\" components might fail the the runtime test even though they're actually following the rules?</p>",
        "id": 503892005,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741295821
    },
    {
        "content": "<p>but we'll still definitely trap any components that aren't following the rules?</p>",
        "id": 503892120,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741295863
    },
    {
        "content": "<p>Right</p>",
        "id": 503892164,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741295879
    },
    {
        "content": "<p>Would <code>RuntimeMemoryIndex</code>, <code>RuntimeReallocIndex</code>, etc. help at all with the false traps?</p>",
        "id": 503892651,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741296036
    },
    {
        "content": "<p>No, that's what you're interning over basically</p>",
        "id": 503892776,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741296102
    },
    {
        "content": "<p>We basically treat core modules as black boxes right now and don't detect reexports</p>",
        "id": 503892888,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741296138
    },
    {
        "content": "<p>Should I be doing the interning in <code>ComponentTypesBuilder</code>?  It currently doesn't know anything about memories or reallocs; those appear to be interned in <code>LinearizeDfg</code> instead.  Is it okay to intern a struct that has e.g. a <code>RuntimeMemoryIndex</code> field in a <code>ComponentTypes{Builder}</code>?</p>",
        "id": 503894240,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741296602
    },
    {
        "content": "<p>Probably in dfg</p>",
        "id": 503894323,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741296621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/channel/219900-wasi/topic/WASIP3.20Update/near/503878696\">said</a>:</p>\n<blockquote>\n<p>I've hit a wit-component bug, will take a moment to fix</p>\n</blockquote>\n<p>the rabbit hole is going deeper...</p>",
        "id": 503906314,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741301300
    },
    {
        "content": "<p>Let me know if I can help with anything.</p>",
        "id": 503906501,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741301393
    },
    {
        "content": "<p>nah it's all preexisting issues in wit-component</p>",
        "id": 503906578,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741301411
    },
    {
        "content": "<p>tl;dr; the <code>--dummy</code> support didn't emit intrinsics for things like futures/streams/task.return/etc, meaning that was never exercised in fuzzing, and the buggy module originally in wasip3-prototyping was exercising this</p>",
        "id": 503906637,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741301442
    },
    {
        "content": "<p>so I first updated <code>--dummy</code> to import all async intrinsics, and now that's turning up at least one other independent bug in wit-component</p>",
        "id": 503906661,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741301458
    },
    {
        "content": "<p>so need to sort through these all basically</p>",
        "id": 503906673,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741301464
    },
    {
        "content": "<p>this all has to do with type encoding and making sure things are encoded in the right spot, and that's all super subtle and I always forget about it and just hope the fuzzer finds things (which it is now)</p>",
        "id": 503906855,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741301537
    },
    {
        "content": "<p>Yeah, I've been eager to start (and also dreading) fuzzing all the things; glad we're finally starting to do that.</p>",
        "id": 503907125,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741301651
    },
    {
        "content": "<p>oh this is the fuzzer already going in <code>roundtrip_wit</code> in wasm-tools, and it's been doing async things for awhile</p>",
        "id": 503907184,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741301677
    },
    {
        "content": "<p>this is just expanding the set of things it does</p>",
        "id": 503907197,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741301682
    },
    {
        "content": "<p>ok 4 other bugs fixed and the fuzzer now reached the original one I started with, yay!</p>",
        "id": 503911665,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741303540
    },
    {
        "content": "<p>I've done the <code>task.return</code> type/options interning we discussed.  It compiles, at least.  Will test once the merge is complete.</p>",
        "id": 503914274,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741304652
    },
    {
        "content": "<p>this is going to take me a second, I pushed up my work-in-progress to your PR</p>",
        "id": 503914819,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741304909
    },
    {
        "content": "<p>the next step is adding <code>struct WaitableSet</code> to <code>async_support.rs</code>. Not hard but the fuzzer is finding more bugs in the background, you want to take over updating wit-bindgen from here?</p>",
        "id": 503914887,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741304941
    },
    {
        "content": "<p>Yup; I'll start on that tomorrow morning.  Thanks for getting it this far!</p>",
        "id": 503915168,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741305064
    },
    {
        "content": "<p>Nevermind, I started it this evening.  I've got <code>wit-bindgen</code> generating code to use the <code>waitable-set</code> intrinsics, and <code>wit-component</code> is happy with that, but <code>wit-component</code> is now choking on <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/main/crates/test-programs/src/bin/async_transmit_callee.rs\">https://github.com/bytecodealliance/wasip3-prototyping/blob/main/crates/test-programs/src/bin/async_transmit_callee.rs</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">dicej</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">checkouts</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"n\">a47d954f2d24d2f</span><span class=\"o\">/</span><span class=\"mi\">311</span><span class=\"n\">b6fa</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">encoding</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">557</span><span class=\"p\">:</span><span class=\"mi\">47</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">IndexMap</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">key</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span>\n</code></pre></div>\n<p>I'll try debugging it; might be related to one of the issues the fuzzer found?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/main/crates/test-programs/src/bin/async_transmit_callee.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/40d42b21b37bd42f8886de4e8acb95a7203836bb/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663066663339363631313262623839663239653433623530353734383438353135363562666463656461626164313732366266306433663963393332633535372f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/main/crates/test-programs/src/bin/async_transmit_callee.rs\" title=\"wasip3-prototyping/crates/test-programs/src/bin/async_transmit_callee.rs at main Â· bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/test-programs/src/bin/async_transmit_callee.rs at main Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div>",
        "id": 503920595,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741307535
    },
    {
        "content": "<p>yeah I found another issue or two</p>",
        "id": 503920697,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741307602
    },
    {
        "content": "<p>update the wit-component dep</p>",
        "id": 503920861,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741307657
    },
    {
        "content": "<p>via <code>cargo update -p wit-component</code> and I think it should pick up a fix I just pushed</p>",
        "id": 503920873,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741307666
    },
    {
        "content": "<p>and if it still panics I'll dig in more</p>",
        "id": 503920883,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741307674
    },
    {
        "content": "<p>same panic</p>",
        "id": 503920975,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741307738
    },
    {
        "content": "<p>guh ok if you can push your work I'll dig in</p>",
        "id": 503920997,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741307751
    },
    {
        "content": "<p>oh wait</p>",
        "id": 503921010,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741307763
    },
    {
        "content": "<p>fuzzer just hit it</p>",
        "id": 503921050,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741307765
    },
    {
        "content": "<p>time to spelunk</p>",
        "id": 503921067,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741307775
    },
    {
        "content": "<p>I'll push what I have, anyway.  It's just a stub so far; not merge-able.</p>",
        "id": 503921140,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741307830
    },
    {
        "content": "<p>oh wait maybe I have a bad rebase</p>",
        "id": 503921391,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741307968
    },
    {
        "content": "<p>I broke a preexisting test</p>",
        "id": 503921398,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741307970
    },
    {
        "content": "<p>ok try pulling again</p>",
        "id": 503921443,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741307997
    },
    {
        "content": "<p>looks good; hitting another issue now, but an expected one</p>",
        "id": 503921623,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741308094
    },
    {
        "content": "<p>nice</p>",
        "id": 503921633,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741308098
    },
    {
        "content": "<p>gogo fuzzers</p>",
        "id": 503921641,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741308107
    },
    {
        "content": "<p>nice, got <code>cargo clippy --workspace --all-targets</code> green now</p>",
        "id": 503922089,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741308337
    },
    {
        "content": "<p>the next gauntlet: acutally running the test heh</p>",
        "id": 503922127,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741308355
    },
    {
        "content": "<p>I know; I kind of want to make that a problem for Tomorrow Joel</p>",
        "id": 503922198,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741308375
    },
    {
        "content": "<p>Today Joel thanks you for your service</p>",
        "id": 503922221,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741308387
    },
    {
        "content": "<p>about half of the integration tests are passing; not bad.  The rest are dying with cranelift signature mismatch errors; presumably something wrong with in <code>compiler/component.rs</code></p>",
        "id": 503922626,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741308643
    },
    {
        "content": "<p>or <code>fact/trampoline.rs</code> maybe</p>",
        "id": 503922664,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741308666
    },
    {
        "content": "<p>either way, it's Tomorrow Joel's problem</p>",
        "id": 503922686,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741308678
    },
    {
        "content": "<p>All the integration tests are now passing.  Just some WAT tests failing now; should be easy to fix.</p>",
        "id": 504133599,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741364628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> How would you feel about merging <a href=\"https://github.com/dicej/wit-bindgen/commit/b518c80c3707e5df8e890acb0444cf9f2588a8fc\">https://github.com/dicej/wit-bindgen/commit/b518c80c3707e5df8e890acb0444cf9f2588a8fc</a> (which hard-codes the <code>waitable-set</code> handle to zero, since Wasmtime is currently ignoring it) as a temporary measure just to get things working again?  I'll follow that up with proper <code>waitable-set</code> PRs for both <code>wit-bindgen</code> and <code>wasip3-prototyping</code>, but I don't want to block getting the merge into <code>main</code> while I'm doing that.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/wit-bindgen/commit/b518c80c3707e5df8e890acb0444cf9f2588a8fc\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/93ba40aa1390c56a284cbcee1554a8d81472d306/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343662303030633236626666333338663035376531376531616139326635333634386661306533396432643561313439396335326433646261333764356430362f646963656a2f7769742d62696e6467656e2f636f6d6d69742f62353138633830633337303765356466386538393061636230343434636639663235383861386663&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/wit-bindgen/commit/b518c80c3707e5df8e890acb0444cf9f2588a8fc\" title=\"[DO NOT MERGE] minimal stub of waitable-set support Â· dicej/wit-bindgen@b518c80\">[DO NOT MERGE] minimal stub of waitable-set support Â· dicej/wit-bindgen@b518c80</a></div><div class=\"message_embed_description\">Signed-off-by: Joel Dice &lt;joel.dice@fermyon.com&gt;</div></div></div>",
        "id": 504134488,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741364868
    },
    {
        "content": "<p>I'm hitting the <code>unreachable!</code> in <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/b4d62a45c2c0d697a0ce88f0686fe05a7cba4805/crates/guest-rust/rt/src/async_support/stream_support.rs#L342-L349\">https://github.com/bytecodealliance/wit-bindgen/blob/b4d62a45c2c0d697a0ce88f0686fe05a7cba4805/crates/guest-rust/rt/src/async_support/stream_support.rs#L342-L349</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">rvolosatovs</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">checkouts</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"o\">-</span><span class=\"n\">b65103eb40fd7b8c</span><span class=\"o\">/</span><span class=\"mi\">554</span><span class=\"n\">b482</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">guest</span><span class=\"o\">-</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">rt</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">async_support</span><span class=\"o\">/</span><span class=\"n\">stream_support</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">347</span><span class=\"p\">:</span><span class=\"mi\">48</span><span class=\"p\">:</span>\n<span class=\"nc\">internal</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">entered</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"w\"> </span><span class=\"n\">code</span>\n</code></pre></div>\n<p>has anyone seen it before? Any ideas what might be going wrong?<br>\n<span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> happy to jump on a call to look at it together if you're available</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/blob/b4d62a45c2c0d697a0ce88f0686fe05a7cba4805/crates/guest-rust/rt/src/async_support/stream_support.rs#L342-L349\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1db5c92cb53d4197678dcd0ac6a08315e9962350/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613931316361666435383662656436656139626261383465346661656666316433303131303936363563306566343931646338356537326261353363343030612f62797465636f6465616c6c69616e63652f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/b4d62a45c2c0d697a0ce88f0686fe05a7cba4805/crates/guest-rust/rt/src/async_support/stream_support.rs#L342-L349\" title=\"wit-bindgen/crates/guest-rust/rt/src/async_support/stream_support.rs at b4d62a45c2c0d697a0ce88f0686fe05a7cba4805 Â· bytecodealliance/wit-bindgen\">wit-bindgen/crates/guest-rust/rt/src/async_support/stream_support.rs at b4d62a45c2c0d697a0ce88f0686fe05a7cba4805 Â· bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - bytecodealliance/wit-bindgen</div></div></div>",
        "id": 504136803,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1741365535
    },
    {
        "content": "<p>That means the guest has received a <code>stream</code> handle it thinks it already owns.  Yeah, a call would be good.</p>",
        "id": 504137497,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741365738
    },
    {
        "content": "<p>As usual, if you can provide a (somewhat) minimized test case that would be ideal.</p>",
        "id": 504137703,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741365802
    },
    {
        "content": "<p>are you free now?</p>",
        "id": 504138090,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1741365917
    },
    {
        "content": "<p>yup</p>",
        "id": 504138107,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741365924
    },
    {
        "content": "<p>I'll send you a link in a few minutes</p>",
        "id": 504138146,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1741365934
    },
    {
        "content": "<blockquote>\n<p>How would you feel about merging <a href=\"https://github.com/dicej/wit-bindgen/commit/b518c80c3707e5df8e890acb0444cf9f2588a8fc\">https://github.com/dicej/wit-bindgen/commit/b518c80c3707e5df8e890acb0444cf9f2588a8fc</a> </p>\n</blockquote>\n<p>sounds reasonable to me yeah</p>",
        "id": 504142054,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741367121
    },
    {
        "content": "<p>my hope is to soon start digging more into refactorings  for the rust guest bindings with more test cases using <code>wit-bindgen test</code></p>",
        "id": 504142317,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741367200
    },
    {
        "content": "<p>BTW, I just chatted with Luke, pointing out that a <code>realloc</code> option for <code>task.return</code> doesn't make sense because it only needs to lift values.  He's going to remove that from the spec, and we may need to tweak the validation rules in wasmparser to match.</p>",
        "id": 504143309,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741367489
    },
    {
        "content": "<p>right!</p>",
        "id": 504143395,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741367519
    },
    {
        "content": "<p>that reminds me to open an issue about memory equality</p>",
        "id": 504143460,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741367526
    },
    {
        "content": "<p>I posted <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/2086\">https://github.com/bytecodealliance/wasm-tools/pull/2086</a> for removing the <code>realloc</code> option (shouldn't affect much) and <a href=\"https://github.com/WebAssembly/component-model/issues/464\">https://github.com/WebAssembly/component-model/issues/464</a> for clarifying memory equality (which affects what sort of interning we can do)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/2086\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b6fa040a39abc89843b19cb7e0897df09690c09d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613537346534666635326666633535323461623364646262653339663262373866626636336538363532373534303861666137633339633330386637333039662f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f32303836&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/2086\" title=\"Disallow `realloc` option on `task.return` by alexcrichton Â· Pull Request #2086 Â· bytecodealliance/wasm-tools\">Disallow `realloc` option on `task.return` by alexcrichton Â· Pull Request #2086 Â· bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">This'll soon be updated in the spec as well, but task.return is only lifting values so there's no need for realloc, so go ahead and forbid it from being present on the task.return intrinsic.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/464\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4c32063fa9f322c74327cd98ae4c1ce17dc31877/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376434643263346563356137353033333330336464666534343830313238646333326261633265353836623964333233363362626330353633323565353331312f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f343634&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/464\" title=\"task.return: Clarifying `self.memory is other.memory` Â· Issue #464 Â· WebAssembly/component-model\">task.return: Clarifying `self.memory is other.memory` Â· Issue #464 Â· WebAssembly/component-model</a></div><div class=\"message_embed_description\">The runtime validation of task.return checks that the canonical options are the same as the options used during the original lift (or at least the relevant subset). This includes the memory option ...</div></div></div>",
        "id": 504145825,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741368313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> Roman can provide more detail, but the issue he ran into above is the one you pointed out last week: writing to a \"local\" stream, then giving the read end away before that write completes.  He's going to work around it, but now we have a real-world example.</p>",
        "id": 504147638,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741368926
    },
    {
        "content": "<p>I guess that should be easier to fix than the opposite case (e.g. writing to a \"remote\" stream and then receiving the read end before the write completes).</p>",
        "id": 504147817,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741368983
    },
    {
        "content": "<p>makes sense yeah, and once we have things lined up again I'll start working on tests and fixes for these issues</p>",
        "id": 504148232,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741369127
    },
    {
        "content": "<p>I'm almost done fixing the remaining tests, then will push what I have.</p>",
        "id": 504148501,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741369211
    },
    {
        "content": "<p>All tests are green; I've pushed what I have to your draft wit-bindgen PR and my draft wasip3-prototyping PR.  Now reviewing <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/2084\">https://github.com/bytecodealliance/wasm-tools/pull/2084</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/2084\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3a0f84bc19b17c9f566d6c9a80ba0c566ca74b42/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353532656265613862303161616362306662326638353538653538333731353230383565653633366634626662373632333036326565393333363235353539652f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f32303834&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/2084\" title=\"Enhance dummy async module generation by alexcrichton Â· Pull Request #2084 Â· bytecodealliance/wasm-tools\">Enhance dummy async module generation by alexcrichton Â· Pull Request #2084 Â· bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">This commit enhances the --async-callback and --async-stackful arguments to the wasm-tools component embed subcommand when paired with --dummy-names legacy. Specifically the dummy module generated ...</div></div></div>",
        "id": 504152131,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741370432
    },
    {
        "content": "<p>Coming back to the <code>task-return</code> interning and runtime validation thing: I have all but two tests passing.  The two failures appear to be invalid components generated by <code>wit-encoder</code> such that the async-lifted export has a <code>memory</code> option (and indeed should have one), but the corresponding <code>task.return</code> does not.  My guess it's due to the return type <em>not</em> needing a <code>memory</code> but the parameter types needing one.  Will debug.</p>",
        "id": 504173986,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741377449
    },
    {
        "content": "<p>ok that's a good point, and probably is more spec updates to have</p>",
        "id": 504174185,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741377514
    },
    {
        "content": "<p>basically a \"match\" saying that a non-present memory is ok to have when the original intrinsic had a memory</p>",
        "id": 504174226,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741377535
    },
    {
        "content": "<p>b/c task.return validation will already require <code>memory</code> if it's needed and otherwise let it lie if it's specified and not needed</p>",
        "id": 504174260,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741377550
    },
    {
        "content": "<p>(which I think this may be the nail-in-the-coffin for the interning strategy)</p>",
        "id": 504174292,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741377563
    },
    {
        "content": "<p>Also, given Luke's response on the upstream issue, interning definitely won't work here</p>",
        "id": 504174378,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741377596
    },
    {
        "content": "<p>spec-wise it's the wrong behavior</p>",
        "id": 504174423,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741377602
    },
    {
        "content": "<p>so I need to do three comparisons, then?  type, memory, and string-encoding?</p>",
        "id": 504174532,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741377629
    },
    {
        "content": "<p>we could technically intern type+string-encoding, but I don't think that's worth it, so yeah 3 compares</p>",
        "id": 504174594,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741377649
    },
    {
        "content": "<p>just to clarify: if <em>either</em> or <em>both</em> the <code>task.return</code> or the lift specify a memory that's not needed, that's ok?  I.e. Wasmtime will need to do its own check to see if the memory is really needed based on the return type and set them both to null e.g. during instantiation so that we don't get spurious comparison failures?</p>",
        "id": 504177053,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741378606
    },
    {
        "content": "<p>I think no, what I'd expect is that if they're specified they're asserted to be equal</p>",
        "id": 504177153,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741378652
    },
    {
        "content": "<p>if they happen to not get used, then they just happen to not get used</p>",
        "id": 504177182,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741378666
    },
    {
        "content": "<p>ok, so <code>wit-encoder</code> <em>does</em> need to be fixed given that it's generating a lift where it's specified and a corresponding <code>task.return</code> where it's not</p>",
        "id": 504177410,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741378739
    },
    {
        "content": "<p>and it's not wasmparser's responsibility to check that, because it can't in general (hence the runtime check)</p>",
        "id": 504177534,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741378791
    },
    {
        "content": "<p>right on wasmparser can't check this, but why would wit-component change?</p>",
        "id": 504177715,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741378859
    },
    {
        "content": "<p>b/c the lift may need it for arguments but not for the results, so it's valid that <code>lift</code> has it but <code>task.return</code> doesn't</p>",
        "id": 504177746,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741378875
    },
    {
        "content": "<p>(and this is where we should update the spec where if <code>task.return</code> is missing it and <code>lift</code> has it then that's ok)</p>",
        "id": 504177770,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741378889
    },
    {
        "content": "<p>ok, so then it's not just a simple comparison at runtime is it?  One will be null and the other will be non-null, and yet it shouldn't trap because we're saying that's okay.</p>",
        "id": 504177863,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741378923
    },
    {
        "content": "<p>yeah</p>",
        "id": 504177957,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741378975
    },
    {
        "content": "<p>personally I wouldn't worry too much about the cost of these checks, a few conditionals compared to the boxing/copying at the moment is where we're at</p>",
        "id": 504178019,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741379005
    },
    {
        "content": "<p>Yeah, not worried about the cost, just want to make sure I've got it correct.</p>",
        "id": 504178059,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741379026
    },
    {
        "content": "<p>so if the <code>task.return</code> memory is null and the <code>lift</code> memory is non-null, then we say that's okay because <code>wasmparser</code> would have rejected a <code>task.return</code> that was missing a memory but needed it, correct?</p>",
        "id": 504178238,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741379084
    },
    {
        "content": "<p>correct</p>",
        "id": 504178319,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741379115
    },
    {
        "content": "<p>(or at least that's what I'm envisioning)</p>",
        "id": 504178345,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741379124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> is there a way I can pass a reference to a memory to a intrinsic from a fused adapter module such that the host receives a <code>*mut VMMemoryDefinition</code>?</p>",
        "id": 504187600,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741382968
    },
    {
        "content": "<p>no the host will receive <code>Runtime...Index</code> and translate that using <code>*mut ComponentInstance</code> to the definition</p>",
        "id": 504187753,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741383019
    },
    {
        "content": "<p>Follow up question: If I have a <code>Option&lt;MemoryIndex&gt;</code> can I turn that into a <code>Option&lt;RuntimeMemoryIndex&gt;</code> somehow?  Or is <code>MemoryIndex</code> what I actually want anyway?</p>",
        "id": 504188962,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741383509
    },
    {
        "content": "<p>no you want <code>RuntimeMemoryIndex</code>, and if you plumb everything through dfg/etc I'd expect that to pop out</p>",
        "id": 504189023,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741383538
    },
    {
        "content": "<p>so maybe some layer forgot to do a translation?</p>",
        "id": 504189040,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741383546
    },
    {
        "content": "<p><code>AdapterOptions</code> in <code>fact.rs</code> has a <code>Option&lt;MemoryIndex&gt;</code></p>",
        "id": 504189084,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741383566
    },
    {
        "content": "<p>or well, at some layer you'll have like a <code>CoreExport</code>, and somewhere during linearization that ...</p>",
        "id": 504189093,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741383570
    },
    {
        "content": "<p>hm adapters</p>",
        "id": 504189102,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741383574
    },
    {
        "content": "<p>gimme 5 then wanna pair on this?</p>",
        "id": 504189233,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741383612
    },
    {
        "content": "<p>the EOF parsing the component issue I've mentioned in the call turned out to be <code>wasm-tools</code> version mismatch after all.</p>",
        "id": 505188893,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1741797564
    },
    {
        "content": "<p>One thing I also ran into was multi memory being required now where it wasn't before. Not sure how new that is, but moving from one commit of wasip3-prototyping to another it changed</p>\n<p>(i.e. Before, my jco branch was using WASM2 | COMPONENT_MODEL | COMPONENT_MODEL_ASYNC and I needed to add MULTI_MEMORY)</p>",
        "id": 505189815,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1741797785
    },
    {
        "content": "<p>hm that I'm not entirely sure where that would be coming from...</p>",
        "id": 505194849,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741798889
    },
    {
        "content": "<p>As far as the multi-memory thing goes that <em>MIGHT</em> be unrelated, so I wouldn't pay too much attention to it for now, still going through things on the jco side, there are still a few tests failing there.</p>\n<p>But if you want to <span aria-label=\"rabbit\" class=\"emoji emoji-1f407\" role=\"img\" title=\"rabbit\">:rabbit:</span> <span aria-label=\"hole\" class=\"emoji emoji-1f573\" role=\"img\" title=\"hole\">:hole:</span> :</p>\n<p><a href=\"https://github.com/bytecodealliance/jco/pull/585/commits/708cd3b95ed930a5e6b9e039d12494b87f197344\">Update commit</a><br>\n<a href=\"https://github.com/bytecodealliance/jco/pull/585/commits/1b2920bb0fce07db777a56b9ca831003186a7005\">Adding multi memory just a little bit later</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/pull/585/commits/708cd3b95ed930a5e6b9e039d12494b87f197344\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/bd0632c933ac849587b2546693ee76559eb5217c/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f3132333936383132373f733d34303026763d34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/pull/585/commits/708cd3b95ed930a5e6b9e039d12494b87f197344\" title=\"feat: wasi p3 async support for jco by vados-cosmonic Â· Pull Request #585 Â· bytecodealliance/jco\">feat: wasi p3 async support for jco by vados-cosmonic Â· Pull Request #585 Â· bytecodealliance/jco</a></div><div class=\"message_embed_description\">This PR is almost certain to be long lived, and contains the ongoing p3 async support for\nTo understand this PR, see the following other resources:\n\nhttps://github.com/WebAssembly/component-model/b...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/pull/585/commits/1b2920bb0fce07db777a56b9ca831003186a7005\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/bd0632c933ac849587b2546693ee76559eb5217c/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f3132333936383132373f733d34303026763d34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/pull/585/commits/1b2920bb0fce07db777a56b9ca831003186a7005\" title=\"feat: wasi p3 async support for jco by vados-cosmonic Â· Pull Request #585 Â· bytecodealliance/jco\">feat: wasi p3 async support for jco by vados-cosmonic Â· Pull Request #585 Â· bytecodealliance/jco</a></div><div class=\"message_embed_description\">This PR is almost certain to be long lived, and contains the ongoing p3 async support for\nTo understand this PR, see the following other resources:\n\nhttps://github.com/WebAssembly/component-model/b...</div></div></div>",
        "id": 505195493,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1741799032
    },
    {
        "content": "<p>unfortunately there's no green test run before the 227.1 update but maybe once the dust settles I'll go back and bisect to get at it properly -- will avoid squashing until then</p>",
        "id": 505195834,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1741799104
    },
    {
        "content": "<p>I've briefly mentioned it during the call earlier today, but I'll update in the thread as well.<br>\nI've managed to make Rust <a href=\"https://github.com/launchbadge/sqlx\">https://github.com/launchbadge/sqlx</a> crate run using <code>wasi:sockets@0.3.0-draft</code>, in particular I was able to make the Postgres <code>todos</code> example in the <code>sqlx</code> repo work with real Postgres instance running in a container.</p>\n<p>The code is available here: <a href=\"https://github.com/rvolosatovs/sqlx/tree/feat/wasip3\">https://github.com/rvolosatovs/sqlx/tree/feat/wasip3</a></p>\n<p>The component can be run using the Wasmtime CLI from this PR: <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/60\">https://github.com/bytecodealliance/wasip3-prototyping/pull/60</a></p>\n<p>This, of course, was not meant to be a production-ready implementation, but really just a validation, and it looks like we're in a pretty good state.</p>\n<p>I've recorded a video, but I'll be happy to write down the step-by-step instructions for running this if anyone is interested (please ask if you'd like that!)<br>\n<a href=\"/user_uploads/15107/suyOzhC3bDh94Lwo1FBCWkBc/Screen-Recording-2025-03-07-at-17.01.24.mov\">Screen Recording 2025-03-07 at 17.01.24.mov</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/launchbadge/sqlx\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/db41e932b0f00c83028cbf4c723fc50057930243/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366162626336383765366461333430373032393931633164323532383437343231303532633933323531643133623534356532326138626666353233626136332f6c61756e636862616467652f73716c78&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/launchbadge/sqlx\" title=\"GitHub - launchbadge/sqlx: ðŸ§° The Rust SQL Toolkit. An async, pure Rust SQL crate featuring compile-time checked queries without a DSL. Supports PostgreSQL, MySQL, and SQLite.\">GitHub - launchbadge/sqlx: ðŸ§° The Rust SQL Toolkit. An async, pure Rust SQL crate featuring compile-time checked queries without a DSL. Supports PostgreSQL, MySQL, and SQLite.</a></div><div class=\"message_embed_description\">ðŸ§° The Rust SQL Toolkit. An async, pure Rust SQL crate featuring compile-time checked queries without a DSL. Supports PostgreSQL, MySQL, and SQLite. - launchbadge/sqlx</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rvolosatovs/sqlx/tree/feat/wasip3\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/490fd29d30f325f11f3de95308b109e58fbec49b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346162316365306233386661313162666661666533393835343733623637333961653232636435383362366136306232643466336137326562633235623064362f72766f6c6f7361746f76732f73716c78&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rvolosatovs/sqlx/tree/feat/wasip3\" title=\"GitHub - rvolosatovs/sqlx at feat/wasip3\">GitHub - rvolosatovs/sqlx at feat/wasip3</a></div><div class=\"message_embed_description\">ðŸ§° The Rust SQL Toolkit. An async, pure Rust SQL crate featuring compile-time checked queries without a DSL. Supports PostgreSQL, MySQL, and SQLite. - GitHub - rvolosatovs/sqlx at feat/wasip3</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/60\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d4fc0461df873cb119ee104dc33eedffe07845c6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363138333466373730656235303664383163313636343530333931346430643635633531383633303038636136656137373438643337663638646236666634332f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3630&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/60\" title=\"feat(wasmtime-cli): enable async CM feature by rvolosatovs Â· Pull Request #60 Â· bytecodealliance/wasip3-prototyping\">feat(wasmtime-cli): enable async CM feature by rvolosatovs Â· Pull Request #60 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">With this I was able to run:\nmod bindings {\n    wit_bindgen::generate!({\n        world: &quot;wasi:cli/command&quot;,\n        async: {\n            exports: [\n                &quot;wasi:cli/run@0.3....</div></div></div>",
        "id": 505195991,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1741799147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> It turns out we can't postpone supporting <code>context.{get|set}</code> in <code>wasm-tools</code>, <code>wit-bindgen</code>, and <code>wasmtime</code> after all.  That's now the only way to save the guest-side task state (i.e. <code>wit-bindgen-rt</code>'s <code>FutureState</code>) when returning from an async-with-callback-lifted export.  We used to return a pointer to that state so the host could pass it back to us when calling the callback, but now we have to return a <code>CallbackCode</code> ORed with a <code>waitable-set</code>, and since we're avoiding using multivalue, the only way to stash and retrieve our task-local state is with <code>context.{get|set}</code>.</p>\n<p>Anyway, assuming you haven't started adding support for those intrinsics anywhere, I'm going to start adding them, since I'll be blocked otherwise.</p>",
        "id": 505518189,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741897308
    },
    {
        "content": "<p>I haven't started yet no</p>",
        "id": 505518452,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741897403
    },
    {
        "content": "<p>feel free</p>",
        "id": 505518456,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741897404
    },
    {
        "content": "<p>makes sense though I see</p>",
        "id": 505518523,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741897429
    },
    {
        "content": "<p>Continuing our discussion today of close-with-error -- I opened <a href=\"https://github.com/WebAssembly/component-model/issues/472\">https://github.com/WebAssembly/component-model/issues/472</a> on this topic since I think the current behavior (assuming I'm understanding everything right) is hazardous as trapping conditions depend on what other components are doing, when I'd prefer to have a trapping condition be a purely local decision within a component</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/472\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9174709935d92d7f63ed6cb2fb1bdc5d637d9814/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386133316361383535643231356138663939626632323431343634333035336236393337636166306437663261396363653737363633623839633835373261662f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f343732&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/472\" title=\"Require-error-on-close may be a composability hazard Â· Issue #472 Â· WebAssembly/component-model\">Require-error-on-close may be a composability hazard Â· Issue #472 Â· WebAssembly/component-model</a></div><div class=\"message_embed_description\">Currently as-specified it's required that for an open stream/future that an error is provided when dropping it, I believe for both the reader and the writer end. (please correct me if I'm wrong abo...</div></div></div>",
        "id": 506244850,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1742240252
    },
    {
        "content": "<p>along the lines of \"maybe can change things?\" I'm also curious in that issue if it's possible to in theory remove <code>error-context</code> altogether (or basically consider it a WIT extension)</p>",
        "id": 506245662,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1742240523
    },
    {
        "content": "<p>but I know I'm missing context, so I'd appreciate it if folks could help fill in the gaps</p>",
        "id": 506245717,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1742240541
    },
    {
        "content": "<p>Ok another follow-up here on error-context: <a href=\"https://github.com/WebAssembly/component-model/issues/474\">https://github.com/WebAssembly/component-model/issues/474</a> -- basically I'm curious if anyone has thoughts/objections on delaying the <code>error-context</code> type to after 0.3.0 entirely.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/474\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ef04160c6f3eb6c85dc204ea4595f011728fb78f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626465323463396663653134643462363439626461343162623033306164306164343666333735326631316365623861393237393437336663633331383665312f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f343734&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/474\" title=\"Defer `error-context` to after 0.3.0 Â· Issue #474 Â· WebAssembly/component-model\">Defer `error-context` to after 0.3.0 Â· Issue #474 Â· WebAssembly/component-model</a></div><div class=\"message_embed_description\">I talked today with a few folks and I wanted to write up our thoughts/conclusions into an issue to get some wider feedback before sending a PR to commit to anything. The basic premise is: Emoji-gat...</div></div></div>",
        "id": 506572780,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1742329181
    },
    {
        "content": "<p>another issue -- <a href=\"https://github.com/WebAssembly/component-model/issues/475\">https://github.com/WebAssembly/component-model/issues/475</a> -- with a change to futures/streams where they're likely to be represented in the future with two handles, not just one, and how we're still not 100% certain how this would all work</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/475\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5e2a2a6ec6d4564c16c3fd33234141399ee37a6b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366437386435613762663634383934656162643230343836353166346261336439643432346333633865343432653439373936656361613935373732653662332f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f343735&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/475\" title=\"Separately owned handles for read/write ends of futures/streams Â· Issue #475 Â· WebAssembly/component-model\">Separately owned handles for read/write ends of futures/streams Â· Issue #475 Â· WebAssembly/component-model</a></div><div class=\"message_embed_description\">I talked about this with some folks today but wanted to file an issue with our discussion and follow-ups. Today we realized that there is a previously-unknown issue with the semantics of \"just a si...</div></div></div>",
        "id": 506575842,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1742330243
    },
    {
        "content": "<p>In case anyone is interested in discussing <code>wasi:http</code> error handling, we have a call scheduled with <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> and <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> in 30 minutes to discuss <a href=\"https://github.com/WebAssembly/wasi-http/issues/164\">https://github.com/WebAssembly/wasi-http/issues/164</a> and <a href=\"https://github.com/WebAssembly/wasi-http/issues/163\">https://github.com/WebAssembly/wasi-http/issues/163</a></p>\n<p>meeting link: <a href=\"http://meet.google.com/jdu-rpka-gfk\">meet.google.com/jdu-rpka-gfk</a></p>\n<p>Feel free to join, especially, if you're well familiar with HTTP libraries in various guest languages</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/issues/164\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/81f7d326d5837ca92a1dc2a23350e30fa7728e98/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363434363532353961663939373535376534626564373338623439636332616330306261616230666466396139383963336461323166636666383130623838642f576562417373656d626c792f776173692d687474702f6973737565732f313634&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/issues/164\" title=\"[p3] `handle` implementations have no way of reporting errors occuring after response return Â· Issue #164 Â· WebAssembly/wasi-http\">[p3] `handle` implementations have no way of reporting errors occuring after response return Â· Issue #164 Â· WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">Assume the following pseudo-Rust pseudocode implementation of handle, which streams contents of a file represented by some descriptor fd using read-via-stream in response to an incoming request asy...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/issues/163\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/61023155c480492cfe53d6d1ad614f2703a72edd/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326436306632343663373539336462363538376639386565303732643364643832626232313030363665356432383364613536386231373036333330613838372f576562417373656d626c792f776173692d687474702f6973737565732f313633&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/issues/163\" title=\"[p3] `handle` implementations cannot forward trailers without trapping while handling transmit errors Â· Issue #163 Â· WebAssembly/wasi-http\">[p3] `handle` implementations cannot forward trailers without trapping while handling transmit errors Â· Issue #163 Â· WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">Components exporting wasi:http@0.3.0-draft/handle.handle cannot correctly forward incoming requests while tracking the body transmit error. Assume an application, which forwards the incoming reques...</div></div></div>",
        "id": 506761621,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1742398336
    },
    {
        "content": "<p>apologies for the short notice, I've been hoping to sum this up and open for discussion earlier this week, but I've been out sick for last 2 days</p>",
        "id": 506762209,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1742398452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> I've moved away from the auto-close semantics in <code>wasi:http</code>, proposed in <a href=\"https://github.com/WebAssembly/wasi-http/pull/162\">https://github.com/WebAssembly/wasi-http/pull/162</a>, instead throwing an error explicitly if live handles exist. Please take a look!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/pull/162\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/99a1da853cc5d7d62f7e3e7d823e4a417695f81c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613034376231313337376138373032646238633739313836636662326133393835386632653665323461303438623630356330646330313238393433376261612f576562417373656d626c792f776173692d687474702f70756c6c2f313632&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/pull/162\" title=\"feat(p3): be less trappy by rvolosatovs Â· Pull Request #162 Â· WebAssembly/wasi-http\">feat(p3): be less trappy by rvolosatovs Â· Pull Request #162 Â· WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">Following our discussion with @lukewagner earlier today:\n\nAuto-close any existing, active body resources on repeated calls to request.body or response.body\nAuto-close any existing, active body stre...</div></div></div>",
        "id": 506792326,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1742406304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> <span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> I've updated <a href=\"https://github.com/WebAssembly/wasi-http/pull/162\">https://github.com/WebAssembly/wasi-http/pull/162</a> yet again, would appreciate a review! I'll proceed with the implementation</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/pull/162\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/42dc3c2096cd406f7cf02520f0e48f1c9c6950ec/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636365336239363365303133633233656532643530383864623062353463343939393962613334396265353833363435666164613962373662643563303231382f576562417373656d626c792f776173692d687474702f70756c6c2f313632&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/pull/162\" title=\"feat(p3): be less trappy by rvolosatovs Â· Pull Request #162 Â· WebAssembly/wasi-http\">feat(p3): be less trappy by rvolosatovs Â· Pull Request #162 Â· WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">Make bodies non-optional for request and response constructors\nTake a future&lt;result&lt;option&lt;trailers&gt;, error-code&gt;&gt; parameter in request/response constructors (refs Defer error-con...</div></div></div>",
        "id": 507304796,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1742570779
    },
    {
        "content": "<p>Great work on this!</p>",
        "id": 507317503,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1742574119
    },
    {
        "content": "<p>FYI, I'm doing a pretty deep refactor of <code>concurrent.rs</code> and <code>futures_and_streams.rs</code> in <code>wasip3-prototyping</code>, having realized yesterday that most of the state I had put in <code>Store</code> actually belonged in <code>ComponentInstance</code>.  I don't anticipate any major public API changes, so it shouldn't affect the <code>wasmtime-wasi(-http)</code> work, but please avoid making changes to the aforementioned files until my PR is merged (or at least chat with me first).</p>",
        "id": 507347387,
        "sender_full_name": "Joel Dice",
        "timestamp": 1742583469
    },
    {
        "content": "<p>I'm running late to the status meeting, feel free to start without me</p>",
        "id": 509234314,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743434972
    },
    {
        "content": "<p>Hey all, rough notes from the status meeting are below (Hey <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> unfortunately I missed your update so please feel free to fill it in <span aria-label=\"bow\" class=\"emoji emoji-1f647\" role=\"img\" title=\"bow\">:bow:</span>):</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>2025/03/31 P3 Sync Meeting Notes</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<h1>Notes</h1>\n<h2>Joel's Update</h2>\n<ul>\n<li>Missed this, Yosh had it though</li>\n</ul>\n<h2>Alex's update</h2>\n<ul>\n<li>Rewrote all the streams stuff in the guest, basically.</li>\n<li>Going to get more review from joel on the stuff that changed</li>\n<li>Planning to start sketching task cancellation this week<ul>\n<li>Will also chat with Luke about this</li>\n</ul>\n</li>\n<li>Topic about moving stuff in wind</li>\n</ul>\n<h2>Victor's update</h2>\n<ul>\n<li>Not doing much here -- work on jco and componentize-js is moving forward, but leaving error-context as is</li>\n<li>Looks like we're all on the same page now (including Luke) with regards to what will stay for P3</li>\n<li>Need to add feature gate to wasmparser<ul>\n<li>Similar to async stackful, etc</li>\n</ul>\n</li>\n<li>Alex clarified that Wit bindgen work for converting test does <em>not</em> contribute to P3</li>\n</ul>\n<h2>Yosh's update</h2>\n<p>- Going to be out next week for 2 weeks</p>\n<h2>Discussion: wit-bindgen releases</h2>\n<ul>\n<li>We release wit-bindgen</li>\n<li>You can export with one version and import with another and things are fine, this is nice</li>\n<li>We need the thing sending the callback and the thing receiving to agree, and this can basically lead to a segfault<ul>\n<li>w/ different versions the issue is we're basically assuming versions of data passed around</li>\n</ul>\n</li>\n<li>Not sure how to fix<ul>\n<li>Maybe ensure everything passes through wasi-libc?</li>\n</ul>\n</li>\n<li>Joel: Let's put ourselves in the position of lib maintainers (C#, python, etc)<ul>\n<li>They probably don't want to deal with things that are statically linked in)</li>\n<li>We probably want to avoid writing more C code here?</li>\n<li>Alex: was mainly thinking about wit-bindgen in Rust, but yeah solving that generally would mean solving for wasi-libc</li>\n<li>Joel: We <em>could</em> have a .a file that would get used in multiple places?</li>\n</ul>\n</li>\n<li>Joel: we need an official way to say I have a resources, and I want you to give me a file descriptor for the given resource<ul>\n<li>This allows systems like dotnet to have heterogeneous collection of pollables, and await them with a single cal</li>\n<li>We already know several parties want this kind of functionality<ul>\n<li>Including mio</li>\n<li>Idea is we want arbitrary</li>\n</ul>\n</li>\n<li>Is there overlap with what we want for supporting aysnc &amp; what we used to want for pollables -- can we write some C code to support that?</li>\n<li>Alex: Yes, that's correct there is no rust code in wasi-libc (not even component-ld)</li>\n<li>Alex: Some misgivings about random thing turning into file descriptor</li>\n</ul>\n</li>\n<li>Joel: Right now dotnet is using private wasi-libc APIs to reosurce to file descriptor<ul>\n<li>They don't want separate code-paths for doing things like concurrently waiting on HTTP request and socket operations together easily</li>\n<li>Solution we give them needs to be better than reaching behind the scenes and using these private APIs</li>\n<li>There is some buy-in from dave &amp; dan Gohman</li>\n<li>Alex: This feels like it would have a lot of overhead, but for other languages to do something like that is fine</li>\n<li><strong>Refocusing on where the code should go:</strong><ul>\n<li>Alex: for the Waker issue, it should probably be a VTable</li>\n</ul>\n</li>\n<li>We're getting to the point that there are 4 bytes in wasi-libc, and that is the VTable pointer<ul>\n<li>Joel: Task local context get/set?</li>\n<li>Alex: nope, that would be reserved for runtime doing exports</li>\n<li>during execution of task, there is a static 4 bytes pointing to the vtable, but imports cannot assume anything, only exports get to use it</li>\n<li>your state</li>\n<li>Joel: What about coordinating between multiple languages? Vision was to move just enough into wasi-libc and that being the nexus<ul>\n<li>Alex: Yeah we're aligned here, just stating it differently -- the primitive is:<ul>\n<li>I'm importing some functionality</li>\n<li>I need to get awaited</li>\n<li>Imports need to communicate with some <em>random</em> export</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Joel: And multiple epxorts<ul>\n<li>I'm providing an export, w/ arbitrary wit-bindgen version</li>\n<li>Before exiting, in order to return a code back to the host, I need to reach down to wasi-libc to figure out <em>WHAT</em> to return</li>\n<li>Alex: Not quite, the language<ul>\n<li>says as an import, a backcchannel to say \"I just made an async call and it returned blocked, I'm telling you that I'm waiting on something\"</li>\n</ul>\n</li>\n<li>Joel: OK: another example -- I can create a waitable set, but knowing what waitable to put in is hard<ul>\n<li>Need to return wait w/ a full waitable set.</li>\n<li>Alex: When export started, you register your callback for waitable set changes</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Victor: This feels like a protocol, do we need to forward-version it?<ul>\n<li>Alex: We can have an extensible VTable in C, so there's a way to put a version in front of the vtable</li>\n<li>anyone can register a VTable with any version, and we check the versions first, use baseline + whatever else</li>\n<li>We probably will need to bake in some constraints that everyone has to support the v1 version or something</li>\n</ul>\n</li>\n<li>Victor: What about some accretion only API with opt-in breakage (if you use v3, no v2)?<ul>\n<li>Alex: There could be an issue where you use a v3 API but a lib you're using uses v2</li>\n<li>We would have to wait for the whole world to change before we could update</li>\n</ul>\n</li>\n<li>Alex: Will write up a header file and a doc to describe what's going on</li>\n</ul>\n</li>\n</ul>\n<h2>Roman's update</h2>\n<ul>\n<li>Thanks Joel &amp; Alex for bugfixes!</li>\n<li>Most tests pass now, looks to be in pretty good shape, this week will continue working on this</li>\n<li>Hopefully something for wasi:http tomorrow</li>\n<li>One question for stream/future -- no sync implementations any more (<code>write_one</code> rather than <code>send()</code>)<ul>\n<li>Alex: the actual APIs are completely changing -- streams have nothing to do with Sync or Rust stream trait</li>\n<li>type signature is completely different now, mostly related to buffer management</li>\n<li>Core primitive of stream write is rather than give a buffer and you lose it, you give a buffer it does a single write and you get back what happens</li>\n<li>Joel: Some work coming down to rebase on as well</li>\n</ul>\n</li>\n</ul>\n<h2>Discussion: coordination with context.{get,set}</h2>\n<ul>\n<li>Joel: Each epxort will do a context.{get,set} pointing to whatever it wants to for that task?<ul>\n<li>Task a/b/c will store completely separate things, but because they're different tasks they won't overlap</li>\n<li>So we don't need any agreement on what gets stored via those intrinsics</li>\n<li>Alex: On the rust side want two values -- magic value and a pointer &amp; remove both at the same time<ul>\n<li>Joel: only problem was that Luke thought slot 0 should be the stack pointer for when we have multiple stacks... Maybe 3 slots?</li>\n<li>Alex: probably a great thing to write down then, maybe languages should only use one of them</li>\n<li>Joel: Yes, IIRC slot 0 was probably supposed to be special</li>\n<li>Alex: Yup, languages probably want to add some magic and then remove/re-add it as operations go </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div></div>",
        "id": 509251381,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1743438514
    },
    {
        "content": "<p>thanks for taking notes!</p>",
        "id": 509252581,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743438856
    },
    {
        "content": "<p>Thanks for taking notes!  My update:</p>\n<ul>\n<li>Finished a big refactor to move state from <code>Store</code> to <code>ComponentInstance</code>, fix <code>wasmtime-wast</code>, remove <code>Sync</code> bounds on <code>Future</code>s, etc.</li>\n<li>Fixed a bunch of bugs Roman and Alex had reported</li>\n<li>Started adding support for incomplete writes with <code>StreamWriter</code> (i.e. returning unwritten items)</li>\n</ul>",
        "id": 509252879,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743438939
    },
    {
        "content": "<p>Looks like I've run into another guest trap while working on <code>wasi:http</code> <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/95\">https://github.com/bytecodealliance/wasip3-prototyping/issues/95</a></p>\n<p>cc <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/95\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2111855f47b14fbc1024aba4c4fa5b3208014a01/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343735373833303337623131623638656464383938363137623034386439646132353063373134623366623531393435353364633736393130666332626336662f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f6973737565732f3935&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/95\" title=\"guest trap with `stream or future write canceled when no write is pending` Â· Issue #95 Â· bytecodealliance/wasip3-prototyping\">guest trap with `stream or future write canceled when no write is pending` Â· Issue #95 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">On dabcd77: cargo test -p wasmtime-wasi-http 'p3::wasi_http_proxy_tests' traps in the guest with: test p3::wasi_http_proxy_tests ... FAILED failures: ---- p3::wasi_http_proxy_tests stdout ---- Erro...</div></div></div>",
        "id": 509499581,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743525280
    },
    {
        "content": "<p>Thanks for opening the issue; I'll take a look when I get a chance.</p>",
        "id": 509499842,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743525357
    },
    {
        "content": "<p>that one might \"just go away\" once the wit-bindgen update is merged</p>",
        "id": 509499898,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743525364
    },
    {
        "content": "<p>Should I try pulling in some of the changes that you all were working on? Any chance <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/94\">https://github.com/bytecodealliance/wasip3-prototyping/pull/94</a> could help here?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/94\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d7761816d2786c671cb7500dc9772026f78da4f6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396163396261653836666237653934353832653337656539623238363037356664343262313731613637636230616234326336643866356136393463363633312f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3934&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/94\" title=\"Updating for wit-bindgen refactoring by alexcrichton Â· Pull Request #94 Â· bytecodealliance/wasip3-prototyping\">Updating for wit-bindgen refactoring by alexcrichton Â· Pull Request #94 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">There&#39;s a lot of things in flight and I&#39;m rapidly losing steam today. I wanted to open this up to make other folks aware this is coming though. Sorry I don&#39;t have the time/energy right ...</div></div></div>",
        "id": 509499917,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743525369
    },
    {
        "content": "<p>I'll try rebasing and report</p>",
        "id": 509499979,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743525391
    },
    {
        "content": "<p>that's under the assumption the bug lies in the previous wit-bindgen code, which could also be wrong</p>",
        "id": 509499985,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743525393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/channel/219900-wasi/topic/WASIP3.20Update/near/509499898\">said</a>:</p>\n<blockquote>\n<p>that one might \"just go away\" once the wit-bindgen update is merged</p>\n</blockquote>\n<p>I think there are still places in the host code that are too restrictive; we'll see.</p>",
        "id": 509500107,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743525435
    },
    {
        "content": "<p>I don't think #94 will make a difference (regarding the trap), but I could wrong.</p>",
        "id": 509500225,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743525470
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> I've merged <code>main</code> with your branch</p>",
        "id": 509524749,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743533291
    },
    {
        "content": "<p>looks like <code>http_0_3_outbound_request_content_length.rs</code> is failing because trailers fail to get sent (I guess something hung up unexpectedly?)  and <code>p3::wasi_http_proxy_tests</code> is not finishing so seems like a deadlock of some kind</p>",
        "id": 509525430,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743533481
    },
    {
        "content": "<p>Thanks Alex! Both are actually expected for now. For content length one we can't directly translate that from wasip3 - we'll have to call <code>handle</code> to actually try and send a request/response, was just chatting about it with <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> <br>\nFor the incoming HTTP I'll still have to wire up the set of promises to drive guest tasks after return</p>",
        "id": 509530010,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743535128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> what's the status on <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/97\">https://github.com/bytecodealliance/wasip3-prototyping/pull/97</a> (I just approved it)? Is it ready for me to build upon in <code>wasi:http</code> work?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/97\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7b4b38768a799806927adfb9ca120ca3516ff882/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373339303738623664353036333532663137616139633464616461663965343835646262613966393564353164313261653666363136333538383631353534632f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3937&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/97\" title=\"update host APIs for working with streams and futures by dicej Â· Pull Request #97 Â· bytecodealliance/wasip3-prototyping\">update host APIs for working with streams and futures by dicej Â· Pull Request #97 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">This changes a few things about the {Stream|Future}{Writer|Reader} APIs:\n\n\nBoth StreamWriter::write and StreamReader::read support buffer reuse by always returning the buffer to the caller (or more...</div></div></div>",
        "id": 509945894,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743688105
    },
    {
        "content": "<p>I was planning to add some unit tests this morning, but I can go ahead and merge it and add the tests in a separate PR.</p>",
        "id": 509946396,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743688209
    },
    {
        "content": "<p>Also, I should probably add <code>BytesBuffer::into_inner</code> and <code>VecBuffer::into_inner</code> methods for retrieving the unwritten items if desired.  Let me know if you need either of those; they're trivial to add.</p>",
        "id": 509946900,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743688327
    },
    {
        "content": "<p>I think incremental changes are good and since the WASI tests pass, that's good enough for me, so I'd say go ahead and merge</p>",
        "id": 509948231,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743688629
    },
    {
        "content": "<p>Done!</p>",
        "id": 509948286,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743688644
    },
    {
        "content": "<p>(well, queued anyway)</p>",
        "id": 509948322,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743688651
    },
    {
        "content": "<p>I definitely will need some way to go from <code>BytesBuffer</code> to <code>Bytes</code>, I'd prefer that to be a <code>From&lt;BytesBuffer&gt; for Bytes</code><br>\nI'm a bit confused though as to why this conversion for <code>BytesMut</code> would not care about offset <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/245d7e1c5a81d3db8c6d88e4f42a1634ba598f8d/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams/buffers.rs#L284\">https://github.com/bytecodealliance/wasip3-prototyping/blob/245d7e1c5a81d3db8c6d88e4f42a1634ba598f8d/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams/buffers.rs#L284</a> while Deref <em>does</em> <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/245d7e1c5a81d3db8c6d88e4f42a1634ba598f8d/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams/buffers.rs#L298\">https://github.com/bytecodealliance/wasip3-prototyping/blob/245d7e1c5a81d3db8c6d88e4f42a1634ba598f8d/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams/buffers.rs#L298</a> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/245d7e1c5a81d3db8c6d88e4f42a1634ba598f8d/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams/buffers.rs#L284\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/15f6fd2c99731cff74a4157d95dfe5d46f0bf788/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393135663431616133626565663137343639656234636163356165393931306361343331653631366363623338653966623337313837336535326232323266302f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/245d7e1c5a81d3db8c6d88e4f42a1634ba598f8d/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams/buffers.rs#L284\" title=\"wasip3-prototyping/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams/buffers.rs at 245d7e1c5a81d3db8c6d88e4f42a1634ba598f8d Â· bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams/buffers.rs at 245d7e1c5a81d3db8c6d88e4f42a1634ba598f8d Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/245d7e1c5a81d3db8c6d88e4f42a1634ba598f8d/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams/buffers.rs#L298\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/15f6fd2c99731cff74a4157d95dfe5d46f0bf788/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393135663431616133626565663137343639656234636163356165393931306361343331653631366363623338653966623337313837336535326232323266302f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/245d7e1c5a81d3db8c6d88e4f42a1634ba598f8d/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams/buffers.rs#L298\" title=\"wasip3-prototyping/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams/buffers.rs at 245d7e1c5a81d3db8c6d88e4f42a1634ba598f8d Â· bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams/buffers.rs at 245d7e1c5a81d3db8c6d88e4f42a1634ba598f8d Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div>",
        "id": 509963281,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743691933
    },
    {
        "content": "<p>To be more specific, I'd want to get the <code>Bytes</code> from <code>BytesBuffer</code>, but I'd expect to only get the filled part of it, not the whole underlying buffer</p>",
        "id": 509963555,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743692001
    },
    {
        "content": "<p>The idea with <code>BytesMutBuffer::into_inner</code> is that you'd call it when you just want to reuse the <code>BytesMut</code> without caring which parts were written and which weren't.  Whereas the <code>Deref</code> impl gives you just the parts which haven't been written yet.</p>",
        "id": 509963941,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743692102
    },
    {
        "content": "<p>I could alternatively change <code>BytesMutBuffer::into_inner</code> into <code>fn into_parts(self) -&gt; (BytesMut, usize)</code> if that would be useful.</p>",
        "id": 509964130,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743692152
    },
    {
        "content": "<p>(where the <code>usize</code> is the offset to the start of the unwritten bytes)</p>",
        "id": 509964260,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743692176
    },
    {
        "content": "<p>With <code>VecBuffer&lt;T&gt;</code>, it will be a bit different since we need to account for non-<code>Copy</code> <code>T</code>, so <code>VecBuffer::into_inner</code> will actually need to do a <code>memmove</code> to shift the unwritten items to the start of the <code>Vec</code> before returning it.</p>",
        "id": 509964821,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743692303
    },
    {
        "content": "<p>I guess what I'm looking for is roughly <a href=\"https://docs.rs/tokio/latest/tokio/io/struct.ReadBuf.html#method.filled\">https://docs.rs/tokio/latest/tokio/io/struct.ReadBuf.html#method.filled</a><br>\nMaybe there could be a way to just query the offset for <code>BytesBuffer</code>? I'd then be able to call <code>into_inner</code> and do the split myself</p>",
        "id": 509965011,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743692351
    },
    {
        "content": "<p>Sure.  The main idea is that you might either only care about the unwritten parts <em>or</em> just want to clear reuse the whole buffer <em>or</em> both.  As long as we support all those options, we should be good.</p>",
        "id": 509965362,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743692436
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">filled</span><span class=\"p\">().</span><span class=\"n\">len</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">into_inner</span><span class=\"p\">();</span>\n<span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">truncate</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>that'd be the usage I'd imagine</p>",
        "id": 509965542,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743692482
    },
    {
        "content": "<p>btw, any way we could integrate with <code>std::io::Cursor</code> here <a href=\"https://doc.rust-lang.org/nightly/std/io/struct.Cursor.html\">https://doc.rust-lang.org/nightly/std/io/struct.Cursor.html#</a> ?<br>\nDoes <code>BytesBuffer</code> do cosiderably more than <code>std::io::Cursor&lt;Bytes&gt;</code> could?</p>",
        "id": 509966356,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743692692
    },
    {
        "content": "<p>Maybe I'm not quite understanding.  If you start with a <code>BytesMutBuffer</code> with, say, 16 bytes, then you do a <code>write</code>, and the write delivers 7 bytes, then <code>offset</code> will be 7 and <code>remaining(&amp;self)</code> will return 9, and (currently) <code>into_inner</code> will return <code>BytesMut</code> with all 16 bytes.  So what's the purpose of your <code>truncate</code> call above?  Do you want the result to have the first 7 bytes or the last 9 bytes?</p>",
        "id": 509966650,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743692770
    },
    {
        "content": "<p>Regarding <code>Cursor</code>: I sort of assumed it only worked with <code>Copy</code> payloads, but maybe I was wrong.  Let me take a closer look.</p>",
        "id": 509966966,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743692855
    },
    {
        "content": "<p>I guess it doesn't matter, since <code>Bytes</code> is only about <code>u8</code>, so yes, I guess we could get rid of <code>BytesMutBuffer</code> and <code>BytesBuffer</code> in favor of <code>Cursor&lt;BytesMut&gt;</code> and <code>Cursor&lt;Bytes&gt;</code> respectively, but keep <code>VecBuffer</code> since it supports moving owned values, which <code>Cursor</code> doesn't AFAICT.</p>",
        "id": 509967675,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743693019
    },
    {
        "content": "<p>I was actually thinking about the other way round, so doing a read, I'm still getting familiar with this new API. What I need is a way to go from <code>StreamReader&lt;BytesBuffer&gt;</code> to <code>Stream&lt;Bytes&gt;</code>. It appears that naive <code>BytesBuffer::into_inner</code> might give more bytes than the guest might have written</p>",
        "id": 509967827,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743693058
    },
    {
        "content": "<p>All <code>BytesBuffer::into_inner</code> would do is give you back the entire <code>Bytes</code> (i.e. including both the written and unwritten bytes), which is what <code>Cursor&lt;Bytes&gt;::into_inner</code> also does if I'm reading correctly.</p>",
        "id": 509968235,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743693159
    },
    {
        "content": "<p>But you can always split a <code>Bytes</code> if you only want a subset, of course</p>",
        "id": 509968576,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743693242
    },
    {
        "content": "<p>Oh, hold on.  If you have a <code>StreamReader</code>, then you don't need to mess with <code>BytesBuffer</code> at all.  <code>BytesBuffer</code> is only for <em>writing</em> -- it doesn't make sense for (and indeed won't work with) <code>StreamReader</code>.</p>",
        "id": 509968865,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743693307
    },
    {
        "content": "<p>Just use <code>StreamReader&lt;BytesMut&gt;</code>.</p>",
        "id": 509968913,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743693318
    },
    {
        "content": "<p>yeah, that's what I'd guess</p>",
        "id": 509968936,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743693325
    },
    {
        "content": "<p>Alright, this makes sense to me then</p>",
        "id": 509969006,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743693344
    },
    {
        "content": "<p>er, I guess I mean <code>StreamReader&lt;BytesMut&gt;</code> since there's no way to add items to a <code>Bytes</code></p>",
        "id": 509969264,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743693401
    },
    {
        "content": "<p>If you have a moment, we could jump on a call and I could quickly show you the use case I'm working with</p>",
        "id": 509971789,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743693972
    },
    {
        "content": "<p>Yup; want to send me a link?</p>",
        "id": 509972052,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743694035
    },
    {
        "content": "<p><a href=\"https://meet.google.com/hqc-yvwc-hgd\">https://meet.google.com/hqc-yvwc-hgd</a></p>",
        "id": 509972130,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743694053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> : This adds an <code>Instance::promise</code> method for wrapping a <code>Future</code> in a <code>Promise</code>: <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/98\">https://github.com/bytecodealliance/wasip3-prototyping/pull/98</a></p>\n<p>BTW, if all you're doing is calling <code>Promise::into_future</code> the then later converting that back to a <code>Promise</code>, you could avoid both steps and just leave it as a <code>Promise</code>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/98\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9a7ff89ac7bb7151889d42da0eb4fc26daf8116c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653838626134323833363333316263613534616665373462326535343234333062643965386335356361623735623238346365376462343966373538613037372f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3938&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/98\" title=\"add `Instance::promise` for wrapping a `Future` in a  `Promise` by dicej Â· Pull Request #98 Â· bytecodealliance/wasip3-prototyping\">add `Instance::promise` for wrapping a `Future` in a  `Promise` by dicej Â· Pull Request #98 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">This may be useful as e.g. an alternative or complement to PromisesUnordered\nwhere you want to compose some number of Promises in an async function or\nblock with arbitrary control flow that might b...</div></div></div>",
        "id": 509989512,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743698633
    },
    {
        "content": "<p>I'll start working on replacing <code>Bytes{Mut}Buffer</code> with <code>Cursor&lt;Bytes{Mut}&gt;</code> next</p>",
        "id": 509989720,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743698684
    },
    {
        "content": "<p>I'd prefer leaving it as <code>Promise</code>, but that would prevent me from polling it multiple times in the guest task, since I have to move it to call <code>into_future</code><br>\nThat's the reason I'm suggesting the <code>poll(cx, store)</code> method on <code>Promise</code>, actually</p>",
        "id": 509993495,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743699768
    },
    {
        "content": "<p>btw, impls for <code>std::io::Cursor&lt;impl Buf{,Mut}&gt;</code> could be even more useful <a href=\"https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html\">https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html</a> <a href=\"https://docs.rs/bytes/latest/bytes/buf/trait.BufMut.html\">https://docs.rs/bytes/latest/bytes/buf/trait.BufMut.html</a><br>\nand would allow using e.g. <code>std::io::Cursor&lt;Box&lt;[u8]&gt;&gt;</code> as a buffer passed to <code>write</code></p>",
        "id": 509994814,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743700111
    },
    {
        "content": "<p>I <em>think</em> <code>promise.poll(cx, store)</code> would be equivalent to doing <code>pin!(promise.get(store)).poll(cx)</code></p>",
        "id": 509995013,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743700169
    },
    {
        "content": "<p>that's what I'm doing now, but not sure if that breaks any runtime assumptions</p>",
        "id": 509995179,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743700211
    },
    {
        "content": "<p>e.g. is this \"cancel safe\"?</p>",
        "id": 509995250,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743700234
    },
    {
        "content": "<p>I think it should be fine; let me know if you see anything weird.<br>\nYes, should be cancel safe, although that partly depends on the underlying <code>Future</code> wrapped by the <code>Promise</code>.  All the existing public APIs that return <code>Promise</code>s wrap cancel-safe <code>Future</code>s AFAIK.</p>",
        "id": 509995515,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743700317
    },
    {
        "content": "<p>if I keep the promises around, looks like I can do</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">pin</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">view</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">contents_rx</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">))).</span><span class=\"n\">poll</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>in guest tasks rather than using <code>into_future</code></p>",
        "id": 509997793,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743701014
    },
    {
        "content": "<p>where <code>contents_rx</code> is a promise</p>",
        "id": 509997850,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743701029
    },
    {
        "content": "<p>is this a bad idea?</p>",
        "id": 509997972,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743701059
    },
    {
        "content": "<p>I could also add a <code>Promise::get_mut() -&gt; Pin&lt;&amp;mut dyn Future ...&gt;</code> method (or something like that; not sure about the types exactly)</p>",
        "id": 509998148,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743701114
    },
    {
        "content": "<p>Hmm, but then you'd have no way to feed it a store, so nevermind</p>",
        "id": 509998402,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743701193
    },
    {
        "content": "<blockquote>\n<p>is this a bad idea?</p>\n</blockquote>\n<p>Not if it works <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 509998516,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743701228
    },
    {
        "content": "<p>actually, I think the borrow checker will reject it</p>",
        "id": 509998630,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743701266
    },
    {
        "content": "<p>and if it doesn't then something's very wrong, because the future should close over the store ref</p>",
        "id": 509998726,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743701286
    },
    {
        "content": "<p>meaning you won't be able to return the future from <code>Accessor::with</code></p>",
        "id": 509998888,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743701342
    },
    {
        "content": "<p>oh, the <code>get</code> also moves the <code>Promise</code></p>",
        "id": 509999366,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743701482
    },
    {
        "content": "<p>so that does not work</p>",
        "id": 509999381,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743701487
    },
    {
        "content": "<p>oh, right</p>",
        "id": 509999450,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743701510
    },
    {
        "content": "<p>I just realized <code>Instance::promise</code> will redundantly <code>Box::pin</code> the future you give it if it's already a <code>Pin&lt;Box&lt;dyn Future&gt;&gt;&gt;</code> -- I should add a <code>promise_from_boxed</code> that takes an already-boxed future.</p>",
        "id": 510000482,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743701799
    },
    {
        "content": "<p>maybe it could take <code>impl Into&lt;Pin&lt;Box&lt;dyn Future&gt;&gt;&gt;&gt;</code>?</p>",
        "id": 510002989,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743702513
    },
    {
        "content": "<p>Also, updated the PR and ran into:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">rvolosatovs</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">checkouts</span><span class=\"o\">/</span><span class=\"n\">witx</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"o\">-</span><span class=\"mi\">80318</span><span class=\"n\">ec43c150aef</span><span class=\"o\">/</span><span class=\"mi\">40</span><span class=\"n\">ca9b1</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">guest</span><span class=\"o\">-</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">rt</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">async_support</span><span class=\"o\">/</span><span class=\"n\">stream_support</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">167</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">:</span>\n<span class=\"nc\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">buf</span><span class=\"p\">.</span><span class=\"n\">remaining</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StreamResult</span><span class=\"p\">::</span><span class=\"n\">Closed</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 510003046,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743702532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"484032\">Roman Volosatovs</span> <a href=\"#narrow/channel/219900-wasi/topic/WASIP3.20Update/near/510002989\">said</a>:</p>\n<blockquote>\n<p>maybe it could take <code>impl Into&lt;Pin&lt;Box&lt;dyn Future&gt;&gt;&gt;&gt;</code>?</p>\n</blockquote>\n<p>Do arbitrary futures implement that?  I want to make sure you can do e.g. <code>let p = instance.promise(store, async move { ... });</code></p>",
        "id": 510003388,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743702642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"484032\">Roman Volosatovs</span> <a href=\"#narrow/channel/219900-wasi/topic/WASIP3.20Update/near/510003046\">said</a>:</p>\n<blockquote>\n<p>Also, updated the PR and ran into:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">rvolosatovs</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">checkouts</span><span class=\"o\">/</span><span class=\"n\">witx</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"o\">-</span><span class=\"mi\">80318</span><span class=\"n\">ec43c150aef</span><span class=\"o\">/</span><span class=\"mi\">40</span><span class=\"n\">ca9b1</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">guest</span><span class=\"o\">-</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">rt</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">async_support</span><span class=\"o\">/</span><span class=\"n\">stream_support</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">167</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">:</span>\n<span class=\"nc\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">buf</span><span class=\"p\">.</span><span class=\"n\">remaining</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StreamResult</span><span class=\"p\">::</span><span class=\"n\">Closed</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>If you can push what you have and tell me how to repro, I'll take a look.</p>",
        "id": 510003504,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743702689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/channel/219900-wasi/topic/WASIP3.20Update/near/510003388\">said</a>:</p>\n<blockquote>\n<p>Do arbitrary futures implement that?  I want to make sure you can do e.g. <code>let p = instance.promise(store, async move { ... });</code></p>\n</blockquote>\n<p>Alternatively, we could just make <code>Instance::promise</code> require already boxed futures and make the caller box if necessary.</p>",
        "id": 510003757,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743702772
    },
    {
        "content": "<p>yep, working on that</p>\n<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/channel/219900-wasi/topic/WASIP3.20Update/near/510003388\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"484032\">Roman Volosatovs</span> <a href=\"#narrow/channel/219900-wasi/topic/WASIP3.20Update/near/510002989\">said</a>:</p>\n<blockquote>\n<p>maybe it could take <code>impl Into&lt;Pin&lt;Box&lt;dyn Future&gt;&gt;&gt;&gt;</code>?</p>\n</blockquote>\n<p>Do arbitrary futures implement that?  I want to make sure you can do e.g. <code>let p = instance.promise(store, async move { ... });</code></p>\n</blockquote>\n<p>not really, there's <code>Box</code> -&gt; <code>Pin</code> (<a href=\"https://doc.rust-lang.org/std/pin/struct.Pin.html#impl-From%3CBox%3CT,+A%3E%3E-for-Pin%3CBox%3CT,+A%3E%3E\">https://doc.rust-lang.org/std/pin/struct.Pin.html#impl-From%3CBox%3CT,+A%3E%3E-for-Pin%3CBox%3CT,+A%3E%3E</a>), which sort of helps, but given that this API is meant to be pretty low-level, I don't feel like it's an issue</p>",
        "id": 510003928,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743702833
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/100\">https://github.com/bytecodealliance/wasip3-prototyping/issues/100</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/100\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3fe3356b7f2eec4c70e3e57489a838f175ee841e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373533663433346265663862656461653263356136353630316564323239623135326135323436646235356665643264623334653337346464393366383263632f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f6973737565732f313030&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/100\" title=\"host panic in stream support Â· Issue #100 Â· bytecodealliance/wasip3-prototyping\">host panic in stream support Â· Issue #100 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">On dffca0b cargo test -p wasmtime-wasi-http 'p3::outgoing::http_0_3_outbound_request_large_post' panics with: thread '&lt;unnamed&gt;' panicked at /Users/rvolosatovs/.cargo/git/checkouts/witx-bindgen-803...</div></div></div>",
        "id": 510004488,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743703011
    },
    {
        "content": "<p>Almost done with the <code>Cursor</code> PR, will debug #100 after that</p>",
        "id": 510004678,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743703071
    },
    {
        "content": "<p>awesome, thank you!</p>",
        "id": 510004710,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743703080
    },
    {
        "content": "<p>Just pushed the <code>Cursor</code> PR; taking a break for lunch, but will take a look at #100 after that if <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> hasn't already figured it out.</p>",
        "id": 510009078,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743704509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> if I were to construct a <code>Promise</code> using <code>Instance::promise</code>, am I right in assuming that I can use <code>Promise::into_future</code> inside the future I passed to <code>Instance::promise</code>? (since it's running inside a <code>Promise</code>)</p>",
        "id": 510149331,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743763549
    },
    {
        "content": "<p>Yes, correct.  I started adding more docs with examples yesterday.  I'll push a PR with those today.</p>",
        "id": 510181929,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743768060
    },
    {
        "content": "<p>Awesome, I used that trick to get the incoming HTTP working <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/58/commits/d4c69cf62ab83117f7a5cce684f03942b1050f2e\">https://github.com/bytecodealliance/wasip3-prototyping/pull/58/commits/d4c69cf62ab83117f7a5cce684f03942b1050f2e</a></p>\n<p>I also reworked the API a bit after our discussion, now everything is promise-based, so it's up to the caller to figure out how to poll it, meaning multiple concurrent calls are possible using the same store, while still getting back a fully-compliant <code>http_body::Body</code>, e.g. for a single call <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/d4c69cf62ab83117f7a5cce684f03942b1050f2e/crates/wasi-http/tests/all/p3/mod.rs#L183-L207\">https://github.com/bytecodealliance/wasip3-prototyping/blob/d4c69cf62ab83117f7a5cce684f03942b1050f2e/crates/wasi-http/tests/all/p3/mod.rs#L183-L207</a><br>\nSo the actual store is never moved</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/58/commits/d4c69cf62ab83117f7a5cce684f03942b1050f2e\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c4038796183d40603f87dc1d79e82edc1eb2d1d8/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f31323837373930353f733d34303026763d34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/58/commits/d4c69cf62ab83117f7a5cce684f03942b1050f2e\" title=\"feat: implement `wasi:http` by rvolosatovs Â· Pull Request #58 Â· bytecodealliance/wasip3-prototyping\">feat: implement `wasi:http` by rvolosatovs Â· Pull Request #58 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Implementation of WebAssembly/wasi-http#162</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/d4c69cf62ab83117f7a5cce684f03942b1050f2e/crates/wasi-http/tests/all/p3/mod.rs#L183-L207\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a4c43be9608a2504a0ea506c6ec3cb7390960728/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653461336234323265396663616631376639613534633866613562396636643139393361626464663265346435383737643439653064623839323034386233352f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/d4c69cf62ab83117f7a5cce684f03942b1050f2e/crates/wasi-http/tests/all/p3/mod.rs#L183-L207\" title=\"wasip3-prototyping/crates/wasi-http/tests/all/p3/mod.rs at d4c69cf62ab83117f7a5cce684f03942b1050f2e Â· bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/wasi-http/tests/all/p3/mod.rs at d4c69cf62ab83117f7a5cce684f03942b1050f2e Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div>",
        "id": 510198532,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743772185
    },
    {
        "content": "<p>And we have an HTTP roundtrip :) <a href=\"https://github.com/rvolosatovs/p3-http-test\">https://github.com/rvolosatovs/p3-http-test</a></p>\n<p>using wasmtime from <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/58\">https://github.com/bytecodealliance/wasip3-prototyping/pull/58</a> + <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/commit/b007214c67243d00078b444937562c2413664eb0\">https://github.com/bytecodealliance/wasip3-prototyping/commit/b007214c67243d00078b444937562c2413664eb0</a> applied on top</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rvolosatovs/p3-http-test\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b7797693f0ae166a73de69db45ec0062e84c4fab/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323130326431386535346462393664323961646538663032643966323633666164343338356663626530323961626434303265356163666162623465313531662f72766f6c6f7361746f76732f70332d687474702d74657374&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rvolosatovs/p3-http-test\" title=\"GitHub - rvolosatovs/p3-http-test: `wasi:http@0.3.0` demo\">GitHub - rvolosatovs/p3-http-test: `wasi:http@0.3.0` demo</a></div><div class=\"message_embed_description\">`wasi:http@0.3.0` demo. Contribute to rvolosatovs/p3-http-test development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/58\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e970951b69ee021c64b4599a61417334d5dcd437/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383130323166633635313065613731633865306136666466363234663538336537393232386330656661353564623434353065613232363761626461306239382f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3538&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/58\" title=\"feat: implement `wasi:http` by rvolosatovs Â· Pull Request #58 Â· bytecodealliance/wasip3-prototyping\">feat: implement `wasi:http` by rvolosatovs Â· Pull Request #58 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Implementation of WebAssembly/wasi-http#162\nWith Wasmtime binary built from this PR with this patch applied: b007214 (from #60), I have the complete round trip working using components in https://g...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/commit/b007214c67243d00078b444937562c2413664eb0\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7cc93fe317317507e283855bc683ad24aad9e498/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333039313965363065343861636334643732643864643763623165626139393361663664343934333234623331346538306238396634623832363434633864322f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f636f6d6d69742f62303037323134633637323433643030303738623434343933373536326332343133363634656230&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/commit/b007214c67243d00078b444937562c2413664eb0\" title=\"feat(wasmtime-run): run components exporting `wasi:cli@0.3` Â· bytecodealliance/wasip3-prototyping@b007214\">feat(wasmtime-run): run components exporting `wasi:cli@0.3` Â· bytecodealliance/wasip3-prototyping@b007214</a></div><div class=\"message_embed_description\">Signed-off-by: Roman Volosatovs &lt;rvolosatovs@riseup.net&gt;</div></div></div>",
        "id": 510229070,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743779960
    },
    {
        "content": "<p>I'm marking <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/58\">https://github.com/bytecodealliance/wasip3-prototyping/pull/58</a> ready for review, since it grew pretty big at this point, I feel like we(I) can continue porting the rest of incoming HTTP tests etc in follow-ups</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/58\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e970951b69ee021c64b4599a61417334d5dcd437/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383130323166633635313065613731633865306136666466363234663538336537393232386330656661353564623434353065613232363761626461306239382f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3538&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/58\" title=\"feat: implement `wasi:http` by rvolosatovs Â· Pull Request #58 Â· bytecodealliance/wasip3-prototyping\">feat: implement `wasi:http` by rvolosatovs Â· Pull Request #58 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Implementation of WebAssembly/wasi-http#162\nWith Wasmtime binary built from this PR with this patch applied: b007214 (from #60), I have the complete round trip working using components in https://g...</div></div></div>",
        "id": 510236882,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743782079
    },
    {
        "content": "<p>Awesome!  Yeah, it will be great to get that merged finally so we're not juggling branches a rebasing so much.  I'll take a look today.</p>",
        "id": 510241500,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743783197
    },
    {
        "content": "<p>any idea what this could mean <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/105\">https://github.com/bytecodealliance/wasip3-prototyping/issues/105</a> ?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/105\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/81fec626add9d49ebc84d84736ee412926a57fed/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306637353366386137663364393839646163353466323861656666323832643163366162613438336437313637306437373130376431353233373666333133362f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f6973737565732f313035&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/issues/105\" title=\"Test panic on riscv64 Â· Issue #105 Â· bytecodealliance/wasip3-prototyping\">Test panic on riscv64 Â· Issue #105 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Not really sure how to debug this, when trying to merge #58 , tests on riscv64 panic with: failures: ---- p3::outgoing::http_0_3_outbound_request_invalid_header stdout ---- thread 'p3::outgoing::ht...</div></div></div>",
        "id": 510268132,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743792097
    },
    {
        "content": "<p>I saw that, and I'm as mystified as you.  <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> have you seen anything like that before (i.e. <code>assert_eq!</code> failing for integer values but then printing an error message that they're the same)?</p>",
        "id": 510268451,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743792211
    },
    {
        "content": "<p>hm no I've not seen that before</p>",
        "id": 510268593,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743792253
    },
    {
        "content": "<p>my first guess though is some sort of memory corruption</p>",
        "id": 510268619,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743792267
    },
    {
        "content": "<p>where it's not-equal during the compare but equal by the time the print happens</p>",
        "id": 510268638,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743792275
    },
    {
        "content": "<p>in theory also UB where the compare is optimized to always false for some UB reason but then the print actually shows they're equal</p>",
        "id": 510268694,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743792299
    },
    {
        "content": "<p>riscv64 is optimized where my guess is none of us have been optimizing locally</p>",
        "id": 510268770,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743792324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> have you tried running those tests locally with <code>cargo test --release</code> by any chance?</p>",
        "id": 510268948,
        "sender_full_name": "Joel Dice",
        "timestamp": 1743792386
    },
    {
        "content": "<p>I haven't, trying it now</p>",
        "id": 510269389,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743792537
    },
    {
        "content": "<p>Succeeded on <code>aarch64-darwin</code></p>",
        "id": 510269677,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743792642
    },
    {
        "content": "<p>I can try <code>x86_64-linux</code> later tonight as well</p>",
        "id": 510269801,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743792687
    },
    {
        "content": "<p>Feels like maybe the right thing to do is run these in qemu to see if it's riscv64 specific</p>",
        "id": 510269936,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1743792732
    },
    {
        "content": "<p>there's always the possibility of qemu bugs as well yeah</p>",
        "id": 510269994,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743792755
    },
    {
        "content": "<p>also FYI I'm going to try an attempt with merge now</p>",
        "id": 510271042,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743793115
    },
    {
        "content": "<p>we're... extremely far behind</p>",
        "id": 510271055,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743793118
    },
    {
        "content": "<p>and the conflict is massive</p>",
        "id": 510271067,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743793122
    },
    {
        "content": "<p>I'm switching the p3-prototyping repo to use merge commits instead of squash, I think squashing is making merging with main worse</p>",
        "id": 510284490,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743798284
    },
    {
        "content": "<p>still running into the same bug on riscv64 after rebase, so I ignored these tests on riscv64 for now <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/58/commits/5e8f880803098f244ef000297ec03f7151d22e01\">https://github.com/bytecodealliance/wasip3-prototyping/pull/58/commits/5e8f880803098f244ef000297ec03f7151d22e01</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/58/commits/5e8f880803098f244ef000297ec03f7151d22e01\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c4038796183d40603f87dc1d79e82edc1eb2d1d8/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f31323837373930353f733d34303026763d34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/58/commits/5e8f880803098f244ef000297ec03f7151d22e01\" title=\"feat: implement `wasi:http` by rvolosatovs Â· Pull Request #58 Â· bytecodealliance/wasip3-prototyping\">feat: implement `wasi:http` by rvolosatovs Â· Pull Request #58 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Implementation of WebAssembly/wasi-http#162\nWith Wasmtime binary built from this PR with this patch applied: b007214 (from #60), I have the complete round trip working using components in https://g...</div></div></div>",
        "id": 510656063,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1744029331
    },
    {
        "content": "<p>Ok, I'll get QEMU set up and see if I can learn anything.</p>",
        "id": 510671512,
        "sender_full_name": "Joel Dice",
        "timestamp": 1744032676
    },
    {
        "content": "<p>I just ran the tests on <code>main</code> using <code>cargo test -p wasmtime-wasi-http --test all --target riscv64gc-unknown-linux-gnu --release</code> with QEMU 9.1.2 after removing all the <code>ignore</code> attributes from the <code>http_0_3_*</code> tests and they all passed.  Am I doing something wrong?</p>",
        "id": 510695702,
        "sender_full_name": "Joel Dice",
        "timestamp": 1744037924
    },
    {
        "content": "<p>try this: <code>CARGO_INCREMENTAL=0 CARGO_PROFILE_DEV_DEBUG=0 CARGO_PROFILE_TEST_DEBUG=0 CARGO_PROFILE_DEV_OPT_LEVEL=2 WASMTIME_TEST_NO_HOG_MEMORY=1 cargo test -p wasmtime-wasi-http --test all --target riscv64gc-unknown-linux-gnu p3::outgoing::http_0_3_outbound_request_invalid_header</code></p>",
        "id": 510695812,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1744037953
    },
    {
        "content": "<p>That worked (i.e. the test failed).  Thanks!</p>",
        "id": 510696409,
        "sender_full_name": "Joel Dice",
        "timestamp": 1744038064
    },
    {
        "content": "<p>just a small note that if you rebase on latest <code>main</code>, the test will be called <code>p3::outgoing::p3_http_outbound_request_invalid_header</code></p>",
        "id": 510696624,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1744038116
    },
    {
        "content": "<p>Notes from the meeting this week:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>P3 sync meeting for 2025/04/07</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<h1>Attendees</h1>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Joel Dice</td>\n</tr>\n<tr>\n<td>Roman Volosatovs</td>\n</tr>\n<tr>\n<td>Victor Adossi</td>\n</tr>\n<tr>\n<td>Alex Crichton</td>\n</tr>\n</tbody>\n</table>\n<h1>Notes</h1>\n<h2>Roman's update</h2>\n<ul>\n<li>WASI HTTP PR is landed:<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/58\">https://github.com/bytecodealliance/wasip3-prototyping/pull/58</a></li>\n<li>Some loose ends, RISCV tests are still broken</li>\n</ul>\n</li>\n<li>Switching focuses to ensure that this can be upstreamed<ul>\n<li>extracting common stuff, straightening out p2 and p3 modules</li>\n<li>goal is to extract a PR that could be merged upstream</li>\n</ul>\n</li>\n<li>Not going to touch I/O for now (as Joel works on promises &amp; futures)</li>\n<li>Going to show a little demo today<ul>\n<li>(Roman did a demo of the p3 HTTP component working, and a comparison)</li>\n<li>perf degradation since of course p3 has to do more things<ul>\n<li>p2's does ~37k req/sec, p3 does ~25k req/sec</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Joel's update</h2>\n<ul>\n<li>Unblocking Roman last week, ensuring you could retrieve buffers after incomplete write</li>\n<li>Fixing bugs, did some debugging with Alex<ul>\n<li>Hopefully fuzzing will help this in the future</li>\n</ul>\n</li>\n<li>Public API refactoring underway for futures/promises, already discussed w/ Roman &amp; Alex last week</li>\n</ul>\n<h2>Alex's update</h2>\n<ul>\n<li>Chasing/fixing bugs</li>\n<li>Want to get to a binary format that is stable<ul>\n<li>Want to move this into nightly rust, wasi-sdk, wasm-component-ld</li>\n<li>want to hold off on this until cancellation is sketched out</li>\n</ul>\n</li>\n<li>Joel: So for now to build for P3, we build for P2, and we automatically get a wasm-component-ld w/ new-enough version that does P2 &amp; new async?<ul>\n<li>Alex: Yep</li>\n<li>Joel: Then eventually we will have a real p3 target once wasi-libc is updated, etc</li>\n</ul>\n</li>\n<li>Joel: Could we consider a stage at which p3 target in wasi-libc uses the p2 APIs and then adding native P3 support?<ul>\n<li>Alex: Makes sense, but this is basically what the P2 target <em>already is</em> (better messaging might be important)</li>\n<li>Alex: We should be able to mostly hide this under the covers</li>\n</ul>\n</li>\n<li>Roman: Adapter for p2-&gt;p3?<ul>\n<li>Alex: would like to avoid for sockets</li>\n<li>Alex: would rather maybe do it for files, but adapter is going to be painful to write and not very well exercised<ul>\n<li>Easier to change adapter, go to p3 then change sockets and go to p3.</li>\n</ul>\n</li>\n<li>Joel: Probably worth updating/checking with Pat on this<ul>\n<li>Basically what we could do is have the p3 target use a mix of P2 and P3</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Alex: the main problem is not many people want to write C</li>\n</ul>\n<h2>Sidetrack: being ready for wasi-libc changes/evolution</h2>\n<ul>\n<li>Joel: Talked to dave a bit about the TLS stuff,</li>\n<li>Current pattern is a bit hard to do becasue wasi-libc only gets an fd to represent the connection, and trying to close it and move resource handles then give them back.</li>\n<li>We don't want to bake \"POSIX\" into WASI-TLS, like other stacks are doing</li>\n<li>WASI-libc may turn into <em>more</em> than a C library, w/ APIs that are wasi specific<ul>\n<li>ex. what if we want to poll/select with a mix of sockets and HTTP requests -- we need a way to synthesize fds that wouldn't normally make sense in a libc context.</li>\n</ul>\n</li>\n<li>Alex: There aren't enough maintainers for wasi-libc</li>\n<li>Joel: What about implementing the sockets in Rust, then had a way to plug that in?<ul>\n<li>Generally the flow is:<ul>\n<li>Make me a synthetic, opaque file descriptor</li>\n<li>When I call poll(), here's how you get waitables (no longer pollables)</li>\n<li>We write the sockets impl in Rust, but somehow enable POSIX send()/recv()</li>\n</ul>\n</li>\n<li>Alex: Yeah we probably should not put async support in POSIX poll<ul>\n<li>We basically should avoid trying to get this working except for previous code that needs it (and that doesn't exist)</li>\n</ul>\n</li>\n<li>Joel: Yeah that solution may not work but this has come up in mio and stackless/etc in WASI p2<ul>\n<li>w/ the way dotnet &amp; mio fork work is that it reaches into non-public APIs in wasi-libc to take an FD &amp; get handles (input/output stream)</li>\n<li>it does it's own poll loop (<em>not</em> POSIX poll -- direct wasi p2 poll), w/ related interest (resources, clocks, etc)</li>\n<li>We want to move away from non-public APIs</li>\n<li>How can dotnet do what it wants to do: (set of sockets, set of HTTP connections), wait on all of them<ul>\n<li>Alex: If people have existing code w/ this problem (on native), someone should have done the work to do that separately</li>\n<li>If mio wants to do WASI specific stuff that should live at the</li>\n</ul>\n</li>\n<li>Joel: thinking of the dotnet stuff, we've got a great WASI-based impl at this point (already) -- is the suggestion that they need to decide they're going all-in on POSIX (&amp; base on wasi-sockets) or go all-in on WASI HTTP (&amp; do socket stuff without wasi-libc)? i.e. all in on native wasi or POSIX, but not mix?<ul>\n<li>Alex: Essentially yes, it's probably a bad idea to support a mix</li>\n<li>The problem is that adding a VTable means we basically can't ever change it again</li>\n<li>Roman: Would agree with Alex here -- only expect wasi-libc to not have anything POSIX does</li>\n<li>Joel: reasonable, but the idea that an ecosystem should have to choose between sockets/libc versus using the new WASI stuff directly there should maybe be a middle ground.<ul>\n<li>Ideally: Don't use wasi poll/select, but being able to use a fd in your tree and be able to use it with wasi-libc</li>\n<li>Alex: It's not that we <em>shouldn't</em> be able to do that, but the conversions should be very targeted -- we shouldn't promise that people can kind of sprinkle WASI and things will be fine. We intentionally can't compile existing software as-is because it's a new model.</li>\n<li>If you call open in wasi-libc, you should be able to get access to the underlying resource</li>\n<li>It may make sense to temporarily create a fd that is matched to the resource, not refer to a vtable that has all the expected sockets</li>\n<li>Roman: If you're using TLS, that means you're already using WASI right?<ul>\n<li>Joel: This was during some discussions with James, and the vision was establishing a connection and being able to take resources, then perform wasi-tls stuff, then give wasi-libc back a socket &amp; handles, and wasi-libc can put that back in the pool and use it.</li>\n<li>Alex: Against this because no other libc does this</li>\n<li>Joel: SSL module would be bridging the gap between OpenSSL and wasi-libc to replicate experience</li>\n<li>Roman: Why not use wasi-sockets directly in the python module?<ul>\n<li>Joel: two reasons:<ul>\n<li>porting cpython to WASI is harder than before (new code path)</li>\n<li>3rd party software that is very POSIX-tied, they need to also start using WASI directly</li>\n<li>Alex: You can use POSIX sockets from wasi-libc</li>\n<li>Joel: Maybe the answer is doing half of the proposal,<ul>\n<li>First half is taking a socket (from 3rd party lib? from wasi-sockets support?)</li>\n<li>Take ownership from wasi-libc</li>\n<li>Give back the application the SSL connection</li>\n<li>As long as the application has no way of asking wasi-libc about it then it's fine<ul>\n<li>Joel: Big if is if there's somewhere where the file descriptor is still used</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Alex: Avoiding taking in POSIX stuff in the python ecosystem</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Victor: could we do something to build wasi-libc in a way that enables this easier use case<ul>\n<li>Alex: Yeah but if you're writing</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Victor: Why is wasi-libc not a Rust thing?<ul>\n<li>Alex: Easiest option was Musl compiled to wasi</li>\n<li>Only I/O system layer is what we have to maintain -- very different from having to maintain 100% of the libc</li>\n</ul>\n</li>\n<li>Victor: Do people like Cmake??<ul>\n<li>Alex: Yeah depends on who you ask</li>\n<li>Joel: For windows, good for cross-platform</li>\n</ul>\n</li>\n</ul>\n<h2>Enabling component-async in engine</h2>\n<ul>\n<li>Roman: Had to enable async, but after doing that tests actually fail<ul>\n<li>Compiled module does <em>not</em> have the compiled in feature</li>\n<li>Alex: this is probably a bug, we try to ensure that the settings @ compile time are the same at runtime, for feature enabling some things are stricter than none<ul>\n<li>Roman: So in principle we should be able to enable async support (by default, for example) and everything should still work<ul>\n<li>Joel,Alex: Yes</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Roman: Should we have a p3<ul>\n<li>Alex: so -S p3 and -W cm-async</li>\n<li>Joel: p3 implies async but not the other way?<ul>\n<li>Alex: Probably better to just tie them together, you could technically use p3 and do sync everything</li>\n</ul>\n</li>\n<li>Wordy but has to be done</li>\n<li>Joel: P3 on the host side is going to use cm-async flags so</li>\n</ul>\n</li>\n</ul>\n<h2>Increasing test coverage on wasi-p3</h2>\n<ul>\n<li>Roman: Want to increase test coverage, but need to use raw WASI</li>\n<li>Alex: We should not test to the stdlib -- that testing should likely be done on the Rust side</li>\n<li>Roman: Discussed with pat about the size of test-programs (size is growing)<ul>\n<li>Alex: Specific concerns about the size?<ul>\n<li>Roman: Fine with it, if we're compiling everything into wasm32-unknown-unknown, then probably fine</li>\n<li>Roman: Over 207 test programs now</li>\n</ul>\n</li>\n<li>Alex: wit-bindgen test-suite has gone well, and it turns out trying to push it all into one suite doesn't work well<ul>\n<li>Most reasonable thing might be to try to make these <em>all</em> wasi:cli CLI tests, but it won't be easy</li>\n<li>One host module, which is the CLI, and all the tests run the WASM?</li>\n<li>Joel: Could use WAVE here?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Let's punt this for now</li>\n</ul>\n</div></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/58\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/940c54c7b6571a7fcdccca146eda9771e6bf4737/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393735323433643263373836666232636137353966373132613637353737623732663332636261643736653266373834316331363765656362383565323239372f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e672f70756c6c2f3538&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/pull/58\" title=\"feat: implement `wasi:http` by rvolosatovs Â· Pull Request #58 Â· bytecodealliance/wasip3-prototyping\">feat: implement `wasi:http` by rvolosatovs Â· Pull Request #58 Â· bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Implementation of WebAssembly/wasi-http#162\nWith Wasmtime binary built from this PR with this patch applied: b007214 (from #60), I have the complete round trip working using components in https://g...</div></div></div>",
        "id": 510717792,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1744043521
    },
    {
        "content": "<p>For the record: the riscv64 failure appears to be a pre-existing Cranelift codegen bug; <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> is going to investigate further.</p>",
        "id": 510730222,
        "sender_full_name": "Joel Dice",
        "timestamp": 1744047273
    },
    {
        "content": "<p>ok yeah I've fixed this locally  now</p>",
        "id": 510730805,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1744047456
    },
    {
        "content": "<p>I wasn't present during this meeting, so I'll be extrapolating purely based on the notes. The following cherry picked items resonated with me:</p>\n<blockquote>\n<p>Alex: There aren't enough maintainers for wasi-libc</p>\n</blockquote>\n<blockquote>\n<p>Alex: the main problem is not many people want to write C</p>\n</blockquote>\n<blockquote>\n<p>Victor: Why is wasi-libc not a Rust thing?</p>\n</blockquote>\n<blockquote>\n<p>Alex: Easiest option was Musl compiled to wasi. Only I/O system layer is what we have to maintain -- very different from having to maintain 100% of the libc</p>\n</blockquote>\n<p>I am not much a C developer either. I've only worked on wasi-libc during the initial implementation of wasi-sockets together with Joel, but I wouldn't describe my time working on wasi-libc as \"fun\". To the point that I dread working on it again, despite the socket work not being complete. <span aria-label=\"neutral\" class=\"emoji emoji-1f610\" role=\"img\" title=\"neutral\">:neutral:</span> To make things worse, once shared-everything-threading becomes a thing, I suspect wasi-libc will start breaking left and right because I'm not confident at all that what I wrote is thread safe.</p>\n<p>I realize there's a lot of value in continuing off the work provided by MUSL. So I wonder if there's another middle ground here where e.g. we keep using MUSL for pretty much everything, but write the POSIX&lt;-&gt;WASI IO interop layer in a statically linked Rust library, similar to the p1-to-p2 adapter. </p>\n<hr>\n<blockquote>\n<p>Joel: (...) is the suggestion that they need to decide they're going all-in on POSIX (&amp; base on wasi-sockets) or go all-in on WASI HTTP (&amp; do socket stuff without wasi-libc)? i.e. all in on native wasi or POSIX, but not mix?</p>\n</blockquote>\n<blockquote>\n<p>Alex: Essentially yes, it's probably a bad idea to support a mix</p>\n</blockquote>\n<p>I worry this all-or-nothing approach will be a tough pill to swallow for language/framework authors. But I'm fine deferring this until real world users come knocking</p>",
        "id": 510760197,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1744057226
    },
    {
        "content": "<p>std will probably link against wasi-libc forever, because its expected for C library interop, even if nothing in std strictly needs to use it</p>",
        "id": 510761676,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1744057841
    },
    {
        "content": "<p>AFAIK many folks are in a similar boat of \"would be nice to write I/O stuff in rust\". I don't think there's 100% alignment amongst all stakeholders but tbh there aren't that many super active stakeholders to begin with anyway, so I don't think it would necessarily require tons of buy-in.</p>\n<p>Otherwise for mixing things and posix-vs-wasi it's probably best to discuss in the context of possible additions to wasi-libc. My high-level goal is to avoid any one particular language/runtime leaking into wasi-libc, e.g. taking everything needed by Python and putting it in wasi-libc when something like rust's libstd wouldn't want it at all. How exactly to achieve that high level goal without Python rewriting wasi-libc is going to be a balancing act and I agree the goal is for Python and Rust, for example, to uset he same wasi-libc</p>",
        "id": 510761761,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1744057875
    },
    {
        "content": "<p>also, we're working on hiring a contractor specifically to help us with wasi-libc</p>",
        "id": 510761809,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1744057902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253992\">Pat Hickey</span> <a href=\"#narrow/channel/219900-wasi/topic/WASIP3.20Update/near/510761676\">said</a>:</p>\n<blockquote>\n<p>std will probably link against wasi-libc forever, because its expected for C library interop, even if nothing in std strictly needs to use it</p>\n</blockquote>\n<p>I may be misinterpreting Dave but my read is that we'd in theory rewrite parts of wasi-libc in Rust rather than having everything in C, specifically the non-musl portions in Rust</p>",
        "id": 510761918,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1744057939
    },
    {
        "content": "<p>(but rust would still use wasi-libc)</p>",
        "id": 510761924,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1744057947
    },
    {
        "content": "<p>ah ok sorry i misread that as being just some separate rust code from wasi-libc itself</p>",
        "id": 510761941,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1744057961
    },
    {
        "content": "<blockquote>\n<p>Otherwise for mixing things and posix-vs-wasi it's probably best to discuss in the context of possible additions to wasi-libc.</p>\n</blockquote>\n<p>What I've been envisioning is public APIs which allow code built on wasi-libc to access (and optionally swap out) the WASI-level resource(s), streams, etc. corresponding to a file descriptor.  That would include taking ownership of the WASI-level handles by removing the descriptor entirely and also doing the opposite: giving wasi-libc ownership of WASI-level handles and getting a new descriptor back for them.</p>",
        "id": 510762876,
        "sender_full_name": "Joel Dice",
        "timestamp": 1744058341
    },
    {
        "content": "<blockquote>\n<p>I may be misinterpreting Dave but my read is that we'd in theory rewrite parts of wasi-libc in Rust rather than having everything in C, specifically the non-musl portions in Rust</p>\n</blockquote>\n<p>That's indeed what I meant. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  The periphery of such a Rust library would still be rather C-esque of course, but me personally would still be more comfortable maintaining awkward looking Rust compared to the C implementation. Though I might be biased towards Rust <span aria-label=\"melting face\" class=\"emoji emoji-1fae0\" role=\"img\" title=\"melting face\">:melting_face:</span></p>",
        "id": 510764411,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1744058971
    },
    {
        "content": "<blockquote>\n<p>My high-level goal is to avoid any one particular language/runtime leaking into wasi-libc</p>\n</blockquote>\n<p>Agree <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 510765786,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1744059548
    },
    {
        "content": "<p>I have a question regarding the <code>Request#new</code> function in the p3 proposal:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">new</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">static</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">(</span>\n<span class=\"w\">  </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">headers</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">contents</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">stream</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">trailers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">future</span><span class=\"o\">&lt;</span><span class=\"n\">result</span><span class=\"o\">&lt;</span><span class=\"n\">option</span><span class=\"o\">&lt;</span><span class=\"n\">trailers</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">options</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">request</span><span class=\"o\">-</span><span class=\"n\">options</span><span class=\"o\">&gt;</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">request</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"o\">&lt;</span><span class=\"n\">result</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">;</span>\n</code></pre></div>\n<ol>\n<li>\n<p>Is there a reason why <code>trailers</code> is not optional, but rather resolves to an optional value? I find it somewhat surprising and potentially error-prone that when creating a <code>Request</code> instance, you must provide a <code>Future</code>, even if your request does not use trailers at all, and you must ensure that this future resolves. IIUC the host implementation will have to always await the trailers and check the resolved value to see if trailers are used at all. Is this coupling necessary? Could we transpose the trailers type so that the <code>option</code> is the outer type?</p>\n</li>\n<li>\n<p>The returned future resolves to the result of transmitting the request. This implies that the request instance contains a \"private\" writable end of this future. However, the request itself does not have any knowledge about being transmitted or the result of the transmission, right? This means that the layer responsible for actually sending the request will need to access the request's internals, and there is no explicit interface provided for doing so (like <code>finish()</code>, <code>end()</code> or whatever).</p>\n</li>\n</ol>\n<p>I think the same applies to <code>Response</code> record. I don't think either of these points is incorrect; they are just somewhat surprising :)</p>",
        "id": 519686550,
        "sender_full_name": "Tomasz Andrzejak",
        "timestamp": 1747855624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"763150\">@Tomasz Andrzejak</span> regarding 1, this was brought up here:<br>\n<a href=\"https://github.com/WebAssembly/wasi-http/pull/162/files/848eaf5e65a67f523051c590a658af59d167a9f4#r2011824300\">https://github.com/WebAssembly/wasi-http/pull/162/files/848eaf5e65a67f523051c590a658af59d167a9f4#r2011824300</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/pull/162/files/848eaf5e65a67f523051c590a658af59d167a9f4#r2011824300\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c4038796183d40603f87dc1d79e82edc1eb2d1d8/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f31323837373930353f733d34303026763d34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/pull/162/files/848eaf5e65a67f523051c590a658af59d167a9f4#r2011824300\" title=\"[v0.3] model bodies after `stream&lt;u8, trailers, error-code&gt;`, trap less by rvolosatovs Â· Pull Request #162 Â· WebAssembly/wasi-http\">[v0.3] model bodies after `stream&lt;u8, trailers, error-code&gt;`, trap less by rvolosatovs Â· Pull Request #162 Â· WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">Make bodies non-optional for request and response constructors\nTake a future&lt;result&lt;option&lt;trailers&gt;, error-code&gt;&gt; parameter in request/response constructors (refs WebAssembly/com...</div></div></div>",
        "id": 520086071,
        "sender_full_name": "primoly",
        "timestamp": 1748016360
    },
    {
        "content": "<p>Hey everyone!<br>\nWe have previously had wasip3 sync meetings occurring weekly and had since switched to bi-weekly.<br>\nGiven the recent discussions we have been having and the active work upstream, I am going to switch these calls back to a weekly cadence.</p>\n<p>With the added context of recent discussions, currently working on <code>wasi-http</code> upstreaming, I've discovered a few rough edges in the current API and would like to discuss some potential solutions today. I believe this will also be relevant for the stdio functionality.</p>",
        "id": 534939449,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1755519585
    }
]