[
    {
        "content": "<p>I'm having trouble with tempfile in WASI P2. I see that there is something in <a href=\"https://github.com/bytecodealliance/cap-std/blob/main/cap-tempfile/src/lib.rs\">cap-std</a>, but when I use tempfile::tempdir() in my code and run it with wasmtime, it uses <a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/sys/pal/wasi/os.rs#L266-L268\">https://github.com/rust-lang/rust/blob/master/library/std/src/sys/pal/wasi/os.rs#L266-L268</a> and panics. Does the cap-std work just need to be added to the wasmtime host code, do I need to use a wasi specific tempfile, or something else?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cap-std/blob/main/cap-tempfile/src/lib.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8c011e558353b58817d6e8844e1ee39c28fe94b5/68747470733a2f2f7265706f7369746f72792d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3237353031333336332f35623163343030302d633834382d313165612d386564622d383737333935663638303635&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cap-std/blob/main/cap-tempfile/src/lib.rs\" title=\"cap-std/cap-tempfile/src/lib.rs at main · bytecodealliance/cap-std\">cap-std/cap-tempfile/src/lib.rs at main · bytecodealliance/cap-std</a></div><div class=\"message_embed_description\">Capability-oriented version of the Rust standard library - bytecodealliance/cap-std</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/sys/pal/wasi/os.rs#L266-L268\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/88aa84b137f5d3fd078a70ff6aecb6ccdfedf161/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376465383137613932326664646231656335393930643736356237663366326461313661333435393364626466623031303338613336653061623736306534302f727573742d6c616e672f72757374&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/sys/pal/wasi/os.rs#L266-L268\" title=\"rust/library/std/src/sys/pal/wasi/os.rs at master · rust-lang/rust\">rust/library/std/src/sys/pal/wasi/os.rs at master · rust-lang/rust</a></div><div class=\"message_embed_description\">Empowering everyone to build reliable and efficient software. - rust-lang/rust</div></div></div>",
        "id": 496201155,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1738007639
    },
    {
        "content": "<p>I think that means that you're using a crate which doesn't fully support WASI yet in the guest itself, is this perhaps related to using the <code>tempdir</code> crate in the guest? If that's using <code>std::env::temp_dir()</code> you'll either need to use a different constructor or ask for WASI-specific handling</p>",
        "id": 496202649,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1738008159
    },
    {
        "content": "<p>What would would be the \"right thing\" for <code>tempdir</code> to do when targeting WASI given that there's no official temporary directory?  Would it make sense for <code>std::env::temp_dir()</code> to return \"/tmp\" and leave it up to the host embedder to make sure one of the preopens includes \"/tmp\"?</p>",
        "id": 496203356,
        "sender_full_name": "Joel Dice",
        "timestamp": 1738008419
    },
    {
        "content": "<p>Naively I'd probably say that <code>tempdir::TempDir::new()</code> (or w/e constructor is being used) should return an error (instead of panicking) and the user would have to use <code>tempdir::TempDir::new_in(...)</code> instead</p>",
        "id": 496207199,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1738010038
    },
    {
        "content": "<p>not a great experience but IMO is better than picking <code>/tmp</code></p>",
        "id": 496207248,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1738010046
    },
    {
        "content": "<p>Looks like its just following wasi-libc's example? <a href=\"https://github.com/WebAssembly/wasi-libc/blob/f1c557ce174b3ee2eff6122b2deebf637f6cdaee/libc-top-half/musl/include/stdio.h#L153\">https://github.com/WebAssembly/wasi-libc/blob/f1c557ce174b3ee2eff6122b2deebf637f6cdaee/libc-top-half/musl/include/stdio.h#L153</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc/blob/f1c557ce174b3ee2eff6122b2deebf637f6cdaee/libc-top-half/musl/include/stdio.h#L153\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5f6425c163efb635ffce42b86cb4cfb17c46612e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386462323332353235346436373266653162343234353736646463346666366563333965393863613536666365656161376265313466373438376334386138662f576562417373656d626c792f776173692d6c696263&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc/blob/f1c557ce174b3ee2eff6122b2deebf637f6cdaee/libc-top-half/musl/include/stdio.h#L153\" title=\"wasi-libc/libc-top-half/musl/include/stdio.h at f1c557ce174b3ee2eff6122b2deebf637f6cdaee · WebAssembly/wasi-libc\">wasi-libc/libc-top-half/musl/include/stdio.h at f1c557ce174b3ee2eff6122b2deebf637f6cdaee · WebAssembly/wasi-libc</a></div><div class=\"message_embed_description\">WASI libc implementation for WebAssembly. Contribute to WebAssembly/wasi-libc development by creating an account on GitHub.</div></div></div>",
        "id": 496208393,
        "sender_full_name": "Lann Martin",
        "timestamp": 1738010532
    },
    {
        "content": "<p>I can probably clarify my position is that how best to fix this probably requires more context to the problem. Colin describe a panic but I don't know in what context a temporary directory was otherwise required. It's also a fact though that there's no canonical temporary directory with WASI, or at least not that I know of. How best to thread that needle is what requires context. One option is \"just return <code>/tmp</code>\". Another option is \"return a dummy thing and issue a compiler warning\". Another option is \"return an error\". Another is panic.</p>\n<p>Lots that can be done here but balancing \"this application requires a temporary directory\" and \"WASI fundamentally does not have a temporary directory\" at least in my opinion has no easy answer and there's tradeoffs with whatever is chosen. The answer here probably relies on context at least I personally don't have and would require more understanding of the consequence sof a particular chosen solution in the context of the original application, language integration, etc.</p>",
        "id": 496218787,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1738015212
    },
    {
        "content": "<p>The assumption of having a global tempdir is probably baked into quite a bit of code. I wonder if it would be a worthwhile extension of e.g. wasi:filesystem to provide an opt-in tempdir root</p>",
        "id": 496221344,
        "sender_full_name": "Lann Martin",
        "timestamp": 1738016328
    },
    {
        "content": "<p>The context of the issue is random Rust code, often test code, that expects <code>std::env::temp_dir()</code>to return something.<br>\nUsing #[cfg] directives to change the behavior to <code>tempdir::TempDir::new_in(\"/\")</code> works. Maybe it would make sense to modify the tempfile crate so that this is done automatically? It's the ease adoption vs technical correctness question.</p>",
        "id": 496361614,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1738077911
    },
    {
        "content": "<p>Yeah I don't doubt that tempdirs are baked into places. If the goal is \"everything should run super easily on WASI\" (which I don't doubt as a goal), then IMO the answer here is to not try to patch around this somehow but it's to somehow get something official into <code>wasi:filesystem</code> around a temporary directory. I don't know what that would look like myself, though.</p>",
        "id": 496368311,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1738079690
    },
    {
        "content": "<p>Basically I don't think there's a \"fix\" for the standard library or the <code>tempdir</code> crate at this time, something needs to happen up a layer in <code>wasi:filesystem</code> itself IMO for this to get fixed. Anything else is at best a local patch or workaround for now</p>",
        "id": 496368448,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1738079729
    },
    {
        "content": "<p>Sorry to ask a dumb question. But in what circumstances is the cap-std/cap-tempfile code used? I want to be sure we aren't already trying to solve this.</p>",
        "id": 496368765,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1738079817
    },
    {
        "content": "<p>Wasmtime's implementation of WASI uses cap-std but I don't think we use cap-tempfile. I'm not sure whether cap-std or cap-tempfile compiles to WASI itself to be a concern for guests using this (although if you're getting the panic through cap-tempfile it probably is a guest compiled to wasm)</p>",
        "id": 496369298,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1738079978
    },
    {
        "content": "<p>One unique advantage of WASI is its virtualizability. If an arbitrary package beyond your control depends on an <code>/tmp</code> directory, it can be virtualized into existence by tools like <a href=\"https://github.com/bytecodealliance/WASI-Virt\">WASI-Virt</a>. Those should be able to virtualize the <code>/tmp</code> folder in-memory, and pass through other paths to the host. I don't know if WASI-Virt supports this specific use-case, but at least in theory it should be possible. Maybe this helps</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/WASI-Virt\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0351cc4d9d22f1065c05d440d0bc57be9f8f0467/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393561666265333232626264623264623434343133323833653365386137373036663861386639336130303639313961363265383235386336316234356566612f62797465636f6465616c6c69616e63652f574153492d56697274&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/WASI-Virt\" title=\"GitHub - bytecodealliance/WASI-Virt: Virtual implementations of WASI APIs\">GitHub - bytecodealliance/WASI-Virt: Virtual implementations of WASI APIs</a></div><div class=\"message_embed_description\">Virtual implementations of WASI APIs. Contribute to bytecodealliance/WASI-Virt development by creating an account on GitHub.</div></div></div>",
        "id": 496373990,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1738081335
    },
    {
        "content": "<p>I'm sure WASI-Virt is relevant to this discussion, but it isn't for my particular use case. The reason the crate I'm working on (<a href=\"https://crates.io/crates/c2pa\">c2pa</a>) needs tempfiles is because the assets are too large to live in memory but at the same time require seekable streams. Therefore the filesystem is the only option.</p>",
        "id": 496374920,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1738081586
    },
    {
        "content": "<p>We already have <a href=\"https://github.com/WebAssembly/wasi-cli/blob/d4fddec89fb9354509dbfa29a5557c58983f327a/wit/environment.wit#L21\">wasi:cli/environment/initial-cwd</a>.  Seems reasonable to add a <code>temp-dir</code> function to the same interface.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-cli/blob/d4fddec89fb9354509dbfa29a5557c58983f327a/wit/environment.wit#L21\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/250d06f550d8fd9b56272d6b20f1cd1da1a99cbc/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323765626362333638633631343338633531303136663233326336376534613066323130356265343430313937653339303536633961333261316263656135622f576562417373656d626c792f776173692d636c69&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-cli/blob/d4fddec89fb9354509dbfa29a5557c58983f327a/wit/environment.wit#L21\" title=\"wasi-cli/wit/environment.wit at d4fddec89fb9354509dbfa29a5557c58983f327a · WebAssembly/wasi-cli\">wasi-cli/wit/environment.wit at d4fddec89fb9354509dbfa29a5557c58983f327a · WebAssembly/wasi-cli</a></div><div class=\"message_embed_description\">Command-Line Interface (CLI) World for WASI. Contribute to WebAssembly/wasi-cli development by creating an account on GitHub.</div></div></div>",
        "id": 496380130,
        "sender_full_name": "Joel Dice",
        "timestamp": 1738083143
    },
    {
        "content": "<p>PR<br>\n<a href=\"https://github.com/WebAssembly/wasi-cli/pull/54\">https://github.com/WebAssembly/wasi-cli/pull/54</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-cli/pull/54\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/219f882cf883b09174f07c7b1a916bd3617cfffd/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643335656161616131383834643637396237643530313936643837646432343434336138613365643039613163363238343732306532626564323132333163632f576562417373656d626c792f776173692d636c692f70756c6c2f3534&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-cli/pull/54\" title=\"feat: Add tmp-dir by cdmurph32 · Pull Request #54 · WebAssembly/wasi-cli\">feat: Add tmp-dir by cdmurph32 · Pull Request #54 · WebAssembly/wasi-cli</a></div><div class=\"message_embed_description\">Allow a temporary directory to be specified. This will prevent the panic from std::env::temp_dir().\nhttps://github.com/rust-lang/rust/blob/master/library/std/src/sys/pal/wasi/os.rs#L266-L268\nhttps:...</div></div></div>",
        "id": 496829625,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1738257710
    }
]