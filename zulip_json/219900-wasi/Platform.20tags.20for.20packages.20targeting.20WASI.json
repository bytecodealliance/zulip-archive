[
    {
        "content": "<p>TL;DR: We're considering making <code>wasip2_24</code> (where <code>24</code> is the WASI-SDK version) an official platform tag for Python wheels targeting WASIp2 (and likewise e.g. <code>wasip3_26</code> for WASIp3 in the future).  See below for rationale and reply in this thread if you have opinions.</p>\n<p>A few weeks ago, at the last Python SIG-Guest-Languages meeting, one of the topics we discussed was defining a WASI platform tag for Python wheels (i.e. packages installable using the <code>pip</code> tool or similar) which contain native extensions (i.e. <code>*.so</code> shared libraries).</p>\n<p>Examples of existing platform tags include <code>macosx_11_0_arm64</code>, <code>win_amd64</code>, and <code>manylinux_2_28_x86_64</code>; they roughly correspond to a \"target triple\" passed to a compiler, and they help <code>pip</code> to pick the appropriate wheel to download and install for the target patform.  In the case of <code>manylinux_2_28_x86_64</code>, the <code>2_28</code> part represents the minimum GLIBC version the wheel is compatible with.  There's no specific format requirements for the tag -- we just need to be specific enough to help <code>pip</code> choose a wheel that's compatible with the platform the app developer wants to target.</p>\n<p>For WASI, we're envisioning something like <code>wasip2_24</code>, where the <code>24</code> part represents the WASI-SDK version that the <code>.so</code> files were built with.  Given that there are currently no ABI compatibility guarantees across WASI-SDK/wasi-libc versions, the <code>wasip2_24</code> tag would indicate that the wheel is only compatible with code built with WASI-SDK 24 -- neither earlier nor later.</p>\n<p>We also discussed adding the target world name to the tag, e.g. <code>wasip2_24_cli</code> or <code>wasip2_24_http</code> (and we've had a similar conversation about target triples).  However, the latest thinking seems to be that, once we add optional imports to the component model and update libraries like <code>wasi-libc</code> to use them, those libraries will be able to gracefully fall back to alternative implementations when the imports are not available (e.g. emulate an empty, read-only filesystem if the <code>wasi:filesystem</code> imports are not available).  That would allow library authors to maximize compatibility with arbitrary worlds, which would in turn reduce or eliminate the need to include the world name in the platform tag.</p>\n<p>Later, once the component model and WASI support <code>wasm64</code>, we'd presumably add that to the first platform tag supporting it (e.g. <code>wasm64_wasi_29</code> for 64-bit WASI 1.0, WASI-SDK 29, hypothetically).  Until then, the <code>wasm32</code> part would be implicit since that's all that WASI currently supports.</p>\n<p>Just posting this here in case anyone has feedback or opinions.</p>",
        "id": 516694780,
        "sender_full_name": "Joel Dice",
        "timestamp": 1746628696
    },
    {
        "content": "<p>I don't really have any meaningful comments on the python ecosystem stuff but did wonder what you think ya'll think about <code>wasip3_sdkXX</code> ? I think that might make it a LITTLE clearer what the version is related to.</p>",
        "id": 516695389,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1746628841
    },
    {
        "content": "<p>While I realize there's not really anything that can be done about this, I suspect it's going to cause confusion that I think for all other platforms if you have a wheel with a smaller number it works for everything requiring a bigger number, e.g. glibc versions, macos versions, android api versions, etc. Given all that precedent everyone's going to naturally expect wasi 24 to work with wasi 26 and it's going to be an uphill battle messaging that they're incompatible</p>",
        "id": 516696043,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1746628985
    },
    {
        "content": "<p>My understanding is that would require e.g. an organization or group to commit to maintaining wasi-libc and ensuring backward compatibility indefinitely, and nobody has signed up for that yet, AFAIK.  I.e. something <em>can</em> be done about it, but nobody has offered to do it, yet.</p>",
        "id": 516701720,
        "sender_full_name": "Joel Dice",
        "timestamp": 1746630196
    },
    {
        "content": "<p>Agreed, but my point is that isn't going to stop everyone expecting this to work anyway</p>",
        "id": 516705976,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1746631293
    },
    {
        "content": "<p>To further confuse things: it probably <em>will</em> work; it's just not <em>guaranteed</em> to work.</p>",
        "id": 516706154,
        "sender_full_name": "Joel Dice",
        "timestamp": 1746631336
    },
    {
        "content": "<p>yeah IMO that's a good point, and means that practically no matter what we do we simply cannot change the ABI. Everyone's going to rely on it working anyway and it's too much of a carpet-pull to expect otherwise.</p>\n<p>Although going too far down that road leads one to wonder if we should commit to ABI compatibility anyway. But then that raises questions of \"well something has to be able to break at some point\". Iunno I basically think we're setting ourselves up for a world of pain once a breaking change comes along</p>",
        "id": 516708318,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1746631892
    },
    {
        "content": "<p>I realize as well though that I'm preaching to the choir, this isn't the right place to discuss wasi-libc ABI stability, my bad</p>",
        "id": 516708507,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1746631935
    },
    {
        "content": "<p>I would add a label to what <code>24</code> means and also add <code>wasm32</code> as you should specify the \"CPU\" on top of the \"OS\".</p>",
        "id": 516770436,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1746654048
    },
    {
        "content": "<p>So maybe <code>wasi_p2_sdk_24_wasm32</code></p>",
        "id": 516770558,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1746654115
    },
    {
        "content": "<p>BTW you can get all of your supported wheel tags with <code>py -m pip debug --verbose</code>.</p>\n<p>Also note that wheel tags are considered opaque and thus <strong>not</strong> parsable.</p>",
        "id": 516770810,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1746654231
    },
    {
        "content": "<p>BTW do we know if there will be minor versions to WASI once 1 is reached? E.g. will it become <code>wasi_1_sdk_24_wasm32</code> or <code>wasi_1_0_sdk_24_wasm32</code>? This is also assuming there will never be a minor release of the SDK.</p>",
        "id": 516771062,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1746654342
    },
    {
        "content": "<p>I'm assuming that if there is a minor release of the SDK, it will be ABI compatible with the major release it branched from, so no need to encode that in the wheel tag.</p>\n<p>Regarding minor versions to WASI after 1.0: yes, I expect we'll have those, and that they'll be backwards compatible with 1.0 in the sense that guest code targetting 1.0 will work on a host supporting 1.x.  But if you use a new feature added in 1.x, I suppose you'll want that reflected in the wheel tag, e.g. <code>wasi_1_2_sdk_29_wasm32</code> if the feature was added in WASI 1.2.</p>",
        "id": 516771862,
        "sender_full_name": "Joel Dice",
        "timestamp": 1746654760
    },
    {
        "content": "<p>How would ya'll feel about the architecture coming first -- mirroring things like regular target triples (<code>machine-vendor-os</code>)?</p>\n<p>Maybe <code>wasm32_wasi_1_2_sdk29</code>?</p>\n<p>Also, I'm curious if SDK versions aren't completely indicative of included WASI features... Will it be possible to have <code>wasm32_wasi_1_1_sdk29</code> <em>and</em> <code>wasm32_wasi_1_2_sdk29</code> ?</p>",
        "id": 516803312,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1746675253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/channel/219900-wasi/topic/Platform.20tags.20for.20packages.20targeting.20WASI/near/516771862\">said</a>:</p>\n<blockquote>\n<p>I'm assuming that if there is a minor release of the SDK, it will be ABI compatible with the major release it branched from, so no need to encode that in the wheel tag.</p>\n<p>Regarding minor versions to WASI after 1.0: yes, I expect we'll have those, and that they'll be backwards compatible with 1.0 in the sense that guest code targetting 1.0 will work on a host supporting 1.x.  But if you use a new feature added in 1.x, I suppose you'll want that reflected in the wheel tag, e.g. <code>wasi_1_2_sdk_29_wasm32</code> if the feature was added in WASI 1.2.</p>\n</blockquote>\n<p>I would be royally pissed off if we reached a major version and then decided that major-versioning was irrelevant. Yes, minor versions <strong>should</strong> be major version compatible. We've just not reached the major version yet. so....</p>",
        "id": 516860887,
        "sender_full_name": "Ralph",
        "timestamp": 1746699967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598440\">Victor Adossi</span> <a href=\"#narrow/channel/219900-wasi/topic/Platform.20tags.20for.20packages.20targeting.20WASI/near/516803312\">said</a>:</p>\n<blockquote>\n<p>Also, I'm curious if SDK versions aren't completely indicative of included WASI features... Will it be possible to have <code>wasm32_wasi_1_1_sdk29</code> <em>and</em> <code>wasm32_wasi_1_2_sdk29</code> ?</p>\n</blockquote>\n<p>Yes, I expect that will be possible.  I'd anticipate that you could specify the WASI version (e.g. 1.0, 1.1, or 1.2) you want to target when you build <code>wasi-sdk</code>.  The resulting wasi-libc could unconditionally use features available in the specified version, but only optionally import features available in later versions (or not even optionally import them, perhaps).  And I imagine the default binary build of WASI-SDK would target WASI 1.0 and (at most) optionally import features available only in later versions.</p>\n<p>So for maximum compatibility, you'd want to publish wheels using <code>wasm32_wasi_1_0_sdk29</code>, which, via optional imports, would still be able to use features from later WASI versions (i.e. 1.1 and later) at runtime if the host supports them, but would gracefully fall back to an alternative implementation otherwise.</p>",
        "id": 516901868,
        "sender_full_name": "Joel Dice",
        "timestamp": 1746712478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598440\">Victor Adossi</span> <a href=\"#narrow/channel/219900-wasi/topic/Platform.20tags.20for.20packages.20targeting.20WASI/near/516803312\">said</a>:</p>\n<blockquote>\n<p>How would ya'll feel about the architecture coming first -- mirroring things like regular target triples (<code>machine-vendor-os</code>)?</p>\n<p>Maybe <code>wasm32_wasi_1_2_sdk29</code>?</p>\n</blockquote>\n<p>That isn't how other Python platform tags are formatted unfortunately.</p>",
        "id": 516963035,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1746731133
    },
    {
        "content": "<p>Welp that's fine -- I'm sure it'll be documented well/somewhere. If it's a consistency issue I can understand upstream wanting to keep things consistent.</p>",
        "id": 517015542,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1746757909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598440\">Victor Adossi</span> <a href=\"#narrow/channel/219900-wasi/topic/Platform.20tags.20for.20packages.20targeting.20WASI/near/517015542\">said</a>:</p>\n<blockquote>\n<p>Welp that's fine -- I'm sure it'll be documented well/somewhere. If it's a consistency issue I can understand upstream wanting to keep things consistent.</p>\n</blockquote>\n<p>Since I'm \"upstream\" in this scenario, yes, I want consistency. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> And there will a whole PEP explaining how to calculate the tag and how to determine whether a Python interpreter can use a specific tag.</p>",
        "id": 517642678,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1747078133
    }
]