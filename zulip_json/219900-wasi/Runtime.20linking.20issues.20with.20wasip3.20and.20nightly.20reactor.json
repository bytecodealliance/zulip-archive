[
    {
        "content": "<p>I have a WASI library that uses <code>wasi-http@0.3.0-draft</code>. I generated the wit bindings myself with async support. Compilation is done using <code>cargo build --manifest-path wasm/Cargo.toml --target wasm32-wasip1 --release</code>, followed by <code>wasm-tools component new target/wasm32-wasip1/release/library.wasm --adapt wasi_snapshot_preview1.reactor.wasm --skip-validation -o component.wasm</code>. As far as I understood, this should lift my component into p3.</p>\n<p>I use the wasip3-prototyping wasmtime implementation and its other crates. The WASM binary loading works and I don't get any parsing errors (which should mean that all tools used in the process generate the same async ABI).</p>\n<p>The issue I am facing now is that the reactor adapter uses <code>wasi:cli/environment@0.2.3</code>. But the linker only knows about <code>0.3.0</code>, since that's what gets added by <code>wasmtime-wasi</code>.</p>\n<p>These are my pinned dependency versions:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/bytecodealliance/wasip3-prototyping\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rev</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"a759b5c37fdd3a7b5110a33fa24b624c2baee5d4\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"s2\">\"component-model-async\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">wasmtime-wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/bytecodealliance/wasip3-prototyping\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rev</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"a759b5c37fdd3a7b5110a33fa24b624c2baee5d4\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">wit-bindgen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/bytecodealliance/wit-bindgen\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rev</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"80cf018de24a45210c9ffe15d944f4485a0457fc\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"c1\"># wasm-tools = { git = \"https://github.com/bytecodealliance/wasm-tools\", rev = \"150a220ec5a586433c8a83cf81915dc767a376d9\" }</span>\n<span class=\"c1\"># wasi_snapshot_preview1.reactor.wasm: https://github.com/bytecodealliance/wasip3-prototyping/releases/download/dev/wasi_snapshot_preview1.reactor.wasm</span>\n</code></pre></div>\n<p>Some debugging output I did:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>wasm-objdump<span class=\"w\"> </span>-x<span class=\"w\"> </span>wasi_snapshot_preview1.reactor.wasm<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>grep<span class=\"w\"> </span>env\n<span class=\"go\"> - memory[0] pages: initial=0 &lt;- env.memory</span>\n<span class=\"go\"> - func[0] sig=0 &lt;_ZN22wasi_snapshot_preview122wasi_cli_get_arguments17h65f3069d0d182bd1E&gt; &lt;- wasi:cli/environment@0.2.3.get-arguments</span>\n<span class=\"go\"> - func[1] sig=0 &lt;_ZN22wasi_snapshot_preview124wasi_cli_get_environment17h16221c78d8ae41fdE&gt; &lt;- wasi:cli/environment@0.2.3.get-environment</span>\n<span class=\"go\"> - func[78] sig=20 &lt;environ_get&gt;</span>\n<span class=\"go\"> - func[79] sig=20 &lt;environ_sizes_get&gt;</span>\n<span class=\"go\"> - func[78] &lt;environ_get&gt; -&gt; \"environ_get\"</span>\n<span class=\"go\"> - func[79] &lt;environ_sizes_get&gt; -&gt; \"environ_sizes_get\"</span>\n<span class=\"go\"> - func[78] size=409 &lt;environ_get&gt;</span>\n<span class=\"go\"> - func[79] size=387 &lt;environ_sizes_get&gt;</span>\n<span class=\"go\"> - func[1] &lt;_ZN22wasi_snapshot_preview124wasi_cli_get_environment17h16221c78d8ae41fdE&gt;</span>\n<span class=\"go\"> - func[78] &lt;environ_get&gt;</span>\n<span class=\"go\"> - func[79] &lt;environ_sizes_get&gt;</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>cargo<span class=\"w\"> </span>run<span class=\"w\"> </span>-p<span class=\"w\"> </span>ugl-wasmtime\n<span class=\"go\">[...]</span>\n\n<span class=\"go\">thread 'main' panicked at ugl-wasmtime/src/main.rs:2:25:</span>\n<span class=\"go\">called `Result::unwrap()` on an `Err` value: component imports instance `wasi:cli/environment@0.2.3`, but a matching implementation was not found in the linker</span>\n\n<span class=\"go\">Caused by:</span>\n<span class=\"go\">    0: instance export `get-environment` has the wrong type</span>\n<span class=\"go\">    1: function implementation is missing</span>\n<span class=\"go\">note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace</span>\n</code></pre></div>\n<p>These are the components of my async wasm library:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"c1\"># deps.toml</span>\n<span class=\"k\">[http]</span>\n<span class=\"n\">url</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/WebAssembly/wasi-http/archive/d163277b8684483a2334363ca1492ca298ea526d.tar.gz\"</span>\n<span class=\"n\">subdir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"wit-0.3.0-draft\"</span>\n\n<span class=\"c1\"># world.wit</span>\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">ugl</span><span class=\"err\">:</span><span class=\"n\">wasi-http</span><span class=\"err\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"w\"> </span><span class=\"err\">{</span>\n<span class=\"w\">    </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"err\">:</span><span class=\"n\">http</span><span class=\"err\">/</span><span class=\"n\">proxy</span><span class=\"err\">@</span><span class=\"n\">0</span><span class=\"p\">.</span><span class=\"n\">3</span><span class=\"p\">.</span><span class=\"n\">0-draft</span><span class=\"err\">;</span>\n<span class=\"err\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"bindings\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">generate_all</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>It looks like the reactor does not use the p3 bindings, and thus fails. Is this to be expected? Am I doing something wrong? If more information is needed, please let me know.</p>\n<p>Thanks for your help!</p>",
        "id": 522526604,
        "sender_full_name": "mainrs",
        "timestamp": 1749110881
    }
]