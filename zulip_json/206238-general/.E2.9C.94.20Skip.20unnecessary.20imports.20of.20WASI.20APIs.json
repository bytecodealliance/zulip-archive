[
    {
        "content": "<p>To expand a bit: wasi (used by <code>wasm32-wasip2</code>) and the component model (used by <code>wit-bindgen</code>) are technically different things.</p>",
        "id": 522601214,
        "sender_full_name": "Lann Martin",
        "timestamp": 1749132475
    },
    {
        "content": "<p>It isn't surprising that they get conflated: they are being developed in parallel and releases between the two tend to happen more-or-less simultaneously.</p>",
        "id": 522601593,
        "sender_full_name": "Lann Martin",
        "timestamp": 1749132580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"926721\">MareStare</span> has marked this topic as resolved.</p>",
        "id": 522603795,
        "sender_full_name": "Notification Bot",
        "timestamp": 1749133188
    },
    {
        "content": "<p>Actually you <em>might</em> be able to target <code>wasm32-wasip2</code> without actually importing wasi interfaces if you build with <code>no_std</code>, but I don't recall for sure if that works.</p>",
        "id": 522603837,
        "sender_full_name": "Lann Martin",
        "timestamp": 1749133199
    },
    {
        "content": "<p>Yeah, I thought about no_std, although I do need <code>alloc</code> in this case</p>",
        "id": 522603936,
        "sender_full_name": "MareStare",
        "timestamp": 1749133224
    },
    {
        "content": "<p>You can still use <code>alloc</code> but you have to reference it through the separate top-level <a href=\"https://doc.rust-lang.org/stable/alloc/\"><code>alloc</code> crate</a> (which can make dependencies painful)</p>",
        "id": 522604451,
        "sender_full_name": "Lann Martin",
        "timestamp": 1749133358
    },
    {
        "content": "<p>It might still be easier to target <code>wasm32-unknown-unknown</code> and figure out either <code>cargo component</code> or <code>wasm-tools component new</code> which convert a component-model-flavored wasm module into a wasm component</p>",
        "id": 522605544,
        "sender_full_name": "Lann Martin",
        "timestamp": 1749133662
    },
    {
        "content": "<p>I'm quite curious about the <code>WASI-Virt</code> approach, this is the first I've heard of it, IIUC the native vscode uses wasi, while running in the browser IIUC they have some kind of a VFS.  So naturally I'm curious if it is possible to make the wasi-virt filesystem component use whatever vscode in the browser is using? (I don't expect I'll have any time in the near future to experiment with vscode in the browser, just curious)</p>",
        "id": 522879611,
        "sender_full_name": "matt rice",
        "timestamp": 1749281367
    },
    {
        "content": "<blockquote>\n<p>use whatever vscode in the browser is using</p>\n</blockquote>\n<p>I haven't dug too deep into this, but I don't think VSCode in browser provides any FS interface. There is no terminal even. This is what I know from reading the <a href=\"https://code.visualstudio.com/blogs/2023/06/05/vscode-wasm-wasi\">webassembly post</a> from VSCode that was published in 2023. There they demonstrated a workable web shell that uses a virtual FS. The source code of that web shell is public on <a href=\"https://github.com/microsoft/vscode-wasm/tree/main/webshell\">github</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://code.visualstudio.com/blogs/2023/06/05/vscode-wasm-wasi\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a9bb85dafc61473ba3e902edea6bc8176eaaee20/68747470733a2f2f636f64652e76697375616c73747564696f2e636f6d2f6f70656e6772617068696d672f6f70656e67726170682d626c6f672e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://code.visualstudio.com/blogs/2023/06/05/vscode-wasm-wasi\" title=\"Run WebAssemblies in VS Code for the Web\">Run WebAssemblies in VS Code for the Web</a></div><div class=\"message_embed_description\">Running WebAssemblies in VS Code for the Web.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/microsoft/vscode-wasm/tree/main/webshell\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0277a9e1531840da940575f50327c4a6d4d40ade/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613036303234656235643735653439363164633030363730613835356132336633613939623431386134313365633836353065666131623364323637656638382f6d6963726f736f66742f7673636f64652d7761736d&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/microsoft/vscode-wasm/tree/main/webshell\" title=\"vscode-wasm/webshell at main 路 microsoft/vscode-wasm\">vscode-wasm/webshell at main 路 microsoft/vscode-wasm</a></div><div class=\"message_embed_description\">A WASI implementation that uses VS Code's extension host as the implementing API - microsoft/vscode-wasm</div></div></div>",
        "id": 522908268,
        "sender_full_name": "MareStare",
        "timestamp": 1749317292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598440\">@Victor Adossi</span> I ended up using <code>cargo component build --target wasm32-unknown-unknown</code>, thanks! Although a strange thing is that <code>cargo component</code> seems to still require <code>wasm32-wasip1</code> with this command. Basically I need both <code>wasm32-unknown-unknown</code> and <code>wasm32-wasip1</code> targets installed. Is this expected?</p>",
        "id": 522908385,
        "sender_full_name": "MareStare",
        "timestamp": 1749317421
    },
    {
        "content": "<p>I think so, in Victor's post they mention panic machinery ends up pulling wasi in as a dep</p>",
        "id": 522921163,
        "sender_full_name": "Milan (rajsite)",
        "timestamp": 1749333713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"926721\">MareStare</span> <a href=\"#narrow/channel/206238-general/topic/.E2.9C.94.20Skip.20unnecessary.20imports.20of.20WASI.20APIs/near/522908268\">said</a>:</p>\n<blockquote>\n<p>I haven't dug too deep into this, but I don't think VSCode in browser provides any FS interface.</p>\n</blockquote>\n<p>It has been quite a while since I've looked into it, I believe where I saw this was in this language server extension example, (sorry if this is too many links)</p>\n<p><a href=\"https://github.com/microsoft/vscode-extension-samples/blob/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server/server/src/main.rs#L24\">main.rs</a><br>\nThis appears to be built using <code>wasm-wasip1</code> here:<br>\n<a href=\"https://github.com/microsoft/vscode-extension-samples/blob/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server/server/package.json#L9\">package.json</a><br>\nYet the whole thing <em>is</em> deployable to the web in a browser,<br>\n<a href=\"https://github.com/microsoft/vscode-extension-samples/tree/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server#running-the-sample-in-the-web\">running-the-sample-on-the-web</a><br>\nThen in here they note:</p>\n<blockquote>\n<p>The opened workspace or folder is on a virtual file system. Access to workspace files needs to go through the VS Code <a href=\"https://code.visualstudio.com/api/references/vscode-api#FileSystem\">file system</a> API accessible at <code>vscode.workspace.fs</code>.</p>\n</blockquote>\n<p><a href=\"https://code.visualstudio.com/api/extension-guides/web-extensions#test-your-web-extension-in-vscode.dev\">testing on vscode.dev</a><br>\nThat is primarily refering to js extensions, e.g. not using nodejs APIs to access the fs directly, but going through the vscode API which can then emulate a filesystem in memory.</p>\n<p>So the only thing I imagined is they are also doing something similar to wasi-virt but for wasip1, assuming I'm understanding their build process, and they are deploying wasip1 builds in the browser?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/microsoft/vscode-extension-samples/blob/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server/server/src/main.rs#L24\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/116b301cf7de143b56da2e954a42e2bf7104d35d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636639666636646562646166393538383135303863336538326133346161626237653937396666363362646334663938306231313762656161376434333334312f6d6963726f736f66742f7673636f64652d657874656e73696f6e2d73616d706c6573&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/microsoft/vscode-extension-samples/blob/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server/server/src/main.rs#L24\" title=\"vscode-extension-samples/wasm-language-server/server/src/main.rs at cf30922221d1c2dcb819da857b7f64583991fed0 路 microsoft/vscode-extension-samples\">vscode-extension-samples/wasm-language-server/server/src/main.rs at cf30922221d1c2dcb819da857b7f64583991fed0 路 microsoft/vscode-extension-samples</a></div><div class=\"message_embed_description\">Sample code illustrating the VS Code extension API. - microsoft/vscode-extension-samples</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/microsoft/vscode-extension-samples/blob/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server/server/package.json#L9\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/116b301cf7de143b56da2e954a42e2bf7104d35d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636639666636646562646166393538383135303863336538326133346161626237653937396666363362646334663938306231313762656161376434333334312f6d6963726f736f66742f7673636f64652d657874656e73696f6e2d73616d706c6573&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/microsoft/vscode-extension-samples/blob/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server/server/package.json#L9\" title=\"vscode-extension-samples/wasm-language-server/server/package.json at cf30922221d1c2dcb819da857b7f64583991fed0 路 microsoft/vscode-extension-samples\">vscode-extension-samples/wasm-language-server/server/package.json at cf30922221d1c2dcb819da857b7f64583991fed0 路 microsoft/vscode-extension-samples</a></div><div class=\"message_embed_description\">Sample code illustrating the VS Code extension API. - microsoft/vscode-extension-samples</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/microsoft/vscode-extension-samples/tree/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server#running-the-sample-in-the-web\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/116b301cf7de143b56da2e954a42e2bf7104d35d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636639666636646562646166393538383135303863336538326133346161626237653937396666363362646334663938306231313762656161376434333334312f6d6963726f736f66742f7673636f64652d657874656e73696f6e2d73616d706c6573&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/microsoft/vscode-extension-samples/tree/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server#running-the-sample-in-the-web\" title=\"vscode-extension-samples/wasm-language-server at cf30922221d1c2dcb819da857b7f64583991fed0 路 microsoft/vscode-extension-samples\">vscode-extension-samples/wasm-language-server at cf30922221d1c2dcb819da857b7f64583991fed0 路 microsoft/vscode-extension-samples</a></div><div class=\"message_embed_description\">Sample code illustrating the VS Code extension API. - microsoft/vscode-extension-samples</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://code.visualstudio.com/api/extension-guides/web-extensions#test-your-web-extension-in-vscode.dev\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5b3bb31bf36363fc56bf2c7d990990850b42e85c/68747470733a2f2f636f64652e76697375616c73747564696f2e636f6d2f6f70656e6772617068696d672f6f70656e67726170682d646f63732e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://code.visualstudio.com/api/extension-guides/web-extensions#test-your-web-extension-in-vscode.dev\" title=\"Web Extensions\">Web Extensions</a></div><div class=\"message_embed_description\">Learn how to run extensions in Visual Studio Code for the web and the web extension host.</div></div></div>",
        "id": 522969924,
        "sender_full_name": "matt rice",
        "timestamp": 1749379688
    },
    {
        "content": "<p>So, is this just a case of wasip1 runs in browsers reliably but wasip2 doesn't (yet)?</p>",
        "id": 522970027,
        "sender_full_name": "matt rice",
        "timestamp": 1749379821
    },
    {
        "content": "<p>That does seem weird, but I think it worked because that VSCode guy wrote some packages like these <a href=\"https://github.com/microsoft/vscode-extension-samples/blob/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server/client/src/extension.ts#L9\">https://github.com/microsoft/vscode-extension-samples/blob/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server/client/src/extension.ts#L9</a> under the <code>@vscode/*wasi*</code> umbrella that implement the wasi interfaces in terms of VSCode API. VSCode does have FS-like API that allows reading files of the extension like <a href=\"https://github.com/microsoft/vscode-extension-samples/blob/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server/client/src/extension.ts#L25\">here</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/microsoft/vscode-extension-samples/blob/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server/client/src/extension.ts#L9\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/116b301cf7de143b56da2e954a42e2bf7104d35d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636639666636646562646166393538383135303863336538326133346161626237653937396666363362646334663938306231313762656161376434333334312f6d6963726f736f66742f7673636f64652d657874656e73696f6e2d73616d706c6573&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/microsoft/vscode-extension-samples/blob/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server/client/src/extension.ts#L9\" title=\"vscode-extension-samples/wasm-language-server/client/src/extension.ts at cf30922221d1c2dcb819da857b7f64583991fed0 路 microsoft/vscode-extension-samples\">vscode-extension-samples/wasm-language-server/client/src/extension.ts at cf30922221d1c2dcb819da857b7f64583991fed0 路 microsoft/vscode-extension-samples</a></div><div class=\"message_embed_description\">Sample code illustrating the VS Code extension API. - microsoft/vscode-extension-samples</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/microsoft/vscode-extension-samples/blob/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server/client/src/extension.ts#L25\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/116b301cf7de143b56da2e954a42e2bf7104d35d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636639666636646562646166393538383135303863336538326133346161626237653937396666363362646334663938306231313762656161376434333334312f6d6963726f736f66742f7673636f64652d657874656e73696f6e2d73616d706c6573&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/microsoft/vscode-extension-samples/blob/cf30922221d1c2dcb819da857b7f64583991fed0/wasm-language-server/client/src/extension.ts#L25\" title=\"vscode-extension-samples/wasm-language-server/client/src/extension.ts at cf30922221d1c2dcb819da857b7f64583991fed0 路 microsoft/vscode-extension-samples\">vscode-extension-samples/wasm-language-server/client/src/extension.ts at cf30922221d1c2dcb819da857b7f64583991fed0 路 microsoft/vscode-extension-samples</a></div><div class=\"message_embed_description\">Sample code illustrating the VS Code extension API. - microsoft/vscode-extension-samples</div></div></div>",
        "id": 522976023,
        "sender_full_name": "MareStare",
        "timestamp": 1749387342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"926721\">@MareStare</span> </p>\n<p>One last thing to note about this (and more relevant to your original question), in the <a href=\"https://github.com/microsoft/vscode-wasm/\">vscode-wasm</a> repo (Ths is the repo with that <code>wasm-wasi-lsp</code> library you linked to),</p>\n<p>there are two wasm-wasi-core is the thing that runs wasm32-wasip1 on both the desktop and the web,<br>\nIn that same repo there is a directory: wasm-wasi-core-preview2 I'm not sure how one goes about using it, and the design.md file in common/ seems to indicate that there are still some problems that need solving.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/microsoft/vscode-wasm/\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f84c5eef365df88adef1cf0857a3200b1aa2c3e8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656433343033636234383166383433373038653432316532336666633736343839393962303263383465623261343139306465363934663138333861313533362f6d6963726f736f66742f7673636f64652d7761736d&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/microsoft/vscode-wasm/\" title=\"GitHub - microsoft/vscode-wasm: A WASI implementation that uses VS Code's extension host as the implementing API\">GitHub - microsoft/vscode-wasm: A WASI implementation that uses VS Code's extension host as the implementing API</a></div><div class=\"message_embed_description\">A WASI implementation that uses VS Code's extension host as the implementing API - microsoft/vscode-wasm</div></div></div>",
        "id": 523314297,
        "sender_full_name": "matt rice",
        "timestamp": 1749567987
    },
    {
        "content": "<p>hey, if you have any questions about vscode implementations, <span class=\"user-mention\" data-user-id=\"617931\">@Dirk B盲umer</span> is around and can answer -- though he's currently not working on that at the moment. (He's in CET)</p>",
        "id": 524412457,
        "sender_full_name": "Ralph",
        "timestamp": 1750153592
    },
    {
        "content": "<p>The preview2 implementation is work in progress and is not functional right now.</p>",
        "id": 524585994,
        "sender_full_name": "Dirk B盲umer",
        "timestamp": 1750190039
    }
]