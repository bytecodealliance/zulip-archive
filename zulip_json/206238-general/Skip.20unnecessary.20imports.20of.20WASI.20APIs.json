[
    {
        "content": "<p>Hi, my goal is to expose a small parser library with several functions from Rust to JS to be able to use it in a VSCode extension. My Rust code has zero dependencies and it does no IO. I tried building it with <code>wit-bindgen</code> and <code>cargo build --target wasm32-wasip2</code>, and then transpiling the resulting <code>.wasm</code> with <code>jco</code>, but the problem is that the output seems to depend on <code>wasi</code> imports. I want my VSCode extension to be compatible with the web (browser) environment. Is there a way to disable <code>wasi</code> APIs for my component? Or maybe I shouldn't just use the component model and use <code>wasm-bindgen</code> in this case?</p>",
        "id": 522486553,
        "sender_full_name": "MareStare",
        "timestamp": 1749091300
    },
    {
        "content": "<p>if you want something that can run in browsers reliably I would not use wasip2 currently, since your library really does not need libc, wasm-bindgen would be much more straightforward and doesn't require any host imports unless you want to use some</p>",
        "id": 522489939,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1749093544
    },
    {
        "content": "<p>Wasi-virt should let you plug any imports you know you don't need: <a href=\"https://github.com/bytecodealliance/WASI-Virt\">https://github.com/bytecodealliance/WASI-Virt</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/WASI-Virt\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ec73a8656fbaf31373a2b75d2ba02a31a97db086/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396235383163386633303830666563323861303031313764616665383536303534326435316261373737346463333735363862663864323364626635363532382f62797465636f6465616c6c69616e63652f574153492d56697274&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/WASI-Virt\" title=\"GitHub - bytecodealliance/WASI-Virt: Virtual implementations of WASI APIs\">GitHub - bytecodealliance/WASI-Virt: Virtual implementations of WASI APIs</a></div><div class=\"message_embed_description\">Virtual implementations of WASI APIs. Contribute to bytecodealliance/WASI-Virt development by creating an account on GitHub.</div></div></div>",
        "id": 522491403,
        "sender_full_name": "Milan (rajsite)",
        "timestamp": 1749094573
    },
    {
        "content": "<p>If you end up exposing an API surface area via WIT then jco transpile can help take a wasi p2 based component and generate browser compatible js + wasm: <a href=\"https://bytecodealliance.github.io/jco/transpiling.html\">https://bytecodealliance.github.io/jco/transpiling.html</a></p>",
        "id": 522491703,
        "sender_full_name": "Milan (rajsite)",
        "timestamp": 1749094773
    },
    {
        "content": "<p>Thank you for sharing your knowledge <span aria-label=\"folded hands\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"folded hands\">:folded_hands:</span>. I guess wasm-bindgen will be the simplest approach in this case, but wasm-virt also looks cool, I'll keep that in mind.</p>\n<p>I thought there could be a way to specify which wasi apis the Rust library should compile with when I build it with <code>cargo</code>. Something like wasm-virt but right during build instead of in a post-processing. I guess <code>cargo</code> will always output a binary that depends on all wasi APIs</p>",
        "id": 522559899,
        "sender_full_name": "MareStare",
        "timestamp": 1749120664
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"926721\">@MareStare</span> what you can also do is build for <code>wasm32-unknown-unknown</code> as the target with a tool like <code>cargo component</code>!<br>\n<a class=\"message-link\" href=\"/#narrow/channel/407292-cargo-component/topic/Compile.20without.20wasi.20packages/near/500322765\">#cargo-component &gt; Compile without wasi packages @ ðŸ’¬</a> </p>\n<p>If you want to do the build with just <code>cargo</code>, you need to pull down nightly. This comes up from time to time:</p>\n<p><a class=\"message-link\" href=\"/#narrow/channel/217126-wasmtime/topic/wasi.20pulled.20in.20unintentionally/near/490272624\">#wasmtime &gt; wasi pulled in unintentionally @ ðŸ’¬</a> </p>\n<p>That gets you the Rust Webassembly binary without the deps imported, and from there, transpiling with <code>jco</code> should not introduce those deps!</p>",
        "id": 522563509,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1749121795
    },
    {
        "content": "<p>Interesting, I did try to build for <code>wasm32-unknown-unknown</code>, but it looked like the resulting <code>.wasm</code> wasn't using the component model even though I used <code>wit-bindgen</code> in it. I guess cargo-component would have fixed that. Thanks for the suggestion <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 522570198,
        "sender_full_name": "MareStare",
        "timestamp": 1749123816
    },
    {
        "content": "<p>Ah yes, so unfortunately this bit is counter intuitive -- <code>wasm32-unknown-unknown</code> <em>doesn't</em> use the component model (or WASI) -- it's more from the world <em>before</em> WASI. </p>\n<p>The thing is, <code>cargo-component</code> is component-only, so it interprets that to to mean \"no wasi, but still produce a component\", which is a bit of a nonsensical command, but it's the way that we have to do it w/ <code>cargo component</code></p>",
        "id": 522578310,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1749126119
    },
    {
        "content": "<p>Then of course, in Rust land (which maybe makes the most sense), no extra WASI deps are added for a normal app, but the panic machinery being available by default pulls in the dependencies, so to get them out you have to strip out the panic machinery (which requires nightly)</p>",
        "id": 522578452,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1749126165
    },
    {
        "content": "<p>Interesting, now you made me wonder how panics and std io work in <code>wasm32-unknown-unknown</code> without wasi at all <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>. I guess I'll have to experiment</p>",
        "id": 522587763,
        "sender_full_name": "MareStare",
        "timestamp": 1749128895
    }
]