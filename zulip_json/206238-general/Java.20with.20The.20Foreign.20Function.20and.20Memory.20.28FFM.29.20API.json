[
    {
        "content": "<p>I am finally coming back to experiment with getting Wasmtime running in Java with the now stabilized FFM API and jextract. I'm currently running into an issue with getting the the <code>hello.c</code> C api demo working (in Java). It looks like I'm running into a poisoned <code>RwLock</code> in the <code>TypeRegistry</code>, clearing the poisoned value gets passed the issue, but then just runs into another panic after in <code>RegisteredType::register_singleton_rec_group</code>. This is all happening during the call to <code>wasmtime_func_new</code> matching the logic in <code>hello.c</code>. Anyone have any tips on how track down the issue and why this lock is getting poisoned? (this is in the current release-36.0.0 branch)</p>",
        "id": 537766505,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757025965
    },
    {
        "content": "<p>If a lock is poisioned it means the thread it was running on died somehow (unwound via an exception)</p>",
        "id": 537767390,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1757026633
    },
    {
        "content": "<p>You can use the wasmtime c api from multiple threads safely, because internally wasmtime is thread safe, but if you unwind across wasmtime in one of your threads its quite possible to break everything for all threads</p>",
        "id": 537767649,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1757026794
    },
    {
        "content": "<p>I'm not currently spawning any additional threads. Is there a background process in Wasmtime?</p>",
        "id": 537767750,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757026843
    },
    {
        "content": "<p>wasmtime will spawn threads in order to parallelize cranelift codegen of wasm</p>",
        "id": 537767838,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1757026883
    },
    {
        "content": "<p>but it manages those itself</p>",
        "id": 537767858,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1757026889
    },
    {
        "content": "<p>and if you're using wasmtime-wasi in there, it will start its own multi-threaded tokio to perform io</p>",
        "id": 537767927,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1757026937
    },
    {
        "content": "<p>yeah, this is literally just the hello demo, <a href=\"https://docs.wasmtime.dev/examples-c-hello-world.html\">https://docs.wasmtime.dev/examples-c-hello-world.html</a>, nothing fancy yet.</p>",
        "id": 537767974,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757026979
    },
    {
        "content": "<p>I'll see if I cut out the junit test runner if that removes some of the potential issues.</p>",
        "id": 537768137,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757027098
    },
    {
        "content": "<p>sorry, I really don't have any other ideas. I don't know the jvm or FFM well enough to guess what might be getting you there.</p>",
        "id": 537768143,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1757027099
    },
    {
        "content": "<p>If you're able to set an environment variable <code>WASMTIME_LOG=trace</code>, the trace-log output from Wasmtime might give some hints as to what's going wrong</p>",
        "id": 537768398,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1757027249
    },
    {
        "content": "<p>(feel free to put that in a gist and link here -- I can't guarantee I'll see anything but someone might)</p>",
        "id": 537768443,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1757027276
    },
    {
        "content": "<p>ah, cool, I was wondering about that. I hacked up the code a bunch in wasmtime already to try and trace all of this in more detail.</p>",
        "id": 537768480,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757027307
    },
    {
        "content": "<p>Oh it'll be <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/crates/c-api/src/engine.rs#L14-L23\"><code>RUST_LOG</code> for the c api</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/crates/c-api/src/engine.rs#L14-L23\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ad70039577a9e226e3ac650db5a47b0386dfc46b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376138346631373561663432353133356438376434353363386132656133323561643232646134636163383261353866386361396130343761313735373862652f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/crates/c-api/src/engine.rs#L14-L23\" title=\"wasmtime/crates/c-api/src/engine.rs at a631d20afa7a0154e63c2b8aa34a979864518991 路 bytecodealliance/wasmtime\">wasmtime/crates/c-api/src/engine.rs at a631d20afa7a0154e63c2b8aa34a979864518991 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 537768550,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757027344
    },
    {
        "content": "<p>could you gist a backtrace as well?</p>",
        "id": 537768570,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757027357
    },
    {
        "content": "<p>if you're running into a poisoned lock that means that something panicked earlier and that's the interesting backtrace in theory</p>",
        "id": 537768626,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757027403
    },
    {
        "content": "<p>I'm not aware of anything which would cause this so it sounds like a bug</p>",
        "id": 537768644,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757027414
    },
    {
        "content": "<p>Here's the backtrace: <a href=\"https://gist.github.com/bluejekyll/ff28e00ed03c9a3fc689291be2a8fd0b\">https://gist.github.com/bluejekyll/ff28e00ed03c9a3fc689291be2a8fd0b</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/bluejekyll/ff28e00ed03c9a3fc689291be2a8fd0b\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2aafd906f69f8f71c7544060163ba3e419b173e8/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/bluejekyll/ff28e00ed03c9a3fc689291be2a8fd0b\" title=\"Poisoned RwLock in Wasmtime\">Poisoned RwLock in Wasmtime</a></div><div class=\"message_embed_description\">Poisoned RwLock in Wasmtime. GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 537768950,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757027653
    },
    {
        "content": "<p>let me get the full traced logs as well.</p>",
        "id": 537768995,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757027684
    },
    {
        "content": "<p>oh</p>",
        "id": 537768998,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757027690
    },
    {
        "content": "<p>no I got it</p>",
        "id": 537769004,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757027693
    },
    {
        "content": "<p>wait no nvmd</p>",
        "id": 537769008,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757027698
    },
    {
        "content": "<p>is this all you see, nothing else? There in theory should be some other backtrace b/c poisoning a lock should require a panic somewhere</p>",
        "id": 537769088,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757027756
    },
    {
        "content": "<p>So far, the engine, store, and context all are created without errors. I can compile the wat -&gt; wasm without error. so things are \"working\" up to that point. I had a theory that the func_ty I was creating for the C callback was bad, but that appears to be fine as well.</p>",
        "id": 537769743,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757028283
    },
    {
        "content": "<p>I have the full logs now...</p>",
        "id": 537769751,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757028294
    },
    {
        "content": "<p>so you sort of <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/examples/hello.c#L76\">got this far</a> in a sense? (converted to Java of course)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/examples/hello.c#L76\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ad70039577a9e226e3ac650db5a47b0386dfc46b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376138346631373561663432353133356438376434353363386132656133323561643232646134636163383261353866386361396130343761313735373862652f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a631d20afa7a0154e63c2b8aa34a979864518991/examples/hello.c#L76\" title=\"wasmtime/examples/hello.c at a631d20afa7a0154e63c2b8aa34a979864518991 路 bytecodealliance/wasmtime\">wasmtime/examples/hello.c at a631d20afa7a0154e63c2b8aa34a979864518991 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 537769820,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757028355
    },
    {
        "content": "<p>yeah, exactly.</p>",
        "id": 537769939,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757028452
    },
    {
        "content": "<p>I added a comment to that gist that has the log output.</p>",
        "id": 537770120,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757028600
    },
    {
        "content": "<p>wow but really no other panicking backtrace?</p>",
        "id": 537770178,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757028633
    },
    {
        "content": "<p>you could try running wasmtime inside gdb and adding catch points for rust panics, that should show wherever the panic is happening</p>",
        "id": 537770195,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1757028645
    },
    {
        "content": "<p>running in gdb will be hard... I'm going to try and remove some of the maven and junit overhead to make it just a raw java execution. that will take me a minute...</p>",
        "id": 537770293,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757028711
    },
    {
        "content": "<p>how certain are you that the bindings are right? b/c this could also be random corruption of memory or something like that</p>",
        "id": 537770320,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757028737
    },
    {
        "content": "<p>e.g. you just happen to flip the \"this is poisoned lock\" bit</p>",
        "id": 537770331,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757028744
    },
    {
        "content": "<p>albeit implausible</p>",
        "id": 537770350,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757028758
    },
    {
        "content": "<p>Oh, it totally could be corruption. I'm definitely new to this Java FFM API. I've done a lot of double checking, but definitely could be something there. I did try clearing the bit, but things are clearly in a bad state at that point.</p>",
        "id": 537770416,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757028822
    },
    {
        "content": "<p>a smoking gun for wasmtime would be a reproduction with just the C API (e.g. a C file repro)</p>",
        "id": 537770457,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757028859
    },
    {
        "content": "<p>but I realize that's probably difficult to create in this case</p>",
        "id": 537770461,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757028864
    },
    {
        "content": "<p>actually in gdb you'll want to use <code>rbreak rust_panic</code> according to <a href=\"https://github.com/rust-lang/rust/issues/21102#issuecomment-3080599300\">https://github.com/rust-lang/rust/issues/21102#issuecomment-3080599300</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/issues/21102#issuecomment-3080599300\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2329b09b88df69b67de7eb71be2145b190c67e8e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663030623561333733666436336231393061373439623731656330353164653861373066353863343637356462336332663339646664643230303763623062372f727573742d6c616e672f727573742f6973737565732f3231313032&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/issues/21102#issuecomment-3080599300\" title=\"GDB should break on panic 路 Issue #21102 路 rust-lang/rust\">GDB should break on panic 路 Issue #21102 路 rust-lang/rust</a></div><div class=\"message_embed_description\">Expected behavior: when I use gdb, gdb should catch the panic and I should be able to use bt to analyze the stack. when I use RUST_BACKTRACE=1 I should see source files and line numbers in the back...</div></div></div>",
        "id": 537770472,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1757028882
    },
    {
        "content": "<p>Yeah, I assume at this point that I'm screwing something up with Java, but I've not found that yet.</p>",
        "id": 537770624,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757028949
    },
    {
        "content": "<p>are you able to push up some code to glance over?</p>",
        "id": 537770753,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757029000
    },
    {
        "content": "<p>I also know nothing of java or ffm but something might stick out still</p>",
        "id": 537770768,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757029010
    },
    {
        "content": "<p>I can post a gist of the demo code that I have in Java, if you want more I could push it...</p>",
        "id": 537770861,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757029058
    },
    {
        "content": "<p>yeah just w/e you got so far interacting with the C API</p>",
        "id": 537770878,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757029073
    },
    {
        "content": "<p>Here's the impl: <a href=\"https://gist.github.com/bluejekyll/cd0f53f2c701ce6f879c305048b1da73\">https://gist.github.com/bluejekyll/cd0f53f2c701ce6f879c305048b1da73</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/bluejekyll/cd0f53f2c701ce6f879c305048b1da73\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2aafd906f69f8f71c7544060163ba3e419b173e8/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/bluejekyll/cd0f53f2c701ce6f879c305048b1da73\" title=\"WasmtimeJavaTest.java\">WasmtimeJavaTest.java</a></div><div class=\"message_embed_description\">WasmtimeJavaTest.java. GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 537771001,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757029175
    },
    {
        "content": "<p>I have my old JNI stuff lying around this codebase, I'd prefer not to push all of that until I get it cleaned up.</p>",
        "id": 537771132,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757029264
    },
    {
        "content": "<p>unsure if this would affect things but <code>helloCallbackDesc</code> doesn't look quite right</p>",
        "id": 537771354,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757029455
    },
    {
        "content": "<p>or is one of the first arguments the return value?</p>",
        "id": 537771381,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757029478
    },
    {
        "content": "<p>return type*</p>",
        "id": 537771382,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757029481
    },
    {
        "content": "<p>Doesn't that match this C API? <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1047b51183f5906ded5d82ec375f77e586485b5f/examples/hello.c#L19-L21\">https://github.com/bytecodealliance/wasmtime/blob/1047b51183f5906ded5d82ec375f77e586485b5f/examples/hello.c#L19-L21</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/1047b51183f5906ded5d82ec375f77e586485b5f/examples/hello.c#L19-L21\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/959e7cb26fadaff8b8e8969e7e2a2fba8c87a89a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393664326664393636343036303938386331393136353465313164373537386630386637646565613130653438633732373131396232613561613064323631632f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/1047b51183f5906ded5d82ec375f77e586485b5f/examples/hello.c#L19-L21\" title=\"wasmtime/examples/hello.c at 1047b51183f5906ded5d82ec375f77e586485b5f 路 bytecodealliance/wasmtime\">wasmtime/examples/hello.c at 1047b51183f5906ded5d82ec375f77e586485b5f 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 537771572,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757029638
    },
    {
        "content": "<p>I think the whole thing is crashing before that call though...</p>",
        "id": 537771598,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757029664
    },
    {
        "content": "<p>no I think I'm just confused, it looks like the first parameter is actually the return type, then it's all the param types</p>",
        "id": 537771704,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757029709
    },
    {
        "content": "<p>I thought it was just the param types but then the return type wouldn't otherwise be specified anywhere</p>",
        "id": 537771737,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757029719
    },
    {
        "content": "<p>ok wild and crazy guess: tls is super borked</p>",
        "id": 537771809,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757029781
    },
    {
        "content": "<p>IIRC panicking/poisoning goes through TLS infrastructure in the rust standard library and maybe something about that is super broken in this context</p>",
        "id": 537771837,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757029802
    },
    {
        "content": "<p>so, e.g., when the lock is originally unlocked it mistakenly thinks the thread is panicking because the implementation of TLS is broken</p>",
        "id": 537771873,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757029830
    },
    {
        "content": "<p>to confirm/deny this since it looks like you have a custom build of Wasmtime already you might be able to print <a href=\"https://doc.rust-lang.org/stable/std/thread/fn.panicking.html\">this function's result</a> in various places throughout wasmtime</p>",
        "id": 537771922,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757029867
    },
    {
        "content": "<p>that should always return <code>false</code> but if it prints true then something is gone wrong</p>",
        "id": 537771941,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757029878
    },
    {
        "content": "<p>yeah, I can do that.</p>",
        "id": 537771974,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757029902
    },
    {
        "content": "<p>give me a minute.</p>",
        "id": 537771980,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757029907
    },
    {
        "content": "<p>how is wasmtime linked? I presume it's not statically linked so is java dlopen'ing the <a href=\"http://libwasmtime.so\">libwasmtime.so</a> somewhere?</p>",
        "id": 537772010,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757029931
    },
    {
        "content": "<p>yeah, dylib.</p>",
        "id": 537772237,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757030098
    },
    {
        "content": "<p>here's the hs_err log file from java that has a bunch of state captured, if you're interested... (which is a SEGFAULT that I thought was partially due to the panic and the poisoned lock as I dug deeper). <a href=\"https://gist.github.com/bluejekyll/760a232f39c651647552e095f2451e24\">https://gist.github.com/bluejekyll/760a232f39c651647552e095f2451e24</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/bluejekyll/760a232f39c651647552e095f2451e24\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2aafd906f69f8f71c7544060163ba3e419b173e8/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/bluejekyll/760a232f39c651647552e095f2451e24\" title=\"Wasmtime C API with Java Heap\">Wasmtime C API with Java Heap</a></div><div class=\"message_embed_description\">Wasmtime C API with Java Heap. GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 537772373,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757030220
    },
    {
        "content": "<p>that get's handled by Java's generated functions from the jextract tool.</p>",
        "id": 537772562,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757030397
    },
    {
        "content": "<p>ok I think that may still be explainable with broken tls</p>",
        "id": 537772798,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757030546
    },
    {
        "content": "<p>notably <code>RegisteredType::new</code> is on the stack which does rwlock things which hits tls</p>",
        "id": 537772840,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757030567
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/51116820/c-11-thread-local-and-foreign-threads\">https://stackoverflow.com/questions/51116820/c-11-thread-local-and-foreign-threads</a> seems semi-related but also not helpful</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://stackoverflow.com/questions/51116820/c-11-thread-local-and-foreign-threads\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/925df65c212e80f19e81fcac1fb25e660797c3ce/68747470733a2f2f63646e2e737374617469632e6e65742f53697465732f737461636b6f766572666c6f772f496d672f6170706c652d746f7563682d69636f6e40322e706e673f763d373364373961383962646564&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://stackoverflow.com/questions/51116820/c-11-thread-local-and-foreign-threads\" title=\"C++ 11 thread_local and &quot;foreign&quot; threads\">C++ 11 thread_local and \"foreign\" threads</a></div><div class=\"message_embed_description\">I would like to use C++ 11 thread_local, but our application embeds a JVM, and sometimes C++ methods are called from Java-created thread via JNI. This is essentially the same problem as if an exter...</div></div></div>",
        "id": 537773088,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757030762
    },
    {
        "content": "<p>wow, good find, let me read through that.</p>",
        "id": 537773191,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757030836
    },
    {
        "content": "<p>apart from this though I'm all out of ideas :(</p>",
        "id": 537773305,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757030941
    },
    {
        "content": "<p>Yeah, I'll keep digging. I think some of these hints have been good so far, and at least give me some things to experiment with.</p>",
        "id": 537773603,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757031073
    },
    {
        "content": "<p>I'd be interested in hearing more about how/if the JVM is trashing the TLS context if you find out anything specific</p>",
        "id": 537865430,
        "sender_full_name": "David Lloyd",
        "timestamp": 1757077252
    },
    {
        "content": "<p>I found something about some potential issues with signals for traps, disabling <code>signals_based_traps</code> (which btw, is not exposed to the c-api) seems to have \"helped\". I'm now getting to a more consistent failure at a slightly different location. But this is progress.</p>",
        "id": 537956656,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757112499
    },
    {
        "content": "<p>that would make sense since I'd expect both the JVM and wasmtime use SIGSEGV or similar for catching illegal memory accesses (null references for Java)</p>",
        "id": 537957386,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1757113110
    },
    {
        "content": "<p>Wasmtime does have logic to forward on to an already-registered signal handler (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/9f47be2ed6b4ea99fd86f2592277a26d65eff5da/crates/wasmtime/src/runtime/vm/sys/unix/signals.rs#L232\">here</a>); so this isn't a slam-dunk obvious conflict, at least, though there could still be weird interactions of course.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/9f47be2ed6b4ea99fd86f2592277a26d65eff5da/crates/wasmtime/src/runtime/vm/sys/unix/signals.rs#L232\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f1d88351edc632f04736636a77a7234354e2b8bd/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666566393036393763343264636265303132376362383462653166303931666335616132303661663234323862383538316231316263643634333263646234372f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/9f47be2ed6b4ea99fd86f2592277a26d65eff5da/crates/wasmtime/src/runtime/vm/sys/unix/signals.rs#L232\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/sys/unix/signals.rs at 9f47be2ed6b4ea99fd86f2592277a26d65eff5da 路 bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/sys/unix/signals.rs at 9f47be2ed6b4ea99fd86f2592277a26d65eff5da 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 537957620,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1757113285
    },
    {
        "content": "<p>ok I know I'm a broken record but wasmtime's signal handler accesses TLS, and if we assume that the JVM sort of randomly gets signals for GC and whatnot and/or for other threads, and if we assume that accessing TLS in Rust is an issue, then that would explain a why a nondeterministic error with signal handling would be replaced by a deterministic error without signal handling. (but perhaps still point a smoking gun at tls...)</p>",
        "id": 537958631,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757114152
    },
    {
        "content": "<p>Yeah, I'm continuing to try and track that down. But disabling the signal handling gives me a consistent failure scenario, whereas before it was hard to track down.</p>",
        "id": 537959328,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757114867
    },
    {
        "content": "<p>Other things I need to double check somehow is if the Arena based allocations in the Java layer are somehow not playing nice in Rust, like somehow having different layouts or something.</p>",
        "id": 537959504,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1757115054
    },
    {
        "content": "<p>rust is going to be pulling in an allocator from libc</p>",
        "id": 537959556,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1757115085
    },
    {
        "content": "<p>both your libc and the jvm are going to be implementing their allocators by asking the OS for pages through mmap, i wouldnt be too suspicious about that compared to the red flags around TLS</p>",
        "id": 537959700,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1757115248
    }
]