[
    {
        "content": "<blockquote>\n<p>A component, according to my understanding, is a module accompanied by an embedded but explicit interface definition which was provided as WIT</p>\n</blockquote>\n<p>A component can be more than just a single module and an interface definition: it can contain an arbitrary number of modules and subcomponents (each with its own modules), plus directives which instantiate those modules and subcomponents, hooking up imports and exports in various combinations.</p>\n<p>Hypothetically, one could write a tool which extracts all the modules from a component, optimizes them using <code>wasm-opt</code>, and then re-inserts those modules back into the component.  No such tool exists yet AFAIK, however.</p>\n<p>Another option would be to insert a step into the build process which optimizes the module(s) before wrapping them in a component.</p>",
        "id": 506980302,
        "sender_full_name": "Joel Dice",
        "timestamp": 1742478968
    },
    {
        "content": "<p>makes  sense, thank you very much!</p>",
        "id": 506980622,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1742479044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"595146\">Christoph Brewing</span> has marked this topic as resolved.</p>",
        "id": 506980648,
        "sender_full_name": "Notification Bot",
        "timestamp": 1742479051
    },
    {
        "content": "<p>You can explore modules within a component by using <code>wasm-tools component unbundle</code>, but there's no reverse right now to put them back in (but if you're using a component runtime you should still be able to weave everything together)</p>",
        "id": 506988758,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1742480797
    },
    {
        "content": "<p>My current setup is as follows: I am compiling Rust code + WIT to a component which I transform to a module + glue code for use in python. Perhaps, python tooling is able to use components already (?) but back in the days it could only deal with modules...</p>\n<p>What stroke me is that AFTER having done the transformation, I use <em>wasm-opt</em> to optimize the module. The component, however, remains \"unoptimized\". That is how I started wondering.</p>",
        "id": 506989326,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1742480926
    },
    {
        "content": "<p>also it is hypothetically possible for <code>wasm-opt</code> (or a similar tool) to optimize modules within the component <em>with the assumptions about their usage inside that component</em> and do things like cross-module inlining and DCE of exported core functions that aren't used by any component export or whatever. sort of similar to <code>wasm-opt</code>'s meta-DCE for JS and Wasm, but for the component layer and Wasm. but this is a large-ish feature to add or new tool to write and no one has gotten around to it afaik.</p>",
        "id": 506996439,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1742482434
    },
    {
        "content": "<blockquote>\n<p>Perhaps, python tooling is able to use components already (?) but back in the days it could only deal with modules...</p>\n</blockquote>\n<p>If you're talking about <code>wasmtime-py</code>, it has <a href=\"https://github.com/bytecodealliance/wasmtime-py?tab=readme-ov-file#components\">limited support</a> for running components, but it can't handle most WASIp2 imports due to lack of resource support.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-py?tab=readme-ov-file#components\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/fdf1657c4368c89b4bfb8679e361913b9d8ce9ce/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393935613464643762326430626532373730653465396366666138343461326361623536663061373634393131313565663436373765616564346163396339642f62797465636f6465616c6c69616e63652f7761736d74696d652d7079&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-py?tab=readme-ov-file#components\" title=\"GitHub - bytecodealliance/wasmtime-py: Python WebAssembly runtime powered by Wasmtime\">GitHub - bytecodealliance/wasmtime-py: Python WebAssembly runtime powered by Wasmtime</a></div><div class=\"message_embed_description\">Python WebAssembly runtime powered by Wasmtime. Contribute to bytecodealliance/wasmtime-py development by creating an account on GitHub.</div></div></div>",
        "id": 507001980,
        "sender_full_name": "Joel Dice",
        "timestamp": 1742483667
    },
    {
        "content": "<p>Yes, that is what I meant. </p>\n<p>Our technical context is: We use the same WASM functionality in Big-Data frameworks like <strong>Polars</strong> and <strong>PySpark</strong> as well as embedded in services (Docker with gRPC, for example). The former is <strong>Python</strong> based while the latter is <strong>Rust</strong> based.</p>\n<p>My nucleus are WASM components. For Python, I transform them using <code>wasmtime-py</code>. It is the output of <code>wasmtime-py</code>, e.g. <strong>root.core0.wasm</strong>, which I can process further with <code>wasm-opt</code>, e.g. <code>wasm-opt -O3</code>.</p>\n<p>The Rust based services consume the components directly.</p>",
        "id": 507003379,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1742483997
    },
    {
        "content": "<blockquote>\n<p>No such tool exists yet AFAIK</p>\n</blockquote>\n<p>For the simple “optimise modules within” approach there’s <a href=\"https://github.com/esoterra/component-opt\">https://github.com/esoterra/component-opt</a>, but I don’t know if it still works with current components as its last commit is pretty old.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/esoterra/component-opt\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a53f9ffd6f73335688076639cbfbea1f0a218b62/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636638363333653261363166653234383034343534303264373133636133633663313961333239316661383533313261653835336364663465346264373363352f65736f74657272612f636f6d706f6e656e742d6f7074&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/esoterra/component-opt\" title=\"GitHub - esoterra/component-opt: A Wasm component optimizer (mostly a wrapper around wasm-opt)\">GitHub - esoterra/component-opt: A Wasm component optimizer (mostly a wrapper around wasm-opt)</a></div><div class=\"message_embed_description\">A Wasm component optimizer (mostly a wrapper around wasm-opt) - esoterra/component-opt</div></div></div>",
        "id": 507336435,
        "sender_full_name": "primoly",
        "timestamp": 1742579586
    }
]