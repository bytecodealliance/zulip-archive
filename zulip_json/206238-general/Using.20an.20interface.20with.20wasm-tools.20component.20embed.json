[
    {
        "content": "<p>I have the following in calculator.wat:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"add\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"kt\">f32</span><span class=\"p\">.</span><span class=\"n\">add</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>and the following in calculator.wit:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"p\">:</span><span class=\"nc\">component</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">calculator</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">add</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">calculator</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">calculator</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and I get this error when trying to create a wrapping component via <code>wasm-tools</code> commands:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wat2wasm</span><span class=\"w\"> </span><span class=\"n\">calculator</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">output</span><span class=\"o\">=-</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">embed</span><span class=\"w\"> </span><span class=\"n\">calculator</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">calculator</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">encode</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">decode</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">module</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">valid</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">example</span><span class=\"p\">:</span><span class=\"nc\">component</span><span class=\"o\">/</span><span class=\"n\">calculator</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">add</span><span class=\"err\">`</span>\n</code></pre></div>\n<p>It works fine if either the world exports the function directly (no interface) OR if I <code>export \"example:component/calculator#add\"</code> in the wat file. Simply adding the interface (<code>export calculator#add</code>) in the wat file does not work either, but I don't want the core module to have awareness of the WIT that will be wrapping it as a component anyways. I was hoping functions would map even through an interface as long as there were no ambiguities in function name. So, I thought I would check here in case this has been discussed. I don't see anything directly related to this in what I've searched so far.</p>",
        "id": 534724131,
        "sender_full_name": "Mark Fisher",
        "timestamp": 1755300981
    },
    {
        "content": "<blockquote>\n<p>I don't want the core module to have awareness of the WIT</p>\n</blockquote>\n<p>More-or-less, this isn't supported. What you're describing is a viable use case and you can build it out manually, but when using standard tools you'll need to match standard naming conventions</p>",
        "id": 534724227,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1755301109
    },
    {
        "content": "<p>put another way, the component model supports what you want to do, but the tooling does not</p>",
        "id": 534724248,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1755301134
    },
    {
        "content": "<p>in theory this wouldn't be too hard to support though, you'd want a mapping specified to <code>wasm-tools component new</code> saying \"hey when you look for <code>example:component/calculator#add</code> use <code>add</code> instead</p>",
        "id": 534724385,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1755301294
    },
    {
        "content": "<p>Thanks for the quick reply! Sounds like I should create a pre-processing tool that also consults the WIT and simply updates the exports in the core module and call that before <code>embed</code>. Ah, or (reading your follow-up as I type), it would be nicer on the inbound side as mapping rules for expanding the simple function export.</p>",
        "id": 534724464,
        "sender_full_name": "Mark Fisher",
        "timestamp": 1755301440
    },
    {
        "content": "<p>I think this should be relatively straightforward to implement in <code>wasm-tools component new</code> (the <code>wit-component</code> crate in the wasm-tools repo), but doing a preprocessing step would also work</p>",
        "id": 534724787,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1755301929
    },
    {
        "content": "<p>I will create a preprocessing tool, but will also explore what's involved to implement it in <code>wasm-tools</code>, possibly leading to a PR if you do think it would be a welcome addition.</p>",
        "id": 534724975,
        "sender_full_name": "Mark Fisher",
        "timestamp": 1755302208
    }
]