[
    {
        "content": "<p>Thanks for your response! I ended up figuring that out shortly after I sent the message here... lol</p>\n<p>I published with <code>warg</code> instead of <code>wkg</code>. I wonder if these are equivalent?</p>\n<p>I indeed published the built component rather than just the package/\"interface\".</p>\n<p>It does makes sense to me now that the component wraps it in a new package/world, but initially I was confused on the difference -- specially because they are both <code>.wasm</code> I think.</p>",
        "id": 497604156,
        "sender_full_name": "Lorenzo",
        "timestamp": 1738656927
    },
    {
        "content": "<p>I have been working on migrating my application from wasm core modules + protobuf to just wasm components. I really like the design of components (even if all the tools are a bit overwhelming to understand at first lol) -- so many great use cases for this. I wish I had looked more into components before I went the protobuf route a few months ago haha</p>",
        "id": 497604555,
        "sender_full_name": "Lorenzo",
        "timestamp": 1738657081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"755747\">Lorenzo</span> has marked this topic as resolved.</p>",
        "id": 497604820,
        "sender_full_name": "Notification Bot",
        "timestamp": 1738657166
    },
    {
        "content": "<p>I don't think it <em>has</em> to be a one or the other! They work great together :)</p>\n<p>IMO WIT is a higher level than protobuf, because it does not specify things like binary encoding, so it's the more general tool. There's no reason you can't use them together!</p>\n<p>If you run into any documentation that would have helped you figure this out faster, please feel free to point it out (or even update/send a PR if you have the time!)</p>",
        "id": 497610378,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1738659061
    },
    {
        "content": "<p>Yeah I agree re protobuf &amp; WIT. I replaced protobuf in my case because the only reason I was using it was for serializing data from/to wasm, but WIT already does that, plus wasm-to-wasm calls so there's no reason for me to keep protobuf I don't think.</p>\n<p>I'll definitely try to help contribute to docs as much as I can. I opened a PR into the component-docs repo making some adjustments to the Go example :)</p>",
        "id": 497617237,
        "sender_full_name": "Lorenzo",
        "timestamp": 1738661238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598440\">@Victor Adossi</span> I'd like you to elaborate on \"While you can use it however you'd want, I like to think of the ability to push a component to a registry to be for types-only components -- not components that are fully built with functionality as well (though of course the tooling will work with both.\" While that would be an OBVIOUS reason to push a component, I would think there would be several different implementations of wasi:sql or wasi:messaging, for example, that would be pushed in order to use.</p>",
        "id": 497723953,
        "sender_full_name": "Ralph",
        "timestamp": 1738691363
    },
    {
        "content": "<p>Are you thinking about it differently?</p>",
        "id": 497723980,
        "sender_full_name": "Ralph",
        "timestamp": 1738691373
    },
    {
        "content": "<p>Well in my case I actually require both the WIT and the component binary. So naturally I thought I could publish only the binary, and users that need only the WIT (for generating type bindings for example) can use tooling to extract just that, but the tooling doesn't seem to work this way -- where you can use<code>types.wit</code> or <code>types.wasm</code> you can't use <code>component.wasm</code>, it doesn't work, for example <code>wkg wit build</code> or <code>wkg wit fetch</code> will fail. I think it's possible to make it work though, and would make things much more intuitive.</p>\n<p>Let me explain further:</p>\n<p>1 - from the perspective of a user/developer writing a component, you start by writing your <code>.wit</code> which may import dependencies and then you generate typings for those dependencies in your preferred language, then you can start implementing the component.  To generate these typings, you need the <code>.wit</code>s </p>\n<p>2 - from the perspective of building &amp; running a component, the wasm component binary of all dependencies are required so that it can be composed (or alternatively linked at runtime by the host implementation -- which is what I'm doing)</p>\n<p>Publishing a single package as a component (rather than two packages, component + WIT) would serve both of these points.</p>\n<p>My confusion here comes from my first attempt to publish a component, then to consume it as a dependency by doing<code>wkg wit build</code> but that failed and I wasn't able to generate go typings from the published <code>component.wasm</code>.</p>\n<p>I had to publish only the <code>wit</code> for <code>wkg wit build</code> to work from the dependent project. I am able to generate go typings by running:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># published &amp; depends on a  WIT package (not component.wasm)</span>\nwkg<span class=\"w\"> </span>wit<span class=\"w\"> </span>build\n<span class=\"c1\"># WIT package written to example:component.wasm</span>\nwit-bindgen-go<span class=\"w\"> </span>generate<span class=\"w\"> </span>example:component.wasm\n<span class=\"c1\"># successfully generated types</span>\n</code></pre></div>\n<p>So basically I'm trying to find out if there a way to extract the equivalent of the file outputted by <code>wkg wit build</code> from a <code>component.wasm</code>? Because I'm not able to generate typings (nor run <code>wkg wit build</code> itself) if my package points to a <code>component.wasm</code> dependency rather than a WIT. I suspect because there is some renaming of namespaces when you build a component, namely the package becomes <code>root:component</code> -- so it's no longer equivalent to the WIT package. </p>\n<p>To me it seems like a <code>component.wasm</code> should be fully interchangeable with its WIT package but that doesn't seem to be the case currently across the tooling. I think it would make things much more intuitive for users if that were the case, and to me it seems possible and just a matter of updating the metadata or perhaps adding a new keyword to <code>WIT</code> to resolve it.</p>\n<p>Curious if anyone has any thoughts on this.</p>",
        "id": 497784228,
        "sender_full_name": "Lorenzo",
        "timestamp": 1738715751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268586\">Ralph</span> <a href=\"#narrow/channel/206238-general/topic/.E2.9C.94.20Package.20and.20namespace.20being.20renamed.20when.20building.20compo.2E.2E.2E/near/497723953\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"598440\">Victor Adossi</span> I'd like you to elaborate on \"While you can use it however you'd want, I like to think of the ability to push a component to a registry to be for types-only components -- not components that are fully built with functionality as well (though of course the tooling will work with both.\" While that would be an OBVIOUS reason to push a component, I would think there would be several different implementations of wasi:sql or wasi:messaging, for example, that would be pushed in order to use.</p>\n</blockquote>\n<p>Ah I think this might be a misunderstanding -- I mean that <em>specifically</em> for <span class=\"user-mention\" data-user-id=\"755747\">@Lorenzo</span> 's use case. It's not that you shouldn't push functionality to a registry, it's that you shouldn't <code>wkg wit publish</code> a \"functional\" (i.e. composed/non-composed/optimized) component if you intend to use it \"for\" types.</p>\n<p>There's a sort of implicit difference between components that hold functionality and ones that exist to mostly hold WIT.</p>\n<p>Agree that there should and will be different implementations of <code>wasi:*</code> or <code>any-ns:any-package</code> now and in the future, but when you want to pull the actual interface (for example with <code>wkg wit fetch</code> you're going to want to pull the WIT-only version to to build <em>your</em> project against). Once you want to actually compose functionality in, then you need the versions with the functionality (which have to agree on the likely types-only WIT contract). </p>\n<p>Trying to use the \"implementation\" component for everything leads to a very interesting versioning problem -- given <code>company:msg-impl@0.2.0</code>, which version of <code>wasi:messaging</code> does it use?  Moving between versions could introduce type changes from the underlying contract (that just happens to be used in <code>company:msg-impl</code> (of course you'd run into the problem Lorenzo ran into first, before you even had that problem).</p>\n<p>So that's why for me it <em>seems</em> like there's an important difference here between WASMs that just hold WITs and WASMs that hold WIT <em>and</em> functionality.</p>\n<p><span class=\"user-mention\" data-user-id=\"755747\">@Lorenzo</span> Regarding your post afterwards -- we're certainly open to issues and PRs! Maybe it <em>should</em> work that way (maybe it should be easier to \"extract\" WIT from functional WASMs for use when pulling a dep) -- the information is already there after all, it's just renamed due to the build/composition process.</p>\n<p>Agreed that publishing as a single package would definitely be more convenient, but see the versioning issue I mentioned above -- schemas and implementations should likely be kept intentionally separate, IMO. Definitely open to thinking of a work flow that could make this intuitively work though.</p>\n<p>Note that <code>component.wasm</code> has the <em>same exact</em> information as <code>wkg wit build</code>, the problem is that the output world is just <em>renamed</em> because there is <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#item-world\">one root world</a> (last paragraph there). This possibly could be changed, but definitely some discussion on this discontinuity is worth discussing!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#item-world\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f892b6517b43fba9d5f56280de9f81a72bd757cc/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663761613461376362623938646165633334356330663632396363303031616535323064623535323063643565663261356439336261326330323764393234382f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#item-world\" title=\"component-model/design/mvp/WIT.md at main · WebAssembly/component-model\">component-model/design/mvp/WIT.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div>",
        "id": 497804990,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1738728551
    },
    {
        "content": "<p>IMO making an issue (on the component model repo??) would be a great place to start and get discussion going</p>",
        "id": 497805038,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1738728592
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"598440\">@Victor Adossi</span>! I'll look into opening an issue for this :)</p>\n<p>I understand the versioning issues you mentioned.</p>\n<p>The approach I am going to use with my application is to, for each component, publish every WIT &amp; component impl  under 2 different namespaces, for example <code>company:msg</code> for the WIT and <code>company-component:msg</code> for the implementation -- so the <code>company-component</code> namespace holds implementations and <code>company</code> holds WITs. I wonder if this is a common pattern used by people.</p>",
        "id": 497807461,
        "sender_full_name": "Lorenzo",
        "timestamp": 1738730188
    },
    {
        "content": "<p>If the versioning issue can be resolved in a simple &amp; elegant way, then for use cases such as mine only the implementation could be published to the registry (inherently containing the WIT as well). It would be even better if <code>wkg wit build</code> &amp; other commands that only need WIT could then download only the WIT information, to not waste bandwidth on the implementation.</p>",
        "id": 497808106,
        "sender_full_name": "Lorenzo",
        "timestamp": 1738730720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"755747\">Lorenzo</span> <a href=\"#narrow/channel/206238-general/topic/.E2.9C.94.20Package.20and.20namespace.20being.20renamed.20when.20building.20compo.2E.2E.2E/near/497807461\">said</a>:</p>\n<blockquote>\n<p>Thanks <span class=\"user-mention silent\" data-user-id=\"598440\">Victor Adossi</span>! I'll look into opening an issue for this :)</p>\n<p>I understand the versioning issues you mentioned.</p>\n<p>The approach I am going to use with my application is to, for each component, publish every WIT &amp; component impl  under 2 different namespaces, for example <code>company:msg</code> for the WIT and <code>company-component:msg</code> for the implementation -- so the <code>company-component</code> namespace holds implementations and <code>company</code> holds WITs. I wonder if this is a common pattern used by people.</p>\n</blockquote>\n<p>Yep this seems fine -- I'm wondering if you could have <code>company:package</code> and <code>company:components-&lt;name-of-component</code> or something like that might make more sense, if components have well defined names.</p>\n<p>I think it's kind of awkward to try to represent implementations of WIT interfaces behind the namespace/package mechanism -- it kind of wasn't meant for that. <code>wkg</code> has evolved support for OCI registries because storing runnable artifacts is a much better fit for an OCI registry (where the \"namespace\" is <code>your.registry.io/whatever/org/structure/you/want/component:0.1.0</code>)</p>\n<p>At Cosmonic (we build wasmCloud) at least, we push both our WITs and our runnable components to OCI registries and are happy with that setup. When it's time to <code>wkg wit fetch</code> we can do that (and we fetch the types-only component), and when it's time to publish something runnable we publish (and @ runtime we refer to the OCI address).</p>",
        "id": 497844599,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1738747162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"755747\">Lorenzo</span> <a href=\"#narrow/channel/206238-general/topic/.E2.9C.94.20Package.20and.20namespace.20being.20renamed.20when.20building.20compo.2E.2E.2E/near/497808106\">said</a>:</p>\n<blockquote>\n<p>If the versioning issue can be resolved in a simple &amp; elegant way, then for use cases such as mine only the implementation could be published to the registry (inherently containing the WIT as well). It would be even better if <code>wkg wit build</code> &amp; other commands that only need WIT could then download only the WIT information, to not waste bandwidth on the implementation.</p>\n</blockquote>\n<p>I think this could definitely work -- a few new flags on <code>wkg wit publish</code> (ex. <code>--wit-only</code>) could probably make this happen.</p>\n<p>Speaking of which, did you try <code>wkg publish --package &lt;your package name&gt;</code> ? I'm probably a bit late in asking, but usually when you <code>wkg publish</code> a WASM file, you can choose <em>which</em> package you want to send along., and <a href=\"https://github.com/bytecodealliance/wasm-pkg-tools/blob/main/crates/wasm-pkg-client/src/lib.rs#L300\">actually <code>wkg</code> will only send *that* package</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-pkg-tools/blob/main/crates/wasm-pkg-client/src/lib.rs#L300\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/61ebc7fe6304e040973b8f4b9295963e0c884b13/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393163656339663961386235353261633532636433323436613036636262393535393265393237643034333130383263333334333134373239613632336534342f62797465636f6465616c6c69616e63652f7761736d2d706b672d746f6f6c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-pkg-tools/blob/main/crates/wasm-pkg-client/src/lib.rs#L300\" title=\"wasm-pkg-tools/crates/wasm-pkg-client/src/lib.rs at main · bytecodealliance/wasm-pkg-tools\">wasm-pkg-tools/crates/wasm-pkg-client/src/lib.rs at main · bytecodealliance/wasm-pkg-tools</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/wasm-pkg-tools development by creating an account on GitHub.</div></div></div>",
        "id": 497845375,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1738747423
    },
    {
        "content": "<p>You can see in that code the delineation between a component and a WIT package (which I've been calling a \"types only component\")</p>",
        "id": 497845499,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1738747454
    }
]