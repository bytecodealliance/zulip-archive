[
    {
        "content": "<p>What is the support scope of Wasmtime's async component for different string encodings?</p>\n<p>I have a WIT file as follows:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package my:test;\n\ninterface i {\n  ping: async func(x: future&lt;string&gt;, y: string) -&gt; future&lt;string&gt;;\n}\n\nworld test {\n  export i;\n}\n\nworld runner {\n  import i;\n}\n</code></pre></div>\n<p>When using <code>wasm-tools component embed</code>, if the <code>string-encoding</code> parameters are different, it seems to trigger an <code>invalid</code> error during <code>task.return</code>. Specifically, because the parameter <code>y</code> is of type <code>string</code>, the <code>embed</code> operation encodes the <code>async lift</code>. However, if the <code>string-encoding</code> of <code>test</code> and <code>runner</code> differs, it causes an issue at this point (as seen in <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/68389f75e28468576fb5aa88d6ec173cb21fc603/crates/wasmtime/src/runtime/component/concurrent.rs#L2802\">this code line</a>).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/68389f75e28468576fb5aa88d6ec173cb21fc603/crates/wasmtime/src/runtime/component/concurrent.rs#L2802\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7726f6c11ef9ec07a71d50fcf569018b85c9da17/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643166343163363937623361646561333835663637353964643161323236663435366538323930666461623134323938653864636261623931643333636565612f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/68389f75e28468576fb5aa88d6ec173cb21fc603/crates/wasmtime/src/runtime/component/concurrent.rs#L2802\" title=\"wasip3-prototyping/crates/wasmtime/src/runtime/component/concurrent.rs at 68389f75e28468576fb5aa88d6ec173cb21fc603 · bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/wasmtime/src/runtime/component/concurrent.rs at 68389f75e28468576fb5aa88d6ec173cb21fc603 · bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div>",
        "id": 538076976,
        "sender_full_name": "BigOrangeQWQ",
        "timestamp": 1757249657
    },
    {
        "content": "<p>non-utf8 encodings aren't super well tested right now, so while wasmtime should have support for everything this is likely a guest toolchain issue unable to produce the correct component. Could you file an issue with a reproduction? That'll help narrow down where the bug lies and we can transfer it to the right repo once the source is found</p>",
        "id": 538127070,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757304462
    },
    {
        "content": "<p>Yes, I agree. This issue cannot be reproduced with the wat files generated by <code>wasm-tools embed --dummy-names legacy --async-callback</code> (I've tried many methods but all failed). However, the wat code generated by <code>wit-bindgen</code> is too lengthy. I'm currently thinking about how to minimize the error case before submitting an issue.</p>",
        "id": 538267807,
        "sender_full_name": "BigOrangeQWQ",
        "timestamp": 1757347842
    },
    {
        "content": "<p>it's ok if it's not the most minimal thing in the world, we can help minimize too once we can repro</p>",
        "id": 538291626,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757356250
    }
]