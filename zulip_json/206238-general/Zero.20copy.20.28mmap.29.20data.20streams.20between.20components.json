[
    {
        "content": "<p>Starting from my AUTOSAR experiments I finally have a <a href=\"https://github.com/cpetig/wasm-shm-test/tree/main?tab=readme-ov-file#publisher-subscriber\">webassembly prototype</a> for zero copy publisher subscriber. It uses WASI 0.3 streams to broadcast host side shared memory buffers (a resource) from one publisher to two subscribers. The components pre-allocate linear memory (size calculated by the host to enable page aligned padding) for memory mapping the data into their linear address space.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/wasm-shm-test/tree/main?tab=readme-ov-file#publisher-subscriber\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/59e87176d79600b471e6ad9481720e6c4588ba53/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353836626638313030393261643262373565303665353839393136643734383030386137633039623565643064316666393462653633313239396331323062372f6370657469672f7761736d2d73686d2d74657374&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/wasm-shm-test/tree/main?tab=readme-ov-file#publisher-subscriber\" title=\"GitHub - cpetig/wasm-shm-test: Prototype for zero-copy shared memory inter-component exchange\">GitHub - cpetig/wasm-shm-test: Prototype for zero-copy shared memory inter-component exchange</a></div><div class=\"message_embed_description\">Prototype for zero-copy shared memory inter-component exchange - cpetig/wasm-shm-test</div></div></div>",
        "id": 534820137,
        "sender_full_name": "Christof Petig",
        "timestamp": 1755433003
    },
    {
        "content": "<p>The buffer API could be implemented with copying without the guests noticing, also several efficient zero-copy mappings to MPU only embedded are possible. The host can optimize the implementation to avoid attachment during run-time without affecting the ownership logic, this of course assumes a well-behaved publisher; subscribers remain untrusted. Adding a subscriber only requires creating another <code>stream&lt;memory-block&gt;</code> on the sender side (and writing four bytes to it per published data). So the overhead per subscriber is minimal.</p>\n<p>In a point to point communication the subscriber receives ownership of resources sent by the publisher.<br>\nFor shared buffers the writer passes the ownership to the buffer, subscribers won't touch it (can only read-only borrow access), the writer destructs the previous objects when the buffer is re-attached for overwriting.</p>\n<p>Note: I abuse dummy resource handles to represent linear addresses, as these scale to 64 bit on native.</p>",
        "id": 534820166,
        "sender_full_name": "Christof Petig",
        "timestamp": 1755433027
    },
    {
        "content": "<p>The idea is to extend this prototype towards a <a href=\"https://github.com/WebAssembly/component-model/issues/369\">caller provided buffer</a> prototype of the component model.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/369\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a7bea3d9280656742d69c7a5cbaeeb8bb216490a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306362666463316666633733643961396337623836646231643339323738333961646636643431646566653830393866326437316334613137346630316237382f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f333639&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/369\" title=\"Caller provided buffers question 路 Issue #369 路 WebAssembly/component-model\">Caller provided buffers question 路 Issue #369 路 WebAssembly/component-model</a></div><div class=\"message_embed_description\">Last week, an idea was presented by which callers could prevent unnecessary intermediate copies using the syntax: read: func(length: u64) -&gt; result&lt;list&lt;u8; ..length&gt;,error-code&gt;; Is there any prov...</div></div></div>",
        "id": 534820299,
        "sender_full_name": "Christof Petig",
        "timestamp": 1755433181
    },
    {
        "content": "<p>one thing to consider is that wasm is not only 32-bit, so the size should be 64-bit where 32-bit components require the size to be small enough to fit</p>",
        "id": 534828656,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1755442964
    },
    {
        "content": "<p>I would vote for resource handles (id not rep) to become 64 bit on wasm64, just for consistency. But this has not yet been specified.</p>\n<p>In my case I use WIT to describe future built-in functions, so this isn't a shortcoming of the technology but rather a temporary workaround.</p>",
        "id": 534829171,
        "sender_full_name": "Christof Petig",
        "timestamp": 1755443589
    },
    {
        "content": "<p>Sorry, I misread your post. For a single shared memory block 4GB sounds plenty to me, even in the context of machine vision or learning.</p>",
        "id": 534829242,
        "sender_full_name": "Christof Petig",
        "timestamp": 1755443690
    },
    {
        "content": "<p>Sadly up to now there is no pointer sized data type in the component model, this is why I use resource handles which have this property in symmetric ABI.</p>",
        "id": 534829332,
        "sender_full_name": "Christof Petig",
        "timestamp": 1755443791
    },
    {
        "content": "<p>well, I'd expect 3D medical images could easily be &gt;4GB if you have a 32-bit color at each voxel and have &gt; 1024x1024x1024 resolution</p>",
        "id": 534829418,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1755443902
    },
    {
        "content": "<p>there's probably lots of other things where an item can reasonably be more than 4GB, and having a 64-bit size isn't much burden on 32-bit instances</p>",
        "id": 534829528,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1755444052
    },
    {
        "content": "<p>plus, in 10-20yr, 4GB will probably be pitifully small</p>",
        "id": 534829619,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1755444193
    }
]