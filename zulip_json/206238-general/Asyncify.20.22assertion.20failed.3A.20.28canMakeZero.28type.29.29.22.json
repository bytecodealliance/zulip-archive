[
    {
        "content": "<p>I'm trying to use asyncify in a decently sized WASM binary and I'm having trouble to debug it. Unfortunately the error message is quite cryptic, even with <code>--debug</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canMakeZero</span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">makeZero</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">literal</span><span class=\"o\">-</span><span class=\"n\">utils</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mf\">35.</span>\n</code></pre></div>\n<p>I think the problem is with a value that can't be made into a default \"zero like\" value, but it's been hard to find the exact spot and after finding the spot I'm still not sure what's the best way to deal with it.</p>\n<p>For debugging I got the best result when running <code>asyncify</code> on a WAT file, but while it worked for small, hand formatted files, unfortunately the WAT format that tools I use output is incompatible with <code>wasm-opt</code>, like for example it expects the instructions in the list form. I tried to remedy that by generating a WAT file with <code>wasm-tools print -f intput.wasm &gt; output.wat</code>, but unfortunately it complains about legacy exceptions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">legacy</span><span class=\"o\">-</span><span class=\"n\">exceptions</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">supported</span>\n</code></pre></div>\n<p>At some point I might try to output a WAT that is formatted in a way wasm-opt expects, but for now I resorted to try to debug it otherwise, ie. remove parts of code from a WAT file, convert it to WASM and then try to asyncify.</p>\n<p>While removing various functions I figured out that the likely offender is the following function:</p>\n<div class=\"codehilite\"><pre><span></span><code>(func $create_string_from_array (;66;) (type 74) (param $data (ref $CharArray)) (result (ref $String))\n  local.get $data\n  local.get $data\n  array.len\n  struct.new $String\n  return\n)\n</code></pre></div>\n\n<p>In order to test my hypothesis I changed the result to be <code>(ref null $String)</code> and I added a <code>ref.cast (ref $String)</code> call after each of the <code>create_string_from_array</code> function calls. After doing that <code>wasm-opt</code> no longer complains. The problem is that while I could leave it like that for this particular function, I have many more functions returning a non-null reference and I think the only reason why <code>wasm-opt</code> doesn't complain is because they're not called in the entrypoint and if I add unwind/rewind calls, it will complain about other occurrences of non-null returns.</p>\n<p>Is there any way around it? I'm guessing not likely, knowing roughly how asyncify works, but there was very little info about this particular aspect that I could find.</p>",
        "id": 498489474,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1739010217
    },
    {
        "content": "<p>So, it turns out there is an issue about that, which explains the problem: <a href=\"https://github.com/WebAssembly/binaryen/issues/6990\">https://github.com/WebAssembly/binaryen/issues/6990</a>. Sorry for posting without searching properly.</p>",
        "id": 500019774,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1739720280
    }
]