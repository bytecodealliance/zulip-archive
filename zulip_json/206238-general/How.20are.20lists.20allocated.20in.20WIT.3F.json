[
    {
        "content": "<p>Hiya. I'm trying to reverse-engineering the generated bindings of WASIp2, and I noticed something strange:<br>\nIn <a href=\"http://InputStream.read\">InputStream.read</a>, the generated bindings are:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">_rt</span><span class=\"p\">::</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StreamError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"cp\">#[repr(align(4))]</span>\n<span class=\"w\">                        </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">RetArea</span><span class=\"p\">([::</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">mem</span><span class=\"p\">::</span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">]);</span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ret_area</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RetArea</span><span class=\"p\">(</span>\n<span class=\"w\">                            </span><span class=\"p\">[::</span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">mem</span><span class=\"p\">::</span><span class=\"n\">MaybeUninit</span><span class=\"p\">::</span><span class=\"n\">uninit</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">],</span>\n<span class=\"w\">                        </span><span class=\"p\">);</span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ret_area</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">().</span><span class=\"n\">cast</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"w\">                        </span><span class=\"cp\">#[cfg(target_arch = </span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">                        </span><span class=\"cp\">#[link(wasm_import_module = </span><span class=\"s\">\"wasi:io/streams@0.2.4\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">                        </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                            </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"[method]input-stream.read\"</span><span class=\"cp\">]</span>\n<span class=\"w\">                            </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">wit_import1</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span>\n<span class=\"w\">                        </span><span class=\"p\">}</span>\n<span class=\"w\">                        </span><span class=\"cp\">#[cfg(not(target_arch = </span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">))]</span>\n<span class=\"w\">                        </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">wit_import1</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                            </span><span class=\"fm\">unreachable!</span><span class=\"p\">()</span>\n<span class=\"w\">                        </span><span class=\"p\">}</span>\n<span class=\"w\">                        </span><span class=\"n\">wit_import1</span><span class=\"p\">((</span><span class=\"bp\">self</span><span class=\"p\">).</span><span class=\"n\">handle</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_rt</span><span class=\"p\">::</span><span class=\"n\">as_i64</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">len</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">ptr0</span><span class=\"p\">);</span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">l2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ptr0</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">cast</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">());</span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">l2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                            </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">l3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr0</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">).</span><span class=\"n\">cast</span><span class=\"p\">::</span><span class=\"o\">&lt;*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"w\">                                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">l4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr0</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">).</span><span class=\"n\">cast</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"w\">                                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">l4</span><span class=\"p\">;</span>\n<span class=\"w\">                                    </span><span class=\"n\">_rt</span><span class=\"p\">::</span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"n\">from_raw_parts</span><span class=\"p\">(</span><span class=\"n\">l3</span><span class=\"p\">.</span><span class=\"n\">cast</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">len5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len5</span><span class=\"p\">)</span>\n<span class=\"w\">                                </span><span class=\"p\">};</span>\n<span class=\"w\">                                </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"w\">                            </span><span class=\"p\">}</span>\n<span class=\"w\">                            </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">l6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ptr0</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">).</span><span class=\"n\">cast</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">());</span>\n<span class=\"w\">                                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">l6</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                        </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">l7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr0</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">).</span><span class=\"n\">cast</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"w\">                                                </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">error</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"p\">::</span><span class=\"n\">from_handle</span><span class=\"p\">(</span>\n<span class=\"w\">                                                    </span><span class=\"n\">l7</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span>\n<span class=\"w\">                                                </span><span class=\"p\">)</span>\n<span class=\"w\">                                            </span><span class=\"p\">};</span>\n<span class=\"w\">                                            </span><span class=\"n\">StreamError</span><span class=\"p\">::</span><span class=\"n\">LastOperationFailed</span><span class=\"p\">(</span><span class=\"n\">e8</span><span class=\"p\">)</span>\n<span class=\"w\">                                        </span><span class=\"p\">}</span>\n<span class=\"w\">                                        </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                            </span><span class=\"fm\">debug_assert_eq!</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"invalid enum discriminant\"</span><span class=\"p\">);</span>\n<span class=\"w\">                                            </span><span class=\"n\">StreamError</span><span class=\"p\">::</span><span class=\"n\">Closed</span>\n<span class=\"w\">                                        </span><span class=\"p\">}</span>\n<span class=\"w\">                                    </span><span class=\"p\">};</span>\n<span class=\"w\">                                    </span><span class=\"n\">v8</span>\n<span class=\"w\">                                </span><span class=\"p\">};</span>\n<span class=\"w\">                                </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"w\">                            </span><span class=\"p\">}</span>\n<span class=\"w\">                            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">_rt</span><span class=\"p\">::</span><span class=\"n\">invalid_enum_discriminant</span><span class=\"p\">(),</span>\n<span class=\"w\">                        </span><span class=\"p\">};</span>\n<span class=\"w\">                        </span><span class=\"n\">result9</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Specifically: the location the stream writes to isn't passed as an argument, but it is given as a return value. That means that the input stream  is somehow \"allocating\" memory, no? How is that safe? How does the host decide where to put the read data? (also, from <code>_rt::as_i64(&amp;len)</code>, it seems like the length is passed as a reference to a u64, which seems weird since it's the same size?)</p>\n<p>I've tried to read the canonical ABI, but it's... not easy, and it's relatively subtle details here. It'd be great if there was some \"debug view\" of lowered functions/types... (idle thought, nothing else).</p>",
        "id": 503321038,
        "sender_full_name": "Sekoia",
        "timestamp": 1741108280
    },
    {
        "content": "<p>The <code>len</code> there is \"I'd like to read up to this amount\" and the result is dynamically allocated into the guest with <code>cabi_realloc</code>, and that return pointer is stored in the <code>ptr0</code> return value area</p>",
        "id": 503326647,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741109988
    },
    {
        "content": "<p>Where is <code>cabi_realloc</code> documented, and how does it decide where it can write?</p>",
        "id": 503327764,
        "sender_full_name": "Sekoia",
        "timestamp": 1741110327
    },
    {
        "content": "<p>it's documented <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md\">here</a>, along with everything else about the canonical abi</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f1833b3aeca138b5ec0bd919acde9997bccd785c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613034663532383936313633653862303938366436343038636663313132633934393232386366363235613766643736613635303761333564643534633935392f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md\" title=\"component-model/design/mvp/CanonicalABI.md at main · WebAssembly/component-model\">component-model/design/mvp/CanonicalABI.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div>",
        "id": 503327920,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741110369
    },
    {
        "content": "<p>Oh, the c stands for <em>canonical</em>, not C. Makes sense (and it's documented as <code>realloc</code> in there). So any WIT component that needs it must export a <code>realloc</code> function, then? Interesting!</p>",
        "id": 503328175,
        "sender_full_name": "Sekoia",
        "timestamp": 1741110465
    }
]