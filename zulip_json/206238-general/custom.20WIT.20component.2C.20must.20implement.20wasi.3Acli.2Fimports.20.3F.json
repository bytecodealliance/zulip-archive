[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"p\">:</span><span class=\"nc\">myfirst</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">myplugin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">imports</span><span class=\"o\">@</span><span class=\"mf\">0.2.6</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">myfirstinterface</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"c1\">// export: host-&gt;guest function calls</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">myfirstexport</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In Rust in the host, i tried linking with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">myfirstinterface</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"o\">&lt;</span><span class=\"n\">MyPluginIml</span><span class=\"p\">,</span><span class=\"n\">HasSelf</span><span class=\"o\">&lt;</span><span class=\"n\">MyPluginImpl</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"o\">|</span><span class=\"n\">f</span><span class=\"o\">|</span><span class=\"n\">f</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>But, if I do this, then my wasm file fails to run with an error saying the imported function does not exist.</p>\n<p>Am I supposed to do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">myplugin</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">linkeropts</span><span class=\"p\">,</span><span class=\"o\">|</span><span class=\"n\">f</span><span class=\"o\">|</span><span class=\"n\">f</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>If i have to do it this way, it means I have to implement all of the wasi:cli/imports, which is a lot of work.  This makes me think there is something I am missing.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>\n</code></pre></div>",
        "id": 540599048,
        "sender_full_name": "Joel",
        "timestamp": 1758387864
    },
    {
        "content": "<p>Oh, and if I have to do myfirstinterface::add_to_linker, is there a way to get wasi:cli interfaces to be part of my MyPluginImpl ?  This way, I do not have to implement all the wasi interfaces.</p>",
        "id": 540625966,
        "sender_full_name": "Joel",
        "timestamp": 1758421247
    },
    {
        "content": "<p>I see that I can implement the wasi::cli::environment::Host for MyPluginImpl, but how do I get:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasi_ctx</span><span class=\"p\">.</span><span class=\"n\">cli</span><span class=\"p\">().</span><span class=\"n\">get_environment</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>to implement <code>crate::host::wasi::cli::environment::Host</code> for the world <code>myplugin</code> ?  I get a missing trait error in Rust.</p>",
        "id": 540631343,
        "sender_full_name": "Joel",
        "timestamp": 1758430528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"948912\">Joel</span> has marked this topic as unresolved.</p>",
        "id": 540651387,
        "sender_full_name": "Notification Bot",
        "timestamp": 1758454233
    },
    {
        "content": "<p>I followed the example from the <code>bindings</code> code hint, but am left wit this clippy error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mf\">1.</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">E0107</span><span class=\"p\">]</span>\n<span class=\"mf\">2.</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">takes</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">were</span><span class=\"w\"> </span><span class=\"n\">supplied</span>\n<span class=\"w\">   </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">clocks</span><span class=\"p\">::</span><span class=\"n\">timezone</span><span class=\"p\">::</span><span class=\"n\">LinkOptions</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">E0061</span><span class=\"p\">]</span>\n<span class=\"mf\">3.</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">E0107</span><span class=\"p\">]</span>\n<span class=\"mf\">4.</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">takes</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">were</span><span class=\"w\"> </span><span class=\"n\">supplied</span>\n<span class=\"w\">   </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">p2</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sockets</span><span class=\"p\">::</span><span class=\"n\">network</span><span class=\"p\">::</span><span class=\"n\">LinkOptions</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">E0061</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 540652736,
        "sender_full_name": "Joel",
        "timestamp": 1758455902
    },
    {
        "content": "<p>you can satisfy that argument with <code>&amp;Default::default()</code></p>",
        "id": 540683245,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1758487117
    },
    {
        "content": "<p>when a wit contains unstable features, wit-bindgen generates a LinkOptions to enable those features, but if you don't know about then then just ignore them, the impl Default is to turn them all off</p>",
        "id": 540683280,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1758487162
    }
]