[
    {
        "content": "<p>Hi, I have been working with WASM in Rust for some time now and came across a usecase, which I can't find information about it. In a nutshell, I have a Rust binary, which calls a WASM components through their exports. The components are like services, which all have the same WIT interface but with own implementations. The issue is that when changes are made to the WIT file, each component has to get the new file, get their bindings regenerated and reimplemented. It is a tedious and error-prone process considering that somebody else will be developing the components and different versions of <code>wit-bindgen</code> might produce different bindings. My question is: is it possible to abstract the generated bindings into a rust lib crate which can be depended on by each component? Instead of each component crate to depend on a local <code>bindings.rs</code> it will depend on a <code>pub mod bindings</code> from a different crate.</p>",
        "id": 513836257,
        "sender_full_name": "Bozhidar Manev",
        "timestamp": 1745405017
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-http/src/bindings.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-http/src/bindings.rs</a></p>\n<p>as an example, wasmtime-wasi-http provides the guest bindings for the same reason, to make it possible to keep the rust api stable while the wit may change</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-http/src/bindings.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c03c04ce7f4c4946027a437d8dd3d63c4e0027d9/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633731613563636366633138653863633064396332343836373562373831356131366130336634623063396332663862353532326366343464323732343264372f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-http/src/bindings.rs\" title=\"wasmtime/crates/wasi-http/src/bindings.rs at main · bytecodealliance/wasmtime\">wasmtime/crates/wasi-http/src/bindings.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 513845785,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1745407874
    },
    {
        "content": "<p>note that your users would still have to keep that crate updated and recompile on wit changes unless you start versioning your wit (whhich is what wasi-http does)</p>",
        "id": 513845995,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1745407936
    },
    {
        "content": "<p>Thank you Ramone, I will try their approach. It is interesting how bindings can be created with either wasmtime , cargo component or wit-bindgen</p>",
        "id": 513869933,
        "sender_full_name": "Bozhidar Manev",
        "timestamp": 1745414292
    },
    {
        "content": "<p>wasmtime-wasi-http is host bindings, not guest bindings. if you want to put your guest bindings all in the same crate, <a href=\"https://github.com/bytecodealliance/wasi-rs\">https://github.com/bytecodealliance/wasi-rs</a> is how we do that for wasi</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasi-rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ca9cd466932cc8785b6dda759ea49225ac591614/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313961346361626636353863343938333166336233393261363163656439626436393665633737653565346365386163653365303265393063393533653434322f62797465636f6465616c6c69616e63652f776173692d7273&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasi-rs\" title=\"GitHub - bytecodealliance/wasi-rs: WASI bindings for Rust\">GitHub - bytecodealliance/wasi-rs: WASI bindings for Rust</a></div><div class=\"message_embed_description\">WASI bindings for Rust. Contribute to bytecodealliance/wasi-rs development by creating an account on GitHub.</div></div></div>",
        "id": 513907117,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745423264
    },
    {
        "content": "<p>oh sorry I mixed that up, thanks for clarifying</p>",
        "id": 513908488,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1745423633
    }
]