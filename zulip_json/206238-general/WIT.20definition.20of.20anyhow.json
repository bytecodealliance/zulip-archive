[
    {
        "content": "<p>Let's say various components implement their own error type with <code>thiserror</code>, and they execute their component via wasmtime. </p>\n<p>Is there a good way to express this in WIT such that the host can attempt to downcast it into the original error type?</p>\n<p>In other words - passing the full error from the component, as a general <code>anyhow::Error</code>?</p>",
        "id": 528021524,
        "sender_full_name": "dakom",
        "timestamp": 1752134376
    },
    {
        "content": "<p>I'm going to assume you're talking about a Rust guest w/ a Rust host since that's implied, but note that other languages obviously don't have <code>thiserror</code>. </p>\n<p>The \"original\" error type just <em>doesn't exist</em> on the side of the host -- are you implying that the guest and host <em>share</em> a common library or some common definitions for the given error?</p>\n<p>Starting somewhat from a higher level, <code>variant</code>s are generally how errors can be represented that is most similar to the Rust enum + <code>thiserror</code> model -- so if you can create <code>From&lt;WitVariantErrorType&gt;</code> instances for your <code>RustError</code> type (on both sides, or in a shared library that both sides can share), you can <em>build</em> the Rusty error you want from the generated <code>enum</code> (i.e. what <code>wit-bindgen</code> will generate) and convert back and forth.</p>\n<p>It is possible to include bindgen output (along with extra implementation and other helper functions/types) in a shared library and distribute that to either side. Somewhat obvious but spelling it out -- when the WIT changes, you change the shared lib crate and update the helpers then update both sides.</p>\n<p>There may be more interesting ways to integrate/tie the generated <code>enum</code> for the error <code>variant</code>, and your your error class (w/ <code>thiserror</code>) together, but a <code>From</code> implementation is the basic way that is sure to work though a bit of boilerplate.</p>",
        "id": 528047349,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1752142773
    },
    {
        "content": "<p>thanks for the feedback!</p>\n<blockquote>\n<p>The \"original\" error type just <em>doesn't exist</em> on the side of the host</p>\n</blockquote>\n<p>Right, my question assumes that the host (or other code it calls) can downcast from anyhow::Error into a specific type that it knows about.</p>\n<p>though I guess what I'm asking boils down to serializing <code>anyhow::Error</code>, which has its own issues independent of wasm... and so I might as well just serialize the original error type into JSON or bincode or whatever and then the host can try to deserialize that</p>",
        "id": 528089274,
        "sender_full_name": "dakom",
        "timestamp": 1752155924
    }
]