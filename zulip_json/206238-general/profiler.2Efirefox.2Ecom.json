[
    {
        "content": "<p>First time to use the <a href=\"http://profiler.firefox.com\">profiler.firefox.com</a> webapp, so first time to use it for a file created by wasmtime. Very cool. And no surprise I guess, the web app takes gzipped versions of the json profile as well.</p>",
        "id": 509749732,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1743613159
    },
    {
        "content": "<p>I haven't dug deep into all of what is available, but I think we could probably provide some other interesting output for guest profiles.  Some quick ideas I had were the following:</p>\n<ul>\n<li>In the future, with  core stack switching we can model those stacks as threads.  Today, we probably should consider finding a way to support multiple concurrent instances as threads (though without direct interaction most cases are probably fine just emitting separate profiles).</li>\n<li>We probably could do more with categories; category or subcategory-per-component would be one way to model this within the guest.  We don't trace into the host (and probably would not ever with guest profiling) but applying a different category for the calls into hostcalls as spans could be interesting as an option.  These categories are how you would colorize things differently as well.</li>\n<li>Right now we just have a single marker type for hostcall.  I suspect we could look at the frame data to tag this differently.</li>\n<li>Related to hostcalls, there's probably opportunity to use these as instrumentation points for counters to track some different resources; this would probably need to be for a few specific calls and would have some tradeoffs in terms of how possible/messy/expensive/stable it gets to pull out the information.</li>\n<li>Memory info could probably be sampled separate from hostcall analysis, possibly using an existing hook like <code>ResourceLimiter</code></li>\n</ul>",
        "id": 509801462,
        "sender_full_name": "Paul Osborne",
        "timestamp": 1743631316
    },
    {
        "content": "<p>Profiling like this on a wasm component is a brand new ability, per your PR to <strong>wasmtime</strong> the last few days. I bet there will be all sorts of ways people would want the data collected for their own use cases. Here we have the rust tool chain and the wasm instantiation tool chain all at our fingertips. </p>\n<p>As a reminder, the profile is as easy to have collected as passing <em>--profile=guest</em> on the wasmtime command line. Besides the <em>wasmtime</em> cli itself, there is nothing else to install.</p>",
        "id": 510144643,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1743762030
    }
]