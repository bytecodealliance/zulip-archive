[
    {
        "content": "<p>I’m really struggling to get a WASI 0.1 module running on the web because the available JS libraries seem like a total disaster. jco seems like by far the more up to date tool, but is there any way to use it with WASI 0.1 instead of 0.2?</p>",
        "id": 538643969,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757508824
    },
    {
        "content": "<p>JCO works with wasm components. wasip1 is based on plain wasm modules, not wasm components.</p>",
        "id": 538647198,
        "sender_full_name": "bjorn3",
        "timestamp": 1757509652
    },
    {
        "content": "<p>Right but can I wrap the WASI 0.1 module in a component or something?</p>",
        "id": 538647351,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757509688
    },
    {
        "content": "<p>Depending on what you need <a href=\"https://github.com/bjorn3/browser_wasi_shim/\">https://github.com/bjorn3/browser_wasi_shim/</a> may work.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/browser_wasi_shim/\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1365f2a84ac7279ec776d1f805220ed2f4ae231e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633933616437366531326461333036333135363636373236353665343239613134393866353565366638373933646363343632313432396638353534633735662f626a6f726e332f62726f777365725f776173695f7368696d&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/browser_wasi_shim/\" title=\"GitHub - bjorn3/browser_wasi_shim: A WASI shim for in the browser\">GitHub - bjorn3/browser_wasi_shim: A WASI shim for in the browser</a></div><div class=\"message_embed_description\">A WASI shim for in the browser. Contribute to bjorn3/browser_wasi_shim development by creating an account on GitHub.</div></div></div>",
        "id": 538647353,
        "sender_full_name": "bjorn3",
        "timestamp": 1757509688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"650637\">Ben Visness</span> <a href=\"#narrow/channel/206238-general/topic/Run.20WASI.200.2E1.20module.20with.20jco.3F/near/538647351\">said</a>:</p>\n<blockquote>\n<p>Right but can I wrap the WASI 0.1 module in a component or something?</p>\n</blockquote>\n<p>That would also be an option. You can use <a href=\"https://github.com/bytecodealliance/wasm-tools\">wasm-tools</a> to wrap a wasip1 module with a wasip1 -&gt; wasip2 adapter.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/253ae56a6b0e71a7a6c59f456e55173b1088c7df/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653165343132623534303232636237393337623566623035313332316232666334373636633334643732373938656661643638626337383530646336633131622f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools\" title=\"GitHub - bytecodealliance/wasm-tools: CLI and Rust libraries for low-level manipulation of WebAssembly modules\">GitHub - bytecodealliance/wasm-tools: CLI and Rust libraries for low-level manipulation of WebAssembly modules</a></div><div class=\"message_embed_description\"> CLI and Rust libraries for low-level manipulation of WebAssembly modules  - GitHub - bytecodealliance/wasm-tools: CLI and Rust libraries for low-level manipulation of WebAssembly modules</div></div></div>",
        "id": 538647698,
        "sender_full_name": "bjorn3",
        "timestamp": 1757509786
    },
    {
        "content": "<p>Does such an adapter already exist in wasm-tools?</p>",
        "id": 538647806,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757509816
    },
    {
        "content": "<p>Is that what that <code>component new</code> command does?</p>",
        "id": 538647958,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757509854
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/v36.0.2\">https://github.com/bytecodealliance/wasmtime/releases/tag/v36.0.2</a> has the latest version of the <code>wasi_snapshot_preview1.reactor.wasm</code> adapter.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/v36.0.2\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9259ca8cfc4fb9abbc191b035d3f8f4464ea743a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303864373933373634643134626664363764336439366235646139353939633461313935366335363633316463376439326434666262636632623236626239302f62797465636f6465616c6c69616e63652f7761736d74696d652f72656c65617365732f7461672f7633362e302e32&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/v36.0.2\" title=\"Release v36.0.2: Release Wasmtime 36.0.2 (#11541) · bytecodealliance/wasmtime\">Release v36.0.2: Release Wasmtime 36.0.2 (#11541) · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">36.0.2\nReleased 2025-08-26.\nFixed\n\nWasmtime will no longer panic in the pooling allocator when in near-OOM\nconditions related to resetting the linear memory of a slot.\n#11510</div></div></div>",
        "id": 538648063,
        "sender_full_name": "bjorn3",
        "timestamp": 1757509879
    },
    {
        "content": "<p>It is in the wasmtime repo because wasmtime internally uses this adapter (compiled to native code rather than wasm) when running a wasip1 module.</p>",
        "id": 538648202,
        "sender_full_name": "bjorn3",
        "timestamp": 1757509917
    },
    {
        "content": "<p>Good to know, and promising since I have gotten my module running in wasmtime already</p>",
        "id": 538648312,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757509950
    },
    {
        "content": "<p><code>wasm-tools component new my-core.wasm -o my-component.wasm --adapt wasi_snapshot_preview1.reactor.wasm</code> is the suggested command in the wasm-tools readme.</p>",
        "id": 538648374,
        "sender_full_name": "bjorn3",
        "timestamp": 1757509969
    },
    {
        "content": "<p>Also you may want to use the <code>.command.wasm</code> rather than <code>.reactor.wasm</code> version if you have a program whose main function should be called at startup rather than a library-like module that exports functions you can call.</p>",
        "id": 538648708,
        "sender_full_name": "bjorn3",
        "timestamp": 1757510050
    },
    {
        "content": "<p>What’s the difference?</p>",
        "id": 538648788,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757510066
    },
    {
        "content": "<p>command exports a main function and nothing else, reactor may export an optional init function and as many functions as it wants<br>\ncommand is like an executable that reads command line arguments, env and stdin and writes stdout and stderr<br>\nreactor is like a dll other programs load to call functions in</p>",
        "id": 538650217,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1757510458
    },
    {
        "content": "<p>You'll likely want the \"command\" adapter which reexports the WASI main function entrypoint as a WASIp2 function. If you use a \"reactor\" adapter it would require that you have component metadata for some other export. Otherwise while you'll likely get a component out of the process it won't have any exports to call because the reactor doesn't export anything nor does your module which wasn't intended to be a component.</p>\n<p>If you're building something that's not something with a main function, however, then creating a component won't work without some sort of integration with WIT or similar. Basically you'll have to describe the exported functions somehow with WIT. That can be done after-the-fact once the core module is built, and it can also be done with wasm-tools, but depends on your use case</p>",
        "id": 538669852,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757515226
    },
    {
        "content": "<p>This does have a main function afaik, so the command approach should be fine</p>",
        "id": 538670425,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757515367
    },
    {
        "content": "<p>But what to make of this...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">npx</span><span class=\"w\"> </span><span class=\"n\">jco</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">js</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">js</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">adapt</span><span class=\"w\"> </span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"p\">.</span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"p\">(</span><span class=\"n\">jco</span><span class=\"w\"> </span><span class=\"n\">componentNew</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ComponentError</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">encode</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">module</span>\n<span class=\"cp\">$failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">decode</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">valid</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">resolve</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"p\">::</span><span class=\"n\">fd_write</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">named</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">componentNew</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">:</span><span class=\"sd\">///home/bvisness/Developer/spidermonkey.dev/_support/iongraph-article/node_modules/@bytecodealliance/jco/obj/wasm-tools.js:4663:11)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">componentNew</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">:</span><span class=\"sd\">///home/bvisness/Developer/spidermonkey.dev/_support/iongraph-article/node_modules/@bytecodealliance/jco/src/cmd/wasm-tools.js:100:20)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">:</span><span class=\"sd\">///home/bvisness/Developer/spidermonkey.dev/_support/iongraph-article/node_modules/@bytecodealliance/jco/src/jco.js:467:17</span>\n</code></pre></div>",
        "id": 538670525,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757515387
    },
    {
        "content": "<p>That looks like a failure in the CLI invocation to communicate to jco's <code>new</code> subcommand \"the <code>wasi_snapshot_preview1</code> adapter is in this wasm file\". I'm not familiar with jco's CLI so I can't say for certain what the issue is, but you might want to try to rename that as <code>wasi_snapshot_preview1.wasm</code> and see if that helps. Another option is that if <code>jco new</code>'s syntax is inspired by <code>wasm-tools</code> you can also do <code>--adapt wasi_snapshot_preview1=wasi_snapshot_preview1.command.wasm</code>, although I'm not sure if this is supported in jco</p>",
        "id": 538671350,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757515541
    },
    {
        "content": "<p>basically that looks like a CLI syntax mistake/bug, but I don't know the exact fix myself</p>",
        "id": 538671466,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757515569
    },
    {
        "content": "<blockquote>\n<p>you can also do <code>--adapt wasi_snapshot_preview1=wasi_snapshot_preview1.command.wasm</code></p>\n</blockquote>\n<p>that worked, thank you</p>",
        "id": 538671571,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757515595
    },
    {
        "content": "<p>Where can I find more information about using jco from JS instead of from the command line?</p>",
        "id": 538672517,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757515816
    },
    {
        "content": "<p>Specifically so that I can work it into my build scripts</p>",
        "id": 538672601,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757515837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598440\">@Victor Adossi</span> might be able to help out with that</p>",
        "id": 538675653,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757516545
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"650637\">@Ben Visness</span> so in general I think where you'll want to start is the jco code base here: </p>\n<p>For example if you wanted to investigate how transpile works:<br>\n<a href=\"https://github.com/bytecodealliance/jco/blob/main/packages/jco/src/cmd/transpile.js\">https://github.com/bytecodealliance/jco/blob/main/packages/jco/src/cmd/transpile.js</a></p>\n<p>In general the API is the surface you can use without the CLI (i.e. directly from JS):<br>\n<a href=\"https://github.com/bytecodealliance/jco/blob/main/packages/jco/src/api.js\">https://github.com/bytecodealliance/jco/blob/main/packages/jco/src/api.js</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/blob/main/packages/jco/src/cmd/transpile.js\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/34c2e55c603bdd9cf61c4efd9413843ac3c6eb06/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636231633163636130393431373239663032376532336333306166623064636264303636663861356635643138643733646537653132326135373739616663362f62797465636f6465616c6c69616e63652f6a636f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/blob/main/packages/jco/src/cmd/transpile.js\" title=\"jco/packages/jco/src/cmd/transpile.js at main · bytecodealliance/jco\">jco/packages/jco/src/cmd/transpile.js at main · bytecodealliance/jco</a></div><div class=\"message_embed_description\">JavaScript toolchain for working with WebAssembly Components - bytecodealliance/jco</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/blob/main/packages/jco/src/api.js\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/34c2e55c603bdd9cf61c4efd9413843ac3c6eb06/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636231633163636130393431373239663032376532336333306166623064636264303636663861356635643138643733646537653132326135373739616663362f62797465636f6465616c6c69616e63652f6a636f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/blob/main/packages/jco/src/api.js\" title=\"jco/packages/jco/src/api.js at main · bytecodealliance/jco\">jco/packages/jco/src/api.js at main · bytecodealliance/jco</a></div><div class=\"message_embed_description\">JavaScript toolchain for working with WebAssembly Components - bytecodealliance/jco</div></div></div>",
        "id": 538677833,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757517104
    },
    {
        "content": "<p>Unfortunately the browser bindings are still very experimental and not complete, so there's a bunch there but you may very well run into more missing pieces</p>",
        "id": 538677977,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757517140
    },
    {
        "content": "<p>Thanks - I'm using it from Node, not the browser, since I just want to integrate jco into my esbuild config</p>",
        "id": 538678123,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757517175
    },
    {
        "content": "<p>Ah OK, great in that case the support should be much better, and like I said you should be able to use the code in <code>api.js</code></p>",
        "id": 538678556,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757517279
    },
    {
        "content": "<p>What am I to make of all these parameter types? It's hard to tell what type each param actually expects</p>",
        "id": 538679763,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757517597
    },
    {
        "content": "<p>Which part of the API are yout rying to use? Also, do you have the project built locally? <code>obj/wasm-tools.d.ts</code>is actually present and helps decode types and should help</p>",
        "id": 538683027,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757518412
    },
    {
        "content": "<p><code>component new</code> and <code>transpile</code>, I think, but at the moment just <code>component new</code></p>",
        "id": 538683194,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757518440
    },
    {
        "content": "<p>digging around in my local node_modules, I did finally turn this up, which is the thing I actually wanted</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">componentNew</span><span class=\"p\">(</span><span class=\"n\">binary</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Uint8Array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">adapters</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Array</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Uint8Array</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">undefined</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"nc\">Uint8Array</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 538683278,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757518460
    },
    {
        "content": "<p>Note that there's also a listing of the API in <a href=\"https://github.com/bytecodealliance/jco/blob/85f00d6901d2b53894e6820ec290a13cf21026ca/packages/jco/README.md?plain=1#L145\">the README</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/blob/85f00d6901d2b53894e6820ec290a13cf21026ca/packages/jco/README.md?plain=1#L145\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/34c2e55c603bdd9cf61c4efd9413843ac3c6eb06/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636231633163636130393431373239663032376532336333306166623064636264303636663861356635643138643733646537653132326135373739616663362f62797465636f6465616c6c69616e63652f6a636f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/blob/85f00d6901d2b53894e6820ec290a13cf21026ca/packages/jco/README.md?plain=1#L145\" title=\"jco/packages/jco/README.md at 85f00d6901d2b53894e6820ec290a13cf21026ca · bytecodealliance/jco\">jco/packages/jco/README.md at 85f00d6901d2b53894e6820ec290a13cf21026ca · bytecodealliance/jco</a></div><div class=\"message_embed_description\">JavaScript toolchain for working with WebAssembly Components - bytecodealliance/jco</div></div></div>",
        "id": 538686296,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757519291
    },
    {
        "content": "<p>Usage in tests/code can also be useful to look at! </p>\n<p>We really should have some better types, but once we switch to TS they should be much better.</p>",
        "id": 538686580,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757519346
    },
    {
        "content": "<p>So, I've gotten as far as this, but how do I actually run the module now?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"n\">loader</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">WASIShim</span><span class=\"p\">().</span><span class=\"n\">getImportObject</span><span class=\"p\">());</span>\n</code></pre></div>",
        "id": 538707434,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757526075
    },
    {
        "content": "<p>I need to pass it command line args and env vars and get stdout, that kind of thing</p>",
        "id": 538707528,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757526114
    },
    {
        "content": "<p>So if you've gotten to that point, <code>component</code> is a module that contains what you component exports, so you should be able to call the relevant imports.</p>\n<p>The exports that your component exports should be available on the <code>component</code> object</p>",
        "id": 538708265,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757526412
    },
    {
        "content": "<p>Yes, I realize that, but with wasmtime it can just _run_ it, so what is the equivalent thing I need to do here</p>",
        "id": 538708581,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757526530
    },
    {
        "content": "<p>component.exports.run() is the default main function of a command world, and you provide env, files and cli args via the wasi shim you use</p>",
        "id": 538709035,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1757526718
    },
    {
        "content": "<p>(I don't remember if jco calls it <a href=\"http://exports.run\">exports.run</a> or directly .run, I have been working with wasip1 a lot again lately)</p>",
        "id": 538709242,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1757526763
    },
    {
        "content": "<p>I am using @bytecodealliance/preview2-shim, all I am asking is how to actually do the thing that wasmtime is already doing</p>",
        "id": 538709309,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757526786
    },
    {
        "content": "<p>I'd be happy to follow an example, but I can't find a single example in the jco repo of actually running any kind of wasi component</p>",
        "id": 538710171,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757527046
    },
    {
        "content": "<p>I think right now you need to call these exports in preview2-shim to set things like env vars and commandline args: <a href=\"https://github.com/bytecodealliance/jco/blob/main/packages/preview2-shim/lib/nodejs/cli.js#L11-L28\">https://github.com/bytecodealliance/jco/blob/main/packages/preview2-shim/lib/nodejs/cli.js#L11-L28</a></p>\n<p>and then you call the run() export of your module</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/blob/main/packages/preview2-shim/lib/nodejs/cli.js#L11-L28\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6b525900f3aad3e07a270867ca3eed95e6633ce3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623138326336313362303137666666646164613630626563316534656639326232643938623234626630373065336466653062633538626434383535343237342f62797465636f6465616c6c69616e63652f6a636f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/blob/main/packages/preview2-shim/lib/nodejs/cli.js#L11-L28\" title=\"jco/packages/preview2-shim/lib/nodejs/cli.js at main · bytecodealliance/jco\">jco/packages/preview2-shim/lib/nodejs/cli.js at main · bytecodealliance/jco</a></div><div class=\"message_embed_description\">JavaScript toolchain for working with WebAssembly Components - bytecodealliance/jco</div></div></div>",
        "id": 538710564,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1757527174
    },
    {
        "content": "<p>Why does the result of <code>instantiate</code> wrap up the exports the way it does? <br>\n<a href=\"/user_uploads/15107/sBI6MbBEESKLrAJix7x331fM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/sBI6MbBEESKLrAJix7x331fM/image.png\" title=\"image.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"424x108\" src=\"/user_uploads/thumbnail/15107/sBI6MbBEESKLrAJix7x331fM/image.png/840x560.webp\"></a></div>",
        "id": 538712609,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757527885
    },
    {
        "content": "<p><a href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/run.wit\">https://github.com/WebAssembly/wasi-cli/blob/main/wit/run.wit</a></p>\n<p>interface run { run: func() } }</p>\n<p>run is actually an interface that defines a single method run on itself</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/run.wit\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/cd86bb4194a9f40b6f215d00db404f2aee2b30b4/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656262613039653636306631643764303839373766386161373738346564356536363236336566666233353634376637643331623234633465316462326633362f576562417373656d626c792f776173692d636c69&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/run.wit\" title=\"wasi-cli/wit/run.wit at main · WebAssembly/wasi-cli\">wasi-cli/wit/run.wit at main · WebAssembly/wasi-cli</a></div><div class=\"message_embed_description\">Command-Line Interface (CLI) World for WASI. Contribute to WebAssembly/wasi-cli development by creating an account on GitHub.</div></div></div>",
        "id": 538712989,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1757528031
    },
    {
        "content": "<p>After much hassle yesterday, I do finally have it up and running. Thanks for all your help.</p>",
        "id": 538898209,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757606833
    },
    {
        "content": "<p>The summary of what I'm now running is almost too shameful to admit</p>",
        "id": 538898265,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757606849
    },
    {
        "content": "<p>I am compiling SpiderMonkey to WASM as a WASI 0.1 module, using wasm-tools to convert it to a WASI 0.2 module using that adapter, then transpiling it to JS with jco, all so that I can JIT JS to arm32 machine code and then run an arm32 emulator to run the code</p>",
        "id": 538898601,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757606925
    },
    {
        "content": "<p>(All so that I can live-demo what the Ion JIT is doing with your JS code.)</p>",
        "id": 538898750,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757606981
    },
    {
        "content": "<p>I gotta say, using the preview2-shim is a pretty miserable experience. Especially the filesystem stuff. Some docs would go a long way, but also, it seems quite rough as an API and I basically had to reverse engineer how it was all supposed to work by rooting around in the source and honestly just guessing sometimes.</p>",
        "id": 538899179,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757607097
    },
    {
        "content": "<p>I also wrote an esbuild plugin along the way to handle the transpiling and stuff. It's too rough around the edges to publish as a library but here's a gist in case it helps anyone else do something similar: <a href=\"https://gist.github.com/bvisness/66e4b65af09a40b6c3bd4bd316d2d7e4\">https://gist.github.com/bvisness/66e4b65af09a40b6c3bd4bd316d2d7e4</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/bvisness/66e4b65af09a40b6c3bd4bd316d2d7e4\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/91f9baed8f4fc08c462d1a4de5a8c23942d45e97/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f6173736574732f676973742d6f672d696d6167652d3534666437646330373133652e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/bvisness/66e4b65af09a40b6c3bd4bd316d2d7e4\" title=\"An esbuild plugin to get WASI 0.1 modules running in the browser.\">An esbuild plugin to get WASI 0.1 modules running in the browser.</a></div><div class=\"message_embed_description\">An esbuild plugin to get WASI 0.1 modules running in the browser. - esbuild-wasi.mjs</div></div></div>",
        "id": 538900239,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757607423
    },
    {
        "content": "<p>One last random thing: I'm getting duplicate object key warnings because of this:<br>\n<a href=\"/user_uploads/15107/QS-l2rtXIEfugL4VqiN5hBfO/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/QS-l2rtXIEfugL4VqiN5hBfO/image.png\" title=\"image.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"491x199\" src=\"/user_uploads/thumbnail/15107/QS-l2rtXIEfugL4VqiN5hBfO/image.png/840x560.webp\"></a></div>",
        "id": 538900493,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757607500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"650637\">Ben Visness</span> <a href=\"#narrow/channel/206238-general/topic/Run.20WASI.200.2E1.20module.20with.20jco.3F/near/538898209\">said</a>:</p>\n<blockquote>\n<p>After much hassle yesterday, I do finally have it up and running. Thanks for all your help.</p>\n</blockquote>\n<p>Thanks to <span class=\"user-mention\" data-user-id=\"550770\">@Ramon Klass</span> for doing a great job answering questions!</p>",
        "id": 538910708,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757611024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"650637\">Ben Visness</span> <a href=\"#narrow/channel/206238-general/topic/Run.20WASI.200.2E1.20module.20with.20jco.3F/near/538900493\">said</a>:</p>\n<blockquote>\n<p>One last random thing: I'm getting duplicate object key warnings because of this:</p>\n</blockquote>\n<p>Ah, thank you for pointing that out, that definitely shouldn't be there, new Jco version should be out soon with that fix</p>",
        "id": 538920734,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757615278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"650637\">Ben Visness</span> <a href=\"#narrow/channel/206238-general/topic/Run.20WASI.200.2E1.20module.20with.20jco.3F/near/538899179\">said</a>:</p>\n<blockquote>\n<p>I gotta say, using the preview2-shim is a pretty miserable experience. Especially the filesystem stuff. Some docs would go a long way, but also, it seems quite rough as an API and I basically had to reverse engineer how it was all supposed to work by rooting around in the source and honestly just guessing sometimes.</p>\n</blockquote>\n<p>Would really appreciate any PRs you want to make against the documentation, but where did you look first? Did you look at the Jco books or the examples? Which resource let you down the most/where should we add the docs first?</p>\n<p>Does <a href=\"https://bytecodealliance.github.io/jco/manual-wasm-instantiation-with-wasi-overrides.html#manual-instantiation-of-a-transpiled-component-with-custom-overrides\">this page in the Jco book</a> need an update that would have helped you do filesystem stuff much easier?</p>",
        "id": 538921077,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757615418
    },
    {
        "content": "<p>I tried the jco book and various readmes but they all stop documenting things after instantiation</p>",
        "id": 538921372,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757615530
    },
    {
        "content": "<p>It’s all “TODO: add code to utilize the component”</p>",
        "id": 538921458,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757615570
    },
    {
        "content": "<p>the key thing, I think, is that I don’t actually need to see how to call the WASI exports, what I need is to see how to do _setEnv and so on</p>",
        "id": 538921575,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757615616
    },
    {
        "content": "<p>which is entirely up to the shim afaik</p>",
        "id": 538921599,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757615626
    },
    {
        "content": "<p>AH! OK thank you for making that clear</p>",
        "id": 538921629,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757615642
    },
    {
        "content": "<p>Yeah we definitely need more work on the book -- would you mind creating an issue against Jco?</p>",
        "id": 538921650,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757615654
    },
    {
        "content": "<p>Well tbh I think this stuff should be in the shim readme, if documented at all? The filesystem stuff is really nasty.</p>",
        "id": 538921806,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757615703
    },
    {
        "content": "<p>And the shim readme is what shows up on NPM.</p>",
        "id": 538921828,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757615713
    },
    {
        "content": "<p>If you could be incredibly liberal (no frustration is too small), this is something we can actually get to and fix/make better.</p>\n<p>The context here is that there are actually ~2+ starting points for Jco/JS component work -- there's the <a href=\"https://component-model.bytecodealliance.org/language-support/javascript.html\">component book</a> (it stops short of async instantiation after transpile) and the Jco book, and clearly the latter is the right place but doesn't have enough detail</p>",
        "id": 538921896,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757615746
    },
    {
        "content": "<p>I can open an issue regardless</p>",
        "id": 538921927,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757615761
    },
    {
        "content": "<p>This is the filesystem stuff I'm talking about<br>\n<a href=\"/user_uploads/15107/B1xnGtCxBq5yfBLQk4HXaFco/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/B1xnGtCxBq5yfBLQk4HXaFco/image.png\" title=\"image.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"548x146\" src=\"/user_uploads/thumbnail/15107/B1xnGtCxBq5yfBLQk4HXaFco/image.png/840x560.webp\"></a></div>",
        "id": 538921937,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757615764
    },
    {
        "content": "<p>Ah, so that sounds like a second issue</p>",
        "id": 538921944,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757615765
    },
    {
        "content": "<p>Feel free to make them distinct issues if you want, instantiation broadly being better documented, and the Preview2 README pointing to the documentation (and containing more examples)</p>",
        "id": 538921994,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757615793
    },
    {
        "content": "<p>I had to basically reverse engineer what the internal data format was for files</p>",
        "id": 538921999,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757615794
    },
    {
        "content": "<p>So this... I would have expected to be provided via the types, are they not showing up properly?</p>",
        "id": 538922053,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757615825
    },
    {
        "content": "<p>is this a third issue? IIRC I get completion locally when using the exports of <code>preview2-shim</code> but if that's not working then there is clearly an issue</p>",
        "id": 538922130,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757615861
    },
    {
        "content": "<p>I am actually not using TypeScript for this at the moment</p>",
        "id": 538922208,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757615899
    },
    {
        "content": "<p>So perhaps that would have showed me</p>",
        "id": 538922230,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757615906
    },
    {
        "content": "<p>That said, I don't see TypeScript types for _setEnv and friends? But maybe I'm looking in the wrong place</p>",
        "id": 538922308,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757615941
    },
    {
        "content": "<p>AHHHH yes, unfortunately that's the problem, all of the types are specified that way... OK, but we can at least improve this with JSDoc</p>",
        "id": 538922316,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757615946
    },
    {
        "content": "<p>like, I can find <code>@bytecodealliance/preview2-shim/lib/browser/filesystem.js</code>, which has the <code>_setFileData</code> function, but unless I'm missing something, I don't see any TypeScript definitions for <code>_setFileData</code></p>",
        "id": 538922464,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757616018
    },
    {
        "content": "<p>Ah also a problem -- the types for setEnv are missing -- there's no JSdoc on that</p>",
        "id": 538922480,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757616022
    },
    {
        "content": "<p>Yeah at this point not even sure if the \"add jsdoc everywhere\" should be lumped into the problems with preview2 issue, but either way, that's probably the quickest way to fix the huge DX hole</p>",
        "id": 538922761,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757616105
    },
    {
        "content": "<p>and like I'm sure it's because it's specific to the browser implementation of the shim, but really it's kind of gross on its own that I have to import and use browser-specific things instead of having a unified API that I could use in any environment</p>",
        "id": 538922798,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757616117
    },
    {
        "content": "<p>and if I understand correctly, the things I need (env vars, cmd args, files) are entirely outside of the WASI component and are implemented in some specific way on the host - that is, in this case, by the shim</p>",
        "id": 538922965,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757616187
    },
    {
        "content": "<p>yeah an isomorphic API would be ideal, <em>but</em> the browser implementation is very experimental (read incomplete)</p>",
        "id": 538922972,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757616189
    },
    {
        "content": "<p>Which is why they haven't been merged IIRC</p>",
        "id": 538922993,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757616196
    },
    {
        "content": "<p>So the thing is that the instantiation is <em>also</em> JS so there's some overlap there, but in general yes, the p2 implementation is \"host code\"</p>",
        "id": 538923142,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757616236
    },
    {
        "content": "<p>sure, but part of it is satisfying the semantics of the WASI interface (glue), and part of it is actually <em>acting as the host</em>, right?</p>",
        "id": 538923286,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757616290
    },
    {
        "content": "<p>and it's the latter that is platform-specific and undocumented and untyped</p>",
        "id": 538923302,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757616299
    },
    {
        "content": "<p>If I'm understanding you correctly it's both that are platform specific -- because what is available/usable from Node differs from the browser environment</p>",
        "id": 538923474,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757616370
    },
    {
        "content": "<p><em>and</em> there is the configuration of the host which <em>should</em> be less platform specific, but it depends completely on your implementation</p>",
        "id": 538923633,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757616447
    },
    {
        "content": "<p>Like for example TextEncoder is obviously available in both environments so there's nothing inherently platform specific about your screenshot above, though it's part of the configuration for \"acting as the host\"</p>",
        "id": 538923740,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757616490
    },
    {
        "content": "<p>OK new version of jco is out that should fix that bindgen issue: </p>\n<p><a href=\"https://www.npmjs.com/package/@bytecodealliance/jco/v/1.15.0\">https://www.npmjs.com/package/@bytecodealliance/jco/v/1.15.0</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.npmjs.com/package/@bytecodealliance/jco/v/1.15.0\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1f95ebb8bfed4d27a76408b23d90d6ad57189dbd/68747470733a2f2f7374617469632d70726f64756374696f6e2e6e706d6a732e636f6d2f33333865343930356132363834636139366530386337373830666336383431322e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.npmjs.com/package/@bytecodealliance/jco/v/1.15.0\" title=\"@bytecodealliance/jco\">@bytecodealliance/jco</a></div><div class=\"message_embed_description\">JavaScript tooling for working with WebAssembly Components. Latest version: 1.15.0, last published: 6 minutes ago. Start using @bytecodealliance/jco in your project by running `npm i @bytecodealliance/jco`. There are 10 other projects in the npm registry using @bytecodealliance/jco.</div></div></div>",
        "id": 538931925,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1757619581
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 538932227,
        "sender_full_name": "Ben Visness",
        "timestamp": 1757619702
    },
    {
        "content": "<p>It doesn't address the API concerns (and don't think it's trying to) but I have found the  WASI p2 browser shim made by <span class=\"user-mention\" data-user-id=\"684890\">@Catherine (whitequark)</span> easier to extend / hack on:<br>\n<a href=\"https://github.com/YoWASP/runtime-js/blob/develop/lib/api.js#L42\">https://github.com/YoWASP/runtime-js/blob/develop/lib/api.js#L42</a><br>\n<a href=\"https://github.com/YoWASP/runtime-js/blob/develop/lib/wasi-virt.js\">https://github.com/YoWASP/runtime-js/blob/develop/lib/wasi-virt.js</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/YoWASP/runtime-js/blob/develop/lib/api.js#L42\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e98a8df538595de44bdc482abb583e600884415c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373230653135326439653532663032663331313633303136343661613465303935393734343130386161633639613038633861313138306361333464313239302f596f574153502f72756e74696d652d6a73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/YoWASP/runtime-js/blob/develop/lib/api.js#L42\" title=\"runtime-js/lib/api.js at develop · YoWASP/runtime-js\">runtime-js/lib/api.js at develop · YoWASP/runtime-js</a></div><div class=\"message_embed_description\">Common runtime for YoWASP packages deployed to NPM, interfacing with Node.js and the browser - YoWASP/runtime-js</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/YoWASP/runtime-js/blob/develop/lib/wasi-virt.js\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e98a8df538595de44bdc482abb583e600884415c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373230653135326439653532663032663331313633303136343661613465303935393734343130386161633639613038633861313138306361333464313239302f596f574153502f72756e74696d652d6a73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/YoWASP/runtime-js/blob/develop/lib/wasi-virt.js\" title=\"runtime-js/lib/wasi-virt.js at develop · YoWASP/runtime-js\">runtime-js/lib/wasi-virt.js at develop · YoWASP/runtime-js</a></div><div class=\"message_embed_description\">Common runtime for YoWASP packages deployed to NPM, interfacing with Node.js and the browser - YoWASP/runtime-js</div></div></div>",
        "id": 538945322,
        "sender_full_name": "Milan (rajsite)",
        "timestamp": 1757626081
    },
    {
        "content": "<p>o/ Happy to answer questions!</p>\n<p>And yeah, I found the \"official\" shim kind of burdensome to work with, and it didn't support my use case (virtual FS) to start with.</p>",
        "id": 538951899,
        "sender_full_name": "Catherine (whitequark)",
        "timestamp": 1757630144
    },
    {
        "content": "<p>For just the basic \"get a WASI 0.1 module running on the web\", I have found <a href=\"https://github.com/taybenlor/runno\">https://github.com/taybenlor/runno</a> to be useful; there's a demo at <a href=\"https://runno.dev/wasi/\">https://runno.dev/wasi/</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/taybenlor/runno\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1cc1be439a99dfe304240a8b5133d1eb77b54b8b/68747470733a2f2f7265706f7369746f72792d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3337343131363636342f34316233353834342d656133362d343961642d613562352d366161353965613064666566&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/taybenlor/runno\" title=\"GitHub - taybenlor/runno: Sandboxed runtime for programming languages and WASI binaries. Works in the browser or on your server.\">GitHub - taybenlor/runno: Sandboxed runtime for programming languages and WASI binaries. Works in the browser or on your server.</a></div><div class=\"message_embed_description\">Sandboxed runtime for programming languages and WASI binaries. Works in the browser or on your server. - taybenlor/runno</div></div></div>",
        "id": 539879495,
        "sender_full_name": "Bakkot",
        "timestamp": 1758050861
    }
]