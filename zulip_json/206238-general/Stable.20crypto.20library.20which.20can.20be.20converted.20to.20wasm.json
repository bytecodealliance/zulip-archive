[
    {
        "content": "<p>Can anyone give me suggestions on a stable crypto library that can be converted to wasm so that I can dynamically link into my framework I am building.</p>\n<p>Thanks</p>",
        "id": 504860712,
        "sender_full_name": "celine santosh",
        "timestamp": 1741703926
    },
    {
        "content": "<p>Libsodium supports WebAssembly since 2017, and is widely used in production, including in JavaScript applications.</p>",
        "id": 504933984,
        "sender_full_name": "Frank Denis",
        "timestamp": 1741721179
    },
    {
        "content": "<p>Check out <a href=\"https://github.com/jedisct1/libsodium.js\">https://github.com/jedisct1/libsodium.js</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/jedisct1/libsodium.js\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9fa126c11895b66867db58beede9812d0582c76a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383432306131333039306161373833663030333066613838353530646132646637313132363431343936306532383830653432303439666236376435663633612f6a656469736374312f6c6962736f6469756d2e6a73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/jedisct1/libsodium.js\" title=\"GitHub - jedisct1/libsodium.js: libsodium compiled to Webassembly and pure JavaScript, with convenient wrappers.\">GitHub - jedisct1/libsodium.js: libsodium compiled to Webassembly and pure JavaScript, with convenient wrappers.</a></div><div class=\"message_embed_description\">libsodium compiled to Webassembly and pure JavaScript, with convenient wrappers. - jedisct1/libsodium.js</div></div></div>",
        "id": 504934216,
        "sender_full_name": "Frank Denis",
        "timestamp": 1741721253
    },
    {
        "content": "<p>Also on NPM <a href=\"https://www.npmjs.com/package/libsodium-wrappers\">https://www.npmjs.com/package/libsodium-wrappers</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.npmjs.com/package/libsodium-wrappers\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1f95ebb8bfed4d27a76408b23d90d6ad57189dbd/68747470733a2f2f7374617469632d70726f64756374696f6e2e6e706d6a732e636f6d2f33333865343930356132363834636139366530386337373830666336383431322e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.npmjs.com/package/libsodium-wrappers\" title=\"libsodium-wrappers\">libsodium-wrappers</a></div><div class=\"message_embed_description\">The Sodium cryptographic library compiled to pure JavaScript (wrappers). Latest version: 0.7.15, last published: 7 months ago. Start using libsodium-wrappers in your project by running `npm i libsodium-wrappers`. There are 531 other projects in the npm registry using libsodium-wrappers.</div></div></div>",
        "id": 504934227,
        "sender_full_name": "Frank Denis",
        "timestamp": 1741721256
    },
    {
        "content": "<p>BoringSSL / OpenSSL have also been ported to WASI/WASIX but these are not well tested configurations.</p>",
        "id": 504934712,
        "sender_full_name": "Frank Denis",
        "timestamp": 1741721401
    },
    {
        "content": "<p><a href=\"https://github.com/jedisct1/boringssl-wasm\">https://github.com/jedisct1/boringssl-wasm</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/jedisct1/boringssl-wasm\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4a666b0c211cc279208f88da238e005105ab17aa/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653230303833383766386465326462393436343836383536653737663764323036326462663561613964653037623734383436336161366239646230383534382f6a656469736374312f626f72696e6773736c2d7761736d&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/jedisct1/boringssl-wasm\" title=\"GitHub - jedisct1/boringssl-wasm: BoringSSL for WebAssembly/WASI\">GitHub - jedisct1/boringssl-wasm: BoringSSL for WebAssembly/WASI</a></div><div class=\"message_embed_description\">BoringSSL for WebAssembly/WASI. Contribute to jedisct1/boringssl-wasm development by creating an account on GitHub.</div></div></div>",
        "id": 504934984,
        "sender_full_name": "Frank Denis",
        "timestamp": 1741721473
    },
    {
        "content": "<p><a href=\"https://github.com/jedisct1/openssl-wasm\">https://github.com/jedisct1/openssl-wasm</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/jedisct1/openssl-wasm\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/55e40499cdad32df2a78fcf9474eb337daa55c04/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373764346536323337326238623930306234393461616632356162316166623435343231663739623430666561393436623532623533333134303433636136352f6a656469736374312f6f70656e73736c2d7761736d&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/jedisct1/openssl-wasm\" title=\"GitHub - jedisct1/openssl-wasm: OpenSSL 3 compiled for WebAssembly/WASI (up-to-date, maintained)\">GitHub - jedisct1/openssl-wasm: OpenSSL 3 compiled for WebAssembly/WASI (up-to-date, maintained)</a></div><div class=\"message_embed_description\">OpenSSL 3 compiled for WebAssembly/WASI (up-to-date, maintained) - jedisct1/openssl-wasm</div></div></div>",
        "id": 504935071,
        "sender_full_name": "Frank Denis",
        "timestamp": 1741721498
    },
    {
        "content": "<p>Even easier: if you're using Go or Zig, all the crypto functions from the standard library are going to work in WebAssembly without any changes.</p>",
        "id": 504935409,
        "sender_full_name": "Frank Denis",
        "timestamp": 1741721589
    },
    {
        "content": "<p>But don't expect any protection against side channels, and performance is not great, especially for symmetric crypto.</p>",
        "id": 504935528,
        "sender_full_name": "Frank Denis",
        "timestamp": 1741721627
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 505186967,
        "sender_full_name": "celine santosh",
        "timestamp": 1741797169
    }
]