[
    {
        "content": "<p><a href=\"https://github.com/WebAssembly/wasi-http/blob/d163277b8684483a2334363ca1492ca298ea526d/wit-0.3.0-draft/types.wit\">https://github.com/WebAssembly/wasi-http/blob/d163277b8684483a2334363ca1492ca298ea526d/wit-0.3.0-draft/types.wit</a></p>\n<p>I do not understand how to construct the <code>tailers</code> parameter of the <code>request</code> constructor. It expects a <code>future&lt;result&lt;option&lt;trailers&gt;, error-code&gt;&gt;</code>. In my case all requests do not have any trailers. </p>\n<p>Would I have to write a future that directly resolves to <code>Ok(None)</code>? Thanks!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/blob/d163277b8684483a2334363ca1492ca298ea526d/wit-0.3.0-draft/types.wit\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5c262a14e512b2fb9b8e31c0d609f20abe8ee1fc/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346564383138643262356261373138393835356535623964313633353436613438653764646365636331303866663461323064366431363564306533666136392f576562417373656d626c792f776173692d68747470&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/blob/d163277b8684483a2334363ca1492ca298ea526d/wit-0.3.0-draft/types.wit\" title=\"wasi-http/wit-0.3.0-draft/types.wit at d163277b8684483a2334363ca1492ca298ea526d · WebAssembly/wasi-http\">wasi-http/wit-0.3.0-draft/types.wit at d163277b8684483a2334363ca1492ca298ea526d · WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">Contribute to WebAssembly/wasi-http development by creating an account on GitHub.</div></div></div>",
        "id": 521768101,
        "sender_full_name": "mainrs",
        "timestamp": 1748876080
    },
    {
        "content": "<blockquote>\n<p>Would I have to write a future that directly resolves to <code>Ok(None)</code>?</p>\n</blockquote>\n<p>Yep. The main point of trailers is that you don't (necessarily) know what they are until the body has been processed, so for a general-purpose interface we need some way to make that async.</p>",
        "id": 521778653,
        "sender_full_name": "Lann Martin",
        "timestamp": 1748878774
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 521781902,
        "sender_full_name": "mainrs",
        "timestamp": 1748879451
    },
    {
        "content": "<p>Write a Future combinator named <code>ready</code> in your support library, to construct any immediately resolved future</p>",
        "id": 522204653,
        "sender_full_name": "riking",
        "timestamp": 1748980455
    }
]