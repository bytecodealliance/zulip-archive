[
    {
        "content": "<p>Hi. I'm quite new to wasm and currently integrating a wasm runtime based on wasmtime ( wasmex ). I played around with some simple examples. Also tried to integrate edge impulse webassembly modules. but without any luck so far.</p>\n<p>example-standalone-inferencing-wasm % wasmtime run ~/Downloads/tutorial_-continuous-motion-recognition-wasm-v59/browser/edge-impulse-standalone.wasm<br>\nError: failed to run main module <code>/Users/adrianibanez/Downloads/tutorial_-continuous-motion-recognition-wasm-v59/browser/edge-impulse-standalone.wasm</code></p>\n<p>Caused by:<br>\n0: failed to instantiate \"/Users/adrianibanez/Downloads/tutorial_-continuous-motion-recognition-wasm-v59/browser/edge-impulse-standalone.wasm\"<br>\n1: unknown import: <code>env::abort</code> has not been defined</p>\n<p>Posted a question about wasmtime in their community forum for additional information.</p>\n<p>I was wondering if someone could point me to information about \"example\" wasm files with some degree of complexity. I'm particularly interested in how a wasmtime host can identify and encode / decode available functions. Is there some kind of \"manifest\" / description file? How are nontrivial wasm modules deployed into the wild?</p>\n<p>My goal would be to support downloadable wasm packages. And I need some way of looking up metadata about those packages including versioning.</p>\n<p>infos about edge impulse module: <a href=\"https://github.com/tessi/wasmex/issues/743\">https://github.com/tessi/wasmex/issues/743</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tessi/wasmex/issues/743\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0fd44f7345ffa673c524e3ebdd26bd69e233f72a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613262653563363735623764373133663831613362373331353465303063323836386266313962663663396666383465303430396131633062323531323564302f74657373692f7761736d65782f6973737565732f373433&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tessi/wasmex/issues/743\" title=\"Question regarding support for edge impulse wasm modules · Issue #743 · tessi/wasmex\">Question regarding support for edge impulse wasm modules · Issue #743 · tessi/wasmex</a></div><div class=\"message_embed_description\">https://docs.edgeimpulse.com/docs/run-inference/webassembly/through-webassembly iex(myapp@192.168.1.193)20&gt; bytes = File.read!(path) &lt;&lt;0, 97, 115, 109, 1, 0, 0, 0, 1, 254, 24, 230, 1, 96, 3, 127, 1...</div></div></div>",
        "id": 506052431,
        "sender_full_name": "Adrian Ibanez",
        "timestamp": 1742193101
    },
    {
        "content": "<p>Ok, I made some progress. Maybe a bit too lowlevel for a first integration attempt ;) They put so much abstraction into the javascript that the wasm part became almost \"unusable\". Does anyone have experience with such setups? <br>\nIs there a strategy to get such kind of wasm modules running in a environment like wasmtime. Eg. convert the javascript into wasm and use 2 wasm modules that communicate with each other? ... asking this with blissful ignorance ;)</p>\n<p>%{<br>\n  \"__dl_seterr\" =&gt; {:fn, [:i32, :i32], []},<br>\n  \"__embind_register_native_and_builtin_types\" =&gt; {:fn, [], []},<br>\n  \"__errno_location\" =&gt; {:fn, [], [:i32]},<br>\n  \"__getTypeName\" =&gt; {:fn, [:i32], [:i32]},<br>\n  \"__indirect_function_table\" =&gt; {:table,<br>\n   %{maximum: 1723, type: {:reference, \"(ref null func)\"}, minimum: 1723}},<br>\n  \"__stdio_exit\" =&gt; {:fn, [], []},<br>\n  \"__wasm_call_ctors\" =&gt; {:fn, [], []},<br>\n  \"dynCall_iiiijj\" =&gt; {:fn, [:i32, :i32, :i32, :i32, :i32, :i32, :i32, :i32],<br>\n   [:i32]},<br>\n  \"dynCall_jiji\" =&gt; {:fn, [:i32, :i32, :i32, :i32, :i32], [:i32]},<br>\n  \"dynCall_jjj\" =&gt; {:fn, [:i32, :i32, :i32, :i32, :i32], [:i32]},<br>\n  \"dynCall_viiijjj\" =&gt; {:fn,<br>\n   [:i32, :i32, :i32, :i32, :i32, :i32, :i32, :i32, :i32, :i32], []},<br>\n  \"dynCall_viijj\" =&gt; {:fn, [:i32, :i32, :i32, :i32, :i32, :i32, :i32], []},<br>\n  \"emscripten_builtin_memalign\" =&gt; {:fn, [:i32, :i32], [:i32]},<br>\n  \"emscripten_stack_get_base\" =&gt; {:fn, [], [:i32]},<br>\n  \"emscripten_stack_get_end\" =&gt; {:fn, [], [:i32]},<br>\n  \"emscripten_stack_get_free\" =&gt; {:fn, [], [:i32]},<br>\n  \"emscripten_stack_init\" =&gt; {:fn, [], []},<br>\n  \"free\" =&gt; {:fn, [:i32], []},<br>\n  \"malloc\" =&gt; {:fn, [:i32], [:i32]},<br>\n  \"memory\" =&gt; {:memory,<br>\n   %{maximum: 32768, shared: false, memory64: false, minimum: 2048}},<br>\n  \"stackAlloc\" =&gt; {:fn, [:i32], [:i32]},<br>\n  \"stackRestore\" =&gt; {:fn, [:i32], []},<br>\n  \"stackSave\" =&gt; {:fn, [], [:i32]}<br>\n}</p>\n<p>It's 268K of javascript and a 6.5MB wasm file</p>",
        "id": 506059400,
        "sender_full_name": "Adrian Ibanez",
        "timestamp": 1742195399
    },
    {
        "content": "<p>I think the wasm module was compiled with Emscripten. Wasmtime doesn't support the Emscripten ABI. Try building it with wasi-sdk instead.</p>",
        "id": 506077353,
        "sender_full_name": "bjorn3",
        "timestamp": 1742200427
    },
    {
        "content": "<p>I have no control over the wasm / js library. it is provided as one of the deployment targets of edge impulse models. they support numerous hardware, c++ libs, ... </p>\n<p>would compiling the c++ sourcecode to wasm be a more feasible strategy to deploy as wasm for wasmtime runtime?</p>",
        "id": 506100500,
        "sender_full_name": "Adrian Ibanez",
        "timestamp": 1742205835
    },
    {
        "content": "<p>What about pglite wasm? Do the exports and specially the imports look like something that could be supported in a wasmtime runtime? Appologies if I'm asking very basic or silly questions; just starting to build an understanding of the contraints and dependencies within the wasm ecosystem. <br>\n<a href=\"/user_uploads/15107/OZy9ZrkM9VPyLuyu9Dn15wXJ/infos-pglite-functions.txt\">infos-pglite-functions.txt</a></p>",
        "id": 506127881,
        "sender_full_name": "Adrian Ibanez",
        "timestamp": 1742212389
    },
    {
        "content": "<p>I'm particularly interested in understanding what kind of system calls are available by default in wasmtime. </p>\n<p>eg. wasi_snapshot_preview1\" =&gt; %{<br>\n\"clock_time_get\" =&gt; {:fn, [:i32, :i64, :i32], [:i32]},<br>\n\"environ_get\" =&gt; {:fn, [:i32, :i32], [:i32]},<br>\n\"environ_sizes_get\" =&gt; {:fn, [:i32, :i32], [:i32]},<br>\n\"fd_close\" =&gt; {:fn, [:i32], [:i32]},<br>\n\"fd_fdstat_get\" =&gt; {:fn, [:i32, :i32], [:i32]},<br>\n\"fd_pread\" =&gt; {:fn, [:i32, :i32, :i32, :i64, :i32], [:i32]},<br>\n\"fd_pwrite\" =&gt; {:fn, [:i32, :i32, :i32, :i64, :i32], [:i32]},<br>\n\"fd_read\" =&gt; {:fn, [:i32, :i32, :i32, :i32], [:i32]},<br>\n\"fd_seek\" =&gt; {:fn, [:i32, :i64, :i32, :i32], [:i32]},<br>\n\"fd_sync\" =&gt; {:fn, [:i32], [:i32]},<br>\n\"fd_write\" =&gt; {:fn, [:i32, :i32, :i32, :i32], [:i32]},<br>\n\"proc_exit\" =&gt; {:fn, [:i32], []}<br>\n}</p>",
        "id": 506128187,
        "sender_full_name": "Adrian Ibanez",
        "timestamp": 1742212462
    },
    {
        "content": "<p>Yes, wasip1 (which uses the wasi_snapshot_preview1 module) is supported by Wasmtime.</p>",
        "id": 506136264,
        "sender_full_name": "bjorn3",
        "timestamp": 1742214438
    },
    {
        "content": "<p>Wasmtime has wasip1 and wasip2 support builtin. Any other ABI is not supported by the cli, but could be implemented yourself when using wasmtime as library.</p>",
        "id": 506136537,
        "sender_full_name": "bjorn3",
        "timestamp": 1742214494
    },
    {
        "content": "<p>have just been talking to the pglite developers. they are working on a implementation that will definitely run on wasmtime. \"We use emscripten to build the version used in the npm package. And we have an in development \"libpglite.wasm\" that compiles it with the wasm sdk - this has the lower level api, and is geared towards wasm runtimes that are not inside a JS runtime.\"</p>",
        "id": 506140826,
        "sender_full_name": "Adrian Ibanez",
        "timestamp": 1742215527
    }
]