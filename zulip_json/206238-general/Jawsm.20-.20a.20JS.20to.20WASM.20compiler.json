[
    {
        "content": "<p>When I was naming the project I knew about JAWS the screen reader, but I didn't think it would lead to any confusion as when you google for JAWS you get mostly pages about Jaws, the movie. A screen reader user mentioned that it's already sometimes hard to find information about JAWS in context of the browser (like javascript developer tools). @benmccann from SvelteKit suggested the name could be Jawsm (pronounced like awesome) and I like that, so I changed the name to avoid any confusion.</p>",
        "id": 481599058,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1731274153
    },
    {
        "content": "<p>Given the maturity of the current WASI 0.3 prototype by Joel I feel you could take a look at it for any newly starting projects, as async becomes so much easier with 0.3. Feel free to ask questions here, I adapted the code for native compilation and found it easy to understand, given Luke's excellent presentation in Barcelona.</p>",
        "id": 481627154,
        "sender_full_name": "Christof Petig",
        "timestamp": 1731297760
    },
    {
        "content": "<p>Also Joel will likely present more about it tomorrow at WasmCon.</p>",
        "id": 481627213,
        "sender_full_name": "Christof Petig",
        "timestamp": 1731297807
    },
    {
        "content": "<p>Thanks for the info <span class=\"user-mention\" data-user-id=\"590366\">@Christof Petig</span>, that's exciting! For now I'm using few functions from WASIp2, mostly <code>subscribe-duration</code> and maybe I'll add outgoing HTTP requests at some point to test things, but a broader WASI integration will come when I get to more builtin types and especially Node.js APIs. Which makes it even better, cause by the time I'm there, I'm guessing WASI 0.3 will be used more widely.</p>\n<p>The only potential issue I can see is runtimes support. The code I'm generating is already hard to run almost anywhere without host extensions. For now I added a few simple pollyfill functions to mimic WASIp2 in Node.js/Chromium, but my aim is to be able to run on top of a bare runtime without any custom code. If Wasmtime gets WASI 0.3 support anytime soon, I will definitely give it a shot.</p>\n<p>At the moment another blocker for using Wasmtime is the exception handling support, but when I finish await/generators I might just have the tools to rewrite <code>try...catch</code> into WASM code that doesn't need the feature.</p>",
        "id": 481728445,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1731333454
    },
    {
        "content": "<p>I have a small, but I think exciting update: I have a first working PoC of async/await handling in JAWSM. I think there are some edge cases that it doesn't handle yet, but it handles <code>await</code> statements in conditionals and loops, so the rest is definitely doable. When I wrote the first post in this thread, on 9th of November, I said I'm working on async/await, but I dropped the work afterwards. The project was just not ready for that in terms of stuff supported then, and most importantly because of very limited tooling. Now that I generate most of the WASM code from Rust, adding new features got easier. On top of that, I also worked on a tool to traverse and modify WASM code, which made it much easier to implement.</p>\n<p>I'm very happy with it, because this is one of the last two things that I still didn't confirm are doable (the other thing is generators support).</p>\n<p>For those curious on the details, I use a WASM code transformer that splits WASM code at the <code>await</code> point, saves the state and the stack and restores the state. The effect is kind of similar to asyncify, but a bit more integrated into how I translate JS code. And also rather than unwind the entire stack I do more of a CSP style transforms, ie. a function using one await statement will become two functions - first function will keep everything before the <code>await</code> keyword and the second function will be called once <code>await</code>ed promise is resolved.</p>",
        "id": 492570843,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1736364553
    },
    {
        "content": "<p>So I might have been a bit too fast to post the \"victory post\". When I was writing the above, I had the implementation mostly working with the ability to compile code like this:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">sleep</span><span class=\"p\">(</span><span class=\"nx\">ms</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span>\n<span class=\"w\">     </span><span class=\"nx\">setTimeout</span><span class=\"p\">(()</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">       </span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">ms</span><span class=\"p\">);</span>\n<span class=\"w\">     </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"nx\">ms</span><span class=\"p\">),</span>\n<span class=\"w\">   </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">sum</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span>\n\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">4</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">sum</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"nx\">sleep</span><span class=\"p\">((</span><span class=\"nx\">i</span><span class=\"o\">+</span><span class=\"mf\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mf\">100</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"awaited \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"o\">+</span><span class=\"mf\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mf\">100</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Total await time\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">sum</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">foo</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>The problem is, I still had some edge cases to handle, most notably support for <code>try/catch</code>. I thought it won't be hard to implement, but it is, as one might have expected, if they were not blinded by optimism, indeed hard. Long story short, I didn't have much time to work on the project, and the time I had was hardly enough for a successful try. I pushed what I have for now to GitHub, so if someone is curious, you may take a look at <a href=\"https://github.com/drogus/jawsm/tree/async-generators-wip\">async-generators-wip</a> branch (a small warning: the code of the entire project is not of a quality I'd normally produce, mostly cause it's still int he proof of concept stage). For example this test asserting on how nested blocks are split into series of callback functions might be interesting: <a href=\"https://github.com/drogus/jawsm/blob/b3cc0fe818f3ad85bf171e2e39eb0d3742894052/src/await_keyword_transformer.rs#L947\">https://github.com/drogus/jawsm/blob/b3cc0fe818f3ad85bf171e2e39eb0d3742894052/src/await_keyword_transformer.rs#L947</a> (the blocks have to be split in into two parts and then each of the <code>br</code> calls has to split the code again).</p>\n<p>About a week ago I kinda gave up on the callbacks approach and I was thinking that with a limited amount of time I have I should just use asyncify as the implementation would have been much simpler. I've started working on it, but today it turned out asyncify <a href=\"https://github.com/WebAssembly/binaryen/issues/5343\">does not support exceptions</a> either.</p>\n<p>A good thing is that while working on the Asyncify version I discovered that my implementation is slightly broken for regular \"thenables\" (for example a simple object with a <code>then</code> method). For example this code:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nx\">then</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">onFullfilled</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"calling then\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nx\">onFullfilled</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">fooFunction</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"fooFunction, before await\"</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">fooValue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"nx\">foo</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"fooValue\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">fooValue</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">fooFunction</span><span class=\"p\">();</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"done\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Should print:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">fooFunction</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"w\"> </span><span class=\"k\">await</span>\n<span class=\"n\">done</span>\n<span class=\"n\">calling</span><span class=\"w\"> </span><span class=\"n\">then</span>\n<span class=\"n\">fooValue</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n</code></pre></div>\n<p>But with my implementation it will print:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">fooFunction</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"w\"> </span><span class=\"k\">await</span>\n<span class=\"n\">calling</span><span class=\"w\"> </span><span class=\"n\">then</span>\n<span class=\"n\">fooValue</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n<span class=\"n\">done</span>\n</code></pre></div>\n<p>That's because in my current implementation I only pause the execution on calls that give control back to the runtime (like <code>setTimeout</code> or in the future I/O operations).</p>\n<p>So where do I go from here? Given I have the \"CSP\" version mostly working, I think I'll at least fix it to handle \"thenables\" properly and when I have more time I'll give exceptions another try. That said, being quite close to make asyncify work makes me want to finish that, too, and compare the two approaches.</p>\n<p>The main three reasons on why I went with CSP style transformations were:</p>\n<ol>\n<li>Asyncify requires certain things to be coded in a specific way (like: no non-defaultable values in locals, params, or return values). This point got old fast, though, cause when I finished my implementation it turned out I also need to use nullable values to save state.</li>\n<li>Asyncify works by unwinding/rewinding the stack, which I found quite wasteful, given that the async/await already works by using callbacks. So my thinking was - as I use callbacks anyway, why not add a few more and call it a day?</li>\n<li>Asyncify saves the state in memory. I didn't like that too much. Most of the variables in my implementation are GC based, so it felt more natural to just pass them from function to function rather than serialize and deserialize on each await. And although the performance aspect of that is not clear to me, at least not without any benchmarks, I didn't really like having to manage the memory segments used for asyncify</li>\n</ol>\n<p>Given that now I <em>almost</em> have both implementations ready (minus the exceptions part), I am very curious to benchmark both versions and see if my worries about excessive calls and/or de/serialization are warranted. Due to my work/personal obligations it likely won't happen soon, but I'll definitely post about it when I have something to show!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/drogus/jawsm/tree/async-generators-wip\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4c771badf88a2abab3ffb9b6d88cbe3ea8747ed9/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363236643966316434633932383265396238376638613431616533646466323465376431303033653666643137616238303630393230333334613631373764312f64726f6775732f6a6177736d&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/drogus/jawsm/tree/async-generators-wip\" title=\"GitHub - drogus/jawsm at async-generators-wip\">GitHub - drogus/jawsm at async-generators-wip</a></div><div class=\"message_embed_description\">JavaScript to WASM compiler. Contribute to drogus/jawsm development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/drogus/jawsm/blob/b3cc0fe818f3ad85bf171e2e39eb0d3742894052/src/await_keyword_transformer.rs#L947\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4c771badf88a2abab3ffb9b6d88cbe3ea8747ed9/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363236643966316434633932383265396238376638613431616533646466323465376431303033653666643137616238303630393230333334613631373764312f64726f6775732f6a6177736d&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/drogus/jawsm/blob/b3cc0fe818f3ad85bf171e2e39eb0d3742894052/src/await_keyword_transformer.rs#L947\" title=\"jawsm/src/await_keyword_transformer.rs at b3cc0fe818f3ad85bf171e2e39eb0d3742894052 · drogus/jawsm\">jawsm/src/await_keyword_transformer.rs at b3cc0fe818f3ad85bf171e2e39eb0d3742894052 · drogus/jawsm</a></div><div class=\"message_embed_description\">JavaScript to WASM compiler. Contribute to drogus/jawsm development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/binaryen/issues/5343\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/718b39f5e6daed2f1cd64b7ffb2e37b5ea12445c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323938333163663938363237623864646561363766323764613665373965353739333035623363353333643035366162316236343965333061393332366565302f576562417373656d626c792f62696e617279656e2f6973737565732f35333433&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/binaryen/issues/5343\" title=\"Support try-catch in Asyncify / lower wasm exceptions to MVP · Issue #5343 · WebAssembly/binaryen\">Support try-catch in Asyncify / lower wasm exceptions to MVP · Issue #5343 · WebAssembly/binaryen</a></div><div class=\"message_embed_description\">See discussion in #5143 - lowering wasm exceptions to wasm MVP might be the best approach for this.</div></div></div>",
        "id": 500023475,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1739723363
    },
    {
        "content": "<p>A small weekend win, I fixed the current CSP style version to work properly with \"thenables\", ie. both the regular object with <code>then</code> and Promises that return to the host work.</p>\n<p>I wanted to also write about a plan to implement transformations inside try/catch blocks. It will introduce quite a bit of repetition, but I think it's the easiest thing to do for now and I'm hoping by the time the project is anywhere close to being usable I will be able to rewrite the whole thing to use the stack-switching proposal. I know stack-switching code is being upstreamed to Wasmtime, but then Wasmtime doesn't support exception handling yet, so I'm relying mostly on Chromium at the moment.</p>\n<p>Anyhow, it seems to me that the easiest way to transform code inside of try/catch is to basically copy the try/catch part with every transformation. So for example given the following simplified function:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$foo</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"nv\">$counter</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">local.set</span> <span class=\"nv\">$counter</span>\n\n    <span class=\"err\">try</span>\n        <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">call</span> <span class=\"nv\">$log</span>\n\n        <span class=\"k\">loop</span> <span class=\"nv\">$test-loop</span>\n            <span class=\"nb\">local.get</span> <span class=\"nv\">$counter</span>\n            <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n            <span class=\"nb\">i32.add</span>\n            <span class=\"nb\">local.set</span> <span class=\"nv\">$counter</span>\n\n            <span class=\"nb\">call</span> <span class=\"nv\">$produce_a_promise</span>\n            <span class=\"nb\">call</span> <span class=\"nv\">$await</span>\n\n            <span class=\"nb\">local.get</span> <span class=\"nv\">$counter</span>\n            <span class=\"nb\">i32.const</span> <span class=\"mi\">5</span>\n            <span class=\"nb\">i32.lt_s</span>\n            <span class=\"nb\">br_if</span> <span class=\"nv\">$test-loop</span>\n        <span class=\"k\">end</span>\n    <span class=\"err\">catch</span> <span class=\"nv\">$AnException</span>\n        <span class=\"nb\">i32.const</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">call</span> <span class=\"nv\">$log</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">3</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$log</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>Could be transformed into something like that:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"cp\">$foo</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">needs</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">execute</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">loop</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">enter</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">calling</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">function</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">keeping</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"o\">/</span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"n\">around</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">parts</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">code</span>\n<span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$foo</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"cp\">$counter</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"cp\">$counter</span>\n\n<span class=\"w\">    </span><span class=\"kr\">try</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$log</span>\n\n<span class=\"w\">        </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$loop</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"k\">loop</span><span class=\"o\">-</span><span class=\"n\">start</span>\n<span class=\"w\">    </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"cp\">$AnException</span>\n<span class=\"w\">        </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$log</span>\n<span class=\"w\">    </span><span class=\"n\">end</span>\n<span class=\"p\">)</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"n\">point</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">It</span><span class=\"w\"> </span><span class=\"n\">carries</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"o\">/</span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">too</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">normally</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">would</span><span class=\"w\"> </span><span class=\"k\">continue</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">inside</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"p\">,</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">also</span><span class=\"w\"> </span><span class=\"n\">had</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">point</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">need</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"w\"> </span><span class=\"n\">at</span>\n<span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$loop</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"k\">loop</span><span class=\"o\">-</span><span class=\"n\">start</span>\n<span class=\"w\">    </span><span class=\"kr\">try</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"cp\">$counter</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"cp\">$counter</span>\n\n<span class=\"w\">        </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$produce_a_promise</span>\n<span class=\"w\">        </span><span class=\"k\">ref</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$foo</span><span class=\"o\">-</span><span class=\"n\">promise</span><span class=\"o\">-</span><span class=\"n\">callback</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$process_promise</span>\n<span class=\"w\">    </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"cp\">$AnException</span>\n<span class=\"w\">        </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$log</span>\n<span class=\"w\">    </span><span class=\"n\">end</span>\n<span class=\"p\">)</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">And</span><span class=\"w\"> </span><span class=\"n\">finally</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">promise</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">.</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">tricky</span><span class=\"w\"> </span><span class=\"n\">part</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"n\">comes</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">the</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">comes</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">did</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">beginning</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">needs</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">happen</span><span class=\"w\"> </span><span class=\"n\">outside</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"o\">/</span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">.</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Without</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">quite</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">bit</span><span class=\"w\"> </span><span class=\"n\">simpler</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"n\">both</span><span class=\"w\"> </span><span class=\"n\">cases</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">same</span><span class=\"w\"> </span><span class=\"n\">conditional</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">don</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">extract</span><span class=\"w\"> </span><span class=\"n\">whatever</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"k\">as</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span>\n<span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$foo</span><span class=\"o\">-</span><span class=\"n\">promise</span><span class=\"o\">-</span><span class=\"n\">callback</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"kr\">try</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"cp\">$counter</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">lt_s</span>\n<span class=\"w\">        </span><span class=\"k\">if</span>\n<span class=\"w\">            </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$loop</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"k\">loop</span><span class=\"o\">-</span><span class=\"n\">start</span>\n<span class=\"w\">        </span><span class=\"n\">end</span>\n<span class=\"w\">    </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"cp\">$AnException</span>\n<span class=\"w\">        </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$log</span>\n<span class=\"w\">    </span><span class=\"n\">end</span>\n\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"cp\">$counter</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">lt_s</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">eqz</span>\n<span class=\"w\">    </span><span class=\"k\">if</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">        </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$log</span>\n<span class=\"w\">    </span><span class=\"n\">end</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>So as you can see there is quite a bit of code repetition in here, but also some tricky parts on how to transform code in context of blocks or loops. I'll also have to consider nested try/catch blocks with nested loops/blocks. Once I have a good idea on how these edge cases should be handled I'll probably try implementing it again, hopefully some time in the next two weeks.</p>",
        "id": 501255537,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1740224175
    },
    {
        "content": "<p>I had some time to work on the project this weekend and I think I'm mostly done with the transformations <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  I'm sure there are some edge cases I haven't run into yet, but for example this code outputs exactly the same text Node.js outputs:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">then</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">onFullfilled</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"calling then\"</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"nx\">onFullfilled</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"p\">};</span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">fooFunction</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Before loop\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"fooFunction, before await inside loop, i:\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">fooValue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"nx\">foo</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"fooValue\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">fooValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"i value:\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">throw</span><span class=\"w\"> </span><span class=\"s2\">\"an error, and fooValue is \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">fooValue</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"p\">}</span>\n<span class=\"w\">      </span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"After loop\"</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Caught error:\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">error</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"After try catch\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">fooFunction</span><span class=\"p\">();</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"done\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>I'll have to clean up the code cause it's a mess now, and I'll try to come up with more examples for testing, including nested try/catch statements and various nestings of loops and try/catch blocks, but I'm hoping I won't need any massive changes now.</p>\n<p>If everything goes well I'll try to tackle generators next, and if that goes well I'll have most of the known unknowns confirmed. And then I'll probably try to fix some of the places that misbehave (like for example implicit typecasting for certain operators), finish two last bigger missing syntax pieces (regex literals and bigint literals), and then I'll be finally ready to implement the builtins themselves, which should rapidly increase the percent of compatibility with the JS spec <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span> </p>\n<p>One thing that made it easier to implement the transformations, was realising that I was making my life harder by using <code>call</code>s instead of <code>return_call</code>s. At some point I was thinking about the stack size and I realised that I have to use <code>return_call</code> and not <code>call</code> instructions in order to not deepen the stack. And then I'm not sure why I didn't think about it in the first place, but returning early when calling the callbacks makes things much easier even if we ignore the stack size. For example, the last function in the example in my previous message looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$foo</span><span class=\"o\">-</span><span class=\"n\">promise</span><span class=\"o\">-</span><span class=\"n\">callback</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"kr\">try</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"cp\">$counter</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">lt_s</span>\n<span class=\"w\">        </span><span class=\"k\">if</span>\n<span class=\"w\">            </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$loop</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"k\">loop</span><span class=\"o\">-</span><span class=\"n\">start</span>\n<span class=\"w\">        </span><span class=\"n\">end</span>\n<span class=\"w\">    </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"cp\">$AnException</span>\n<span class=\"w\">        </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$log</span>\n<span class=\"w\">    </span><span class=\"n\">end</span>\n\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"cp\">$counter</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">lt_s</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">eqz</span>\n<span class=\"w\">    </span><span class=\"k\">if</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">        </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$log</span>\n<span class=\"w\">    </span><span class=\"n\">end</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>The problematic part is that the code after try/catch has to be executed only if the loop does not \"jump\". But if we swap the <code>call</code> instruction with a <code>return_call</code> instruction, the problem pretty much disappears, cause the jump skips the rest of the code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$foo</span><span class=\"o\">-</span><span class=\"n\">promise</span><span class=\"o\">-</span><span class=\"n\">callback</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"kr\">try</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"cp\">$counter</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">lt_s</span>\n<span class=\"w\">        </span><span class=\"k\">if</span>\n<span class=\"w\">            </span><span class=\"n\">return_call</span><span class=\"w\"> </span><span class=\"cp\">$loop</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"k\">loop</span><span class=\"o\">-</span><span class=\"n\">start</span>\n<span class=\"w\">        </span><span class=\"n\">end</span>\n<span class=\"w\">    </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"cp\">$AnException</span>\n<span class=\"w\">        </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$log</span>\n<span class=\"w\">    </span><span class=\"n\">end</span>\n\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$log</span>\n<span class=\"p\">)</span>\n</code></pre></div>",
        "id": 502798652,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1740871583
    },
    {
        "content": "<p>Hey a bit late but it <em>just</em> occurred to me that it's possible  you hadn't seen this the async work on P3:</p>\n<p>In-progress <code>wasmtime</code> fork you can try out here:<br>\n<a href=\"https://github.com/bytecodealliance/wasip3-prototyping\">https://github.com/bytecodealliance/wasip3-prototyping</a></p>\n<p>test programs here: you can build these and inspect how they work/what they import/export (callers, callees, etc):<br>\n<a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/main/crates/test-programs\">https://github.com/bytecodealliance/wasip3-prototyping/blob/main/crates/test-programs</a></p>\n<p>Reusable environ stuff is everywhere but this list is nice:<br>\n<a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/eef4b0037eca391234f5600881f17c71052b852d/crates/environ/src/component.rs#L143\">https://github.com/bytecodealliance/wasip3-prototyping/blob/eef4b0037eca391234f5600881f17c71052b852d/crates/environ/src/component.rs#L143</a></p>\n<p>Easy to read through impl:<br>\n<a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/eef4b0037eca391234f5600881f17c71052b852d/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs\">https://github.com/bytecodealliance/wasip3-prototyping/blob/eef4b0037eca391234f5600881f17c71052b852d/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs</a></p>\n<p>Specs and stuff:<br>\n<a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md</a><br>\n<a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md</a><br>\n<a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md#asynchronous-value-types\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md#asynchronous-value-types</a><br>\n<a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md#-async-built-ins\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md#-async-built-ins</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4480f7afcf7b3a89ee086472401189b24e3f1eac/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363063323862623138643337353431373231623365396464386236613535613733306263326166653633333163643635353063626632653765333230623635312f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping\" title=\"GitHub - bytecodealliance/wasip3-prototyping: Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development\">GitHub - bytecodealliance/wasip3-prototyping: Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/main/crates/test-programs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4480f7afcf7b3a89ee086472401189b24e3f1eac/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363063323862623138643337353431373231623365396464386236613535613733306263326166653633333163643635353063626632653765333230623635312f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/main/crates/test-programs\" title=\"wasip3-prototyping/crates/test-programs at main · bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/test-programs at main · bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/eef4b0037eca391234f5600881f17c71052b852d/crates/environ/src/component.rs#L143\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4480f7afcf7b3a89ee086472401189b24e3f1eac/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363063323862623138643337353431373231623365396464386236613535613733306263326166653633333163643635353063626632653765333230623635312f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/eef4b0037eca391234f5600881f17c71052b852d/crates/environ/src/component.rs#L143\" title=\"wasip3-prototyping/crates/environ/src/component.rs at eef4b0037eca391234f5600881f17c71052b852d · bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/environ/src/component.rs at eef4b0037eca391234f5600881f17c71052b852d · bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/eef4b0037eca391234f5600881f17c71052b852d/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4480f7afcf7b3a89ee086472401189b24e3f1eac/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363063323862623138643337353431373231623365396464386236613535613733306263326166653633333163643635353063626632653765333230623635312f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/blob/eef4b0037eca391234f5600881f17c71052b852d/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs\" title=\"wasip3-prototyping/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs at eef4b0037eca391234f5600881f17c71052b852d · bytecodealliance/wasip3-prototyping\">wasip3-prototyping/crates/wasmtime/src/runtime/component/concurrent/futures_and_streams.rs at eef4b0037eca391234f5600881f17c71052b852d · bytecodealliance/wasip3-prototyping</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1d1dbea2911c2d4b00a5ddefcbd0caae8175eaa7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383831366437333634313961336633313536633831653433636635393765643239356361313564366364333232663763343832346534613163303939303234312f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\" title=\"component-model/design/mvp/Async.md at main · WebAssembly/component-model\">component-model/design/mvp/Async.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1d1dbea2911c2d4b00a5ddefcbd0caae8175eaa7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383831366437333634313961336633313536633831653433636635393765643239356361313564366364333232663763343832346534613163303939303234312f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md\" title=\"component-model/design/mvp/CanonicalABI.md at main · WebAssembly/component-model\">component-model/design/mvp/CanonicalABI.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md#asynchronous-value-types\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1d1dbea2911c2d4b00a5ddefcbd0caae8175eaa7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383831366437333634313961336633313536633831653433636635393765643239356361313564366364333232663763343832346534613163303939303234312f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md#asynchronous-value-types\" title=\"component-model/design/mvp/Explainer.md at main · WebAssembly/component-model\">component-model/design/mvp/Explainer.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md#-async-built-ins\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1d1dbea2911c2d4b00a5ddefcbd0caae8175eaa7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383831366437333634313961336633313536633831653433636635393765643239356361313564366364333232663763343832346534613163303939303234312f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md#-async-built-ins\" title=\"component-model/design/mvp/Explainer.md at main · WebAssembly/component-model\">component-model/design/mvp/Explainer.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div>",
        "id": 502816690,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1740887242
    },
    {
        "content": "<p>If I'm understanding your work here, you're taking a bit of an emscripten asyncify style approach to async which is definitely great/is known to work, but I'd also love if JAWSM was WASI p3-forward as well!</p>",
        "id": 502816775,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1740887305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598440\">@Victor Adossi</span> thanks for the link! No, I haven't seen that yet, but it looks very interesting!</p>\n<p>Regarding your question - yeah, right now what I'm doing is a set of code transformations that convert async functions in a way it's possible to \"pause\" execution mid function. Asyncify does this by implementing stack unwinding. I do this with CPS transforms, ie. whenever I need a \"split point\" I return from the function and I allow to get back to the same code by calling a callback and supplying the previous state to the callback.</p>\n<p>That said, if I understand correctly, the WASIp3 proposal won't replace the stack-switching capabilities for me, and I still have to do it, but it could potentially allow me to implement running multiple Javascript instances in an async manner, thus lowering the memory and CPU requirements per-instance, especially if there is a lot of I/O code involved. And what I'm doing is a prerequesite considering this paragraph from the \"Async Explainer\":</p>\n<blockquote>\n<p>This switching may require the use of <a href=\"https://en.wikipedia.org/wiki/Fiber_(computer_science)\">fibers</a> or a <a href=\"https://en.wikipedia.org/wiki/Continuation-passing_style\">CPS transform</a>, but may also be avoided entirely when a component's producer toolchain is engineered to always return to an <a href=\"https://en.wikipedia.org/wiki/Event_loop\">event loop</a>.</p>\n</blockquote>\n<p>I'll definitely explore it more and thanks again for the links!</p>",
        "id": 502872476,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1740930324
    },
    {
        "content": "<p>Whew glad I suggested it -- surprised you hadn't seen it yet, but maybe we're not doing enough evangelism of our work just yet!</p>\n<p>Ah yes, so this is very much <em>not</em> stack-switching -- though that is planned post 0.3 -- it is definitely more for in-component non parallel async!</p>",
        "id": 503018268,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1741006287
    },
    {
        "content": "<blockquote>\n<p>surprised you hadn't seen it yet, but maybe we're not doing enough evangelism of our work just yet!</p>\n</blockquote>\n<p>Honestly, I have very little time for my side projects these days, so it might as well be because I didn't spend too much time on being up to date. I only read a bit about stack switching lately cause I was hoping to use it soon-ish, but other than that I mostly work with what I have to increase the percent of JS compatibility as much as possible.</p>",
        "id": 503040584,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1741012178
    },
    {
        "content": "<p>Another weekend, another small win! I implemented generator functions. I don't have more time to test it thoroughly, but the basics definitely work and it's based on the same transformations that I use for await, so I expect most of the language constructs to work correctly in conjunction with generators. As an example, the following script compiled to JAWSM outputs the same result as Node.js:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">gen</span><span class=\"p\">(){</span>\n<span class=\"w\">  </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'generator starts'</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">yield</span><span class=\"w\"> </span><span class=\"mf\">99</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'yield val:'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"p\">);</span>\n\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">yield</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">gen</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">it</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">(</span><span class=\"mf\">50</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"next\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">next</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"done\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">next</span><span class=\"p\">.</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n<span class=\"nx\">next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">it</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">(</span><span class=\"mf\">51</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"next\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">next</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"done\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">next</span><span class=\"p\">.</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n<span class=\"nx\">next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">it</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">(</span><span class=\"mf\">52</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"next\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">next</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"done\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">next</span><span class=\"p\">.</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n<span class=\"nx\">next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">it</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">(</span><span class=\"mf\">53</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"next\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">next</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"done\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">next</span><span class=\"p\">.</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n<span class=\"nx\">next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">it</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">(</span><span class=\"mf\">54</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"next\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">next</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"done\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">next</span><span class=\"p\">.</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Which validates loops and the return value. The next step is, unsurprisingly, to support async generators. Which I think shouldn't be hard, but I also haven't had enough time to fully think it through, so I guess we will see soon.</p>",
        "id": 504436443,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1741557813
    },
    {
        "content": "<p>I didn't have a lot of time to work on JAWSM in the recent month, but the last few days have brought quite a lot of progress in fundamentals and a beginning of built-ins support. When I started working on the project I hand-waved my way through a big part of fundamentals, like for example operators. I only had numbers working, and my goal was to primarily have a proof of concept, so it didn't make sense to dive too deep into details there. Now that I have a proof of concept of semantics and support for most basic types, I decided it's time to strengthen the fundamentals. Thus my efforts went to implement various abstract operations properly, like \"ToNumber\", \"ToPrimitive\", \"IsLessThan\", that are needed for a lot of higher level stuff, and for operators working properly. And then I went for <code>Array.prototype.*</code> implementation, and basic BigInt support.</p>\n<p>Long story short, most of the Array functions now work mostly properly, operators like <code>==</code>, <code>===</code>, <code>&lt;</code> etc. work much closer to the spec, and today I ended up with ~24.5% of passed tests in Test262 test suite, with proposals excluded (to be more exact 20582 out of 84416 tests now pass).</p>\n<p>While I know about some stuff that still doesn't work in the context of async/await and generators (most notably generators delegation, but also edge cases and small inconsistencies), I think for the next month or two I'll continue the route of \"smaller\" stuff, like builtins support, as I got kind of tired of the whole code transformation thing that I use for generators and async/await. Another reason is that I would like to get to a point where the project is usable for at least code on a simpler side, and working builtins and operators are much more common than generator delegation. And yet another reason is that I wanted to work on something simpler and less mentally taxing. For example I took a big portion of Array methods implementation from the awesome <a href=\"https://github.com/zloirock/core-js\">https://github.com/zloirock/core-js</a> project (which I attributed in my code, so it's clear where it comes from), which definitely made it much simpler to move forward. I had to implement some of the stuff myself, cause core-js delegates to native functions from time to time, but it's still on a much simpler level of complexity than figuring out the proper way to transform the WASM AST.</p>\n<p>Seeing a big progress like that in the spec coverage (I jumped from ~18% to 24.5% in less than a week), I'm pretty sure I'll be able to hit 50-60% of coverage in the next month or two. Which of course, doesn't mean linear growth all the way to 100%. Like, I wouldn't be surprised if I can hit 50% of Test262 coverage in about half a year since the project started (I'm now at ~5.5months), and have the other 50% take a year more, at least, given I only work on the project in my free time.</p>\n<p>There are a few reasons for that. The most obvious one is that implementing a single function like <code>Array.prototype.slice</code> can easily give a boost of a few hundred passing tests, but fixing the last 20 or 30 edge cases for the function can take way more time than implementing it in the first place. Then there are bugs and inconsistencies that I know will be hard to implement, like for example generators delegation. I think it can easily take weeks to implement, but not change the number of passing tests meaningfully. And then there is a very long tail of small inconsistencies that are pretty much impossible to fix without going through each of the failed tests.</p>\n<p>One more thing that I would like to add is that at some point I will desperately need to invest in the tooling. I hinted at the experience of using a 10k lines <code>wasm!</code> macro before, but there is more stuff like that - for example right now all of the stuff implemented in JavaScript (like most of the <code>Array.prototype</code>) is in <a href=\"https://github.com/drogus/jawsm/blob/6b3dd22479e7bb3cec102b42d2c2c44b0a9b8666/src/js/prepend.js\">one big file</a> that is simply prepended to the script you want to compile.</p>\n<p>That's it for now and I'm hoping to get back with more good news soon!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/zloirock/core-js\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d82ac9731049730365fdcfdda9ce19095f3e431f/68747470733a2f2f7265706f7369746f72792d696d616765732e67697468756275736572636f6e74656e742e636f6d2f31313438313333382f39663931313737382d626439312d343838632d616333302d633463623036316231316331&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/zloirock/core-js\" title=\"GitHub - zloirock/core-js: Standard Library\">GitHub - zloirock/core-js: Standard Library</a></div><div class=\"message_embed_description\">Standard Library. Contribute to zloirock/core-js development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/drogus/jawsm/blob/6b3dd22479e7bb3cec102b42d2c2c44b0a9b8666/src/js/prepend.js\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2173b1d49f2c0d7fdffc66d20fa48b3063620ce8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323435356562303866353062396434326334393565623163643931306536643437316565613134313336633239613361303035643364353735333731333836642f64726f6775732f6a6177736d&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/drogus/jawsm/blob/6b3dd22479e7bb3cec102b42d2c2c44b0a9b8666/src/js/prepend.js\" title=\"jawsm/src/js/prepend.js at 6b3dd22479e7bb3cec102b42d2c2c44b0a9b8666 · drogus/jawsm\">jawsm/src/js/prepend.js at 6b3dd22479e7bb3cec102b42d2c2c44b0a9b8666 · drogus/jawsm</a></div><div class=\"message_embed_description\">JavaScript to WASM compiler. Contribute to drogus/jawsm development by creating an account on GitHub.</div></div></div>",
        "id": 510474083,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1743939042
    }
]