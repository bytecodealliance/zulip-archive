[
    {
        "content": "<p>I'm implementing the time component of wasip2 for a server which will host guests compiled with <code>wasm32-wasip2</code>. I can control the minimum supported rust version, but I need to not change it often: Many guests may never re-compile.</p>\n<p>So I implemented <code>wasi:clocks@0.2.5</code> but the test guests fail to link with <code>unknown import: wasi:clocks/monotonic-clock@0.2.3#now has not been defined)</code>.</p>\n<p>Of course, if I change the wasi wits to <code>wasi:clocks@0.2.3</code> it works, but I have some users back at <code>0.2.0</code> and ostensibly someday <code>wasm32-wasip2</code> will imply <code>wasi:clocks@0.2.5</code> or later.</p>\n<p>How can I set up my host such that any guest looking for <code>wasi:clocks@0.2.0</code> _or later_ up to <code>wasi:clocks@0.2.5</code> can link?</p>",
        "id": 513979732,
        "sender_full_name": "Kenny",
        "timestamp": 1745450520
    },
    {
        "content": "<p>wasmtime does semver resolution automatically</p>",
        "id": 513980001,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745450681
    },
    {
        "content": "<p>so the unknown import error you got shouldnt happen</p>",
        "id": 513980026,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745450704
    },
    {
        "content": "<p>lets see if we can resolve that - can you make a minimal reproduction?</p>",
        "id": 513980035,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745450716
    },
    {
        "content": "<p>(by automatically, i mean that wit contains a version number and wasmtime will satisfy it with anything semver compatible, see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/environ/src/component/names.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/environ/src/component/names.rs</a> for the implementation which has detailed comments and tests)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/environ/src/component/names.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/84fe659de4cd2561ea2f81cc2aa071fce9d2df92/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393335643563616437336334663236343965626638363564353366343332636233656535326562623763373061646662383431396563626232343137323034652f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/environ/src/component/names.rs\" title=\"wasmtime/crates/environ/src/component/names.rs at main 路 bytecodealliance/wasmtime\">wasmtime/crates/environ/src/component/names.rs at main 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 513980246,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745450854
    },
    {
        "content": "<p>I'll need to extract out to a whole separate application. Let me see if I can get it together for you. Do you want a zip of a complete project?</p>\n<p>Fwiw, I'm not using the <code>wasmtime</code> binary. I'm using <code>wasmtime::component::Linker</code> and friends directly, and hosting the engine and all myself.</p>",
        "id": 513980344,
        "sender_full_name": "Kenny",
        "timestamp": 1745450919
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/environ/src/component/names.rs#L102-L104\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/environ/src/component/names.rs#L102-L104</a></p>\n<p>It seems like it is \"supposed\" to match a demand for 0.2.3 to 0.2.5. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/environ/src/component/names.rs#L102-L104\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/84fe659de4cd2561ea2f81cc2aa071fce9d2df92/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393335643563616437336334663236343965626638363564353366343332636233656535326562623763373061646662383431396563626232343137323034652f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/environ/src/component/names.rs#L102-L104\" title=\"wasmtime/crates/environ/src/component/names.rs at main 路 bytecodealliance/wasmtime\">wasmtime/crates/environ/src/component/names.rs at main 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 513980515,
        "sender_full_name": "Kenny",
        "timestamp": 1745451036
    },
    {
        "content": "<p>Oh, I wonder if <code>define_unknown_imports_as_traps</code> is disagreeing here.</p>",
        "id": 513980681,
        "sender_full_name": "Kenny",
        "timestamp": 1745451145
    },
    {
        "content": "<p>to do a partial wasip2 implementation, I have to <code>define_unknown_imports_as_traps</code> and <code>allow_shadowing</code> on the linker.</p>",
        "id": 513980719,
        "sender_full_name": "Kenny",
        "timestamp": 1745451172
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">item_name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">bail</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"unknown import: `{fully_qualified_name}` has not been defined\"</span><span class=\"p\">)</span>\n<span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I'm pretty sure this is the implementation it is using, which comes from <code>define_unknown_imports_as_traps</code></p>",
        "id": 513980848,
        "sender_full_name": "Kenny",
        "timestamp": 1745451262
    },
    {
        "content": "<p>so it defines an exact match, which I'm sure the name map prefers to a squishy match</p>",
        "id": 513980913,
        "sender_full_name": "Kenny",
        "timestamp": 1745451327
    },
    {
        "content": "<p>ah yeah I wouldn't be surprised if this was a bug in <code>define_unknown_imports_as_traps</code>, good catch!</p>",
        "id": 513981003,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1745451388
    },
    {
        "content": "<p>mind filing an issue for this?</p>",
        "id": 513981021,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1745451401
    },
    {
        "content": "<p>thanks, I hadn't thought of <code>define_unknown_imports_as_traps</code>!</p>",
        "id": 513981757,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745451860
    },
    {
        "content": "<p>I am happy to file an issue, but I do need to find a workaround. It's in the way of my company's product <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Add new host interfaces for features</span>\n<span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">cache_scalar</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"n\">functions</span><span class=\"p\">::</span><span class=\"n\">topic</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Add partial wasm32-wasip2 support</span>\n<span class=\"n\">functionswasi</span><span class=\"p\">::</span><span class=\"n\">time</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">HostContext</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Add all the other wasm32-wasip2 definitions as traps so the experience is</span>\n<span class=\"c1\">// similar to wasm32-unknown-unknown, but with std::time::Instant::now() support.</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">define_unknown_imports_as_traps</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>This is what I want to do, but without shadowing allowed, <code>~~define_unknown_imports_as_traps~~</code> errors:</p>\n<blockquote>\n<p>map entry <code>momento:functions/cache-scalar@1.0.0</code> defined twice</p>\n</blockquote>\n<p>To work around that issue, I put <code>define_unknown_imports_as_traps</code> and <code>allow_shadowing</code> up front. But I certainly don't want to allow shadowing, and I super don't want to insert bogus trap definitions for interfaces I know I support.</p>\n<p>Is there a better workaround, or a pattern that works that I'm missing?</p>",
        "id": 513982152,
        "sender_full_name": "Kenny",
        "timestamp": 1745452131
    },
    {
        "content": "<p>can you get rid of define_unknown_imports_as_traps completely? what do you need it for?</p>",
        "id": 513982197,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745452169
    },
    {
        "content": "<p>I do not have all of wasi. If I try to link a guest, it has a bunch of wasi imports that are missing. Environment, stdin, and so on.</p>",
        "id": 513982301,
        "sender_full_name": "Kenny",
        "timestamp": 1745452235
    },
    {
        "content": "<p>ok. those can be very straightforward to define empty impls of</p>",
        "id": 513982329,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745452257
    },
    {
        "content": "<p>heres a bunch of them defined in here as the most trivial thing i could come up with <a href=\"https://github.com/pchickey/toy-external-events/tree/main/embedding/src/bindings\">https://github.com/pchickey/toy-external-events/tree/main/embedding/src/bindings</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/pchickey/toy-external-events/tree/main/embedding/src/bindings\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/64756da33ce8843987d6f7fee16dbc825fc0b19e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396630333738343836303433396135366361333232623337363435613663393466656565343363653166383266336466613965616131336139343934393437662f70636869636b65792f746f792d65787465726e616c2d6576656e7473&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/pchickey/toy-external-events/tree/main/embedding/src/bindings\" title=\"toy-external-events/embedding/src/bindings at main 路 pchickey/toy-external-events\">toy-external-events/embedding/src/bindings at main 路 pchickey/toy-external-events</a></div><div class=\"message_embed_description\">play around with integrating wasmtime-wasi-io with an external event loop - pchickey/toy-external-events</div></div></div>",
        "id": 513982383,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745452312
    },
    {
        "content": "<p>(that repo is basically \"what if you need to write your own wasi impl in no_std\", not really taken to any sort of conclusion, just a template for how some stuff interacts)</p>",
        "id": 513982454,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745452348
    },
    {
        "content": "<p>Oh hey, nice. I think I'd be even simpler, with all the bodies being something along the lines of <code>Err(wasmtime::Error::msg(\"unsupported, some helpful message about who to contact\"))</code></p>",
        "id": 513982767,
        "sender_full_name": "Kenny",
        "timestamp": 1745452566
    },
    {
        "content": "<p>yes that will trap. for things like environment you may as well just return the empty environment</p>",
        "id": 513982804,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745452595
    },
    {
        "content": "<p>for stdin i defined a stream which never succeeds at reading, always just waits.</p>",
        "id": 513982847,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745452631
    },
    {
        "content": "<p>looks like with wasip2 you can link with these interfaces done:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">time</span>\n<span class=\"n\">environment</span>\n<span class=\"n\">error</span>\n<span class=\"n\">exit</span>\n<span class=\"n\">filesystem_preopens</span>\n<span class=\"n\">filesystem_types</span>\n<span class=\"n\">stderr</span>\n<span class=\"n\">stdin</span>\n<span class=\"n\">stdout</span>\n<span class=\"n\">streams</span>\n</code></pre></div>\n<p>what a relief. Your repo was helpful too, with the <code>deps</code> folder example!</p>",
        "id": 513991813,
        "sender_full_name": "Kenny",
        "timestamp": 1745458322
    },
    {
        "content": "<p>I wrote up a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10663#issuecomment-2828866576\">long response</a> on the issue (sorry for the wall) but I'm curious if others have thoughts on how best to proceed as I'm unsure myself</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/10663#issuecomment-2828866576\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/021b761aeb5c39288e4320eeb5e8968522a4494f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303536663133663330306535393734643333313533343633363966383863303465356333333039366439633538346236366438666264623966643563656239372f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f3130363633&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/10663#issuecomment-2828866576\" title=\"[Linker] `define_unknown_imports_as_traps` is hard to use 路 Issue #10663 路 bytecodealliance/wasmtime\">[Linker] `define_unknown_imports_as_traps` is hard to use 路 Issue #10663 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Test Case Any rust at all compiled with --target wasm32-wasip2 Steps to Reproduce Set up the host linker: fn link(linker: &amp;mut Linker) { my_own_interface::add_to_linker(linker, |s| s)?; only_wasi_t...</div></div></div>",
        "id": 514229669,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1745529062
    },
    {
        "content": "<p>You guys are amazing maintainers. Thank you <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> </p>\n<p>I wrote  in the issue, but I'd love the unknown imports trap behavior to be more granular - so I can allow <code>time</code> and other unsupported wasi interfaces to evolve, but carefully manage my own interfaces. This way users can know at link time whether or not their program will run (modulo std stuff, which was an issue on wasm32-unknown-unknown anyway)</p>",
        "id": 514425773,
        "sender_full_name": "Kenny",
        "timestamp": 1745600908
    },
    {
        "content": "<p>agreed that users knowing at link time whether their programs will run is a huge goal for the component ecosystem. Unfortunately, std and not wanting to proliferate target triples makes that tricky, because the whole model of std and target triples was designed for a different sort of idea for how programs interface with the outside world (i.e. via syscalls). components are deliberately something much closer to an ESM module than a posix program</p>",
        "id": 514429546,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745602191
    },
    {
        "content": "<p>so we're trying to find the balance where toolchains work as well as possible, but users and platform creators get those link-time validation properties</p>",
        "id": 514429673,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745602222
    },
    {
        "content": "<p>in general one of the things i hope i can demystify or make easier is to just redefine wasi impls as appropriate for any given platform.</p>",
        "id": 514429988,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745602330
    },
    {
        "content": "<p>I don't want wasi's implementation to feel mysterious or special, theyre \"just\" import functions and resources like anything else. unfortunately, wasi-io is kinda more than that, since its the scheduler... thats being resolved in component model async and wasip3.</p>",
        "id": 514430075,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1745602366
    },
    {
        "content": "<p>Yeah, I'm sensitive to these goals. I think having more granularity on allowlisting interfaces to be fast-and-loose rather than setting that linker-wide would be a nice compromise.</p>\n<p>For wasi itself, and I guess interface types more broadly, this is awesome infrastructure. Having the ability to hook into a guest's <code>std</code> is an incredible achievement. When I first approached wasi, it seemed magical and opaque. It was easier to write my own interfaces. But as I gained comfort with that and with Resources, and as I read some wasi pal code in std, I understood it's all quite straightforward.</p>\n<p>That initial mystery, and interface type mystery generally, I think would be massively helped by making some small changes to what <code>bindgen!</code> does. Have you used <code>prost</code>? It generates tons of code like <code>bindgen!</code>, but it spits  it out where you want - by default, to <code>OUT_DIR</code>. You can navigate to source, read the code, step with a debugger, etc., and you can even check in the generated source if you desire. I'd love to be able to use <code>bindgen!</code> in <a href=\"http://build.rs\">build.rs</a> to get friendlier rs files!</p>\n<p>I'm looking forward to trying out wasip3 <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 514437067,
        "sender_full_name": "Kenny",
        "timestamp": 1745604917
    },
    {
        "content": "<p>That's a good point about having a per-instance \"ok everything in this instance unknown traps\", I like that suggestion as well, thanks!</p>\n<blockquote>\n<p>You can navigate to source, read the code, step with a debugger, etc., and you can even check in the generated source if you desire. I'd love to be able to use <code>bindgen!</code> in <a href=\"http://build.rs/\">build.rs</a> to get friendlier rs files!</p>\n</blockquote>\n<p>There's some documentation of doing this <a href=\"https://docs.rs/wit-bindgen/latest/wit_bindgen/macro.generate.html#exploring-generated-bindings\">here</a> and <a href=\"https://docs.rs/wit-bindgen/latest/wit_bindgen/macro.generate.html#debugging-output-to-generate\">here</a>, although I'm not opposed to adding more various options and I agree the defaults may not be the best</p>",
        "id": 514445213,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1745608069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"901677\">Kenny</span> <a href=\"#narrow/stream/206238-general/topic/Partial.20wasip2/near/514437067\">said</a>:</p>\n<blockquote>\n<p>That initial mystery, and interface type mystery generally, I think would be massively helped by making some small changes to what <code>bindgen!</code> does. Have you used <code>prost</code>? It generates tons of code like <code>bindgen!</code>, but it spits  it out where you want - by default, to <code>OUT_DIR</code>. You can navigate to source, read the code, step with a debugger, etc., and you can even check in the generated source if you desire. I'd love to be able to use <code>bindgen!</code> in <a href=\"http://build.rs\">build.rs</a> to get friendlier rs files!</p>\n</blockquote>\n<p>There exists a poorly documented environment variable (WIT_BINDGEN_DEBUG from memory) which creates files in the build folder you can debug into. </p>\n<p>cargo-component creates sibling files you can inspect with your IDE, and while I don't like that the generator is often outdated and important configuration options are missing, this part appealed to me.</p>",
        "id": 514511956,
        "sender_full_name": "Christof Petig",
        "timestamp": 1745653492
    }
]