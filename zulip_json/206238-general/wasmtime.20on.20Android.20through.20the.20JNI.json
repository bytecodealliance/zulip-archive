[
    {
        "content": "<p>Hi! I'm trying to use the wasmtime c/c++ api on Android through the JNI. I downloaded the source files and imported them in my project. I adapted <a href=\"https://docs.wasmtime.dev/examples-cpp-hello-world.html\">this example</a> to read a file from the \"Download\" folder. But when I run the app, I get the following error :</p>\n<blockquote>\n<p>: &amp;&amp; /Users/.../Library/Android/sdk/ndk/27.0.12077973/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang++ --target=aarch64-none-linux-android26 --sysroot=/Users/.../Library/Android/sdk/ndk/27.0.12077973/toolchains/llvm/prebuilt/darwin-x86_64/sysroot -fPIC -g -DANDROID -fdata-sections -ffunction-sections -funwind-tables -fstack-protector-strong -no-canonical-prefixes -D_FORTIFY_SOURCE=2 -Wformat -Werror=format-security   -fno-limit-debug-info  -static-libstdc++ -Wl,--build-id=sha1 -Wl,--no-rosegment -Wl,--no-undefined-version -Wl,--fatal-warnings -Wl,--no-undefined -Qunused-arguments -shared -Wl,-soname,<a href=\"http://libembeddedwasmtest.so\">libembeddedwasmtest.so</a> -o /Users/.../Repos/EmbeddedWasmTest/app/build/intermediates/cxx/Debug/w6f68232/obj/arm64-v8a/libembeddedwasmtest.so CMakeFiles/embeddedwasmtest.dir/native-lib.cpp.o  -landroid  -llog  /Users/.../Library/Android/sdk/ndk/27.0.12077973/toolchains/llvm/prebuilt/darwin-x86_64/sysroot/usr/lib/aarch64-linux-android/26/libandroid.so  /Users/.../Library/Android/sdk/ndk/27.0.12077973/toolchains/llvm/prebuilt/darwin-x86_64/sysroot/usr/lib/aarch64-linux-android/26/liblog.so  -latomic -lm &amp;&amp; :</p>\n<p>ld.lld: error: undefined symbol: wasm_engine_new</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>referenced by engine.hh:34 (/Users/.../Repos/EmbeddedWasmTest/app/src/main/cpp/wasmtime/include/wasmtime/engine.hh:34)<br>\n              CMakeFiles/embeddedwasmtest.dir/native-lib.cpp.o:(wasmtime::Engine::Engine())</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>Any ideas how I can fix that?</p>",
        "id": 538576573,
        "sender_full_name": "Jean",
        "timestamp": 1757486196
    },
    {
        "content": "<p>Well turned out I needed to link the .a and .o library files with CMakeLists.txt. Now I get an error saying those files are not compatible : \"[...].o is incompatible with armelf_linux_eabi\". I guess I need to compile wasmtime with the correct target myself then?</p>",
        "id": 538587584,
        "sender_full_name": "Jean",
        "timestamp": 1757490755
    },
    {
        "content": "<p>Which downloadable artifact are you using from Wasmtime? To confirm are you using <a href=\"https://github.com/bytecodealliance/wasmtime/releases/download/v36.0.2/wasmtime-v36.0.2-aarch64-android-c-api.tar.xz\">https://github.com/bytecodealliance/wasmtime/releases/download/v36.0.2/wasmtime-v36.0.2-aarch64-android-c-api.tar.xz</a>?</p>\n<p>Otherwise it's worth noting that Android for Wasmtime is a Tier 3 platform as no current maintainer has expertise on the platform and we don't have any other maintainer who has stepped up to maintain the target. That means that support is best-effort right now and while we're happy to help debug what we can and merge PRs/fixes it's worth setting expectations that it's unlikely everything works out of the box (or is thoroughly documented as other platforms are)</p>",
        "id": 538670669,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757515414
    },
    {
        "content": "<p>Yes, I'm using the aarch64-android c api. I do have experience with regular Android development but not so much with the native side. I'll see what I can do, maybe a PR some day!</p>",
        "id": 538714126,
        "sender_full_name": "Jean",
        "timestamp": 1757528392
    },
    {
        "content": "<p>ok yeah in that case I don't recognize that linker error message myself, but that does sound like the compilation flags in Rust are wrong and/or missing something? As to what though I'm not sure :(</p>",
        "id": 538714989,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757528737
    },
    {
        "content": "<p>and yeah we're more than happy to have PRs and/or suggestions here of how to improve things</p>",
        "id": 538715023,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757528748
    },
    {
        "content": "<p>But I noticed that the header files look duplicated inside the downloadable : wasmtime/include and wasmtime/min. I didn't find explanations on what's the difference between the two, do you know where I can learn more?</p>",
        "id": 538726885,
        "sender_full_name": "Jean",
        "timestamp": 1757533255
    },
    {
        "content": "<p>They're sort of like different sysroots, the \"min\" folder is built with almost all features disabled in the C API. The headers are exactly the same except for <code>conf.h</code> will will be different between the two. You probably want to just ignore the <code>min</code> folder</p>",
        "id": 538727625,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757533520
    },
    {
        "content": "<p>Some follow up on the topic : I get the app to compile but it still fails at runtime. I asked for help on SO <a href=\"https://stackoverflow.com/questions/79761309/link-third-party-c-library-through-the-jni\">https://stackoverflow.com/questions/79761309/link-third-party-c-library-through-the-jni</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://stackoverflow.com/questions/79761309/link-third-party-c-library-through-the-jni\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/925df65c212e80f19e81fcac1fb25e660797c3ce/68747470733a2f2f63646e2e737374617469632e6e65742f53697465732f737461636b6f766572666c6f772f496d672f6170706c652d746f7563682d69636f6e40322e706e673f763d373364373961383962646564&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://stackoverflow.com/questions/79761309/link-third-party-c-library-through-the-jni\" title=\"Link third party C library through the JNI\">Link third party C library through the JNI</a></div><div class=\"message_embed_description\">I'm trying to add the wasmtime c-api library to my app. But I'm getting the following error at runtime:\n\njava.lang.UnsatisfiedLinkError: dlopen failed: library &quot;/Users/tufekoi/Repos/EmbeddedWa...</div></div></div>",
        "id": 538741765,
        "sender_full_name": "Jean",
        "timestamp": 1757540125
    },
    {
        "content": "<p>I think I figured it out! It was mainly due to a wrong configuration of my CMakeLists.txt file. But I had to modify the header files from wasmtime though. Android Studio complained it couldn't resolve the <code>include</code> statements to relative files using <code>&lt;path/to/header.h&gt;</code>. I had to replace them with <code>\"path/to/header.h\"</code>. Several path were wrong too. Do you know how I can fix that in the wasmtime project? Then I can create a PR and maybe a documentation for android use.</p>",
        "id": 539003533,
        "sender_full_name": "Jean",
        "timestamp": 1757663724
    },
    {
        "content": "<p>In my experience this typically means a missing <code>-I</code> or compiler flag,  but I'm also no C/C++ expert. I'm not sure why things work in the Wasmtime repo, for example, but don't work in your example. If you'd like feel free to send a PR and we can discuss further</p>",
        "id": 539082295,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757688177
    },
    {
        "content": "<p>I managed to complete the POC I wanted. I ended up creating an intermediary Rust library that compiles down to a C static library that I can include in my app. The Rust lib set up has only one function that takes a byte array from a wasm file, instanciate it based on a required wit, runs it and return a result.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[unsafe(no_mangle)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">execute_wasm</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_len</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">slice</span><span class=\"p\">::</span><span class=\"n\">from_raw_parts</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_len</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_binary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"failed to compile component\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ComponentState</span><span class=\"w\"> </span><span class=\"p\">{});</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Root</span><span class=\"p\">::</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"failed to instantiate component\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">bindings</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">custom_wasi_component_one_add</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call_add</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"failed to call `add` function\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>On the android side, I only need to call that function from the JNI</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"n\">JNIEXPORT</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">JNICALL</span>\n<span class=\"n\">Java_no_jean_embeddedwasmtest_MainActivity_executeWasm</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">JNIEnv</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">env</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">jobject</span><span class=\"w\"> </span><span class=\"cm\">/* this */</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">jbyteArray</span><span class=\"w\"> </span><span class=\"n\">wasmBytesArray</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"n\">jsize</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"p\">-&gt;</span><span class=\"nc\">GetArrayLength</span><span class=\"p\">(</span><span class=\"n\">wasmBytesArray</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">jbyte</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"p\">-&gt;</span><span class=\"nc\">GetByteArrayElements</span><span class=\"p\">(</span><span class=\"n\">wasmBytesArray</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nullptr</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">execute_wasm</span><span class=\"p\">(</span><span class=\"n\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">uint8_t</span><span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">env</span><span class=\"p\">-&gt;</span><span class=\"nc\">ReleaseByteArrayElements</span><span class=\"p\">(</span><span class=\"n\">wasmBytesArray</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">JNI_ABORT</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">LOGD</span><span class=\"p\">(</span><span class=\"s\">\"All done!\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And it works!</p>\n<p>I would I've like to be able to use something similar to <code>bindgen</code> directly in c++, so I wouldn't need the rust library. I also assumed it was ok for the host to require components to implement a certain wit (does one say \"implement a wit\"?) Other thread regarding  I started regarding that topic <a class=\"stream-topic\" data-stream-id=\"206238\" href=\"/#narrow/channel/206238-general/topic/Consuming.20wasi.20components.20with.20the.20wasmtime.20c.20api/with/539260342\">#general &gt; Consuming wasi components with the wasmtime c api</a></p>",
        "id": 539276003,
        "sender_full_name": "Jean",
        "timestamp": 1757774194
    },
    {
        "content": "<p>I kept experimenting a bit : I compiled my custom rust library with ios (simulator) as a target and made a quick test app that open a wasi component file and run it from swift. The interop with C is actually even easier than on android. <br>\nI guess that mid-layer library is actually a good thing, now I can quite easily run wasi components from different platforms with a single codebase using the wasmtime library.</p>",
        "id": 540540715,
        "sender_full_name": "Jean",
        "timestamp": 1758321169
    },
    {
        "content": "<p>Quick question -- given the <a href=\"https://stackoverflow.com/questions/5054732/is-it-prohibited-using-of-jitjust-in-time-compiled-code-in-ios-app-for-appstor\">\"no JITs on iOS\"</a> thing, are you planning on using <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/pulley/README.md\">pulley</a> to run the component?</p>\n<p>Happy to be wrong but I wonder if it's a thing that might pass in simulator but not on-device?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://stackoverflow.com/questions/5054732/is-it-prohibited-using-of-jitjust-in-time-compiled-code-in-ios-app-for-appstor\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/925df65c212e80f19e81fcac1fb25e660797c3ce/68747470733a2f2f63646e2e737374617469632e6e65742f53697465732f737461636b6f766572666c6f772f496d672f6170706c652d746f7563682d69636f6e40322e706e673f763d373364373961383962646564&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://stackoverflow.com/questions/5054732/is-it-prohibited-using-of-jitjust-in-time-compiled-code-in-ios-app-for-appstor\" title=\"is it prohibited using of JIT(just-in-time) compiled code in iOS app for AppStore?\">is it prohibited using of JIT(just-in-time) compiled code in iOS app for AppStore?</a></div><div class=\"message_embed_description\">I heard that JIT compiled code is not allowed in iOS AppStore because placing executable code in heap is prohibited. It that right? Or just a rumor?</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/pulley/README.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/166ddc3b8b844a4c6fd715eda31e3729c8ef204d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636532623139646235313766373336366164646337313466396335653338373437636537643865396162376166383062643131326664656465303337353033332f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/pulley/README.md\" title=\"wasmtime/pulley/README.md at main · bytecodealliance/wasmtime\">wasmtime/pulley/README.md at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 541122626,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1758673614
    },
    {
        "content": "<p>Well I didn't even know about that issue,, that SO thread refers to publication rules I think. Meaning it should run on-device the same way it runs on the simulator. But Apple seems to reject apps executing code that is not statically linked at the review time. That thread is from 2011 so maybe the rules are different now? I wouldn't be surprised if it's not, but it could be possible Apple agrees to let third-party wasm file be executed. One can hope!</p>",
        "id": 541319746,
        "sender_full_name": "Jean",
        "timestamp": 1758743497
    },
    {
        "content": "<p>The rules are still the same AFAIK.</p>",
        "id": 541324688,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1758745150
    },
    {
        "content": "<p>This topic was moved to <a class=\"stream-topic\" data-stream-id=\"217126\" href=\"/#narrow/channel/217126-wasmtime/topic/wasmtime.20on.20Android.20through.20the.20JNI/with/542000703\">#wasmtime &gt; wasmtime on Android through the JNI</a> by <span class=\"user-mention silent\" data-user-id=\"234973\">Till Schneidereit</span>.</p>",
        "id": 542000705,
        "sender_full_name": "Notification Bot",
        "timestamp": 1759142377
    }
]