[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477345\">Jeff Charles</span> has marked this topic as resolved.</p>",
        "id": 526126598,
        "sender_full_name": "Notification Bot",
        "timestamp": 1751045083
    },
    {
        "content": "<p>My minimum viable working (cli for) component-init is in a branch here <a href=\"https://github.com/dicej/component-init/pull/7\">https://github.com/dicej/component-init/pull/7</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/component-init/pull/7\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/07e59b34ecb9217e06238efbdef14fda41a88312/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343130393461636565366136306363303031376135393363633434306564343236613432353766333835376564346162333933656636316366666531383235342f646963656a2f636f6d706f6e656e742d696e69742f70756c6c2f37&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/component-init/pull/7\" title=\"Add crates for wasmtime integration and a cli interface by pchickey · Pull Request #7 · dicej/component-init\">Add crates for wasmtime integration and a cli interface by pchickey · Pull Request #7 · dicej/component-init</a></div><div class=\"message_embed_description\">This is a pretty big PR towards making component-init usable standalone:\n\nIntroduce a new crate component-init-wasmtime that provides a wasmtime-based Invoker. Right now this Invoker only supports ...</div></div></div>",
        "id": 526484554,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751316509
    },
    {
        "content": "<p>and here is an example of using it: <a href=\"https://github.com/pchickey/jaq-http/blob/main/src/main.rs#L76\">https://github.com/pchickey/jaq-http/blob/main/src/main.rs#L76</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/pchickey/jaq-http/blob/main/src/main.rs#L76\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/64624e80e9ea10f8e3b2e8eaba762288c072e924/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616133333538333831376333383838303137666361323063656532306239656264623333363434306263666138306538383736383032363664313366323363372f70636869636b65792f6a61712d68747470&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/pchickey/jaq-http/blob/main/src/main.rs#L76\" title=\"jaq-http/src/main.rs at main · pchickey/jaq-http\">jaq-http/src/main.rs at main · pchickey/jaq-http</a></div><div class=\"message_embed_description\">Contribute to pchickey/jaq-http development by creating an account on GitHub.</div></div></div>",
        "id": 526484657,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751316550
    },
    {
        "content": "<p>i benchmarked using that version of that (very basic) component vs the prior commit which doesnt use component-init, and got 5x the RPS with the init version</p>",
        "id": 526484750,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751316590
    },
    {
        "content": "<p>when Joel gets time to review it, we can merge and publish to <a href=\"http://crates.io\">crates.io</a>. I'm going to look into folding it into wizer next, because wizer has already designed and implemented (for preview 1 at least) a handful of things that component-init hasnt wrt allowing use of WASI</p>",
        "id": 526484919,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751316666
    },
    {
        "content": "<p>componentize-py has its own way of stubbing out wasi while in component-init that i havent fully understood yet</p>",
        "id": 526485014,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751316709
    },
    {
        "content": "<p>The callback you pass to <code>component_init::initialize</code> is allowed to add whatever host functions it wants to the <code>wasmtime::component::Linker</code> (assuming you're using Wasmtime), including WASI or even custom host functions, which makes them available during pre-init.  Note that if the guest <em>does</em> use WASI, it is also responsible for <a href=\"https://github.com/bytecodealliance/componentize-py/blob/31c9e66104bac2266417494eb15bcf5e813b66e5/runtime/src/lib.rs#L405-L424\">resetting the adapter and <code>wasi-libc</code> state</a> with regards to stdio handles.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/componentize-py/blob/31c9e66104bac2266417494eb15bcf5e813b66e5/runtime/src/lib.rs#L405-L424\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b72a32bb20df294276a221160a87333bc12f4bad/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316339386333376233643861626164393866613030653762376262613535653635356333363932373130633738373266316535633537353537313630633461642f62797465636f6465616c6c69616e63652f636f6d706f6e656e74697a652d7079&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/componentize-py/blob/31c9e66104bac2266417494eb15bcf5e813b66e5/runtime/src/lib.rs#L405-L424\" title=\"componentize-py/runtime/src/lib.rs at 31c9e66104bac2266417494eb15bcf5e813b66e5 · bytecodealliance/componentize-py\">componentize-py/runtime/src/lib.rs at 31c9e66104bac2266417494eb15bcf5e813b66e5 · bytecodealliance/componentize-py</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/componentize-py development by creating an account on GitHub.</div></div></div>",
        "id": 526488332,
        "sender_full_name": "Joel Dice",
        "timestamp": 1751318348
    },
    {
        "content": "<p>componentize-py <em>also</em> supports stubbing WASI so that the resulting component has no WASI imports, but that's somewhat orthogonal to how it uses <code>component-init</code>.</p>",
        "id": 526488508,
        "sender_full_name": "Joel Dice",
        "timestamp": 1751318424
    },
    {
        "content": "<p>(BTW, I'm reviewing the PR now)</p>",
        "id": 526488559,
        "sender_full_name": "Joel Dice",
        "timestamp": 1751318453
    },
    {
        "content": "<p>thanks Joel!</p>",
        "id": 526491670,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751320279
    },
    {
        "content": "<p>I should make a crate, kinda like <code>wasi</code>, that provides the component-init wat glue as a library, and hooks it up to those wasi-libc and adapter bits</p>",
        "id": 526491810,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751320358
    },
    {
        "content": "<p>what should i call it</p>",
        "id": 526491859,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751320378
    },
    {
        "content": "<p>Maybe <code>component-init-rt</code> or something?  I can't think of anything else.</p>",
        "id": 526492975,
        "sender_full_name": "Joel Dice",
        "timestamp": 1751321060
    },
    {
        "content": "<p>id like to make a proc-macro crate, itll need an -rt helper crate in the background i think</p>",
        "id": 526493998,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751321669
    },
    {
        "content": "<p>also i should probably make it work like ctor: <a href=\"https://crates.io/crates/ctor\">https://crates.io/crates/ctor</a> so that you can make any number of annotations and they all happen</p>",
        "id": 526494040,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751321700
    },
    {
        "content": "<p>so maybe component-init can search for all exports named <code>component-init:run:&lt;unique name, generated from FILE and LINE&gt;</code> and then finally do <code>component-init:final</code>, which would be the libc cleanup</p>",
        "id": 526494119,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751321762
    },
    {
        "content": "<p>i wonder if, instead of doing name-mangling at the top level, these functions should all be deposited into a component-init interface, in which case we get to use a namespace and package name. bytecodealliance:experimental/component-init ?</p>",
        "id": 526498702,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751324853
    },
    {
        "content": "<p>and then consider making it a wasi standard once we are satisfied with how it works?</p>",
        "id": 526498725,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751324867
    },
    {
        "content": "<p><code>componinit</code></p>",
        "id": 526540047,
        "sender_full_name": "Ralph",
        "timestamp": 1751354336
    },
    {
        "content": "<p>just throwing that out there</p>",
        "id": 526540083,
        "sender_full_name": "Ralph",
        "timestamp": 1751354346
    },
    {
        "content": "<p>Not to be confused with the linting tool <code>componit</code></p>",
        "id": 526600104,
        "sender_full_name": "Lann Martin",
        "timestamp": 1751373966
    },
    {
        "content": "<p>WUT</p>",
        "id": 526603553,
        "sender_full_name": "Ralph",
        "timestamp": 1751375057
    },
    {
        "content": "<p><code>compo-nit</code>...<br>\nI'm just trying to make very good jokes like you Ralph.</p>",
        "id": 526613962,
        "sender_full_name": "Lann Martin",
        "timestamp": 1751377936
    },
    {
        "content": "<blockquote>\n<p>Not to be confused with the linting tool <code>componit</code></p>\n</blockquote>\n<p>nor the tool that determines if a file is a component, <code>componinnit?</code></p>",
        "id": 526633301,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1751383354
    },
    {
        "content": "<p>you people</p>",
        "id": 526636827,
        "sender_full_name": "Ralph",
        "timestamp": 1751384386
    },
    {
        "content": "<p>should we rename WAC to <code>compoknit</code>?</p>",
        "id": 526639200,
        "sender_full_name": "Joel Dice",
        "timestamp": 1751385187
    },
    {
        "content": "<p>I read \"componit\" as rhyming with \"jump on it\"</p>\n<p><a href=\"https://www.youtube.com/watch?v=YKhi9ITkRgA\">YouTube -  - YouTube</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"YKhi9ITkRgA\" href=\"https://www.youtube.com/watch?v=YKhi9ITkRgA\"><img src=\"https://uploads.zulipusercontent.net/a073eadfaf609813ea55a9c0f237133fa774927e/68747470733a2f2f692e7974696d672e636f6d2f76692f594b68693949546b5267412f6d7164656661756c742e6a7067\"></a></div>",
        "id": 526645419,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1751387388
    },
    {
        "content": "<p>i talked it through with joel and nick in DM, and  the existing component-init crate has been renamed component-init-transform, so the guest crate can be named component-init</p>",
        "id": 526645806,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751387533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> want to publish component-init-{transform, wasmtime, cli} at 0.1.0? then ill update the componentize-py PR</p>",
        "id": 526645888,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751387563
    },
    {
        "content": "<p>I guess since theyre unpublished i could technically do so, if youd prefer me to, but its your repo.</p>",
        "id": 526645993,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751387605
    },
    {
        "content": "<p>Yup, I'll do that shortly.</p>",
        "id": 526646156,
        "sender_full_name": "Joel Dice",
        "timestamp": 1751387671
    },
    {
        "content": "<p>my current rough plan is that component-init-cli and -wasmtime will become part of wizer and go away completely, and then component-init-transform will become a dependency of wizer, and itll all probably move over into the wizer repo for ease of maintenance. but i want to prove out a few more ideas before im ready to do those steps</p>",
        "id": 526647014,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751388005
    },
    {
        "content": "<p>Ok, they're all published</p>",
        "id": 526648272,
        "sender_full_name": "Joel Dice",
        "timestamp": 1751388443
    },
    {
        "content": "<p>thanks!</p>",
        "id": 526648680,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1751388608
    }
]