[
    {
        "content": "<p>Hi!</p>\n<p>Like the title says, I'm trying to run a wasi component in a host program by using the wasmtime c-API.  I created a component following the example in the component book:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">docs</span><span class=\"p\">:</span><span class=\"nc\">adder</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">add</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">adder</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And I'm trying to access the add function with the following code but it fails.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Finding the add interface</span>\n<span class=\"n\">wasmtime_component_export_index_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">interface_export</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_component_instance_get_export_index</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nullptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"add\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">interface_export</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">nullptr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">LOGE</span><span class=\"p\">(</span><span class=\"s\">\"Failed to find interface export 'add'\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The documentation for the c-api only shows how to load and run a module. Does anyone know where I can find info on how to load a component's world, interface, functions, etc...?</p>",
        "id": 539152168,
        "sender_full_name": "Jean",
        "timestamp": 1757705869
    },
    {
        "content": "<p>you'll need to lookup the instance named <code>docs:adder/add@0.1.0</code> and then lookup the <code>add</code> function from that instance</p>",
        "id": 539155469,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757707471
    },
    {
        "content": "<p>That didn't work neither. I tried to create a simple rust host that would run the same component based on <a href=\"https://docs.wasmtime.dev/examples-rust-wasip2.html\">this example</a> but I get the same error \"Cannot get <code>docs:adder@0.1.0</code> interface\" from this : </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">interface_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_export_index</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"docs:adder/add@0.1.0\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Cannot get `docs:adder/add@0.1.0` interface\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>I tried with \"adder\" and \"add\", but that didn't work neither.<br>\nWhen looking at <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/bindgen_examples/_0_hello_world/index.html\">this example</a> instead, I see the snippet uses <code>bindgen</code>. Are component makers supposed to bundle their wit files with the wasm file so host applications can read them?</p>",
        "id": 539260342,
        "sender_full_name": "Jean",
        "timestamp": 1757759275
    },
    {
        "content": "<p>Could you share a reproduction of this? </p>\n<blockquote>\n<p>Are component makers supposed to bundle their wit files with the wasm file so host applications can read them?</p>\n</blockquote>\n<p>A WIT can be inferred from a wasm, so no, that's not required. The host would typically be originally built with a WIT, however, but that would be independent from wasms loaded at runtime.</p>",
        "id": 539567273,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757944900
    },
    {
        "content": "<p>Right, that's actually what I ended up doing. My host library defines the wit and the wasi component implements it. Thanks!</p>",
        "id": 539616415,
        "sender_full_name": "Jean",
        "timestamp": 1757957891
    }
]