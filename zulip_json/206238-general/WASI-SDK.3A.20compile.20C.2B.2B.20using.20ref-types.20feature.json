[
    {
        "content": "<p>My code looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// api.h</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">uintptr_t</span><span class=\"w\"> </span><span class=\"n\">host_create_resource</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">dataString</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// WASI module main.c</span>\n<span class=\"p\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">host_create_resource</span><span class=\"p\">(</span><span class=\"s\">\"hello, world!\"</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The compiled WASM file (converted to WAT), does not contain externref function parameters. The return value of <code>host_create_resource</code> is marked as i32. </p>\n<p>I can't figure out how to make the final WASM module use the ref-types feature. My runtime is WAMR. I noticed the issue because the host function implementation looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">uintptr_t</span>\n<span class=\"nf\">host_create_resource_wrapper</span><span class=\"p\">(</span><span class=\"n\">wasm_exec_env_t</span><span class=\"w\"> </span><span class=\"n\">exec_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">nativeSymbols</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">REG_NATIVE_FUNC</span><span class=\"p\">(</span><span class=\"n\">host_create_resource</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"($)r\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The linking fails at runtime. <code>iwasm</code> cannot find a function that matches the signature <code>($)r</code>. And that makes sense. The type of <code>host_create_source</code> is <code>(type (;4;) (func (param i32) (result i32)))</code>.</p>\n<p>Thank you!</p>",
        "id": 503750257,
        "sender_full_name": "mainrs",
        "timestamp": 1741255248
    }
]