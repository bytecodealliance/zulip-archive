[
    {
        "content": "<p>I have tried to build WASM for wasm32-unknown-unknown but found that catch_unwind is not working properly.  How do I use catch_unwind in WASM? Do I need wasm32-wasmi to make catch_unwind work?</p>",
        "id": 510857264,
        "sender_full_name": "Hoping White",
        "timestamp": 1744097113
    },
    {
        "content": "<p>Wasm exception support isn't yet supported by wasmtime. And to compile for wasm exceptions with rustc, I think you currently need to do something like<code>RUSTFLAGS=\"-Cpanic=unwind\" cargo build -Zbuild-std --target wasm32-unknown-unknown</code> with nightly rustc to rebuild the standard library with exception support.</p>",
        "id": 510885298,
        "sender_full_name": "bjorn3",
        "timestamp": 1744105209
    },
    {
        "content": "<p>Does wasmtime have a time plan for this feature?</p>",
        "id": 510885543,
        "sender_full_name": "Hoping White",
        "timestamp": 1744105285
    },
    {
        "content": "<p>Yes, it is currently being implemented.</p>",
        "id": 510896386,
        "sender_full_name": "bjorn3",
        "timestamp": 1744108616
    },
    {
        "content": "<p>You will likely need nightly rustc for a while though.</p>",
        "id": 510896438,
        "sender_full_name": "bjorn3",
        "timestamp": 1744108630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/channel/206238-general/topic/how.20to.20use.20catch_unwind.20in.20webassembly/near/510896386\">said</a>:</p>\n<blockquote>\n<p>Yes, it is currently being implemented.</p>\n</blockquote>\n<p>Thanks for the instruction. I managed to build an unwind wasm. But when I ran it with wasmtime, I got an error <code>exceptions proposal not enabled (at offset 0xe2)</code>. So will exception support be added in wasmtime soon?</p>",
        "id": 510898474,
        "sender_full_name": "Hoping White",
        "timestamp": 1744109291
    },
    {
        "content": "<p>Yeah, that is what I meant. It currently isn't implemented yet, but someone is working on the Cranelift changes necessary for implementing exception support in Wasmtime.</p>",
        "id": 510909482,
        "sender_full_name": "bjorn3",
        "timestamp": 1744112680
    }
]