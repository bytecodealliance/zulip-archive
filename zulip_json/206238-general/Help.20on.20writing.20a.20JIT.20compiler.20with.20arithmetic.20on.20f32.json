[
    {
        "content": "<p>Hello again! It seems that <code>store</code> on <code>r_ptr</code> here has been used wrong. It gives a SEGFAULT. Where am I wrong?</p>\n<p><a href=\"https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L159\">https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L159</a><br>\n<a href=\"https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L163\">https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L163</a></p>\n<p><code>r_ptr</code> comes from the second argument of the function(see <a href=\"https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L76\">this</a> and <a href=\"https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L188\">this</a>). The offset is calculated by the index(<code>r0</code>) multiplied by size of each element in the array(<a href=\"https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L188\">https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L188</a>).</p>\n<p>Thanks in advance!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L159\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/776324b1528ffb4fde3a7d0cd8261b7c74306dcd/68747470733a2f2f636f6465626572672e6f72672f617661746172732f6133653939613562666333633638303466633062656635386234366663333466&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L159\" title=\"wakegp/src/compiler.rs at master\">wakegp/src/compiler.rs at master</a></div><div class=\"message_embed_description\">wakegp - Detecting wake words using Linear Genetic Programming</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L163\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/776324b1528ffb4fde3a7d0cd8261b7c74306dcd/68747470733a2f2f636f6465626572672e6f72672f617661746172732f6133653939613562666333633638303466633062656635386234366663333466&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L163\" title=\"wakegp/src/compiler.rs at master\">wakegp/src/compiler.rs at master</a></div><div class=\"message_embed_description\">wakegp - Detecting wake words using Linear Genetic Programming</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L76\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/776324b1528ffb4fde3a7d0cd8261b7c74306dcd/68747470733a2f2f636f6465626572672e6f72672f617661746172732f6133653939613562666333633638303466633062656635386234366663333466&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L76\" title=\"wakegp/src/compiler.rs at master\">wakegp/src/compiler.rs at master</a></div><div class=\"message_embed_description\">wakegp - Detecting wake words using Linear Genetic Programming</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L188\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/776324b1528ffb4fde3a7d0cd8261b7c74306dcd/68747470733a2f2f636f6465626572672e6f72672f617661746172732f6133653939613562666333633638303466633062656635386234366663333466&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://codeberg.org/farooqkz/wakegp/src/branch/master/src/compiler.rs#L188\" title=\"wakegp/src/compiler.rs at master\">wakegp/src/compiler.rs at master</a></div><div class=\"message_embed_description\">wakegp - Detecting wake words using Linear Genetic Programming</div></div></div>",
        "id": 484152324,
        "sender_full_name": "Farooq",
        "timestamp": 1732454991
    },
    {
        "content": "<p>The problem was that I had to map a memory and make it executable. I still have other questions. Should I ask here or open a new topic?</p>",
        "id": 484178373,
        "sender_full_name": "Farooq",
        "timestamp": 1732480591
    },
    {
        "content": "<p>Asking here is fine. Won't get around to answering any questions today (CET) though.</p>",
        "id": 484183886,
        "sender_full_name": "bjorn3",
        "timestamp": 1732486186
    },
    {
        "content": "<p>I cannot find <code>brnz</code> in the docs which is used here:<br>\n<a href=\"https://github.com/Rodrigodd/bf-compiler/blob/master/cranelift-jit/src/main.rs#L219\">https://github.com/Rodrigodd/bf-compiler/blob/master/cranelift-jit/src/main.rs#L219</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Rodrigodd/bf-compiler/blob/master/cranelift-jit/src/main.rs#L219\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/acb72b116f08afa31d1f516512cbca4d8da58a98/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f356432393661313665373531346237363233626531343135646231616634633133656438636633326437653339616338626164343732303361663537323163322f526f647269676f64642f62662d636f6d70696c6572&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Rodrigodd/bf-compiler/blob/master/cranelift-jit/src/main.rs#L219\" title=\"bf-compiler/cranelift-jit/src/main.rs at master 路 Rodrigodd/bf-compiler\">bf-compiler/cranelift-jit/src/main.rs at master 路 Rodrigodd/bf-compiler</a></div><div class=\"message_embed_description\">Interpreted, optimized, JITed and compiled implementations of the Brainfuck lang. - Rodrigodd/bf-compiler</div></div></div>",
        "id": 484356093,
        "sender_full_name": "Farooq",
        "timestamp": 1732555792
    },
    {
        "content": "<p>I basically doing an <code>fcmp</code>, if it's true, there will be a jump, either backward or forward within the function(jump offsets are guarrented to be always inside my function). If it's false, there won't be any jump.</p>",
        "id": 484356368,
        "sender_full_name": "Farooq",
        "timestamp": 1732555873
    },
    {
        "content": "<p>Furthermore, for forward jumps, how can I jump to an address which I've yet to write the instructions for? I mean if I don't have instructions yet, how do I get the jump address?</p>\n<p>Edit: nvm this. There is an example in the bf compiler repository.</p>",
        "id": 484356560,
        "sender_full_name": "Farooq",
        "timestamp": 1732555932
    },
    {
        "content": "<p>hmm it seems that repo is using an ancient version of cranelift :)</p>",
        "id": 484357256,
        "sender_full_name": "Farooq",
        "timestamp": 1732556185
    },
    {
        "content": "<p>There is <code>br_if</code> and <code>br_table</code>. The first accepts arguments for both the <code>true</code> and <code>else/false</code> cases which does not match in my use case. The latter seems more like it, but I'm unsure if I can do backward jumps with it.</p>",
        "id": 484357773,
        "sender_full_name": "Farooq",
        "timestamp": 1732556392
    },
    {
        "content": "<p>Clif ir uses basic blocks rather than extended basic blocks, so every branch instruction is always jumps to another block and must be the last instruction in the block. In the backend a jump to the block immediately following the current block will be optimized away though.</p>",
        "id": 484471246,
        "sender_full_name": "bjorn3",
        "timestamp": 1732614410
    },
    {
        "content": "<p>brz/brnz no longer exist and have been replaced by br_if when we moved from extended basic blocks to basic blocks.</p>",
        "id": 484471331,
        "sender_full_name": "bjorn3",
        "timestamp": 1732614443
    },
    {
        "content": "<p>Can you please post an example on how to use do a simple if else statement like in C with cranelift?</p>",
        "id": 484765217,
        "sender_full_name": "Farooq",
        "timestamp": 1732727306
    },
    {
        "content": "<p>Here's an example of the use of <code>brif</code> in Wasmtime's translation to CLIF: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/66910067642ce2ddf5509845306508f89a24fc9e/crates/cranelift/src/func_environ.rs#L913\">https://github.com/bytecodealliance/wasmtime/blob/66910067642ce2ddf5509845306508f89a24fc9e/crates/cranelift/src/func_environ.rs#L913</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/66910067642ce2ddf5509845306508f89a24fc9e/crates/cranelift/src/func_environ.rs#L913\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a9aa4448d95c1ebadc90fefbec150da1b598108b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376431383765306239626333356432333838666137366639656264643136333034333737336134303964643932396631376634393362656239623737636332322f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/66910067642ce2ddf5509845306508f89a24fc9e/crates/cranelift/src/func_environ.rs#L913\" title=\"wasmtime/crates/cranelift/src/func_environ.rs at 66910067642ce2ddf5509845306508f89a24fc9e 路 bytecodealliance/wasmtime\">wasmtime/crates/cranelift/src/func_environ.rs at 66910067642ce2ddf5509845306508f89a24fc9e 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 484765529,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1732727412
    },
    {
        "content": "<p>note the \"continuation block\" -- that's a common idiom, if you have what is logically a \"one-way branch\" (if condition, go somewhere else)</p>",
        "id": 484765606,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1732727439
    },
    {
        "content": "<p>and note you can create blocks so you have their labels for targets before you fill them in</p>",
        "id": 484765628,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1732727449
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 484765669,
        "sender_full_name": "Farooq",
        "timestamp": 1732727462
    },
    {
        "content": "<p>Hello. I've got time to get back to this. A question. If I just want to continue execution in the <code>else</code>, I should put the rest of the program and the continue block. right?</p>",
        "id": 495993426,
        "sender_full_name": "Farooq",
        "timestamp": 1737918946
    },
    {
        "content": "<p>More on details, I've got a function. It executes sequentially and then returns one of memory cells at the end. I want to return a constant(-1.0f32) early if a condition is met. Let me know if there is a better approach.</p>",
        "id": 495999719,
        "sender_full_name": "Farooq",
        "timestamp": 1737924038
    },
    {
        "content": "<p>Bump</p>",
        "id": 496746871,
        "sender_full_name": "Farooq",
        "timestamp": 1738234678
    },
    {
        "content": "<p>Sorry, it's hard to help you debug your implementation without actually diving into it (and in general I don't have time to dive into others' projects and help them debug). The abstraction that Cranelift provides is hopefully clear: blocks, and jumps between them. How you map your control flow to that is up to you</p>",
        "id": 497071556,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1738350757
    },
    {
        "content": "<p>Thanks. But I still don't know how to use <code>brif</code>. If I want to continue execution, should I create a new block for the rest of instructions and make it <code>else</code> block?<br>\nI mean there is a <code>then</code> block which is my code I want to execute. But if the condition is not met, there is <code>else</code> block. What the <code>else</code> block would be? the continuation of the instructions? And then should I create new blocks whenever there is a condition as continuation block?</p>",
        "id": 497168672,
        "sender_full_name": "Farooq",
        "timestamp": 1738420078
    },
    {
        "content": "<p>If you have something like <code>if (cond) { foo... } else { bar... } rest...</code> in source code you can lower this to clif ir like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">brif</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span>\n\n<span class=\"n\">block1</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">foo</span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">bar</span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"n\">block3</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">rest</span><span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>",
        "id": 497171559,
        "sender_full_name": "bjorn3",
        "timestamp": 1738422516
    },
    {
        "content": "<p>I have <code>if (cond) { foo } rest...</code></p>",
        "id": 497172181,
        "sender_full_name": "Farooq",
        "timestamp": 1738422965
    },
    {
        "content": "<p>so I was right it seems. Everytime a condition comes, I should create a new block for the rest</p>",
        "id": 497172216,
        "sender_full_name": "Farooq",
        "timestamp": 1738423007
    },
    {
        "content": "<p>In this example, what is usage of null block? <a href=\"https://github.com/bytecodealliance/wasmtime/blob/66910067642ce2ddf5509845306508f89a24fc9e/crates/cranelift/src/func_environ.rs#L902\">https://github.com/bytecodealliance/wasmtime/blob/66910067642ce2ddf5509845306508f89a24fc9e/crates/cranelift/src/func_environ.rs#L902</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/66910067642ce2ddf5509845306508f89a24fc9e/crates/cranelift/src/func_environ.rs#L902\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/967393358b0252a79dd4d9ded7f582f6a66a67c4/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616466373436343233323263303831373363616561656233653465326336353164363738303361336239386135353235346631656137613039376265396565392f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/66910067642ce2ddf5509845306508f89a24fc9e/crates/cranelift/src/func_environ.rs#L902\" title=\"wasmtime/crates/cranelift/src/func_environ.rs at 66910067642ce2ddf5509845306508f89a24fc9e 路 bytecodealliance/wasmtime\">wasmtime/crates/cranelift/src/func_environ.rs at 66910067642ce2ddf5509845306508f89a24fc9e 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 497192669,
        "sender_full_name": "Farooq",
        "timestamp": 1738439175
    },
    {
        "content": "<blockquote>\n<p>But if the condition is not met, there is <code>else</code> block. What the <code>else</code> block would be? the continuation of the instructions? And then should I create new blocks whenever there is a condition as continuation block?</p>\n</blockquote>\n<p>Yes, exactly; to get a deeper understanding of this, it might be good to read about <a href=\"https://en.wikipedia.org/wiki/Basic_block\">basic blocks</a> and <a href=\"https://en.wikipedia.org/wiki/Control-flow_graph\">control-flow graphs</a>. These are the fundamental compiler concepts at play here.</p>\n<p>Specifically, the semantics of <code>brif</code> are <code>if (condition) goto then_block; else goto else_block;</code>. That's fully general and you can translate whatever control-flow you need into that, but as you note, you may need to create an arbitrary number of blocks.</p>\n<blockquote>\n<p>In this example, what is usage of null block? <a href=\"https://github.com/bytecodealliance/wasmtime/blob/66910067642ce2ddf5509845306508f89a24fc9e/crates/cranelift/src/func_environ.rs#L902\">https://github.com/bytecodealliance/wasmtime/blob/66910067642ce2ddf5509845306508f89a24fc9e/crates/cranelift/src/func_environ.rs#L902</a></p>\n</blockquote>\n<p>Here we are getting into the specifics of Wasmtime's internal representations, but in that code, <code>null_block</code> is the else-target of a <code>brif</code> a few lines below, and is branched to if <code>value</code> is false. Specifically here it is testing if an entry in a table is null or not (so all-zeroes is \"false\" to <code>brif</code> and branches to <code>null_block</code>).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://en.wikipedia.org/wiki/Control-flow_graph\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/379eb18cff666c750baab75b44f6dc3bc505fdef/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f622f62642f527573745f4d49525f4346472e7376672f36343070782d527573745f4d49525f4346472e7376672e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://en.wikipedia.org/wiki/Control-flow_graph\" title=\"Control-flow graph - Wikipedia\">Control-flow graph - Wikipedia</a></div><div class=\"message_embed_description\">In computer science, a control-flow graph (CFG) is a representation, using graph notation, of all paths that might be traversed through a program during its execution. The control-flow graph was conceived by Frances E. Allen,[1] who noted that Reese T. Prosser used boolean connectivity matrices for flow analysis before.[2]\n</div></div></div>",
        "id": 497196265,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1738442270
    },
    {
        "content": "<p>Thanks</p>",
        "id": 497235453,
        "sender_full_name": "Farooq",
        "timestamp": 1738480841
    }
]