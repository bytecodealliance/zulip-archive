[
    {
        "content": "<p>has the topic of mutually distrustful wasm modules ever been discussed? as i see it right now wasm assumes all modules that are linked together are mutually trusting (only talking about function calls right now) </p>\n<p>even with the component modules shared nothing design function calls are assuming a well behaving callee</p>",
        "id": 504524128,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1741600209
    },
    {
        "content": "<p>in particular id love to see catching traps at function calls and the ability to call functions with timeouts. though the latter probably doesn’t fit neatly into the current spec</p>",
        "id": 504524511,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1741600321
    },
    {
        "content": "<p>the former <em>could</em> be modeled by having a function/instruction that calls the calle turning traps into exceptions</p>",
        "id": 504525326,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1741600507
    },
    {
        "content": "<p>but id be curious if this has been discussed before</p>",
        "id": 504525387,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1741600524
    },
    {
        "content": "<p>i guess untrusted calls would also limit inlining and other optimizations <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 504529580,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1741601511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"769939\">Jonas Kruckenberg</span> <a href=\"#narrow/channel/206238-general/topic/mutually.20distrustful.20modules/near/504524511\">said</a>:</p>\n<blockquote>\n<p>in particular id love to see catching traps at function calls and the ability to call functions with timeouts. though the latter probably doesn’t fit neatly into the current spec</p>\n</blockquote>\n<p><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/high-level/Goals.md\">https://github.com/WebAssembly/component-model/blob/main/design/high-level/Goals.md</a></p>\n<blockquote>\n<p>Don't attempt to solve problems that are better solved by some combination of the toolchain, the platform or higher layer specifications, including:<br>\n[...]<br>\n* distributed computing and partial failure.</p>\n</blockquote>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/high-level/Goals.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/564f9d80cd207aef8dc3f53e657a997258cc4417/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363138643733383266326164613062336432346636383238653036653061303632386466393162326263656164636431323630323935393333623534623037352f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/high-level/Goals.md\" title=\"component-model/design/high-level/Goals.md at main · WebAssembly/component-model\">component-model/design/high-level/Goals.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div>",
        "id": 504548052,
        "sender_full_name": "bjorn3",
        "timestamp": 1741605918
    },
    {
        "content": "<p>I think the component model is supposed to ensure confidentiality and integrity betwene mutually untrusting components, but not to ensure availability.</p>",
        "id": 504548297,
        "sender_full_name": "bjorn3",
        "timestamp": 1741605973
    },
    {
        "content": "<p>hmm yeah okay i can see that <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> makes sense for the component model</p>",
        "id": 504551269,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1741606684
    },
    {
        "content": "<p>I believe the intention is to add both runtime component instantiation and partial failure support (i.e. the ability to limit the scope of a trap to a defined \"blast radius\") to the component model.  I don't believe anything's been formally specified yet, but I know it's on the informal roadmap.</p>",
        "id": 504679259,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741637978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/206238-general/topic/mutually.20distrustful.20modules/near/504679259\">said</a>:</p>\n<blockquote>\n<p>I believe the intention is to add both runtime component instantiation and partial failure support (i.e. the ability to limit the scope of a trap to a defined \"blast radius\") to the component model.  I don't believe anything's been formally specified yet, but I know it's on the informal roadmap.</p>\n</blockquote>\n<p>cool yeah that’s exactly what i meant but put into better words <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 504688276,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1741641096
    },
    {
        "content": "<p>do you know by chance who to talk to?</p>",
        "id": 504688309,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1741641110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> (who is not currently subscribed to this channel, so he won't get that notification) is the one to talk to.</p>",
        "id": 504690155,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741641861
    },
    {
        "content": "<p>You could also open an issue (or search for an existing one) on <a href=\"https://github.com/WebAssembly/component-model\">https://github.com/WebAssembly/component-model</a>, which he should see.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2ada2094539739a98f268e65e2ba467144c21deb/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376166393436326161633864643837613263393039303032333263626236393764663039393134616138373766316533323062376231303831656134366161622f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model\" title=\"GitHub - WebAssembly/component-model: Repository for design and specification of the Component Model\">GitHub - WebAssembly/component-model: Repository for design and specification of the Component Model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div>",
        "id": 504690246,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741641903
    },
    {
        "content": "<p>By the way, it’s already listed as a potential future feature here: <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/FutureFeatures.md#blast-zones\">Blast zones</a> and shorty mentioned at the end of this section: <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md#structured-concurrency\">Structured concurrency</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/FutureFeatures.md#blast-zones\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/337c3ae66c5bf49b52d8c99e0f654e17b0d4c7ae/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383636383836633133383135363762323439346334643338353839323536383036393137656331343461393139393235396365373261376139626365396537312f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/FutureFeatures.md#blast-zones\" title=\"component-model/design/mvp/FutureFeatures.md at main · WebAssembly/component-model\">component-model/design/mvp/FutureFeatures.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md#structured-concurrency\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/337c3ae66c5bf49b52d8c99e0f654e17b0d4c7ae/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383636383836633133383135363762323439346334643338353839323536383036393137656331343461393139393235396365373261376139626365396537312f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md#structured-concurrency\" title=\"component-model/design/mvp/Async.md at main · WebAssembly/component-model\">component-model/design/mvp/Async.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div>",
        "id": 505474272,
        "sender_full_name": "primoly",
        "timestamp": 1741884499
    },
    {
        "content": "<p>small update in case anyone is interested: i talked to luke at wasmio and he suggested (quite sensibly) that blast zones would require resourcified components</p>",
        "id": 510238584,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1743782498
    },
    {
        "content": "<p>which would allow blast zones to essentially have the same api as joinhandles from rust stdlib or tokio</p>",
        "id": 510238902,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1743782566
    }
]