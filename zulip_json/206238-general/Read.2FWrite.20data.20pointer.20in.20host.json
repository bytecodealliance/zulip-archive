[
    {
        "content": "<p>I have two very simple i/o extern functions in rust:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">;</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>compiled to wasm32, and I would like to know how to get the data back from the cpp API:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"o\">::</span><span class=\"n\">Store</span><span class=\"w\"> </span><span class=\"nf\">store</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">program</span><span class=\"o\">-&gt;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">().</span><span class=\"n\">set_epoch_deadline</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"n\">wasmtime</span><span class=\"o\">::</span><span class=\"n\">Func</span><span class=\"w\"> </span><span class=\"n\">read_fn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">::</span><span class=\"n\">Func</span><span class=\"o\">::</span><span class=\"n\">wrap</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">](</span><span class=\"kt\">int32_t</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">int32_t</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">SDL_Log</span><span class=\"p\">(</span><span class=\"s\">\"Calling back...\"</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"n\">wasmtime</span><span class=\"o\">::</span><span class=\"n\">Func</span><span class=\"w\"> </span><span class=\"n\">write_fn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">::</span><span class=\"n\">Func</span><span class=\"o\">::</span><span class=\"n\">wrap</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">](</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">int32_t</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">int32_t</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">SDL_Log</span><span class=\"p\">(</span><span class=\"s\">\"Calling back...\"</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n</code></pre></div>\n<p>I notice <code>Context#get_data</code> which may be what I am looking for and made me try</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"c1\">// Rust called</span>\n<span class=\"n\">let</span><span class=\"w\"> </span><span class=\"n\">mut</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"n\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"o\">::</span><span class=\"n\">mem</span><span class=\"o\">::</span><span class=\"n\">size_of_val</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">usize</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// C++ reading</span>\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">data_any</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">().</span><span class=\"n\">get_data</span><span class=\"p\">();</span>\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">data_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">any_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">data_any</span><span class=\"p\">);</span>\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">int_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">int32_t</span><span class=\"w\"> </span><span class=\"o\">*&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">data_ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"p\">);</span>\n<span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">data_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">int_ptr</span><span class=\"p\">;</span>\n<span class=\"n\">SDL_Log</span><span class=\"p\">(</span><span class=\"s\">\"Data at pointer: %d\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data_value</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>But I think I am worsening my case.</p>",
        "id": 501124065,
        "sender_full_name": "Mode",
        "timestamp": 1740149985
    },
    {
        "content": "<p>you'll want to capture a <code>wasmtime::Memory</code> in your closures and access it. The pointer from <code>.get_data()</code> is application-specific and you can also store data inside of it too.</p>",
        "id": 501129962,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740151711
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"o\">::</span><span class=\"n\">Memory</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">get</span><span class=\"o\">&lt;</span><span class=\"n\">wasmtime</span><span class=\"o\">::</span><span class=\"n\">Memory</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>I understand what the name is supposed to be for a function, but a bit more confused in the case of memory. (is the name in the binary standardized?)</p>\n<p>Also, how am I supposed to get it since the instance is created after the linker?</p>",
        "id": 501131819,
        "sender_full_name": "Mode",
        "timestamp": 1740152244
    },
    {
        "content": "<p>From the embedder perspective it's \"just another export\" and toolchains conventionally use <code>memory</code> right now. Whether or not that changes depends on whether or not the toolchain you used to produce the module changes. For accessing it you'll probably need to store it in the <code>get_data()</code> pointer after instantiation and then access it during the closure.</p>\n<p>FWIW I'd recommend reading the Rust docs as they're similar to C++ in terms of functionality and should have examples for this.</p>",
        "id": 501133008,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740152570
    }
]