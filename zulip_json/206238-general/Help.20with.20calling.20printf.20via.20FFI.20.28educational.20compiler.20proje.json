[
    {
        "content": "<p>I’m writing a simple educational compiler that uses Cranelift to generate code, and I’m trying to call C’s <code>printf</code> function via FFI. Right now, I’m able to print string literals (e.g. \"Hello, world!\\n\"), but I’m having trouble formatting values. For example, when I try <code>printf(\"Int: %d\\n\", 42);</code> the format string prints fine, but the %d part either prints garbage/huge random numbers (i.e. <code>130236440</code> when expecting <code>42</code>). I'm compiling statically, but the values also change on every run, so I suspect its maybe a pointer issue?</p>\n<p>I’m not super familiar with ABIs or FFI, but I suspect it’s maybe related:</p>\n<ul>\n<li>Passing values when expecting pointers or vice-versa</li>\n<li>Constructing variadic C functions<br>\n    * I've tried strictly passing exactly 2 and (padding up to) 8 args</li>\n<li>Calling conventions or signatures.<br>\n    * I've been trying to target aarch64_apple_darwin as I do most of my work an a macbook, though I can also target x86_64 if that has better support or is simpler.</li>\n</ul>\n<p>Does this sound like a known limitation or misuse? Is there a Cranelift-supported way to call something like <code>printf(\"%d\\n\", 42)</code> safely? I’d be happy to use a C wrapper or another approach if that’s best.</p>\n<p>Thanks in advance! And apologies if I’m missing something obvious or if this is the wrong place to ask — still learning and appreciate any help!</p>",
        "id": 529769403,
        "sender_full_name": "Elias Little",
        "timestamp": 1753081032
    },
    {
        "content": "<p>On arm64 macOS variadic arguments are always passed on the stack. This means that you can't just declare printf as having the signature <code>(i64, i32) apple_aarch64</code>. Given that Cranelift doesn't currently natively support calling variadic functions, in cg_clif there is a hack which adds dummy arguments in between the regular arguments and the variadic arguments to force the variadic arguments on the stack: <a href=\"https://github.com/rust-lang/rustc_codegen_cranelift/blob/46fa9ad1f0d0bcc173d44a9a6d721158e2af5ed1/src/abi/mod.rs#L634-L671\">https://github.com/rust-lang/rustc_codegen_cranelift/blob/46fa9ad1f0d0bcc173d44a9a6d721158e2af5ed1/src/abi/mod.rs#L634-L671</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rustc_codegen_cranelift/blob/46fa9ad1f0d0bcc173d44a9a6d721158e2af5ed1/src/abi/mod.rs#L634-L671\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/64e15b92abc4533e8c89668353c34c6a97304550/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326233373631303033633539616234653338643033323633313139616261333539363335346261313331346630383865303136636162343938366238326434362f727573742d6c616e672f72757374635f636f646567656e5f6372616e656c696674&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rustc_codegen_cranelift/blob/46fa9ad1f0d0bcc173d44a9a6d721158e2af5ed1/src/abi/mod.rs#L634-L671\" title=\"rustc_codegen_cranelift/src/abi/mod.rs at 46fa9ad1f0d0bcc173d44a9a6d721158e2af5ed1 · rust-lang/rustc_codegen_cranelift\">rustc_codegen_cranelift/src/abi/mod.rs at 46fa9ad1f0d0bcc173d44a9a6d721158e2af5ed1 · rust-lang/rustc_codegen_cranelift</a></div><div class=\"message_embed_description\">Cranelift based backend for rustc. Contribute to rust-lang/rustc_codegen_cranelift development by creating an account on GitHub.</div></div></div>",
        "id": 529793368,
        "sender_full_name": "bjorn3",
        "timestamp": 1753085253
    },
    {
        "content": "<p>Ah okay thank you! Does simply declaring the signature as <code>(i64, i32)</code> work for x86? And does this work on arm64 macOS for non variadic functions?</p>",
        "id": 529949002,
        "sender_full_name": "Elias Little",
        "timestamp": 1753123826
    },
    {
        "content": "<p>Yes, works on x86 if you don't use float varargs.</p>",
        "id": 530057313,
        "sender_full_name": "bjorn3",
        "timestamp": 1753164568
    },
    {
        "content": "<p>And non-variadic functions work just fine with Cranelift on arm64 macOS.</p>",
        "id": 530057894,
        "sender_full_name": "bjorn3",
        "timestamp": 1753164589
    }
]