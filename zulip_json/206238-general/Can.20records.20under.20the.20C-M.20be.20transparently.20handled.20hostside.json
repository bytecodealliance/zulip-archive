[
    {
        "content": "<p>Basically, I want to define a set of services using WASM and the component model. Each service has a state. The host runtime does not need to know what the state contains. Each service is defined using WIT. The WIT file is used to generate the guest code.</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>// First service.\ninterface service1 {\n    record service1-state {\n        last_seen_id: u64,\n        last_username: string,\n        last_diagnostic_data: list&lt;string&gt;,\n    }\n\n    init: func() -&gt; service1-state;\n    process: func(service1-state) -&gt; service1-state;\n}\n\n// Second service.\ninterface service2 {\n    record service2-state {\n        username: string,\n    }\n\n    init: func() -&gt; service2-state;\n    process: func(service2-state) -&gt; service2-state;\n}\n</code></pre></div>\n<p>Given that each service processes their old state and transforms it into a new state, can the host run any type of service that adheares to that interface? I.e., take _some_ kind of state as input to the <code>process</code> function and return the new state. Store the state temporarily until the next <code>process</code> execution, pass the stored record to the <code>process</code> function call, repeat. </p>\n<p>As far as I can tell, this does not seem to be possible. The host (in my case wasmtime) has to know all states during compile time.</p>",
        "id": 507707260,
        "sender_full_name": "mainrs",
        "timestamp": 1742810710
    },
    {
        "content": "<p>Does encoding the state in a serializable format (Text, JSON, Protobuf, etc) work as a solution to your problem? Adding a function that derives/hydrates a  <code>service-state</code> from an existing serialized format would be the most flexible way (and maybe only way) to achieve your goal presently.</p>",
        "id": 507711858,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1742811800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598440\">Victor Adossi</span> <a href=\"#narrow/channel/206238-general/topic/Can.20records.20under.20the.20C-M.20be.20transparently.20handled.20hostside/near/507711858\">said</a>:</p>\n<blockquote>\n<p>Does encoding the state in a serializable format (Text, JSON, Protobuf, etc) work as a solution to your problem?</p>\n</blockquote>\n<p>I can encode them. I was hoping that I could avoid that, because the state is rather large and deeply nested, so there would be some overhead.</p>\n<p>In my current approach (no C-M),  host writes the state into the WASM module's linear memory and passes the pointer during the <code>process</code> method invocation. </p>\n<p>I was thinking about how to convert this to the C-M, since that comes with a lot of (future) benefits like result types, async, resources and more.</p>",
        "id": 507716762,
        "sender_full_name": "mainrs",
        "timestamp": 1742812879
    },
    {
        "content": "<p>Is it possible for you to use some in-memory structures that might make serialization a bit easier?</p>\n<p>As far as a component-model native solution, I'd be happy to be wrong here but I don't think there are any solutions for this at present -- I think the closest thing that I've seen might be <a href=\"https://github.com/WebAssembly/component-model/issues/172\">https://github.com/WebAssembly/component-model/issues/172</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/172\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d66c7da2a5c0d9b5ea555816b5e71b0a8ff74114/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383331656464393965383133313965656664306262663064323364633866303532303532326465326639613735336536643966366163663939383739383338352f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f313732&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/172\" title=\"Sketch: allow a variable number of imports/exports of fixed type in Wit 路 Issue #172 路 WebAssembly/component-model\">Sketch: allow a variable number of imports/exports of fixed type in Wit 路 Issue #172 路 WebAssembly/component-model</a></div><div class=\"message_embed_description\">Motivation Let's say I'd like to build a component that consumes 3 configuration values a, b and c (which in a 12-factor app I'd take as 3 environment variables). I could define a component with ty...</div></div></div>",
        "id": 507736623,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1742817292
    },
    {
        "content": "<p>My modules and host are written in C/++. Wouldn't a simple memcpy into a buffer be enough for \"serialization\", as C ABI is stable? My other idea was to rely on a zero-copy de/ser framework. At least that should make it more efficient when compared to JSON et al.</p>",
        "id": 507743659,
        "sender_full_name": "mainrs",
        "timestamp": 1742818899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598440\">Victor Adossi</span> <a href=\"#narrow/channel/206238-general/topic/Can.20records.20under.20the.20C-M.20be.20transparently.20handled.20hostside/near/507736623\">said</a>:</p>\n<blockquote>\n<p>Is it possible for you to use some in-memory structures that might make serialization a bit easier?</p>\n<p>As far as a component-model native solution, I'd be happy to be wrong here but I don't think there are any solutions for this at present -- I think the closest thing that I've seen might be <a href=\"https://github.com/WebAssembly/component-model/issues/172\">https://github.com/WebAssembly/component-model/issues/172</a></p>\n</blockquote>\n<p>Thanks for the issue link! It does look similar to my \"issue\". I'll keep an eye on it!</p>",
        "id": 507743870,
        "sender_full_name": "mainrs",
        "timestamp": 1742818939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"681848\">mainrs</span> <a href=\"#narrow/channel/206238-general/topic/Can.20records.20under.20the.20C-M.20be.20transparently.20handled.20hostside/near/507743659\">said</a>:</p>\n<blockquote>\n<p>My modules and host are written in C/++. Wouldn't a simple memcpy into a buffer be enough for \"serialization\", as C ABI is stable? My other idea was to rely on a zero-copy de/ser framework. At least that should make it more efficient when compared to JSON et al.</p>\n</blockquote>\n<p>If you know the relevant components and host are C/C++ that could certainly work (and most other languages too, given that C FFI is pretty well used)</p>\n<p>Yeah my thought was more on the zero copy side -- thinking of serialization formats that allow for in-memory structures to stay unchanged. I think either approach could work <em>if</em> you can stomach the memcpy!</p>",
        "id": 507767190,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1742823719
    }
]