[
    {
        "content": "<p>Hello! Apologies if this is the wrong place for this. I've been using wasm-encoder for various projects for a while, and I kept wondering whether <code>match</code>ing on the <code>Instruction</code> had any impact on performance, or if the compiler and/or CPU were smart enough to make it not matter. So today I ran a little experiment: <a href=\"https://github.com/samestep/wasm-encoder-performance\">https://github.com/samestep/wasm-encoder-performance</a></p>\n<p>To my surprise, I saw a 30% difference in performance on an example of generating some helper functions that I pulled from one of my projects. Granted, usually the Wasm code being generated isn't quite as static as these helper functions are, but it still seems to me that this performance improvement would be worthwhile.</p>\n<p>I'd be happy to make a pull request on wasm-tools with this change, but I wanted to check here first before doing that work, in case people aren't in favor of it or would prefer to discuss the design a bit first. Thoughts?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/samestep/wasm-encoder-performance\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b3bfe3b27209d0e07bc5b7bdb3c50333647054ef/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626361633230333534616563626435346163303530623736363238623065646562666236393931316534303462373639373233323235633133396239373538612f73616d65737465702f7761736d2d656e636f6465722d706572666f726d616e6365&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/samestep/wasm-encoder-performance\" title=\"GitHub - samestep/wasm-encoder-performance: Benchmarking wasm-encoder against an alternative implementation strategy.\">GitHub - samestep/wasm-encoder-performance: Benchmarking wasm-encoder against an alternative implementation strategy.</a></div><div class=\"message_embed_description\">Benchmarking wasm-encoder against an alternative implementation strategy. - samestep/wasm-encoder-performance</div></div></div>",
        "id": 495114336,
        "sender_full_name": "Sam Estep",
        "timestamp": 1737482238
    },
    {
        "content": "<p>I think it'd be quite reasonable to add method along these lines for encoding in addition to the <code>Instruction</code> enum yeah. Historically I've found that it's more-or-less nice to have both since sometimes one makes more sense than the other. I suspect the hard part here might be the invocation of the <code>for_each_instruction</code> macro from wasmparser, but if that can be wrangled I think it'd be great to add function-per-instruction encoding like this</p>",
        "id": 495132768,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737488978
    },
    {
        "content": "<p>Makes sense, thanks Alex! I'll start working on a PR, then.</p>",
        "id": 495133276,
        "sender_full_name": "Sam Estep",
        "timestamp": 1737489183
    },
    {
        "content": "<p>OK I opened a PR: <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1985\">https://github.com/bytecodealliance/wasm-tools/pull/1985</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/1985\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/be74d6bd909c7895791e737e87d6ce8364241326/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363936386362663437386237366432393136656461376233316539653361313834323435396262303130336638653439343539313030343661323832626232622f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f31393835&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1985\" title=\"Add wasm-encoder API to directly encode instructions by samestep 路 Pull Request #1985 路 bytecodealliance/wasm-tools\">Add wasm-encoder API to directly encode instructions by samestep 路 Pull Request #1985 路 bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Following up on a Zulip conversation with @alexcrichton, this PR adds a new wasm_encoder::InstructionSink type, which has an encoding method for each variant of wasm_encoder::Instruction:\n/// An en...</div></div></div>",
        "id": 496169167,
        "sender_full_name": "Sam Estep",
        "timestamp": 1737996754
    }
]