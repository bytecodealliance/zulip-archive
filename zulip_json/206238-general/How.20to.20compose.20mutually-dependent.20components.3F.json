[
    {
        "content": "<p>I'm trying to understand how I can compose together multiple components that use each others' exports?<br>\nIn particular, I'm trying to create a plugin system, and would like creators of plugins to be able to create their own custom interfaces that could be used to allow plugins to interact with one another.</p>\n<p>There would probably be a naming convention involved with this to facilitate the composition process, for example:</p>\n<p>plugin1.wit</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"p\">:</span><span class=\"nc\">plugin</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">plugin1</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">of</span><span class=\"o\">-</span><span class=\"n\">plugin1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">plugin2</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">of</span><span class=\"o\">-</span><span class=\"n\">plugin2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">plugin2</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">plugin1</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>plugin2.wit</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"p\">:</span><span class=\"nc\">plugin</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">plugin1</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">of</span><span class=\"o\">-</span><span class=\"n\">plugin1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">plugin2</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">of</span><span class=\"o\">-</span><span class=\"n\">plugin2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">plugin1</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">plugin2</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The main difference in the above example is just the imported and exported interfaces.<br>\nEach component imports the interface the other exports.<br>\nUnfortunately, it is not clear to me if this is actually possible - my interpretation of the wac language documentation has given me to impression that it would not be possible.  This is because each component would need the exports of the other a the time they are instantiated, and as one of them has to be instantiated first it won't have the exports of the second instantiated component available.</p>\n<p>If that is the case, an alternative approach I have thought of is to generate another component that would sit between the plugins and basically forward their interfaces to one another.  The problem I am having with that is that while I have found ways to determine which interfaces are exported/imported by components, e.g. with wasm-tools component wit, I have not found ways to determine the contents of those interfaces, i.e. the functions or types exported or imported.</p>\n<p>So I guess my questions are:<br>\n1 - Is it possible to make plugins that are mutually dependent, and if so how?<br>\n2 - Is there a way to determine the imported/exported types and functions of components?<br>\n3 - Is there a better approach to what I am trying to do?</p>",
        "id": 500319666,
        "sender_full_name": "godotdot",
        "timestamp": 1739855112
    },
    {
        "content": "<ol>\n<li>There cannot be circular imports between components, as you have found.</li>\n<li>You can use <a href=\"https://docs.rs/wit-component/0.225.0/wit_component/fn.decode.html\"><code>wit_component::decode</code></a> to parse a component into the equivalent WIT AST.</li>\n<li>It's a little hard to evaluate without more information but plumbing things together with a top-level component seems reasonable.</li>\n</ol>",
        "id": 500403341,
        "sender_full_name": "Lann Martin",
        "timestamp": 1739885963
    },
    {
        "content": "<p>Thank you for this information - decode looks like just what I need!</p>\n<p>Regarding \"3. It's a little hard to evaluate without more information but plumbing things together with a top-level component seems reasonable.\"</p>\n<p>I'm trying to think this through, but I keep running into circular imports, possibly due to a misunderstanding of what you are suggesting.</p>\n<p>I'm envisioning something like:</p>\n<p>plugin1.wit:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"p\">:</span><span class=\"nc\">plugin</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">plugin1</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">of</span><span class=\"o\">-</span><span class=\"n\">plugin1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">plugin2</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">of</span><span class=\"o\">-</span><span class=\"n\">plugin2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">plugin2</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">plugin1</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>plugin2.wit:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"p\">:</span><span class=\"nc\">plugin</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">plugin1</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">of</span><span class=\"o\">-</span><span class=\"n\">plugin1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">plugin2</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">of</span><span class=\"o\">-</span><span class=\"n\">plugin2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">plugin1</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">plugin2</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>generated-component.wit (generated based off interfaces of selected/active plugins, in this case plugin1 and plugin2):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"p\">:</span><span class=\"nc\">plugin</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">plugin1</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">of</span><span class=\"o\">-</span><span class=\"n\">plugin1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">plugin2</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">of</span><span class=\"o\">-</span><span class=\"n\">plugin2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">plugin1</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">plugin2</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">plugin1</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">plugin2</span><span class=\"o\">-</span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This is based on the idea that the generated component:<br>\n1 - Would be generated based on selected/active plugins.<br>\n2 - Would sit above the plugins and all interactions between plugins would go through this component.<br>\n3 - Would have implementations of the plugins' exports that would call those plugins' exports; these implementations would be exported for other plugins to import.</p>\n<p>The issue is that:<br>\n1 - Generated-component would need to import the exports of the plugins so that it can forward calls to them<br>\n2 - Plugins would need to import generated-component so that they can call its exports, thus creating a circular import.</p>",
        "id": 500443573,
        "sender_full_name": "godotdot",
        "timestamp": 1739896417
    }
]