[
    {
        "content": "<p>Hello, I noticed wasmtime has implemented GC types since last November and I'm interested to see if it can be a DOM script engine. For my use case, I need to store most of the data as GC traced object.</p>\n<p>I wonder is it acceptable to create another <code>Store</code> and use it to create and push <code>ExternRef</code> to <code>ResourceTable</code>?</p>",
        "id": 526347669,
        "sender_full_name": "Wu Yu Wei",
        "timestamp": 1751272626
    },
    {
        "content": "<p><code>ResourceTable</code> is for wasm components. For a web browser (or javascript engine) you wouldn't use wasm components. They aren't supported by any existing js engines anyway.</p>",
        "id": 526366545,
        "sender_full_name": "bjorn3",
        "timestamp": 1751278570
    },
    {
        "content": "<p>All js code that would be able to directly interact with each other needs to use a single wasm store according to the wasm js interface spec:</p>\n<blockquote>\n<p>Each <a href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#agent\">agent</a> has an associated store. When a new agent is created, its associated store is set to the result of <a href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-store-init\">store_init</a>().</p>\n</blockquote>",
        "id": 526366774,
        "sender_full_name": "bjorn3",
        "timestamp": 1751278636
    },
    {
        "content": "<p>Oh what I mean is using wasmtime directly as a script backend for projects like servo perhaps. A few years ago, servo community had a topic about replacing spidermonkey and I was interested in exploring wasm only backend. But the nature of DOM forces its objects need to be GC traced.</p>",
        "id": 526370617,
        "sender_full_name": "Wu Yu Wei",
        "timestamp": 1751280053
    }
]