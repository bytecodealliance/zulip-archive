[
    {
        "content": "<p>I did a more complex test with pulley, wasmi, and cranelift.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bevy_app</span><span class=\"p\">::{</span><span class=\"n\">App</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Startup</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Update</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bevy_ecs</span><span class=\"p\">::</span><span class=\"n\">prelude</span><span class=\"p\">::{</span><span class=\"n\">Commands</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Query</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Resource</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">cell</span><span class=\"p\">::</span><span class=\"n\">UnsafeCell</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">mem</span><span class=\"p\">::</span><span class=\"n\">MaybeUninit</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#[derive(Component)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Test</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Test</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">commands</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Commands</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Res</span><span class=\"o\">&lt;</span><span class=\"n\">EntityCount</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">count</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">commands</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">((</span>\n<span class=\"w\">            </span><span class=\"n\">Test</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Test</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Test</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Test</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Test</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"mi\">5</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Test</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"mi\">6</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Test</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"mi\">7</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Test</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Test</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"mi\">9</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Test</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"mi\">10</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Engine</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">app</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeCell</span><span class=\"o\">&lt;</span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"n\">App</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">app</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeCell</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">MaybeUninit</span><span class=\"p\">::</span><span class=\"n\">uninit</span><span class=\"p\">()),</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">app</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">App</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">assume_init_ref</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">app_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">App</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">assume_init_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">App</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">tick</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">query</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Query</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Test</span><span class=\"o\">&lt;</span><span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Test</span><span class=\"o\">&lt;</span><span class=\"mi\">5</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Test</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">query</span><span class=\"p\">.</span><span class=\"n\">iter_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[derive(Resource)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">EntityCount</span><span class=\"p\">(</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">);</span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">ENGINE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n\n<span class=\"cp\">#[unsafe(no_mangle)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"system\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ENGINE</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bevy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ENGINE</span><span class=\"p\">.</span><span class=\"n\">app_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">bevy</span><span class=\"p\">.</span><span class=\"n\">insert_resource</span><span class=\"p\">(</span><span class=\"n\">EntityCount</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">bevy</span><span class=\"p\">.</span><span class=\"n\">add_systems</span><span class=\"p\">(</span><span class=\"n\">Startup</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">setup</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bevy</span><span class=\"p\">.</span><span class=\"n\">add_systems</span><span class=\"p\">(</span><span class=\"n\">Update</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tick</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[unsafe(no_mangle)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"system\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">update</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bevy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ENGINE</span><span class=\"p\">.</span><span class=\"n\">app_mut</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">bevy</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When count =10000, the result is as follows</p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>memory</th>\n<th>fps</th>\n<th>wasm memory</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>native</td>\n<td>9600</td>\n<td>23400</td>\n<td>-</td>\n</tr>\n<tr>\n<td>cranelift</td>\n<td>94372</td>\n<td>23100</td>\n<td>11392</td>\n</tr>\n<tr>\n<td>pulley</td>\n<td>47116</td>\n<td>1010</td>\n<td>-</td>\n</tr>\n<tr>\n<td>wasmi</td>\n<td>19896</td>\n<td>1110</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>The FPS is great, actually. I wonder why cranelift and pulley cost so much memory.</p>",
        "id": 511623105,
        "sender_full_name": "Hoping White",
        "timestamp": 1744369765
    },
    {
        "content": "<p>What is the unit of the memory column? bytes? kilobytes?</p>",
        "id": 511627097,
        "sender_full_name": "bjorn3",
        "timestamp": 1744370993
    },
    {
        "content": "<p>kilobytes. And count=1-10000, does not effect the cranelift memory too much, it is 80000 basically and up</p>",
        "id": 511627917,
        "sender_full_name": "Hoping White",
        "timestamp": 1744371239
    },
    {
        "content": "<p>Some questions:</p>\n<ol>\n<li>Did you use proper Cargo optimization settings required by Wasmi? This can affect Wasmi performance by up to 50%:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[profile.release]</span>\n<span class=\"n\">lto</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"fat\"</span>\n<span class=\"n\">codegen-units</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>What platform are you running this on (CPU + OS)?</li>\n<li>What Wasmi and Pulley/Wasmtime versions have you used?</li>\n</ol>",
        "id": 511646672,
        "sender_full_name": "Robin Freyler",
        "timestamp": 1744376614
    },
    {
        "content": "<p>1 no<br>\n2 wsl+ubuntu20.04+i9<br>\n3 wasmtime 31.0 wasmi 0.44</p>",
        "id": 511648491,
        "sender_full_name": "hoping",
        "timestamp": 1744377116
    },
    {
        "content": "<p>wsl environments have wildly varying constraints; if you ran the same thing somewhere else (bare metal ubuntu) I'd be interested......</p>",
        "id": 511651679,
        "sender_full_name": "Ralph",
        "timestamp": 1744378025
    },
    {
        "content": "<p>wsl works fine! but you need to be very skeptical of telemetry that comes out of it as it's really a dev platform optimized for client interruptions and so on.</p>",
        "id": 511651788,
        "sender_full_name": "Ralph",
        "timestamp": 1744378058
    },
    {
        "content": "<p>that said, if you find it is related to wsl, I'd be very interested anyway</p>",
        "id": 511651902,
        "sender_full_name": "Ralph",
        "timestamp": 1744378080
    },
    {
        "content": "<p>I don't THINK that it should have any effect here, but <em>I am frequently surprised by subtle differences</em></p>",
        "id": 511652066,
        "sender_full_name": "Ralph",
        "timestamp": 1744378116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"739233\">@hoping</span> please benchmark again with the proper optimization settings by copying the above <code>toml</code> code into your <code>Cargo.toml</code> file of the benchmarking source code. Otherwise, Wasmi is not used at its full potential. This may also benefit Pulley execution.</p>",
        "id": 511656939,
        "sender_full_name": "Robin Freyler",
        "timestamp": 1744379308
    },
    {
        "content": "<p>I will do the benchmark on the bare metal, but my main concern is the memory</p>",
        "id": 511762570,
        "sender_full_name": "hoping",
        "timestamp": 1744422111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"374806\">@Robin Freyler</span>  <span class=\"user-mention\" data-user-id=\"268586\">@Ralph</span> <br>\nI tested it again, adding the cargo.toml parameters on the bare metal (They were older machines though)<br>\ncentos7.1 Intel(R) Xeon(R) CPU E5-2420 0 @ 1.90GHz</p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>total memory(kb)</th>\n<th>wasm memory(kb)</th>\n<th>fps</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>native</td>\n<td>8168</td>\n<td>-</td>\n<td>8433</td>\n</tr>\n<tr>\n<td>cranelift</td>\n<td>92040</td>\n<td>11392</td>\n<td>7791</td>\n</tr>\n<tr>\n<td>pulley</td>\n<td>41676</td>\n<td>11392</td>\n<td>211</td>\n</tr>\n<tr>\n<td>wasmi</td>\n<td>16344</td>\n<td>11392</td>\n<td>382</td>\n</tr>\n</tbody>\n</table>\n<p>centos7.9 Intel(R) Xeon(R) Silver 4216 CPU @ 2.10GHz</p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>total memory(kb)</th>\n<th>wasm memory(kb)</th>\n<th>fps</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>native</td>\n<td>8148</td>\n<td>-</td>\n<td>13374</td>\n</tr>\n<tr>\n<td>cranelift</td>\n<td>104468</td>\n<td>11392</td>\n<td>12360</td>\n</tr>\n<tr>\n<td>pulley</td>\n<td>40768</td>\n<td>11392</td>\n<td>424</td>\n</tr>\n<tr>\n<td>wasmi</td>\n<td>16296</td>\n<td>11392</td>\n<td>1045</td>\n</tr>\n</tbody>\n</table>\n<p>The conclusions are</p>\n<ul>\n<li>wasmi/cranelift 1:10 </li>\n<li>pulley/wasmi: 1:2.5</li>\n<li>cranelift/native 0.9:1</li>\n</ul>\n<p>The memory did not change too much on all the machines.<br>\nI am trying to use wasm as a hot fix method for mobile phones, so memory is my primary concern. I wonder why cranelift cost so much memory, and is there any way to reduce it?  Is it going to increase as the complexity of the code goes up?</p>",
        "id": 511979823,
        "sender_full_name": "hoping",
        "timestamp": 1744605590
    },
    {
        "content": "<p>Deepseek tells me to set parallel_compilation to false, reducing the memory from 98 to 48. Are there any other configurations like this to use?</p>",
        "id": 511990071,
        "sender_full_name": "hoping",
        "timestamp": 1744610237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"739233\">hoping</span> <a href=\"#narrow/stream/206238-general/topic/pulley.20vs.20wasmi.20vs.20cranelift.2C.20more.20detail.20test/near/511990071\">said</a>:</p>\n<blockquote>\n<p>Deepseek tells me to set parallel_compilation to false, reducing the memory from 98 to 48. Are there any other configurations like this to use?</p>\n</blockquote>\n<p>I suspect you are either measuring peak memory usage or you are measuring memory usage from the OS side rather than the actually allocated memory amount. Setting parallel_compilation to false will only reduce memory usage when compiling the wasm module. Once compilation is done, all this memory is freed either way. It is possible however that the memory allocator choses to retain part or all of this memory to more quickly serve future allocation requests. If you are trying to measure memory usage you should use a heap profiler like valgrind's dhat or massif  or for example <a href=\"https://github.com/koute/bytehound\">bytehound</a>. The <a href=\"https://docs.rs/dhat/latest/dhat/\">dhat</a> crate is also an option.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/koute/bytehound\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/864554e93c3f7134ecff365d89d768166b3d26a0/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373736356266343130666533306236636237666638366531636664316163623733306165633363633664356134643737383830353932313634623361626664332f6b6f7574652f62797465686f756e64&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/koute/bytehound\" title=\"GitHub - koute/bytehound: A memory profiler for Linux.\">GitHub - koute/bytehound: A memory profiler for Linux.</a></div><div class=\"message_embed_description\">A memory profiler for Linux. Contribute to koute/bytehound development by creating an account on GitHub.</div></div></div>",
        "id": 512009219,
        "sender_full_name": "bjorn3",
        "timestamp": 1744617525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span>   The memory is <code>RES</code> field from <code>top</code> command, so it's not the peak memory. </p>\n<p>I tried valgrind and bytehound, all crashed on my system. I don't know why.</p>\n<p>So I think if the memory is reserved by the allocator, when I increase the count, the wasm may consume more memory, so the reserved memory should be used, and the memory gap should decrease.</p>\n<table>\n<thead>\n<tr>\n<th>count</th>\n<th>parallel_compilation</th>\n<th>total memory</th>\n<th>wasm memory</th>\n<th>memory gap</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10000</td>\n<td>No</td>\n<td>48516</td>\n<td>11392</td>\n<td>37124</td>\n</tr>\n<tr>\n<td>100000</td>\n<td>No</td>\n<td>115044</td>\n<td>86592</td>\n<td>28452</td>\n</tr>\n<tr>\n<td>10000</td>\n<td>Yes</td>\n<td>102056</td>\n<td>11392</td>\n<td>90664</td>\n</tr>\n<tr>\n<td>100000</td>\n<td>Yes</td>\n<td>163712</td>\n<td>86592</td>\n<td>77120</td>\n</tr>\n<tr>\n<td>1000000</td>\n<td>Yes</td>\n<td>759792</td>\n<td>685120</td>\n<td>74672</td>\n</tr>\n</tbody>\n</table>\n<p>I don't think the result supports the allocator reservation assumption.</p>",
        "id": 512020618,
        "sender_full_name": "hoping",
        "timestamp": 1744620497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"739233\">hoping</span> has marked this topic as unresolved.</p>",
        "id": 512072386,
        "sender_full_name": "Notification Bot",
        "timestamp": 1744635313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"739233\">hoping</span> <a href=\"#narrow/channel/206238-general/topic/pulley.20vs.20wasmi.20vs.20cranelift.2C.20more.20detail.20test/near/512035254\">said</a>:</p>\n<blockquote>\n<p>I think I got it. Code compilation did not release the memory. If I use Moudle::deserialize instead of Moudle::from_file, the memory is just fine as lower as wasmi.</p>\n</blockquote>\n<p>someone ensure that puppy is documented!!!</p>",
        "id": 512083311,
        "sender_full_name": "Ralph",
        "timestamp": 1744638131
    },
    {
        "content": "<p>do you have the results run after this change?</p>",
        "id": 512083403,
        "sender_full_name": "Ralph",
        "timestamp": 1744638159
    },
    {
        "content": "<p>love to see the table again.....</p>",
        "id": 512083417,
        "sender_full_name": "Ralph",
        "timestamp": 1744638165
    },
    {
        "content": "<p>This is more an issue of methodology I think: measuring resident memory as viewed by the OS is not an accurate way to get the exact size of the heap. If Cranelift leaks memory, that would be an issue we'd need to resolve, but it's written in fully safe Rust and frees all of its data structures after compilation, so that shouldn't be the case. <span class=\"user-mention\" data-user-id=\"739233\">@hoping</span> I don't think the memory reservation works the way you think it does: there are likely per-thread free pools and other things going on in a modern high-performance parallel allocator that make this hard to reason about.</p>\n<p>If you run under Valgrind you can get per-byte leak tracking; if you actually see a memory leak while running that way we'd be interested to hear about it.</p>",
        "id": 512163035,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1744660829
    },
    {
        "content": "<blockquote>\n<p>Deepseek tells me to set parallel_compilation to false, reducing the memory from 98 to 48. Are there any other configurations like this to use?</p>\n</blockquote>\n<p>Also, please don't rely on AI tools to give you advice about our project -- we're happy to answer questions ourselves, and our experience is that AI tools (which are at their heart statistical randomness machines) sometimes hallucinate or give bad advice.</p>",
        "id": 512163227,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1744660898
    },
    {
        "content": "<p>(For example, turning off parallel compilation is probably a bad idea in a user-facing app because it will also significantly increase startup latency when you have a new uncached module)</p>",
        "id": 512163458,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1744660975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268586\">Ralph</span> <a href=\"#narrow/channel/206238-general/topic/pulley.20vs.20wasmi.20vs.20cranelift.2C.20more.20detail.20test/near/512083403\">said</a>:</p>\n<blockquote>\n<p>do you have the results run after this change?</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>count</th>\n<th>total memory</th>\n<th>wasm memory</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10000</td>\n<td>17072</td>\n<td>11392</td>\n</tr>\n<tr>\n<td>100000</td>\n<td>83580</td>\n<td>86592</td>\n</tr>\n<tr>\n<td>1000000</td>\n<td>678504</td>\n<td>685120</td>\n</tr>\n</tbody>\n</table>\n<p>I think the total memory taken from RES is not accurate, so the last two rows show total memory &lt; wasm memory.</p>",
        "id": 512204051,
        "sender_full_name": "hoping",
        "timestamp": 1744681048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/channel/206238-general/topic/pulley.20vs.20wasmi.20vs.20cranelift.2C.20more.20detail.20test/near/512163035\">said</a>:</p>\n<blockquote>\n<p>This is more an issue of methodology I think: measuring resident memory as viewed by the OS is not an accurate way to get the exact size of the heap. If Cranelift leaks memory, that would be an issue we'd need to resolve, but it's written in fully safe Rust and frees all of its data structures after compilation, so that shouldn't be the case. <span class=\"user-mention silent\" data-user-id=\"739233\">hoping</span> I don't think the memory reservation works the way you think it does: there are likely per-thread free pools and other things going on in a modern high-performance parallel allocator that make this hard to reason about.</p>\n<p>If you run under Valgrind you can get per-byte leak tracking; if you actually see a memory leak while running that way we'd be interested to hear about it.</p>\n</blockquote>\n<p>I agree. I don't think it's fair to call it a memory leak actually. The parallel compilation uses rayon, and the global thread pool won't be cleaned when the compilation is done. (I don't think they provide an API to do this).  So the correct way to use wasmtime when memory is the priority is to load from a cached module.</p>",
        "id": 512204743,
        "sender_full_name": "hoping",
        "timestamp": 1744681491
    },
    {
        "content": "<p>an even better approach for keeping memory (and latency) overheads low would be to pre-compile the <code>.wasm</code>s into <code>.cwasm</code>s and avoid compiling on-device or in the data plane at all.</p>\n<p>this is relevant for both pulley and cranelift-native (and winch too, but you don't seem interested in winch, afaict)</p>\n<p>resources:</p>\n<ul>\n<li><a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Engine.html#method.precompile_module\">https://docs.rs/wasmtime/latest/wasmtime/struct.Engine.html#method.precompile_module</a></li>\n<li><a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Module.html#method.deserialize_file\">https://docs.rs/wasmtime/latest/wasmtime/struct.Module.html#method.deserialize_file</a></li>\n</ul>",
        "id": 512369763,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1744735749
    },
    {
        "content": "<p>with ^ you can also disable the compiler from your embedding's wasmtime build, meaning that code size shrinks a ton and you don't have memory overhead associated with the compiler's executable code either</p>",
        "id": 512370546,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1744735998
    },
    {
        "content": "<p>see <a href=\"https://docs.wasmtime.dev/examples-minimal.html\">https://docs.wasmtime.dev/examples-minimal.html</a> for more details about building a minimal, runtime-only wasmtime build that doesn't include the compiler</p>",
        "id": 512370764,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1744736060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span>   Thanks for the advice. This is what I need.</p>",
        "id": 512720376,
        "sender_full_name": "hoping",
        "timestamp": 1744855763
    }
]