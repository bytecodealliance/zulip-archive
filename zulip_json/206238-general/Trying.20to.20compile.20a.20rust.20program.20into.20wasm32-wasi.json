[
    {
        "content": "<p>Can anyone please help me to convert a rust program (Noise protocol) which has tcp connect functions and cryptographic handshakes into wasm32-wasi target.</p>\n<p>I get error <br>\n wasmtime run -S tcp=y -S inherit-network=y -S allow-ip-name-lookup=y noise_demo/target/wasm32-wasi/debug/noise_wasi_demo.wasm </p>\n<p>Error: Error { kind: Unsupported, message: \"operation not supported on this platform\" }</p>",
        "id": 505531641,
        "sender_full_name": "celine santosh",
        "timestamp": 1741902211
    },
    {
        "content": "<p><code>wasm32-wasi</code> (also know by its newer name <code>wasm32-wasip1</code>) has only very rudimentary TCP networking support.  You'll want to use the <code>wasm32-wasip2</code> target if you're using TCP.</p>",
        "id": 505532183,
        "sender_full_name": "Joel Dice",
        "timestamp": 1741902430
    },
    {
        "content": "<p>In addition to what Joel already covered, with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10249\">the recent addition of a <code>wasi-tls</code> implementation</a>, you should likely check out the example programs that are now in the codebase:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a3381e48775912a3e1a68c05180932f3ce74c5b4/crates/test-programs/src/bin/tls_sample_application.rs\">https://github.com/bytecodealliance/wasmtime/blob/a3381e48775912a3e1a68c05180932f3ce74c5b4/crates/test-programs/src/bin/tls_sample_application.rs</a></p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a3381e48775912a3e1a68c05180932f3ce74c5b4/crates/test-programs/src/tls.rs\">https://github.com/bytecodealliance/wasmtime/blob/a3381e48775912a3e1a68c05180932f3ce74c5b4/crates/test-programs/src/tls.rs</a></p>\n<p><code>wasmtime run</code> on main has <code>-S tls</code>, so you should be able to try it out that way.</p>\n<p>On the lib side, you'll have to fork the relevant program and fill out the conditional compilation bits that do the TCP.</p>\n<p>TCP might be the easier bit there -- as far as crypto goes, this actually recently came up on Zulip, so I made an <a href=\"https://github.com/bytecodealliance/component-docs/issues/213\">issue in the component-docs repo</a> to get it added to the component model docs -- there are a bunch of ways to get crypto working, at various levels of completeness/testing.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/10249\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/75973ee7659eaff1e88acdeea88518c7ab35c410/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646361306638396435333162626139373036663866396666333730393032396535323930333563383039333538636530386339623834653631326132343739382f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3130323439&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/10249\" title=\"Initial implementation of Wasi-tls (Transport Layer Security)  by jsturtevant · Pull Request #10249 · bytecodealliance/wasmtime\">Initial implementation of Wasi-tls (Transport Layer Security)  by jsturtevant · Pull Request #10249 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">fixes: #10089\nThis adds a crate that provides the Wasmtime host implementation for the wasi-tls API.\nThe wasi-tls world allows WebAssembly modules to perform SSL/TLS operations,\nsuch as establishin...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/a3381e48775912a3e1a68c05180932f3ce74c5b4/crates/test-programs/src/bin/tls_sample_application.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c732537947904852b692b1c92666cdd4aa809876/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653936303866346237366435396138633366313639333736346131393561626465323435356334373162636231323063633133306533363962633838313437632f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a3381e48775912a3e1a68c05180932f3ce74c5b4/crates/test-programs/src/bin/tls_sample_application.rs\" title=\"wasmtime/crates/test-programs/src/bin/tls_sample_application.rs at a3381e48775912a3e1a68c05180932f3ce74c5b4 · bytecodealliance/wasmtime\">wasmtime/crates/test-programs/src/bin/tls_sample_application.rs at a3381e48775912a3e1a68c05180932f3ce74c5b4 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/a3381e48775912a3e1a68c05180932f3ce74c5b4/crates/test-programs/src/tls.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c732537947904852b692b1c92666cdd4aa809876/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653936303866346237366435396138633366313639333736346131393561626465323435356334373162636231323063633133306533363962633838313437632f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a3381e48775912a3e1a68c05180932f3ce74c5b4/crates/test-programs/src/tls.rs\" title=\"wasmtime/crates/test-programs/src/tls.rs at a3381e48775912a3e1a68c05180932f3ce74c5b4 · bytecodealliance/wasmtime\">wasmtime/crates/test-programs/src/tls.rs at a3381e48775912a3e1a68c05180932f3ce74c5b4 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/component-docs/issues/213\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8a64867d9d5be57e8ed9bac97d81ce1782803d44/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373365326233613964333737656232643734306639643135653731643764366635353732646431363932363039316131636466373539656264333939306339372f62797465636f6465616c6c69616e63652f636f6d706f6e656e742d646f63732f6973737565732f323133&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/component-docs/issues/213\" title=\"Note the implementations/usage patterns of crypto that are wasm-ready · Issue #213 · bytecodealliance/component-docs\">Note the implementations/usage patterns of crypto that are wasm-ready · Issue #213 · bytecodealliance/component-docs</a></div><div class=\"message_embed_description\">A great answer popped on up Zulip that might be worth sharing more widely: #general &gt; Stable crypto library which can be converted to wasm @ 💬 It would be great if there was a page (likely in \"Adva...</div></div></div>",
        "id": 505620408,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1741943209
    },
    {
        "content": "<p>Thanks a lot for the insights!</p>",
        "id": 505647040,
        "sender_full_name": "celine santosh",
        "timestamp": 1741950815
    }
]