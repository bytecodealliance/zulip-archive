[
    {
        "content": "<p>Hey there! I'm new here,</p>\n<p>I have been wanting to start poking around wasm and wasm component model for a while, I believe the potential is huge and love what you folks are doing. I've read about the tech, I'm familiar with it but I have not practical experience beyond a few hello words in wasm and not at all with components. I do have experience with Rust. I hope my questions and noob eyes help improving the experience for fellow newcomers to the ecosystem and also as a somewhat reference. Sorry if my questions have already been answered, I couldn't find them.</p>\n<p>I want to go deep into the ecosystem, my general approach to that is to start an ambitious project that forces me to understand how things really work. My hobby project is about building a platform to allow developers produce software in any language they like and consume software in any other language they don't like but that is available to them. WASM/WASI and Components are perfect for that.</p>\n<p>Now, I've started with the calculator tutorial. But the moment I go out of the tutorial I have a hard time understanding how to do things and there seem to be multiple ways of doing them. It all seems to go down the package manager/building experience.</p>\n<p>My follow-up calculator step is:</p>\n<ul>\n<li>I have a <code>calculate</code> component in typescript</li>\n<li>I have an <code>add</code> component in rust that uses calculate but only adds</li>\n<li>I have a <code>double</code> component in rust that uses add to add the same number</li>\n</ul>\n<h2>Building my first WASM Component</h2>\n<p>Building Calculate in Typescript and publish it with wasn't easy. <code>jco</code> kept failing and still does with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">jco</span><span class=\"w\"> </span><span class=\"n\">componentize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">initialize</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span>\n<span class=\"nc\">Exception</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">evaluating</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"n\">script</span>\n<span class=\"n\">ReferenceError</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">loading</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"s\">\"./simple-calculator.js\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">resolved</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"s\">\"simple-calculator.js\"</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"nc\">No</span><span class=\"w\"> </span><span class=\"n\">such</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">directory</span>\n</code></pre></div>\n<p>I had to write my own script using <code>componentize-js</code>. That worked, then I was surprised I needed to publish both the wit and wasm modules to my local registry using <code>wkg</code>. Is there a way where wkg can manage the whole component? I'm looking for a similar experience to that of cargo/npm.</p>\n<h2>Package Manager</h2>\n<h3>Installing deps</h3>\n<p>I've gotten to know that <code>wkg</code> is the 'package manager?', took me a while to get it to work. I would admit here skill issue and LLM added confusion. Looks like LLMs are yet to learn a lot more about WIT syntax. </p>\n<p>When running it in my <code>add</code> component, I see it pulls many wit files, including my calculate one. It may be I had the wrong expectations but I was expecting it to:</p>\n<ul>\n<li>Pull the wit files (did)</li>\n<li>Pull the wasm component (didn't)</li>\n</ul>\n<p>First question, how do I make the wasm component available?</p>\n<h3>Building <code>add</code> component</h3>\n<p>When building a component that depends on another one, things got interesting. My rust bindings aren't working, initially they were pointing to my <code>wit/add.wit</code> but I needed to change them to just <code>wit</code> so it could find the deps and include <code>generate_all</code>. Funny it worked for rust-analyzer but when running <code>cargo component build</code> it doesn't work, can't find my package <code>calculate</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">package</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">my</span><span class=\"p\">:</span><span class=\"nc\">calculate</span><span class=\"o\">@</span><span class=\"mf\">1.0.0</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">known</span><span class=\"w\"> </span><span class=\"n\">packages</span><span class=\"p\">:</span>\n<span class=\"w\">           </span><span class=\"nc\">example</span><span class=\"p\">:</span><span class=\"nc\">rust</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"o\">@</span><span class=\"mf\">1.0.0</span>\n</code></pre></div>\n<p>It is not clear to me, in order to use a dependency fetched with <code>wkg</code> if I need to specify the path manually or not in my <code>Cargo.toml</code> file. Turns out it is not, but I do need to specify the dep like this.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">package</span><span class=\"p\">.</span><span class=\"n\">metadata</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">dependencies</span><span class=\"p\">]</span>\n<span class=\"s\">\"my:calculate\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"1.0.0\"</span>\n</code></pre></div>\n<p>This behavior may be different from typescript importing, as I haven't imported anything in a ts project yet. I do see a <code>wkg.lock</code> though so. Are all wasm deps meant to be managed through the wkg.lock/toml configurations? Is the Cargo.toml going away? What is the unification plan there?</p>\n<h2>Running a component</h2>\n<p>Running a component is hard when you're composing stuff. Also the composition work is exposed to the user (unless I'm missing some CLI tool or command that does it for you). I need to make sure I compose all the wasm modules into a single one using <code>wac</code> (another CLI, one of the major sources of confusion for me, the many different CLIs there are). So I got to componse my two modules, <code>add</code> and <code>calculate</code>. Great, now it fails with some other missing stuff:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">composed</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">component</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">http</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"o\">@</span><span class=\"mf\">0.2.3</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">matching</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">linker</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">instance</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">fields</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"> </span><span class=\"k\">type</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">resource</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">missing</span>\n</code></pre></div>\n<p>I guess I could remove these deps since I'm not really using them but that would just postpone this problem for future more advanced tests I had planned. So I'm wondering, how do I manage this?</p>\n<p>Is there a future planned (or already exists) where I can do, I'm gonna create yet another hypothetical CLI:</p>\n<ul>\n<li>wasm fetch</li>\n<li>wasm build</li>\n<li>wasm publish</li>\n<li>wasm run</li>\n</ul>\n<p>Where those commands manage the deps installation and composition. I get the main difficulty lies around the different languages behavior but, are there plans to converge? At the end, the languages would need their bindings for imported wasm components (should be handled by wasm fetch IMO) and the build process, wasm can forward that build to the language tooling and then finish up with the composition (or allowing to skip composition in favor of dynamic linking by the runtime).</p>\n<p>I see many wasm platforms shine on this, probably part of the value added and why the foundational tooling is not there but, for me, not looking into any platform this fragmentation is the main barrier to the ecosystem I'm facing right now. Maybe I'm looking into old tools/docs. Please would appreciate some guidance into what's the common/main way of achieving this with low friction and ease of use.</p>\n<p>Again, thank you for this. It's really pushing software towards what I believe should be.</p>",
        "id": 538290575,
        "sender_full_name": "Francisco López",
        "timestamp": 1757355877
    },
    {
        "content": "<p>Be aware that <code>cargo component</code> has been deprecated in favor of the Rust <code>wasm32-wasip2</code> target. There is ongoing work to rewrite relevant documentation.</p>",
        "id": 538294770,
        "sender_full_name": "Lann Martin",
        "timestamp": 1757357436
    },
    {
        "content": "<p>As you have noticed, LLMs have not slurped up enough data on component model spec or tooling to be useful. I'd suggest mostly avoiding the use of LLMs in this area for now.</p>",
        "id": 538295069,
        "sender_full_name": "Lann Martin",
        "timestamp": 1757357562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480579\">Lann Martin</span> <a href=\"#narrow/channel/206238-general/topic/Component.20Model.20Dev.20Exp/near/538295069\">said</a>:</p>\n<blockquote>\n<p>As you have noticed, LLMs have not slurped up enough data on component model spec or tooling to be useful. I'd suggest mostly avoiding the use of LLMs in this area for now.</p>\n</blockquote>\n<p>yep, they got me into a few rabbit holes that made it all more difficult. It's been the first thing I'm learning in a while and I hoped to also try LLMs in the process of helping learn new concepts and tools but it backfired :)</p>",
        "id": 538295426,
        "sender_full_name": "Francisco López",
        "timestamp": 1757357702
    },
    {
        "content": "<p>Thanks for writing this all up! The way I would personally phrase it is that we've been spending a lot of energy and work on simply getting a single component to run, much less a composed one. Everything we do to make a single component better in the long run makes the compositional story (what you're looking for here) better as well. </p>\n<p>It's going to take a lot of work and design to get to the future you're describing, and a lot of us share a similar vision and desire to get there. Given how aspirational it is, though, it's going to take time and manpower which are limited resources and are currently allocated elsewhere</p>",
        "id": 538326098,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757372131
    }
]