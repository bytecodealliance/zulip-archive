[
    {
        "content": "<p>Hi!</p>\n<p>I'm working on creating a sort of game \"scripting\" system where scripts are created by simply implementing a trait, let's call it <code>GameScript</code>. The goal is to allow implementations of <code>GameScript</code> to be compiled to WASM components and hot reloaded during development, and in a release build, have them be statically compiled into the main game binary as simple trait objects. These guest \"scripts\" would be called every frame of the game.</p>\n<p>Just as I have a <code>GameScript</code> trait for guest code, I have a <code>ScriptHost</code> trait for a host implementation. This would be implemented by the game engine itself, but it could also be implemented by any type so that the game scripts can be tested.</p>\n<p>I have most of this working, but the part I'm struggling with is how to structure data on the host side, in terms of <code>Linker</code>s and <code>Store</code>s.</p>\n<p>Here's what I currently have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">rc</span><span class=\"p\">::</span><span class=\"n\">Rc</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">cell</span><span class=\"p\">::</span><span class=\"n\">RefCell</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"p\">::</span><span class=\"n\">wasm_runner</span><span class=\"p\">::</span><span class=\"n\">game_script</span><span class=\"p\">::</span><span class=\"n\">api</span><span class=\"p\">::</span><span class=\"n\">host</span><span class=\"p\">::</span><span class=\"n\">Host</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">script_api</span><span class=\"p\">::</span><span class=\"n\">ScriptHost</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">path</span><span class=\"p\">::</span><span class=\"n\">Path</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span>\n<span class=\"w\">    </span><span class=\"n\">component</span><span class=\"p\">::{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"../script-api/wit\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">WasmEngine</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ScriptHost</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">engine</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Engine</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">WasmHost</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">scripts</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">GuestScript</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">host_impl</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasmHost</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ScriptHost</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">WasmEngine</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">H</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">ScriptApiWorld</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">state</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">WasmHost</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">host_impl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasmHost</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Rc</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">RefCell</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">)),</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">scripts</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">vec</span><span class=\"o\">!</span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">host_impl</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">load_script</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"n\">Path</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">guest_script</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">GuestScript</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">wasm_path</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">host_impl</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"n\">guest_script</span><span class=\"p\">.</span><span class=\"n\">register</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">scripts</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">guest_script</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">on_update</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">scripts</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">script</span><span class=\"p\">.</span><span class=\"n\">on_update</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">GuestScript</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ScriptHost</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ScriptApiWorld</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Component</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">WasmHost</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ScriptHost</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">GuestScript</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">wasm_path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"n\">Path</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">engine</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Engine</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">WasmHost</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">host_impl</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasmHost</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">convert_to_component</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm_path</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_binary</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component_bytes</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">host_impl</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ScriptApiWorld</span><span class=\"p\">::</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">register</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// TODO - consider using self.store.data_mut() to swap out data?</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">bindings</span><span class=\"p\">.</span><span class=\"n\">call_register_script</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">on_update</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">bindings</span><span class=\"p\">.</span><span class=\"n\">call_on_update</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Implements the host API from the WIT definition.</span>\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">WasmHost</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ScriptHost</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Rc</span><span class=\"o\">&lt;</span><span class=\"n\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ScriptHost</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WasmHost</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">clone</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Rc</span><span class=\"p\">::</span><span class=\"n\">clone</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">host</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ScriptHost</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WasmHost</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">().</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">create_entity</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">().</span><span class=\"n\">create_entity</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">convert_to_component</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"n\">Path</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">path</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">wit_component</span><span class=\"p\">::</span><span class=\"n\">ComponentEncoder</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">().</span><span class=\"n\">module</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">encode</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And here's a very simple usage of it:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">script_api</span><span class=\"p\">::</span><span class=\"n\">ScriptHost</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">script_runner</span><span class=\"p\">::</span><span class=\"n\">wasm_runner</span><span class=\"p\">::</span><span class=\"n\">WasmEngine</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wasm_runner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasmEngine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">TestHost</span><span class=\"w\"> </span><span class=\"p\">{});</span>\n\n<span class=\"w\">    </span><span class=\"n\">wasm_runner</span><span class=\"p\">.</span><span class=\"n\">load_script</span><span class=\"p\">(</span><span class=\"s\">\"target/wasm32-unknown-unknown/release/scripts.wasm\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">1000</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">wasm_runner</span><span class=\"p\">.</span><span class=\"n\">on_update</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">TestHost</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ScriptHost</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">TestHost</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{msg}\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">create_entity</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>My issue: I would prefer to pass in <code>&amp;mut TestHost</code> to functions like <code>WasmEngine::on_update()</code>, instead of passing ownership of <code>TestHost</code> into <code>WasmEngine</code>. However, when I want to actually call a guest function in a component, I have to pass <code>&amp;mut Store</code>, which seems to need to own an implementation of my <code>ScriptHost</code> trait. I hacked this for now by storing the implementation in an <code>Rc&lt;RefCell&lt;&gt;&gt;</code> but that doesn't seem like the right way to do things.</p>\n<p>If I want to do what I'm describing, does that mean I'll have to create a new <code>Store</code> every time I call a guest's <code>on_update()</code> function? But then if the guest implementation stores state, that would get reset, right?</p>\n<p>I'm curious what other patterns people have come up with. Maybe the <code>ScriptHost</code> implementation should be owning the <code>Store</code>? But I've been running with the assumption I should have one <code>Store</code> per component. Is that a false assumption?</p>\n<p>I see <a href=\"https://docs.wasmtime.dev/api/wasmtime/component/trait.HasData.html#example-host-for-u-mylibrary-using-storet\">this documentation</a> which was linked in zulip for an unreleased API for wasmtime, which describes this situation:</p>\n<blockquote>\n<p>Let’s say you’re in a situation where you’re a library which wants to create a “simpler” trait than the Host-generated traits from bindgen! and then you want to implement Host in terms of this trait</p>\n</blockquote>\n<p>That _might_ be relevant to me, but I'm not yet sure if it will work out.</p>",
        "id": 520356360,
        "sender_full_name": "Brian Schwind",
        "timestamp": 1748233542
    },
    {
        "content": "<p>FWIW from my perspective you're definitely on the right track and you've got all the right intuitions here, and sadly I at least don't know of a great solution for you. To answer some of your direct questions:</p>\n<blockquote>\n<p>does that mean I'll have to create a new <code>Store</code> every time I call a guest's <code>on_update()</code> function? But then if the guest implementation stores state, that would get reset, right?</p>\n</blockquote>\n<p>Correct, a <code>Store</code> is a unit of state for components so if you make a new store each time you'll have to also make a new instance each time. You're pretty likely to not want to do that so you'll either want to use a store-per-plugin (helps keep plugins isolated from each other) or a store-per-process (note that this will \"leak\" instances though since there's no internal GC, instances get deallocated when the store is deallocated). If you're hot-reloading my hunch is you want a store-per-plugin, so that way when a plugin gets reloaded you'll free up all wasm state.</p>\n<blockquote>\n<p>Maybe the <code>ScriptHost</code> implementation should be owning the <code>Store</code>? But I've been running with the assumption I should have one <code>Store</code> per component. Is that a false assumption?</p>\n</blockquote>\n<p>I think your store-per-component architecture is best for your use case, so I'd stick with that. It also unfortunately wouldn't work to put the store in <code>ScriptHost</code> somehow because to call a wasm  method you need <code>&amp;mut Store</code>, so if you've borrowed <code>&amp;mut Store</code> from <code>&amp;mut ScriptHost</code> then you won't be able to access <code>&amp;mut ScriptHost</code> when the host is called. (that'd be unsound aliasing otherwise)</p>\n<blockquote>\n<p>That _might_ be relevant to me, but I'm not yet sure if it will work out.</p>\n</blockquote>\n<p>Alas probably not, the documentation you linked is about providing a host API via <code>bindgen!</code> in terms of a custom handwritten trait, but the problem you're running into is one moreso of ownership than modeling functionality.</p>\n<hr>\n<p>My best suggestion for you is that you want something along the lines of <a href=\"https://docs.rs/scoped-tls/latest/scoped_tls/\"><code>scoped_tls</code></a>. That way the <code>T</code> in <code>Store&lt;T&gt;</code> wouldn't own your <code>ScriptHost</code> implementation. You'd use <code>scoped_tls</code> to transfer the mutable borrow from the entrypoint of the wasm invocation to where the host is called on the other side. Wasmtime unfortunately has no means of transferring per-call state from the caller of wasm to the callee host function.</p>\n<p>I'll note that <code>scoped_tls</code> probably doesn't exactly fit your use case, you want to transfer <code>&amp;mut T</code> across call frames, not <code>&amp;T</code>, so you'd probably have to tailor it for this use case (or there may already be creates that do that of which I'm unaware).</p>\n<p>At a high level though most of the embeddings I've seen place owned state within the <code>T</code> of <code>Store&lt;T&gt;</code>.  That's arguably due to Wasmtime's design though of not supporting a <code>&amp;mut T</code> being transferred across function calls. It's an interesting idea though and might be an interesting feature to add to Wasmtime... (I'm not sure how exactly we'd go about it though)</p>",
        "id": 520570223,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1748316889
    },
    {
        "content": "<p>Thank you for the reply, glad to hear my assumptions are mostly in line! I'll take this as a challenge then, and see if I can come up with a pattern that works. Thanks for the <code>scoped_tls</code> tip, I'll try to learn from it.</p>\n<p>To start, each plugin will run sequentially on a single thread, with no contention on the <code>ScriptHost</code>, so I can probably figure out some way to pass ownership of it around with moves, or <code>mem::swap</code>ping <code>Option</code>s or something.</p>\n<p>Once I want to execute the plugins in parallel, there's probably no getting around storing <code>ScriptHost</code> in an <code>Arc</code> or something similar. Perhaps if the WASM host implementation just accepted a read-only <code>&amp;ScriptHost</code> and recorded commands to be run later, that could work.</p>\n<p>I'll think more about it and post an update later if I come up with something good.</p>",
        "id": 520573817,
        "sender_full_name": "Brian Schwind",
        "timestamp": 1748318647
    },
    {
        "content": "<p>Ah yeah if you want threads you're almost surely going to want <code>Arc</code> which trivializes this since you can throw a clone in each plugin. </p>\n<p>Otherwise you've also got a good point about movement. While not the most ergnomic it's a pattern I've also used before. It means you wouldn't be able to take <code>&amp;mut ScriptHost</code> as your argument when calling a wasm function, it'd have to be something like <code>&amp;mut Option&lt;ScriptHost&gt;</code> or something with some sort of internal take-ability, but if that works for your design I think that could be reasonable -- basically just a runtime check of \"you put the thing here, right? ok let's call the method\"</p>",
        "id": 520574173,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1748318874
    },
    {
        "content": "<p>I'm willing to take a hit on ergonomics for the game \"engine\" (can barely be called an engine yet) side of things as long as the plugin authoring side remains nice, and the execution of the WASM plugins is fast enough. A game made this way would still statically compile the trait implementations into the final binary without any WASM executing capability at all, unless I wanted to support third-party user mods. So performance is only a small worry for development and not the final product.</p>",
        "id": 520574602,
        "sender_full_name": "Brian Schwind",
        "timestamp": 1748319147
    },
    {
        "content": "<p>So far the \"move ownership of the <code>ScriptHost</code> implementation around\" is working the best. It's a bit cumbersome in the engine code, but that is at least hidden from script/plugin authors. Essentially looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// WasmEngine</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">on_update</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">H</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">H</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">scripts</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"p\">.</span><span class=\"n\">on_update</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">host</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// GuestScript</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">on_update</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">H</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">H</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">().</span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">bindings</span><span class=\"p\">.</span><span class=\"n\">call_on_update</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">().</span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">take</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">host</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Usage</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">test_host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TestHost</span><span class=\"w\"> </span><span class=\"p\">{};</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wasm_runner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasmEngine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n\n<span class=\"n\">test_host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm_runner</span><span class=\"p\">.</span><span class=\"n\">load_script</span><span class=\"p\">(</span><span class=\"s\">\"target/wasm32-unknown-unknown/release/scripts.wasm\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">test_host</span><span class=\"p\">);</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">time</span><span class=\"p\">::</span><span class=\"n\">Instant</span><span class=\"p\">::</span><span class=\"n\">now</span><span class=\"p\">();</span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">1000</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">test_host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm_runner</span><span class=\"p\">.</span><span class=\"n\">on_update</span><span class=\"p\">(</span><span class=\"n\">test_host</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">test_host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm_runner</span><span class=\"p\">.</span><span class=\"n\">on_draw</span><span class=\"p\">(</span><span class=\"n\">test_host</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 521007736,
        "sender_full_name": "Brian Schwind",
        "timestamp": 1748486441
    },
    {
        "content": "<p>I'll need to have these functions return <code>Result</code> with the host in the Err() variant, so if the script panics I can get ownership of the <code>host</code> back.</p>\n<p>I'll go with this pattern for now until I think of something better or it becomes a huge pain. Thanks again <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> for helping me think through this!</p>",
        "id": 521007920,
        "sender_full_name": "Brian Schwind",
        "timestamp": 1748486575
    },
    {
        "content": "<p>A bit late, but one thing I might recommend is threading around <code>&amp;mut T</code> through which you can acquire ownership of <code>H</code>. That'll make it a bit easier to pass around and scope the \"take out and put back in\" to just happening around the wasm. It'll also help the error case where you can still \"put back in\" when wasm generates an error such as a trap. An example would be to pass around <code>&amp;mut Option&lt;H&gt;</code> but you might also want to wrap that up in something more official like <code>&amp;mut MyTypeContainingOptionH</code> or similar</p>",
        "id": 521317462,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1748617995
    },
    {
        "content": "<p>Not late at all! So if I do that then the engine code (game engine, not wasm engine) won't need to do that ownership dance - but I would need to store test_host (from the example above) in that wrapper type, right?</p>",
        "id": 521324574,
        "sender_full_name": "Brian Schwind",
        "timestamp": 1748620162
    },
    {
        "content": "<p>right yeah, and you'd still have to do the ownership dance, but only around invoking a wasm function (so e.g. in <code>on_update</code>) but you wouldn't have to do that anywhere else (e.g. not in the <code>Usage</code> section above)</p>",
        "id": 521324744,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1748620217
    },
    {
        "content": "<p>I'll try that out tomorrow, that sounds nicer. The wrapper type might need a Deref/DerefMut to be more easily used in other contexts but I'll see how the API feels with that change</p>",
        "id": 521325532,
        "sender_full_name": "Brian Schwind",
        "timestamp": 1748620501
    },
    {
        "content": "<p>yeah IMO this is a reasonable spot for a <code>Deref</code> impl, the only place it would \"fail\" is during the wasm call but you'd audit those and it's be relatively easy to avoid using the original type that was passed in</p>",
        "id": 521325643,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1748620546
    },
    {
        "content": "<p>This turned out to be a great suggestion! I just have a very simple <code>HostWrapper</code> struct that looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">HostWrapper</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ScriptHost</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ScriptHost</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">HostWrapper</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">H</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">into_inner</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">H</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">.</span><span class=\"n\">take</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In the part of my game engine where I want to execute all the WASM guest scripts, I can temporarily put it in this wrapper and pass it around, and then call <code>.into_inner()</code> at the end to get back the owned value. The calling code, and a lot of the internal code, became a lot simpler. Nice!</p>",
        "id": 521442312,
        "sender_full_name": "Brian Schwind",
        "timestamp": 1748697644
    }
]