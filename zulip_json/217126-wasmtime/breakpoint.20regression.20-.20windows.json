[
    {
        "content": "<p>k, after that confusion, have reproduced the regression I wanted. with latest everything, breakpoints using wasmtime work, breakpoints using c-api/dll don't.   repro incoming.</p>",
        "id": 544486804,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760343132
    },
    {
        "content": "<p>think the problem is picking up wrong version of wasmtime.dll or system can't find it. debug is really sensitive with that stuff, so most robust way seems to be to build c-api static.</p>\n<p>gpt doesn't know how to do that, current tree, it says do this then build as normal.</p>\n<p>set WASMTIME_STATIC_LIB=1<br>\nset WASMTIME_STATIC=1</p>\n<p>... but trying to bind to that output get a bunch of unresolved.</p>",
        "id": 544492582,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760344748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448652\">Steve Williams</span> has marked this topic as unresolved.</p>",
        "id": 544492668,
        "sender_full_name": "Notification Bot",
        "timestamp": 1760344771
    },
    {
        "content": "<p>got static c-api test working. need to define<br>\nWASM_API_EXTERN=;WASI_API_EXTERN=</p>\n<p>&amp; bind libs no longer pulled from dll we're no longer referencing.</p>\n<p>#pragma comment(lib, \"ws2_32.lib\")<br>\n#pragma comment(lib, \"advapi32.lib\")<br>\n#pragma comment(lib, \"userenv.lib\")<br>\n#pragma comment(lib, \"ntdll.lib\")<br>\n#pragma comment(lib, \"shell32.lib\")<br>\n#pragma comment(lib, \"ole32.lib\")<br>\n#pragma comment(lib, \"bcrypt.lib\")</p>\n<p>or however.</p>",
        "id": 544497265,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760346114
    },
    {
        "content": "<p>breakpoints not working for me, static c-api also, but from wasmtime.exe they work.</p>",
        "id": 544498050,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760346345
    },
    {
        "content": "<p>just a minute, this could be false alarm too. my test broken. sorry :)</p>",
        "id": 544501762,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760347527
    },
    {
        "content": "<p>.</p>",
        "id": 544549674,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760361148
    },
    {
        "content": "<p>as of right now c-api debugging using wasm instead of wasmtime interfaces not working for me on windows.<br>\nit could still be user error, but growing increasingly confident there's an issue. repro to follow</p>",
        "id": 544558214,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760363263
    },
    {
        "content": "<p>this : <a href=\"https://docs.wasmtime.dev/c-api/\">https://docs.wasmtime.dev/c-api/</a></p>\n<p>doesn't explain how to build c-api static or how to bind to it. process is above, as far as I can figure.</p>",
        "id": 544566759,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760365478
    },
    {
        "content": "<p>looking for a c-api app that loads fizzbuzz.wasm with debug<br>\n<a href=\"/user_uploads/15107/sTHTeBCk6aobI8lsZa6iDd2g/PastedText.txt\">PastedText.txt</a></p>",
        "id": 544586869,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760371913
    },
    {
        "content": "<p>output there - same wasm, run from wasmtime &amp; c_api app. wasmtime can break, c_api app cannot.<br>\nrepro in a minute.</p>",
        "id": 544586990,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760371961
    },
    {
        "content": "<p>repro: <a href=\"http://advance-software.com/misc/test_breakpoint.zip\">http://advance-software.com/misc/test_breakpoint.zip</a></p>",
        "id": 544587874,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760372349
    },
    {
        "content": "<p>to reproduce, build your wasmtime.exe &amp; put it in dist subdirectory. there's a 0 length placeholder there right now.</p>",
        "id": 544588017,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760372405
    },
    {
        "content": "<p>Platform: Windows 11/64</p>\n<p>should then be able to : lldb -- .\\wasmtime.exe  -D debug-info --invoke app_init .\\breakable.wasm<br>\n(lldb)  b app_init<br>\n(lldb) r</p>\n<p>&amp; that works (for me)</p>",
        "id": 544588224,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760372484
    },
    {
        "content": "<p>then build the c-api test in host, using visual studio 2022  : a couple of hardwired paths in there to change but its mostly portable. resulting .exe should end up in dist subdir, overwriting the 0 length placeholder.</p>",
        "id": 544588467,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760372589
    },
    {
        "content": "<p>run it directly to verify it works (from dist) :  .\\test_wasmtime_debug_api.exe .\\breakable.wasm<br>\nshould get result : 42</p>",
        "id": 544588644,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760372665
    },
    {
        "content": "<p>then run under lldb : lldb -- .\\test_wasmtime_debug_api.exe .\\breakable.wasm<br>\n(lldb) b app_init<br>\n(lldb) r</p>\n<p>breakpoint not hit. that's the bug.</p>",
        "id": 544588743,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760372700
    },
    {
        "content": "<p>source to breakable.wasm is in wasm subdir - its trivial.</p>",
        "id": 544588838,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760372735
    },
    {
        "content": "<p>tried c-api buiit static &amp; dynamic. static my preference.</p>",
        "id": 544588970,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760372790
    },
    {
        "content": "<p>difference (guess) : wasmtime likely uses wasmtime API, the C API test uses the wasm API.</p>",
        "id": 544589714,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760373051
    },
    {
        "content": "<p>If anything isn't clear or anyone spots an obvious error, please just say.</p>",
        "id": 544590105,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760373200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"448652\">@Steve Williams</span> thanks for your interest. I've given this feedback in a few different ways before but I'll be more blunt this time: Zulip is not the place for a stream of consciousness. If you have specific questions, feel free to ask them, but a haphazard sequence of ~50 messages just from you, with no conversation, is not the appropriate use of this forum.</p>\n<p>To your specific topic, native debugging is known to be unreliable and we're working on an alternative, but it isn't ready yet. That's the whole update, sorry.</p>",
        "id": 544590424,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1760373315
    },
    {
        "content": "<p>dude, it's a repro for a regression.</p>",
        "id": 544590527,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760373359
    },
    {
        "content": "<p>its unreliable bcoz dll sensitivity on windows, that's why I'm trying to get it running static.</p>",
        "id": 544590622,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760373394
    },
    {
        "content": "<p>debugging does work. via wasmtime, it works. it doesn't work c-api. so whatever wasmtime is doing, c-api needs to. if I need to personally debug it, I guess that's tomorrow's job.</p>",
        "id": 544590799,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760373474
    },
    {
        "content": "<p>Please file an issue on GitHub then. Your stream-of-consciousness Zulip topics are difficult to follow and waste maintainers' time. Thanks.</p>",
        "id": 544591469,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1760373729
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/11846\">https://github.com/bytecodealliance/wasmtime/issues/11846</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/11846\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4aaaaaa71f2fbae977d8b2917926d2f4e96efe16/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303830383462333730363061353036393034666331646437353463386335316364336264356631333339373364653061656433313166363431663835663032332f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f3131383436&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/11846\" title=\"C API breakpoint triggering appears to have regressed - Windows 路 Issue #11846 路 bytecodealliance/wasmtime\">C API breakpoint triggering appears to have regressed - Windows 路 Issue #11846 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Test Case Repro: http://advance-software.com/misc/test_breakpoint.zip) Steps to Reproduce - Windows Build your wasmtime.exe &amp; put it in repro dist subdirectory. (there's a 0 length placeholder ther...</div></div></div>",
        "id": 544593827,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760374721
    },
    {
        "content": "<p>k, so it's debug time. grok says this triggers breakpoints. posting my thoughts here coz AI isn't always right so please correct if you know better.</p>\n<p><a href=\"https://x.com/i/grok/share/SFAEuYFH7BNfZc3Ui5EMzqBwI\">https://x.com/i/grok/share/SFAEuYFH7BNfZc3Ui5EMzqBwI</a></p>",
        "id": 544669327,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760423911
    },
    {
        "content": "<p>it would be helpful to know if breakpoints have regressed from C API all platforms. I don't think this is a Windows specific issue but it may be.</p>",
        "id": 544672321,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760425103
    },
    {
        "content": "<p>Grok thinks it's identified the cause but AIs talk a lot of nonsense &amp; I'm not familiar with the code, so who knows.<br>\nMaybe this helps.</p>\n<p><a href=\"https://x.com/i/grok/share/jTIYTmNBMlYB5YUFqS0VJvpes\">https://x.com/i/grok/share/jTIYTmNBMlYB5YUFqS0VJvpes</a></p>",
        "id": 544675945,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760426439
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/9909\">https://github.com/bytecodealliance/wasmtime/issues/9909</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/9909\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/78f1918e2e764a65b89fb49b6e467c10ce9963eb/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363663653565343465396666646462643132656139393736323731356337333637326463326466363038386237343536373034303438353237326438346437332f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f39393039&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/9909\" title=\"c-api: JIT debugging of wasm guest code not enabled 路 Issue #9909 路 bytecodealliance/wasmtime\">c-api: JIT debugging of wasm guest code not enabled 路 Issue #9909 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">According to the documentation it should be possible to use a source/line debugger with guest code running inside the wasmtime VM. This works well for rust embeddings, but when using the c-api (or ...</div></div></div>",
        "id": 544676855,
        "sender_full_name": "Steve Williams",
        "timestamp": 1760426759
    }
]