[
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"206238\" href=\"/#narrow/channel/206238-general/topic/Async.20component.20calls.20with.20exclusive.20locks.20on.20their.20stores\">#general &gt; Async component calls with exclusive locks on their stores</a> by <span class=\"user-mention silent\" data-user-id=\"234973\">Till Schneidereit</span>.</p>",
        "id": 541999952,
        "sender_full_name": "Notification Bot",
        "timestamp": 1759142156
    },
    {
        "content": "<p>Here's an example of using <code>Instance::run_concurrent</code> to start several concurrent calls to the guest and then join them all, in case it's useful: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/df21758b250366717d56ae9b972860de4e3d71bd/crates/misc/component-async-tests/tests/scenario/round_trip.rs#L197-L270\">https://github.com/bytecodealliance/wasmtime/blob/df21758b250366717d56ae9b972860de4e3d71bd/crates/misc/component-async-tests/tests/scenario/round_trip.rs#L197-L270</a>.  The bindings for that test are generated <a href=\"https://github.com/bytecodealliance/wasmtime/blob/df21758b250366717d56ae9b972860de4e3d71bd/crates/misc/component-async-tests/src/round_trip.rs#L5-L10\">here</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/df21758b250366717d56ae9b972860de4e3d71bd/crates/misc/component-async-tests/tests/scenario/round_trip.rs#L197-L270\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f476b816a6f6fd8f8ee6fefbce3eba582cf9c116/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373733383536643031336465666635363030356430616332343931303564306434326563393530376631613239363565663764336531623263333939643036392f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/df21758b250366717d56ae9b972860de4e3d71bd/crates/misc/component-async-tests/tests/scenario/round_trip.rs#L197-L270\" title=\"wasmtime/crates/misc/component-async-tests/tests/scenario/round_trip.rs at df21758b250366717d56ae9b972860de4e3d71bd · bytecodealliance/wasmtime\">wasmtime/crates/misc/component-async-tests/tests/scenario/round_trip.rs at df21758b250366717d56ae9b972860de4e3d71bd · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/df21758b250366717d56ae9b972860de4e3d71bd/crates/misc/component-async-tests/src/round_trip.rs#L5-L10\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f476b816a6f6fd8f8ee6fefbce3eba582cf9c116/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373733383536643031336465666635363030356430616332343931303564306434326563393530376631613239363565663764336531623263333939643036392f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/df21758b250366717d56ae9b972860de4e3d71bd/crates/misc/component-async-tests/src/round_trip.rs#L5-L10\" title=\"wasmtime/crates/misc/component-async-tests/src/round_trip.rs at df21758b250366717d56ae9b972860de4e3d71bd · bytecodealliance/wasmtime\">wasmtime/crates/misc/component-async-tests/src/round_trip.rs at df21758b250366717d56ae9b972860de4e3d71bd · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 542048501,
        "sender_full_name": "Joel Dice",
        "timestamp": 1759154411
    },
    {
        "content": "<p>Would you be able to post a gist of something that doesn't compile perhaps? I'm not quite following the various permutations that have been attempted here myself. Changing bindings behavior can radically change how you're supposed to use the generated APIs so it's not minor knobs to tune but moreso architectural foundations to change</p>",
        "id": 542052761,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1759155373
    },
    {
        "content": "<p>This comes from a project which I am currently rewriting and is a bit all over the place (doesn't even compile right now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>). But if it helps, my whole wasmtime implementation currently lives in <a href=\"https://github.com/celarye/discord-bot/blob/master/src/plugins/runtime.rs\">runtime.rs</a>. This repository also includes my WIT files in its <a href=\"https://github.com/celarye/discord-bot/blob/master/wit\">wit directory</a>.</p>\n<p>To repeat the current issues I am experiencing:</p>\n<ul>\n<li>\n<p>I cannot seem to access the <code>run_concurrent</code> method using bindgen-generated bindings.</p>\n<ul>\n<li>Even if I could I am not sure if it solves my issue as:<blockquote>\n<p>I am not sure how to incorporate this into my current design as <code>run_concurrent</code> still requires a mutable reference to a <code>Store</code>. Is there a way I can instead maybe store an <code>Accessor</code> in a struct which I can then just re-use? Maybe I am missing a way to make this work with <code>run_concurrent</code>?</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>If I add the <code>async</code> keyword in front of host functions they all break:</p>\n<blockquote>\n<p>Example error message: method <code>shutdown</code> is not a member of trait <code>HostFunctions</code>  not a member of trait <code>HostFunctions</code></p>\n</blockquote>\n</li>\n<li>\n<p>Generally wondering if there is some place I can find what all <code>bindgen!</code> config options do.</p>\n</li>\n</ul>\n<p>I am sorry for being all over the place before, I hope this helps to explain my issue a bit more.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/celarye/discord-bot/blob/master/src/plugins/runtime.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/839d3f698a934c3f4870be401ae0d421df81fcf3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626664353338353732643735356531336634353866653066646165303039376131663536343864303435346537623631343839626565626265396263313561332f63656c617279652f646973636f72642d626f74&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/celarye/discord-bot/blob/master/src/plugins/runtime.rs\" title=\"discord-bot/src/plugins/runtime.rs at master · celarye/discord-bot\">discord-bot/src/plugins/runtime.rs at master · celarye/discord-bot</a></div><div class=\"message_embed_description\">A WASI plugin based Discord bot, configurable through YAML. - celarye/discord-bot</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/celarye/discord-bot/blob/master/wit\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/839d3f698a934c3f4870be401ae0d421df81fcf3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626664353338353732643735356531336634353866653066646165303039376131663536343864303435346537623631343839626565626265396263313561332f63656c617279652f646973636f72642d626f74&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/celarye/discord-bot/blob/master/wit\" title=\"discord-bot/wit at master · celarye/discord-bot\">discord-bot/wit at master · celarye/discord-bot</a></div><div class=\"message_embed_description\">A WASI plugin based Discord bot, configurable through YAML. - celarye/discord-bot</div></div></div>",
        "id": 542067176,
        "sender_full_name": "Celarye",
        "timestamp": 1759158545
    },
    {
        "content": "<blockquote>\n<p>I cannot seem to access the <code>run_concurrent</code> method using bindgen-generated bindings.</p>\n</blockquote>\n<p>For this you're right you need a mutable reference to start, but the way it's intended to be used is that you start with a mutable reference and then internally within the closure you do all the async bits you could want. That would require you to structure the application to have concurrent bits within <code>run_concurrent</code>, although I'm not sure how feasible that would be for your use case. An example of this would be that <code>call_scheduled_job</code> would, for example, take <code>&amp;Accessor</code> as an argument. Alternatively if that weren't possible you could have a spawned tokio task which runs wasm and you communicate with that task via channels. That task would basically sit inside of <code>run_concurrent</code> listening on a channel and could coordinate work internally.</p>\n<blockquote>\n<p>If I add the <code>async</code> keyword in front of host functions they all break:</p>\n</blockquote>\n<p>Using <code>async | store</code> imports (which <code>async</code> functions in WIT default to) changes the shape of bindings generated. You can find a bit of documentation about that <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/bindgen_examples/_8_store_in_imports/index.html\">here</a>.</p>\n<blockquote>\n<ul>\n<li>Generally wondering if there is some place I can find what all <code>bindgen!</code> config options do.</li>\n</ul>\n</blockquote>\n<p>I'd recommend <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/macro.bindgen.html#options-reference\">this documentation</a> or <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/bindgen_examples/index.html\">this documentation</a>. If something is missing though feel free to file an issue! p3 stuff is pretty new so may not be fully integrated yet</p>",
        "id": 542120691,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1759173244
    },
    {
        "content": "<p>That is a good recommendation for how I could make async component calls work with my use case!</p>\n<blockquote>\n<p>Using <code>async | store</code> imports (which <code>async</code> functions in WIT default to)</p>\n</blockquote>\n<p>Ah I see, that explains the previous behavior I was seeing.</p>\n<p>Thanks for the linked options reference and examples, I will take a detailed look at them to try and understand <code>bindgen!</code> a bit better (as atm I don't really know what adding <code>store</code> to import or export does <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span>).</p>\n<p>Before I send:</p>\n<blockquote>\n<p>I cannot seem to access the <code>run_concurrent</code> method using bindgen-generated bindings.</p>\n</blockquote>\n<p>I am actually still not sure what I am doing wrong with that? The <a href=\"#narrow/channel/217126-wasmtime/topic/Async.20component.20calls.20with.20exclusive.20locks.20on.20their.20stores/near/542048501\">linked example</a> async instantiate a component and then have a <code>.run_concurrent</code> method, which I do not for some reason. I'll take another look to see if I can find what I am missing though.</p>",
        "id": 542126112,
        "sender_full_name": "Celarye",
        "timestamp": 1759174891
    },
    {
        "content": "<p>As in, the method doesn't exist at all on <code>Instance</code>? Or it doesn't exist on the generated bindings?</p>",
        "id": 542126832,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1759175108
    },
    {
        "content": "<p>(it's not part of the generated bindings, it's part of <code>Instance</code>)</p>",
        "id": 542126852,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1759175115
    },
    {
        "content": "<p>if it's not there double-check you've got the <code>component-model-async</code> feature enabled on the wasmtime crate</p>",
        "id": 542126889,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1759175127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"941481\">Celarye</span> <a href=\"#narrow/channel/217126-wasmtime/topic/Async.20component.20calls.20with.20exclusive.20locks.20on.20their.20stores/near/542126112\">said</a>:</p>\n<blockquote>\n<p>I am actually still not sure what I am doing wrong with that? The <a href=\"#narrow/channel/217126-wasmtime/topic/Async.20component.20calls.20with.20exclusive.20locks.20on.20their.20stores/near/542048501\">linked example</a> async instantiate a component and then have a <code>.run_concurrent</code> method, which I do not for some reason. I'll take another look to see if I can find what I am missing though.</p>\n</blockquote>\n<p><code>run_concurrent</code> is not generated or exposed as part of the generated bindings.  Instead, it's an associated function on the <code>Instance</code> type.  Consequently, you need to separately create the <code>Instance</code> and wrap it in the generated bindings so you can use it both directly and via the generated bindings.  See <a href=\"https://github.com/bytecodealliance/wasmtime/blob/df21758b250366717d56ae9b972860de4e3d71bd/crates/misc/component-async-tests/tests/scenario/round_trip.rs#L234-L236\">here</a> in the example.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/df21758b250366717d56ae9b972860de4e3d71bd/crates/misc/component-async-tests/tests/scenario/round_trip.rs#L234-L236\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9d638e26ed67e70c04f23cf9846e97f09a6119cc/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383236353530313164333737653263626233663534323835316365313834333130336535643536326632613566313663633066393366646237383139383631652f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/df21758b250366717d56ae9b972860de4e3d71bd/crates/misc/component-async-tests/tests/scenario/round_trip.rs#L234-L236\" title=\"wasmtime/crates/misc/component-async-tests/tests/scenario/round_trip.rs at df21758b250366717d56ae9b972860de4e3d71bd · bytecodealliance/wasmtime\">wasmtime/crates/misc/component-async-tests/tests/scenario/round_trip.rs at df21758b250366717d56ae9b972860de4e3d71bd · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 542127023,
        "sender_full_name": "Joel Dice",
        "timestamp": 1759175186
    },
    {
        "content": "<p>And also make sure the <code>component-model-async</code> feature is enabled like Alex said.</p>",
        "id": 542127114,
        "sender_full_name": "Joel Dice",
        "timestamp": 1759175220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/channel/217126-wasmtime/topic/Async.20component.20calls.20with.20exclusive.20locks.20on.20their.20stores/near/542127023\">said</a>:</p>\n<blockquote>\n<p><code>run_concurrent</code> is not generated or exposed as part of the generated bindings.  Instead, it's an associated function on the <code>Instance</code> type.  Consequently, you need to separately create the <code>Instance</code> and wrap it in the generated bindings so you can use it both directly and via the generated bindings.</p>\n</blockquote>\n<p>I see, and I assume I would then want to also combine this with <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Func.html#method.call_concurrent\"><code>Func::call_concurrent</code></a>, removing the need for a bindings generated instance? Is it planned for generated bindings to eventually gain support for this functionality as well?</p>",
        "id": 542136427,
        "sender_full_name": "Celarye",
        "timestamp": 1759178664
    },
    {
        "content": "<p>You <em>could</em> use it with <code>Func::call_concurrent</code>, but you could just as easily use it with the generated bindings as well, as is done <a href=\"https://github.com/bytecodealliance/wasmtime/blob/df21758b250366717d56ae9b972860de4e3d71bd/crates/misc/component-async-tests/tests/scenario/round_trip.rs#L252-L254\">here</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/df21758b250366717d56ae9b972860de4e3d71bd/crates/misc/component-async-tests/tests/scenario/round_trip.rs#L252-L254\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/fc45ba387d1bfc908f0f501aa6a6182eefa99977/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333361306130363237343334666136663363643639383866646334373563313035393237333236306361363865656235333736393738333564653935646532372f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/df21758b250366717d56ae9b972860de4e3d71bd/crates/misc/component-async-tests/tests/scenario/round_trip.rs#L252-L254\" title=\"wasmtime/crates/misc/component-async-tests/tests/scenario/round_trip.rs at df21758b250366717d56ae9b972860de4e3d71bd · bytecodealliance/wasmtime\">wasmtime/crates/misc/component-async-tests/tests/scenario/round_trip.rs at df21758b250366717d56ae9b972860de4e3d71bd · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 542137244,
        "sender_full_name": "Joel Dice",
        "timestamp": 1759179013
    },
    {
        "content": "<p>The generated bindings for an <code>async</code> WIT function will use <code>TypedFunc::call_concurrent</code> internally.</p>",
        "id": 542137541,
        "sender_full_name": "Joel Dice",
        "timestamp": 1759179145
    },
    {
        "content": "<p>From my standpoint (not knowing how and why things work under the hood) it would then be nice to have <code>run_concurrent</code> accessible from your generated bindings as well instead of having to create a separate <code>Instance</code> of the same component alongside your bindgen generated one?</p>",
        "id": 542139914,
        "sender_full_name": "Celarye",
        "timestamp": 1759179960
    },
    {
        "content": "<p>Yeah, that makes sense -- it would be a simple pass-through function, so easy to implement in the bindings generator.</p>",
        "id": 542143760,
        "sender_full_name": "Joel Dice",
        "timestamp": 1759181492
    },
    {
        "content": "<p>Should I make a feature request issue in the wasmtime repository for tracking purposes?</p>",
        "id": 542144100,
        "sender_full_name": "Celarye",
        "timestamp": 1759181666
    }
]