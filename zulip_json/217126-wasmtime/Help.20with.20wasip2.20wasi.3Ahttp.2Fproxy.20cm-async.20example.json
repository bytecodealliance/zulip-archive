[
    {
        "content": "<p>Hey! Hope this is an okay place to ask for some guidance here, I assume there's some dumb mistake I've made somewhere along the line but I haven't had much luck in figuring out what in particular I'm doing wrong, and haven't found a working example for implementing an async HTTP proxy component.</p>\n<p>Component is failing to be parsed at <code>TaskCancel</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>theo@theo-desktop-black:~/dev/mono/src/apps/wasmtime-wasi-proxy-test-rs$<span class=\"w\"> </span>cargo<span class=\"w\"> </span>run<span class=\"w\"> </span>--<span class=\"w\"> </span>../../../target/wasm32-wasip2/release/wasm_test_component.wasm\n<span class=\"w\">    </span>Finished<span class=\"w\"> </span><span class=\"sb\">`</span>dev<span class=\"sb\">`</span><span class=\"w\"> </span>profile<span class=\"w\"> </span><span class=\"o\">[</span>unoptimized<span class=\"w\"> </span>+<span class=\"w\"> </span>debuginfo<span class=\"o\">]</span><span class=\"w\"> </span>target<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">0</span>.12s\n<span class=\"w\">     </span>Running<span class=\"w\"> </span><span class=\"sb\">`</span>/home/theo/dev/mono/target/debug/wasmtime-wasi-proxy-test-rs<span class=\"w\"> </span>../../../target/wasm32-wasip2/release/wasm_test_component.wasm<span class=\"sb\">`</span>\nError:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>parse<span class=\"w\"> </span>WebAssembly<span class=\"w\"> </span>module\n\nCaused<span class=\"w\"> </span>by:\n<span class=\"w\">    </span>TaskCancel\n</code></pre></div>\n<p>With this setup (largely just copying <code>wasmtime_wasi_http</code> <a href=\"https://docs.wasmtime.dev/api/wasmtime_wasi_http/index.html#examples\">docs example</a> but with some added config flags enabled in desparation):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[tokio::main]</span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">env</span><span class=\"p\">::</span><span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Prepare the `Engine` for Wasmtime</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model_async</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Compile the component on the command line to machine code</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- fails here</span>\n</code></pre></div>\n<p>With these features and dependencies in my <code>Cargo.toml</code>:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"wasmtime-wasi-proxy-test-rs\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2024\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">anyhow</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span>\n<span class=\"n\">hyper</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"http1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"server\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">tokio</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"full\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"34.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"component-model-async\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"async\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"component-model\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">wasmtime-wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"34.0.1\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">wasmtime-wasi-http</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"34.0.1\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">http-body-util</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.1\"</span>\n<span class=\"n\">futures-util</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.3\"</span>\n</code></pre></div>\n<p>For this component:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wasi:http/proxy\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">generate_all</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">Component</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">http</span><span class=\"p\">::</span><span class=\"n\">incoming_handler</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">;</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">http</span><span class=\"p\">::</span><span class=\"n\">types</span><span class=\"p\">::{</span>\n<span class=\"w\">    </span><span class=\"n\">Fields</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">IncomingRequest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">OutgoingBody</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">OutgoingResponse</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ResponseOutparam</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Component</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"n\">_request</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">IncomingRequest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">outparam</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResponseOutparam</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hdrs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Fields</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"k\">await</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">resp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OutgoingResponse</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">hdrs</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">resp</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">().</span><span class=\"k\">await</span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"outgoing response\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"n\">ResponseOutparam</span><span class=\"p\">::</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">outparam</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">().</span><span class=\"k\">await</span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"outgoing stream\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">out</span><span class=\"p\">.</span><span class=\"n\">blocking_write_and_flush</span><span class=\"p\">(</span><span class=\"s\">b\"Hello, wasi:http/proxy world!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">.</span><span class=\"n\">to_vec</span><span class=\"p\">())</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"writing response\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">OutgoingBody</span><span class=\"p\">::</span><span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Built and validated as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>theo@theo-desktop-black:~/dev/mono/src/apps/wasm-test-component$<span class=\"w\"> </span>cargo<span class=\"w\"> </span>build<span class=\"w\"> </span>--target<span class=\"w\"> </span>wasm32-wasip2<span class=\"w\"> </span>--release\n<span class=\"w\">    </span>Finished<span class=\"w\"> </span><span class=\"sb\">`</span>release<span class=\"sb\">`</span><span class=\"w\"> </span>profile<span class=\"w\"> </span><span class=\"o\">[</span>optimized<span class=\"o\">]</span><span class=\"w\"> </span>target<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">0</span>.06s\ntheo@theo-desktop-black:~/dev/mono/src/apps/wasm-test-component$<span class=\"w\"> </span>wasm-tools<span class=\"w\"> </span>validate<span class=\"w\"> </span>../../../target/wasm32-wasip2/release/wasm_test_component.wasm<span class=\"w\"> </span>--features<span class=\"w\"> </span>cm-async<span class=\"w\"> </span>--verbose\n<span class=\"o\">[</span><span class=\"m\">2025</span>-07-15T17:05:58Z<span class=\"w\"> </span>INFO<span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"nb\">read</span><span class=\"w\"> </span>module<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">111</span>.89µs\n<span class=\"o\">[</span><span class=\"m\">2025</span>-07-15T17:05:58Z<span class=\"w\"> </span>INFO<span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span>module<span class=\"w\"> </span>structure<span class=\"w\"> </span>validated<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">489</span>.511µs\n<span class=\"o\">[</span><span class=\"m\">2025</span>-07-15T17:05:58Z<span class=\"w\"> </span>INFO<span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span>functions<span class=\"w\"> </span>validated<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">1</span>.307049ms\n</code></pre></div>\n<p>Anything obviously wrong here? I've checked out <code>wasmtime</code> to start digging through code, but if someone can tell me why I'm a dummy (as I'm currently just pattern matching at this point without any real understanding of what I'm doing) and obviate that search it would be greatly appreciated <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 528907416,
        "sender_full_name": "Theodore Brockman",
        "timestamp": 1752599741
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"937580\">@Theodore Brockman</span>.  The first thing I notice is that the signature of your <code>handle</code> function in the guest component is for <code>wasi:http/incoming-handler@0.2.x</code>, which predates the Component Model async ABI.  You'll want to use the <code>0.3.0-draft</code> version instead, which uses the async ABI.</p>\n<p>Here's an example: <a href=\"https://github.com/dicej/hello-wasip3-http\">https://github.com/dicej/hello-wasip3-http</a>.  Sorry there's no README.md yet -- I just threw that together yesterday.  If you install the latest <code>wasm-tools</code> and then run <code>make</code> in that directory, it should build a component you can run with <code>wasip3-prototyping</code>'s version of <code>wasmtime serve</code>.  You won't be able to run it on upstream Wasmtime until <code>wasmtime-wasi-http</code> support for p3 is upstreamed from <code>wasip3-prototyping</code>.  <span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> is in the process of upstreaming p3 support for both <code>wasmtime-wasi</code> and <code>wasmtime-wasi-http</code>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/hello-wasip3-http\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/bc3025158deaa85ed1b797abc7cb7609198f23d1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373137393736616637323364356661636539303232623630313764623432383666306466386539303832613464306339383365653530323534353030376633382f646963656a2f68656c6c6f2d7761736970332d68747470&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/hello-wasip3-http\" title=\"GitHub - dicej/hello-wasip3-http\">GitHub - dicej/hello-wasip3-http</a></div><div class=\"message_embed_description\">Contribute to dicej/hello-wasip3-http development by creating an account on GitHub.</div></div></div>",
        "id": 528909428,
        "sender_full_name": "Joel Dice",
        "timestamp": 1752600467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> definitely makes sense why it wouldn't be working then <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> thanks for the help and info!</p>",
        "id": 528920254,
        "sender_full_name": "Theodore Brockman",
        "timestamp": 1752604523
    }
]