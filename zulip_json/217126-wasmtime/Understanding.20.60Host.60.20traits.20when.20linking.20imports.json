[
    {
        "content": "<p>I am struggling to understand the <code>Host</code> trait requirements when using <code>wasmtime::component::bindgen!</code> and linking wasm component imports.</p>\n<p>I have a world which imports <code>wasi:io</code> so that I can use <code>input-stream</code> for communicating with the component. <code>input-stream</code> requires <code>wasi:io/poll</code>, <code>wasi:io/streams</code>, and <code>wasi:io/error</code>. I've included the <code>.wit</code> files for those in my <code>wit</code> folder. Everything works well until I try to add my imports to the linker with <code>World::add_to_linker</code>.</p>\n<p>When I call <code>add_to_linker</code>, I receive errors like <code>the trait bound </code>MyState: wasmtime_wasi::p2::bindings::io::error::Host<code> is not satisfied</code>. I have figured out a work around that requires a few things that seem odd based on the examples and documentation I've read. The work around involves:</p>\n<ol>\n<li>Defining <code>WorldImports</code> for <code>ResourceTable</code></li>\n<li>Returning a <code>&amp;mut</code> to the <code>ResourceTable</code> of <code>MyState</code> in the closure passed to the <code>add_to_linker</code> call</li>\n<li>Using <code>with</code> in the <code>bindgen!</code> call and providing import paths for <code>wasi:io/poll</code>, <code>wasi:io/streams</code>, and <code>wasi:io/error</code></li>\n<li>Allowing shadowing in the linker with <code>linker.allow_shadowing(true)</code></li>\n</ol>\n<p>My questions are:</p>\n<ol>\n<li>Why do I have to <code>impl WorldImports</code> on <code>ResourceTable</code> rather than <code>MyState</code> like I see in other examples? And why do I have to return a <code>&amp;mut</code> to the <code>ResourceTable</code> in my <code>add_to_linker</code> closure rather than a <code>&amp;mut</code> to MyState like I see in other examples?</li>\n<li>How can I generate the rust bindings/impls for <code>wasi:io/poll</code>, <code>wasi:io/streams</code>, and <code>wasi:io/error</code> without having them defined twice in the linker? I call <code>wasmtime_wasi::p2::add_to_linker_async(&amp;mut linker)?;</code> to satisfy the wasm interfaces. When coupled with the use of <code>with</code> in <code>bindgen!</code>, it results in them being defined twice. But if I don't use <code>with</code> in <code>bindgen!</code>, I don't get the implementation on the rust side.</li>\n</ol>",
        "id": 539356517,
        "sender_full_name": "Jonathan H",
        "timestamp": 1757792445
    },
    {
        "content": "<p>Hello! I think you're running into a similar issue as this thread -- <a class=\"message-link\" href=\"/#narrow/channel/217126-wasmtime/topic/WorldType.3A.3Aadd_to_linker.20including.20WASI.20imports/near/538455001\">#wasmtime &gt; WorldType::add_to_linker including WASI imports @ ðŸ’¬</a>  -- where you have WIT bits but you kind of want to skip them in the generated <code>add_to_linker</code>. Right now that's not implemented but having such an implementation seems reasonable to me.</p>",
        "id": 539568063,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757945072
    },
    {
        "content": "<p>Okay. Any tips for understanding what the Host impls are actually doing? I can kind of understand the guest side, but figuring out what the Store and Linker are actually doing in order to satisfy lifetime and trait requirements is overwhelming me. Iâ€™d like to get to a point where I can implement my own stream to pass into a guest instead of using <code>DuplexStream</code> from <code>tokio</code> if that helps narrow the scope at all.</p>",
        "id": 541106344,
        "sender_full_name": "Jonathan H",
        "timestamp": 1758664238
    },
    {
        "content": "<p>my suggestion, as the author of <code>wasmtime-wasi-io</code>, is to read the source of that crate and then see if you can use it for your purposes</p>",
        "id": 541109043,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1758665469
    },
    {
        "content": "<p><code>AsyncReadStream</code> and <code>AsyncWriteStream</code> from <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/p2/pipe/index.html\">https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/p2/pipe/index.html</a> may also be useful <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/p2/pipe.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/p2/pipe.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/p2/pipe.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/166ddc3b8b844a4c6fd715eda31e3729c8ef204d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636532623139646235313766373336366164646337313466396335653338373437636537643865396162376166383062643131326664656465303337353033332f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/p2/pipe.rs\" title=\"wasmtime/crates/wasi/src/p2/pipe.rs at main Â· bytecodealliance/wasmtime\">wasmtime/crates/wasi/src/p2/pipe.rs at main Â· bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 541109306,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1758665625
    }
]