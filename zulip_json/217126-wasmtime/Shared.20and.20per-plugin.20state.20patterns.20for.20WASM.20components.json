[
    {
        "content": "<p>Hey friends! I'm familiarising myself with the component model by building a <a href=\"https://github.com/TartanLlama/guy-fighter/tree/main\">simple plugin system</a>. At the moment, I have a single <code>Store</code> that is shared between my plugins. This store tracks the main application state, which is primarily registrations of data coming from the plugins.</p>\n<p>The basic pattern I have is: host calls <code>plugin.call_init()</code>, plugin calls <code>host_please_register_stuff(some_stuff)</code>.</p>\n<p>In the exported <code>host_please_register_stuff</code> function I need to identify from which plugin a given call came from, so that I can tie the registration to a plugin. As such, I have a comparatively large amount of global state, and a single integer plugin identifier that should be plugin-local state.</p>\n<p>What's the most idiomatic way to do this with Wasmtime? The main ways I considered were:</p>\n<ul>\n<li>Having one <code>Store</code> per plugin that stores the ID. Each store references the larger global state, which uses <code>RefCell</code> to allow mutating.</li>\n<li>Having one <code>Store</code> per plugin that stores the ID. After <code>init</code> calls, do some merging work to collate the registrations from all the plugins.</li>\n<li>Having one global <code>Store</code> and track a <code>currently_executing_plugin</code> ID on it. Update this when calling <code>init</code> and read from it when <code>host_please_register_stuff</code> is called.</li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/TartanLlama/guy-fighter/tree/main\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0bb8b79ab32aa19d31b9f1beefff69842b0ced68/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623934326365366332326264313666316565653366653332653637346139353065643835653734646666376536633239323833663339313065633730656430372f54617274616e4c6c616d612f6775792d66696768746572&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/TartanLlama/guy-fighter/tree/main\" title=\"GitHub - TartanLlama/guy-fighter: Demonstration of a plugin system using WASM components\">GitHub - TartanLlama/guy-fighter: Demonstration of a plugin system using WASM components</a></div><div class=\"message_embed_description\">Demonstration of a plugin system using WASM components - TartanLlama/guy-fighter</div></div></div>",
        "id": 524024656,
        "sender_full_name": "Sy Brand",
        "timestamp": 1749856280
    },
    {
        "content": "<p>I'm not sure I follow your application architecture exactly, but as a general rule of thumb: the less you can put in a single <code>Store</code>, and the shorter-lived they are, the better. An instance will not be dropped until its <code>Store</code> is dropped, for example, so if you keep a <code>Store</code> around for a long time and reuse it for many instances, you will hold memory alive longer than needed. <code>Store</code>s and <code>Instance</code>s are built to be disposable, and can be instantiated quickly: <a href=\"https://docs.wasmtime.dev/examples-fast-instantiation.html\">https://docs.wasmtime.dev/examples-fast-instantiation.html</a></p>\n<p>so given that, I think this is your best choice, of those presented:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"928951\">Sy Brand</span> <a href=\"#narrow/channel/217126-wasmtime/topic/Shared.20and.20per-plugin.20state.20patterns.20for.20WASM.20components/near/524024656\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Having one <code>Store</code> per plugin that stores the ID. Each store references the larger global state, which uses <code>RefCell</code> to allow mutating.</li>\n</ul>\n</blockquote>",
        "id": 524027466,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1749858414
    },
    {
        "content": "<p>Makes sense, thank you!</p>",
        "id": 524049086,
        "sender_full_name": "Sy Brand",
        "timestamp": 1749888855
    }
]