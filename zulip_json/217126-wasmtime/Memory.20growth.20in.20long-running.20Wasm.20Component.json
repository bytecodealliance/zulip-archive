[
    {
        "content": "<p>Hi everyone</p>\n<p>I'm developing a Python application that I'm compiling into a WebAssembly component using componentize-py and running it with the wasmtime runtime. My application includes a Server-Sent Events (SSE) client, which means it needs to run continuously and process a steady stream of incoming data.</p>\n<p>The challenge I'm facing is memory growth. I'm observing that the memory usage of my Wasm component continuously increases over time, even though I'm trying to manage objects carefully in my Python code. The memory growth seems to be due to the wasi resources not being released.</p>\n<p>I'm relatively new to WebAssembly and am trying to understand how memory is managed in long-running Wasm components. Are there known solution for this type of memory growth or is this a current limitation?</p>",
        "id": 520017350,
        "sender_full_name": "Timon Baes",
        "timestamp": 1747995270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> might be best here at first glance....</p>",
        "id": 520052710,
        "sender_full_name": "Ralph",
        "timestamp": 1748006429
    },
    {
        "content": "<p>In general memory management isn't that much more special in wasm than it is on native, so likely what you're running into here is a memory leak. Now tracking down memory leaks is pretty different on native, and at this time unfortunately much more difficult.</p>\n<p>If you're able to make a small reproduction that'd be super helpful for something like this to investigate</p>",
        "id": 520061433,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1748008916
    },
    {
        "content": "<p>For example, when I create a Fields resource from wasi_http_types and later my code moves on and no longer needs these fields, the resource still appears to stay in memory. This seems to be the case for other resources from WASI as well. It does not get freed as expected after it goes out of scope. This is in contrast to typical Python objects (like lists or dictionaries) which are correctly garbage-collected.</p>\n<p>In my SSE client, data is continuously read from an InputStream resource from wasi-io. Each time the read function is executed, the data that has been read also stays in memory. So over time, as the SSE client keeps receiving data, the memory keeps increasing until a MemoryError is received.</p>\n<p>Here's the relevant code snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">incomingBody</span><span class=\"p\">:</span> <span class=\"n\">wasi_http_types</span><span class=\"o\">.</span><span class=\"n\">IncomingBody</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_response</span><span class=\"o\">.</span><span class=\"n\">consume</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">incomingBody</span><span class=\"p\">:</span>\n    <span class=\"n\">inputStream</span><span class=\"p\">:</span> <span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">InputStream</span> <span class=\"o\">=</span> <span class=\"n\">incomingBody</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">inputStream</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">pollable</span><span class=\"p\">:</span> <span class=\"n\">poll</span><span class=\"o\">.</span><span class=\"n\">Pollable</span> <span class=\"o\">=</span> <span class=\"n\">inputStream</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">()</span>\n                <span class=\"k\">with</span> <span class=\"n\">pollable</span><span class=\"p\">:</span>\n                    <span class=\"n\">pollable</span><span class=\"o\">.</span><span class=\"n\">block</span><span class=\"p\">()</span>\n                    <span class=\"n\">chunk</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">=</span> <span class=\"n\">inputStream</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">chunk_size</span><span class=\"p\">)</span> <span class=\"c1\"># All data read here is kept in memory and does not get released</span>\n                    <span class=\"k\">yield</span> <span class=\"n\">chunk</span>\n            <span class=\"k\">except</span> <span class=\"o\">...</span>\n</code></pre></div>",
        "id": 520080866,
        "sender_full_name": "Timon Baes",
        "timestamp": 1748014615
    },
    {
        "content": "<p>ok nice, and makes sense, thanks!</p>\n<p>Mind opening an issue on componentize-py for this? Joel's out this week so it'd be good to write these details down on a repo as well</p>",
        "id": 520081204,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1748014730
    }
]