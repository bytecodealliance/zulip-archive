[
    {
        "content": "<p>Hello.</p>\n<p>I found a memory leak in wasi-nn. When we call compute(),  a tensor which is passed from wasm will be leaked because wasm pass its owenership but host doesn't comsume it.</p>\n<p>I find this leak will be fixed with the following change. <br>\n<a href=\"https://github.com/seera-networks/wasmtime/commit/d1ac513d00b0cd3e2a869544c2bc067b5f6298b3\">https://github.com/seera-networks/wasmtime/commit/d1ac513d00b0cd3e2a869544c2bc067b5f6298b3</a></p>\n<p>How can I contribute this change?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/seera-networks/wasmtime/commit/d1ac513d00b0cd3e2a869544c2bc067b5f6298b3\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a73137891cf9beafa08db468573469c8beb46ea5/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663539643464373533616136633337653964363865373664383366616239636631383963666563343463346131383462346463396666346462313563653233312f73656572612d6e6574776f726b732f7761736d74696d652f636f6d6d69742f64316163353133643030623063643365326138363935343463326263303637623566363239386233&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/seera-networks/wasmtime/commit/d1ac513d00b0cd3e2a869544c2bc067b5f6298b3\" title=\"fix memory leak · seera-networks/wasmtime@d1ac513\">fix memory leak · seera-networks/wasmtime@d1ac513</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - fix memory leak · seera-networks/wasmtime@d1ac513</div></div></div>",
        "id": 538335258,
        "sender_full_name": "Masahiro Kozuka",
        "timestamp": 1757379907
    },
    {
        "content": "<p>a pull request is the preferred way to propose code changes</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> for wasi-nn stuff</p>",
        "id": 538487457,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1757437931
    },
    {
        "content": "<p>I memorized that within the Component model the host never frees data allocated by the guest directly, this is the purpose of the matching post_cabi function. Can you check whether this is the case here as well?</p>",
        "id": 538541932,
        "sender_full_name": "Christof Petig",
        "timestamp": 1757457097
    },
    {
        "content": "<p>Yes, I believe you will want the guest to drop the tensor once you're done with it in whatever language you are using wasi-nn (what language <em>are</em> you using?). The appropriate <code>self.table.delete(...)</code> invocation happens in <code>HostTensor::drop</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/9d64c5250fa6d1eb1541c4e2d26da0ca6608ae21/crates/wasi-nn/src/wit.rs#L321-L324\">https://github.com/bytecodealliance/wasmtime/blob/9d64c5250fa6d1eb1541c4e2d26da0ca6608ae21/crates/wasi-nn/src/wit.rs#L321-L324</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/9d64c5250fa6d1eb1541c4e2d26da0ca6608ae21/crates/wasi-nn/src/wit.rs#L321-L324\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0ed6d52e25463d390f1a1baec3fbca98911560a1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316132303131303430653630356330313132623730656236306634333163316134303130666435303666353639343134356530303937396538373638636236662f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/9d64c5250fa6d1eb1541c4e2d26da0ca6608ae21/crates/wasi-nn/src/wit.rs#L321-L324\" title=\"wasmtime/crates/wasi-nn/src/wit.rs at 9d64c5250fa6d1eb1541c4e2d26da0ca6608ae21 · bytecodealliance/wasmtime\">wasmtime/crates/wasi-nn/src/wit.rs at 9d64c5250fa6d1eb1541c4e2d26da0ca6608ae21 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 538542334,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1757457374
    },
    {
        "content": "<p>Thank you for your reply! I'm using Rust. I think that it is the best to invoke self.table.delete() in HostTensor::drop(), but I have no idea to invoke HostTensor::drop() from guest.</p>\n<p>The following is my guest code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tensor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Tensor</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">tensor_dim</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TensorType</span><span class=\"p\">::</span><span class=\"n\">Fp32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">input_tensor</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">named_tensor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[(</span><span class=\"s\">\"images\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">tensor</span><span class=\"p\">)];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">outputs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">named_tensor</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>In this code, the owenership of <code>tensor</code> will be passed, so HostTensor::drop will never be invoked. This is the reason why I suppose that we should invoke self.table.delete() in compute().</p>",
        "id": 538757256,
        "sender_full_name": "Masahiro Kozuka",
        "timestamp": 1757552219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> What do you think about my understanding? Do I misunderstand something?</p>",
        "id": 539371480,
        "sender_full_name": "Masahiro Kozuka",
        "timestamp": 1757810235
    },
    {
        "content": "<p>I had thought that passing a resource in a WIT signature meant borrowing but your example makes me rethink that: Rust certainly expects ownership to transfer there. I guess I'm uncertain now: <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span>, does passing a resource as an argument transfer ownership or borrow the resource?</p>",
        "id": 539378878,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1757822133
    },
    {
        "content": "<p>If the argument is wrapped in <code>borrow&lt;&gt;</code> it isn't consumed, as is the self argument in methods. But transfer clearly is the default.</p>",
        "id": 539399476,
        "sender_full_name": "Christof Petig",
        "timestamp": 1757848245
    },
    {
        "content": "<p>Ok, this makes sense. I was unaware of the own/borrow notation when I switched wasi-nn from WITX to WIT long ago, so <span class=\"user-mention\" data-user-id=\"957722\">@Masahiro Kozuka</span>'s change makes complete sense if we are passing ownership of the tensor. <span class=\"user-mention\" data-user-id=\"957722\">@Masahiro Kozuka</span>, do you want to submit a PR with this change?</p>",
        "id": 539648117,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1757970544
    },
    {
        "content": "<p>In the future, we could debate changing the specification to borrow instead (probably the original intention), but for now this change would fix the bug.</p>",
        "id": 539648205,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1757970593
    },
    {
        "content": "<p>Thanks. I will submit a PR in a few days.</p>",
        "id": 539706208,
        "sender_full_name": "Masahiro Kozuka",
        "timestamp": 1758009719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> I sent <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11704\">a PR</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/11704\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/57fae3ed350a884e69cf5b533fb2a57e7e7673b6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316334633065653231396434373332323331653763336236326534373163376561373635633462316537383361623831616137326231356331613834616238332f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3131373034&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/11704\" title=\"fix a memory leak in wasi-nn by masa-koz · Pull Request #11704 · bytecodealliance/wasmtime\">fix a memory leak in wasi-nn by masa-koz · Pull Request #11704 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This PR will fix a memory leak in wasi-nn, which does'nt free the tensor resource whose owenership is transferred. You can find a discussion in the zulip.</div></div></div>",
        "id": 539942175,
        "sender_full_name": "Masahiro Kozuka",
        "timestamp": 1758092793
    }
]