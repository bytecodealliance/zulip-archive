[
    {
        "content": "<p>I have the following structs defined:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Runtime</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">plugins</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RuntimePlugin</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">RuntimePlugin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">instance</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Plugin</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"c1\">// Auto-generated binding for my component instance.</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">InternalRuntime</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">InternalRuntime</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">http</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiHttpCtx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>At the moment I share my <code>Runtime</code> across Tokio tasks by wrapping it in an <code>Arc&lt;Mutex&lt;Runtime&gt;&gt;</code>. But I would rather move the Mutex down to the stores so that I can make calls to multiple components concurrently:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">RuntimePlugin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">instance</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Plugin</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Mutex</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">InternalRuntime</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And then call it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">call_event</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">plugin_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">event</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">DiscordEvents</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">DiscordRequests</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">plugins</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">plugin_name</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">plugin</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">instance</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">discord_bot_plugin_plugin_functions</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call_discord_event</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"k\">await</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">call_result</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">call_result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">discord_requests</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">discord_requests</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">error</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"The plugin returned an error: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">err</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"nb\">Err</span><span class=\"p\">(())</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">error</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Something went wrong while calling the plugin: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">err</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(())</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Though when I do this I run in a bunch of errors as it does not seem to like the <code>Store&lt;InternalRuntime&gt;</code> being wrapped in a MutexGuard:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">tokio</span><span class=\"p\">::</span><span class=\"n\">sync</span><span class=\"p\">::</span><span class=\"n\">Mutex</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">InternalRuntime</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">AsContext</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span>\n</code></pre></div>\n<p>It's also maybe worth to note that all Stores and component instances in the RuntimePlugin entries in the HashMap are created using the same <code>Engine</code> and <code>Linker</code>.</p>\n<p>Is there some way to make this work?</p>",
        "id": 533361225,
        "sender_full_name": "Celarye",
        "timestamp": 1754599543
    },
    {
        "content": "<p>I believe if you change <code>&amp;mut plugin.store.lock().await</code> to <code>&amp;mut *plugin.store.lock().await</code> (note the <code>*</code>) it should work</p>",
        "id": 533362591,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1754600122
    },
    {
        "content": "<p>I'll note though that even if you do so you won't be making concurrent calls into wasm because you've still only got one <code>Store&lt;InternalRuntime&gt;</code> and that can only have one active execution of wasm at a time. If you want concurrent execution you'll likely want to create a <code>Store</code>-per-plugin</p>",
        "id": 533362705,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1754600180
    },
    {
        "content": "<p>My stores are already created per plugin so that won't be a limitation. And dereferencing the MutexGuard does solve it, thanks!</p>",
        "id": 533363147,
        "sender_full_name": "Celarye",
        "timestamp": 1754600433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"941481\">Celarye</span> has marked this topic as resolved.</p>",
        "id": 533363191,
        "sender_full_name": "Notification Bot",
        "timestamp": 1754600455
    },
    {
        "content": "<p>Just to clarify, is it okay for the different stores to reference the same Engine?</p>",
        "id": 533502112,
        "sender_full_name": "Celarye",
        "timestamp": 1754674200
    },
    {
        "content": "<p>indeed! That's the main intended use case for engines/stores</p>",
        "id": 533502865,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1754674498
    }
]