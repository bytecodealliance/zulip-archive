[
    {
        "content": "<p>There is long standing <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8036\">gap</a> in wasmtime C API for working with WASIp2 guests. I think this is because core team mostly works with Rust.</p>\n<p>If I wanted to use WASIp2 features of wasmtime while embedding inside of <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/324\">dotnet</a> I'm depended on those features to be exposed as C API first and then I need to build C# projection.</p>\n<p>But we already have great language independent IDL, WIT+component model. So I realized that we could use wit-bingen to expose the wasmtime embedding APIs and consume it it C# by wit-bindgen. Instead of hop thru C language.</p>\n<p><span class=\"user-mention\" data-user-id=\"590366\">@Christof Petig</span> told me last year that he is using component model for interop between different languages of the same process and address space.</p>\n<p>I don't know if maintaining embedding WIT is easier than finishing the C embedding API. But doing it in WIT would make consumption language independent. And the new features of the embedding API would be available in any language at the same time.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/8036\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0260e7ca1e477719659d844b53831f31fc542138/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666331333464653935653838633238366234383930363261303831306263353136353362316538303439366662613139656231616534393038663432666666632f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f38303336&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/8036\" title=\"c-api: component model · Issue #8036 · bytecodealliance/wasmtime\">c-api: component model · Issue #8036 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature Expose the component model in the C API for other languages than Rust. Benefit Components in all the languages! (on the host side) Implementation I have a POC I created here with some feedb...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/324\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/462576a898470ba59f9018277b2f2ebcf2e8178b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623664303837353439643538356265653337383466663763303863316633343465356135656333666262303262626633663135616433313032343431656163342f62797465636f6465616c6c69616e63652f7761736d74696d652d646f746e65742f6973737565732f333234&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/324\" title=\"Component model support · Issue #324 · bytecodealliance/wasmtime-dotnet\">Component model support · Issue #324 · bytecodealliance/wasmtime-dotnet</a></div><div class=\"message_embed_description\">Context https://github.com/bytecodealliance/wasmtime/tree/main/examples/component Add support for making the same example from C#. https://github.com/WebAssembly/component-model/tree/main https://g...</div></div></div>",
        "id": 530095346,
        "sender_full_name": "Pavel Šavara",
        "timestamp": 1753173498
    },
    {
        "content": "<p>There's actually been <a href=\"https://docs.wasmtime.dev/c-api/dir_788242682a7aad0d494995df051a8421.html\">some steady progress</a> from a contributor MangoPeachGrape in adding C API support to the component model. It's not based on WIT but I've long wanted to have an option for something based on WIT. Basically the exact ABI for more efficient function calls I think is still an open question where WIT provides a nice answer</p>",
        "id": 530155706,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1753193405
    },
    {
        "content": "<p>Sorry, this thread simply got scrolled past on my side.</p>\n<p>Indeed I have been completing a design for WIT between native shared objects which eliminates most copies (eliminating all require an API change). </p>\n<p>I call this symmetric mode, <a href=\"https://github.com/cpetig/wit-bindgen/tree/work-in-progress\">https://github.com/cpetig/wit-bindgen/tree/work-in-progress</a> has the most recent version of it. Currently I also have streams and futures working in C++ and Rust, async calls are on the implementation list for \"tonight\".</p>\n<p>If you want a sneak peek simply run the normal WIT runtime tests (including a few of the async) with <code>--symmetric</code> and watch them compile for and run on native. Not everything is perfect but most is working fine.</p>\n<p>I would like to add a hash (of the binary WIT subset) to the function to cause linker error on the slightest chance of incompatible changes to arguments and results - and also work on a zero-copy publisher (multiple) subscriber extension which is compatible between native and wasm (see <a href=\"https://github.com/WebAssembly/component-model/issues/398#issuecomment-3116844798\">https://github.com/WebAssembly/component-model/issues/398#issuecomment-3116844798</a> )</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/wit-bindgen/tree/work-in-progress\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/704645091b0f60733163e6c0408b1e1fffa1dbe8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623262393034663666636336323833303262323764653363326364316266626133386134613166653834356364356432623763623362353066316263336535392f6370657469672f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/wit-bindgen/tree/work-in-progress\" title=\"GitHub - cpetig/wit-bindgen at work-in-progress\">GitHub - cpetig/wit-bindgen at work-in-progress</a></div><div class=\"message_embed_description\">A (C++) language binding generator for WebAssembly interface types - GitHub - cpetig/wit-bindgen at work-in-progress</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/398#issuecomment-3116844798\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a0a75e4babe320b3d0efb4ac7b86282c93c1ea55/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633061613036346464633338366639323331633838353565636438323163663730376361343030343964326333323966333339376161373232343762613464332f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f333938&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/398#issuecomment-3116844798\" title=\"Flat data representation proposal: Enables zero copy shared memory, zero allocation return types, binary serialization · Issue #398 · WebAssembly/component-model\">Flat data representation proposal: Enables zero copy shared memory, zero allocation return types, binary serialization · Issue #398 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">This all started with defining zero copy shared memory over a WIT interface (channel is WIT resource, inspired by iceoryx2): let channel = Channel_u32::new(\"topic\"); loop { let message = channel.al...</div></div></div>",
        "id": 531460746,
        "sender_full_name": "Christof Petig",
        "timestamp": 1753736254
    },
    {
        "content": "<p>PS: While there is a draft merge request on wit-bindgen <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1098\">https://github.com/bytecodealliance/wit-bindgen/pull/1098</a> I tend to stall pushing to that branch to minimize CI load.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1098\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/64d53e948008ba1977d3a96810d28ee8442ae1e2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666233383661313161623334656562653265356165326234376339636661623438383030643635346239353666366436636239386532646662626131313332362f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f31303938&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/1098\" title=\"Draft: Symmetric ABI tracking and minor side functionality by cpetig · Pull Request #1098 · bytecodealliance/wit-bindgen\">Draft: Symmetric ABI tracking and minor side functionality by cpetig · Pull Request #1098 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">My fork has aggregated several potentially separable parts over the past years.\nI would like to come up with a plan to incrementally merge in interest order, so I would love to get feed-back about ...</div></div></div>",
        "id": 531461375,
        "sender_full_name": "Christof Petig",
        "timestamp": 1753736466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"590366\">@Christof Petig</span> you're not going to be at OSS Summit EU by any chance, are you?</p>",
        "id": 531591101,
        "sender_full_name": "Ralph",
        "timestamp": 1753790737
    },
    {
        "content": "<p>I didn't plan for it, but it looks very interesting.</p>",
        "id": 531650456,
        "sender_full_name": "Christof Petig",
        "timestamp": 1753805951
    }
]