[
    {
        "content": "<p>Hey all I meant to give a heads up about this at the last Wasmtime meeting but I failed to account for the holiday on that day and so I didn't attend the meeting and broadcast this out. In lieu of that here I am! I'd like to share a \"declaration of intent\" of sorts of the beginning of the process of merging the wasip3-prototyping fork upstream into Wasmtime itself.</p>\n<p>As background for those that aren't familiar the <a href=\"https://github.com/bytecodealliance/wasip3-prototyping/\">wasip3-prototyping repository</a> has been a staging ground for the implementation of component model async and WASIp3 primarily authored by <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> within Wasmtime and <span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> for WASIp3 bits. This is a major feature being added to our component runtime and was developed out-of-tree to make development easier and avoid unnecessary churn in the main repo. The intention was to always merge upstream eventually and the time has now come for that.</p>\n<p>The current thinking is to split the wasip3-prototyping into two major initiatives:</p>\n<ol>\n<li>The Wasmtime implementation of component model async foundations</li>\n<li>WASIp3 APIs and implementations</li>\n</ol>\n<p>The initial pieces landing will exclusively be (1) meaning that <code>wasmtime-wasi</code> and <code>wasmtime-wasi-http</code> will have few, if any, changes made to them. The WASI bits are expected to come later once we're happy with the Wasmtime bits in-tree.</p>\n<p>For the Wasmtime bits I've just talked with <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> and our thinking is that this is going to be split across four different PRs:</p>\n<ol>\n<li>Refactorings to our fiber abstraction in the Wasmtime crate. Component model async APIs do lots more with fibers than what Wasmtime currently does, so it's required to level up how we model fibers and interact with them. This refactoring is one of the \"cruxes of unsafe\" and will be its own PR to review in isolation.</li>\n<li>Refactorings of everything surrounding component model async in Wasmtime without actually implementing component model async. The intention here will be that the \"guts\" of async bits are all stubbed out with <code>todo!()</code> but all other APIs in the <code>wasmtime</code> crate are updated to account for async (e.g. <code>Func::call_concurrent</code> will be added). This PR will showcase how the rest of <code>wasmtime</code> is affected with respect to concurrent/async APIs, but without actually introducing concurrency/async yet.</li>\n<li>Next will be the actual implementation of concurrency/async in Wasmtime. This is mostly a file <code>concurrent.rs</code> and <code>futures_and_streams.rs</code>. This will be filling out <code>todo!()</code> blocks added in PR (2) above.</li>\n<li>Tests will be added. This includes new <code>*.wast</code> tests, updates to <code>tests/all/*</code>, and a new major test suite at <code>crates/misc/component-async-tests/*</code>. </li>\n</ol>\n<p>The current intention is that no tests will land as part of PRs 1/2/3. Tests will only land in PR 4 above at the very end. The goal here is to reduce the size of the diff to make it more digestable and to reduce noise in the PR itself. The rationale for this is that the complete CI matrix is already passing in the wasip3-prototyping repo so we know that all tests are green across the board and that the implementation is already well-tested. Tests can always be consulted during review but they'll just temporarily only be available in an external repository until the final PR is reached.</p>\n<hr>\n<p>If anyone has questions/concerns on this plan please feel free to message here! This is the initial draft of an idea of how to upstream all this but both Joel and I are happy to adjust if others feel this should happen different. Currently there is no concrete plan for WASIp3 except \"we know it's after the Wasmtime bits\", and my hope is that we could use lessons learned from upstreaming the async bits as well.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasip3-prototyping/\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c2e8c0fc4dfbeb0ae8f8978eb3ad0a5f250544b3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326333353039656239313262383032333433313563383463613337663635643034633839363037353438333666353435386162663832643536623133626231652f62797465636f6465616c6c69616e63652f7761736970332d70726f746f747970696e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasip3-prototyping/\" title=\"GitHub - bytecodealliance/wasip3-prototyping: Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development\">GitHub - bytecodealliance/wasip3-prototyping: Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development</a></div><div class=\"message_embed_description\">Fork of wasmtime for protoyping WASIp3 work and coordination, not intended for any production use case, purely for development - bytecodealliance/wasip3-prototyping</div></div></div>",
        "id": 525383730,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750701551
    },
    {
        "content": "<p>wasmtime-wasi-http sounds both cool - will be very useful &amp; concerning - there's danger of bloat going too far with wasi extended functionality. initial thoughts are - want :)</p>",
        "id": 525384429,
        "sender_full_name": "Steve Williams",
        "timestamp": 1750701805
    },
    {
        "content": "<p>the wasi-http spec has been in progress since 2022 and wasmtime-wasi-http has been in the wasmtime tree since april 2023. Its not super helpful or very welcome to get feedback that you're concerned about \"bloat\" if you arent familiar with the history of this interface and how its the foundation of the shipped component model implementations from several different vendors who fund wasmtime's development</p>",
        "id": 525390220,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1750704413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"448652\">@Steve Williams</span> this is not the appropriate topic to be raising these concerns on. I'd recommend raising such concerns with the WASI subgroup if you are concerned about the overall trajectory</p>",
        "id": 525390825,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1750704670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"448652\">@Steve Williams</span> respectfully, it's not up to us to delete your comments we don't like. It's up to you to take feedback and adjust to community norms.</p>\n<p>You've had a history here of extremely verbose, off-topic messages on all sorts of topics that don't contribute to the conversation or that ask us to help/debug your thing/comment on a random third-party technology/etc in inappropriate ways. We've tried to be polite in letting you know. Please do better in staying on topic and avoid unhelpful contributions.</p>",
        "id": 525391244,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1750704854
    },
    {
        "content": "<p>(For the record, you had a message here \"if unhelpful, please delete\", which you deleted after I responded.)</p>",
        "id": 525391439,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1750704950
    },
    {
        "content": "<p>you're right to scold. we have no wasi use case &amp; it's optional so I don't care what's in it so should stay out of the subject. apologies.</p>",
        "id": 525395619,
        "sender_full_name": "Steve Williams",
        "timestamp": 1750706832
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"448652\">@Steve Williams</span>, of behalf of the Technical Steering Committee, I'd like to say that I appreciate the passion you have and understand that sometimes it can bubble over. It's great that you've noticed you didn't like what you said and decided to apologize. When you've got some time, take a moment to review our <a href=\"https://github.com/bytecodealliance/governance/blob/main/CODE_OF_CONDUCT.md\">Code of Conduct</a>. We use it to ensure that everyone has a good time participating. Thank you!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/governance/blob/main/CODE_OF_CONDUCT.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/562fd38727675737513be06a3a5b6d1ee88f36e6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383431323539366361393635653736336231666130393666313131613436343530346338306530313637313834623266656236313334376264653735323433612f62797465636f6465616c6c69616e63652f676f7665726e616e6365&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/governance/blob/main/CODE_OF_CONDUCT.md\" title=\"governance/CODE_OF_CONDUCT.md at main · bytecodealliance/governance\">governance/CODE_OF_CONDUCT.md at main · bytecodealliance/governance</a></div><div class=\"message_embed_description\">Documents related to Bytecode Alliance governance and process - bytecodealliance/governance</div></div></div>",
        "id": 525984036,
        "sender_full_name": "Oscar Spencer",
        "timestamp": 1750973828
    },
    {
        "content": "<p>Hey Oscar. Nothing was poor conduct on anyone's part. Simply a collision of ideas. <br>\nI've reconsidered. I think wasi-http will be useful for us too, at least in the short term. Needs https support for real-world use cases, obviously. Swamped in work so don't know exactly what everyone else is doing. Hi :)</p>",
        "id": 526020023,
        "sender_full_name": "Steve Williams",
        "timestamp": 1751005766
    },
    {
        "content": "<p>The big picture issue is on current trajectory, wasi will end up becoming an interface to o/s functionality. That's no bad thing but from a web perspective, such a thing is called a browser. We've delivered that to MVP already with current release wasmtime as our current wasm engine (thanks all).</p>\n<p><a href=\"https://advance-software.com/develop/#tutorial\">https://advance-software.com/develop/#tutorial</a></p>\n<p>My current job is fixing breakpoints in lldbg which have broken, again. lldb fizzbuzz debug test working so seems its solid in wasmtime itself.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://advance-software.com/develop/#tutorial\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b1f8aab018684565453b07fa130bd90a0e154afe/687474703a2f2f616476616e63652d736f6674776172652e636f6d2f696d616765732f6765745f696e66696e6974792e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://advance-software.com/develop/#tutorial\" title=\"Advance Software\">Advance Software</a></div><div class=\"message_embed_description\">Developers of the &lt;&gt;&lt;&gt; Infinity Immersive Web Browser.</div></div></div>",
        "id": 526020542,
        "sender_full_name": "Steve Williams",
        "timestamp": 1751006040
    },
    {
        "content": "<p>If anything I'm doing falls outside of your interests or behaviour expectations, please be specific. Not trying to force technology onto anyone that's not wanted, nor to promote here when that's not wanted either.</p>\n<p>The collision is wasm interfacing to the wider world - you're doing that one way, we're doing it another, html browsers do that a third way (via javascript bridge) &amp; there may well be other approaches.</p>\n<p>None of this may interest &amp; you might wish to strictly adhere to your current development plan with no interest in alternatives &amp; if that's the case, that's cool &amp; can continue my work elsewhere with engagement here restricted to only where wasmtime specific issues arise.</p>",
        "id": 526020994,
        "sender_full_name": "Steve Williams",
        "timestamp": 1751006318
    },
    {
        "content": "<p>This is all of course off topic, current post, but you chose to extend here.</p>",
        "id": 526021037,
        "sender_full_name": "Steve Williams",
        "timestamp": 1751006349
    },
    {
        "content": "<p>Happy to expose this functionality immediately you have it ready &amp; stable,  in our stuff, <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <br>\nThe ability to make an http request &amp; receive a response from scripting unlocks functionality.<br>\nThat's exciting :)  Will need to be encrypted for anything serious. Hence https a requirement.</p>",
        "id": 526021828,
        "sender_full_name": "Steve Williams",
        "timestamp": 1751006820
    },
    {
        "content": "<p>libcurl provides industry tested solution to multiple protocols with an acceptable open source licence for commercial work. not a requirement but re-inventing the wheel not a requirement either.</p>",
        "id": 526025151,
        "sender_full_name": "Steve Williams",
        "timestamp": 1751008532
    },
    {
        "content": "<p>I will message you privately.</p>",
        "id": 526098863,
        "sender_full_name": "Oscar Spencer",
        "timestamp": 1751035128
    },
    {
        "content": "<p>does wasip3 bring a new triple ?</p>",
        "id": 527729384,
        "sender_full_name": "Scott Waye",
        "timestamp": 1751991112
    },
    {
        "content": "<p>It will, yes: <code>wasm32-wasip3</code>.  <code>wasi-libc</code> (and toolchains downstream from it) don't have support for that yet, so in the meantime you can target <code>wasm32-wasip2</code> and use <code>wit-bindgen</code>-generated bindings to access p3 features.  Only C and Rust are supported so far.</p>",
        "id": 527730273,
        "sender_full_name": "Joel Dice",
        "timestamp": 1751991319
    },
    {
        "content": "<p>I'm planning to add Python support (via componentize-py) and maybe experimental .NET support if nobody beats me to it.</p>",
        "id": 527730451,
        "sender_full_name": "Joel Dice",
        "timestamp": 1751991380
    },
    {
        "content": "<p>So mixing triples (p2 and p3) is expected to work in the future?</p>",
        "id": 527731028,
        "sender_full_name": "Scott Waye",
        "timestamp": 1751991577
    },
    {
        "content": "<p>Yes, in the sense that hosts supporting p3 are expected to also support p2 until/unless we develop a p2-&gt;p3 adapter.</p>",
        "id": 527731271,
        "sender_full_name": "Joel Dice",
        "timestamp": 1751991651
    }
]