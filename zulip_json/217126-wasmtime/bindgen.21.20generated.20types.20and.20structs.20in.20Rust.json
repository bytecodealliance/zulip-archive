[
    {
        "content": "<p>Hi, I want to introduce host bindings to my project instead of manually setting and calling functions from components. making this change introduced some obstacles. Before I was able to use the Rust types by having them implement <code>Component Model</code> and either/both <code>Lift</code> or/and <code>Lower</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, ComponentType, Lift, Serialize)]</span>\n<span class=\"cp\">#[component(record)]</span>\n<span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Event</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">content</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>world.wit</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>    record event {\n        id: string,\n        content: byte-array,\n    }\n</code></pre></div>\n<p>Now using the host bindings from <code>bindgen!</code>, there is this type that  implements <code>Lower</code>,  <code>Lift</code>,  <code>ComponentType</code>, etc.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[component(record)]</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Event</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"id\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"content\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">content</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ByteArray</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>I thought that in my code (a simplified version) the following  would work:<br>\n<code>export execute: func()-&gt; result&lt;event&gt;</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">exexute_in_component</span><span class=\"p\">()-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Event</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// --- some code ---</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"p\">::</span><span class=\"n\">instanciate</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">host</span><span class=\"p\">::</span><span class=\"n\">Event</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">::</span><span class=\"n\">call_execute</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">result</span>\n<span class=\"w\">        </span><span class=\"c1\">// prompts the error from the next example</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>but direct conversion is not allowed by the compiler:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Event</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">host</span><span class=\"p\">::</span><span class=\"n\">Event</span><span class=\"p\">{</span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"qwerty\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">content</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()};</span>\n<span class=\"c1\">// expected `persistence::Event`, found `bindings::host::Event`</span>\n<span class=\"c1\">// = note: `bindings::host::Event` and `persistence::Event` have similar names, but are actually distinct types</span>\n</code></pre></div>\n<p>Even though, <code>Event</code> implements <code>ComponentType</code> and <code>Lift</code>, required for creating Rust types from Wit -Lift's doc: \"Host types which can be created from the canonical ABI\", the two types cannot be interchanged when converting from wit record to Rust struct. Of course, I can make an <code>impl Into&lt;Event&gt; for host::Event</code> implementation, but it introduces additional complexity to the code, because of nesting in the function's return type. I can go back to working with raw <code>Instance</code> and manually set the exports and imports, but I am sure there is a more elegant approach to using the host bindings.</p>",
        "id": 516229853,
        "sender_full_name": "Bozhidar Manev",
        "timestamp": 1746458464
    },
    {
        "content": "<p>This may not be implemented yet, but this is partially motivation for the <code>with</code> option to the <code>bindgen!</code> macro. I know that for resources you can specify a custom type, but I don't think we have it set up to specify a custom type for any arbitrary WIT type yet. Adding that in theory wouldn't be too hard though.</p>",
        "id": 516231222,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1746458814
    },
    {
        "content": "<p>Then I am curious how manually defining and calling exports with Rust types which comply with trait bounds is working :</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// My old approach by only using Rust structs</span>\n<span class=\"c1\">// type ByteArr = Vec&lt;u8&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">call_execute</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">cmd</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">PlatformMessage</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Event</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ByteArr</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">load_instance</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">cmd</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">.</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">instance</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">instance</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">ByteArr</span><span class=\"p\">,),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Event</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ByteArr</span><span class=\"o\">&gt;</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"s\">\"execute\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">func</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">payload</span><span class=\"p\">().</span><span class=\"n\">to_vec</span><span class=\"p\">(),)))</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">result</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// getting the data from (A,) to A</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Maybe it is all about giving types, which comply with the trait bounds in <code>.get_typed_func</code> and <code>wasmtime</code> handles the type compatibility instead of the Rust compiler when using the host bindings</p>",
        "id": 516235535,
        "sender_full_name": "Bozhidar Manev",
        "timestamp": 1746459865
    },
    {
        "content": "<p>yeah the types you provide to <code>get_typed_func</code> are what the function ends up actually returning</p>",
        "id": 516238103,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1746460494
    },
    {
        "content": "<p>there's still type-checks and such to make sure everything works out, but that's the part that has to agree</p>",
        "id": 516238151,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1746460507
    },
    {
        "content": "<p>Thanks, then I will work with what is available. I am looking forward to seeing such type resolving in the future! If anybody has any workarounds feel free to share</p>",
        "id": 516238993,
        "sender_full_name": "Bozhidar Manev",
        "timestamp": 1746460752
    }
]