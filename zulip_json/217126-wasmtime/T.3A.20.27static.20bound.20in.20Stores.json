[
    {
        "content": "<p>I have been wondering for a while why the bound on <code>Store&lt;T&gt;</code> is <code>T: 'static</code>.  instead of having a <code>Store&lt;T, 'a&gt;</code> with the bound <code>T: 'a</code> instead. I don't understand why <code>T</code> has to outlive the <code>Store</code> that uses it. Is it because the store isn't capable to drop T when it is itself dropped ? Since <code>T</code> is taken by value at the store construction there isn't a way for that value to be used again once the store is dropped AFAIU...<br>\nIs the current because it was/is too complicated to propagate the lifetime constraints all over the machinery or is my understanding wrong ?</p>",
        "id": 542895006,
        "sender_full_name": "Antoine Lavandier",
        "timestamp": 1759480457
    },
    {
        "content": "<p>Propagating a lifetime everywhere would be pretty complicated yeah, but it also has to do with the component-model-async implementation where it, to us at least, unnecesarily requires that <code>T: 'static</code> when otherwise we shouldn't need it</p>",
        "id": 542970920,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1759505329
    },
    {
        "content": "<p>Design rationale is here <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10760\">https://github.com/bytecodealliance/wasmtime/pull/10760</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/10760\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b879aaace9e8a34d625c787e924aae8ea294bbb1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666539303734393466626564613865663037643132323764383833323530616565623264363566643264643365396636666631366432306162613564666334372f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3130373630&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/10760\" title=\"Add `T: 'static` to `Store&lt;T&gt;` by alexcrichton 路 Pull Request #10760 路 bytecodealliance/wasmtime\">Add `T: 'static` to `Store&lt;T&gt;` by alexcrichton 路 Pull Request #10760 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Since the beginning the T type parameter on Store&lt;T&gt; has had no bounds on it. This was intended for maximal flexibility in terms of what embedders place within a Store&lt;T&gt; and I&#39;ve p...</div></div></div>",
        "id": 542970930,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1759505330
    },
    {
        "content": "<p>ah, you beat me to it</p>",
        "id": 542970942,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1759505336
    },
    {
        "content": "<p>oh no that PR is better heh</p>",
        "id": 542970953,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1759505340
    },
    {
        "content": "<p>I keep forgetting about that...</p>",
        "id": 542970971,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1759505345
    },
    {
        "content": "<p>I still don't understand why it's needed in the first place. From that PR the only thing I got is that at some point (or maybe from the start of wasmtime) the compiler started asking for <code>T: 'static</code> bound and you tried to resist it by adding some <code>transmute</code>to alleviate this but it ended up overwhelming so you decided instead to put <code>T: 'static</code> bounds everywhere (which is completely fair) but I don't understand the underlying reason that caused any  <code>T: 'static</code> bound to show up in the first place</p>",
        "id": 542976011,
        "sender_full_name": "Antoine Lavandier",
        "timestamp": 1759506744
    },
    {
        "content": "<p>We added this constraint to Spin's embedding of Wasmtime long ago. One of the biggest problems for async is that futures need to be <code>'static</code> in a lot of situations like for <code>tokio::task::spawn</code>.</p>",
        "id": 542977421,
        "sender_full_name": "Lann Martin",
        "timestamp": 1759507161
    },
    {
        "content": "<p>The main cause of the compiler wanting this bound is that we store, for example, <code>fn(T)</code> in data structures where <code>T</code> is a generic parameter. That data structure isn't <code>'static</code> unless <code>T: 'static</code></p>",
        "id": 542979630,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1759507855
    },
    {
        "content": "<p>(according to rustc, which we feel is a bug but can't do much about it)</p>",
        "id": 542979669,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1759507866
    },
    {
        "content": "<p>Yeah, the rust-lang folks point to the well-formedness check on the type (any contained type must outlive the type) which makes sense when the value of that type is actually stored inside but a function arg is not that. I suppose the most one could push things if the restriction didn't exist is that a <code>fn(T)</code> of lifetime <code>'static</code> could live beyond when any valid <code>T</code> exists that would fit, which is odd (uninhabitable callsite param) but not unsound. <em>shrug</em></p>",
        "id": 542981390,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1759508393
    },
    {
        "content": "<p>(of course I could be missing something subtle here but my point is that at least it doesn't seem like an obvious \"type system insists, sorry end of story\")</p>",
        "id": 542981686,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1759508470
    }
]