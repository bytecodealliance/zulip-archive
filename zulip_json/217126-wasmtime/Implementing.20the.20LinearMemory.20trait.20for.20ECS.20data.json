[
    {
        "content": "<p>Hello! I am trying to take advantage of multi-memory in combination with page size 1 in order to give untrusted wasm modules zerocopy access to Bevy engine's ECS data (stored as densely packed arrays). I provide modules access to these via <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.with_host_memory\"><code>Config::with_host_memory</code></a>.</p>\n<p>In my simple test, where the allocated type has size &amp; alignment 1, if I use a load/store to access this value stored in memory a trap is triggered (also on release which is really neat). If I use the correct load8_u/store8 instructions everything works as I'd expect!</p>\n<p>The <a href=\"https://docs.rs/wasmtime/latest/wasmtime/trait.LinearMemory.html#safety\">docs for the trait <code>LinearMemory</code></a> state \"To prevent possible silent overflows, the memory should be protected by a guard page. Additionally the safety concerns explained in 'Memory', for accessing the memory apply here as well.\"</p>\n<p>Is the note about the guard page not a concern when setting <code>Config::memory_guard_size</code> to 0? I'm not sure when a silent overflow might in my case. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bevy_ecs</span><span class=\"p\">::</span><span class=\"n\">prelude</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#[derive(Clone)]</span>\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">CustomMemory</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"sd\">/// This pointer is not owned by CustomMemory!</span>\n<span class=\"w\">    </span><span class=\"n\">ptr</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">size</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">LinearMemory</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CustomMemory</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">byte_size</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">size</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">byte_capacity</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">size</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">grow_to</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_new_size</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">anyhow</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"It is not possible to grow this memory\"</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">as_ptr</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">CustomMemoryCreator</span><span class=\"p\">(</span><span class=\"n\">CustomMemory</span><span class=\"p\">);</span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MemoryCreator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CustomMemoryCreator</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new_memory</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">ty</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">MemoryType</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">_minimum</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">_maximum</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">reserved_size</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">guard_size</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">LinearMemory</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">guard_size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">reserved_size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">is_64</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">page_size</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">clone</span><span class=\"p\">()))</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Note: this type is technically aligned = 1</span>\n<span class=\"cp\">#[derive(Resource)]</span>\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Res</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">);</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">World</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">insert_resource</span><span class=\"p\">(</span><span class=\"n\">Res</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">));</span>\n\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">components</span><span class=\"p\">().</span><span class=\"n\">resource_id</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">Res</span><span class=\"o\">&gt;</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">world</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">storages</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">resources</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">component_id</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Note: Res is not aligned=4, so isn't guaranteed to be aligned correctly for wasm memory</span>\n<span class=\"w\">        </span><span class=\"c1\">// yet this always passes because my 64 bit machine aligns allocations to 16</span>\n<span class=\"w\">        </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Repr should be transparent</span>\n<span class=\"w\">        </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">cast</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mem_creator</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">sync</span><span class=\"p\">::</span><span class=\"n\">Arc</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">CustomMemoryCreator</span><span class=\"p\">(</span><span class=\"n\">CustomMemory</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">ptr</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">size</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">size_of</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">Res</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">}));</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">wasm_custom_page_sizes</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">with_host_memory</span><span class=\"p\">(</span><span class=\"n\">mem_creator</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">())</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">memory_reservation</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">memory_guard_size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">br#\"</span>\n<span class=\"s\">            (module</span>\n<span class=\"s\">                (memory (export \"memory\") 1 (pagesize 1))</span>\n\n<span class=\"s\">                (func (export \"run\")</span>\n<span class=\"s\">                    ;; Attempting a regular i32.store and i32.load would trap</span>\n<span class=\"s\">                    (i32.store8</span>\n<span class=\"s\">                        (i32.const 0)</span>\n<span class=\"s\">                        (i32.add</span>\n<span class=\"s\">                            (i32.load8_u (i32.const 0))</span>\n<span class=\"s\">                            (i32.const 123)</span>\n<span class=\"s\">                        )</span>\n<span class=\"s\">                    )</span>\n<span class=\"s\">                )</span>\n<span class=\"s\">            )</span>\n<span class=\"s\">        \"#</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"run\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"n\">run</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">get_resource</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">Res</span><span class=\"o\">&gt;</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In order to respect the safety rules of <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Memory.html#memory-and-safety\">wasmtime Memory</a> and Bevy's <a href=\"https://docs.rs/bevy_ecs/latest/bevy_ecs/world/unsafe_world_cell/struct.UnsafeWorldCell.html\">UnsafeWorldCell</a> I plan on scheduling systems such that no conflicts happen (a lot of the bevy ecs has most of this logic figured out already).</p>",
        "id": 505960370,
        "sender_full_name": "Marc Guiselin",
        "timestamp": 1742133738
    },
    {
        "content": "<blockquote>\n<p>Is the note about the guard page not a concern when setting <code>Config::memory_guard_size</code> to 0? I'm not sure when a silent overflow might in my case.</p>\n</blockquote>\n<p>That's correct yeah, the docs are a bit outdated there. We'll probably still recommend guard pages for safety but if there are no bugs in Wasmtime/Cranelift then there is no need for guard pages when you've configured <code>memory_guard_size(0)</code></p>\n<p>Note though that you'll want to be sure to check the <code>minimum</code> variable when allocating a linear memory to ensure that it's less than <code>self.size</code> bytes. That'll help prevent situations where the wasm module allocates more memory than you expect. You'll also need to handle things like memory zeroing/etc.</p>",
        "id": 506168556,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1742221753
    },
    {
        "content": "<p>I'll keep a note about finding a way to add guard pages and revisit this in the future, post mvp.</p>\n<blockquote>\n<p>be sure to check the <code>minimum</code> variable when allocating a linear memory to ensure that it's less than <code>self.size</code> bytes</p>\n</blockquote>\n<p>Thanks for spotting that! I'll add an assertion. But it's less than <em>or equal to</em> right? Since resource size doesn't change I was going to adjust the min/max memory size precisely as needed.</p>\n<blockquote>\n<p>You'll also need to handle things like memory zeroing</p>\n</blockquote>\n<p>Ahh, good to know! I'd probably have missed this <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> thus I did a bit of digging and I'll use <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1ea710d60a5911240d594af26f1c08c0f0c33bd8/crates/wasmtime/src/runtime/vm/memory/malloc.rs\"><code>runtime/vm/memory/malloc.rs</code></a> as reference for managing main module memory, since that was my next step.</p>\n<p>Thanks a bunch for the advice Alex; and for all the amazing work you've done for the rust ecosystem!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/1ea710d60a5911240d594af26f1c08c0f0c33bd8/crates/wasmtime/src/runtime/vm/memory/malloc.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8c80c7772ee055ea3b712c4125ea3d4ea3973c27/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346132636333376636656365666163306663666464316562336263366437396662393236323561356665393761646332663534373134336136303835396332642f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/1ea710d60a5911240d594af26f1c08c0f0c33bd8/crates/wasmtime/src/runtime/vm/memory/malloc.rs\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/memory/malloc.rs at 1ea710d60a5911240d594af26f1c08c0f0c33bd8 · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/memory/malloc.rs at 1ea710d60a5911240d594af26f1c08c0f0c33bd8 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 506236971,
        "sender_full_name": "Marc Guiselin",
        "timestamp": 1742237827
    },
    {
        "content": "<blockquote>\n<p>But it's less than <em>or equal to</em> right?</p>\n</blockquote>\n<p>Oh right yes, correct.</p>\n<blockquote>\n<p>I did a bit of digging and I'll use <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1ea710d60a5911240d594af26f1c08c0f0c33bd8/crates/wasmtime/src/runtime/vm/memory/malloc.rs\"><code>runtime/vm/memory/malloc.rs</code></a> as reference for managing main module memory</p>\n</blockquote>\n<p>Oh that's a good idea, I'd definitely recommend following the rough structure there. If you come across anything we should document more clearly in <code>LinearMemory</code> though please feel free to mention here or file an issue as well (or even a PR if you're up for it)</p>",
        "id": 506238296,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1742238230
    },
    {
        "content": "<p>Definitely!</p>",
        "id": 506258312,
        "sender_full_name": "Marc Guiselin",
        "timestamp": 1742244847
    }
]