[
    {
        "content": "<p>Hey all, in adding tests to my bit of the P3 work, it would be nice to have some sort of test-time introspection available for the runtime -- in particular I'd like to validate things like component instance state stored in the runtime.</p>\n<p>There is some debug machinery that's feature flagged in (and accessible via FFI), but what I'm envisioning is used from Rust land (and I'm guessing has to be snaked up through <code>Engine</code> somewhere), and only for tests -- being able to validate internal runtime state after doing something very specific with loaded components, etc.</p>\n<p>Are there any objections to adding code like this? I can't seem to find something like this that's been done in the past -- and I'm not sure there's a reasonable way to view the results from the \"outside\" for all cases I'd like to test. I can imagine doing something like calling <code>error-context.debug-message</code> and <em>expecting</em> a trap, but given that the host-side constructs can hold error context references I don't think that works for testing everything.</p>",
        "id": 495745473,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1737734300
    },
    {
        "content": "<p>In the context of what you're working on, we could perhaps add a <code>#[cfg(feature = \"component-model-async-debug\")] pub fn sanity_check(store: impl AsContextMut, ...) { ... }</code> function to <code>futures_and_streams.rs</code>.  Not sure if there's any precedent for something like that, though.</p>",
        "id": 495748016,
        "sender_full_name": "Joel Dice",
        "timestamp": 1737735126
    },
    {
        "content": "<p>At first I was thinking of adding some <code>if cfg!(debug_assertions) { ... }</code> code to <code>impl&lt;T&gt; Drop for Store&lt;T&gt;</code>, but the assertions we'd add there (e.g. that all <code>error-context</code> tables were empty) wouldn't hold in all cases; there's no rule that says component instances must drop all their handles before being \"uninstantiated\" (and that wouldn't make sense anyway, since the host decides when to dispose of an instance, and there's no concept in Wasm of uninstantiation AFAIK).</p>",
        "id": 495748821,
        "sender_full_name": "Joel Dice",
        "timestamp": 1737735398
    },
    {
        "content": "<p>Yeah that makes sense -- I wanted access to one or more<code>ComponentInstance</code>s so I could check that state, but adding the functionality to <code>futures_and_streams.rs</code> is probably  a good idea.</p>\n<p>Still figuring out how to wire it through -- likely the <code>Store</code> makes more sense than the <code>Engine</code> possibly.</p>",
        "id": 495830103,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1737776126
    }
]