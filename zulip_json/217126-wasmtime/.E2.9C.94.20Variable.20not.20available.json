[
    {
        "content": "<p>Got same issue. Seems to be a wasmtime regression. Will try with other engines to attempt to identify more precisely than hunch.</p>\n<p>Grok says : <a href=\"http://advance-software.com/misc/wasm_compare.html\">http://advance-software.com/misc/wasm_compare.html</a></p>",
        "id": 547059959,
        "sender_full_name": "Steve Williams",
        "timestamp": 1761401027
    },
    {
        "content": "<p>My current example at the end of this issue : <a href=\"https://github.com/llvm/llvm-project/issues/163799\">https://github.com/llvm/llvm-project/issues/163799</a></p>\n<p>Thought it was an lldb regression or side effect from method I've used to re-activate wasm breakpoints, however on further reading, seems wasmtime has had this issue in the past &amp; it's potentially returned.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/llvm/llvm-project/issues/163799\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/99bd59685d2846c2e57cc1164ba6cfa7b1268cc2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386636313966333462323436663432656430623636623739633066313236643864623137303634333536393066653531613865623431333365623431376636312f6c6c766d2f6c6c766d2d70726f6a6563742f6973737565732f313633373939&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/llvm/llvm-project/issues/163799\" title=\"LLDB: Breakpoints regressed - Web Assembly invoked from WASM C-API in a dynamic library (fix included) · Issue #163799 · llvm/llvm-project\">LLDB: Breakpoints regressed - Web Assembly invoked from WASM C-API in a dynamic library (fix included) · Issue #163799 · llvm/llvm-project</a></div><div class=\"message_embed_description\">What happened : LLDB breakpoints stopped working. Specific use case example here : https://advance-software.com/develop/#tutorial Our app invokes Web Asssembly C-API from a plugin (DLL on Windows) ...</div></div></div>",
        "id": 547060330,
        "sender_full_name": "Steve Williams",
        "timestamp": 1761401408
    },
    {
        "content": "<p>These are separate issues: one is about breakpoints not working, the other about variable inspection</p>",
        "id": 547060419,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1761401514
    },
    {
        "content": "<p>the variable inspection one is the more important. bcoz if that's a genuine regression in wasmtime, it means the breakpoint fix I have isn't so far off correct.</p>",
        "id": 547060521,
        "sender_full_name": "Steve Williams",
        "timestamp": 1761401617
    },
    {
        "content": "<p>All I'm saying is that it'd be good to keep them separate instead of claiming they're the same issue</p>",
        "id": 547060609,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1761401700
    },
    {
        "content": "<p>well, the variables not resolving issue is the same - perhaps different causes, perhaps not. this post interesting as it shows the problem without, it seems any changes to lldb.</p>",
        "id": 547060668,
        "sender_full_name": "Steve Williams",
        "timestamp": 1761401763
    },
    {
        "content": "<p>it is absolutely not the same issue: the symptoms are completely different, the impact on usability is different depending on requirements, and the underlying causes are very different as well. Additionally, your issue is limited to your specific way of embedding Wasmtime, wheres this is affecting the <code>wasmtime</code> CLI. I get that both are problems for you, but that doesn't make them the same issue.</p>\n<p>Let's end this discussion here and focus on the actual issue at hand</p>",
        "id": 547060805,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1761401908
    },
    {
        "content": "<p>we're guessing. next step, needs a simple wasm in c or rust demonstrating the problem - I'll see if I can generate a simple repro. anyone else who gets one, first, that'd help.</p>",
        "id": 547060853,
        "sender_full_name": "Steve Williams",
        "timestamp": 1761401962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395878\">@Scott Waye</span> we unfortunately have some bugs in our implementation of transforming Wasm DWARF to native as part of compilation, as reported in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/?q=is%3Aissue%20state%3Aopen%20debugger\">a number of issues</a>. There's some work on improving that, but the bigger effort for guest debugging is in completely <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasmtime-debugging-v2.md\">changing the approach</a>. There's very active work on this, e.g. <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11930\">here</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11921\">here</a>, and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/11826\">here</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/?q=is%3Aissue%20state%3Aopen%20debugger\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/07e564bf9378fd98672e52a0eec690dd26a69ce2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613137353630326561326538353961396366373866303634363230333936383364386639396164353037383236303039336535346639346366646361323635342f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/?q=is%3Aissue%20state%3Aopen%20debugger\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasmtime-debugging-v2.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9d8e87fdd66ee9e7321b629fe41cc8a20b28301c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373539616362643435323436653366653439363837643938333237333065333162656230363161376537383961316137663834633435346335353662623166342f62797465636f6465616c6c69616e63652f72666373&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasmtime-debugging-v2.md\" title=\"rfcs/accepted/wasmtime-debugging-v2.md at main · bytecodealliance/rfcs\">rfcs/accepted/wasmtime-debugging-v2.md at main · bytecodealliance/rfcs</a></div><div class=\"message_embed_description\">RFC process for Bytecode Alliance projects. Contribute to bytecodealliance/rfcs development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/11930\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3f13764ec79d2393dbb25bbc4a6245de5cae88bc/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656361363239666161313734316362383931613831383361386133666235383236663030323936376239313931376436383961663663363763306663336163662f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3131393330&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/11930\" title=\"Debug: implement call injection to invoke debug event handlers at signal-based traps. by cfallin · Pull Request #11930 · bytecodealliance/wasmtime\">Debug: implement call injection to invoke debug event handlers at signal-based traps. by cfallin · Pull Request #11930 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">(Stacked on top of #11921)\nThis repurposes the code from #11826 to &quot;inject calls&quot;: when in a signal\nhandler, we can update the register state to redirect execution upon\nsignal-handler ret...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/11921\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/14351fea5e09a8a5332747ea85e75ec29cb48efd/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346533656137343234316232646230396465323432643631333366373432363430646162323361666530383465373430663066646332373938343639663730312f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3131393231&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/11921\" title=\"Debug: add some infrastructure for catching traps, and handle traps properly in Pulley. by cfallin · Pull Request #11921 · bytecodealliance/wasmtime\">Debug: add some infrastructure for catching traps, and handle traps properly in Pulley. by cfallin · Pull Request #11921 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is a followup to #11895 where I had disabled a test that failed to emit a debug event for a hostcall-generated trap on a divide-by-zero in Pulley. This PR allows that test to pass, and brings ...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/11826\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/532cdead123b08bbe8a285d0a04c73ff7f6fa9b9/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663662323130653536363765663632393137666561343961356234306266643064626439363330383536366530313863396239386461376430316365623232392f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3131383236&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/11826\" title=\"Debugging: add an async debug-step-result interface, and catch traps with it. by cfallin · Pull Request #11826 · bytecodealliance/wasmtime\">Debugging: add an async debug-step-result interface, and catch traps with it. by cfallin · Pull Request #11826 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">(Stacked on top of #11769.)\nAs part of the new guest-debugging API, we want to allow the host to\nexecute the debugged guest code asynchronously, receiving its &quot;debug\nstep&quot; results each ti...</div></div></div>",
        "id": 547060890,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1761402004
    },
    {
        "content": "<p>Awesome, thanks!</p>",
        "id": 547062642,
        "sender_full_name": "Scott Waye",
        "timestamp": 1761403688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395878\">Scott Waye</span> has marked this topic as resolved.</p>",
        "id": 547062647,
        "sender_full_name": "Notification Bot",
        "timestamp": 1761403693
    },
    {
        "content": "<p>Seems problem is worked around by using v0.33.1 - the most recent - as of my current understanding before this regression occurred.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/releases?page=13\">https://github.com/bytecodealliance/wasmtime/releases?page=13</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/releases?page=13\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/07e564bf9378fd98672e52a0eec690dd26a69ce2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613137353630326561326538353961396366373866303634363230333936383364386639396164353037383236303039336535346639346366646361323635342f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/releases?page=13\" title=\"Releases · bytecodealliance/wasmtime\">Releases · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 547064630,
        "sender_full_name": "Steve Williams",
        "timestamp": 1761405709
    },
    {
        "content": "<p>removed variables missing from my lldb issue report as fairly certain that's this wasmtime issue now.<br>\nusing 0.33.1 for the time being with our project resolves the matter. so that's my workaround for now.</p>",
        "id": 547066925,
        "sender_full_name": "Steve Williams",
        "timestamp": 1761408104
    }
]