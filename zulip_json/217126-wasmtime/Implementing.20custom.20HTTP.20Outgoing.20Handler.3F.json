[
    {
        "content": "<p>I'd like to work on a demo where I can run <a href=\"https://github.com/yoshuawuyts/wstd/blob/main/examples/http_client.rs\">this wstd http client example</a> using a custom implementation of the WASI http interface.</p>\n<p>I'd like to have a runtime that provides implementations using both <a href=\"https://docs.quic.tech/quiche/h3/index.html\">quiche</a> and <a href=\"https://crates.io/crates/arti-client\">arti</a>.</p>\n<p><a href=\"/user_uploads/15107/l5KkR99zyYLrCWiyRoxrhm6w/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/l5KkR99zyYLrCWiyRoxrhm6w/image.png\" title=\"image.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"488x638\" src=\"/user_uploads/thumbnail/15107/l5KkR99zyYLrCWiyRoxrhm6w/image.png/840x560.webp\"></a></div><p>This is what I have for the client program, I am wondering where to start on this?</p>\n<p>I saw a wasmtime http example similar to this but also allowing http access, I can't seem to find it again?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! Example of instantiating a wasm module which uses WASI imports.</span>\n\n<span class=\"cm\">/*</span>\n<span class=\"cm\">You can execute this example with:</span>\n<span class=\"cm\">    cmake examples/</span>\n<span class=\"cm\">    cargo run --example wasip2</span>\n<span class=\"cm\">*/</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sync</span><span class=\"p\">::</span><span class=\"n\">Command</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::{</span><span class=\"n\">IoView</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">};</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// These two are required basically as a standard way to enable the impl of IoView and</span>\n<span class=\"w\">    </span><span class=\"c1\">// WasiView.</span>\n<span class=\"w\">    </span><span class=\"c1\">// impl of WasiView is required by [`wasmtime_wasi::add_to_linker_sync`]</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">wasi_ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">resource_table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">// You can add other custom host states if needed</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IoView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource_table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasi_ctx</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Define the WASI functions globally on the `Config`.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create a WASI context and put it in a Store; all instances in the store</span>\n<span class=\"w\">    </span><span class=\"c1\">// share this context. `WasiCtxBuilder` provides a number of ways to</span>\n<span class=\"w\">    </span><span class=\"c1\">// configure what the target program will have access to.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">inherit_stdio</span><span class=\"p\">().</span><span class=\"n\">inherit_args</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">wasi_ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasi</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">resource_table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Instantiate our component with the imports we've created, and run it.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"target/wasm32-wasip2/debug/wasi.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"p\">::</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">program_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">wasi_cli_run</span><span class=\"p\">().</span><span class=\"n\">call_run</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">program_result</span><span class=\"p\">.</span><span class=\"n\">is_err</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">process</span><span class=\"p\">::</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Alternatively, instead of using `Command`, just instantiate it as a normal component</span>\n<span class=\"w\">    </span><span class=\"c1\">// New states</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">inherit_stdio</span><span class=\"p\">().</span><span class=\"n\">inherit_args</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ComponentRunStates</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">wasi_ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasi</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">resource_table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">// Instantiate it as a normal component</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// Get the index for the exported interface</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">interface_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"wasi:cli/run@0.2.0\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Cannot get `wasi:cli/run@0.2.0` interface\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">// Get the index for the exported function in the exported interface</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parent_export_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">interface_idx</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">parent_export_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"run\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Cannot get `run` function in `wasi:cli/run@0.2.0` interface\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_idx</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unreachable since we've got func_idx\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">// As the `run` function in `wasi:cli/run@0.2.0` takes no argument and return a WASI result that correspond to a `Result&lt;(), ()&gt;`</span>\n<span class=\"w\">    </span><span class=\"c1\">// Reference:</span>\n<span class=\"w\">    </span><span class=\"c1\">// * https://github.com/WebAssembly/wasi-cli/blob/main/wit/run.wit</span>\n<span class=\"w\">    </span><span class=\"c1\">// * Documentation for [Func::typed](https://docs.rs/wasmtime/latest/wasmtime/component/struct.Func.html#method.typed) and [ComponentNamedList](https://docs.rs/wasmtime/latest/wasmtime/component/trait.ComponentNamedList.html)</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">typed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">typed</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">typed</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// Required, see documentation of TypedFunc::call</span>\n<span class=\"w\">    </span><span class=\"n\">typed</span><span class=\"p\">.</span><span class=\"n\">post_return</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">anyhow</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"error\"</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/yoshuawuyts/wstd/blob/main/examples/http_client.rs\" style='background-image: url(\"https://uploads.zulipusercontent.net/4825b75f7c8b491e2340906f1dce7204c9695e4b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353765626233313934316236333463353939393261616463663265616330333065383134643364643161393738333838333130303337383630626536663737612f796f7368756177757974732f77737464\")'></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/yoshuawuyts/wstd/blob/main/examples/http_client.rs\" title=\"wstd/examples/http_client.rs at main · yoshuawuyts/wstd\">wstd/examples/http_client.rs at main · yoshuawuyts/wstd</a></div><div class=\"message_embed_description\">A WebAssembly-native stdlib. Contribute to yoshuawuyts/wstd development by creating an account on GitHub.</div></div></div>",
        "id": 503681135,
        "sender_full_name": "Claire Smith",
        "timestamp": 1741230032
    },
    {
        "content": "<p>Once I have a runtime that can successfully provide http capabilities then I can wade through the standard implementation and see what I have to do to</p>",
        "id": 503681637,
        "sender_full_name": "Claire Smith",
        "timestamp": 1741230247
    },
    {
        "content": "<p>Do the <a href=\"https://docs.rs/wasmtime-wasi-http/latest/wasmtime_wasi_http/#examples\">examples here</a> help with what you're looking to achieve?</p>",
        "id": 503701437,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741239657
    }
]