[
    {
        "content": "<p>In working on a patch for <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10245\">https://github.com/bytecodealliance/wasmtime/issues/10245</a> I was attempting to use the min-platform example in tree to do some testing around some of the <code>no_std</code> and <code>#[cfg(not(has_virtual_memory))]</code> paths.</p>\n<p>I wanted to confirm whether there was a way to directly get the example to run.  Targeting <code>x86_64-unknown-none</code> triple on an x64 host runs but fails out on \"cannot load native code - requires virtual memory\"</p>\n<p>Just want to check that I'm not missing something obvious; I started to try some tweaks to the example to attempt to target pulley64 which should avoid the virtual memory requirement for the embedding.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/10245\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0b7906ae4858a305667cadd14c83fd46b14ff092/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616230373165346535396631313637633737363563393435646537366533346130396431393661303937663231353865326266386335333136656634623963342f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f3130323435&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/10245\" title=\"Enable deserializing code owned by some external source · Issue #10245 · bytecodealliance/wasmtime\">Enable deserializing code owned by some external source · Issue #10245 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Currently in Wasmtime we have Module::deserialize and Module::deserialize_file. Given these APIs though it has the fundamental requirements that deserialize will copy the bytes into Wasmtime (e.g. ...</div></div></div>",
        "id": 502678103,
        "sender_full_name": "Paul Osborne",
        "timestamp": 1740781836
    },
    {
        "content": "<p>The test on CI is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/af31e80deac455fe7c2dc17a121a7a9151f84338/.github/workflows/main.yml#L948-L963\">configured here</a> where the general idea is that the host is x64 linux but the guest is \"x64 none\" so we're sort of lying that it's all embedded</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/af31e80deac455fe7c2dc17a121a7a9151f84338/.github/workflows/main.yml#L948-L963\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/88c9e8ec2678754ce9bd0da5109143ee1d66323b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353930623730613131633336626163653332623332643133333161303363633961326130393337306133343335333830616330666633663930626534363563622f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/af31e80deac455fe7c2dc17a121a7a9151f84338/.github/workflows/main.yml#L948-L963\" title=\"wasmtime/.github/workflows/main.yml at af31e80deac455fe7c2dc17a121a7a9151f84338 · bytecodealliance/wasmtime\">wasmtime/.github/workflows/main.yml at af31e80deac455fe7c2dc17a121a7a9151f84338 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 502680009,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740782826
    },
    {
        "content": "<p>in theory though <code>./build.sh x86_64-unknown-none</code> on an x64 host should work</p>",
        "id": 502680042,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740782852
    },
    {
        "content": "<p>Ok, I have it working now.  I had seen the ci test but hadn't looked at the output in detail.  Running the build with <code>WASMTIME_SIGNALS_BASED_TRAPS=1</code> makes the difference to include the <code>custom</code> feature.</p>",
        "id": 502683445,
        "sender_full_name": "Paul Osborne",
        "timestamp": 1740784756
    },
    {
        "content": "<p>Speaking of pulley and constrained environments, how can I verify pulley bytecode on the constrained device itself? Right now I'm doing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Module</span><span class=\"p\">::</span><span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm_engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"fm\">include_bytes!</span><span class=\"p\">(</span><span class=\"s\">\"../patch.cwasm\"</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>What if I don't necessarily trust the code being loaded?<br>\nIs there some different API that allows to validate pulley bytecode being loaded?</p>",
        "id": 504373721,
        "sender_full_name": "Ilya",
        "timestamp": 1741513148
    },
    {
        "content": "<p>Pulley bytecode is inherently trusted. It can read and write arbitrary memory on the host. Verifying that it doesn't do anything bad would require something like proof carrying code, which is an open research area.</p>",
        "id": 504374193,
        "sender_full_name": "bjorn3",
        "timestamp": 1741513498
    },
    {
        "content": "<p>Is there any other way to run untrusted code on a constrained device with wasmtime? The device is no_std. Currently it's Cortex-M33 (with MPU) core of rp2350</p>",
        "id": 504374589,
        "sender_full_name": "Ilya",
        "timestamp": 1741513804
    },
    {
        "content": "<p>bjorn3 is correct, there's no way to verify the input to <code>Module::deserialize</code>. It's up to the embedder to ensure those are trusted bytes.</p>",
        "id": 504415479,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741542843
    },
    {
        "content": "<p>There is no way to receive an untrusted <code>*.cwasm</code> and run it safely</p>",
        "id": 504415495,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1741542853
    },
    {
        "content": "<p>Thanks guys!</p>",
        "id": 504501075,
        "sender_full_name": "Ilya",
        "timestamp": 1741594580
    }
]