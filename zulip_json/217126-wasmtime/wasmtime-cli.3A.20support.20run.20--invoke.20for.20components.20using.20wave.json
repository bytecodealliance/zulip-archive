[
    {
        "content": "<p>I built wasmtime using a branch that implements wasmtime-cli support to <code>--invoke</code> an individual function (that resides in a Wasm component). </p>\n<p>The steps I followed to use the wasmtime branch with the updates are below:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">cd</span><span class=\"w\"> </span>/Users/tpmccallum\ngit<span class=\"w\"> </span>clone<span class=\"w\"> </span>https://github.com/bytecodealliance/wasmtime.git\n<span class=\"nb\">cd</span><span class=\"w\"> </span>wasmtime\ngit<span class=\"w\"> </span>checkout<span class=\"w\"> </span>main\ngit<span class=\"w\"> </span>pull<span class=\"w\"> </span>origin<span class=\"w\"> </span>main\ngit<span class=\"w\"> </span>checkout<span class=\"w\"> </span>pch/invoke_wave\ngit<span class=\"w\"> </span>merge<span class=\"w\"> </span>main\ncargo<span class=\"w\"> </span>clean\ncargo<span class=\"w\"> </span>build<span class=\"w\"> </span>--release\n</code></pre></div>\n<p>Then the actual component, creation and execution steps I used are below (for your convenience). This is the Rust app structure:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>tpmccallum<span class=\"w\"> </span>%tree<span class=\"w\"> </span>.\n.\n├──<span class=\"w\"> </span>compress\n<span class=\"w\">    </span>├──<span class=\"w\"> </span>Cargo.lock\n<span class=\"w\">    </span>├──<span class=\"w\"> </span>Cargo.toml\n<span class=\"w\">    </span>├──<span class=\"w\"> </span>src\n<span class=\"w\">    </span>│<span class=\"w\">   </span>├──<span class=\"w\"> </span>bindings.rs<span class=\"w\"> </span>//<span class=\"w\"> </span>automatically<span class=\"w\"> </span>generated<span class=\"w\"> </span>by<span class=\"w\"> </span>cargo<span class=\"w\"> </span>component\n<span class=\"w\">    </span>│<span class=\"w\">   </span>└──<span class=\"w\"> </span>lib.rs\n<span class=\"w\">    </span>└──<span class=\"w\"> </span>wit\n<span class=\"w\">        </span>└──<span class=\"w\"> </span>compress.wit\n</code></pre></div>\n<p>This is the WIT:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package example:component;\n\nworld compress {\n    export compress: func() -&gt; list&lt;u8&gt;;\n}\n</code></pre></div>\n<p>This is the Cargo.toml:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"compress\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">zstd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.13\"</span>\n<span class=\"n\">wit-bindgen-rt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.39.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"bitflags\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"k\">[lib]</span>\n<span class=\"n\">crate-type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"cdylib\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">[package.metadata.component]</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"wit/compress.wit\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>This is the <code>src/lib.rs</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(warnings)]</span>\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"p\">;</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">zstd</span><span class=\"p\">::</span><span class=\"n\">stream</span><span class=\"p\">::</span><span class=\"n\">encode_all</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Cursor</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Component</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">compress</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"this is a data compression example\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">encode_all</span><span class=\"p\">(</span><span class=\"n\">Cursor</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"n\">with_types_in</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>I used <code>cargo-build</code> with wasip1 target:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>The<span class=\"w\"> </span>PR<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>this<span class=\"w\"> </span>work/branch<span class=\"w\"> </span>that<span class=\"w\"> </span>I<span class=\"w\"> </span>used<span class=\"w\"> </span>is<span class=\"w\"> </span>still<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>draft.<span class=\"w\"> </span>Can<span class=\"w\"> </span>this<span class=\"w\"> </span>me<span class=\"w\"> </span>moved<span class=\"w\"> </span>along<span class=\"w\"> </span><span class=\"o\">(</span>out<span class=\"w\"> </span>of<span class=\"w\"> </span>draft<span class=\"o\">)</span><span class=\"w\"> </span>and<span class=\"w\"> </span>into<span class=\"w\"> </span>a<span class=\"w\"> </span>testing<span class=\"w\"> </span>phase<span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span>be<span class=\"w\"> </span>merged?<span class=\"w\"> </span>&lt;<span class=\"w\"> </span>https://github.com/bytecodealliance/wasmtime/pull/10054<span class=\"w\"> </span>&gt;\n</code></pre></div>",
        "id": 508875433,
        "sender_full_name": "Timothy McCallum",
        "timestamp": 1743215277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span>, do you want to hand that PR off to <span class=\"user-mention\" data-user-id=\"421662\">@Timothy McCallum</span> to fix a few remaining CI issues and try to get it merged? I can't remember if there was any opposition to using WAVE syntax but it always seemed reasonable to me.</p>",
        "id": 509256138,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1743439933
    },
    {
        "content": "<p>It really just needs better error messages to be ready to land, and yes <span class=\"user-mention\" data-user-id=\"421662\">@Timothy McCallum</span> if you want to make a PR targeting my branch that improves that, we can get it landed soon</p>",
        "id": 509256392,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1743440025
    },
    {
        "content": "<p>Sounds like a plan <span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> and <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> <br>\nChat soon</p>",
        "id": 509352584,
        "sender_full_name": "Timothy McCallum",
        "timestamp": 1743479949
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> <br>\nPlease note that I have updated the error message output for the <code>--invoke</code> feature and also updated the related documentation. More info here:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/10054#issuecomment-2768318470\">https://github.com/bytecodealliance/wasmtime/pull/10054#issuecomment-2768318470</a></p>\n<p>I will look at the CI errors tomorrow. <br>\nChat soon</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/10054#issuecomment-2768318470\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f88ec1c0cb5ed90f54cb0dc9c28763ad212790a4/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363564383064333833396630373037633235393464613261663032626437363866663937623562326136343062316562666365323831386239643230636665392f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3130303534&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/10054#issuecomment-2768318470\" title=\"wasmtime-cli: support `run --invoke` for components using wave by pchickey · Pull Request #10054 · bytecodealliance/wasmtime\">wasmtime-cli: support `run --invoke` for components using wave by pchickey · Pull Request #10054 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">We read every piece of feedback, and take your input very seriously.</div></div></div>",
        "id": 509424649,
        "sender_full_name": "Timothy McCallum",
        "timestamp": 1743506617
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> and <span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> <br>\nPlease note, I have an update on this <code>--invoke</code> work at <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\">https://github.com/bytecodealliance/wasmtime/pull/10511</a></p>\n<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I see that you have automatically been assigned as a reviewer <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <br>\nSuper happy to do more on this topic (there are a couple of things to iron out in the PR). Will check back in tomorrow. Please feel free to hit me up for tasks relating to this one. Happy to help.<br>\nChat soon<br>\nTim</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f30b938ba255a7267a473cfeeb17d4a92bfec496/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376231626465313761373737646139346663306431613465303866373931373931316533646334346266666238313038376465646535333339663261653832652f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f3130353131&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/10511\" title=\"Invoke wave enhancements by tpmccallum · Pull Request #10511 · bytecodealliance/wasmtime\">Invoke wave enhancements by tpmccallum · Pull Request #10511 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This PR is in relation to the Zulip conversation at #wasmtime &gt; wasmtime-cli: support run --invoke for components using wave.\nThis PR includes @pchickey&#39;s existing PR 10054. (Apologies @pchi...</div></div></div>",
        "id": 509634211,
        "sender_full_name": "Timothy McCallum",
        "timestamp": 1743582923
    },
    {
        "content": "<p>thanks for bearing with me this week, i was traveling and in meetings nonstop. just got the PR ready for review sitting at the airport waiting to fly home</p>",
        "id": 510303957,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1743807362
    },
    {
        "content": "<p>Oh you're fine lol</p>",
        "id": 510304269,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743807532
    },
    {
        "content": "<p>I've been chasing segfaults all  week it seems...</p>",
        "id": 510304282,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1743807545
    }
]