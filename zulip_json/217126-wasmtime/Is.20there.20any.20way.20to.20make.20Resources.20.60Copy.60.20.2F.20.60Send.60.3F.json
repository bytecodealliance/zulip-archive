[
    {
        "content": "<p>Hey all, I'm trying my hand at trying to build a wasmtime host that allows a guest to be able to specify a GUI. Yet I'm having a heck of a time trying to get this to work with wasmtime.</p>\n<p>One of the thing I'm running into is things (in particular: Resources, tables) needing to be <code>Send</code> / <code>Sync</code> to be able to use them with various GUI crates. And in working on this, I realized: It'd make my life a lot easier if resources were <code>Copy</code> -- that way I could just copy and move resources into closures as needed.</p>\n<p>Is there any reason why this is not currently possible with wasmtime? Resources are basically just handles (indices) into a table, right? Shouldn't they be <code>Copy</code>?</p>\n<p>I'm not sure if that would solve all my issues of trying to get this to work completely, but I think it'd help.</p>\n<p>Another issue I'm running into is to be able to resolve resources within <code>Send</code> / <code>Sync</code> closures, I want to be able to wrap my <code>ResourceTable</code> in <code>Arc&lt;Mutex&lt;&gt;&gt;</code> -- yet as far as I can tell it's not really possible to have a <code>Arc&lt;Mutex&lt;ResourceTable&gt;&gt;</code> field in my state struct due to traits I have to implement like <code>IoView</code>.</p>",
        "id": 534827325,
        "sender_full_name": "Nathan Bedell",
        "timestamp": 1755441264
    },
    {
        "content": "<p>A handle requires reference counting of the object, so, like Arc, it can't be Copy. Up to now there is no common convention on how to name a clone method, but I am quite sure Clone would be the way to go.</p>",
        "id": 534828971,
        "sender_full_name": "Christof Petig",
        "timestamp": 1755443318
    },
    {
        "content": "<p>I think it'd be reasonable to add <code>Copy</code> yeah, would you be up for sending a PR? I've historically meant to do this myself but never got around to it alas.</p>",
        "id": 534971016,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1755529530
    },
    {
        "content": "<p>Otherwise for your table-sharing case, you can use two resource tables -- one for WASI and one for your embedding, that way the WASI one wouldn't be behind a mutex but yours would be</p>",
        "id": 534971102,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1755529556
    },
    {
        "content": "<p>Oh and I'm assuming you mean <code>Copy for Resource&lt;T&gt;</code> in the Wasmtime API, if it's something else though I may be misunderstanding</p>",
        "id": 534971204,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1755529591
    },
    {
        "content": "<p>I am still surprised that Copy is an option because each <code>Resource&lt;T&gt;</code> copy would call <code>[resource-drop]T</code> on the same ID, but that would surely confuse the resource table handling.</p>\n<p>Thus I assumed the only option would be to call a <code>[method]T.clone</code> into the resource implementation which would return a new object with a new ID.</p>",
        "id": 535009711,
        "sender_full_name": "Christof Petig",
        "timestamp": 1755545367
    },
    {
        "content": "<p>(oh, I misread, this is obviously about the host side)</p>",
        "id": 535009921,
        "sender_full_name": "Christof Petig",
        "timestamp": 1755545457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/channel/217126-wasmtime/topic/Is.20there.20any.20way.20to.20make.20Resources.20.60Copy.60.20.2F.20.60Send.60.3F/near/534971016\">said</a>:</p>\n<blockquote>\n<p>I think it'd be reasonable to add <code>Copy</code> yeah, would you be up for sending a PR? I've historically meant to do this myself but never got around to it alas.</p>\n</blockquote>\n<p>Hey, sorry for the delay. Yeah, I'd be up for submitting a PR. I think <code>Clone</code> would work just fine as well if that's necessary for reference counting.</p>",
        "id": 535810669,
        "sender_full_name": "Nathan Bedell",
        "timestamp": 1755960520
    }
]