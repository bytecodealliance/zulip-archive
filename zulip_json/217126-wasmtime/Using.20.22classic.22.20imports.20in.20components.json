[
    {
        "content": "<p>I'm using <code>no-std</code> and the component model and right now <code>component-model-async</code> requires std but the <code>async</code> feature doesn't. Also <code>Component::LinkerInstance::func_wrap_async</code> only requires the <code>async</code>feature. So my idea to put some async functionality was to: </p>\n<ul>\n<li>In my component, on top of the stuff generated by <code>wit_bindgen::generate</code>  add an <code>unsafe extern \"C\" {}</code> block with the async functions</li>\n<li>On the host side, use <code>linker.root().func_wrap_async</code> to provide the function. <br>\nThe first point fails at the componentization step.  Is this way doomed ? Is there a better way to do this ?</li>\n</ul>",
        "id": 541649851,
        "sender_full_name": "Antoine Lavandier",
        "timestamp": 1758887788
    },
    {
        "content": "<p>Can you describe more what you're trying to do? Without an error message or a reproduction it's tough to reach a conclusion such as \"yeah this isn't supported\" vs \"oh just tweak this that's a minor configuration error\" or anything inbetween</p>",
        "id": 541735163,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1758915953
    },
    {
        "content": "<p>Basically, I was trying to turn this kind of (rust) file into a component: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// imports</span>\n<span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"s\">\"world\"</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// implement Guest Trait etc...</span>\n\n<span class=\"cp\">#[link(wasm_import_module = </span><span class=\"s\">\"foo\"</span><span class=\"cp\">)]</span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">bar</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The reason why I'm trying to do this is to manually bind \"[foo]bar\" using <code>component::Linker::func_wrap_aysnc</code> to circumvent using the <code>component-model-async</code> feature. </p>\n<p>In any case, compiling such a file to Wasm works but running <code>wasm-tools component new</code> fails with </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">decode</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">module</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">valid</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">resolve</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">foo</span><span class=\"p\">::</span><span class=\"n\">bar</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">named</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">foo</span><span class=\"err\">`</span>\n</code></pre></div>",
        "id": 541965382,
        "sender_full_name": "Antoine Lavandier",
        "timestamp": 1759132495
    },
    {
        "content": "<p>The component model doesn't support importing/exporting core wasm functions: you have to wrap the function in a component export instead.</p>\n<p>I'm not sure I entirely follow what you're trying to do wrt async, but note that you can in principle generate C bindings for your interface and then implement them in largely the same way you're trying to use core wasm functions here</p>",
        "id": 542003663,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1759143179
    }
]