[
    {
        "content": "<p>Hello, I was curious if wasi p3 is still using polling internally. We introduce streams and futures but was more wondering about the technology that facilitates these types. Thinking about moving my event loop to p3 and just needed a mental model</p>",
        "id": 525938420,
        "sender_full_name": "Cwasi4wasm",
        "timestamp": 1750954102
    },
    {
        "content": "<p>In p3, there are two ways you can wait for async operations (which we call \"waitables\", e.g. subtasks representing async import calls, stream/future reads/writes, etc.):</p>\n<ul>\n<li>Call the <code>waitable-set.wait</code> intrinsic function, which will block until at least one of the waitables in the specified set is ready</li>\n<li>Return <code>CALLBACK_CODE_WAIT</code> from the callback function of an async-lifted export function, which indicates that the callback should be called again once at least one of the waitables in the set is ready</li>\n</ul>\n<p>The latter is generally preferable, since it allows other tasks in the same instance to run concurrently.  Some time after 0.3.0 is released, we'll also add support for \"stackful\" async exports which allow the host to make multiple concurrent calls to the same component, each with its own stack, and each of those can use <code>waitable-set.wait</code> without limiting concurrency.  That's already implemented in the <code>wasip3-prototyping</code> repo today, but won't be an official part of the component model until a later 0.3.x release.</p>\n<p>Happy to answer any other questions you might have.</p>",
        "id": 525944498,
        "sender_full_name": "Joel Dice",
        "timestamp": 1750956324
    },
    {
        "content": "<p>BTW, the Rust bindings generator in <code>wit-bindgen</code> uses the <code>CALLBACK_CODE_WAIT</code> approach, allowing application code to export <code>async</code> functions in a natural way without requiring an <code>async</code> runtime (e.g. Tokio) in guest code.  My mental model is that the host is providing the async runtime and the guest is communicating with it via intrinsic functions and callback return codes.</p>",
        "id": 525945512,
        "sender_full_name": "Joel Dice",
        "timestamp": 1750956675
    },
    {
        "content": "<p>Oh that is interesting im thinking the use of CALLBACK_CODE_WAIT if I have a group of async methods I could check the list for which ones have a CALLBACK_CODE_WAIT in a competed fashion. I guess every time an steams and futures are encountered, wasmtime automatically puts it in the internal table. </p>\n<p>I was also wondering will wasi-libc be updated with p3 as well?(it takes time for sure but I was mostly just wondering)</p>",
        "id": 525946545,
        "sender_full_name": "Cwasi4wasm",
        "timestamp": 1750957023
    },
    {
        "content": "<p>No work has started on p3 support in <code>wasi-libc</code> yet.  I'm hoping to start that in the not-too-distant future.</p>",
        "id": 525947867,
        "sender_full_name": "Joel Dice",
        "timestamp": 1750957503
    },
    {
        "content": "<p>The way <code>CALLBACK_CODE_WAIT</code> works is something like this:</p>\n<ul>\n<li>Host calls async-lifted export in guest</li>\n<li>Guest calls e.g. 3 async-lowered imports (let's assume none of them complete synchronously), producing 3 waitables representing the subtasks created by those calls</li>\n<li>Guest also starts a write to a stream, producing another waitable</li>\n<li>Guest has nothing left to do but wait for one or more of those 4 waitables to complete, so it creates a <code>waitable-set</code>, adds all 4 waitables to that set, returns <code>CALLBACK_CODE_WAIT | (waitable_set_handle &lt;&lt; 4)</code> to the host</li>\n<li>Host does whatever else it needs to do (e.g. run other tasks) until at least one of those waitables completes</li>\n<li>Host calls the guest's callback, passing it a <code>EVENT_SUBTASK</code> or <code>EVENT_STREAM_WRITE</code> code (depending on which waitable is ready) and the waitable that's ready (plus the number of elements written in the case of <code>EVENT_STREAM_WRITE</code>)</li>\n<li>Guest does whatever it wants with that event, possibly creating new waitables and adding them to the set</li>\n<li>Guest returns <code>CALLBACK_CODE_WAIT | (waitable_set_handle &lt;&lt; 4)</code> to the host again when appropriate</li>\n<li>etc. until the guest task decides it has no more to do, in which case it returns <code>CALLBACK_CODE_EXIT</code>, which tells the host the task is complete</li>\n</ul>",
        "id": 525949636,
        "sender_full_name": "Joel Dice",
        "timestamp": 1750958186
    },
    {
        "content": "<p>That's awesome. Thank you so much for the explanation I might also take a look at wit-bindgen, I usually read that when I want to see a \"spec in action\". </p>\n<p>Thanks again Dice!</p>",
        "id": 525950044,
        "sender_full_name": "Cwasi4wasm",
        "timestamp": 1750958353
    }
]