[
    {
        "content": "<p>I'm developing a proof-of-concept to understand how to implement a resource (specified in a .wit file for a WASM module) in a Wasmtime host. </p>\n<p>My setup: </p>\n<ul>\n<li>Host: Written in Rust using Wasmtime component model (no .wit file in the host to keep it generic for loading different WASM modules) </li>\n<li>WASM module: Also written in Rust using <code>wit-bindgen</code> </li>\n</ul>\n<p>My ultimate goal is to enable nested JSON (objects and arrays) in the interface between the host and WASM module, as suggested in <a href=\"https://github.com/WebAssembly/component-model/issues/430#issuecomment-2542427556\">this Component Model discussion</a>. </p>\n<h2>Current Implementation</h2>\n<p>I've created a JSON structure in the host: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Define the json variant</span>\n<span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">Json</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Null</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Boolean</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">Number</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LazyJson</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">Object</span><span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">LazyJson</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Implement the LazyJson resource</span>\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">LazyJson</span><span class=\"p\">;</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">LazyJson</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Json</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"LazyJson::get called!\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">Json</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"s\">\"dummy value\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I've set up the linker and store:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\">  </span><span class=\"c1\">// Using wasmtime::runtime::component::linker</span>\n<span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">MyState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"n\">lazy_json</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">LazyJson</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">);</span>\n</code></pre></div>\n<h2>Where I'm Stuck</h2>\n<p>I'm struggling with how to add the resource to the linker. I believe I need to do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">().</span><span class=\"n\">resource</span><span class=\"p\">(</span><span class=\"s\">\"lazy-json\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ResourceType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dtor</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>But I'm uncertain how to specify the <code>ResourceType</code> and <code>dtor</code> (destructor).</p>\n<p>After adding the resource to the linker, I need to wrap the function, perhaps something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">().</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"lazy-json\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"get\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">???</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Here I'm unsure what the arguments should be.</p>\n<h2>Question</h2>\n<p>Are there any examples demonstrating how to in a host implement and register a resource defined in <code>.wit</code> for a WASM module using Wasmtime and the Component Model? I'm looking for guidance on:</p>\n<ol>\n<li>How to properly define the resource type</li>\n<li>How to create a destructor for the resource</li>\n<li>How to correctly wrap and expose the resource functions to the WASM module</li>\n</ol>\n<p>Even a simple \"hello world\" example would be helpful. Thanks!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/430#issuecomment-2542427556\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/487532c3b51e0fea5f8ab0e90b03de555742d761/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323463323539653765343733363366626164633463303932653163623466656238363535633533363239383736306466666339353432313938393166643964302f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f343330&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/430#issuecomment-2542427556\" title=\"Support Recursive Values 路 Issue #430 路 WebAssembly/component-model\">Support Recursive Values 路 Issue #430 路 WebAssembly/component-model</a></div><div class=\"message_embed_description\">There are quite a few cases that require defining recursive values: package wit:json@0.1.0; interface types { variant json { null, boolean(bool), number(float64), string(string), array(list&lt;json&gt;),...</div></div></div>",
        "id": 502140675,
        "sender_full_name": "Utilize3214",
        "timestamp": 1740602564
    },
    {
        "content": "<p>Hello!</p>\n<p>Currently there's not great documentation for this, and the \"best\" location is to look around at the test in the <code>tests/all/component_model/*.rs</code>. The reason for this is that it's expected that hosts primarily use WIT and generated bindings  (<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/bindgen_examples/_4_imported_resources/index.html\">which looks like this</a>). Given though that the guest is using <code>wit-bindgen</code> is there a reason to not use the same WIT to generate bindings on the host? The end-result of bindgen is an <code>add_to_linker</code> function and you can still add, for example, WASI to the linker so the WIT files doesn't have to be an exhaustive definition of the world you're using, just a partial enough piece for the JSON wrapper.</p>\n<p>In addition to some answers below you can also explore the generated code of <code>wasmtime::component::bindgen!</code> by using <code>cargo expand</code> too (a few more words on debugging <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/macro.bindgen.html#debugging-and-exploring\">here</a> too)</p>\n<blockquote>\n<p>How to properly define the resource type</p>\n</blockquote>\n<p>You're right that [<code>Linker::resource</code>]https://docs.rs/wasmtime/latest/wasmtime/component/struct.LinkerInstance.html#method.resource) is what you want. You'll use <code>ResourceType::host::&lt;LazyJson&gt;()</code> here.</p>\n<blockquote>\n<p>How to create a destructor for the resource</p>\n</blockquote>\n<p>This is up to you. A resource is a <code>u32</code> on the host and you get to decide what to do with that <code>u32</code>. Most of the time though it's a <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.ResourceTable.html\"><code>ResourceTable</code></a> where the destructor is removing the index from the table.</p>\n<blockquote>\n<p>How to correctly wrap and expose the resource functions to the WASM module</p>\n</blockquote>\n<p>The function you'll define has type <code>fn(StoreContextMut&lt;'_, T&gt;, Resource&lt;LazyJson&gt;) -&gt; wasmtime::Result&lt;Json&gt;</code>. Defining the <code>Json</code> type is possible with <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/derive.ComponentType.html\"><code>#[derive(ComponentType)]</code></a> but I'd recommend using <code>bindgen!</code> instead as it'll be far less error-prone.</p>",
        "id": 502165525,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1740613090
    }
]