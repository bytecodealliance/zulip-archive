[
    {
        "content": "<p>Does anyone know of any examples of configuring a host for a world that includes WASI interfaces implemented using wasmtime-wasi, using the generated <code>WorldType::add_to_linker</code> function instead of having to name each interface's <code>add_to_linker</code> individually? I was able to do this with earlier versions of Wasmtime, but now with the removal of <code>WasiImpl</code>, I've yet to figure out how to arrange things like the <code>monotonic_clock::Host</code> implementation.</p>",
        "id": 538455001,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1757428901
    },
    {
        "content": "<p>For example, if I add a WASI import to Wasmtime's resource-component example, <a href=\"https://github.com/sunfishcode/wasmtime/tree/sunfishcode/world-with-wasi-add-to-linker\">like this</a>, and run <code>cargo check --example resource-component</code>, I get \"the trait bound <code>ComponentRunStates: wasi::io::error::Host</code> is not satisfied\" errors.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sunfishcode/wasmtime/tree/sunfishcode/world-with-wasi-add-to-linker\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/cc49d1e4f6a5cc935856fc602c1da94ee709bf3e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313139393761373265336364346665623463623466656334646633386435666231303166646538636465383866356432393937643064633461666634626263622f73756e66697368636f64652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sunfishcode/wasmtime/tree/sunfishcode/world-with-wasi-add-to-linker\" title=\"GitHub - sunfishcode/wasmtime at sunfishcode/world-with-wasi-add-to-linker\">GitHub - sunfishcode/wasmtime at sunfishcode/world-with-wasi-add-to-linker</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAsssembly, using Cranelift - GitHub - sunfishcode/wasmtime at sunfishcode/world-with-wasi-add-to-linker</div></div></div>",
        "id": 538463606,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1757431200
    },
    {
        "content": "<p>I could implement those <code>Host</code> traits manually, but I want to use wasmtime-wasi's implementations. And I could switch to calling per-interface <code>add_to_linker</code>, but my actual use case has several worlds to chose from and a lot of interfaces, and it's important to avoid adding interfaces that aren't in a given world, so the per-world <code>add_to_linker</code> is desirable.</p>",
        "id": 538464267,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1757431378
    },
    {
        "content": "<p>In practice most situations I've seen skip calling <code>WorldType::add_to_linker</code> and call direct <code>add_to_linker</code> functions. Basically the auto-generated version is too strict for \"this world is implemented across multiple crates\"</p>",
        "id": 538465937,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757431831
    },
    {
        "content": "<p>I had recently done a major refactor in order to use the auto-generated <code>WorldType::add_to_linker</code>s, because it's important for my project to have a single source of truth for what interfaces are linked in. My best alternative idea now is splitting all the worlds up into WASI worlds and non-WASI worlds so that I can do the <code>WorldType::add_to_linker</code> for the non-WASI parts. And then introspecting on the <code>ComponentType</code> to add individual WASI interfaces depending on what imports it has.</p>",
        "id": 538486921,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1757437826
    },
    {
        "content": "<p>If you've got ideas on how to refactor codegen to be more amenable to this I think it'd be fine to update, right now most of codegen is \"the first thing that worked\"</p>\n<p>Otherwise though one possible option would be to ensure all components go through a filter like <code>wasm-tools component targets</code> which verifies imports and that's the source-of-truth where bindings and such after aren't load bearing in that fashion</p>",
        "id": 538492206,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1757438931
    }
]