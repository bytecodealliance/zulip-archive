[
    {
        "content": "<p>Hey Folks, I wanted to point you all to question from Luke posted as a github issue on Sig-Embedded on what the hardware minimum requirement should be for memory management and control on embedded devices.</p>\n<p>Luke's also got some cool ideas about how a MPU could mimic a limited MMU - anyway, please do head over read and chip in with your view : <a href=\"https://github.com/bytecodealliance/sig-embedded/issues/7\">https://github.com/bytecodealliance/sig-embedded/issues/7</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/sig-embedded/issues/7\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/02b811a47c5eab0e8e913159368f2c8e24c1b93f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343662376531373630383233643739633662333336373661343434656335613734396166646564343233313138343763646433613963613261623737656434382f62797465636f6465616c6c69616e63652f7369672d656d6265646465642f6973737565732f37&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/sig-embedded/issues/7\" title=\"Request for clarifications regarding hardware capabilities for shared mappings 路 Issue #7 路 bytecodealliance/sig-embedded\">Request for clarifications regarding hardware capabilities for shared mappings 路 Issue #7 路 bytecodealliance/sig-embedded</a></div><div class=\"message_embed_description\">In the target platforms doc, there is a section explaining that the E-SIG feels comfortable assuming an MPU or MMU for efficient implementations. This is very helpful since it gives us a baseline o...</div></div></div>",
        "id": 490206335,
        "sender_full_name": "Chris Woods",
        "timestamp": 1734717128
    },
    {
        "content": "<p>Hi, I finally <a href=\"#narrow/channel/206238-general/topic/Zero.20copy.20.28mmap.29.20data.20streams.20between.20components/near/534820137\">completed my prototype</a> for memory attached publisher subscriber with wasmtime (it requires a host extension and WASI 0.3 streams) and would love feed-back.</p>",
        "id": 534820712,
        "sender_full_name": "Christof Petig",
        "timestamp": 1755433607
    },
    {
        "content": "<p>This extends my initial mmap prototype, the example where it attaches a large buffer to multiple components to change numbers in an array still works, but the publisher subscriber functionality I am most excited about.</p>",
        "id": 534820785,
        "sender_full_name": "Christof Petig",
        "timestamp": 1755433694
    },
    {
        "content": "<p>Most likely this part is of interest to this SIG:</p>\n<p>The buffer API could be implemented with copying without the guests noticing, also several efficient zero-copy mappings to MPU only embedded are possible. The host can optimize the implementation to avoid attachment during run-time without affecting the ownership logic, this of course assumes a well-behaved publisher; subscribers remain untrusted. Adding a subscriber only requires creating another <code>stream&lt;memory-block&gt;</code> on the sender side (and writing four bytes to it per published data). So the overhead per subscriber is minimal.</p>",
        "id": 534820842,
        "sender_full_name": "Christof Petig",
        "timestamp": 1755433783
    },
    {
        "content": "<p>The direct link for convenience is <a href=\"https://github.com/cpetig/wasm-shm-test/tree/main?tab=readme-ov-file#publisher-subscriber\">https://github.com/cpetig/wasm-shm-test/tree/main?tab=readme-ov-file#publisher-subscriber</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/wasm-shm-test/tree/main?tab=readme-ov-file#publisher-subscriber\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/59e87176d79600b471e6ad9481720e6c4588ba53/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353836626638313030393261643262373565303665353839393136643734383030386137633039623565643064316666393462653633313239396331323062372f6370657469672f7761736d2d73686d2d74657374&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/wasm-shm-test/tree/main?tab=readme-ov-file#publisher-subscriber\" title=\"GitHub - cpetig/wasm-shm-test: Prototype for zero-copy shared memory inter-component exchange\">GitHub - cpetig/wasm-shm-test: Prototype for zero-copy shared memory inter-component exchange</a></div><div class=\"message_embed_description\">Prototype for zero-copy shared memory inter-component exchange - cpetig/wasm-shm-test</div></div></div>",
        "id": 534820921,
        "sender_full_name": "Christof Petig",
        "timestamp": 1755433871
    }
]